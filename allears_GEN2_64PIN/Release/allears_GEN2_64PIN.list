
allears_GEN2_64PIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec0  08007ec0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec8  08007ec8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200000a4  08007f74  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000087c  08007f74  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252c0  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000550a  00000000  00000000  00045394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001386b  00000000  00000000  0004a89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0005e109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f08  00000000  00000000  0005f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afd3  00000000  00000000  000613c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000079a0  00000000  00000000  0007c39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  00083d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077c8 	.word	0x080077c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080077c8 	.word	0x080077c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <HAL_ADC_ErrorCallback>:
	}
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	adc1_cur_state = ECHO_ADC1_ERROR;
 8000a0c:	4a02      	ldr	r2, [pc, #8]	; (8000a18 <HAL_ADC_ErrorCallback+0xc>)
 8000a0e:	2305      	movs	r3, #5
 8000a10:	7013      	strb	r3, [r2, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 8000a12:	4a02      	ldr	r2, [pc, #8]	; (8000a1c <HAL_ADC_ErrorCallback+0x10>)
 8000a14:	7013      	strb	r3, [r2, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8000a16:	4770      	bx	lr
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000001 	.word	0x20000001

08000a20 <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 8000a20:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <Echo_ADC1_Enable+0x18>)
 8000a24:	217f      	movs	r1, #127	; 0x7f
 8000a26:	f002 f90b 	bl	8002c40 <HAL_ADCEx_Calibration_Start>
 8000a2a:	b118      	cbz	r0, 8000a34 <Echo_ADC1_Enable+0x14>
	{
		Error_Handler();
	}
}
 8000a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a30:	f001 b926 	b.w	8001c80 <Error_Handler>
}
 8000a34:	bd08      	pop	{r3, pc}
 8000a36:	bf00      	nop
 8000a38:	20000488 	.word	0x20000488

08000a3c <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8000a3c:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <Echo_ADC2_Enable+0x18>)
 8000a40:	217f      	movs	r1, #127	; 0x7f
 8000a42:	f002 f8fd 	bl	8002c40 <HAL_ADCEx_Calibration_Start>
 8000a46:	b118      	cbz	r0, 8000a50 <Echo_ADC2_Enable+0x14>
	{
		Error_Handler();
	}
}
 8000a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a4c:	f001 b918 	b.w	8001c80 <Error_Handler>
}
 8000a50:	bd08      	pop	{r3, pc}
 8000a52:	bf00      	nop
 8000a54:	200004ec 	.word	0x200004ec

08000a58 <Echo_ADC_State_Init>:

/*
 * ADC INIT
 * */
void Echo_ADC_State_Init(void)
{
 8000a58:	b508      	push	{r3, lr}
		Echo_Stop_ADC1_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC1_CUR_STATE = state;
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <Echo_ADC_State_Init+0x18>)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	7013      	strb	r3, [r2, #0]
		Echo_Stop_ADC2_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC2_CUR_STATE = state;
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <Echo_ADC_State_Init+0x1c>)
 8000a62:	7013      	strb	r3, [r2, #0]
	Echo_ADC1_Enable();
 8000a64:	f7ff ffdc 	bl	8000a20 <Echo_ADC1_Enable>
}
 8000a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_ADC2_Enable();
 8000a6c:	f7ff bfe6 	b.w	8000a3c <Echo_ADC2_Enable>
 8000a70:	200000c0 	.word	0x200000c0
 8000a74:	200000c1 	.word	0x200000c1

08000a78 <Echo_Start_ADC1_Conv>:
{
 8000a78:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 8000a7a:	4905      	ldr	r1, [pc, #20]	; (8000a90 <Echo_Start_ADC1_Conv+0x18>)
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <Echo_Start_ADC1_Conv+0x1c>)
 8000a7e:	220a      	movs	r2, #10
 8000a80:	f001 ffee 	bl	8002a60 <HAL_ADC_Start_DMA>
 8000a84:	b118      	cbz	r0, 8000a8e <Echo_Start_ADC1_Conv+0x16>
}
 8000a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a8a:	f001 b8f9 	b.w	8001c80 <Error_Handler>
}
 8000a8e:	bd08      	pop	{r3, pc}
 8000a90:	200000c2 	.word	0x200000c2
 8000a94:	20000488 	.word	0x20000488

08000a98 <HAL_ADC_ConvCpltCallback>:
{
 8000a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (hadc->Instance == hadc1.Instance)
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000a9e:	6802      	ldr	r2, [r0, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
{
 8000aa4:	4604      	mov	r4, r0
	if (hadc->Instance == hadc1.Instance)
 8000aa6:	d13b      	bne.n	8000b20 <HAL_ADC_ConvCpltCallback+0x88>
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000aaa:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000aac:	f103 0114 	add.w	r1, r3, #20
 8000ab0:	4616      	mov	r6, r2
 8000ab2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ab6:	f842 0b04 	str.w	r0, [r2], #4
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d1f9      	bne.n	8000ab2 <HAL_ADC_ConvCpltCallback+0x1a>
		if (vpw_set_flag == true)
 8000abe:	4d25      	ldr	r5, [pc, #148]	; (8000b54 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000ac0:	782b      	ldrb	r3, [r5, #0]
 8000ac2:	b35b      	cbz	r3, 8000b1c <HAL_ADC_ConvCpltCallback+0x84>
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 8000ac4:	f8b6 8000 	ldrh.w	r8, [r6]
 8000ac8:	8877      	ldrh	r7, [r6, #2]
 8000aca:	eba8 0007 	sub.w	r0, r8, r7
 8000ace:	f7ff fd29 	bl	8000524 <__aeabi_i2d>
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000ad4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f7ff fded 	bl	80006b8 <__aeabi_dcmplt>
 8000ade:	b1e8      	cbz	r0, 8000b1c <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 8000ae0:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 8000ae4:	eba7 0009 	sub.w	r0, r7, r9
 8000ae8:	f7ff fd1c 	bl	8000524 <__aeabi_i2d>
 8000aec:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	4639      	mov	r1, r7
 8000af6:	f7ff fddf 	bl	80006b8 <__aeabi_dcmplt>
 8000afa:	b178      	cbz	r0, 8000b1c <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 8000afc:	eba9 0008 	sub.w	r0, r9, r8
 8000b00:	f7ff fd10 	bl	8000524 <__aeabi_i2d>
 8000b04:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	f7ff fdd3 	bl	80006b8 <__aeabi_dcmplt>
 8000b12:	b118      	cbz	r0, 8000b1c <HAL_ADC_ConvCpltCallback+0x84>
				Echo_VPW_TP_OFF();
 8000b14:	f000 fb97 	bl	8001246 <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	702b      	strb	r3, [r5, #0]
		Echo_Start_ADC1_Conv();
 8000b1c:	f7ff ffac 	bl	8000a78 <Echo_Start_ADC1_Conv>
	if (hadc->Instance == hadc2.Instance)
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d10c      	bne.n	8000b44 <HAL_ADC_ConvCpltCallback+0xac>
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000b2e:	f103 0114 	add.w	r1, r3, #20
 8000b32:	f853 0b04 	ldr.w	r0, [r3], #4
 8000b36:	f842 0b04 	str.w	r0, [r2], #4
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d1f9      	bne.n	8000b32 <HAL_ADC_ConvCpltCallback+0x9a>
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
}
 8000b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b48:	20000488 	.word	0x20000488
 8000b4c:	200000c2 	.word	0x200000c2
 8000b50:	200000fe 	.word	0x200000fe
 8000b54:	2000037e 	.word	0x2000037e
 8000b58:	40340000 	.word	0x40340000
 8000b5c:	200004ec 	.word	0x200004ec
 8000b60:	200000d6 	.word	0x200000d6
 8000b64:	200000ea 	.word	0x200000ea
 8000b68:	20000001 	.word	0x20000001

08000b6c <Echo_Stop_ADC1_Conv>:
{
 8000b6c:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <Echo_Stop_ADC1_Conv+0x14>)
 8000b70:	f002 f824 	bl	8002bbc <HAL_ADC_Stop_DMA>
 8000b74:	b118      	cbz	r0, 8000b7e <Echo_Stop_ADC1_Conv+0x12>
}
 8000b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000b7a:	f001 b881 	b.w	8001c80 <Error_Handler>
}
 8000b7e:	bd08      	pop	{r3, pc}
 8000b80:	20000488 	.word	0x20000488

08000b84 <Echo_Stop_ADC2_Conv>:
{
 8000b84:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <Echo_Stop_ADC2_Conv+0x14>)
 8000b88:	f002 f818 	bl	8002bbc <HAL_ADC_Stop_DMA>
 8000b8c:	b118      	cbz	r0, 8000b96 <Echo_Stop_ADC2_Conv+0x12>
}
 8000b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000b92:	f001 b875 	b.w	8001c80 <Error_Handler>
}
 8000b96:	bd08      	pop	{r3, pc}
 8000b98:	200004ec 	.word	0x200004ec

08000b9c <Echo_Stepup_ADC1_AVG>:
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <Echo_Stepup_ADC1_AVG+0x28>)
	float adc1_avg = 0;
 8000b9e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000bc8 <Echo_Stepup_ADC1_AVG+0x2c>
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000ba2:	2300      	movs	r3, #0
		adc1_avg += setpup_adc[i];
 8000ba4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8000ba8:	ee07 1a10 	vmov	s14, r1
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000bac:	3301      	adds	r3, #1
		adc1_avg += setpup_adc[i];
 8000bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000bb2:	2b0a      	cmp	r3, #10
		adc1_avg += setpup_adc[i];
 8000bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000bb8:	d1f4      	bne.n	8000ba4 <Echo_Stepup_ADC1_AVG+0x8>
}
 8000bba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000bbe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000bc2:	4770      	bx	lr
 8000bc4:	200000fe 	.word	0x200000fe
 8000bc8:	00000000 	.word	0x00000000

08000bcc <Echo_ADC_Calc_Stepup_V>:
	f_adc_val = in_adc_val / 4095.f;
 8000bcc:	ee07 0a90 	vmov	s15, r0
 8000bd0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000bf4 <Echo_ADC_Calc_Stepup_V+0x28>
 8000bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 8000bd8:	ee30 0a20 	vadd.f32	s0, s0, s1
	f_adc_val = in_adc_val / 4095.f;
 8000bdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 8000be0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000bf8 <Echo_ADC_Calc_Stepup_V+0x2c>
 8000be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be8:	ee80 7a20 	vdiv.f32	s14, s0, s1
}
 8000bec:	ee27 0a87 	vmul.f32	s0, s15, s14
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	457ff000 	.word	0x457ff000
 8000bf8:	40533333 	.word	0x40533333

08000bfc <Echo_Get_ADC1_State>:
}
 8000bfc:	4b01      	ldr	r3, [pc, #4]	; (8000c04 <Echo_Get_ADC1_State+0x8>)
 8000bfe:	7818      	ldrb	r0, [r3, #0]
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <Echo_Set_ADC1_State>:
	switch (state)
 8000c08:	1e43      	subs	r3, r0, #1
{
 8000c0a:	b510      	push	{r4, lr}
 8000c0c:	4604      	mov	r4, r0
	switch (state)
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d806      	bhi.n	8000c20 <Echo_Set_ADC1_State+0x18>
 8000c12:	e8df f003 	tbb	[pc, r3]
 8000c16:	0803      	.short	0x0803
 8000c18:	0b05      	.short	0x0b05
 8000c1a:	03          	.byte	0x03
 8000c1b:	00          	.byte	0x00
		Echo_Stop_ADC1_Conv();
 8000c1c:	f7ff ffa6 	bl	8000b6c <Echo_Stop_ADC1_Conv>
	ECHO_ADC1_CUR_STATE = state;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <Echo_Set_ADC1_State+0x2c>)
 8000c22:	701c      	strb	r4, [r3, #0]
}
 8000c24:	bd10      	pop	{r4, pc}
		Echo_Start_ADC1_Conv();
 8000c26:	f7ff ff27 	bl	8000a78 <Echo_Start_ADC1_Conv>
		break;
 8000c2a:	e7f9      	b.n	8000c20 <Echo_Set_ADC1_State+0x18>
		adc1_cur_state = ECHO_ADC1_RUN;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <Echo_Set_ADC1_State+0x30>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e7f5      	b.n	8000c20 <Echo_Set_ADC1_State+0x18>
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	20000000 	.word	0x20000000

08000c3c <Echo_ADC_Handle>:
	if (ECHO_ADC1_CUR_STATE != adc1_cur_state)
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <Echo_ADC_Handle+0x14>)
 8000c3e:	7818      	ldrb	r0, [r3, #0]
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <Echo_ADC_Handle+0x18>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4283      	cmp	r3, r0
 8000c46:	d001      	beq.n	8000c4c <Echo_ADC_Handle+0x10>
		Echo_Set_ADC1_State(adc1_cur_state);
 8000c48:	f7ff bfde 	b.w	8000c08 <Echo_Set_ADC1_State>
}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000
 8000c54:	200000c0 	.word	0x200000c0

08000c58 <Echo_Btn_IsHandled>:
echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_IsHandled(void)
{
	return ECHO_BTN_STATE_HANDLED;
}
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <Echo_Btn_IsHandled+0x8>)
 8000c5a:	7898      	ldrb	r0, [r3, #2]
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000114 	.word	0x20000114

08000c64 <Echo_Btn_Handled_Clear>:

void Echo_Btn_Handled_Clear(void)
{
	ECHO_BTN_STATE_HANDLED = false;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <Echo_Btn_Handled_Clear+0x8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	709a      	strb	r2, [r3, #2]
}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000114 	.word	0x20000114

08000c70 <Echo_Btn_Handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_Handle(void)
{
 8000c70:	b508      	push	{r3, lr}
	char res_msg[10] =
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 8000c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <Echo_Btn_Handle+0x44>)
 8000c78:	f002 fc78 	bl	800356c <HAL_GPIO_ReadPin>
 8000c7c:	1e43      	subs	r3, r0, #1
 8000c7e:	4259      	negs	r1, r3
 8000c80:	4159      	adcs	r1, r3

	if (pressed != ECHO_BTN_STATE_PRESSED)
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <Echo_Btn_Handle+0x48>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	428a      	cmp	r2, r1
 8000c88:	d009      	beq.n	8000c9e <Echo_Btn_Handle+0x2e>
#ifdef DEBUG
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
		ECHO_SHELL_PRINT(("%s\n",res_msg));
#endif

		if (ECHO_BTN_STATE_PRESSED == false)
 8000c8a:	2801      	cmp	r0, #1
		ECHO_BTN_STATE_PRESSED = pressed;
 8000c8c:	7019      	strb	r1, [r3, #0]
		if (ECHO_BTN_STATE_PRESSED == false)
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	d001      	beq.n	8000c98 <Echo_Btn_Handle+0x28>
		{
			/* Only when cover is closed, send signal */
			ECHO_BTN_STATE_HANDLED = false;
 8000c94:	709a      	strb	r2, [r3, #2]
		else
		{
			/* Ignored */
		}
	}
}
 8000c96:	bd08      	pop	{r3, pc}
			ECHO_BTN_STATE_HANDLED = true;
 8000c98:	7098      	strb	r0, [r3, #2]
			ECHO_BTN_STATE_HELD_TICK++;
 8000c9a:	605a      	str	r2, [r3, #4]
}
 8000c9c:	e7fb      	b.n	8000c96 <Echo_Btn_Handle+0x26>
	else if (ECHO_BTN_STATE_PRESSED == true)
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d0f9      	beq.n	8000c96 <Echo_Btn_Handle+0x26>
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	2a0a      	cmp	r2, #10
 8000ca6:	d101      	bne.n	8000cac <Echo_Btn_Handle+0x3c>
			ECHO_BTN_STATE_HELD_TICK++;
 8000ca8:	220b      	movs	r2, #11
 8000caa:	e7f6      	b.n	8000c9a <Echo_Btn_Handle+0x2a>
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 8000cac:	2a09      	cmp	r2, #9
 8000cae:	d8f2      	bhi.n	8000c96 <Echo_Btn_Handle+0x26>
			ECHO_BTN_STATE_HELD_TICK++;
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	e7f2      	b.n	8000c9a <Echo_Btn_Handle+0x2a>
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	20000114 	.word	0x20000114

08000cbc <Echo_Flash_Write>:
{
	return FLASH_BANK_1;
}

HAL_StatusTypeDef Echo_Flash_Write()
{
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000cbe:	f002 fa39 	bl	8003134 <HAL_FLASH_Unlock>
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <Echo_Flash_Write+0xb8>)
 8000cc4:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8000cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ccc:	b291      	uxth	r1, r2
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d035      	beq.n	8000d3e <Echo_Flash_Write+0x82>
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <Echo_Flash_Write+0xbc>)
 8000cd4:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <Echo_Flash_Write+0xc0>)
 8000cda:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d82d      	bhi.n	8000d3e <Echo_Flash_Write+0x82>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	0adb      	lsrs	r3, r3, #11

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <Echo_Flash_Write+0xc4>)
 8000ce8:	6013      	str	r3, [r2, #0]
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <Echo_Flash_Write+0xb8>)
 8000cec:	f8d2 15e0 	ldr.w	r1, [r2, #1504]	; 0x5e0
 8000cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf4:	b288      	uxth	r0, r1
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d023      	beq.n	8000d42 <Echo_Flash_Write+0x86>
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <Echo_Flash_Write+0xbc>)
 8000cfc:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 8000d00:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <Echo_Flash_Write+0xc8>)
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d81b      	bhi.n	8000d42 <Echo_Flash_Write+0x86>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000d0a:	1a52      	subs	r2, r2, r1
 8000d0c:	0ad2      	lsrs	r2, r2, #11
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8000d0e:	f1c3 0101 	rsb	r1, r3, #1
 8000d12:	440a      	add	r2, r1
 8000d14:	491c      	ldr	r1, [pc, #112]	; (8000d88 <Echo_Flash_Write+0xcc>)
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 8000d16:	481d      	ldr	r0, [pc, #116]	; (8000d8c <Echo_Flash_Write+0xd0>)
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8000d18:	600a      	str	r2, [r1, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	6001      	str	r1, [r0, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d1e:	481c      	ldr	r0, [pc, #112]	; (8000d90 <Echo_Flash_Write+0xd4>)
 8000d20:	2400      	movs	r4, #0
	EraseInitStruct.Banks = BankNumber;
 8000d22:	e9c0 4100 	strd	r4, r1, [r0]
	EraseInitStruct.Page = FirstPage;
	EraseInitStruct.NbPages = NbOfPages;

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d26:	491b      	ldr	r1, [pc, #108]	; (8000d94 <Echo_Flash_Write+0xd8>)
	EraseInitStruct.NbPages = NbOfPages;
 8000d28:	e9c0 3202 	strd	r3, r2, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000d2c:	f002 faf6 	bl	800331c <HAL_FLASHEx_Erase>
 8000d30:	4604      	mov	r4, r0
 8000d32:	b140      	cbz	r0, 8000d46 <Echo_Flash_Write+0x8a>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 8000d34:	f002 fa1a 	bl	800316c <HAL_FLASH_GetError>
 8000d38:	b2c4      	uxtb	r4, r0
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
	return HAL_OK;
}
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000d3e:	233c      	movs	r3, #60	; 0x3c
 8000d40:	e7d1      	b.n	8000ce6 <Echo_Flash_Write+0x2a>
 8000d42:	223f      	movs	r2, #63	; 0x3f
 8000d44:	e7e3      	b.n	8000d0e <Echo_Flash_Write+0x52>
	Address = FLASH_USER_START_ADDR;
 8000d46:	4d14      	ldr	r5, [pc, #80]	; (8000d98 <Echo_Flash_Write+0xdc>)
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <Echo_Flash_Write+0xc0>)
	while (Address < FLASH_USER_END_ADDR)
 8000d4a:	4e0e      	ldr	r6, [pc, #56]	; (8000d84 <Echo_Flash_Write+0xc8>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8000d4c:	4f13      	ldr	r7, [pc, #76]	; (8000d9c <Echo_Flash_Write+0xe0>)
	Address = FLASH_USER_START_ADDR;
 8000d4e:	602b      	str	r3, [r5, #0]
	while (Address < FLASH_USER_END_ADDR)
 8000d50:	6829      	ldr	r1, [r5, #0]
 8000d52:	42b1      	cmp	r1, r6
 8000d54:	d302      	bcc.n	8000d5c <Echo_Flash_Write+0xa0>
	HAL_FLASH_Lock();
 8000d56:	f002 f9ff 	bl	8003158 <HAL_FLASH_Lock>
	return HAL_OK;
 8000d5a:	e7ee      	b.n	8000d3a <Echo_Flash_Write+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2000      	movs	r0, #0
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f002 fa34 	bl	80031d0 <HAL_FLASH_Program>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d1e3      	bne.n	8000d34 <Echo_Flash_Write+0x78>
			Address = Address + 4;
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	3304      	adds	r3, #4
 8000d70:	602b      	str	r3, [r5, #0]
 8000d72:	e7ed      	b.n	8000d50 <Echo_Flash_Write+0x94>
 8000d74:	1fff7000 	.word	0x1fff7000
 8000d78:	03fffc00 	.word	0x03fffc00
 8000d7c:	0801e000 	.word	0x0801e000
 8000d80:	20000134 	.word	0x20000134
 8000d84:	0801ffff 	.word	0x0801ffff
 8000d88:	20000138 	.word	0x20000138
 8000d8c:	20000120 	.word	0x20000120
 8000d90:	20000124 	.word	0x20000124
 8000d94:	2000013c 	.word	0x2000013c
 8000d98:	2000011c 	.word	0x2000011c
 8000d9c:	20000008 	.word	0x20000008

08000da0 <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <Echo_Flash_Read+0x20>)
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <Echo_Flash_Read+0x24>)
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	8892      	ldrh	r2, [r2, #4]
 8000daa:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
			&& pwm_param.pulse_width == 0)
 8000dac:	8818      	ldrh	r0, [r3, #0]
 8000dae:	889a      	ldrh	r2, [r3, #4]
 8000db0:	885b      	ldrh	r3, [r3, #2]
 8000db2:	4310      	orrs	r0, r2
 8000db4:	4318      	orrs	r0, r3
 8000db6:	b280      	uxth	r0, r0
	}
	else
	{
		return HAL_OK;
	}
}
 8000db8:	fab0 f080 	clz	r0, r0
 8000dbc:	0940      	lsrs	r0, r0, #5
 8000dbe:	4770      	bx	lr
 8000dc0:	0801e000 	.word	0x0801e000
 8000dc4:	20000278 	.word	0x20000278

08000dc8 <Echo_LED_Green_Off>:
/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <Echo_LED_Green_Off+0xc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	f002 bbd2 	b.w	8003578 <HAL_GPIO_WritePin>
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <Echo_LED_CTRL>:
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
	if (colors == ECHO_LED_COLOR_NONE)
 8000dd8:	b908      	cbnz	r0, 8000dde <Echo_LED_CTRL+0x6>
	{
		Echo_LED_Off_All();
 8000dda:	f7ff bff5 	b.w	8000dc8 <Echo_LED_Green_Off>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 8000dde:	0783      	lsls	r3, r0, #30
 8000de0:	d505      	bpl.n	8000dee <Echo_LED_CTRL+0x16>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <Echo_LED_CTRL+0x1c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	f002 bbc5 	b.w	8003578 <HAL_GPIO_WritePin>
			Echo_LED_Green_On();
		else
			Echo_LED_Green_Off();
 8000dee:	f7ff bfeb 	b.w	8000dc8 <Echo_LED_Green_Off>
 8000df2:	bf00      	nop
 8000df4:	48000400 	.word	0x48000400

08000df8 <Echo_LED_Init>:
#endif
	}
}

void Echo_LED_Init(void)
{
 8000df8:	b508      	push	{r3, lr}
	Echo_LED_Off_All();
 8000dfa:	f7ff ffe5 	bl	8000dc8 <Echo_LED_Green_Off>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8000dfe:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <Echo_LED_Init+0x10>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	735a      	strb	r2, [r3, #13]
}
 8000e04:	bd08      	pop	{r3, pc}
 8000e06:	bf00      	nop
 8000e08:	20000140 	.word	0x20000140

08000e0c <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 8000e0c:	b538      	push	{r3, r4, r5, lr}
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8000e0e:	4c04      	ldr	r4, [pc, #16]	; (8000e20 <Echo_LED_Enable+0x14>)
 8000e10:	2500      	movs	r5, #0
 8000e12:	7365      	strb	r5, [r4, #13]
	ECHO_LED_ON = false;
 8000e14:	7025      	strb	r5, [r4, #0]
	Echo_LED_Off_All();
 8000e16:	f7ff ffd7 	bl	8000dc8 <Echo_LED_Green_Off>
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 8000e1a:	60a5      	str	r5, [r4, #8]
 8000e1c:	7325      	strb	r5, [r4, #12]
}
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	20000140 	.word	0x20000140

08000e24 <Echo_Set_LED_State>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_Set_LED_State(echo_led_sate_t led_state)
{
 8000e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
#endif
	Echo_LED_Enable();

	if (ECHO_LED_IND_DISABLED() == true)
 8000e26:	4d13      	ldr	r5, [pc, #76]	; (8000e74 <Echo_Set_LED_State+0x50>)
{
 8000e28:	4604      	mov	r4, r0
	Echo_LED_Enable();
 8000e2a:	f7ff ffef 	bl	8000e0c <Echo_LED_Enable>
	if (ECHO_LED_IND_DISABLED() == true)
 8000e2e:	7b2e      	ldrb	r6, [r5, #12]
 8000e30:	b9b6      	cbnz	r6, 8000e60 <Echo_Set_LED_State+0x3c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
		led_state = ECHO_LED_STATE_NONE;
 8000e32:	2c03      	cmp	r4, #3

	if (led_state == ECHO_LED_CUR_STATE)
 8000e34:	7b6b      	ldrb	r3, [r5, #13]
		led_state = ECHO_LED_STATE_NONE;
 8000e36:	bf28      	it	cs
 8000e38:	2400      	movcs	r4, #0
	if (led_state == ECHO_LED_CUR_STATE)
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d010      	beq.n	8000e60 <Echo_Set_LED_State+0x3c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <Echo_Set_LED_State+0x54>)
 8000e40:	2306      	movs	r3, #6
 8000e42:	4363      	muls	r3, r4
 8000e44:	18d1      	adds	r1, r2, r3
 8000e46:	5cd0      	ldrb	r0, [r2, r3]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 8000e48:	884f      	ldrh	r7, [r1, #2]
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 8000e4a:	9001      	str	r0, [sp, #4]
		Echo_LED_Off_All();
 8000e4c:	f7ff ffbc 	bl	8000dc8 <Echo_LED_Green_Off>
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	429f      	cmp	r7, r3
 8000e56:	9801      	ldr	r0, [sp, #4]
 8000e58:	d104      	bne.n	8000e64 <Echo_Set_LED_State+0x40>
	{
		ECHO_LED_ON = false;
 8000e5a:	702e      	strb	r6, [r5, #0]
		ECHO_LED_TIME_TICK = 0;
 8000e5c:	606e      	str	r6, [r5, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 8000e5e:	736c      	strb	r4, [r5, #13]

}
 8000e60:	b003      	add	sp, #12
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 8000e64:	f7ff ffb8 	bl	8000dd8 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 8000e6c:	f001 fa22 	bl	80022b4 <HAL_GetTick>
 8000e70:	6068      	str	r0, [r5, #4]
 8000e72:	e7f4      	b.n	8000e5e <Echo_Set_LED_State+0x3a>
 8000e74:	20000140 	.word	0x20000140
 8000e78:	080077ec 	.word	0x080077ec

08000e7c <Echo_LED_Handle>:
		Echo_Set_LED_State(ECHO_LED_STATE_NONE);
		break;
	}
}
void Echo_LED_Handle(void)
{
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 8000e7e:	4c25      	ldr	r4, [pc, #148]	; (8000f14 <Echo_LED_Handle+0x98>)
 8000e80:	7b63      	ldrb	r3, [r4, #13]
 8000e82:	b1a3      	cbz	r3, 8000eae <Echo_LED_Handle+0x32>
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d906      	bls.n	8000e96 <Echo_LED_Handle+0x1a>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8000e8c:	7023      	strb	r3, [r4, #0]
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
		ECHO_LED_ON = false;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}
}
 8000e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Echo_LED_Off_All();
 8000e92:	f7ff bf99 	b.w	8000dc8 <Echo_LED_Green_Off>
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 8000e96:	68a2      	ldr	r2, [r4, #8]
 8000e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d107      	bne.n	8000eb0 <Echo_LED_Handle+0x34>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8000ea4:	7023      	strb	r3, [r4, #0]
	Echo_LED_Off_All();
 8000ea6:	f7ff ff8f 	bl	8000dc8 <Echo_LED_Green_Off>
		ECHO_LED_TIMED_OUT = true;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	7323      	strb	r3, [r4, #12]
}
 8000eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 8000eb0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	d8fa      	bhi.n	8000eae <Echo_LED_Handle+0x32>
		ECHO_LED_TIMEOUT_TICK++;
 8000eb8:	3201      	adds	r2, #1
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8000eba:	4917      	ldr	r1, [pc, #92]	; (8000f18 <Echo_LED_Handle+0x9c>)
		ECHO_LED_TIMEOUT_TICK++;
 8000ebc:	60a2      	str	r2, [r4, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	4353      	muls	r3, r2
 8000ec2:	18c8      	adds	r0, r1, r3
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 8000ec4:	f64f 76fd 	movw	r6, #65533	; 0xfffd
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8000ec8:	8845      	ldrh	r5, [r0, #2]
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 8000eca:	1e6a      	subs	r2, r5, #1
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	42b2      	cmp	r2, r6
 8000ed0:	d8ed      	bhi.n	8000eae <Echo_LED_Handle+0x32>
	if (ECHO_LED_ON == false
 8000ed2:	7822      	ldrb	r2, [r4, #0]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 8000ed4:	8886      	ldrh	r6, [r0, #4]
	if (ECHO_LED_ON == false
 8000ed6:	b14a      	cbz	r2, 8000eec <Echo_LED_Handle+0x70>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 8000ed8:	f001 f9ec 	bl	80022b4 <HAL_GetTick>
 8000edc:	6863      	ldr	r3, [r4, #4]
 8000ede:	1ac0      	subs	r0, r0, r3
 8000ee0:	42b0      	cmp	r0, r6
 8000ee2:	d3e4      	bcc.n	8000eae <Echo_LED_Handle+0x32>
		Echo_LED_Off_All();
 8000ee4:	f7ff ff70 	bl	8000dc8 <Echo_LED_Green_Off>
		ECHO_LED_ON = false;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e00a      	b.n	8000f02 <Echo_LED_Handle+0x86>
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 8000eec:	5ccf      	ldrb	r7, [r1, r3]
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 8000eee:	f001 f9e1 	bl	80022b4 <HAL_GetTick>
 8000ef2:	6863      	ldr	r3, [r4, #4]
 8000ef4:	1ac0      	subs	r0, r0, r3
 8000ef6:	42a8      	cmp	r0, r5
 8000ef8:	d308      	bcc.n	8000f0c <Echo_LED_Handle+0x90>
		Echo_LED_CTRL(led_ind.led_colors);
 8000efa:	4638      	mov	r0, r7
 8000efc:	f7ff ff6c 	bl	8000dd8 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8000f00:	2301      	movs	r3, #1
		ECHO_LED_ON = false;
 8000f02:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 8000f04:	f001 f9d6 	bl	80022b4 <HAL_GetTick>
 8000f08:	6060      	str	r0, [r4, #4]
 8000f0a:	e7d0      	b.n	8000eae <Echo_LED_Handle+0x32>
	else if (ECHO_LED_ON == true
 8000f0c:	7823      	ldrb	r3, [r4, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0cd      	beq.n	8000eae <Echo_LED_Handle+0x32>
 8000f12:	e7e1      	b.n	8000ed8 <Echo_LED_Handle+0x5c>
 8000f14:	20000140 	.word	0x20000140
 8000f18:	080077ec 	.word	0x080077ec

08000f1c <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f1c:	b507      	push	{r0, r1, r2, lr}
	if (ch == '\n')
 8000f1e:	280a      	cmp	r0, #10
{
 8000f20:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 8000f22:	d106      	bne.n	8000f32 <__io_putchar+0x16>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__io_putchar+0x2c>)
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <__io_putchar+0x30>)
 8000f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f004 fbbd 	bl	80056ac <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f36:	2201      	movs	r2, #1
 8000f38:	a901      	add	r1, sp, #4
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <__io_putchar+0x30>)
 8000f3c:	f004 fbb6 	bl	80056ac <HAL_UART_Transmit>
	return ch;
}
 8000f40:	9801      	ldr	r0, [sp, #4]
 8000f42:	b003      	add	sp, #12
 8000f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f48:	08007b7f 	.word	0x08007b7f
 8000f4c:	200007d8 	.word	0x200007d8

08000f50 <Echo_ShellPrint_Char>:

	ECHO_SHELL_UART->TDR = st_rcv_byte;
}

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
	uint16_t i;

	if (len == 0)
 8000f52:	b171      	cbz	r1, 8000f72 <Echo_ShellPrint_Char+0x22>
 8000f54:	3901      	subs	r1, #1
 8000f56:	1e45      	subs	r5, r0, #1
 8000f58:	fa10 f481 	uxtah	r4, r0, r1
		return;

	for (i = 0; i < len; i++)
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 8000f5c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000f60:	f004 fd34 	bl	80059cc <putchar>
	for (i = 0; i < len; i++)
 8000f64:	42a5      	cmp	r5, r4
 8000f66:	d1f9      	bne.n	8000f5c <Echo_ShellPrint_Char+0xc>
	}

	ECHO_SHELL_PRINT(("\n"));
}
 8000f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ECHO_SHELL_PRINT(("\n"));
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f004 bd2d 	b.w	80059cc <putchar>
}
 8000f72:	bd38      	pop	{r3, r4, r5, pc}

08000f74 <Echo_Print_Manual>:
/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <Echo_Print_Manual+0x8>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f004 bdac 	b.w	8005ad4 <puts>
 8000f7c:	20000004 	.word	0x20000004

08000f80 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8000f80:	b500      	push	{lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 8000f84:	2100      	movs	r1, #0
 8000f86:	2224      	movs	r2, #36	; 0x24
 8000f88:	a801      	add	r0, sp, #4
 8000f8a:	9100      	str	r1, [sp, #0]
 8000f8c:	f004 fcfe 	bl	800598c <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <Echo_Print_Version+0x28>)
 8000f92:	4906      	ldr	r1, [pc, #24]	; (8000fac <Echo_Print_Version+0x2c>)
 8000f94:	4668      	mov	r0, sp
 8000f96:	f004 fda5 	bl	8005ae4 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 8000f9a:	4668      	mov	r0, sp
 8000f9c:	f004 fd9a 	bl	8005ad4 <puts>
}
 8000fa0:	b00b      	add	sp, #44	; 0x2c
 8000fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa6:	bf00      	nop
 8000fa8:	080077fe 	.word	0x080077fe
 8000fac:	0800780c 	.word	0x0800780c

08000fb0 <Echo_Shell_Input_Print>:

/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
 8000fb0:	b510      	push	{r4, lr}
	if (echo_uart2_rcv_byte != 0)
 8000fb2:	4c06      	ldr	r4, [pc, #24]	; (8000fcc <Echo_Shell_Input_Print+0x1c>)
 8000fb4:	7823      	ldrb	r3, [r4, #0]
 8000fb6:	b13b      	cbz	r3, 8000fc8 <Echo_Shell_Input_Print+0x18>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 8000fb8:	230a      	movs	r3, #10
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <Echo_Shell_Input_Print+0x20>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	f004 fb74 	bl	80056ac <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	7023      	strb	r3, [r4, #0]
	}
}
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000380 	.word	0x20000380
 8000fd0:	200007d8 	.word	0x200007d8

08000fd4 <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 8000fd4:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 8000fd6:	4c05      	ldr	r4, [pc, #20]	; (8000fec <Echo_Shell_Init+0x18>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fdc:	2100      	movs	r1, #0
 8000fde:	1c60      	adds	r0, r4, #1
 8000fe0:	f004 fcd4 	bl	800598c <memset>
	SHELL_MSG_RCV_POS = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	7023      	strb	r3, [r4, #0]
}
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	bf00      	nop
 8000fec:	20000150 	.word	0x20000150

08000ff0 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	4e18      	ldr	r6, [pc, #96]	; (8001054 <Echo_AdminCMD_Check+0x64>)
 8000ff4:	4607      	mov	r7, r0
 8000ff6:	2500      	movs	r5, #0
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 8000ff8:	7932      	ldrb	r2, [r6, #4]
 8000ffa:	6831      	ldr	r1, [r6, #0]
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	b2ec      	uxtb	r4, r5
 8001000:	f004 fe09 	bl	8005c16 <strncmp>
 8001004:	b128      	cbz	r0, 8001012 <Echo_AdminCMD_Check+0x22>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 8001006:	3501      	adds	r5, #1
 8001008:	2d06      	cmp	r5, #6
 800100a:	f106 0608 	add.w	r6, r6, #8
 800100e:	d1f3      	bne.n	8000ff8 <Echo_AdminCMD_Check+0x8>
		break;

	default:
		break;
	}
}
 8001010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (admin_cmd_cnt)
 8001012:	1e63      	subs	r3, r4, #1
 8001014:	2b04      	cmp	r3, #4
 8001016:	d804      	bhi.n	8001022 <Echo_AdminCMD_Check+0x32>
 8001018:	e8df f003 	tbb	[pc, r3]
 800101c:	130f0b07 	.word	0x130f0b07
 8001020:	17          	.byte	0x17
 8001021:	00          	.byte	0x00
}
 8001022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_Sys_FSM_State_Start();
 8001026:	f000 bb31 	b.w	800168c <Echo_Set_Sys_FSM_State_Start>
}
 800102a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_Sys_FSM_State_Stop();
 800102e:	f000 bb33 	b.w	8001698 <Echo_Set_Sys_FSM_State_Stop>
}
 8001032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Flash_Write();
 8001036:	f7ff be41 	b.w	8000cbc <Echo_Flash_Write>
}
 800103a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Factory_Reset();
 800103e:	f000 b963 	b.w	8001308 <Echo_Factory_Reset>
}
 8001042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Manual();
 8001046:	f7ff bf95 	b.w	8000f74 <Echo_Print_Manual>
}
 800104a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Version();
 800104e:	f7ff bf97 	b.w	8000f80 <Echo_Print_Version>
 8001052:	bf00      	nop
 8001054:	08007ad8 	.word	0x08007ad8

08001058 <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80010d8 <Echo_ParameterCMD_Check+0x80>
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	2700      	movs	r7, #0
	uint8_t param_cmd_cnt = 0;

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 8001066:	f898 2004 	ldrb.w	r2, [r8, #4]
 800106a:	f8d8 1000 	ldr.w	r1, [r8]
 800106e:	4620      	mov	r0, r4
 8001070:	b2fe      	uxtb	r6, r7
 8001072:	f004 fdd0 	bl	8005c16 <strncmp>
 8001076:	b130      	cbz	r0, 8001086 <Echo_ParameterCMD_Check+0x2e>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 8001078:	3701      	adds	r7, #1
 800107a:	2f09      	cmp	r7, #9
 800107c:	f108 0808 	add.w	r8, r8, #8
 8001080:	d1f1      	bne.n	8001066 <Echo_ParameterCMD_Check+0xe>
		break;

	default:
		break;
	}
}
 8001082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (param_cmd_cnt)
 8001086:	1e73      	subs	r3, r6, #1
 8001088:	2b07      	cmp	r3, #7
 800108a:	d805      	bhi.n	8001098 <Echo_ParameterCMD_Check+0x40>
 800108c:	e8df f003 	tbb	[pc, r3]
 8001090:	1e18100a 	.word	0x1e18100a
 8001094:	1e1e1e1e 	.word	0x1e1e1e1e
		Echo_Set_DT(data, len);
 8001098:	4629      	mov	r1, r5
 800109a:	4620      	mov	r0, r4
}
 800109c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_DT(data, len);
 80010a0:	f000 b96e 	b.w	8001380 <Echo_Set_DT>
		Echo_Set_PW(data, len);
 80010a4:	4629      	mov	r1, r5
 80010a6:	4620      	mov	r0, r4
}
 80010a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_PW(data, len);
 80010ac:	f000 b97e 	b.w	80013ac <Echo_Set_PW>
		Echo_Set_Sys_FSM_State_Stop();
 80010b0:	f000 faf2 	bl	8001698 <Echo_Set_Sys_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 80010b4:	4629      	mov	r1, r5
 80010b6:	4620      	mov	r0, r4
}
 80010b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_HZ(data, len);
 80010bc:	f000 b986 	b.w	80013cc <Echo_Set_HZ>
		Echo_Set_V_PW(data, len);
 80010c0:	4629      	mov	r1, r5
 80010c2:	4620      	mov	r0, r4
}
 80010c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_V_PW(data, len);
 80010c8:	f000 b9b6 	b.w	8001438 <Echo_Set_V_PW>
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 80010cc:	1f30      	subs	r0, r6, #4
 80010ce:	b2c0      	uxtb	r0, r0
}
 80010d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 80010d4:	f000 b8be 	b.w	8001254 <Echo_Get_Res_Data>
 80010d8:	08007b08 	.word	0x08007b08

080010dc <Echo_Shell_CMD_Handle>:
{
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 80010de:	4e2d      	ldr	r6, [pc, #180]	; (8001194 <Echo_Shell_CMD_Handle+0xb8>)
 80010e0:	4c2d      	ldr	r4, [pc, #180]	; (8001198 <Echo_Shell_CMD_Handle+0xbc>)
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80010e2:	4f2e      	ldr	r7, [pc, #184]	; (800119c <Echo_Shell_CMD_Handle+0xc0>)
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 80010e4:	482b      	ldr	r0, [pc, #172]	; (8001194 <Echo_Shell_CMD_Handle+0xb8>)
 80010e6:	f000 fb4f 	bl	8001788 <Echo_Uart2_Get_RCV_Q>
 80010ea:	bb20      	cbnz	r0, 8001136 <Echo_Shell_CMD_Handle+0x5a>
	if (SHELL_MSG_RCV_POS > 0)
 80010ec:	7823      	ldrb	r3, [r4, #0]
 80010ee:	b183      	cbz	r3, 8001112 <Echo_Shell_CMD_Handle+0x36>
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 80010f0:	f001 f8e0 	bl	80022b4 <HAL_GetTick>
 80010f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80010f8:	1ac0      	subs	r0, r0, r3
 80010fa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80010fe:	d908      	bls.n	8001112 <Echo_Shell_CMD_Handle+0x36>
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <Echo_Shell_CMD_Handle+0xc4>)
 8001102:	f004 fce7 	bl	8005ad4 <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001106:	7821      	ldrb	r1, [r4, #0]
 8001108:	4826      	ldr	r0, [pc, #152]	; (80011a4 <Echo_Shell_CMD_Handle+0xc8>)
 800110a:	f7ff ff21 	bl	8000f50 <Echo_ShellPrint_Char>
			Echo_Shell_Init();
 800110e:	f7ff ff61 	bl	8000fd4 <Echo_Shell_Init>
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001112:	f000 fab5 	bl	8001680 <Echo_Get_Sys_FSM_State>
 8001116:	2802      	cmp	r0, #2
 8001118:	d10c      	bne.n	8001134 <Echo_Shell_CMD_Handle+0x58>
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 800111a:	f001 f8cb 	bl	80022b4 <HAL_GetTick>
 800111e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001122:	1ac0      	subs	r0, r0, r3
 8001124:	f242 7310 	movw	r3, #10000	; 0x2710
 8001128:	4298      	cmp	r0, r3
 800112a:	d903      	bls.n	8001134 <Echo_Shell_CMD_Handle+0x58>
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 800112c:	f001 f8c2 	bl	80022b4 <HAL_GetTick>
 8001130:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
}
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 8001136:	f001 f8bd 	bl	80022b4 <HAL_GetTick>
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 800113a:	7833      	ldrb	r3, [r6, #0]
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 800113c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 8001140:	2b23      	cmp	r3, #35	; 0x23
 8001142:	d002      	beq.n	800114a <Echo_Shell_CMD_Handle+0x6e>
 8001144:	7822      	ldrb	r2, [r4, #0]
 8001146:	2a00      	cmp	r2, #0
 8001148:	d0cc      	beq.n	80010e4 <Echo_Shell_CMD_Handle+0x8>
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 800114a:	7825      	ldrb	r5, [r4, #0]
 800114c:	1962      	adds	r2, r4, r5
			SHELL_MSG_RCV_POS++;
 800114e:	3501      	adds	r5, #1
 8001150:	b2ed      	uxtb	r5, r5
			if (st_byte == 13)
 8001152:	2b0d      	cmp	r3, #13
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 8001154:	7053      	strb	r3, [r2, #1]
			SHELL_MSG_RCV_POS++;
 8001156:	7025      	strb	r5, [r4, #0]
			if (st_byte == 13)
 8001158:	d1c4      	bne.n	80010e4 <Echo_Shell_CMD_Handle+0x8>
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <Echo_Shell_CMD_Handle+0xc8>)
 800115c:	2204      	movs	r2, #4
 800115e:	4639      	mov	r1, r7
 8001160:	f004 fd59 	bl	8005c16 <strncmp>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001164:	b2ad      	uxth	r5, r5
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001166:	b128      	cbz	r0, 8001174 <Echo_Shell_CMD_Handle+0x98>
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001168:	490f      	ldr	r1, [pc, #60]	; (80011a8 <Echo_Shell_CMD_Handle+0xcc>)
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <Echo_Shell_CMD_Handle+0xc8>)
 800116c:	2204      	movs	r2, #4
 800116e:	f004 fd52 	bl	8005c16 <strncmp>
 8001172:	b950      	cbnz	r0, 800118a <Echo_Shell_CMD_Handle+0xae>
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <Echo_Shell_CMD_Handle+0xc8>)
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff ff6e 	bl	8001058 <Echo_ParameterCMD_Check>
				Echo_Shell_Init();
 800117c:	f7ff ff2a 	bl	8000fd4 <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001180:	f001 f898 	bl	80022b4 <HAL_GetTick>
 8001184:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8001188:	e7ac      	b.n	80010e4 <Echo_Shell_CMD_Handle+0x8>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <Echo_Shell_CMD_Handle+0xc8>)
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff ff2f 	bl	8000ff0 <Echo_AdminCMD_Check>
 8001192:	e7f3      	b.n	800117c <Echo_Shell_CMD_Handle+0xa0>
 8001194:	2000025c 	.word	0x2000025c
 8001198:	20000150 	.word	0x20000150
 800119c:	08007822 	.word	0x08007822
 80011a0:	0800782c 	.word	0x0800782c
 80011a4:	20000151 	.word	0x20000151
 80011a8:	08007827 	.word	0x08007827

080011ac <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b508      	push	{r3, lr}
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 80011ae:	6802      	ldr	r2, [r0, #0]
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011b2:	429a      	cmp	r2, r3
{
 80011b4:	ed2d 8b02 	vpush	{d8}
	if (htim->Instance == TIM16)
 80011b8:	d12e      	bne.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		/* ADC1 FSM */
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 80011ba:	f7ff fd1f 	bl	8000bfc <Echo_Get_ADC1_State>
 80011be:	2803      	cmp	r0, #3
 80011c0:	d12a      	bne.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 80011c2:	f7ff fceb 	bl	8000b9c <Echo_Stepup_ADC1_AVG>
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 80011c6:	ee10 0a10 	vmov	r0, s0
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 80011ca:	eeb0 8a40 	vmov.f32	s16, s0
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011d8:	f004 fbe0 	bl	800599c <iprintf>
			ECHO_SHELL_PRINT(
 80011dc:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80011e0:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001228 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80011e4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800122c <HAL_TIM_PeriodElapsedCallback+0x80>
 80011e8:	ee18 3a10 	vmov	r3, s16
 80011ec:	b298      	uxth	r0, r3
 80011ee:	f7ff fced 	bl	8000bcc <Echo_ADC_Calc_Stepup_V>
 80011f2:	ee10 0a10 	vmov	r0, s0
 80011f6:	f7ff f9a7 	bl	8000548 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001200:	f004 fbcc 	bl	800599c <iprintf>
					("STEPUP VOLTAGE : %f\n",Echo_ADC_Calc_Stepup_V(adc_avg_data, R1_Vstup, R2_Vstup)));
			ECHO_SHELL_PRINT(("----------\r\n"));
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001206:	f004 fc65 	bl	8005ad4 <puts>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 800120a:	ecbd 8b02 	vpop	{d8}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 800120e:	2004      	movs	r0, #4
}
 8001210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 8001214:	f7ff bcf8 	b.w	8000c08 <Echo_Set_ADC1_State>
}
 8001218:	ecbd 8b02 	vpop	{d8}
 800121c:	bd08      	pop	{r3, pc}
 800121e:	bf00      	nop
 8001220:	40014400 	.word	0x40014400
 8001224:	08007b50 	.word	0x08007b50
 8001228:	42dc0000 	.word	0x42dc0000
 800122c:	45610000 	.word	0x45610000
 8001230:	08007b60 	.word	0x08007b60
 8001234:	08007b75 	.word	0x08007b75

08001238 <Echo_VPW_SET_TP_ON>:
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
}

void Echo_VPW_SET_TP_ON(void)
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f002 b999 	b.w	8003578 <HAL_GPIO_WritePin>

08001246 <Echo_VPW_TP_OFF>:
}

void Echo_VPW_TP_OFF(void)
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f002 b992 	b.w	8003578 <HAL_GPIO_WritePin>

08001254 <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 8001254:	b510      	push	{r4, lr}
 8001256:	b088      	sub	sp, #32
	char mes_head[11] =
 8001258:	2300      	movs	r3, #0
 800125a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800125e:	f8cd 301b 	str.w	r3, [sp, #27]
	{ '\0', };
	strcpy((char*) mes_head,
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <Echo_Get_Res_Data+0x8c>)
{
 8001264:	4604      	mov	r4, r0
	strcpy((char*) mes_head,
 8001266:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 800126a:	a805      	add	r0, sp, #20
 800126c:	f004 fccb 	bl	8005c06 <strcpy>
			(const char*) get_prm_cmd_str_table[select_msg].str);

	switch (select_msg)
 8001270:	2c04      	cmp	r4, #4
 8001272:	d80b      	bhi.n	800128c <Echo_Get_Res_Data+0x38>
 8001274:	e8df f004 	tbb	[pc, r4]
 8001278:	18131003 	.word	0x18131003
 800127c:	25          	.byte	0x25
 800127d:	00          	.byte	0x00
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <Echo_Get_Res_Data+0x90>)
 8001280:	881b      	ldrh	r3, [r3, #0]
				pwm_param.dead_time);
		break;
	case RESPONSE_PULSEWIDTH:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001282:	4919      	ldr	r1, [pc, #100]	; (80012e8 <Echo_Get_Res_Data+0x94>)
 8001284:	aa05      	add	r2, sp, #20
 8001286:	4819      	ldr	r0, [pc, #100]	; (80012ec <Echo_Get_Res_Data+0x98>)
 8001288:	f004 fc2c 	bl	8005ae4 <siprintf>
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
		break;
	default:
		break;
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 800128c:	4917      	ldr	r1, [pc, #92]	; (80012ec <Echo_Get_Res_Data+0x98>)
 800128e:	4818      	ldr	r0, [pc, #96]	; (80012f0 <Echo_Get_Res_Data+0x9c>)
 8001290:	f004 fb84 	bl	800599c <iprintf>
}
 8001294:	b008      	add	sp, #32
 8001296:	bd10      	pop	{r4, pc}
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Echo_Get_Res_Data+0x90>)
 800129a:	885b      	ldrh	r3, [r3, #2]
 800129c:	e7f1      	b.n	8001282 <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <Echo_Get_Res_Data+0x90>)
 80012a0:	4914      	ldr	r1, [pc, #80]	; (80012f4 <Echo_Get_Res_Data+0xa0>)
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	aa05      	add	r2, sp, #20
 80012a6:	e7ee      	b.n	8001286 <Echo_Get_Res_Data+0x32>
		sprintf((char*) res_msg, (const char*) "%s %d PW\r\n\r\n", mes_head,
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <Echo_Get_Res_Data+0xa4>)
 80012aa:	4914      	ldr	r1, [pc, #80]	; (80012fc <Echo_Get_Res_Data+0xa8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <Echo_Get_Res_Data+0x98>)
 80012b0:	aa05      	add	r2, sp, #20
 80012b2:	f004 fc17 	bl	8005ae4 <siprintf>
		Echo_VPW_SET_TP_ON();
 80012b6:	f7ff ffbf 	bl	8001238 <Echo_VPW_SET_TP_ON>
		vpw_set_flag = true;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <Echo_Get_Res_Data+0xac>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
		break;
 80012c0:	e7e4      	b.n	800128c <Echo_Get_Res_Data+0x38>
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <Echo_Get_Res_Data+0xa4>)
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <Echo_Get_Res_Data+0x90>)
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	9202      	str	r2, [sp, #8]
 80012ca:	889a      	ldrh	r2, [r3, #4]
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	885a      	ldrh	r2, [r3, #2]
 80012d0:	9200      	str	r2, [sp, #0]
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	490b      	ldr	r1, [pc, #44]	; (8001304 <Echo_Get_Res_Data+0xb0>)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <Echo_Get_Res_Data+0x98>)
 80012d8:	aa05      	add	r2, sp, #20
 80012da:	f004 fc03 	bl	8005ae4 <siprintf>
		break;
 80012de:	e7d5      	b.n	800128c <Echo_Get_Res_Data+0x38>
 80012e0:	08007c5c 	.word	0x08007c5c
 80012e4:	20000278 	.word	0x20000278
 80012e8:	08007b81 	.word	0x08007b81
 80012ec:	2000027e 	.word	0x2000027e
 80012f0:	08007bdc 	.word	0x08007bdc
 80012f4:	08007b8e 	.word	0x08007b8e
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	08007b9b 	.word	0x08007b9b
 8001300:	2000037e 	.word	0x2000037e
 8001304:	08007ba8 	.word	0x08007ba8

08001308 <Echo_Factory_Reset>:
/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
	pwm_param.dead_time = 20;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <Echo_Factory_Reset+0x1c>)
 800130a:	2214      	movs	r2, #20
 800130c:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
 800130e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001312:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 100;
 8001314:	2264      	movs	r2, #100	; 0x64
 8001316:	809a      	strh	r2, [r3, #4]
	v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <Echo_Factory_Reset+0x20>)
 800131a:	220a      	movs	r2, #10
 800131c:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 800131e:	f7ff bccd 	b.w	8000cbc <Echo_Flash_Write>
 8001322:	bf00      	nop
 8001324:	20000278 	.word	0x20000278
 8001328:	2000000c 	.word	0x2000000c

0800132c <Echo_Pulse_Prm_Config>:
 * */
void Echo_Pulse_Prm_Config()
{
	/* HZ SETTING */
	TIM2->CNT = 0;
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 800132c:	4910      	ldr	r1, [pc, #64]	; (8001370 <Echo_Pulse_Prm_Config+0x44>)
	TIM2->CNT = 0;
 800132e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001332:	2300      	movs	r3, #0
 8001334:	6243      	str	r3, [r0, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001336:	888a      	ldrh	r2, [r1, #4]
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <Echo_Pulse_Prm_Config+0x48>)
 800133a:	fbb3 f3f2 	udiv	r3, r3, r2

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 800133e:	884a      	ldrh	r2, [r1, #2]
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001340:	3b01      	subs	r3, #1
 8001342:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM2->CCR2 = ANODE_PULSE_TIME;
 8001344:	f102 030a 	add.w	r3, r2, #10
 8001348:	6383      	str	r3, [r0, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 800134a:	880b      	ldrh	r3, [r1, #0]
 800134c:	490a      	ldr	r1, [pc, #40]	; (8001378 <Echo_Pulse_Prm_Config+0x4c>)
 800134e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001352:	f103 000a 	add.w	r0, r3, #10
 8001356:	6008      	str	r0, [r1, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 8001358:	1a98      	subs	r0, r3, r2
 800135a:	6048      	str	r0, [r1, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <Echo_Pulse_Prm_Config+0x50>)
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 800135e:	3305      	adds	r3, #5
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001360:	3205      	adds	r2, #5
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 8001362:	3005      	adds	r0, #5
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001364:	600a      	str	r2, [r1, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 8001366:	6048      	str	r0, [r1, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 8001368:	608b      	str	r3, [r1, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 800136a:	2305      	movs	r3, #5
 800136c:	60cb      	str	r3, [r1, #12]
}
 800136e:	4770      	bx	lr
 8001370:	20000278 	.word	0x20000278
 8001374:	000f4240 	.word	0x000f4240
 8001378:	20000260 	.word	0x20000260
 800137c:	20000268 	.word	0x20000268

08001380 <Echo_Set_DT>:
{
 8001380:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 8001382:	4c08      	ldr	r4, [pc, #32]	; (80013a4 <Echo_Set_DT+0x24>)
 8001384:	4908      	ldr	r1, [pc, #32]	; (80013a8 <Echo_Set_DT+0x28>)
 8001386:	4622      	mov	r2, r4
 8001388:	f004 fbcc 	bl	8005b24 <siscanf>
	if (pwm_param.dead_time < (GLICH_DEBOUNCING_TIME * 2))
 800138c:	8823      	ldrh	r3, [r4, #0]
 800138e:	2b09      	cmp	r3, #9
		pwm_param.dead_time = GLICH_DEBOUNCING_TIME * 2;
 8001390:	bf9c      	itt	ls
 8001392:	230a      	movls	r3, #10
 8001394:	8023      	strhls	r3, [r4, #0]
	Echo_Pulse_Prm_Config();
 8001396:	f7ff ffc9 	bl	800132c <Echo_Pulse_Prm_Config>
}
 800139a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff bf58 	b.w	8001254 <Echo_Get_Res_Data>
 80013a4:	20000278 	.word	0x20000278
 80013a8:	08007be1 	.word	0x08007be1

080013ac <Echo_Set_PW>:
{
 80013ac:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <Echo_Set_PW+0x18>)
 80013b0:	4905      	ldr	r1, [pc, #20]	; (80013c8 <Echo_Set_PW+0x1c>)
 80013b2:	f004 fbb7 	bl	8005b24 <siscanf>
	Echo_Pulse_Prm_Config();
 80013b6:	f7ff ffb9 	bl	800132c <Echo_Pulse_Prm_Config>
}
 80013ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff bf48 	b.w	8001254 <Echo_Get_Res_Data>
 80013c4:	2000027a 	.word	0x2000027a
 80013c8:	08007bf2 	.word	0x08007bf2

080013cc <Echo_Set_HZ>:
{
 80013cc:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 80013ce:	4c12      	ldr	r4, [pc, #72]	; (8001418 <Echo_Set_HZ+0x4c>)
 80013d0:	4912      	ldr	r1, [pc, #72]	; (800141c <Echo_Set_HZ+0x50>)
 80013d2:	1d22      	adds	r2, r4, #4
 80013d4:	f004 fba6 	bl	8005b24 <siscanf>
	if (PULSE_FREQ_ARR <= (TOTAL_PULSE_WIDTH_TIME * 2))
 80013d8:	88a3      	ldrh	r3, [r4, #4]
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <Echo_Set_HZ+0x54>)
 80013dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80013e0:	8863      	ldrh	r3, [r4, #2]
 80013e2:	8821      	ldrh	r1, [r4, #0]
 80013e4:	3305      	adds	r3, #5
 80013e6:	440b      	add	r3, r1
 80013e8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
		pwm_param.pulse_freq = 1;
 80013ec:	bfdc      	itt	le
 80013ee:	2301      	movle	r3, #1
 80013f0:	80a3      	strhle	r3, [r4, #4]
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 80013f2:	f000 f945 	bl	8001680 <Echo_Get_Sys_FSM_State>
 80013f6:	2802      	cmp	r0, #2
 80013f8:	d10a      	bne.n	8001410 <Echo_Set_HZ+0x44>
		Echo_Set_Sys_FSM_State_Stop();
 80013fa:	f000 f94d 	bl	8001698 <Echo_Set_Sys_FSM_State_Stop>
		Echo_Pulse_Prm_Config();
 80013fe:	f7ff ff95 	bl	800132c <Echo_Pulse_Prm_Config>
		Echo_Set_Sys_FSM_State_Start();
 8001402:	f000 f943 	bl	800168c <Echo_Set_Sys_FSM_State_Start>
}
 8001406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff bf22 	b.w	8001254 <Echo_Get_Res_Data>
		Echo_Pulse_Prm_Config();
 8001410:	f7ff ff8c 	bl	800132c <Echo_Pulse_Prm_Config>
 8001414:	e7f7      	b.n	8001406 <Echo_Set_HZ+0x3a>
 8001416:	bf00      	nop
 8001418:	20000278 	.word	0x20000278
 800141c:	08007c03 	.word	0x08007c03
 8001420:	000f4240 	.word	0x000f4240

08001424 <Echo_Pulse_V_PW_Config>:
/*
 * STEP UP PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_V_PW_Config()
{
	TIM1->CCR1 = v_step_tv;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <Echo_Pulse_V_PW_Config+0xc>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <Echo_Pulse_V_PW_Config+0x10>)
 800142a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000000c 	.word	0x2000000c
 8001434:	40012c00 	.word	0x40012c00

08001438 <Echo_Set_V_PW>:
{
 8001438:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step_tv);
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <Echo_Set_V_PW+0x28>)
 800143c:	4909      	ldr	r1, [pc, #36]	; (8001464 <Echo_Set_V_PW+0x2c>)
 800143e:	f004 fb71 	bl	8005b24 <siscanf>
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001442:	f000 f91d 	bl	8001680 <Echo_Get_Sys_FSM_State>
 8001446:	2802      	cmp	r0, #2
 8001448:	d102      	bne.n	8001450 <Echo_Set_V_PW+0x18>
		HAL_TIM_Base_Start_IT(&htim16);
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <Echo_Set_V_PW+0x30>)
 800144c:	f002 ff10 	bl	8004270 <HAL_TIM_Base_Start_IT>
	Echo_Pulse_V_PW_Config();
 8001450:	f7ff ffe8 	bl	8001424 <Echo_Pulse_V_PW_Config>
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001454:	2003      	movs	r0, #3
}
 8001456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 800145a:	f7ff befb 	b.w	8001254 <Echo_Get_Res_Data>
 800145e:	bf00      	nop
 8001460:	2000000c 	.word	0x2000000c
 8001464:	08007c14 	.word	0x08007c14
 8001468:	200006bc 	.word	0x200006bc

0800146c <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 800146c:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <Echo_StepUP_Stop+0x14>)
 8001470:	2100      	movs	r1, #0
 8001472:	f003 fafb 	bl	8004a6c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
}
 8001476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop_IT(&htim16);
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <Echo_StepUP_Stop+0x18>)
 800147c:	f002 bf22 	b.w	80042c4 <HAL_TIM_Base_Stop_IT>
 8001480:	20000670 	.word	0x20000670
 8001484:	200006bc 	.word	0x200006bc

08001488 <Echo_Stim_Stop>:
{
 8001488:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 800148a:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <Echo_Stim_Stop+0x30>)
 800148c:	2104      	movs	r1, #4
 800148e:	4620      	mov	r0, r4
 8001490:	f003 faec 	bl	8004a6c <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8001494:	2100      	movs	r1, #0
 8001496:	4620      	mov	r0, r4
 8001498:	f003 fbd2 	bl	8004c40 <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 800149c:	210c      	movs	r1, #12
 800149e:	4620      	mov	r0, r4
 80014a0:	f003 fbce 	bl	8004c40 <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 80014a4:	f7ff ffe2 	bl	800146c <Echo_StepUP_Stop>
	Echo_Stop_ADC2_Conv();
 80014a8:	f7ff fb6c 	bl	8000b84 <Echo_Stop_ADC2_Conv>
	HAL_TIM_Base_Stop_IT(&htim2);
 80014ac:	4620      	mov	r0, r4
}
 80014ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 80014b2:	f002 bf07 	b.w	80042c4 <HAL_TIM_Base_Stop_IT>
 80014b6:	bf00      	nop
 80014b8:	20000708 	.word	0x20000708

080014bc <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 80014bc:	b508      	push	{r3, lr}
	TIM1->CCR1 = v_step_tv;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <Echo_StepUP_Start+0x1c>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <Echo_StepUP_Start+0x20>)
	TIM1->CCR1 = v_step_tv;
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <Echo_StepUP_Start+0x24>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014c6:	2100      	movs	r1, #0
	TIM1->CCR1 = v_step_tv;
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014ca:	f003 fa7f 	bl	80049cc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
}
 80014ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim16);
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <Echo_StepUP_Start+0x28>)
 80014d4:	f002 becc 	b.w	8004270 <HAL_TIM_Base_Start_IT>
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	20000670 	.word	0x20000670
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	200006bc 	.word	0x200006bc

080014e8 <Echo_Stim_Start>:
{
 80014e8:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig =
 80014ea:	2500      	movs	r5, #0
{
 80014ec:	b08b      	sub	sp, #44	; 0x2c
	htim2.Instance = TIM2;
 80014ee:	4c3f      	ldr	r4, [pc, #252]	; (80015ec <Echo_Stim_Start+0x104>)
	TIM_MasterConfigTypeDef sMasterConfig =
 80014f0:	9502      	str	r5, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC =
 80014f2:	221c      	movs	r2, #28
 80014f4:	4629      	mov	r1, r5
 80014f6:	a803      	add	r0, sp, #12
	TIM_MasterConfigTypeDef sMasterConfig =
 80014f8:	e9cd 5500 	strd	r5, r5, [sp]
	TIM_OC_InitTypeDef sConfigOC =
 80014fc:	f004 fa46 	bl	800598c <memset>
	htim2.Init.Prescaler = 79;
 8001500:	234f      	movs	r3, #79	; 0x4f
 8001502:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001506:	e9c4 c300 	strd	ip, r3, [r4]
	htim2.Init.Period = 999;
 800150a:	f240 33e7 	movw	r3, #999	; 0x3e7
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	e9c4 3503 	strd	r3, r5, [r4, #12]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001512:	4620      	mov	r0, r4
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001514:	2380      	movs	r3, #128	; 0x80
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001518:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800151a:	f003 f889 	bl	8004630 <HAL_TIM_OC_Init>
 800151e:	b108      	cbz	r0, 8001524 <Echo_Stim_Start+0x3c>
		Error_Handler();
 8001520:	f000 fbae 	bl	8001c80 <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <Echo_Stim_Start+0x104>)
 8001526:	f003 f8b3 	bl	8004690 <HAL_TIM_PWM_Init>
 800152a:	b108      	cbz	r0, 8001530 <Echo_Stim_Start+0x48>
		Error_Handler();
 800152c:	f000 fba8 	bl	8001c80 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001530:	2320      	movs	r3, #32
 8001532:	9300      	str	r3, [sp, #0]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <Echo_Stim_Start+0x104>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001538:	4669      	mov	r1, sp
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	f003 fbf6 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	b108      	cbz	r0, 8001546 <Echo_Stim_Start+0x5e>
		Error_Handler();
 8001542:	f000 fb9d 	bl	8001c80 <Error_Handler>
	sConfigOC.Pulse = 5;
 8001546:	2030      	movs	r0, #48	; 0x30
 8001548:	2305      	movs	r3, #5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154a:	2200      	movs	r2, #0
	sConfigOC.Pulse = 5;
 800154c:	e9cd 0303 	strd	r0, r3, [sp, #12]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001550:	a903      	add	r1, sp, #12
 8001552:	4826      	ldr	r0, [pc, #152]	; (80015ec <Echo_Stim_Start+0x104>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	9205      	str	r2, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001556:	9207      	str	r2, [sp, #28]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f003 f902 	bl	8004760 <HAL_TIM_OC_ConfigChannel>
 800155c:	b108      	cbz	r0, 8001562 <Echo_Stim_Start+0x7a>
		Error_Handler();
 800155e:	f000 fb8f 	bl	8001c80 <Error_Handler>
	sConfigOC.Pulse = 1010;
 8001562:	2160      	movs	r1, #96	; 0x60
 8001564:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001568:	e9cd 1303 	strd	r1, r3, [sp, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156c:	481f      	ldr	r0, [pc, #124]	; (80015ec <Echo_Stim_Start+0x104>)
 800156e:	2204      	movs	r2, #4
 8001570:	a903      	add	r1, sp, #12
 8001572:	f003 f929 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001576:	b108      	cbz	r0, 800157c <Echo_Stim_Start+0x94>
		Error_Handler();
 8001578:	f000 fb82 	bl	8001c80 <Error_Handler>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800157c:	6822      	ldr	r2, [r4, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <Echo_Stim_Start+0x104>)
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001580:	6993      	ldr	r3, [r2, #24]
 8001582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001586:	6193      	str	r3, [r2, #24]
	sConfigOC.Pulse = 1040;
 8001588:	2230      	movs	r2, #48	; 0x30
 800158a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800158e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001592:	220c      	movs	r2, #12
 8001594:	eb0d 0102 	add.w	r1, sp, r2
 8001598:	f003 f8e2 	bl	8004760 <HAL_TIM_OC_ConfigChannel>
 800159c:	b108      	cbz	r0, 80015a2 <Echo_Stim_Start+0xba>
		Error_Handler();
 800159e:	f000 fb6f 	bl	8001c80 <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <Echo_Stim_Start+0x104>)
 80015a4:	f000 fcae 	bl	8001f04 <HAL_TIM_MspPostInit>
	Echo_Pulse_Prm_Config();
 80015a8:	f7ff fec0 	bl	800132c <Echo_Pulse_Prm_Config>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 80015ac:	2104      	movs	r1, #4
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <Echo_Stim_Start+0x104>)
 80015b0:	f003 fa0c 	bl	80049cc <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <Echo_Stim_Start+0x108>)
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <Echo_Stim_Start+0x104>)
 80015b8:	2304      	movs	r3, #4
 80015ba:	2100      	movs	r1, #0
 80015bc:	f003 fa58 	bl	8004a70 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <Echo_Stim_Start+0x10c>)
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <Echo_Stim_Start+0x104>)
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	f023 0306 	bic.w	r3, r3, #6
 80015cc:	6013      	str	r3, [r2, #0]
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 80015ce:	210c      	movs	r1, #12
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <Echo_Stim_Start+0x110>)
 80015d2:	2302      	movs	r3, #2
 80015d4:	f003 fa4c 	bl	8004a70 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <Echo_Stim_Start+0x114>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	6813      	ldr	r3, [r2, #0]
 80015de:	f023 0306 	bic.w	r3, r3, #6
 80015e2:	6013      	str	r3, [r2, #0]
	Echo_StepUP_Start();
 80015e4:	f7ff ff6a 	bl	80014bc <Echo_StepUP_Start>
}
 80015e8:	b00b      	add	sp, #44	; 0x2c
 80015ea:	bd30      	pop	{r4, r5, pc}
 80015ec:	20000708 	.word	0x20000708
 80015f0:	20000268 	.word	0x20000268
 80015f4:	200005e0 	.word	0x200005e0
 80015f8:	20000260 	.word	0x20000260
 80015fc:	20000628 	.word	0x20000628

08001600 <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 8001600:	b500      	push	{lr}
	HAL_Delay(200);
 8001602:	20c8      	movs	r0, #200	; 0xc8
{
 8001604:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001606:	f000 fe5b 	bl	80022c0 <HAL_Delay>
	char res_msg[55] =
 800160a:	2100      	movs	r1, #0
 800160c:	2233      	movs	r2, #51	; 0x33
 800160e:	a801      	add	r0, sp, #4
 8001610:	9100      	str	r1, [sp, #0]
 8001612:	f004 f9bb 	bl	800598c <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001616:	f7ff fbc3 	bl	8000da0 <Echo_Flash_Read>
 800161a:	b150      	cbz	r0, 8001632 <Echo_PCI_State_Init+0x32>
	{
		pwm_param.dead_time = 20;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <Echo_PCI_State_Init+0x68>)
 800161e:	2214      	movs	r2, #20
 8001620:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8001628:	2264      	movs	r2, #100	; 0x64
 800162a:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <Echo_PCI_State_Init+0x6c>)
 800162e:	220a      	movs	r2, #10
 8001630:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8001632:	f7ff fca5 	bl	8000f80 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001636:	f002 fbfb 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 800163a:	490d      	ldr	r1, [pc, #52]	; (8001670 <Echo_PCI_State_Init+0x70>)
 800163c:	4602      	mov	r2, r0
 800163e:	4668      	mov	r0, sp
 8001640:	f004 fa50 	bl	8005ae4 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001644:	4668      	mov	r0, sp
 8001646:	f004 fa45 	bl	8005ad4 <puts>
	Echo_ADC_State_Init();
 800164a:	f7ff fa05 	bl	8000a58 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 800164e:	f7ff fc91 	bl	8000f74 <Echo_Print_Manual>
	Echo_LED_Init();
 8001652:	f7ff fbd1 	bl	8000df8 <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8001656:	f000 f80d 	bl	8001674 <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 800165a:	f7ff fcbb 	bl	8000fd4 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 800165e:	f000 f85d 	bl	800171c <Echo_Uart2_INTERRUPT_ENA>
}
 8001662:	b00f      	add	sp, #60	; 0x3c
 8001664:	f85d fb04 	ldr.w	pc, [sp], #4
 8001668:	20000278 	.word	0x20000278
 800166c:	2000000c 	.word	0x2000000c
 8001670:	08007c84 	.word	0x08007c84

08001674 <Echo_Sys_FSM_State_Init>:
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
#endif
		break;

	}
	ECHO_CUR_SYS_STATE = state;
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <Echo_Sys_FSM_State_Init+0x8>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
}
 800167a:	4770      	bx	lr
 800167c:	2000037f 	.word	0x2000037f

08001680 <Echo_Get_Sys_FSM_State>:
}
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <Echo_Get_Sys_FSM_State+0x8>)
 8001682:	7818      	ldrb	r0, [r3, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000037f 	.word	0x2000037f

0800168c <Echo_Set_Sys_FSM_State_Start>:
	cur_state = ECHO_SYS_STATE_RUN;
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <Echo_Set_Sys_FSM_State_Start+0x8>)
 800168e:	2202      	movs	r2, #2
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	4770      	bx	lr
 8001694:	20000010 	.word	0x20000010

08001698 <Echo_Set_Sys_FSM_State_Stop>:
	cur_state = ECHO_SYS_STATE_IDLE;
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <Echo_Set_Sys_FSM_State_Stop+0x8>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	4770      	bx	lr
 80016a0:	20000010 	.word	0x20000010

080016a4 <Echo_Set_Sys_FSM_State>:
	switch (state)
 80016a4:	2802      	cmp	r0, #2
{
 80016a6:	b510      	push	{r4, lr}
 80016a8:	4604      	mov	r4, r0
	switch (state)
 80016aa:	d00d      	beq.n	80016c8 <Echo_Set_Sys_FSM_State+0x24>
 80016ac:	2803      	cmp	r0, #3
 80016ae:	d00e      	beq.n	80016ce <Echo_Set_Sys_FSM_State+0x2a>
 80016b0:	2801      	cmp	r0, #1
 80016b2:	d106      	bne.n	80016c2 <Echo_Set_Sys_FSM_State+0x1e>
		Echo_Stim_Stop();
 80016b4:	f7ff fee8 	bl	8001488 <Echo_Stim_Stop>
		Echo_Set_LED_State(ECHO_LED_RUN);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fbb3 	bl	8000e24 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_RUN;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <Echo_Set_Sys_FSM_State+0x34>)
 80016c0:	701c      	strb	r4, [r3, #0]
	ECHO_CUR_SYS_STATE = state;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <Echo_Set_Sys_FSM_State+0x38>)
 80016c4:	701c      	strb	r4, [r3, #0]
}
 80016c6:	bd10      	pop	{r4, pc}
		Echo_Stim_Start();
 80016c8:	f7ff ff0e 	bl	80014e8 <Echo_Stim_Start>
 80016cc:	e7f4      	b.n	80016b8 <Echo_Set_Sys_FSM_State+0x14>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fba8 	bl	8000e24 <Echo_Set_LED_State>
		break;
 80016d4:	e7f5      	b.n	80016c2 <Echo_Set_Sys_FSM_State+0x1e>
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000
 80016dc:	2000037f 	.word	0x2000037f

080016e0 <Echo_Sys_FSM_State_Handle>:
{
 80016e0:	b508      	push	{r3, lr}
	if (Echo_Btn_IsHandled() == true)
 80016e2:	f7ff fab9 	bl	8000c58 <Echo_Btn_IsHandled>
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <Echo_Sys_FSM_State_Handle+0x34>)
 80016e8:	b120      	cbz	r0, 80016f4 <Echo_Sys_FSM_State_Handle+0x14>
		if (cur_state == ECHO_SYS_STATE_IDLE)
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	2a01      	cmp	r2, #1
 80016ee:	d10c      	bne.n	800170a <Echo_Sys_FSM_State_Handle+0x2a>
			cur_state = ECHO_SYS_STATE_RUN;
 80016f0:	2202      	movs	r2, #2
			cur_state = ECHO_SYS_STATE_IDLE;
 80016f2:	701a      	strb	r2, [r3, #0]
	if (ECHO_CUR_SYS_STATE != cur_state)
 80016f4:	7818      	ldrb	r0, [r3, #0]
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <Echo_Sys_FSM_State_Handle+0x38>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4283      	cmp	r3, r0
 80016fc:	d009      	beq.n	8001712 <Echo_Sys_FSM_State_Handle+0x32>
		Echo_Set_Sys_FSM_State(cur_state);
 80016fe:	f7ff ffd1 	bl	80016a4 <Echo_Set_Sys_FSM_State>
}
 8001702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Echo_Btn_Handled_Clear();
 8001706:	f7ff baad 	b.w	8000c64 <Echo_Btn_Handled_Clear>
		else if (cur_state == ECHO_SYS_STATE_RUN)
 800170a:	2a02      	cmp	r2, #2
 800170c:	d1f2      	bne.n	80016f4 <Echo_Sys_FSM_State_Handle+0x14>
			cur_state = ECHO_SYS_STATE_IDLE;
 800170e:	2201      	movs	r2, #1
 8001710:	e7ef      	b.n	80016f2 <Echo_Sys_FSM_State_Handle+0x12>
}
 8001712:	bd08      	pop	{r3, pc}
 8001714:	20000010 	.word	0x20000010
 8001718:	2000037f 	.word	0x2000037f

0800171c <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 800171c:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 800171e:	4c08      	ldr	r4, [pc, #32]	; (8001740 <Echo_Uart2_INTERRUPT_ENA+0x24>)
	ECHO_USART2_STATE_RESET();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Echo_Uart2_INTERRUPT_ENA+0x28>)
 8001722:	2200      	movs	r2, #0
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001724:	4620      	mov	r0, r4
	ECHO_USART2_STATE_RESET();
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	805a      	strh	r2, [r3, #2]
 800172a:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 800172c:	f003 fba6 	bl	8004e7c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001730:	4620      	mov	r0, r4
 8001732:	4905      	ldr	r1, [pc, #20]	; (8001748 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
}
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	f004 b8d3 	b.w	80058e4 <HAL_UART_Receive_IT>
 800173e:	bf00      	nop
 8001740:	200007d8 	.word	0x200007d8
 8001744:	20000382 	.word	0x20000382
 8001748:	20000380 	.word	0x20000380

0800174c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
	{
	}
	else if (huart->Instance == USART2)
 800174c:	6802      	ldr	r2, [r0, #0]
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_UART_RxCpltCallback+0x2c>)
 8001750:	429a      	cmp	r2, r3
 8001752:	d10b      	bne.n	800176c <HAL_UART_RxCpltCallback+0x20>
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001754:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_UART_RxCpltCallback+0x30>)
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_UART_RxCpltCallback+0x34>)
 8001758:	7819      	ldrb	r1, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 800175a:	8853      	ldrh	r3, [r2, #2]
 800175c:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 800175e:	b2db      	uxtb	r3, r3
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001760:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001762:	4413      	add	r3, r2
 8001764:	7199      	strb	r1, [r3, #6]
	echo_uart2_state.item_num++;
 8001766:	8893      	ldrh	r3, [r2, #4]
 8001768:	3301      	adds	r3, #1
 800176a:	8093      	strh	r3, [r2, #4]
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <HAL_UART_RxCpltCallback+0x34>)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_RxCpltCallback+0x38>)
 8001770:	2201      	movs	r2, #1
 8001772:	f004 b8b7 	b.w	80058e4 <HAL_UART_Receive_IT>
 8001776:	bf00      	nop
 8001778:	40004400 	.word	0x40004400
 800177c:	20000382 	.word	0x20000382
 8001780:	20000380 	.word	0x20000380
 8001784:	200007d8 	.word	0x200007d8

08001788 <Echo_Uart2_Get_RCV_Q>:
}
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 8001788:	b510      	push	{r4, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
#endif
	data_valid = false;

	if (echo_uart2_state.item_num > 0)
 800178a:	4c0b      	ldr	r4, [pc, #44]	; (80017b8 <Echo_Uart2_Get_RCV_Q+0x30>)
 800178c:	88a3      	ldrh	r3, [r4, #4]
 800178e:	b18b      	cbz	r3, 80017b4 <Echo_Uart2_Get_RCV_Q+0x2c>
	{
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001790:	8823      	ldrh	r3, [r4, #0]
 8001792:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 8001794:	b2db      	uxtb	r3, r3
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001796:	8023      	strh	r3, [r4, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8001798:	4423      	add	r3, r4
 800179a:	799b      	ldrb	r3, [r3, #6]
 800179c:	7003      	strb	r3, [r0, #0]

		ECHO_USART2_MUTEX_LOCK
 800179e:	2026      	movs	r0, #38	; 0x26
 80017a0:	f001 fb4c 	bl	8002e3c <HAL_NVIC_DisableIRQ>
		;

		echo_uart2_state.item_num--;
 80017a4:	88a3      	ldrh	r3, [r4, #4]

		ECHO_USART2_MUTEX_UNLOCK
 80017a6:	2026      	movs	r0, #38	; 0x26
		echo_uart2_state.item_num--;
 80017a8:	3b01      	subs	r3, #1
 80017aa:	80a3      	strh	r3, [r4, #4]
		ECHO_USART2_MUTEX_UNLOCK
 80017ac:	f001 fb38 	bl	8002e20 <HAL_NVIC_EnableIRQ>
		;

		data_valid = true;
 80017b0:	2001      	movs	r0, #1
	}
	return data_valid;
}
 80017b2:	bd10      	pop	{r4, pc}
	data_valid = false;
 80017b4:	4618      	mov	r0, r3
 80017b6:	e7fc      	b.n	80017b2 <Echo_Uart2_Get_RCV_Q+0x2a>
 80017b8:	20000382 	.word	0x20000382

080017bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017bc:	b530      	push	{r4, r5, lr}
 80017be:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80017c0:	2244      	movs	r2, #68	; 0x44
 80017c2:	2100      	movs	r1, #0
 80017c4:	a805      	add	r0, sp, #20
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80017c6:	2514      	movs	r5, #20
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80017c8:	f004 f8e0 	bl	800598c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80017cc:	462a      	mov	r2, r5
 80017ce:	2100      	movs	r1, #0
 80017d0:	4668      	mov	r0, sp
 80017d2:	f004 f8db 	bl	800598c <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017da:	f001 fee3 	bl	80035a4 <HAL_PWREx_ControlVoltageScaling>
 80017de:	4604      	mov	r4, r0
 80017e0:	b108      	cbz	r0, 80017e6 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017e4:	e7fe      	b.n	80017e4 <SystemClock_Config+0x28>
	HAL_PWR_EnableBkUpAccess();
 80017e6:	f001 fecd 	bl	8003584 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <SystemClock_Config+0x7c>)
 80017ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017f0:	f023 0318 	bic.w	r3, r3, #24
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017f8:	2301      	movs	r3, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80017fa:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017fe:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001802:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001804:	9505      	str	r5, [sp, #20]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001806:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001808:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f001 ff91 	bl	8003730 <HAL_RCC_OscConfig>
 800180e:	4601      	mov	r1, r0
 8001810:	b108      	cbz	r0, 8001816 <SystemClock_Config+0x5a>
 8001812:	b672      	cpsid	i
	while (1)
 8001814:	e7fe      	b.n	8001814 <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001818:	e9cd 3000 	strd	r3, r0, [sp]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181c:	e9cd 0002 	strd	r0, r0, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001820:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001822:	4668      	mov	r0, sp
 8001824:	f002 fa5a 	bl	8003cdc <HAL_RCC_ClockConfig>
 8001828:	b108      	cbz	r0, 800182e <SystemClock_Config+0x72>
 800182a:	b672      	cpsid	i
	while (1)
 800182c:	e7fe      	b.n	800182c <SystemClock_Config+0x70>
	HAL_RCCEx_EnableMSIPLLMode();
 800182e:	f002 fc1f 	bl	8004070 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001832:	b017      	add	sp, #92	; 0x5c
 8001834:	bd30      	pop	{r4, r5, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <main>:
{
 800183c:	b580      	push	{r7, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4db7      	ldr	r5, [pc, #732]	; (8001b1c <main+0x2e0>)
{
 8001840:	b09a      	sub	sp, #104	; 0x68
	HAL_Init();
 8001842:	f000 fd1b 	bl	800227c <HAL_Init>
	SystemClock_Config();
 8001846:	f7ff ffb9 	bl	80017bc <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 800184a:	2214      	movs	r2, #20
 800184c:	2100      	movs	r1, #0
 800184e:	a80f      	add	r0, sp, #60	; 0x3c
 8001850:	f004 f89c 	bl	800598c <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800185c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800186e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001880:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	9303      	str	r3, [sp, #12]
 8001888:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001892:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 800189a:	2200      	movs	r2, #0
 800189c:	f641 6130 	movw	r1, #7728	; 0x1e30
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 80018a6:	f001 fe67 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 80018aa:	2200      	movs	r2, #0
 80018ac:	489c      	ldr	r0, [pc, #624]	; (8001b20 <main+0x2e4>)
 80018ae:	f242 0133 	movw	r1, #8243	; 0x2033
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB,
 80018b4:	f001 fe60 	bl	8003578 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2702      	movs	r7, #2
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 80018ba:	489a      	ldr	r0, [pc, #616]	; (8001b24 <main+0x2e8>)
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018bc:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 80018be:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	f04f 0901 	mov.w	r9, #1
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f001 fd90 	bl	80033f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	f641 6330 	movw	r3, #7728	; 0x1e30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	a90f      	add	r1, sp, #60	; 0x3c
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f001 fd85 	bl	80033f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin
 80018e6:	f242 0333 	movw	r3, #8243	; 0x2033
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	488d      	ldr	r0, [pc, #564]	; (8001b20 <main+0x2e4>)
 80018ec:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f001 fd7b 	bl	80033f0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80018fc:	ea43 0309 	orr.w	r3, r3, r9
 8001900:	64ab      	str	r3, [r5, #72]	; 0x48
 8001902:	6cab      	ldr	r3, [r5, #72]	; 0x48
	htim1.Instance = TIM1;
 8001904:	4d88      	ldr	r5, [pc, #544]	; (8001b28 <main+0x2ec>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001906:	ea03 0309 	and.w	r3, r3, r9
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800190a:	4622      	mov	r2, r4
 800190c:	4639      	mov	r1, r7
	__HAL_RCC_DMA1_CLK_ENABLE();
 800190e:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001910:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001912:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001914:	f001 fa52 	bl	8002dbc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001918:	200b      	movs	r0, #11
 800191a:	f001 fa81 	bl	8002e20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800191e:	4622      	mov	r2, r4
 8001920:	4639      	mov	r1, r7
 8001922:	200c      	movs	r0, #12
 8001924:	f001 fa4a 	bl	8002dbc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001928:	200c      	movs	r0, #12
 800192a:	f001 fa79 	bl	8002e20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800192e:	4622      	mov	r2, r4
 8001930:	4621      	mov	r1, r4
 8001932:	200f      	movs	r0, #15
 8001934:	f001 fa42 	bl	8002dbc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001938:	200f      	movs	r0, #15
 800193a:	f001 fa71 	bl	8002e20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800193e:	4622      	mov	r2, r4
 8001940:	4621      	mov	r1, r4
 8001942:	2011      	movs	r0, #17
 8001944:	f001 fa3a 	bl	8002dbc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001948:	2011      	movs	r0, #17
 800194a:	f001 fa69 	bl	8002e20 <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC =
 800194e:	221c      	movs	r2, #28
 8001950:	4621      	mov	r1, r4
 8001952:	a808      	add	r0, sp, #32
	TIM_MasterConfigTypeDef sMasterConfig =
 8001954:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001958:	9407      	str	r4, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC =
 800195a:	f004 f817 	bl	800598c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 800195e:	222c      	movs	r2, #44	; 0x2c
 8001960:	4621      	mov	r1, r4
 8001962:	a80f      	add	r0, sp, #60	; 0x3c
 8001964:	f004 f812 	bl	800598c <memset>
	htim1.Instance = TIM1;
 8001968:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <main+0x2f0>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	60ac      	str	r4, [r5, #8]
	htim1.Init.Prescaler = 0;
 800196c:	e9c5 3400 	strd	r3, r4, [r5]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001970:	f04f 0880 	mov.w	r8, #128	; 0x80
	htim1.Init.Period = 9999;
 8001974:	f242 730f 	movw	r3, #9999	; 0x270f
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001978:	4628      	mov	r0, r5
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	e9c5 3403 	strd	r3, r4, [r5, #12]
	htim1.Init.RepetitionCounter = 0;
 800197e:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001980:	f8c5 8018 	str.w	r8, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001984:	f002 fe84 	bl	8004690 <HAL_TIM_PWM_Init>
 8001988:	b108      	cbz	r0, 800198e <main+0x152>
 800198a:	b672      	cpsid	i
	while (1)
 800198c:	e7fe      	b.n	800198c <main+0x150>
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800198e:	e9cd 0005 	strd	r0, r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001994:	a905      	add	r1, sp, #20
 8001996:	4628      	mov	r0, r5
 8001998:	f003 f9c8 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 800199c:	4602      	mov	r2, r0
 800199e:	b108      	cbz	r0, 80019a4 <main+0x168>
 80019a0:	b672      	cpsid	i
	while (1)
 80019a2:	e7fe      	b.n	80019a2 <main+0x166>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2760      	movs	r7, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ae:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b0:	a908      	add	r1, sp, #32
 80019b2:	4628      	mov	r0, r5
	sConfigOC.Pulse = 1;
 80019b4:	e9cd 7908 	strd	r7, r9, [sp, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b8:	f002 ff06 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	b108      	cbz	r0, 80019c2 <main+0x186>
 80019be:	b672      	cpsid	i
	while (1)
 80019c0:	e7fe      	b.n	80019c0 <main+0x184>
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c6:	e9cd 0613 	strd	r0, r6, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ca:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d2:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
 80019d6:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019da:	9019      	str	r0, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019dc:	a90f      	add	r1, sp, #60	; 0x3c
 80019de:	4628      	mov	r0, r5
 80019e0:	f003 f9d6 	bl	8004d90 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e4:	4606      	mov	r6, r0
 80019e6:	b108      	cbz	r0, 80019ec <main+0x1b0>
 80019e8:	b672      	cpsid	i
	while (1)
 80019ea:	e7fe      	b.n	80019ea <main+0x1ae>
	HAL_TIM_MspPostInit(&htim1);
 80019ec:	4628      	mov	r0, r5
 80019ee:	f000 fa89 	bl	8001f04 <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 80019f2:	4c4f      	ldr	r4, [pc, #316]	; (8001b30 <main+0x2f4>)
	TIM_MasterConfigTypeDef sMasterConfig =
 80019f4:	960a      	str	r6, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC =
 80019f6:	221c      	movs	r2, #28
 80019f8:	4631      	mov	r1, r6
 80019fa:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig =
 80019fc:	e9cd 6608 	strd	r6, r6, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC =
 8001a00:	f003 ffc4 	bl	800598c <memset>
	htim2.Init.Prescaler = 79;
 8001a04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a08:	234f      	movs	r3, #79	; 0x4f
 8001a0a:	e9c4 0300 	strd	r0, r3, [r4]
	htim2.Init.Period = 999;
 8001a0e:	f240 33e7 	movw	r3, #999	; 0x3e7
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a12:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	e9c4 3603 	strd	r3, r6, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	60a6      	str	r6, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a1a:	f8c4 8018 	str.w	r8, [r4, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a1e:	f002 fe07 	bl	8004630 <HAL_TIM_OC_Init>
 8001a22:	b108      	cbz	r0, 8001a28 <main+0x1ec>
 8001a24:	b672      	cpsid	i
	while (1)
 8001a26:	e7fe      	b.n	8001a26 <main+0x1ea>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f002 fe31 	bl	8004690 <HAL_TIM_PWM_Init>
 8001a2e:	b108      	cbz	r0, 8001a34 <main+0x1f8>
 8001a30:	b672      	cpsid	i
	while (1)
 8001a32:	e7fe      	b.n	8001a32 <main+0x1f6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a34:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	eb0d 0103 	add.w	r1, sp, r3
 8001a3c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a3e:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a40:	f003 f974 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4602      	mov	r2, r0
 8001a46:	b108      	cbz	r0, 8001a4c <main+0x210>
 8001a48:	b672      	cpsid	i
	while (1)
 8001a4a:	e7fe      	b.n	8001a4a <main+0x20e>
	sConfigOC.Pulse = 5;
 8001a4c:	2530      	movs	r5, #48	; 0x30
 8001a4e:	2305      	movs	r3, #5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	9011      	str	r0, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a52:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a54:	a90f      	add	r1, sp, #60	; 0x3c
 8001a56:	4620      	mov	r0, r4
	sConfigOC.Pulse = 5;
 8001a58:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	f002 fe80 	bl	8004760 <HAL_TIM_OC_ConfigChannel>
 8001a60:	b108      	cbz	r0, 8001a66 <main+0x22a>
 8001a62:	b672      	cpsid	i
	while (1)
 8001a64:	e7fe      	b.n	8001a64 <main+0x228>
	sConfigOC.Pulse = 1010;
 8001a66:	f240 33f2 	movw	r3, #1010	; 0x3f2
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	a90f      	add	r1, sp, #60	; 0x3c
 8001a6e:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	970f      	str	r7, [sp, #60]	; 0x3c
	sConfigOC.Pulse = 1010;
 8001a72:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a74:	f002 fea8 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	b108      	cbz	r0, 8001a7e <main+0x242>
 8001a7a:	b672      	cpsid	i
	while (1)
 8001a7c:	e7fe      	b.n	8001a7c <main+0x240>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6993      	ldr	r3, [r2, #24]
 8001a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a86:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a88:	a90f      	add	r1, sp, #60	; 0x3c
	sConfigOC.Pulse = 1040;
 8001a8a:	f44f 6382 	mov.w	r3, #1040	; 0x410
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001a92:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.Pulse = 1040;
 8001a94:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a96:	f002 fe63 	bl	8004760 <HAL_TIM_OC_ConfigChannel>
 8001a9a:	b108      	cbz	r0, 8001aa0 <main+0x264>
 8001a9c:	b672      	cpsid	i
	while (1)
 8001a9e:	e7fe      	b.n	8001a9e <main+0x262>
	HAL_TIM_MspPostInit(&htim2);
 8001aa0:	4823      	ldr	r0, [pc, #140]	; (8001b30 <main+0x2f4>)
 8001aa2:	f000 fa2f 	bl	8001f04 <HAL_TIM_MspPostInit>
	htim16.Instance = TIM16;
 8001aa6:	4823      	ldr	r0, [pc, #140]	; (8001b34 <main+0x2f8>)
	htim16.Init.Prescaler = 79;
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <main+0x2fc>)
 8001aaa:	234f      	movs	r3, #79	; 0x4f
 8001aac:	e9c0 1300 	strd	r1, r3, [r0]
	htim16.Init.Period = 999;
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	htim16.Init.RepetitionCounter = 0;
 8001aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ac2:	f002 fd85 	bl	80045d0 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b108      	cbz	r0, 8001ace <main+0x292>
 8001aca:	b672      	cpsid	i
	while (1)
 8001acc:	e7fe      	b.n	8001acc <main+0x290>
	huart2.Instance = USART2;
 8001ace:	481b      	ldr	r0, [pc, #108]	; (8001b3c <main+0x300>)
	huart2.Init.BaudRate = 115200;
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <main+0x304>)
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	6103      	str	r3, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8001ad4:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	240c      	movs	r4, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ada:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	e9c0 4305 	strd	r4, r3, [r0, #20]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae6:	6243      	str	r3, [r0, #36]	; 0x24
	huart2.Init.BaudRate = 115200;
 8001ae8:	e9c0 2500 	strd	r2, r5, [r0]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aec:	f003 fe6b 	bl	80057c6 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b108      	cbz	r0, 8001af8 <main+0x2bc>
 8001af4:	b672      	cpsid	i
	while (1)
 8001af6:	e7fe      	b.n	8001af6 <main+0x2ba>
	huart1.Instance = USART1;
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <main+0x308>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <main+0x30c>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001afc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.BaudRate = 115200;
 8001b00:	e9c0 2500 	strd	r2, r5, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b04:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b0c:	e9c0 3308 	strd	r3, r3, [r0, #32]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b10:	f003 fe59 	bl	80057c6 <HAL_UART_Init>
 8001b14:	4605      	mov	r5, r0
 8001b16:	b1c8      	cbz	r0, 8001b4c <main+0x310>
 8001b18:	b672      	cpsid	i
	while (1)
 8001b1a:	e7fe      	b.n	8001b1a <main+0x2de>
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	20000670 	.word	0x20000670
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	20000708 	.word	0x20000708
 8001b34:	200006bc 	.word	0x200006bc
 8001b38:	40014400 	.word	0x40014400
 8001b3c:	200007d8 	.word	0x200007d8
 8001b40:	40004400 	.word	0x40004400
 8001b44:	20000754 	.word	0x20000754
 8001b48:	40013800 	.word	0x40013800
	ADC_MultiModeTypeDef multimode =
 8001b4c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001b50:	900a      	str	r0, [sp, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig =
 8001b52:	4601      	mov	r1, r0
 8001b54:	2218      	movs	r2, #24
 8001b56:	a80f      	add	r0, sp, #60	; 0x3c
 8001b58:	f003 ff18 	bl	800598c <memset>
	hadc1.Instance = ADC1;
 8001b5c:	4c41      	ldr	r4, [pc, #260]	; (8001c64 <main+0x428>)
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <main+0x42c>)
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b60:	6125      	str	r5, [r4, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b62:	f44f 7880 	mov.w	r8, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b66:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.NbrOfConversion = 1;
 8001b6a:	2601      	movs	r6, #1
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b6c:	2308      	movs	r3, #8
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b6e:	f8a4 8018 	strh.w	r8, [r4, #24]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b72:	4620      	mov	r0, r4
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b74:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b78:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b7c:	6163      	str	r3, [r4, #20]
	hadc1.Init.NbrOfConversion = 1;
 8001b7e:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b80:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b84:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b88:	6365      	str	r5, [r4, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001b8a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8e:	f000 fbc1 	bl	8002314 <HAL_ADC_Init>
 8001b92:	b108      	cbz	r0, 8001b98 <main+0x35c>
 8001b94:	b672      	cpsid	i
	while (1)
 8001b96:	e7fe      	b.n	8001b96 <main+0x35a>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b98:	9008      	str	r0, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b9a:	a908      	add	r1, sp, #32
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f001 f899 	bl	8002cd4 <HAL_ADCEx_MultiModeConfigChannel>
 8001ba2:	b108      	cbz	r0, 8001ba8 <main+0x36c>
 8001ba4:	b672      	cpsid	i
	while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <main+0x36a>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <main+0x430>)
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001baa:	f04f 0a04 	mov.w	sl, #4
	sConfig.Offset = 0;
 8001bae:	e9cd a013 	strd	sl, r0, [sp, #76]	; 0x4c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb2:	f04f 0906 	mov.w	r9, #6
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bb6:	277f      	movs	r7, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb8:	a90f      	add	r1, sp, #60	; 0x3c
 8001bba:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bbc:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bc0:	e9cd a711 	strd	sl, r7, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc4:	f000 fcc4 	bl	8002550 <HAL_ADC_ConfigChannel>
 8001bc8:	4605      	mov	r5, r0
 8001bca:	b108      	cbz	r0, 8001bd0 <main+0x394>
 8001bcc:	b672      	cpsid	i
	while (1)
 8001bce:	e7fe      	b.n	8001bce <main+0x392>
	ADC_ChannelConfTypeDef sConfig =
 8001bd0:	2218      	movs	r2, #24
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	a80f      	add	r0, sp, #60	; 0x3c
 8001bd6:	f003 fed9 	bl	800598c <memset>
	hadc2.Instance = ADC2;
 8001bda:	4c25      	ldr	r4, [pc, #148]	; (8001c70 <main+0x434>)
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <main+0x438>)
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001bde:	f8a4 8018 	strh.w	r8, [r4, #24]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001be2:	e9c4 3500 	strd	r3, r5, [r4]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001be6:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bee:	4620      	mov	r0, r4
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf0:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf4:	e9c4 5a04 	strd	r5, sl, [r4, #16]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001bf8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	hadc2.Init.NbrOfConversion = 1;
 8001bfc:	61e6      	str	r6, [r4, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bfe:	f884 5020 	strb.w	r5, [r4, #32]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001c02:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c06:	6365      	str	r5, [r4, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8001c08:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c0c:	f000 fb82 	bl	8002314 <HAL_ADC_Init>
 8001c10:	b108      	cbz	r0, 8001c16 <main+0x3da>
 8001c12:	b672      	cpsid	i
	while (1)
 8001c14:	e7fe      	b.n	8001c14 <main+0x3d8>
	sConfig.Channel = ADC_CHANNEL_12;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <main+0x43c>)
	sConfig.Offset = 0;
 8001c18:	e9cd a013 	strd	sl, r0, [sp, #76]	; 0x4c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c1c:	a90f      	add	r1, sp, #60	; 0x3c
 8001c1e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c20:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c24:	e9cd a711 	strd	sl, r7, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c28:	f000 fc92 	bl	8002550 <HAL_ADC_ConfigChannel>
 8001c2c:	b108      	cbz	r0, 8001c32 <main+0x3f6>
 8001c2e:	b672      	cpsid	i
	while (1)
 8001c30:	e7fe      	b.n	8001c30 <main+0x3f4>
	Echo_PCI_State_Init();
 8001c32:	f7ff fce5 	bl	8001600 <Echo_PCI_State_Init>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001c36:	4c11      	ldr	r4, [pc, #68]	; (8001c7c <main+0x440>)
		Echo_Shell_CMD_Handle();
 8001c38:	f7ff fa50 	bl	80010dc <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001c3c:	f000 fb3a 	bl	80022b4 <HAL_GetTick>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	1ac0      	subs	r0, r0, r3
 8001c44:	2804      	cmp	r0, #4
 8001c46:	d9f7      	bls.n	8001c38 <main+0x3fc>
			Echo_Sys_FSM_State_Handle();
 8001c48:	f7ff fd4a 	bl	80016e0 <Echo_Sys_FSM_State_Handle>
			Echo_Btn_Handle();
 8001c4c:	f7ff f810 	bl	8000c70 <Echo_Btn_Handle>
			Echo_LED_Handle();
 8001c50:	f7ff f914 	bl	8000e7c <Echo_LED_Handle>
			Echo_ADC_Handle();
 8001c54:	f7fe fff2 	bl	8000c3c <Echo_ADC_Handle>
			Echo_Shell_Input_Print();
 8001c58:	f7ff f9aa 	bl	8000fb0 <Echo_Shell_Input_Print>
			schdule_tick = HAL_GetTick();
 8001c5c:	f000 fb2a 	bl	80022b4 <HAL_GetTick>
 8001c60:	6020      	str	r0, [r4, #0]
 8001c62:	e7e9      	b.n	8001c38 <main+0x3fc>
 8001c64:	20000488 	.word	0x20000488
 8001c68:	50040000 	.word	0x50040000
 8001c6c:	2e300800 	.word	0x2e300800
 8001c70:	200004ec 	.word	0x200004ec
 8001c74:	50040100 	.word	0x50040100
 8001c78:	32601000 	.word	0x32601000
 8001c7c:	2000085c 	.word	0x2000085c

08001c80 <Error_Handler>:
 8001c80:	b672      	cpsid	i
	while (1)
 8001c82:	e7fe      	b.n	8001c82 <Error_Handler+0x2>

08001c84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_MspInit+0x2c>)
 8001c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	661a      	str	r2, [r3, #96]	; 0x60
 8001c8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001c90:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	f002 0201 	and.w	r2, r2, #1
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	b002      	add	sp, #8
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	2214      	movs	r2, #20
{
 8001cb8:	b08a      	sub	sp, #40	; 0x28
 8001cba:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	eb0d 0002 	add.w	r0, sp, r2
 8001cc2:	f003 fe63 	bl	800598c <memset>
  if(hadc->Instance==ADC1)
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <HAL_ADC_MspInit+0xf0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d13c      	bne.n	8001d48 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cce:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <HAL_ADC_MspInit+0xf4>)
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cd4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_ADC_MspInit+0xf8>)
 8001cda:	d108      	bne.n	8001cee <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ce6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cea:	9201      	str	r2, [sp, #4]
 8001cec:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001cf0:	4e2f      	ldr	r6, [pc, #188]	; (8001db0 <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d02:	2440      	movs	r4, #64	; 0x40
 8001d04:	230b      	movs	r3, #11
 8001d06:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	a905      	add	r1, sp, #20
    hdma_adc1.Instance = DMA1_Channel1;
 8001d0c:	4c29      	ldr	r4, [pc, #164]	; (8001db4 <HAL_ADC_MspInit+0x100>)
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f001 fb6d 	bl	80033f0 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	6122      	str	r2, [r4, #16]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2c:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001d30:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001d34:	4620      	mov	r0, r4
 8001d36:	f001 f8a9 	bl	8002e8c <HAL_DMA_Init>
 8001d3a:	b108      	cbz	r0, 8001d40 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
 8001d3c:	f7ff ffa0 	bl	8001c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001d40:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001d42:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d44:	b00a      	add	sp, #40	; 0x28
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_ADC_MspInit+0x104>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d1fa      	bne.n	8001d44 <HAL_ADC_MspInit+0x90>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_ADC_MspInit+0xf4>)
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d54:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_ADC_MspInit+0xf8>)
 8001d5a:	d108      	bne.n	8001d6e <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d6a:	9203      	str	r2, [sp, #12]
 8001d6c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc2.Instance = DMA1_Channel2;
 8001d70:	4c12      	ldr	r4, [pc, #72]	; (8001dbc <HAL_ADC_MspInit+0x108>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	9304      	str	r3, [sp, #16]
 8001d80:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d82:	2680      	movs	r6, #128	; 0x80
 8001d84:	230b      	movs	r3, #11
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d8c:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f001 fb2e 	bl	80033f0 <HAL_GPIO_Init>
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001d94:	480a      	ldr	r0, [pc, #40]	; (8001dc0 <HAL_ADC_MspInit+0x10c>)
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	6126      	str	r6, [r4, #16]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001da2:	e7bf      	b.n	8001d24 <HAL_ADC_MspInit+0x70>
 8001da4:	50040000 	.word	0x50040000
 8001da8:	20000860 	.word	0x20000860
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40020008 	.word	0x40020008
 8001db4:	20000550 	.word	0x20000550
 8001db8:	50040100 	.word	0x50040100
 8001dbc:	20000598 	.word	0x20000598
 8001dc0:	4002001c 	.word	0x4002001c

08001dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc4:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM1)
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dc8:	6802      	ldr	r2, [r0, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d115      	bne.n	8001dfa <HAL_TIM_PWM_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001dd2:	2102      	movs	r1, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dda:	661a      	str	r2, [r3, #96]	; 0x60
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001dea:	f000 ffe7 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dee:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001df0:	b003      	add	sp, #12
 8001df2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001df6:	f001 b813 	b.w	8002e20 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	b003      	add	sp, #12
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e00:	40012c00 	.word	0x40012c00

08001e04 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 8001e04:	6803      	ldr	r3, [r0, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001e0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e0c:	4605      	mov	r5, r0
  if(htim_oc->Instance==TIM2)
 8001e0e:	d14e      	bne.n	8001eae <HAL_TIM_OC_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e10:	f503 3304 	add.w	r3, r3, #135168	; 0x21000

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001e14:	4c27      	ldr	r4, [pc, #156]	; (8001eb4 <HAL_TIM_OC_MspInit+0xb0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001e18:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8001ec0 <HAL_TIM_OC_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	659a      	str	r2, [r3, #88]	; 0x58
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	9301      	str	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e30:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001e34:	2304      	movs	r3, #4
 8001e36:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e3a:	e9c4 e204 	strd	lr, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3e:	2300      	movs	r3, #0
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e44:	2220      	movs	r2, #32
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001e46:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001e4c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001e50:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001e52:	f001 f81b 	bl	8002e8c <HAL_DMA_Init>
 8001e56:	b108      	cbz	r0, 8001e5c <HAL_TIM_OC_MspInit+0x58>
    {
      Error_Handler();
 8001e58:	f7ff ff12 	bl	8001c80 <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001e5c:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_TIM_OC_MspInit+0xb4>)
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001e5e:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001e60:	632c      	str	r4, [r5, #48]	; 0x30
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001e62:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001e64:	4c15      	ldr	r4, [pc, #84]	; (8001ebc <HAL_TIM_OC_MspInit+0xb8>)
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001e66:	2304      	movs	r3, #4
 8001e68:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001e72:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e76:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001e7a:	2220      	movs	r2, #32
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7c:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001e7e:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001e82:	4620      	mov	r0, r4
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e84:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001e8a:	f000 ffff 	bl	8002e8c <HAL_DMA_Init>
 8001e8e:	b108      	cbz	r0, 8001e94 <HAL_TIM_OC_MspInit+0x90>
    {
      Error_Handler();
 8001e90:	f7ff fef6 	bl	8001c80 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001e94:	626c      	str	r4, [r5, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2102      	movs	r1, #2
 8001e9a:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001e9c:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001e9e:	f000 ff8d 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea2:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eaa:	f000 bfb9 	b.w	8002e20 <HAL_NVIC_EnableIRQ>
}
 8001eae:	b003      	add	sp, #12
 8001eb0:	bd30      	pop	{r4, r5, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000628 	.word	0x20000628
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	200005e0 	.word	0x200005e0
 8001ec0:	40020080 	.word	0x40020080

08001ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d115      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ece:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001ed2:	2102      	movs	r1, #2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ed6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001eda:	661a      	str	r2, [r3, #96]	; 0x60
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ee8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001eea:	f000 ff67 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eee:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ef0:	b003      	add	sp, #12
 8001ef2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ef6:	f000 bf93 	b.w	8002e20 <HAL_NVIC_EnableIRQ>
}
 8001efa:	b003      	add	sp, #12
 8001efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f00:	40014400 	.word	0x40014400

08001f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f04:	b530      	push	{r4, r5, lr}
 8001f06:	4604      	mov	r4, r0
 8001f08:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	2214      	movs	r2, #20
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	a803      	add	r0, sp, #12
 8001f10:	f003 fd3c 	bl	800598c <memset>
  if(htim->Instance==TIM1)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_TIM_MspPostInit+0xa4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d117      	bne.n	8001f4c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_TIM_MspPostInit+0xa8>)
 8001f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f34:	2302      	movs	r3, #2
 8001f36:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	a903      	add	r1, sp, #12
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f001 fa54 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f48:	b009      	add	sp, #36	; 0x24
 8001f4a:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d1fa      	bne.n	8001f48 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f62:	f002 0201 	and.w	r2, r2, #1
 8001f66:	9201      	str	r2, [sp, #4]
 8001f68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f6c:	f042 0202 	orr.w	r2, r2, #2
 8001f70:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7c:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	f248 0302 	movw	r3, #32770	; 0x8002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	a903      	add	r1, sp, #12
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f8c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f001 fa2f 	bl	80033f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
 8001f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fa2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	a903      	add	r1, sp, #12
 8001fa6:	e7cd      	b.n	8001f44 <HAL_TIM_MspPostInit+0x40>
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	b096      	sub	sp, #88	; 0x58
 8001fb8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	2214      	movs	r2, #20
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	a804      	add	r0, sp, #16
 8001fc0:	f003 fce4 	bl	800598c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	2234      	movs	r2, #52	; 0x34
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	a809      	add	r0, sp, #36	; 0x24
 8001fca:	f003 fcdf 	bl	800598c <memset>
  if(huart->Instance==USART1)
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_UART_MspInit+0xf0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d132      	bne.n	800203c <HAL_UART_MspInit+0x88>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd6:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fda:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fdc:	f001 ff52 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	b108      	cbz	r0, 8001fe6 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001fe2:	f7ff fe4d 	bl	8001c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	4830      	ldr	r0, [pc, #192]	; (80020ac <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff0:	661a      	str	r2, [r3, #96]	; 0x60
 8001ff2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ff4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffe:	f042 0202 	orr.w	r2, r2, #2
 8002002:	64da      	str	r2, [r3, #76]	; 0x4c
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	21c0      	movs	r1, #192	; 0xc0
 8002010:	2302      	movs	r3, #2
 8002012:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2400      	movs	r4, #0
 8002018:	2303      	movs	r3, #3
 800201a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002020:	2307      	movs	r3, #7
 8002022:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f001 f9e4 	bl	80033f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002028:	2025      	movs	r0, #37	; 0x25
 800202a:	4622      	mov	r2, r4
 800202c:	4621      	mov	r1, r4
 800202e:	f000 fec5 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002032:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002034:	f000 fef4 	bl	8002e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002038:	b016      	add	sp, #88	; 0x58
 800203a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_UART_MspInit+0xfc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d1fa      	bne.n	8002038 <HAL_UART_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002042:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002044:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f001 ff1c 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 800204c:	b108      	cbz	r0, 8002052 <HAL_UART_MspInit+0x9e>
      Error_Handler();
 800204e:	f7ff fe17 	bl	8001c80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_UART_MspInit+0xf4>)
 8002054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002056:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800205a:	659a      	str	r2, [r3, #88]	; 0x58
 800205c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2400      	movs	r4, #0
 8002082:	2303      	movs	r3, #3
 8002084:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002090:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f001 f9ad 	bl	80033f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002096:	2026      	movs	r0, #38	; 0x26
 8002098:	4622      	mov	r2, r4
 800209a:	4621      	mov	r1, r4
 800209c:	f000 fe8e 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020a0:	2026      	movs	r0, #38	; 0x26
 80020a2:	e7c7      	b.n	8002034 <HAL_UART_MspInit+0x80>
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	40004400 	.word	0x40004400

080020b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler>

080020b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler>

080020b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler>

080020ba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler>

080020bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler>

080020be <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:
 80020c0:	4770      	bx	lr

080020c2 <PendSV_Handler>:
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 b8ea 	b.w	800229c <HAL_IncTick>

080020c8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <DMA1_Channel1_IRQHandler+0x8>)
 80020ca:	f000 bfd3 	b.w	8003074 <HAL_DMA_IRQHandler>
 80020ce:	bf00      	nop
 80020d0:	20000550 	.word	0x20000550

080020d4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <DMA1_Channel2_IRQHandler+0x8>)
 80020d6:	f000 bfcd 	b.w	8003074 <HAL_DMA_IRQHandler>
 80020da:	bf00      	nop
 80020dc:	20000598 	.word	0x20000598

080020e0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <DMA1_Channel5_IRQHandler+0x8>)
 80020e2:	f000 bfc7 	b.w	8003074 <HAL_DMA_IRQHandler>
 80020e6:	bf00      	nop
 80020e8:	200005e0 	.word	0x200005e0

080020ec <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <DMA1_Channel7_IRQHandler+0x8>)
 80020ee:	f000 bfc1 	b.w	8003074 <HAL_DMA_IRQHandler>
 80020f2:	bf00      	nop
 80020f4:	20000628 	.word	0x20000628

080020f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <TIM1_UP_TIM16_IRQHandler+0x14>)
 80020fc:	f002 f950 	bl	80043a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002106:	f002 b94b 	b.w	80043a0 <HAL_TIM_IRQHandler>
 800210a:	bf00      	nop
 800210c:	20000670 	.word	0x20000670
 8002110:	200006bc 	.word	0x200006bc

08002114 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002114:	4801      	ldr	r0, [pc, #4]	; (800211c <TIM2_IRQHandler+0x8>)
 8002116:	f002 b943 	b.w	80043a0 <HAL_TIM_IRQHandler>
 800211a:	bf00      	nop
 800211c:	20000708 	.word	0x20000708

08002120 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002120:	4801      	ldr	r0, [pc, #4]	; (8002128 <USART1_IRQHandler+0x8>)
 8002122:	f002 bf1b 	b.w	8004f5c <HAL_UART_IRQHandler>
 8002126:	bf00      	nop
 8002128:	20000754 	.word	0x20000754

0800212c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800212c:	4801      	ldr	r0, [pc, #4]	; (8002134 <USART2_IRQHandler+0x8>)
 800212e:	f002 bf15 	b.w	8004f5c <HAL_UART_IRQHandler>
 8002132:	bf00      	nop
 8002134:	200007d8 	.word	0x200007d8

08002138 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	460d      	mov	r5, r1
 800213c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	460e      	mov	r6, r1
 8002140:	1b73      	subs	r3, r6, r5
 8002142:	429c      	cmp	r4, r3
 8002144:	dc01      	bgt.n	800214a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002146:	4620      	mov	r0, r4
 8002148:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800214a:	f3af 8000 	nop.w
 800214e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	e7f5      	b.n	8002140 <_read+0x8>

08002154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	460d      	mov	r5, r1
 8002158:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	460e      	mov	r6, r1
 800215c:	1b73      	subs	r3, r6, r5
 800215e:	429c      	cmp	r4, r3
 8002160:	dc01      	bgt.n	8002166 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002162:	4620      	mov	r0, r4
 8002164:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002166:	f816 0b01 	ldrb.w	r0, [r6], #1
 800216a:	f7fe fed7 	bl	8000f1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	e7f5      	b.n	800215c <_write+0x8>

08002170 <_close>:

int _close(int file)
{
	return -1;
}
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	4770      	bx	lr

08002176 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800217c:	2000      	movs	r0, #0
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002180:	2001      	movs	r0, #1
 8002182:	4770      	bx	lr

08002184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002184:	2000      	movs	r0, #0
 8002186:	4770      	bx	lr

08002188 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <_sbrk+0x30>)
 800218a:	6811      	ldr	r1, [r2, #0]
{
 800218c:	b510      	push	{r4, lr}
 800218e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002190:	b909      	cbnz	r1, 8002196 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <_sbrk+0x34>)
 8002194:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	6810      	ldr	r0, [r2, #0]
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <_sbrk+0x38>)
 800219a:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <_sbrk+0x3c>)
 800219c:	4403      	add	r3, r0
 800219e:	1b09      	subs	r1, r1, r4
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d906      	bls.n	80021b2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80021a4:	f003 fbc8 	bl	8005938 <__errno>
 80021a8:	230c      	movs	r3, #12
 80021aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80021b0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80021b2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80021b4:	e7fc      	b.n	80021b0 <_sbrk+0x28>
 80021b6:	bf00      	nop
 80021b8:	20000864 	.word	0x20000864
 80021bc:	20000880 	.word	0x20000880
 80021c0:	2000a000 	.word	0x2000a000
 80021c4:	00000800 	.word	0x00000800

080021c8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c8:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <SystemInit+0x10>)
 80021ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopForever+0x2>
 80021e0:	f7ff fff2 	bl	80021c8 <SystemInit>
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <LoopForever+0x6>)
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <LoopForever+0xa>)
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <LoopForever+0xe>)
 80021ea:	2300      	movs	r3, #0
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:
 80021ee:	58d4      	ldr	r4, [r2, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:
 80021f4:	18c4      	adds	r4, r0, r3
 80021f6:	428c      	cmp	r4, r1
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <LoopForever+0x12>)
 80021fc:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <LoopForever+0x16>)
 80021fe:	2300      	movs	r3, #0
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:
 8002206:	42a2      	cmp	r2, r4
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>
 800220a:	f003 fb9b 	bl	8005944 <__libc_init_array>
 800220e:	f7ff fb15 	bl	800183c <main>

08002212 <LoopForever>:
 8002212:	e7fe      	b.n	8002212 <LoopForever>
 8002214:	2000a000 	.word	0x2000a000
 8002218:	20000000 	.word	0x20000000
 800221c:	200000a4 	.word	0x200000a4
 8002220:	08007ed0 	.word	0x08007ed0
 8002224:	200000a4 	.word	0x200000a4
 8002228:	2000087c 	.word	0x2000087c

0800222c <ADC1_2_IRQHandler>:
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_InitTick+0x40>)
{
 8002234:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002236:	7818      	ldrb	r0, [r3, #0]
 8002238:	b908      	cbnz	r0, 800223e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800223a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800223c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800223e:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_InitTick+0x44>)
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	fbb3 f3f0 	udiv	r3, r3, r0
 8002248:	6810      	ldr	r0, [r2, #0]
 800224a:	fbb0 f0f3 	udiv	r0, r0, r3
 800224e:	f000 fe09 	bl	8002e64 <HAL_SYSTICK_Config>
 8002252:	4604      	mov	r4, r0
 8002254:	2800      	cmp	r0, #0
 8002256:	d1f0      	bne.n	800223a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002258:	2d0f      	cmp	r5, #15
 800225a:	d8ee      	bhi.n	800223a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225c:	4602      	mov	r2, r0
 800225e:	4629      	mov	r1, r5
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f000 fdaa 	bl	8002dbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_InitTick+0x48>)
 800226a:	4620      	mov	r0, r4
 800226c:	601d      	str	r5, [r3, #0]
  return status;
 800226e:	e7e5      	b.n	800223c <HAL_InitTick+0xc>
 8002270:	20000018 	.word	0x20000018
 8002274:	20000014 	.word	0x20000014
 8002278:	2000001c 	.word	0x2000001c

0800227c <HAL_Init>:
{
 800227c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227e:	2003      	movs	r0, #3
 8002280:	f000 fd8a 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff ffd3 	bl	8002230 <HAL_InitTick>
 800228a:	4604      	mov	r4, r0
 800228c:	b918      	cbnz	r0, 8002296 <HAL_Init+0x1a>
    HAL_MspInit();
 800228e:	f7ff fcf9 	bl	8001c84 <HAL_MspInit>
}
 8002292:	4620      	mov	r0, r4
 8002294:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002296:	2401      	movs	r4, #1
 8002298:	e7fb      	b.n	8002292 <HAL_Init+0x16>
	...

0800229c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_IncTick+0x10>)
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_IncTick+0x14>)
 80022a0:	6811      	ldr	r1, [r2, #0]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	440b      	add	r3, r1
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000868 	.word	0x20000868
 80022b0:	20000018 	.word	0x20000018

080022b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022b4:	4b01      	ldr	r3, [pc, #4]	; (80022bc <HAL_GetTick+0x8>)
 80022b6:	6818      	ldr	r0, [r3, #0]
}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000868 	.word	0x20000868

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fff6 	bl	80022b4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80022ca:	bf1c      	itt	ne
 80022cc:	4b05      	ldrne	r3, [pc, #20]	; (80022e4 <HAL_Delay+0x24>)
 80022ce:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80022d2:	bf18      	it	ne
 80022d4:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d6:	f7ff ffed 	bl	80022b4 <HAL_GetTick>
 80022da:	1b43      	subs	r3, r0, r5
 80022dc:	42a3      	cmp	r3, r4
 80022de:	d3fa      	bcc.n	80022d6 <HAL_Delay+0x16>
  {
  }
}
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	20000018 	.word	0x20000018

080022e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022e8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022ea:	0dcc      	lsrs	r4, r1, #23
 80022ec:	f004 0404 	and.w	r4, r4, #4
 80022f0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80022f2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80022f6:	5823      	ldr	r3, [r4, r0]
 80022f8:	2507      	movs	r5, #7
 80022fa:	408d      	lsls	r5, r1
 80022fc:	ea23 0305 	bic.w	r3, r3, r5
 8002300:	fa02 f101 	lsl.w	r1, r2, r1
 8002304:	430b      	orrs	r3, r1
 8002306:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002308:	bd30      	pop	{r4, r5, pc}

0800230a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230a:	6880      	ldr	r0, [r0, #8]
}
 800230c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002310:	4770      	bx	lr
	...

08002314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002314:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002316:	2300      	movs	r3, #0
 8002318:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800231a:	4604      	mov	r4, r0
 800231c:	2800      	cmp	r0, #0
 800231e:	f000 80c3 	beq.w	80024a8 <HAL_ADC_Init+0x194>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002322:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002324:	b925      	cbnz	r5, 8002330 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002326:	f7ff fcc5 	bl	8001cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232a:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800232c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002330:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002332:	6883      	ldr	r3, [r0, #8]
 8002334:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002336:	bf41      	itttt	mi
 8002338:	6883      	ldrmi	r3, [r0, #8]
 800233a:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 800233e:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8002342:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002344:	6883      	ldr	r3, [r0, #8]
 8002346:	00dd      	lsls	r5, r3, #3
 8002348:	f140 808e 	bpl.w	8002468 <HAL_ADC_Init+0x154>
 800234c:	6883      	ldr	r3, [r0, #8]
 800234e:	00d9      	lsls	r1, r3, #3
 8002350:	f100 80a1 	bmi.w	8002496 <HAL_ADC_Init+0x182>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002364:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	f7ff ffd0 	bl	800230a <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002374:	f040 8095 	bne.w	80024a2 <HAL_ADC_Init+0x18e>
    ADC_STATE_CLR_SET(hadc->State,
 8002378:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800237c:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002380:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002384:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002386:	07da      	lsls	r2, r3, #31
 8002388:	d40e      	bmi.n	80023a8 <HAL_ADC_Init+0x94>
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_ADC_Init+0x198>)
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002392:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002394:	4313      	orrs	r3, r2
 8002396:	07db      	lsls	r3, r3, #31
 8002398:	d406      	bmi.n	80023a8 <HAL_ADC_Init+0x94>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800239a:	4a45      	ldr	r2, [pc, #276]	; (80024b0 <HAL_ADC_Init+0x19c>)
 800239c:	6865      	ldr	r5, [r4, #4]
 800239e:	6893      	ldr	r3, [r2, #8]
 80023a0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80023a4:	432b      	orrs	r3, r5
 80023a6:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80023a8:	68e5      	ldr	r5, [r4, #12]
 80023aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023ac:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80023b0:	432b      	orrs	r3, r5
 80023b2:	68a5      	ldr	r5, [r4, #8]
 80023b4:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b6:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023b8:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80023ba:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023c2:	bf02      	ittt	eq
 80023c4:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80023c6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80023ca:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023d0:	b122      	cbz	r2, 80023dc <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80023d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d4:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023d8:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023da:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023dc:	68c5      	ldr	r5, [r0, #12]
 80023de:	4a35      	ldr	r2, [pc, #212]	; (80024b4 <HAL_ADC_Init+0x1a0>)
 80023e0:	402a      	ands	r2, r5
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e6:	f7ff ff90 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ea:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	f002 0208 	and.w	r2, r2, #8
 80023f2:	4302      	orrs	r2, r0
 80023f4:	d120      	bne.n	8002438 <HAL_ADC_Init+0x124>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023f6:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023f8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023fc:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023fe:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002400:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002404:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002408:	f020 0002 	bic.w	r0, r0, #2
 800240c:	4302      	orrs	r2, r0
 800240e:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002410:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002414:	2a01      	cmp	r2, #1
 8002416:	d140      	bne.n	800249a <HAL_ADC_Init+0x186>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002418:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 800241c:	6918      	ldr	r0, [r3, #16]
 800241e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002422:	f020 0004 	bic.w	r0, r0, #4
 8002426:	432a      	orrs	r2, r5
 8002428:	4302      	orrs	r2, r0
 800242a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800242c:	4302      	orrs	r2, r0
 800242e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002430:	4302      	orrs	r2, r0
 8002432:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002436:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002438:	6922      	ldr	r2, [r4, #16]
 800243a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800243c:	bf05      	ittet	eq
 800243e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002440:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002442:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002444:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002448:	bf06      	itte	eq
 800244a:	f020 000f 	biceq.w	r0, r0, #15
 800244e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002450:	f022 020f 	bicne.w	r2, r2, #15
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002456:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002458:	f023 0303 	bic.w	r3, r3, #3
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002462:	4608      	mov	r0, r1
 8002464:	b003      	add	sp, #12
 8002466:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002468:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_ADC_Init+0x1a4>)
 800246c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6083      	str	r3, [r0, #8]
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_ADC_Init+0x1a8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8002486:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f43f af5e 	beq.w	800234c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002490:	9b01      	ldr	r3, [sp, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	e7f7      	b.n	8002486 <HAL_ADC_Init+0x172>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002496:	2100      	movs	r1, #0
 8002498:	e765      	b.n	8002366 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	e7c9      	b.n	8002436 <HAL_ADC_Init+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80024a8:	2101      	movs	r1, #1
 80024aa:	e7da      	b.n	8002462 <HAL_ADC_Init+0x14e>
 80024ac:	50040000 	.word	0x50040000
 80024b0:	50040300 	.word	0x50040300
 80024b4:	fff0c007 	.word	0xfff0c007
 80024b8:	00030d40 	.word	0x00030d40
 80024bc:	20000014 	.word	0x20000014

080024c0 <HAL_ADC_ConvHalfCpltCallback>:
 80024c0:	4770      	bx	lr

080024c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024c2:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80024c6:	f7ff fffb 	bl	80024c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ca:	bd08      	pop	{r3, pc}

080024cc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024d0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80024d4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024d8:	d121      	bne.n	800251e <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	6811      	ldr	r1, [r2, #0]
 80024e4:	0708      	lsls	r0, r1, #28
 80024e6:	d516      	bpl.n	8002516 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024e8:	68d1      	ldr	r1, [r2, #12]
 80024ea:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80024ee:	d10e      	bne.n	800250e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80024f6:	d10a      	bne.n	800250e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002502:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002504:	bf5e      	ittt	pl
 8002506:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8002508:	f042 0201 	orrpl.w	r2, r2, #1
 800250c:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fac2 	bl	8000a98 <HAL_ADC_ConvCpltCallback>
}
 8002514:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	f012 0f02 	tst.w	r2, #2
 800251c:	e7eb      	b.n	80024f6 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800251e:	06d2      	lsls	r2, r2, #27
 8002520:	d503      	bpl.n	800252a <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fa72 	bl	8000a0c <HAL_ADC_ErrorCallback>
 8002528:	e7f4      	b.n	8002514 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800252c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	4718      	bx	r3

08002534 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002534:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002536:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002538:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002540:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002548:	f7fe fa60 	bl	8000a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800254c:	bd08      	pop	{r3, pc}
	...

08002550 <HAL_ADC_ConfigChannel>:
{
 8002550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002552:	2300      	movs	r3, #0
 8002554:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002556:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800255a:	2b01      	cmp	r3, #1
{
 800255c:	4605      	mov	r5, r0
 800255e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002560:	f000 81a5 	beq.w	80028ae <HAL_ADC_ConfigChannel+0x35e>
 8002564:	2301      	movs	r3, #1
 8002566:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	6800      	ldr	r0, [r0, #0]
 800256c:	f7ff fecd 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002570:	2800      	cmp	r0, #0
 8002572:	f040 8196 	bne.w	80028a2 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank <= 5U)
 8002576:	684b      	ldr	r3, [r1, #4]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d809      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 800257c:	3b02      	subs	r3, #2
 800257e:	2b03      	cmp	r3, #3
 8002580:	f200 8094 	bhi.w	80026ac <HAL_ADC_ConfigChannel+0x15c>
 8002584:	e8df f003 	tbb	[pc, r3]
 8002588:	8f8d8b02 	.word	0x8f8d8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800258c:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800258e:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002590:	6862      	ldr	r2, [r4, #4]
 8002592:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002594:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002596:	0991      	lsrs	r1, r2, #6
 8002598:	f001 010c 	and.w	r1, r1, #12
 800259c:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80025a0:	f002 021f 	and.w	r2, r2, #31
 80025a4:	59ce      	ldr	r6, [r1, r7]
 80025a6:	f04f 0c1f 	mov.w	ip, #31
 80025aa:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80025ae:	4093      	lsls	r3, r2
 80025b0:	fa0c f202 	lsl.w	r2, ip, r2
 80025b4:	ea26 0202 	bic.w	r2, r6, r2
 80025b8:	4313      	orrs	r3, r2
 80025ba:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025bc:	f7ff fea5 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c2:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c4:	6882      	ldr	r2, [r0, #8]
 80025c6:	f002 0208 	and.w	r2, r2, #8
 80025ca:	430a      	orrs	r2, r1
 80025cc:	d124      	bne.n	8002618 <HAL_ADC_ConfigChannel+0xc8>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025ce:	68a3      	ldr	r3, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025d0:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025d6:	d16b      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025d8:	f7ff fe86 	bl	80022e8 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025dc:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025de:	6953      	ldr	r3, [r2, #20]
 80025e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025e4:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e6:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025e8:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ea:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025ec:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025ee:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f0:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80025f4:	d064      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025f6:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80025fa:	0048      	lsls	r0, r1, #1
 80025fc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80025fe:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8002602:	4081      	lsls	r1, r0
 8002604:	48ab      	ldr	r0, [pc, #684]	; (80028b4 <HAL_ADC_ConfigChannel+0x364>)
 8002606:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800260a:	4038      	ands	r0, r7
 800260c:	4310      	orrs	r0, r2
 800260e:	4301      	orrs	r1, r0
 8002610:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002614:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002618:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800261a:	6883      	ldr	r3, [r0, #8]
 800261c:	07d9      	lsls	r1, r3, #31
 800261e:	d433      	bmi.n	8002688 <HAL_ADC_ConfigChannel+0x138>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002620:	68e7      	ldr	r7, [r4, #12]
 8002622:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002624:	4aa4      	ldr	r2, [pc, #656]	; (80028b8 <HAL_ADC_ConfigChannel+0x368>)
 8002626:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800262a:	f007 0c18 	and.w	ip, r7, #24
 800262e:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002632:	fa22 f20c 	lsr.w	r2, r2, ip
 8002636:	401a      	ands	r2, r3
 8002638:	ea21 0106 	bic.w	r1, r1, r6
 800263c:	430a      	orrs	r2, r1
 800263e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002642:	4a9e      	ldr	r2, [pc, #632]	; (80028bc <HAL_ADC_ConfigChannel+0x36c>)
 8002644:	4297      	cmp	r7, r2
 8002646:	d11f      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x138>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002648:	2e00      	cmp	r6, #0
 800264a:	f040 808e 	bne.w	800276a <HAL_ADC_ConfigChannel+0x21a>
 800264e:	0e9a      	lsrs	r2, r3, #26
 8002650:	3201      	adds	r2, #1
 8002652:	f002 071f 	and.w	r7, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265a:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800265c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002660:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	f200 80b3 	bhi.w	80027ce <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002668:	430a      	orrs	r2, r1
 800266a:	2e00      	cmp	r6, #0
 800266c:	f040 8099 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x252>
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800267c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267e:	ea42 0103 	orr.w	r1, r2, r3
 8002682:	68a2      	ldr	r2, [r4, #8]
 8002684:	f7ff fe30 	bl	80022e8 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002688:	6821      	ldr	r1, [r4, #0]
 800268a:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <HAL_ADC_ConfigChannel+0x370>)
 800268c:	4219      	tst	r1, r3
 800268e:	f040 80b9 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x2b4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002692:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002694:	2300      	movs	r3, #0
 8002696:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800269a:	b003      	add	sp, #12
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800269e:	2312      	movs	r3, #18
 80026a0:	e775      	b.n	800258e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026a2:	2318      	movs	r3, #24
 80026a4:	e773      	b.n	800258e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	e770      	b.n	800258e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026ac:	2306      	movs	r3, #6
 80026ae:	e76e      	b.n	800258e <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026b0:	461a      	mov	r2, r3
 80026b2:	f7ff fe19 	bl	80022e8 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026b6:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026b8:	6953      	ldr	r3, [r2, #20]
 80026ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026be:	e791      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026c0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80026c2:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026c4:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c8:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026cc:	2e00      	cmp	r6, #0
 80026ce:	d138      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1f2>
 80026d0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80026d6:	bf02      	ittt	eq
 80026d8:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 80026da:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80026de:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026e0:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ea:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026ee:	bb68      	cbnz	r0, 800274c <HAL_ADC_ConfigChannel+0x1fc>
 80026f0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80026f6:	bf02      	ittt	eq
 80026f8:	685a      	ldreq	r2, [r3, #4]
 80026fa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80026fe:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002700:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800270a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800270e:	bb10      	cbnz	r0, 8002756 <HAL_ADC_ConfigChannel+0x206>
 8002710:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002714:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002716:	bf02      	ittt	eq
 8002718:	689a      	ldreq	r2, [r3, #8]
 800271a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800271e:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002720:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800272a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800272e:	b9b8      	cbnz	r0, 8002760 <HAL_ADC_ConfigChannel+0x210>
 8002730:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002734:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002736:	bf02      	ittt	eq
 8002738:	68da      	ldreq	r2, [r3, #12]
 800273a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800273e:	60da      	streq	r2, [r3, #12]
}
 8002740:	e76a      	b.n	8002618 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	e7c3      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	e7ce      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	e7d9      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	e7e4      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800276e:	b132      	cbz	r2, 800277e <HAL_ADC_ConfigChannel+0x22e>
  return __builtin_clz(value);
 8002770:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	3201      	adds	r2, #1
 8002776:	f002 021f 	and.w	r2, r2, #31
 800277a:	2a09      	cmp	r2, #9
 800277c:	d816      	bhi.n	80027ac <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002782:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002786:	3201      	adds	r2, #1
 8002788:	0692      	lsls	r2, r2, #26
 800278a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002792:	fab1 f181 	clz	r1, r1
 8002796:	3101      	adds	r1, #1
 8002798:	f001 071f 	and.w	r7, r1, #31
 800279c:	2101      	movs	r1, #1
 800279e:	40b9      	lsls	r1, r7
 80027a0:	e762      	b.n	8002668 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	e762      	b.n	8002672 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	3201      	adds	r2, #1
 80027b6:	0692      	lsls	r2, r2, #26
 80027b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80027c0:	fab1 f181 	clz	r1, r1
 80027c4:	3101      	adds	r1, #1
 80027c6:	f001 071f 	and.w	r7, r1, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	40b9      	lsls	r1, r7
 80027ce:	430a      	orrs	r2, r1
 80027d0:	b95e      	cbnz	r6, 80027ea <HAL_ADC_ConfigChannel+0x29a>
 80027d2:	0e9e      	lsrs	r6, r3, #26
 80027d4:	3601      	adds	r6, #1
 80027d6:	f006 061f 	and.w	r6, r6, #31
 80027da:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80027de:	391e      	subs	r1, #30
 80027e0:	0509      	lsls	r1, r1, #20
 80027e2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e6:	4311      	orrs	r1, r2
 80027e8:	e74b      	b.n	8002682 <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80027ee:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f2:	3101      	adds	r1, #1
 80027f4:	f001 031f 	and.w	r3, r1, #31
 80027f8:	f06f 061d 	mvn.w	r6, #29
 80027fc:	2103      	movs	r1, #3
 80027fe:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002802:	e7ed      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x290>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002806:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_ADC_ConfigChannel+0x378>)
 8002808:	6898      	ldr	r0, [r3, #8]
 800280a:	4291      	cmp	r1, r2
 800280c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8002810:	d11e      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x300>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002812:	0202      	lsls	r2, r0, #8
 8002814:	f53f af3d 	bmi.w	8002692 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002818:	6829      	ldr	r1, [r5, #0]
 800281a:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <HAL_ADC_ConfigChannel+0x37c>)
 800281c:	4291      	cmp	r1, r2
 800281e:	f47f af38 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002828:	4322      	orrs	r2, r4
 800282a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800282e:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_ADC_ConfigChannel+0x380>)
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_ADC_ConfigChannel+0x384>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fbb3 f2f2 	udiv	r2, r3, r2
 800283a:	230c      	movs	r3, #12
 800283c:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002840:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f43f af24 	beq.w	8002692 <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	e7f7      	b.n	8002840 <HAL_ADC_ConfigChannel+0x2f0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_ADC_ConfigChannel+0x388>)
 8002852:	4291      	cmp	r1, r2
 8002854:	d111      	bne.n	800287a <HAL_ADC_ConfigChannel+0x32a>
 8002856:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800285a:	f47f af1a 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285e:	6829      	ldr	r1, [r5, #0]
 8002860:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8002864:	4291      	cmp	r1, r2
 8002866:	f47f af14 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002870:	4322      	orrs	r2, r4
 8002872:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	e70c      	b.n	8002694 <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_ADC_ConfigChannel+0x38c>)
 800287c:	4291      	cmp	r1, r2
 800287e:	f47f af08 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002882:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002886:	f47f af04 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 800288a:	6829      	ldr	r1, [r5, #0]
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_ADC_ConfigChannel+0x37c>)
 800288e:	4291      	cmp	r1, r2
 8002890:	f47f aeff 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800289a:	4322      	orrs	r2, r4
 800289c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028a0:	e7e9      	b.n	8002876 <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80028aa:	4618      	mov	r0, r3
 80028ac:	e6f2      	b.n	8002694 <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 80028ae:	2002      	movs	r0, #2
 80028b0:	e6f3      	b.n	800269a <HAL_ADC_ConfigChannel+0x14a>
 80028b2:	bf00      	nop
 80028b4:	03fff000 	.word	0x03fff000
 80028b8:	0007ffff 	.word	0x0007ffff
 80028bc:	407f0000 	.word	0x407f0000
 80028c0:	80080000 	.word	0x80080000
 80028c4:	50040300 	.word	0x50040300
 80028c8:	c7520000 	.word	0xc7520000
 80028cc:	50040000 	.word	0x50040000
 80028d0:	20000014 	.word	0x20000014
 80028d4:	00030d40 	.word	0x00030d40
 80028d8:	cb840000 	.word	0xcb840000
 80028dc:	80000001 	.word	0x80000001

080028e0 <ADC_ConversionStop>:
{
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e4:	6800      	ldr	r0, [r0, #0]
 80028e6:	f7ff fd10 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ea:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	f002 0208 	and.w	r2, r2, #8
 80028f2:	4302      	orrs	r2, r0
 80028f4:	d101      	bne.n	80028fa <ADC_ConversionStop+0x1a>
  return HAL_OK;
 80028f6:	2000      	movs	r0, #0
}
 80028f8:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	0190      	lsls	r0, r2, #6
 80028fe:	d52b      	bpl.n	8002958 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002900:	8b20      	ldrh	r0, [r4, #24]
 8002902:	f240 1201 	movw	r2, #257	; 0x101
 8002906:	4290      	cmp	r0, r2
 8002908:	d126      	bne.n	8002958 <ADC_ConversionStop+0x78>
 800290a:	4a28      	ldr	r2, [pc, #160]	; (80029ac <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	0649      	lsls	r1, r1, #25
 8002910:	d516      	bpl.n	8002940 <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002916:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fcf6 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 800291e:	b158      	cbz	r0, 8002938 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002920:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002922:	6893      	ldr	r3, [r2, #8]
 8002924:	079e      	lsls	r6, r3, #30
 8002926:	d407      	bmi.n	8002938 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8002928:	6893      	ldr	r3, [r2, #8]
 800292a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800292e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002938:	2901      	cmp	r1, #1
 800293a:	d10f      	bne.n	800295c <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800293c:	2504      	movs	r5, #4
 800293e:	e022      	b.n	8002986 <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002940:	3a01      	subs	r2, #1
 8002942:	d1e3      	bne.n	800290c <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002944:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002954:	2001      	movs	r0, #1
 8002956:	e7cf      	b.n	80028f8 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002958:	2902      	cmp	r1, #2
 800295a:	d1dd      	bne.n	8002918 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800295c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295e:	6893      	ldr	r3, [r2, #8]
 8002960:	0718      	lsls	r0, r3, #28
 8002962:	d50a      	bpl.n	800297a <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002964:	6893      	ldr	r3, [r2, #8]
 8002966:	079b      	lsls	r3, r3, #30
 8002968:	d407      	bmi.n	800297a <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 800296a:	6893      	ldr	r3, [r2, #8]
 800296c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 800297a:	2902      	cmp	r1, #2
 800297c:	d014      	beq.n	80029a8 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800297e:	2903      	cmp	r1, #3
 8002980:	bf14      	ite	ne
 8002982:	2504      	movne	r5, #4
 8002984:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 8002986:	f7ff fc95 	bl	80022b4 <HAL_GetTick>
 800298a:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	422b      	tst	r3, r5
 8002992:	d0b0      	beq.n	80028f6 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002994:	f7ff fc8e 	bl	80022b4 <HAL_GetTick>
 8002998:	1b80      	subs	r0, r0, r6
 800299a:	2805      	cmp	r0, #5
 800299c:	d9f6      	bls.n	800298c <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	422b      	tst	r3, r5
 80029a4:	d0f2      	beq.n	800298c <ADC_ConversionStop+0xac>
 80029a6:	e7cd      	b.n	8002944 <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 80029a8:	2508      	movs	r5, #8
 80029aa:	e7ec      	b.n	8002986 <ADC_ConversionStop+0xa6>
 80029ac:	a3400001 	.word	0xa3400001

080029b0 <ADC_Enable>:
{
 80029b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80029b2:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b4:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80029b6:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b8:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ba:	07dd      	lsls	r5, r3, #31
{
 80029bc:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029be:	d502      	bpl.n	80029c6 <ADC_Enable+0x16>
  return HAL_OK;
 80029c0:	2000      	movs	r0, #0
}
 80029c2:	b002      	add	sp, #8
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029c6:	6891      	ldr	r1, [r2, #8]
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <ADC_Enable+0x9c>)
 80029ca:	4219      	tst	r1, r3
 80029cc:	d009      	beq.n	80029e2 <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	e7ef      	b.n	80029c2 <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 80029e2:	6893      	ldr	r3, [r2, #8]
 80029e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <ADC_Enable+0xa0>)
 80029f4:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029f6:	0218      	lsls	r0, r3, #8
 80029f8:	d419      	bmi.n	8002a2e <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 80029fa:	f7ff fc5b 	bl	80022b4 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 80029fe:	4e15      	ldr	r6, [pc, #84]	; (8002a54 <ADC_Enable+0xa4>)
 8002a00:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	07db      	lsls	r3, r3, #31
 8002a08:	d4da      	bmi.n	80029c0 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a0a:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8002a0e:	bf5f      	itttt	pl
 8002a10:	6893      	ldrpl	r3, [r2, #8]
 8002a12:	4033      	andpl	r3, r6
 8002a14:	f043 0301 	orrpl.w	r3, r3, #1
 8002a18:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1a:	f7ff fc4b 	bl	80022b4 <HAL_GetTick>
 8002a1e:	1b40      	subs	r0, r0, r5
 8002a20:	2802      	cmp	r0, #2
 8002a22:	d9ee      	bls.n	8002a02 <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	07da      	lsls	r2, r3, #31
 8002a2a:	d4ea      	bmi.n	8002a02 <ADC_Enable+0x52>
 8002a2c:	e7cf      	b.n	80029ce <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <ADC_Enable+0xa8>)
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <ADC_Enable+0xac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a38:	230c      	movs	r3, #12
 8002a3a:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8002a3e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002a40:	9b01      	ldr	r3, [sp, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0d9      	beq.n	80029fa <ADC_Enable+0x4a>
        wait_loop_index--;
 8002a46:	9b01      	ldr	r3, [sp, #4]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	e7f8      	b.n	8002a3e <ADC_Enable+0x8e>
 8002a4c:	8000003f 	.word	0x8000003f
 8002a50:	50040300 	.word	0x50040300
 8002a54:	7fffffc0 	.word	0x7fffffc0
 8002a58:	20000014 	.word	0x20000014
 8002a5c:	00030d40 	.word	0x00030d40

08002a60 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a60:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_ADC_Start_DMA+0xe0>)
{
 8002a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a66:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a68:	6800      	ldr	r0, [r0, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
{
 8002a6c:	460e      	mov	r6, r1
 8002a6e:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a70:	f7ff fc4b 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d15d      	bne.n	8002b34 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002a78:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d059      	beq.n	8002b34 <HAL_ADC_Start_DMA+0xd4>
 8002a80:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a84:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002a88:	f04f 0301 	mov.w	r3, #1
 8002a8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a90:	d84b      	bhi.n	8002b2a <HAL_ADC_Start_DMA+0xca>
 8002a92:	f240 2021 	movw	r0, #545	; 0x221
 8002a96:	fa20 f008 	lsr.w	r0, r0, r8
 8002a9a:	43c0      	mvns	r0, r0
 8002a9c:	ea10 0503 	ands.w	r5, r0, r3
 8002aa0:	d143      	bne.n	8002b2a <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ff84 	bl	80029b0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d13b      	bne.n	8002b24 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 8002aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aae:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_ADC_Start_DMA+0xe4>)
 8002ac0:	4299      	cmp	r1, r3
 8002ac2:	d039      	beq.n	8002b38 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ac6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002aca:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ace:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ad0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ad4:	bf1c      	itt	ne
 8002ad6:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8002ad8:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_ADC_Start_DMA+0xe8>)
 8002ae0:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_ADC_Start_DMA+0xec>)
 8002ae4:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_ADC_Start_DMA+0xf0>)
 8002ae8:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aea:	231c      	movs	r3, #28
 8002aec:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002aee:	2300      	movs	r3, #0
 8002af0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af4:	684b      	ldr	r3, [r1, #4]
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002afc:	68cb      	ldr	r3, [r1, #12]
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b04:	4632      	mov	r2, r6
 8002b06:	463b      	mov	r3, r7
 8002b08:	3140      	adds	r1, #64	; 0x40
 8002b0a:	f000 fa2b 	bl	8002f64 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b0e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002b10:	6893      	ldr	r3, [r2, #8]
 8002b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6093      	str	r3, [r2, #8]
}
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8002b24:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002b28:	e7fa      	b.n	8002b20 <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
 8002b32:	e7f5      	b.n	8002b20 <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 8002b34:	2002      	movs	r0, #2
 8002b36:	e7f3      	b.n	8002b20 <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b38:	f1b8 0f00 	cmp.w	r8, #0
 8002b3c:	d0c2      	beq.n	8002ac4 <HAL_ADC_Start_DMA+0x64>
 8002b3e:	e7c5      	b.n	8002acc <HAL_ADC_Start_DMA+0x6c>
 8002b40:	50040300 	.word	0x50040300
 8002b44:	50040100 	.word	0x50040100
 8002b48:	080024cd 	.word	0x080024cd
 8002b4c:	080024c3 	.word	0x080024c3
 8002b50:	08002535 	.word	0x08002535

08002b54 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b54:	6802      	ldr	r2, [r0, #0]
{
 8002b56:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b58:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b5a:	6891      	ldr	r1, [r2, #8]
 8002b5c:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b5e:	07c8      	lsls	r0, r1, #31
 8002b60:	d401      	bmi.n	8002b66 <ADC_Disable+0x12>
  return HAL_OK;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b66:	0799      	lsls	r1, r3, #30
 8002b68:	d4fb      	bmi.n	8002b62 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b6a:	6893      	ldr	r3, [r2, #8]
 8002b6c:	f003 030d 	and.w	r3, r3, #13
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d119      	bne.n	8002ba8 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8002b74:	6893      	ldr	r3, [r2, #8]
 8002b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b84:	2303      	movs	r3, #3
 8002b86:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b88:	f7ff fb94 	bl	80022b4 <HAL_GetTick>
 8002b8c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	07db      	lsls	r3, r3, #31
 8002b94:	d5e5      	bpl.n	8002b62 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b96:	f7ff fb8d 	bl	80022b4 <HAL_GetTick>
 8002b9a:	1b40      	subs	r0, r0, r5
 8002b9c:	2802      	cmp	r0, #2
 8002b9e:	d9f6      	bls.n	8002b8e <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	07da      	lsls	r2, r3, #31
 8002ba6:	d5f2      	bpl.n	8002b8e <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e7d3      	b.n	8002b64 <ADC_Disable+0x10>

08002bbc <HAL_ADC_Stop_DMA>:
{
 8002bbc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002bbe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
{
 8002bc4:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002bc6:	d035      	beq.n	8002c34 <HAL_ADC_Stop_DMA+0x78>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002bce:	2103      	movs	r1, #3
 8002bd0:	f7ff fe86 	bl	80028e0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	b9e0      	cbnz	r0, 8002c12 <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bd8:	682a      	ldr	r2, [r5, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002bda:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bdc:	68d3      	ldr	r3, [r2, #12]
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002be4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002bec:	f000 f9f9 	bl	8002fe2 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	b118      	cbz	r0, 8002bfc <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bf4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002bfc:	682a      	ldr	r2, [r5, #0]
 8002bfe:	6853      	ldr	r3, [r2, #4]
 8002c00:	f023 0310 	bic.w	r3, r3, #16
 8002c04:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8002c06:	4628      	mov	r0, r5
    if (tmp_hal_status == HAL_OK)
 8002c08:	b944      	cbnz	r4, 8002c1c <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8002c0a:	f7ff ffa3 	bl	8002b54 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b138      	cbz	r0, 8002c22 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 8002c12:	2300      	movs	r3, #0
 8002c14:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002c18:	4620      	mov	r0, r4
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8002c1c:	f7ff ff9a 	bl	8002b54 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002c20:	e7f7      	b.n	8002c12 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8002c22:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	656b      	str	r3, [r5, #84]	; 0x54
 8002c32:	e7ee      	b.n	8002c12 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8002c34:	2402      	movs	r4, #2
 8002c36:	e7ef      	b.n	8002c18 <HAL_ADC_Stop_DMA+0x5c>

08002c38 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c38:	6880      	ldr	r0, [r0, #8]
}
 8002c3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002c3e:	4770      	bx	lr

08002c40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c46:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002c4a:	2b01      	cmp	r3, #1
{
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8002c50:	d03e      	beq.n	8002cd0 <HAL_ADCEx_Calibration_Start+0x90>
 8002c52:	2301      	movs	r3, #1
 8002c54:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c58:	f7ff ff7c 	bl	8002b54 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d133      	bne.n	8002cc8 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c62:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002c64:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002c68:	f022 0202 	bic.w	r2, r2, #2
 8002c6c:	f042 0202 	orr.w	r2, r2, #2
 8002c70:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8002c72:	68b3      	ldr	r3, [r6, #8]
 8002c74:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c7c:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8002c80:	432b      	orrs	r3, r5
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c88:	68b3      	ldr	r3, [r6, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da12      	bge.n	8002cb4 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8002c8e:	9b01      	ldr	r3, [sp, #4]
 8002c90:	3301      	adds	r3, #1
 8002c92:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c94:	9b01      	ldr	r3, [sp, #4]
 8002c96:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c9a:	d3f5      	bcc.n	8002c88 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c9e:	f023 0312 	bic.w	r3, r3, #18
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002cb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8002cc6:	e7f3      	b.n	8002cb0 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	e7f6      	b.n	8002cbe <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	e7ed      	b.n	8002cb0 <HAL_ADCEx_Calibration_Start+0x70>

08002cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002cda:	2b01      	cmp	r3, #1
{
 8002cdc:	b09b      	sub	sp, #108	; 0x6c
 8002cde:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002ce0:	d052      	beq.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ce8:	6817      	ldr	r7, [r2, #0]
 8002cea:	4c28      	ldr	r4, [pc, #160]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002cec:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cee:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002cf0:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002cf2:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cf4:	d008      	beq.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cf8:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	f041 0120 	orr.w	r1, r1, #32
 8002d00:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002d02:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002d04:	b01b      	add	sp, #108	; 0x6c
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d08:	4e21      	ldr	r6, [pc, #132]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f7ff ff94 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002d10:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d12:	6810      	ldr	r0, [r2, #0]
 8002d14:	f7ff ff90 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002d18:	4320      	orrs	r0, r4
 8002d1a:	d130      	bne.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	4c1d      	ldr	r4, [pc, #116]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002d1e:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d20:	68a3      	ldr	r3, [r4, #8]
 8002d22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d26:	b1e5      	cbz	r5, 8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d28:	6848      	ldr	r0, [r1, #4]
 8002d2a:	4303      	orrs	r3, r0
 8002d2c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002d30:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002d34:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d36:	68b8      	ldr	r0, [r7, #8]
 8002d38:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3a:	4303      	orrs	r3, r0
 8002d3c:	f013 0301 	ands.w	r3, r3, #1
 8002d40:	d004      	beq.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d42:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d44:	2300      	movs	r3, #0
 8002d46:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002d4a:	e7db      	b.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 8002d4c:	6889      	ldr	r1, [r1, #8]
 8002d4e:	68a0      	ldr	r0, [r4, #8]
 8002d50:	430d      	orrs	r5, r1
 8002d52:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8002d56:	f021 010f 	bic.w	r1, r1, #15
 8002d5a:	430d      	orrs	r5, r1
 8002d5c:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8002d5e:	4618      	mov	r0, r3
 8002d60:	e7f0      	b.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d62:	60a3      	str	r3, [r4, #8]
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d68:	4303      	orrs	r3, r0
 8002d6a:	f013 0301 	ands.w	r3, r3, #1
 8002d6e:	d1e8      	bne.n	8002d42 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d70:	68a1      	ldr	r1, [r4, #8]
 8002d72:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8002d76:	f021 010f 	bic.w	r1, r1, #15
 8002d7a:	60a1      	str	r1, [r4, #8]
 8002d7c:	e7ef      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002d80:	f041 0120 	orr.w	r1, r1, #32
 8002d84:	6551      	str	r1, [r2, #84]	; 0x54
 8002d86:	e7ea      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	e7bb      	b.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8002d8c:	50040000 	.word	0x50040000
 8002d90:	50040100 	.word	0x50040100
 8002d94:	50040300 	.word	0x50040300

08002d98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d9a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002db4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbe:	b530      	push	{r4, r5, lr}
 8002dc0:	68dc      	ldr	r4, [r3, #12]
 8002dc2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	2d04      	cmp	r5, #4
 8002dce:	bf28      	it	cs
 8002dd0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd8:	bf8c      	ite	hi
 8002dda:	3c03      	subhi	r4, #3
 8002ddc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dde:	fa03 f505 	lsl.w	r5, r3, r5
 8002de2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de6:	40a3      	lsls	r3, r4
 8002de8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002dee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	bfac      	ite	ge
 8002df6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	4a08      	ldrlt	r2, [pc, #32]	; (8002e1c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	bfb8      	it	lt
 8002e02:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	bfaa      	itet	ge
 8002e0a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e14:	bd30      	pop	{r4, r5, pc}
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00
 8002e1c:	e000ed14 	.word	0xe000ed14

08002e20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e20:	2800      	cmp	r0, #0
 8002e22:	db08      	blt.n	8002e36 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e24:	2301      	movs	r3, #1
 8002e26:	0942      	lsrs	r2, r0, #5
 8002e28:	f000 001f 	and.w	r0, r0, #31
 8002e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8002e30:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <HAL_NVIC_EnableIRQ+0x18>)
 8002e32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	db0d      	blt.n	8002e5c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e40:	0943      	lsrs	r3, r0, #5
 8002e42:	2201      	movs	r2, #1
 8002e44:	f000 001f 	and.w	r0, r0, #31
 8002e48:	fa02 f000 	lsl.w	r0, r2, r0
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_NVIC_DisableIRQ+0x24>)
 8002e50:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e58:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	3801      	subs	r0, #1
 8002e66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e6a:	d20b      	bcs.n	8002e84 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	21f0      	movs	r1, #240	; 0xf0
 8002e76:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e80:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e82:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d05b      	beq.n	8002f4a <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e92:	6801      	ldr	r1, [r0, #0]
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_DMA_Init+0xc4>)
 8002e96:	4299      	cmp	r1, r3
 8002e98:	f04f 0414 	mov.w	r4, #20
 8002e9c:	d842      	bhi.n	8002f24 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e9e:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <HAL_DMA_Init+0xc8>)
 8002ea0:	440a      	add	r2, r1
 8002ea2:	fbb2 f2f4 	udiv	r2, r2, r4
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eaa:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8002eae:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eb6:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eba:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002ebc:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8002ebe:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec0:	432b      	orrs	r3, r5
 8002ec2:	6945      	ldr	r5, [r0, #20]
 8002ec4:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec6:	6985      	ldr	r5, [r0, #24]
 8002ec8:	432b      	orrs	r3, r5
 8002eca:	69c5      	ldr	r5, [r0, #28]
 8002ecc:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ed0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002ed4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed8:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8002eda:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002edc:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8002ee0:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ee2:	d016      	beq.n	8002f12 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee4:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 8002ee6:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee8:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002eec:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eee:	230f      	movs	r3, #15
 8002ef0:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ef2:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_DMA_Init+0xcc>)
 8002ef6:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ef8:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8002efc:	d11a      	bne.n	8002f34 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002efe:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 8002f02:	4013      	ands	r3, r2
 8002f04:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f08:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8002f0c:	431c      	orrs	r4, r3
 8002f0e:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f14:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f16:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f18:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8002f20:	4618      	mov	r0, r3
}
 8002f22:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_DMA_Init+0xd0>)
 8002f26:	440b      	add	r3, r1
 8002f28:	fbb3 f3f4 	udiv	r3, r3, r4
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_DMA_Init+0xd4>)
 8002f32:	e7bc      	b.n	8002eae <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f34:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8002f38:	400b      	ands	r3, r1
 8002f3a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f3e:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8002f42:	431c      	orrs	r4, r3
 8002f44:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 8002f48:	e7e3      	b.n	8002f12 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	e7e9      	b.n	8002f22 <HAL_DMA_Init+0x96>
 8002f4e:	bf00      	nop
 8002f50:	40020407 	.word	0x40020407
 8002f54:	bffdfff8 	.word	0xbffdfff8
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	bffdfbf8 	.word	0xbffdfbf8
 8002f60:	40020400 	.word	0x40020400

08002f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f66:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002f6a:	2c01      	cmp	r4, #1
 8002f6c:	d037      	beq.n	8002fde <HAL_DMA_Start_IT+0x7a>
 8002f6e:	2401      	movs	r4, #1
 8002f70:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f74:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002f78:	2c01      	cmp	r4, #1
 8002f7a:	b2e5      	uxtb	r5, r4
 8002f7c:	f04f 0600 	mov.w	r6, #0
 8002f80:	f04f 0402 	mov.w	r4, #2
 8002f84:	d129      	bne.n	8002fda <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f86:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002f8e:	6826      	ldr	r6, [r4, #0]
 8002f90:	f026 0601 	bic.w	r6, r6, #1
 8002f94:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f96:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 8002f9a:	f007 071c 	and.w	r7, r7, #28
 8002f9e:	40bd      	lsls	r5, r7
 8002fa0:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fa2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fa4:	6883      	ldr	r3, [r0, #8]
 8002fa6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002fa8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002faa:	bf0b      	itete	eq
 8002fac:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002fae:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002fb0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002fb2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002fb4:	b14b      	cbz	r3, 8002fca <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2000      	movs	r0, #0
}
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	f043 030a 	orr.w	r3, r3, #10
 8002fd8:	e7f0      	b.n	8002fbc <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8002fda:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	e7f2      	b.n	8002fc8 <HAL_DMA_Start_IT+0x64>

08002fe2 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d006      	beq.n	8002ff8 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fea:	2304      	movs	r3, #4
 8002fec:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff8:	6803      	ldr	r3, [r0, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f022 020e 	bic.w	r2, r2, #14
 8003000:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800300a:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 800300e:	2201      	movs	r2, #1
 8003010:	f003 031c 	and.w	r3, r3, #28
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800301a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800301c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003020:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8003024:	4618      	mov	r0, r3
}
 8003026:	4770      	bx	lr

08003028 <HAL_DMA_Abort_IT>:
{
 8003028:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800302a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800302e:	2a02      	cmp	r2, #2
 8003030:	d003      	beq.n	800303a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	2204      	movs	r2, #4
 8003034:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003036:	2001      	movs	r0, #1
}
 8003038:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303a:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 800303c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303e:	6811      	ldr	r1, [r2, #0]
 8003040:	f021 010e 	bic.w	r1, r1, #14
 8003044:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	f021 0101 	bic.w	r1, r1, #1
 800304c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800304e:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8003052:	2101      	movs	r1, #1
 8003054:	f002 021c 	and.w	r2, r2, #28
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800305e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003060:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003064:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003068:	b113      	cbz	r3, 8003070 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800306a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	4620      	mov	r0, r4
 800306e:	e7e3      	b.n	8003038 <HAL_DMA_Abort_IT+0x10>
 8003070:	4618      	mov	r0, r3
 8003072:	e7e1      	b.n	8003038 <HAL_DMA_Abort_IT+0x10>

08003074 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003074:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003076:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003078:	6803      	ldr	r3, [r0, #0]
{
 800307a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800307c:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003080:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003082:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003084:	2404      	movs	r4, #4
 8003086:	4094      	lsls	r4, r2
 8003088:	4234      	tst	r4, r6
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_IRQHandler+0x36>
 800308c:	f015 0f04 	tst.w	r5, #4
 8003090:	d00b      	beq.n	80030aa <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003096:	bf5e      	ittt	pl
 8003098:	681a      	ldrpl	r2, [r3, #0]
 800309a:	f022 0204 	bicpl.w	r2, r2, #4
 800309e:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80030a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030a2:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80030a4:	b373      	cbz	r3, 8003104 <HAL_DMA_IRQHandler+0x90>
}
 80030a6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80030a8:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030aa:	2402      	movs	r4, #2
 80030ac:	4094      	lsls	r4, r2
 80030ae:	4234      	tst	r4, r6
 80030b0:	d012      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x64>
 80030b2:	f015 0f02 	tst.w	r5, #2
 80030b6:	d00f      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	0695      	lsls	r5, r2, #26
 80030bc:	d406      	bmi.n	80030cc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f022 020a 	bic.w	r2, r2, #10
 80030c4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80030cc:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ce:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80030d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80030d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80030d6:	e7e5      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030d8:	2408      	movs	r4, #8
 80030da:	4094      	lsls	r4, r2
 80030dc:	4234      	tst	r4, r6
 80030de:	d011      	beq.n	8003104 <HAL_DMA_IRQHandler+0x90>
 80030e0:	072c      	lsls	r4, r5, #28
 80030e2:	d50f      	bpl.n	8003104 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e4:	681c      	ldr	r4, [r3, #0]
 80030e6:	f024 040e 	bic.w	r4, r4, #14
 80030ea:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ec:	2301      	movs	r3, #1
 80030ee:	fa03 f202 	lsl.w	r2, r3, r2
 80030f2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80030f6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80030fa:	2300      	movs	r3, #0
 80030fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003100:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003102:	e7cf      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30>
}
 8003104:	bc70      	pop	{r4, r5, r6}
 8003106:	4770      	bx	lr

08003108 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <FLASH_Program_Fast+0x28>)
 800310a:	6953      	ldr	r3, [r2, #20]
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8003110:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003112:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003114:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800311c:	58cc      	ldr	r4, [r1, r3]
 800311e:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 8003120:	3304      	adds	r3, #4
 8003122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003126:	d1f9      	bne.n	800311c <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800312c:	bd10      	pop	{r4, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000

08003134 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_FLASH_Unlock+0x1c>)
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800313a:	bfbf      	itttt	lt
 800313c:	4a05      	ldrlt	r2, [pc, #20]	; (8003154 <HAL_FLASH_Unlock+0x20>)
 800313e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003140:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8003144:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003146:	bfba      	itte	lt
 8003148:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	0fc0      	lsrlt	r0, r0, #31
 800314c:	2000      	movge	r0, #0
}
 800314e:	4770      	bx	lr
 8003150:	40022000 	.word	0x40022000
 8003154:	45670123 	.word	0x45670123

08003158 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_FLASH_Lock+0x10>)
 800315a:	6953      	ldr	r3, [r2, #20]
 800315c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003160:	6153      	str	r3, [r2, #20]
}
 8003162:	2000      	movs	r0, #0
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000

0800316c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <HAL_FLASH_GetError+0x8>)
 800316e:	6858      	ldr	r0, [r3, #4]
}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000020 	.word	0x20000020

08003178 <FLASH_WaitForLastOperation>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff f89a 	bl	80022b4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003180:	4c10      	ldr	r4, [pc, #64]	; (80031c4 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8003182:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	03db      	lsls	r3, r3, #15
 8003188:	d40a      	bmi.n	80031a0 <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800318a:	6920      	ldr	r0, [r4, #16]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 800318e:	4002      	ands	r2, r0
 8003190:	d00f      	beq.n	80031b2 <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 8003192:	490e      	ldr	r1, [pc, #56]	; (80031cc <FLASH_WaitForLastOperation+0x54>)
 8003194:	684b      	ldr	r3, [r1, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800319c:	6122      	str	r2, [r4, #16]
}
 800319e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80031a0:	1c6a      	adds	r2, r5, #1
 80031a2:	d0ef      	beq.n	8003184 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80031a4:	f7ff f886 	bl	80022b4 <HAL_GetTick>
 80031a8:	1b80      	subs	r0, r0, r6
 80031aa:	42a8      	cmp	r0, r5
 80031ac:	d3ea      	bcc.n	8003184 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80031ae:	2003      	movs	r0, #3
 80031b0:	e7f5      	b.n	800319e <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031b2:	6920      	ldr	r0, [r4, #16]
 80031b4:	f010 0001 	ands.w	r0, r0, #1
 80031b8:	d0f1      	beq.n	800319e <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031ba:	2301      	movs	r3, #1
 80031bc:	6123      	str	r3, [r4, #16]
 80031be:	4610      	mov	r0, r2
 80031c0:	e7ed      	b.n	800319e <FLASH_WaitForLastOperation+0x26>
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000
 80031c8:	0002c3fa 	.word	0x0002c3fa
 80031cc:	20000020 	.word	0x20000020

080031d0 <HAL_FLASH_Program>:
{
 80031d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80031d4:	4c25      	ldr	r4, [pc, #148]	; (800326c <HAL_FLASH_Program+0x9c>)
{
 80031d6:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80031d8:	7823      	ldrb	r3, [r4, #0]
 80031da:	2b01      	cmp	r3, #1
{
 80031dc:	4606      	mov	r6, r0
 80031de:	460f      	mov	r7, r1
 80031e0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80031e2:	d041      	beq.n	8003268 <HAL_FLASH_Program+0x98>
 80031e4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031e6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80031ea:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031ec:	f7ff ffc4 	bl	8003178 <FLASH_WaitForLastOperation>
 80031f0:	4605      	mov	r5, r0
  if(status == HAL_OK)
 80031f2:	bb30      	cbnz	r0, 8003242 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031f4:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031f6:	481e      	ldr	r0, [pc, #120]	; (8003270 <HAL_FLASH_Program+0xa0>)
 80031f8:	6802      	ldr	r2, [r0, #0]
 80031fa:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80031fe:	bf17      	itett	ne
 8003200:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003202:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003204:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8003208:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800320a:	bf1c      	itt	ne
 800320c:	2302      	movne	r3, #2
 800320e:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003210:	b9e6      	cbnz	r6, 800324c <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003212:	6943      	ldr	r3, [r0, #20]
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6143      	str	r3, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800321a:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800321e:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8003222:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003224:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800322c:	f7ff ffa4 	bl	8003178 <FLASH_WaitForLastOperation>
 8003230:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 8003232:	b126      	cbz	r6, 800323e <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <HAL_FLASH_Program+0xa0>)
 8003236:	6953      	ldr	r3, [r2, #20]
 8003238:	ea23 0606 	bic.w	r6, r3, r6
 800323c:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 800323e:	f000 f83d 	bl	80032bc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003242:	2300      	movs	r3, #0
 8003244:	7023      	strb	r3, [r4, #0]
}
 8003246:	4628      	mov	r0, r5
 8003248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800324c:	1e73      	subs	r3, r6, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d901      	bls.n	8003256 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 8003252:	2600      	movs	r6, #0
 8003254:	e7e8      	b.n	8003228 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003256:	4641      	mov	r1, r8
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ff55 	bl	8003108 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800325e:	2e02      	cmp	r6, #2
 8003260:	d1f7      	bne.n	8003252 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 8003262:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8003266:	e7df      	b.n	8003228 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8003268:	2502      	movs	r5, #2
 800326a:	e7ec      	b.n	8003246 <HAL_FLASH_Program+0x76>
 800326c:	20000020 	.word	0x20000020
 8003270:	40022000 	.word	0x40022000

08003274 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <FLASH_MassErase+0x1c>)
 8003276:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800327a:	bf1e      	ittt	ne
 800327c:	695a      	ldrne	r2, [r3, #20]
 800327e:	f042 0204 	orrne.w	r2, r2, #4
 8003282:	615a      	strne	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800328a:	615a      	str	r2, [r3, #20]
}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000

08003294 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <FLASH_PageErase+0x24>)
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	00c0      	lsls	r0, r0, #3
 800329a:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 800329e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80032a2:	4310      	orrs	r0, r2
 80032a4:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	f042 0202 	orr.w	r2, r2, #2
 80032ac:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	4770      	bx	lr
 80032b8:	40022000 	.word	0x40022000

080032bc <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80032bc:	4815      	ldr	r0, [pc, #84]	; (8003314 <FLASH_FlushCaches+0x58>)
 80032be:	7f03      	ldrb	r3, [r0, #28]
 80032c0:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80032c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d110      	bne.n	80032ec <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <FLASH_FlushCaches+0x5c>)
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80032d2:	6019      	str	r1, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80032da:	6019      	str	r1, [r3, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80032e2:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80032ea:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80032ec:	1e93      	subs	r3, r2, #2
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d80c      	bhi.n	800330c <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <FLASH_FlushCaches+0x5c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003302:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800330c:	2300      	movs	r3, #0
 800330e:	7703      	strb	r3, [r0, #28]
}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000020 	.word	0x20000020
 8003318:	40022000 	.word	0x40022000

0800331c <HAL_FLASHEx_Erase>:
{
 800331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8003320:	4d31      	ldr	r5, [pc, #196]	; (80033e8 <HAL_FLASHEx_Erase+0xcc>)
 8003322:	782b      	ldrb	r3, [r5, #0]
 8003324:	2b01      	cmp	r3, #1
{
 8003326:	4606      	mov	r6, r0
 8003328:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800332a:	d05a      	beq.n	80033e2 <HAL_FLASHEx_Erase+0xc6>
 800332c:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800332e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8003332:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003334:	f7ff ff20 	bl	8003178 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003338:	4604      	mov	r4, r0
 800333a:	bb10      	cbnz	r0, 8003382 <HAL_FLASHEx_Erase+0x66>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_FLASHEx_Erase+0xd0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800333e:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003346:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003348:	d020      	beq.n	800338c <HAL_FLASHEx_Erase+0x70>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800334a:	0551      	lsls	r1, r2, #21
 800334c:	d506      	bpl.n	800335c <HAL_FLASHEx_Erase+0x40>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003356:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003358:	772b      	strb	r3, [r5, #28]
 800335a:	e000      	b.n	800335e <HAL_FLASHEx_Erase+0x42>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800335c:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800335e:	6833      	ldr	r3, [r6, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d11d      	bne.n	80033a0 <HAL_FLASHEx_Erase+0x84>
      FLASH_MassErase(pEraseInit->Banks);
 8003364:	6870      	ldr	r0, [r6, #4]
 8003366:	f7ff ff85 	bl	8003274 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800336a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800336e:	f7ff ff03 	bl	8003178 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003372:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_FLASHEx_Erase+0xd0>)
 8003374:	6953      	ldr	r3, [r2, #20]
 8003376:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800337a:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800337c:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800337e:	f7ff ff9d 	bl	80032bc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003382:	2300      	movs	r3, #0
 8003384:	702b      	strb	r3, [r5, #0]
}
 8003386:	4620      	mov	r0, r4
 8003388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800338c:	0552      	lsls	r2, r2, #21
 800338e:	d505      	bpl.n	800339c <HAL_FLASHEx_Erase+0x80>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003396:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003398:	2302      	movs	r3, #2
 800339a:	e7dd      	b.n	8003358 <HAL_FLASHEx_Erase+0x3c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800339c:	7728      	strb	r0, [r5, #28]
 800339e:	e7de      	b.n	800335e <HAL_FLASHEx_Erase+0x42>
      *PageError = 0xFFFFFFFFU;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033a8:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033aa:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80033ec <HAL_FLASHEx_Erase+0xd0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033ae:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80033b2:	4413      	add	r3, r2
 80033b4:	42bb      	cmp	r3, r7
 80033b6:	d9e2      	bls.n	800337e <HAL_FLASHEx_Erase+0x62>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80033b8:	6871      	ldr	r1, [r6, #4]
 80033ba:	4638      	mov	r0, r7
 80033bc:	f7ff ff6a 	bl	8003294 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033c4:	f7ff fed8 	bl	8003178 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80033cc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80033d0:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80033d4:	b118      	cbz	r0, 80033de <HAL_FLASHEx_Erase+0xc2>
          *PageError = page_index;
 80033d6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033da:	4604      	mov	r4, r0
          break;
 80033dc:	e7cf      	b.n	800337e <HAL_FLASHEx_Erase+0x62>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033de:	3701      	adds	r7, #1
 80033e0:	e7e5      	b.n	80033ae <HAL_FLASHEx_Erase+0x92>
  __HAL_LOCK(&pFlash);
 80033e2:	2402      	movs	r4, #2
 80033e4:	e7cf      	b.n	8003386 <HAL_FLASHEx_Erase+0x6a>
 80033e6:	bf00      	nop
 80033e8:	20000020 	.word	0x20000020
 80033ec:	40022000 	.word	0x40022000

080033f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003568 <HAL_GPIO_Init+0x178>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f8:	4c59      	ldr	r4, [pc, #356]	; (8003560 <HAL_GPIO_Init+0x170>)
  uint32_t position = 0x00u;
 80033fa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fc:	680a      	ldr	r2, [r1, #0]
 80033fe:	fa32 f503 	lsrs.w	r5, r2, r3
 8003402:	d102      	bne.n	800340a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003404:	b003      	add	sp, #12
 8003406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800340a:	2501      	movs	r5, #1
 800340c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003410:	ea18 0202 	ands.w	r2, r8, r2
 8003414:	f000 809c 	beq.w	8003550 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003418:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800341a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800341c:	f006 0503 	and.w	r5, r6, #3
 8003420:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003424:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	1e6f      	subs	r7, r5, #1
 800342a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800342c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003430:	d834      	bhi.n	800349c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003432:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003434:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003438:	68cf      	ldr	r7, [r1, #12]
 800343a:	fa07 f70e 	lsl.w	r7, r7, lr
 800343e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003442:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003444:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003446:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800344e:	409f      	lsls	r7, r3
 8003450:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003454:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003456:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003458:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345c:	688f      	ldr	r7, [r1, #8]
 800345e:	fa07 f70e 	lsl.w	r7, r7, lr
 8003462:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003468:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	d119      	bne.n	80034a0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800346c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003470:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003474:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003478:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800347c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003480:	f04f 0b0f 	mov.w	fp, #15
 8003484:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003488:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348c:	690f      	ldr	r7, [r1, #16]
 800348e:	fa07 f70a 	lsl.w	r7, r7, sl
 8003492:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003496:	f8c8 7020 	str.w	r7, [r8, #32]
 800349a:	e001      	b.n	80034a0 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349c:	2d03      	cmp	r5, #3
 800349e:	d1da      	bne.n	8003456 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80034a0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a2:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a6:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034aa:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ac:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80034b0:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b2:	d04d      	beq.n	8003550 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80034b8:	f045 0501 	orr.w	r5, r5, #1
 80034bc:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80034c0:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80034c4:	f023 0703 	bic.w	r7, r3, #3
 80034c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80034cc:	f005 0501 	and.w	r5, r5, #1
 80034d0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80034d4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80034dc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80034e2:	f04f 0e0f 	mov.w	lr, #15
 80034e6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ee:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f2:	d02f      	beq.n	8003554 <HAL_GPIO_Init+0x164>
 80034f4:	4d1b      	ldr	r5, [pc, #108]	; (8003564 <HAL_GPIO_Init+0x174>)
 80034f6:	42a8      	cmp	r0, r5
 80034f8:	d02e      	beq.n	8003558 <HAL_GPIO_Init+0x168>
 80034fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034fe:	42a8      	cmp	r0, r5
 8003500:	d02c      	beq.n	800355c <HAL_GPIO_Init+0x16c>
 8003502:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003506:	42a8      	cmp	r0, r5
 8003508:	bf0c      	ite	eq
 800350a:	2503      	moveq	r5, #3
 800350c:	2507      	movne	r5, #7
 800350e:	fa05 f50c 	lsl.w	r5, r5, ip
 8003512:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003516:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8003518:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800351a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800351c:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003520:	bf0c      	ite	eq
 8003522:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003524:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8003526:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003528:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800352e:	bf0c      	ite	eq
 8003530:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003532:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8003534:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8003536:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003538:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800353c:	bf0c      	ite	eq
 800353e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003540:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8003542:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8003544:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003546:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003548:	bf54      	ite	pl
 800354a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800354c:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800354e:	6025      	str	r5, [r4, #0]
    position++;
 8003550:	3301      	adds	r3, #1
 8003552:	e753      	b.n	80033fc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003554:	2500      	movs	r5, #0
 8003556:	e7da      	b.n	800350e <HAL_GPIO_Init+0x11e>
 8003558:	2501      	movs	r5, #1
 800355a:	e7d8      	b.n	800350e <HAL_GPIO_Init+0x11e>
 800355c:	2502      	movs	r5, #2
 800355e:	e7d6      	b.n	800350e <HAL_GPIO_Init+0x11e>
 8003560:	40010400 	.word	0x40010400
 8003564:	48000400 	.word	0x48000400
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800356c:	6903      	ldr	r3, [r0, #16]
 800356e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003570:	bf14      	ite	ne
 8003572:	2001      	movne	r0, #1
 8003574:	2000      	moveq	r0, #0
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003578:	b10a      	cbz	r2, 800357e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800357a:	6181      	str	r1, [r0, #24]
 800357c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003580:	4770      	bx	lr
	...

08003584 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003584:	4a02      	ldr	r2, [pc, #8]	; (8003590 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]
}
 800358e:	4770      	bx	lr
 8003590:	40007000 	.word	0x40007000

08003594 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <HAL_PWREx_GetVoltageRange+0xc>)
 8003596:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003598:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40007000 	.word	0x40007000

080035a4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a4:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b0:	d11d      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d101      	bne.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035bc:	6813      	ldr	r3, [r2, #0]
 80035be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2132      	movs	r1, #50	; 0x32
 80035ce:	434b      	muls	r3, r1
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80035d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035d6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d8:	6951      	ldr	r1, [r2, #20]
 80035da:	0549      	lsls	r1, r1, #21
 80035dc:	d500      	bpl.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80035de:	b923      	cbnz	r3, 80035ea <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035e0:	6953      	ldr	r3, [r2, #20]
 80035e2:	055b      	lsls	r3, r3, #21
 80035e4:	d5e8      	bpl.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80035e6:	2003      	movs	r0, #3
}
 80035e8:	4770      	bx	lr
        wait_loop_index--;
 80035ea:	3b01      	subs	r3, #1
 80035ec:	e7f4      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035f2:	bf1f      	itttt	ne
 80035f4:	6813      	ldrne	r3, [r2, #0]
 80035f6:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80035fa:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80035fe:	6013      	strne	r3, [r2, #0]
 8003600:	e7da      	b.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8003602:	bf00      	nop
 8003604:	40007000 	.word	0x40007000
 8003608:	20000014 	.word	0x20000014
 800360c:	000f4240 	.word	0x000f4240

08003610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003610:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003612:	4d1e      	ldr	r5, [pc, #120]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003614:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003616:	00da      	lsls	r2, r3, #3
{
 8003618:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800361a:	d518      	bpl.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800361c:	f7ff ffba 	bl	8003594 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003620:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003624:	d123      	bne.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003626:	2c80      	cmp	r4, #128	; 0x80
 8003628:	d929      	bls.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800362a:	2ca0      	cmp	r4, #160	; 0xa0
 800362c:	bf8c      	ite	hi
 800362e:	2002      	movhi	r0, #2
 8003630:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003634:	6813      	ldr	r3, [r2, #0]
 8003636:	f023 0307 	bic.w	r3, r3, #7
 800363a:	4303      	orrs	r3, r0
 800363c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003644:	1a18      	subs	r0, r3, r0
 8003646:	bf18      	it	ne
 8003648:	2001      	movne	r0, #1
 800364a:	b003      	add	sp, #12
 800364c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	65ab      	str	r3, [r5, #88]	; 0x58
 8003656:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003660:	f7ff ff98 	bl	8003594 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366a:	65ab      	str	r3, [r5, #88]	; 0x58
 800366c:	e7d8      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800366e:	2c80      	cmp	r4, #128	; 0x80
 8003670:	d807      	bhi.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003672:	d008      	beq.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003674:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003678:	4258      	negs	r0, r3
 800367a:	4158      	adcs	r0, r3
 800367c:	e7d9      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800367e:	2000      	movs	r0, #0
 8003680:	e7d7      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003682:	2003      	movs	r0, #3
 8003684:	e7d5      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003686:	2002      	movs	r0, #2
 8003688:	e7d3      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	40022000 	.word	0x40022000

08003694 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003696:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800369a:	f012 020c 	ands.w	r2, r2, #12
 800369e:	d005      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x18>
 80036a0:	2a0c      	cmp	r2, #12
 80036a2:	d115      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036a8:	2901      	cmp	r1, #1
 80036aa:	d118      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036ac:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80036ae:	481d      	ldr	r0, [pc, #116]	; (8003724 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036b0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036b2:	bf55      	itete	pl
 80036b4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036ba:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036be:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80036c2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c6:	b34a      	cbz	r2, 800371c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036c8:	2a0c      	cmp	r2, #12
 80036ca:	d009      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x4c>
 80036cc:	2000      	movs	r0, #0
  return sysclockfreq;
 80036ce:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036d0:	2a04      	cmp	r2, #4
 80036d2:	d022      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036d4:	2a08      	cmp	r2, #8
 80036d6:	4814      	ldr	r0, [pc, #80]	; (8003728 <HAL_RCC_GetSysClockFreq+0x94>)
 80036d8:	bf18      	it	ne
 80036da:	2000      	movne	r0, #0
 80036dc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036de:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80036e6:	2a02      	cmp	r2, #2
 80036e8:	d015      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x82>
 80036ea:	490f      	ldr	r1, [pc, #60]	; (8003728 <HAL_RCC_GetSysClockFreq+0x94>)
 80036ec:	2a03      	cmp	r2, #3
 80036ee:	bf08      	it	eq
 80036f0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f2:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80036fa:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036fc:	68d8      	ldr	r0, [r3, #12]
 80036fe:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003702:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003706:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800370c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003710:	fbb2 f0f0 	udiv	r0, r2, r0
 8003714:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003716:	4805      	ldr	r0, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x98>)
 8003718:	e7eb      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800371a:	4804      	ldr	r0, [pc, #16]	; (800372c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	08007ccc 	.word	0x08007ccc
 8003728:	007a1200 	.word	0x007a1200
 800372c:	00f42400 	.word	0x00f42400

08003730 <HAL_RCC_OscConfig>:
{
 8003730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003734:	4605      	mov	r5, r0
 8003736:	b918      	cbnz	r0, 8003740 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003738:	2001      	movs	r0, #1
}
 800373a:	b003      	add	sp, #12
 800373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003740:	4c94      	ldr	r4, [pc, #592]	; (8003994 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003742:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003744:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003746:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003748:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003752:	d53d      	bpl.n	80037d0 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003754:	b11e      	cbz	r6, 800375e <HAL_RCC_OscConfig+0x2e>
 8003756:	2e0c      	cmp	r6, #12
 8003758:	d16a      	bne.n	8003830 <HAL_RCC_OscConfig+0x100>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800375a:	2f01      	cmp	r7, #1
 800375c:	d168      	bne.n	8003830 <HAL_RCC_OscConfig+0x100>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	0798      	lsls	r0, r3, #30
 8003762:	d502      	bpl.n	800376a <HAL_RCC_OscConfig+0x3a>
 8003764:	69eb      	ldr	r3, [r5, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0e6      	beq.n	8003738 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800376e:	0719      	lsls	r1, r3, #28
 8003770:	bf56      	itet	pl
 8003772:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003776:	6823      	ldrmi	r3, [r4, #0]
 8003778:	091b      	lsrpl	r3, r3, #4
 800377a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377e:	4298      	cmp	r0, r3
 8003780:	d93f      	bls.n	8003802 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003782:	f7ff ff45 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 8003786:	2800      	cmp	r0, #0
 8003788:	d1d6      	bne.n	8003738 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	4313      	orrs	r3, r2
 800379c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	6a2a      	ldr	r2, [r5, #32]
 80037a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037aa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ac:	f7ff ff72 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 80037b0:	68a3      	ldr	r3, [r4, #8]
 80037b2:	4a79      	ldr	r2, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0x268>)
 80037b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	40d8      	lsrs	r0, r3
 80037c0:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80037c4:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	f7fe fd32 	bl	8002230 <HAL_InitTick>
        if(status != HAL_OK)
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d1b4      	bne.n	800373a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	07d8      	lsls	r0, r3, #31
 80037d4:	d463      	bmi.n	800389e <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	0799      	lsls	r1, r3, #30
 80037da:	f100 80a2 	bmi.w	8003922 <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	0718      	lsls	r0, r3, #28
 80037e2:	f100 80df 	bmi.w	80039a4 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	0759      	lsls	r1, r3, #29
 80037ea:	f100 812f 	bmi.w	8003a4c <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	0699      	lsls	r1, r3, #26
 80037f2:	f100 81ab 	bmi.w	8003b4c <HAL_RCC_OscConfig+0x41c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f040 81d1 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 80037fe:	2000      	movs	r0, #0
 8003800:	e79b      	b.n	800373a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003810:	4303      	orrs	r3, r0
 8003812:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	6a2a      	ldr	r2, [r5, #32]
 8003818:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003820:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003822:	2e00      	cmp	r6, #0
 8003824:	d1c2      	bne.n	80037ac <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003826:	f7ff fef3 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 800382a:	2800      	cmp	r0, #0
 800382c:	d0be      	beq.n	80037ac <HAL_RCC_OscConfig+0x7c>
 800382e:	e783      	b.n	8003738 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003830:	69eb      	ldr	r3, [r5, #28]
 8003832:	b31b      	cbz	r3, 800387c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800383c:	f7fe fd3a 	bl	80022b4 <HAL_GetTick>
 8003840:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	079a      	lsls	r2, r3, #30
 8003846:	d511      	bpl.n	800386c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	f043 0308 	orr.w	r3, r3, #8
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003858:	4313      	orrs	r3, r2
 800385a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	6863      	ldr	r3, [r4, #4]
 800385e:	6a2a      	ldr	r2, [r5, #32]
 8003860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	e7b1      	b.n	80037d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386c:	f7fe fd22 	bl	80022b4 <HAL_GetTick>
 8003870:	eba0 0008 	sub.w	r0, r0, r8
 8003874:	2802      	cmp	r0, #2
 8003876:	d9e4      	bls.n	8003842 <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e75e      	b.n	800373a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003884:	f7fe fd16 	bl	80022b4 <HAL_GetTick>
 8003888:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	079b      	lsls	r3, r3, #30
 800388e:	d59f      	bpl.n	80037d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003890:	f7fe fd10 	bl	80022b4 <HAL_GetTick>
 8003894:	eba0 0008 	sub.w	r0, r0, r8
 8003898:	2802      	cmp	r0, #2
 800389a:	d9f6      	bls.n	800388a <HAL_RCC_OscConfig+0x15a>
 800389c:	e7ec      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800389e:	2e08      	cmp	r6, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_OscConfig+0x17a>
 80038a2:	2e0c      	cmp	r6, #12
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038a6:	2f03      	cmp	r7, #3
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	039a      	lsls	r2, r3, #14
 80038ae:	d592      	bpl.n	80037d6 <HAL_RCC_OscConfig+0xa6>
 80038b0:	686b      	ldr	r3, [r5, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d18f      	bne.n	80037d6 <HAL_RCC_OscConfig+0xa6>
 80038b6:	e73f      	b.n	8003738 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b8:	686b      	ldr	r3, [r5, #4]
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038be:	d110      	bne.n	80038e2 <HAL_RCC_OscConfig+0x1b2>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80038c8:	f7fe fcf4 	bl	80022b4 <HAL_GetTick>
 80038cc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	039b      	lsls	r3, r3, #14
 80038d2:	d480      	bmi.n	80037d6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fcee 	bl	80022b4 <HAL_GetTick>
 80038d8:	eba0 0008 	sub.w	r0, r0, r8
 80038dc:	2864      	cmp	r0, #100	; 0x64
 80038de:	d9f6      	bls.n	80038ce <HAL_RCC_OscConfig+0x19e>
 80038e0:	e7ca      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e6:	d104      	bne.n	80038f2 <HAL_RCC_OscConfig+0x1c2>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	e7e6      	b.n	80038c0 <HAL_RCC_OscConfig+0x190>
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038f8:	6022      	str	r2, [r4, #0]
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003900:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8003906:	f7fe fcd5 	bl	80022b4 <HAL_GetTick>
 800390a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	0398      	lsls	r0, r3, #14
 8003910:	f57f af61 	bpl.w	80037d6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe fcce 	bl	80022b4 <HAL_GetTick>
 8003918:	eba0 0008 	sub.w	r0, r0, r8
 800391c:	2864      	cmp	r0, #100	; 0x64
 800391e:	d9f5      	bls.n	800390c <HAL_RCC_OscConfig+0x1dc>
 8003920:	e7aa      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003922:	2e04      	cmp	r6, #4
 8003924:	d003      	beq.n	800392e <HAL_RCC_OscConfig+0x1fe>
 8003926:	2e0c      	cmp	r6, #12
 8003928:	d110      	bne.n	800394c <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800392a:	2f02      	cmp	r7, #2
 800392c:	d10e      	bne.n	800394c <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	0559      	lsls	r1, r3, #21
 8003932:	d503      	bpl.n	800393c <HAL_RCC_OscConfig+0x20c>
 8003934:	68eb      	ldr	r3, [r5, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f43f aefe 	beq.w	8003738 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	692a      	ldr	r2, [r5, #16]
 8003940:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003944:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	e748      	b.n	80037de <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800394c:	68eb      	ldr	r3, [r5, #12]
 800394e:	b17b      	cbz	r3, 8003970 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003958:	f7fe fcac 	bl	80022b4 <HAL_GetTick>
 800395c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	055a      	lsls	r2, r3, #21
 8003962:	d4eb      	bmi.n	800393c <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003964:	f7fe fca6 	bl	80022b4 <HAL_GetTick>
 8003968:	1bc0      	subs	r0, r0, r7
 800396a:	2802      	cmp	r0, #2
 800396c:	d9f7      	bls.n	800395e <HAL_RCC_OscConfig+0x22e>
 800396e:	e783      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003976:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003978:	f7fe fc9c 	bl	80022b4 <HAL_GetTick>
 800397c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	055b      	lsls	r3, r3, #21
 8003982:	f57f af2c 	bpl.w	80037de <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7fe fc95 	bl	80022b4 <HAL_GetTick>
 800398a:	1bc0      	subs	r0, r0, r7
 800398c:	2802      	cmp	r0, #2
 800398e:	d9f6      	bls.n	800397e <HAL_RCC_OscConfig+0x24e>
 8003990:	e772      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	08007cb3 	.word	0x08007cb3
 800399c:	20000014 	.word	0x20000014
 80039a0:	2000001c 	.word	0x2000001c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a4:	696b      	ldr	r3, [r5, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d03c      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2f4>
      uint32_t csr_temp = RCC->CSR;
 80039aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80039ae:	69a9      	ldr	r1, [r5, #24]
 80039b0:	f003 0210 	and.w	r2, r3, #16
 80039b4:	4291      	cmp	r1, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2a6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	2a02      	cmp	r2, #2
 80039be:	f43f aebb 	beq.w	8003738 <HAL_RCC_OscConfig+0x8>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039c2:	07da      	lsls	r2, r3, #31
 80039c4:	d41b      	bmi.n	80039fe <HAL_RCC_OscConfig+0x2ce>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80039c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80039ca:	69aa      	ldr	r2, [r5, #24]
 80039cc:	f023 0310 	bic.w	r3, r3, #16
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 80039d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80039e2:	f7fe fc67 	bl	80022b4 <HAL_GetTick>
 80039e6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80039ec:	0798      	lsls	r0, r3, #30
 80039ee:	f53f aefa 	bmi.w	80037e6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fe fc5f 	bl	80022b4 <HAL_GetTick>
 80039f6:	1bc0      	subs	r0, r0, r7
 80039f8:	2811      	cmp	r0, #17
 80039fa:	d9f5      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2b8>
 80039fc:	e73c      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
          __HAL_RCC_LSI_DISABLE();
 80039fe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003a0a:	f7fe fc53 	bl	80022b4 <HAL_GetTick>
 8003a0e:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a10:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003a14:	079b      	lsls	r3, r3, #30
 8003a16:	d5d6      	bpl.n	80039c6 <HAL_RCC_OscConfig+0x296>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a18:	f7fe fc4c 	bl	80022b4 <HAL_GetTick>
 8003a1c:	1bc0      	subs	r0, r0, r7
 8003a1e:	2811      	cmp	r0, #17
 8003a20:	d9f6      	bls.n	8003a10 <HAL_RCC_OscConfig+0x2e0>
 8003a22:	e729      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8003a24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc40 	bl	80022b4 <HAL_GetTick>
 8003a34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003a3a:	0799      	lsls	r1, r3, #30
 8003a3c:	f57f aed3 	bpl.w	80037e6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe fc38 	bl	80022b4 <HAL_GetTick>
 8003a44:	1bc0      	subs	r0, r0, r7
 8003a46:	2811      	cmp	r0, #17
 8003a48:	d9f5      	bls.n	8003a36 <HAL_RCC_OscConfig+0x306>
 8003a4a:	e715      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a4e:	00da      	lsls	r2, r3, #3
 8003a50:	d430      	bmi.n	8003ab4 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a64:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8003cd8 <HAL_RCC_OscConfig+0x5a8>
 8003a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6e:	05db      	lsls	r3, r3, #23
 8003a70:	d522      	bpl.n	8003ab8 <HAL_RCC_OscConfig+0x388>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a72:	68aa      	ldr	r2, [r5, #8]
 8003a74:	07d0      	lsls	r0, r2, #31
 8003a76:	d433      	bmi.n	8003ae0 <HAL_RCC_OscConfig+0x3b0>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a78:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a84:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d13c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3de>
      tickstart = HAL_GetTick();
 8003a94:	f7fe fc0e 	bl	80022b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a9c:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003aa2:	0798      	lsls	r0, r3, #30
 8003aa4:	d44b      	bmi.n	8003b3e <HAL_RCC_OscConfig+0x40e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003aa6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003ab2:	e035      	b.n	8003b20 <HAL_RCC_OscConfig+0x3f0>
    FlagStatus       pwrclkchanged = RESET;
 8003ab4:	2700      	movs	r7, #0
 8003ab6:	e7d6      	b.n	8003a66 <HAL_RCC_OscConfig+0x336>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	f8c8 3000 	str.w	r3, [r8]
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fbf6 	bl	80022b4 <HAL_GetTick>
 8003ac8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aca:	f8d8 3000 	ldr.w	r3, [r8]
 8003ace:	05d9      	lsls	r1, r3, #23
 8003ad0:	d4cf      	bmi.n	8003a72 <HAL_RCC_OscConfig+0x342>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fe fbef 	bl	80022b4 <HAL_GetTick>
 8003ad6:	eba0 0009 	sub.w	r0, r0, r9
 8003ada:	2802      	cmp	r0, #2
 8003adc:	d9f5      	bls.n	8003aca <HAL_RCC_OscConfig+0x39a>
 8003ade:	e6cb      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003ae0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003ae4:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003af2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003af6:	0752      	lsls	r2, r2, #29
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003af8:	bf42      	ittt	mi
 8003afa:	f043 0304 	orrmi.w	r3, r3, #4
 8003afe:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b02:	f8d4 3090 	ldrmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003b0e:	f7fe fbd1 	bl	80022b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003b16:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003b1c:	079b      	lsls	r3, r3, #30
 8003b1e:	d507      	bpl.n	8003b30 <HAL_RCC_OscConfig+0x400>
    if(pwrclkchanged == SET)
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	f43f ae64 	beq.w	80037ee <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b2e:	e65e      	b.n	80037ee <HAL_RCC_OscConfig+0xbe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fe fbc0 	bl	80022b4 <HAL_GetTick>
 8003b34:	eba0 0008 	sub.w	r0, r0, r8
 8003b38:	4548      	cmp	r0, r9
 8003b3a:	d9ed      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3e8>
 8003b3c:	e69c      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fe fbb9 	bl	80022b4 <HAL_GetTick>
 8003b42:	eba0 0008 	sub.w	r0, r0, r8
 8003b46:	4548      	cmp	r0, r9
 8003b48:	d9a9      	bls.n	8003a9e <HAL_RCC_OscConfig+0x36e>
 8003b4a:	e695      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b4e:	b19b      	cbz	r3, 8003b78 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI48_ENABLE();
 8003b50:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fbaa 	bl	80022b4 <HAL_GetTick>
 8003b60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b62:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b66:	079a      	lsls	r2, r3, #30
 8003b68:	f53f ae45 	bmi.w	80037f6 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6c:	f7fe fba2 	bl	80022b4 <HAL_GetTick>
 8003b70:	1bc0      	subs	r0, r0, r7
 8003b72:	2802      	cmp	r0, #2
 8003b74:	d9f5      	bls.n	8003b62 <HAL_RCC_OscConfig+0x432>
 8003b76:	e67f      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8003b78:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b84:	f7fe fb96 	bl	80022b4 <HAL_GetTick>
 8003b88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b8e:	079b      	lsls	r3, r3, #30
 8003b90:	f57f ae31 	bpl.w	80037f6 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fe fb8e 	bl	80022b4 <HAL_GetTick>
 8003b98:	1bc0      	subs	r0, r0, r7
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9f5      	bls.n	8003b8a <HAL_RCC_OscConfig+0x45a>
 8003b9e:	e66b      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d17a      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56a>
      pll_config = RCC->PLLCFGR;
 8003ba4:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003ba8:	f003 0103 	and.w	r1, r3, #3
 8003bac:	4291      	cmp	r1, r2
 8003bae:	d11c      	bne.n	8003bea <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bb6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003bbc:	d115      	bne.n	8003bea <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003bcc:	0852      	lsrs	r2, r2, #1
 8003bce:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003bd2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bda:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003bdc:	0852      	lsrs	r2, r2, #1
 8003bde:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003be2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003be8:	d03e      	beq.n	8003c68 <HAL_RCC_OscConfig+0x538>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bea:	2e0c      	cmp	r6, #12
 8003bec:	f43f ada4 	beq.w	8003738 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003bf8:	f7fe fb5c 	bl	80022b4 <HAL_GetTick>
 8003bfc:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	0198      	lsls	r0, r3, #6
 8003c02:	d42b      	bmi.n	8003c5c <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c04:	68e2      	ldr	r2, [r4, #12]
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_RCC_OscConfig+0x5a4>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003c16:	3a01      	subs	r2, #1
 8003c18:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c1c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003c1e:	0852      	lsrs	r2, r2, #1
 8003c20:	3a01      	subs	r2, #1
 8003c22:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003c26:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c28:	0852      	lsrs	r2, r2, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003c30:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c38:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c40:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003c42:	f7fe fb37 	bl	80022b4 <HAL_GetTick>
 8003c46:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	0199      	lsls	r1, r3, #6
 8003c4c:	f53f add7 	bmi.w	80037fe <HAL_RCC_OscConfig+0xce>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe fb30 	bl	80022b4 <HAL_GetTick>
 8003c54:	1b40      	subs	r0, r0, r5
 8003c56:	2802      	cmp	r0, #2
 8003c58:	d9f6      	bls.n	8003c48 <HAL_RCC_OscConfig+0x518>
 8003c5a:	e60d      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fe fb2a 	bl	80022b4 <HAL_GetTick>
 8003c60:	1b80      	subs	r0, r0, r6
 8003c62:	2802      	cmp	r0, #2
 8003c64:	d9cb      	bls.n	8003bfe <HAL_RCC_OscConfig+0x4ce>
 8003c66:	e607      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	f53f adc7 	bmi.w	80037fe <HAL_RCC_OscConfig+0xce>
          __HAL_RCC_PLL_ENABLE();
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c78:	68e3      	ldr	r3, [r4, #12]
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003c80:	f7fe fb18 	bl	80022b4 <HAL_GetTick>
 8003c84:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	019b      	lsls	r3, r3, #6
 8003c8a:	f53f adb8 	bmi.w	80037fe <HAL_RCC_OscConfig+0xce>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fe fb11 	bl	80022b4 <HAL_GetTick>
 8003c92:	1b40      	subs	r0, r0, r5
 8003c94:	2802      	cmp	r0, #2
 8003c96:	d9f6      	bls.n	8003c86 <HAL_RCC_OscConfig+0x556>
 8003c98:	e5ee      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c9a:	2e0c      	cmp	r6, #12
 8003c9c:	f43f ad4c 	beq.w	8003738 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fb04 	bl	80022b4 <HAL_GetTick>
 8003cac:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x596>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003cb6:	68e2      	ldr	r2, [r4, #12]
 8003cb8:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003cbc:	f022 0203 	bic.w	r2, r2, #3
 8003cc0:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	e539      	b.n	800373a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe faf5 	bl	80022b4 <HAL_GetTick>
 8003cca:	1b40      	subs	r0, r0, r5
 8003ccc:	2802      	cmp	r0, #2
 8003cce:	d9ee      	bls.n	8003cae <HAL_RCC_OscConfig+0x57e>
 8003cd0:	e5d2      	b.n	8003878 <HAL_RCC_OscConfig+0x148>
 8003cd2:	bf00      	nop
 8003cd4:	f99f808c 	.word	0xf99f808c
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_RCC_ClockConfig>:
{
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	b910      	cbnz	r0, 8003cec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ce6:	2001      	movs	r0, #1
}
 8003ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_RCC_ClockConfig+0x140>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d32c      	bcc.n	8003d52 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	0786      	lsls	r6, r0, #30
 8003cfc:	d434      	bmi.n	8003d68 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	07c1      	lsls	r1, r0, #31
 8003d00:	d43f      	bmi.n	8003d82 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d02:	6821      	ldr	r1, [r4, #0]
 8003d04:	078a      	lsls	r2, r1, #30
 8003d06:	d468      	bmi.n	8003dda <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d08:	4a44      	ldr	r2, [pc, #272]	; (8003e1c <HAL_RCC_ClockConfig+0x140>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	42ab      	cmp	r3, r5
 8003d12:	d86f      	bhi.n	8003df4 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	f011 0f04 	tst.w	r1, #4
 8003d18:	4d41      	ldr	r5, [pc, #260]	; (8003e20 <HAL_RCC_ClockConfig+0x144>)
 8003d1a:	d177      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1c:	070b      	lsls	r3, r1, #28
 8003d1e:	d506      	bpl.n	8003d2e <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d20:	68ab      	ldr	r3, [r5, #8]
 8003d22:	6922      	ldr	r2, [r4, #16]
 8003d24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d2c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2e:	f7ff fcb1 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003d32:	68ab      	ldr	r3, [r5, #8]
 8003d34:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x148>)
 8003d36:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	40d8      	lsrs	r0, r3
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_RCC_ClockConfig+0x14c>)
 8003d48:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003d4a:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <HAL_RCC_ClockConfig+0x150>)
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f7fe ba6f 	b.w	8002230 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	428b      	cmp	r3, r1
 8003d64:	d1bf      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xa>
 8003d66:	e7c7      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d68:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <HAL_RCC_ClockConfig+0x144>)
 8003d6a:	68a6      	ldr	r6, [r4, #8]
 8003d6c:	6891      	ldr	r1, [r2, #8]
 8003d6e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8003d72:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	bf81      	itttt	hi
 8003d76:	6893      	ldrhi	r3, [r2, #8]
 8003d78:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8003d7c:	4333      	orrhi	r3, r6
 8003d7e:	6093      	strhi	r3, [r2, #8]
 8003d80:	e7bd      	b.n	8003cfe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	4e26      	ldr	r6, [pc, #152]	; (8003e20 <HAL_RCC_ClockConfig+0x144>)
 8003d86:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d88:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8a:	d11a      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d90:	d0a9      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	68b3      	ldr	r3, [r6, #8]
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003d9c:	f7fe fa8a 	bl	80022b4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003da4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	68b3      	ldr	r3, [r6, #8]
 8003da8:	6862      	ldr	r2, [r4, #4]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003db2:	d0a6      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7fe fa7e 	bl	80022b4 <HAL_GetTick>
 8003db8:	1bc0      	subs	r0, r0, r7
 8003dba:	4540      	cmp	r0, r8
 8003dbc:	d9f3      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	e792      	b.n	8003ce8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	2a02      	cmp	r2, #2
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003dca:	e7e1      	b.n	8003d90 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dcc:	b912      	cbnz	r2, 8003dd4 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dce:	f013 0f02 	tst.w	r3, #2
 8003dd2:	e7dd      	b.n	8003d90 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003dd8:	e7da      	b.n	8003d90 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_RCC_ClockConfig+0x144>)
 8003ddc:	68a6      	ldr	r6, [r4, #8]
 8003dde:	6890      	ldr	r0, [r2, #8]
 8003de0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003de4:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de6:	bf3f      	itttt	cc
 8003de8:	6893      	ldrcc	r3, [r2, #8]
 8003dea:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8003dee:	4333      	orrcc	r3, r6
 8003df0:	6093      	strcc	r3, [r2, #8]
 8003df2:	e789      	b.n	8003d08 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	f023 0307 	bic.w	r3, r3, #7
 8003dfa:	432b      	orrs	r3, r5
 8003dfc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	f47f af6e 	bne.w	8003ce6 <HAL_RCC_ClockConfig+0xa>
 8003e0a:	e783      	b.n	8003d14 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	68ab      	ldr	r3, [r5, #8]
 8003e0e:	68e2      	ldr	r2, [r4, #12]
 8003e10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60ab      	str	r3, [r5, #8]
 8003e18:	e780      	b.n	8003d1c <HAL_RCC_ClockConfig+0x40>
 8003e1a:	bf00      	nop
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08007cb3 	.word	0x08007cb3
 8003e28:	20000014 	.word	0x20000014
 8003e2c:	2000001c 	.word	0x2000001c

08003e30 <HAL_RCC_GetHCLKFreq>:
}
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000014 	.word	0x20000014

08003e3c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e3e:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e4a:	6810      	ldr	r0, [r2, #0]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
}
 8003e50:	40d8      	lsrs	r0, r3
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08007cc3 	.word	0x08007cc3
 8003e5c:	20000014 	.word	0x20000014

08003e60 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e62:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e6e:	6810      	ldr	r0, [r2, #0]
 8003e70:	f003 031f 	and.w	r3, r3, #31
}
 8003e74:	40d8      	lsrs	r0, r3
 8003e76:	4770      	bx	lr
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	08007cc3 	.word	0x08007cc3
 8003e80:	20000014 	.word	0x20000014

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003e88:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e8a:	6800      	ldr	r0, [r0, #0]
 8003e8c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003e90:	d039      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e92:	4d75      	ldr	r5, [pc, #468]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e94:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e96:	00d8      	lsls	r0, r3, #3
 8003e98:	d427      	bmi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ea2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003eac:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eae:	4f6f      	ldr	r7, [pc, #444]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe f9fc 	bl	80022b4 <HAL_GetTick>
 8003ebc:	4680      	mov	r8, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	05d9      	lsls	r1, r3, #23
 8003ec2:	d514      	bpl.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	f040 80a3 	bne.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x198>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003eda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e008      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2600      	movs	r6, #0
 8003eec:	e7df      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eee:	f7fe f9e1 	bl	80022b4 <HAL_GetTick>
 8003ef2:	eba0 0008 	sub.w	r0, r0, r8
 8003ef6:	2802      	cmp	r0, #2
 8003ef8:	d9e1      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 8003efa:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efc:	b11e      	cbz	r6, 8003f06 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f04:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	07df      	lsls	r7, r3, #31
 8003f0a:	d508      	bpl.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0c:	4956      	ldr	r1, [pc, #344]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f0e:	6865      	ldr	r5, [r4, #4]
 8003f10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f14:	f022 0203 	bic.w	r2, r2, #3
 8003f18:	432a      	orrs	r2, r5
 8003f1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f1e:	079e      	lsls	r6, r3, #30
 8003f20:	d508      	bpl.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f22:	4951      	ldr	r1, [pc, #324]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f24:	68a5      	ldr	r5, [r4, #8]
 8003f26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f2a:	f022 020c 	bic.w	r2, r2, #12
 8003f2e:	432a      	orrs	r2, r5
 8003f30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f34:	075d      	lsls	r5, r3, #29
 8003f36:	d508      	bpl.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f38:	494b      	ldr	r1, [pc, #300]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f3a:	68e5      	ldr	r5, [r4, #12]
 8003f3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f40:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003f44:	432a      	orrs	r2, r5
 8003f46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f4a:	0699      	lsls	r1, r3, #26
 8003f4c:	d508      	bpl.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4946      	ldr	r1, [pc, #280]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f50:	6925      	ldr	r5, [r4, #16]
 8003f52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f5a:	432a      	orrs	r2, r5
 8003f5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f60:	059a      	lsls	r2, r3, #22
 8003f62:	d508      	bpl.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f64:	4940      	ldr	r1, [pc, #256]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f66:	6a25      	ldr	r5, [r4, #32]
 8003f68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f6c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003f70:	432a      	orrs	r2, r5
 8003f72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f76:	055f      	lsls	r7, r3, #21
 8003f78:	d508      	bpl.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7a:	493b      	ldr	r1, [pc, #236]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003f7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f82:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003f86:	432a      	orrs	r2, r5
 8003f88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8c:	065e      	lsls	r6, r3, #25
 8003f8e:	d508      	bpl.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f90:	4935      	ldr	r1, [pc, #212]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f92:	6965      	ldr	r5, [r4, #20]
 8003f94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f9c:	432a      	orrs	r2, r5
 8003f9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa2:	061d      	lsls	r5, r3, #24
 8003fa4:	d508      	bpl.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4930      	ldr	r1, [pc, #192]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003fa8:	69a5      	ldr	r5, [r4, #24]
 8003faa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003fb2:	432a      	orrs	r2, r5
 8003fb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fb8:	05d9      	lsls	r1, r3, #23
 8003fba:	d508      	bpl.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fbc:	492a      	ldr	r1, [pc, #168]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003fbe:	69e5      	ldr	r5, [r4, #28]
 8003fc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fc4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003fc8:	432a      	orrs	r2, r5
 8003fca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fce:	049a      	lsls	r2, r3, #18
 8003fd0:	d50f      	bpl.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fd2:	4925      	ldr	r1, [pc, #148]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003fd4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003fd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fda:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003fde:	432a      	orrs	r2, r5
 8003fe0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fe4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	bf02      	ittt	eq
 8003fea:	68ca      	ldreq	r2, [r1, #12]
 8003fec:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003ff0:	60ca      	streq	r2, [r1, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff2:	035b      	lsls	r3, r3, #13
 8003ff4:	d50f      	bpl.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ff8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ffa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ffe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004002:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004004:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800400c:	d103      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400e:	68d3      	ldr	r3, [r2, #12]
 8004010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004014:	60d3      	str	r3, [r2, #12]
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8004016:	b002      	add	sp, #8
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800401c:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004020:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800402c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004030:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004038:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800403a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800403e:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004042:	f57f af48 	bpl.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004046:	f7fe f935 	bl	80022b4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800404e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004050:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004054:	079b      	lsls	r3, r3, #30
 8004056:	f53f af3e 	bmi.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fe f92b 	bl	80022b4 <HAL_GetTick>
 800405e:	1bc0      	subs	r0, r0, r7
 8004060:	4540      	cmp	r0, r8
 8004062:	d9f5      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004064:	e749      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000

08004070 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004070:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	4770      	bx	lr
 800407c:	40021000 	.word	0x40021000

08004080 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004080:	6a03      	ldr	r3, [r0, #32]
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004088:	6a03      	ldr	r3, [r0, #32]
{
 800408a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004096:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800409a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800409c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800409e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a4:	4d12      	ldr	r5, [pc, #72]	; (80040f0 <TIM_OC1_SetConfig+0x70>)
 80040a6:	42a8      	cmp	r0, r5
 80040a8:	d006      	beq.n	80040b8 <TIM_OC1_SetConfig+0x38>
 80040aa:	4e12      	ldr	r6, [pc, #72]	; (80040f4 <TIM_OC1_SetConfig+0x74>)
 80040ac:	42b0      	cmp	r0, r6
 80040ae:	d003      	beq.n	80040b8 <TIM_OC1_SetConfig+0x38>
 80040b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80040b4:	42b0      	cmp	r0, r6
 80040b6:	d114      	bne.n	80040e2 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ba:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80040be:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c6:	d006      	beq.n	80040d6 <TIM_OC1_SetConfig+0x56>
 80040c8:	4d0a      	ldr	r5, [pc, #40]	; (80040f4 <TIM_OC1_SetConfig+0x74>)
 80040ca:	42a8      	cmp	r0, r5
 80040cc:	d003      	beq.n	80040d6 <TIM_OC1_SetConfig+0x56>
 80040ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040d2:	42a8      	cmp	r0, r5
 80040d4:	d105      	bne.n	80040e2 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040d6:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040da:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80040de:	4334      	orrs	r4, r6
 80040e0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e6:	684a      	ldr	r2, [r1, #4]
 80040e8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	6203      	str	r3, [r0, #32]
}
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40014000 	.word	0x40014000

080040f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f8:	6a03      	ldr	r3, [r0, #32]
 80040fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004100:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004102:	6842      	ldr	r2, [r0, #4]
{
 8004104:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004108:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800410a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800410e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004112:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004114:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800411a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800411e:	4d0f      	ldr	r5, [pc, #60]	; (800415c <TIM_OC3_SetConfig+0x64>)
 8004120:	42a8      	cmp	r0, r5
 8004122:	d10e      	bne.n	8004142 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004124:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800412a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004136:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800413a:	4335      	orrs	r5, r6
 800413c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004140:	e005      	b.n	800414e <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004142:	4d07      	ldr	r5, [pc, #28]	; (8004160 <TIM_OC3_SetConfig+0x68>)
 8004144:	42a8      	cmp	r0, r5
 8004146:	d0f4      	beq.n	8004132 <TIM_OC3_SetConfig+0x3a>
 8004148:	4d06      	ldr	r5, [pc, #24]	; (8004164 <TIM_OC3_SetConfig+0x6c>)
 800414a:	42a8      	cmp	r0, r5
 800414c:	d0f1      	beq.n	8004132 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004150:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004152:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004154:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004156:	6203      	str	r3, [r0, #32]
}
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400

08004168 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004168:	6a03      	ldr	r3, [r0, #32]
 800416a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800416e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004170:	6a02      	ldr	r2, [r0, #32]
{
 8004172:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004182:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004186:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004190:	4d0a      	ldr	r5, [pc, #40]	; (80041bc <TIM_OC4_SetConfig+0x54>)
 8004192:	42a8      	cmp	r0, r5
 8004194:	d007      	beq.n	80041a6 <TIM_OC4_SetConfig+0x3e>
 8004196:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800419a:	42a8      	cmp	r0, r5
 800419c:	d003      	beq.n	80041a6 <TIM_OC4_SetConfig+0x3e>
 800419e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041a2:	42a8      	cmp	r0, r5
 80041a4:	d104      	bne.n	80041b0 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b4:	684b      	ldr	r3, [r1, #4]
 80041b6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	6202      	str	r2, [r0, #32]
}
 80041ba:	bd30      	pop	{r4, r5, pc}
 80041bc:	40012c00 	.word	0x40012c00

080041c0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041c0:	6a03      	ldr	r3, [r0, #32]
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c8:	6a02      	ldr	r2, [r0, #32]
{
 80041ca:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ce:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80041da:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80041de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041e2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e6:	4d0b      	ldr	r5, [pc, #44]	; (8004214 <TIM_OC5_SetConfig+0x54>)
 80041e8:	42a8      	cmp	r0, r5
 80041ea:	d007      	beq.n	80041fc <TIM_OC5_SetConfig+0x3c>
 80041ec:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80041f0:	42a8      	cmp	r0, r5
 80041f2:	d003      	beq.n	80041fc <TIM_OC5_SetConfig+0x3c>
 80041f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041f8:	42a8      	cmp	r0, r5
 80041fa:	d104      	bne.n	8004206 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041fc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041fe:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004202:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004208:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800420a:	684b      	ldr	r3, [r1, #4]
 800420c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	6202      	str	r2, [r0, #32]
}
 8004210:	bd30      	pop	{r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00

08004218 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004218:	6a03      	ldr	r3, [r0, #32]
 800421a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800421e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004220:	6a02      	ldr	r2, [r0, #32]
{
 8004222:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004226:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004228:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800422a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004232:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004236:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004238:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800423c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004240:	4d0a      	ldr	r5, [pc, #40]	; (800426c <TIM_OC6_SetConfig+0x54>)
 8004242:	42a8      	cmp	r0, r5
 8004244:	d007      	beq.n	8004256 <TIM_OC6_SetConfig+0x3e>
 8004246:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800424a:	42a8      	cmp	r0, r5
 800424c:	d003      	beq.n	8004256 <TIM_OC6_SetConfig+0x3e>
 800424e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004252:	42a8      	cmp	r0, r5
 8004254:	d104      	bne.n	8004260 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004256:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004258:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800425c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004262:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004264:	684b      	ldr	r3, [r1, #4]
 8004266:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	6202      	str	r2, [r0, #32]
}
 800426a:	bd30      	pop	{r4, r5, pc}
 800426c:	40012c00 	.word	0x40012c00

08004270 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004270:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11f      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800427e:	6803      	ldr	r3, [r0, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004288:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <HAL_TIM_Base_Start_IT+0x4c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d006      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x2c>
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d003      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x2c>
 8004294:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004298:	4293      	cmp	r3, r2
 800429a:	d107      	bne.n	80042ac <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_TIM_Base_Start_IT+0x50>)
 80042a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	2a06      	cmp	r2, #6
 80042a4:	d006      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x44>
 80042a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80042aa:	d003      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042b4:	2000      	movs	r0, #0
}
 80042b6:	4770      	bx	lr
    return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	00010007 	.word	0x00010007

080042c4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80042ce:	6a19      	ldr	r1, [r3, #32]
 80042d0:	f241 1211 	movw	r2, #4369	; 0x1111
 80042d4:	4211      	tst	r1, r2
 80042d6:	d108      	bne.n	80042ea <HAL_TIM_Base_Stop_IT+0x26>
 80042d8:	6a19      	ldr	r1, [r3, #32]
 80042da:	f240 4244 	movw	r2, #1092	; 0x444
 80042de:	4211      	tst	r1, r2
 80042e0:	bf02      	ittt	eq
 80042e2:	681a      	ldreq	r2, [r3, #0]
 80042e4:	f022 0201 	biceq.w	r2, r2, #1
 80042e8:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80042f0:	2000      	movs	r0, #0
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_IC_CaptureCallback>:
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80042f8:	4770      	bx	lr

080042fa <TIM_DMADelayPulseCplt>:
{
 80042fa:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004300:	4282      	cmp	r2, r0
 8004302:	d10b      	bne.n	800431c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004304:	2301      	movs	r3, #1
 8004306:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004308:	69d2      	ldr	r2, [r2, #28]
 800430a:	b90a      	cbnz	r2, 8004310 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff fff1 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	2300      	movs	r3, #0
 8004318:	7723      	strb	r3, [r4, #28]
}
 800431a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800431c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800431e:	4283      	cmp	r3, r0
 8004320:	d108      	bne.n	8004334 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004322:	2202      	movs	r2, #2
 8004324:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f1      	bne.n	8004310 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	2301      	movs	r3, #1
 800432e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004332:	e7ed      	b.n	8004310 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004336:	4283      	cmp	r3, r0
 8004338:	d108      	bne.n	800434c <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433a:	2204      	movs	r2, #4
 800433c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	2301      	movs	r3, #1
 8004346:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800434a:	e7e1      	b.n	8004310 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800434c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800434e:	4283      	cmp	r3, r0
 8004350:	d1de      	bne.n	8004310 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004352:	2208      	movs	r2, #8
 8004354:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1d9      	bne.n	8004310 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	2301      	movs	r3, #1
 800435e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004362:	e7d5      	b.n	8004310 <TIM_DMADelayPulseCplt+0x16>

08004364 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8004364:	4770      	bx	lr

08004366 <TIM_DMADelayPulseHalfCplt>:
{
 8004366:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004368:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800436a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800436c:	4283      	cmp	r3, r0
 800436e:	d107      	bne.n	8004380 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004370:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004372:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff fff5 	bl	8004364 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	2300      	movs	r3, #0
 800437c:	7723      	strb	r3, [r4, #28]
}
 800437e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004382:	4283      	cmp	r3, r0
 8004384:	d101      	bne.n	800438a <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	2302      	movs	r3, #2
 8004388:	e7f3      	b.n	8004372 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800438a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800438c:	4283      	cmp	r3, r0
 800438e:	d101      	bne.n	8004394 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004390:	2304      	movs	r3, #4
 8004392:	e7ee      	b.n	8004372 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004394:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004396:	4283      	cmp	r3, r0
 8004398:	d1ec      	bne.n	8004374 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	2308      	movs	r3, #8
 800439c:	e7e9      	b.n	8004372 <TIM_DMADelayPulseHalfCplt+0xc>

0800439e <HAL_TIM_TriggerCallback>:
 800439e:	4770      	bx	lr

080043a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	6803      	ldr	r3, [r0, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	0791      	lsls	r1, r2, #30
{
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043aa:	d50f      	bpl.n	80043cc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	0792      	lsls	r2, r2, #30
 80043b0:	d50c      	bpl.n	80043cc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b2:	f06f 0202 	mvn.w	r2, #2
 80043b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b8:	2201      	movs	r2, #1
 80043ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	0799      	lsls	r1, r3, #30
 80043c0:	f000 8085 	beq.w	80044ce <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	f7ff ff97 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	2300      	movs	r3, #0
 80043ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	0752      	lsls	r2, r2, #29
 80043d2:	d510      	bpl.n	80043f6 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	0750      	lsls	r0, r2, #29
 80043d8:	d50d      	bpl.n	80043f6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043da:	f06f 0204 	mvn.w	r2, #4
 80043de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e0:	2202      	movs	r2, #2
 80043e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	d075      	beq.n	80044da <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	f7ff ff82 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	2300      	movs	r3, #0
 80043f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	0711      	lsls	r1, r2, #28
 80043fc:	d50f      	bpl.n	800441e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	0712      	lsls	r2, r2, #28
 8004402:	d50c      	bpl.n	800441e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004404:	f06f 0208 	mvn.w	r2, #8
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440a:	2204      	movs	r2, #4
 800440c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004414:	d067      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	f7ff ff6e 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	2300      	movs	r3, #0
 800441c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	06d0      	lsls	r0, r2, #27
 8004424:	d510      	bpl.n	8004448 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	06d1      	lsls	r1, r2, #27
 800442a:	d50d      	bpl.n	8004448 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	2208      	movs	r2, #8
 8004434:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800443c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443e:	d058      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	f7ff ff59 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004444:	2300      	movs	r3, #0
 8004446:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	07d2      	lsls	r2, r2, #31
 800444e:	d508      	bpl.n	8004462 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	07d0      	lsls	r0, r2, #31
 8004454:	d505      	bpl.n	8004462 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004456:	f06f 0201 	mvn.w	r2, #1
 800445a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800445c:	4620      	mov	r0, r4
 800445e:	f7fc fea5 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	0611      	lsls	r1, r2, #24
 8004468:	d508      	bpl.n	800447c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	0612      	lsls	r2, r2, #24
 800446e:	d505      	bpl.n	800447c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004474:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004476:	4620      	mov	r0, r4
 8004478:	f000 fcc9 	bl	8004e0e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	05d0      	lsls	r0, r2, #23
 8004482:	d508      	bpl.n	8004496 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	0611      	lsls	r1, r2, #24
 8004488:	d505      	bpl.n	8004496 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800448a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800448e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fcbd 	bl	8004e10 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	0652      	lsls	r2, r2, #25
 800449c:	d508      	bpl.n	80044b0 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	0650      	lsls	r0, r2, #25
 80044a2:	d505      	bpl.n	80044b0 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff ff77 	bl	800439e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	0691      	lsls	r1, r2, #26
 80044b6:	d522      	bpl.n	80044fe <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	0692      	lsls	r2, r2, #26
 80044bc:	d51f      	bpl.n	80044fe <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80044c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c4:	611a      	str	r2, [r3, #16]
}
 80044c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80044ca:	f000 bc9f 	b.w	8004e0c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	f7ff ff11 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff ff10 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80044d8:	e776      	b.n	80043c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	f7ff ff0b 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff ff0a 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80044e4:	e785      	b.n	80043f2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	f7ff ff05 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7ff ff04 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80044f0:	e793      	b.n	800441a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	f7ff feff 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff fefe 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80044fc:	e7a2      	b.n	8004444 <HAL_TIM_IRQHandler+0xa4>
}
 80044fe:	bd10      	pop	{r4, pc}

08004500 <HAL_TIM_ErrorCallback>:
 8004500:	4770      	bx	lr

08004502 <TIM_DMAError>:
{
 8004502:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004504:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004508:	4283      	cmp	r3, r0
 800450a:	d109      	bne.n	8004520 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450c:	2301      	movs	r3, #1
 800450e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fff3 	bl	8004500 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	2300      	movs	r3, #0
 800451c:	7723      	strb	r3, [r4, #28]
}
 800451e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004522:	4283      	cmp	r3, r0
 8004524:	d105      	bne.n	8004532 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004526:	2302      	movs	r3, #2
 8004528:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	2301      	movs	r3, #1
 800452c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004530:	e7f0      	b.n	8004514 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004534:	4283      	cmp	r3, r0
 8004536:	f04f 0301 	mov.w	r3, #1
 800453a:	d104      	bne.n	8004546 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453c:	2204      	movs	r2, #4
 800453e:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004544:	e7e6      	b.n	8004514 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004546:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004548:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	bf03      	ittte	eq
 800454c:	2208      	moveq	r2, #8
 800454e:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 8004554:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8004558:	e7dc      	b.n	8004514 <TIM_DMAError+0x12>
	...

0800455c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455c:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800455e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	4290      	cmp	r0, r2
{
 8004562:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	d002      	beq.n	800456c <TIM_Base_SetConfig+0x10>
 8004566:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800456a:	d109      	bne.n	8004580 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800456c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004572:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004574:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004578:	d009      	beq.n	800458e <TIM_Base_SetConfig+0x32>
 800457a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800457e:	d006      	beq.n	800458e <TIM_Base_SetConfig+0x32>
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <TIM_Base_SetConfig+0x70>)
 8004582:	4290      	cmp	r0, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0x32>
 8004586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800458a:	4290      	cmp	r0, r2
 800458c:	d103      	bne.n	8004596 <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004594:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004596:	694a      	ldr	r2, [r1, #20]
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800459e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	688b      	ldr	r3, [r1, #8]
 80045a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045a4:	680b      	ldr	r3, [r1, #0]
 80045a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <TIM_Base_SetConfig+0x6c>)
 80045aa:	4298      	cmp	r0, r3
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0x62>
 80045ae:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80045b2:	4298      	cmp	r0, r3
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0x62>
 80045b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ba:	4298      	cmp	r0, r3
 80045bc:	d101      	bne.n	80045c2 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80045c2:	2301      	movs	r3, #1
 80045c4:	6143      	str	r3, [r0, #20]
}
 80045c6:	bd10      	pop	{r4, pc}
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40014000 	.word	0x40014000

080045d0 <HAL_TIM_Base_Init>:
{
 80045d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80045d2:	4604      	mov	r4, r0
 80045d4:	b350      	cbz	r0, 800462c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045de:	b91b      	cbnz	r3, 80045e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80045e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045e4:	f7fd fc6e 	bl	8001ec4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	1d21      	adds	r1, r4, #4
 80045f2:	f7ff ffb3 	bl	800455c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80045fc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004602:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004606:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800460a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800460e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004616:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800461a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800461e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004622:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004626:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800462a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800462c:	2001      	movs	r0, #1
 800462e:	e7fc      	b.n	800462a <HAL_TIM_Base_Init+0x5a>

08004630 <HAL_TIM_OC_Init>:
{
 8004630:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004632:	4604      	mov	r4, r0
 8004634:	b350      	cbz	r0, 800468c <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800463a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800463e:	b91b      	cbnz	r3, 8004648 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004640:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004644:	f7fd fbde 	bl	8001e04 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800464a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004650:	1d21      	adds	r1, r4, #4
 8004652:	f7ff ff83 	bl	800455c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004656:	2301      	movs	r3, #1
 8004658:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800465c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004662:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004666:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800466a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800466e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004676:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800467a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800467e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004682:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800468a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	e7fc      	b.n	800468a <HAL_TIM_OC_Init+0x5a>

08004690 <HAL_TIM_PWM_Init>:
{
 8004690:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004692:	4604      	mov	r4, r0
 8004694:	b350      	cbz	r0, 80046ec <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800469a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800469e:	b91b      	cbnz	r3, 80046a8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80046a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80046a4:	f7fd fb8e 	bl	8001dc4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046aa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b0:	1d21      	adds	r1, r4, #4
 80046b2:	f7ff ff53 	bl	800455c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80046bc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80046c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80046c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80046ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80046ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80046e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80046ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046ec:	2001      	movs	r0, #1
 80046ee:	e7fc      	b.n	80046ea <HAL_TIM_PWM_Init+0x5a>

080046f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f0:	6a03      	ldr	r3, [r0, #32]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80046f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046fa:	6842      	ldr	r2, [r0, #4]
{
 80046fc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80046fe:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004702:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004706:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800470a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800470e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004710:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004714:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004718:	4d0e      	ldr	r5, [pc, #56]	; (8004754 <TIM_OC2_SetConfig+0x64>)
 800471a:	42a8      	cmp	r0, r5
 800471c:	d10e      	bne.n	800473c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800471e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004724:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800472c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004734:	4335      	orrs	r5, r6
 8004736:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800473a:	e005      	b.n	8004748 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	4d06      	ldr	r5, [pc, #24]	; (8004758 <TIM_OC2_SetConfig+0x68>)
 800473e:	42a8      	cmp	r0, r5
 8004740:	d0f4      	beq.n	800472c <TIM_OC2_SetConfig+0x3c>
 8004742:	4d06      	ldr	r5, [pc, #24]	; (800475c <TIM_OC2_SetConfig+0x6c>)
 8004744:	42a8      	cmp	r0, r5
 8004746:	d0f1      	beq.n	800472c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8004748:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800474a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800474c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800474e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004750:	6203      	str	r3, [r0, #32]
}
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400

08004760 <HAL_TIM_OC_ConfigChannel>:
{
 8004760:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004762:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
{
 8004768:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800476a:	d02b      	beq.n	80047c4 <HAL_TIM_OC_ConfigChannel+0x64>
 800476c:	2001      	movs	r0, #1
  switch (Channel)
 800476e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004770:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004774:	d01e      	beq.n	80047b4 <HAL_TIM_OC_ConfigChannel+0x54>
 8004776:	d808      	bhi.n	800478a <HAL_TIM_OC_ConfigChannel+0x2a>
 8004778:	2a04      	cmp	r2, #4
 800477a:	d013      	beq.n	80047a4 <HAL_TIM_OC_ConfigChannel+0x44>
 800477c:	2a08      	cmp	r2, #8
 800477e:	d015      	beq.n	80047ac <HAL_TIM_OC_ConfigChannel+0x4c>
 8004780:	b15a      	cbz	r2, 800479a <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8004782:	2300      	movs	r3, #0
 8004784:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004788:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800478a:	2a10      	cmp	r2, #16
 800478c:	d016      	beq.n	80047bc <HAL_TIM_OC_ConfigChannel+0x5c>
 800478e:	2a14      	cmp	r2, #20
 8004790:	d1f7      	bne.n	8004782 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004792:	6828      	ldr	r0, [r5, #0]
 8004794:	f7ff fd40 	bl	8004218 <TIM_OC6_SetConfig>
 8004798:	e002      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479a:	6828      	ldr	r0, [r5, #0]
 800479c:	f7ff fc70 	bl	8004080 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2000      	movs	r0, #0
      break;
 80047a2:	e7ee      	b.n	8004782 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a4:	6828      	ldr	r0, [r5, #0]
 80047a6:	f7ff ffa3 	bl	80046f0 <TIM_OC2_SetConfig>
      break;
 80047aa:	e7f9      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ac:	6828      	ldr	r0, [r5, #0]
 80047ae:	f7ff fca3 	bl	80040f8 <TIM_OC3_SetConfig>
      break;
 80047b2:	e7f5      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047b4:	6828      	ldr	r0, [r5, #0]
 80047b6:	f7ff fcd7 	bl	8004168 <TIM_OC4_SetConfig>
      break;
 80047ba:	e7f1      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047bc:	6828      	ldr	r0, [r5, #0]
 80047be:	f7ff fcff 	bl	80041c0 <TIM_OC5_SetConfig>
      break;
 80047c2:	e7ed      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 80047c4:	2002      	movs	r0, #2
 80047c6:	e7df      	b.n	8004788 <HAL_TIM_OC_ConfigChannel+0x28>

080047c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80047c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80047ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
{
 80047d0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80047d2:	d079      	beq.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x100>
 80047d4:	2001      	movs	r0, #1
  switch (Channel)
 80047d6:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80047d8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80047dc:	d052      	beq.n	8004884 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80047de:	d808      	bhi.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80047e0:	2a04      	cmp	r2, #4
 80047e2:	d02d      	beq.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x78>
 80047e4:	2a08      	cmp	r2, #8
 80047e6:	d03c      	beq.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80047e8:	b1c2      	cbz	r2, 800481c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 80047ea:	2300      	movs	r3, #0
 80047ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80047f2:	2a10      	cmp	r2, #16
 80047f4:	d057      	beq.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 80047f6:	2a14      	cmp	r2, #20
 80047f8:	d1f7      	bne.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047fa:	6828      	ldr	r0, [r5, #0]
 80047fc:	f7ff fd0c 	bl	8004218 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004800:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004802:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800480c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800481a:	e053      	b.n	80048c4 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800481c:	6828      	ldr	r0, [r5, #0]
 800481e:	f7ff fc2f 	bl	8004080 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004822:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004824:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	f042 0208 	orr.w	r2, r2, #8
 800482c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	f022 0204 	bic.w	r2, r2, #4
 8004834:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2000      	movs	r0, #0
      break;
 800483e:	e7d4      	b.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004840:	6828      	ldr	r0, [r5, #0]
 8004842:	f7ff ff55 	bl	80046f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004846:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004848:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004850:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004860:	e7eb      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	6828      	ldr	r0, [r5, #0]
 8004864:	f7ff fc48 	bl	80040f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004868:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004880:	61da      	str	r2, [r3, #28]
      break;
 8004882:	e7db      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004884:	6828      	ldr	r0, [r5, #0]
 8004886:	f7ff fc6f 	bl	8004168 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048a4:	e7ec      	b.n	8004880 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a6:	6828      	ldr	r0, [r5, #0]
 80048a8:	f7ff fc8a 	bl	80041c0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048ac:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b2:	f042 0208 	orr.w	r2, r2, #8
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
 80048c6:	e7b9      	b.n	800483c <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 80048c8:	2002      	movs	r0, #2
 80048ca:	e791      	b.n	80047f0 <HAL_TIM_PWM_ConfigChannel+0x28>

080048cc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048cc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048ce:	f001 011f 	and.w	r1, r1, #31
{
 80048d2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d4:	2401      	movs	r4, #1
 80048d6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80048d8:	ea23 0304 	bic.w	r3, r3, r4
 80048dc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048de:	6a03      	ldr	r3, [r0, #32]
 80048e0:	408a      	lsls	r2, r1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	6202      	str	r2, [r0, #32]
}
 80048e6:	bd10      	pop	{r4, pc}

080048e8 <HAL_TIM_OC_Start>:
{
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ec:	b929      	cbnz	r1, 80048fa <HAL_TIM_OC_Start+0x12>
 80048ee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d027      	beq.n	8004946 <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 80048f6:	2001      	movs	r0, #1
 80048f8:	e043      	b.n	8004982 <HAL_TIM_OC_Start+0x9a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	2904      	cmp	r1, #4
 80048fc:	d107      	bne.n	800490e <HAL_TIM_OC_Start+0x26>
 80048fe:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004902:	2b01      	cmp	r3, #1
 8004904:	d1f7      	bne.n	80048f6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004906:	2302      	movs	r3, #2
 8004908:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800490c:	e01e      	b.n	800494c <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800490e:	2908      	cmp	r1, #8
 8004910:	d10d      	bne.n	800492e <HAL_TIM_OC_Start+0x46>
 8004912:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004916:	3b01      	subs	r3, #1
 8004918:	bf18      	it	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ea      	bne.n	80048f6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	2908      	cmp	r1, #8
 8004922:	f04f 0302 	mov.w	r3, #2
 8004926:	d12d      	bne.n	8004984 <HAL_TIM_OC_Start+0x9c>
 8004928:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800492c:	e00e      	b.n	800494c <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800492e:	290c      	cmp	r1, #12
 8004930:	d102      	bne.n	8004938 <HAL_TIM_OC_Start+0x50>
 8004932:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004936:	e7ee      	b.n	8004916 <HAL_TIM_OC_Start+0x2e>
 8004938:	2910      	cmp	r1, #16
 800493a:	bf0c      	ite	eq
 800493c:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8004940:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8004944:	e7e7      	b.n	8004916 <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	2302      	movs	r3, #2
 8004948:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	f7ff ffbc 	bl	80048cc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	491a      	ldr	r1, [pc, #104]	; (80049c0 <HAL_TIM_OC_Start+0xd8>)
 8004958:	428b      	cmp	r3, r1
 800495a:	d006      	beq.n	800496a <HAL_TIM_OC_Start+0x82>
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_TIM_OC_Start+0xdc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <HAL_TIM_OC_Start+0x82>
 8004962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004966:	4293      	cmp	r3, r2
 8004968:	d127      	bne.n	80049ba <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_MOE_ENABLE(htim);
 800496a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496c:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 800496e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	d112      	bne.n	800499c <HAL_TIM_OC_Start+0xb4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004976:	6899      	ldr	r1, [r3, #8]
 8004978:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <HAL_TIM_OC_Start+0xe0>)
 800497a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	2a06      	cmp	r2, #6
 800497e:	d114      	bne.n	80049aa <HAL_TIM_OC_Start+0xc2>
  return HAL_OK;
 8004980:	2000      	movs	r0, #0
}
 8004982:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004984:	290c      	cmp	r1, #12
 8004986:	d102      	bne.n	800498e <HAL_TIM_OC_Start+0xa6>
 8004988:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800498c:	e7de      	b.n	800494c <HAL_TIM_OC_Start+0x64>
 800498e:	2910      	cmp	r1, #16
 8004990:	bf0c      	ite	eq
 8004992:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004996:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 800499a:	e7d7      	b.n	800494c <HAL_TIM_OC_Start+0x64>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d0e9      	beq.n	8004976 <HAL_TIM_OC_Start+0x8e>
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <HAL_TIM_OC_Start+0xdc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <HAL_TIM_OC_Start+0xc8>
 80049a8:	e7e5      	b.n	8004976 <HAL_TIM_OC_Start+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80049ae:	d0e7      	beq.n	8004980 <HAL_TIM_OC_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e7e2      	b.n	8004980 <HAL_TIM_OC_Start+0x98>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	e7f2      	b.n	80049a6 <HAL_TIM_OC_Start+0xbe>
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40014000 	.word	0x40014000
 80049c8:	00010007 	.word	0x00010007

080049cc <HAL_TIM_PWM_Start>:
 80049cc:	f7ff bf8c 	b.w	80048e8 <HAL_TIM_OC_Start>

080049d0 <HAL_TIM_OC_Stop>:
{
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049d4:	2200      	movs	r2, #0
 80049d6:	6800      	ldr	r0, [r0, #0]
{
 80049d8:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049da:	f7ff ff77 	bl	80048cc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <HAL_TIM_OC_Stop+0x98>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_OC_Stop+0x26>
 80049e6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <HAL_TIM_OC_Stop+0x26>
 80049ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <HAL_TIM_OC_Stop+0x42>
    __HAL_TIM_MOE_DISABLE(htim);
 80049f6:	6a19      	ldr	r1, [r3, #32]
 80049f8:	f241 1211 	movw	r2, #4369	; 0x1111
 80049fc:	4211      	tst	r1, r2
 80049fe:	d108      	bne.n	8004a12 <HAL_TIM_OC_Stop+0x42>
 8004a00:	6a19      	ldr	r1, [r3, #32]
 8004a02:	f240 4244 	movw	r2, #1092	; 0x444
 8004a06:	4211      	tst	r1, r2
 8004a08:	bf02      	ittt	eq
 8004a0a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004a0c:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004a10:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8004a12:	6a19      	ldr	r1, [r3, #32]
 8004a14:	f241 1211 	movw	r2, #4369	; 0x1111
 8004a18:	4211      	tst	r1, r2
 8004a1a:	d108      	bne.n	8004a2e <HAL_TIM_OC_Stop+0x5e>
 8004a1c:	6a19      	ldr	r1, [r3, #32]
 8004a1e:	f240 4244 	movw	r2, #1092	; 0x444
 8004a22:	4211      	tst	r1, r2
 8004a24:	bf02      	ittt	eq
 8004a26:	681a      	ldreq	r2, [r3, #0]
 8004a28:	f022 0201 	biceq.w	r2, r2, #1
 8004a2c:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	2301      	movs	r3, #1
 8004a30:	b91d      	cbnz	r5, 8004a3a <HAL_TIM_OC_Stop+0x6a>
 8004a32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004a36:	2000      	movs	r0, #0
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	2d04      	cmp	r5, #4
 8004a3c:	d102      	bne.n	8004a44 <HAL_TIM_OC_Stop+0x74>
 8004a3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a42:	e7f8      	b.n	8004a36 <HAL_TIM_OC_Stop+0x66>
 8004a44:	2d08      	cmp	r5, #8
 8004a46:	d102      	bne.n	8004a4e <HAL_TIM_OC_Stop+0x7e>
 8004a48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a4c:	e7f3      	b.n	8004a36 <HAL_TIM_OC_Stop+0x66>
 8004a4e:	2d0c      	cmp	r5, #12
 8004a50:	d102      	bne.n	8004a58 <HAL_TIM_OC_Stop+0x88>
 8004a52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a56:	e7ee      	b.n	8004a36 <HAL_TIM_OC_Stop+0x66>
 8004a58:	2d10      	cmp	r5, #16
 8004a5a:	bf0c      	ite	eq
 8004a5c:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004a60:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004a64:	e7e7      	b.n	8004a36 <HAL_TIM_OC_Stop+0x66>
 8004a66:	bf00      	nop
 8004a68:	40012c00 	.word	0x40012c00

08004a6c <HAL_TIM_PWM_Stop>:
 8004a6c:	f7ff bfb0 	b.w	80049d0 <HAL_TIM_OC_Stop>

08004a70 <HAL_TIM_OC_Start_DMA>:
{
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	460d      	mov	r5, r1
 8004a74:	4604      	mov	r4, r0
 8004a76:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a78:	b955      	cbnz	r5, 8004a90 <HAL_TIM_OC_Start_DMA+0x20>
 8004a7a:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004a7e:	f1a0 0c02 	sub.w	ip, r0, #2
 8004a82:	f1dc 0000 	rsbs	r0, ip, #0
 8004a86:	eb40 000c 	adc.w	r0, r0, ip
 8004a8a:	b1c0      	cbz	r0, 8004abe <HAL_TIM_OC_Start_DMA+0x4e>
    return HAL_BUSY;
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	e01e      	b.n	8004ace <HAL_TIM_OC_Start_DMA+0x5e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a90:	2d04      	cmp	r5, #4
 8004a92:	d102      	bne.n	8004a9a <HAL_TIM_OC_Start_DMA+0x2a>
 8004a94:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004a98:	e7f1      	b.n	8004a7e <HAL_TIM_OC_Start_DMA+0xe>
 8004a9a:	2d08      	cmp	r5, #8
 8004a9c:	d102      	bne.n	8004aa4 <HAL_TIM_OC_Start_DMA+0x34>
 8004a9e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8004aa2:	e7ec      	b.n	8004a7e <HAL_TIM_OC_Start_DMA+0xe>
 8004aa4:	2d0c      	cmp	r5, #12
 8004aa6:	d102      	bne.n	8004aae <HAL_TIM_OC_Start_DMA+0x3e>
 8004aa8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004aac:	e7e7      	b.n	8004a7e <HAL_TIM_OC_Start_DMA+0xe>
 8004aae:	2d10      	cmp	r5, #16
 8004ab0:	d102      	bne.n	8004ab8 <HAL_TIM_OC_Start_DMA+0x48>
 8004ab2:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004ab6:	e7e2      	b.n	8004a7e <HAL_TIM_OC_Start_DMA+0xe>
 8004ab8:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8004abc:	e7df      	b.n	8004a7e <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	b93d      	cbnz	r5, 8004ad0 <HAL_TIM_OC_Start_DMA+0x60>
 8004ac0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004ac4:	1e50      	subs	r0, r2, #1
 8004ac6:	4242      	negs	r2, r0
 8004ac8:	4142      	adcs	r2, r0
 8004aca:	b9c2      	cbnz	r2, 8004afe <HAL_TIM_OC_Start_DMA+0x8e>
      status = HAL_ERROR;
 8004acc:	2001      	movs	r0, #1
}
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ad0:	2d04      	cmp	r5, #4
 8004ad2:	d102      	bne.n	8004ada <HAL_TIM_OC_Start_DMA+0x6a>
 8004ad4:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8004ad8:	e7f4      	b.n	8004ac4 <HAL_TIM_OC_Start_DMA+0x54>
 8004ada:	2d08      	cmp	r5, #8
 8004adc:	d102      	bne.n	8004ae4 <HAL_TIM_OC_Start_DMA+0x74>
 8004ade:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004ae2:	e7ef      	b.n	8004ac4 <HAL_TIM_OC_Start_DMA+0x54>
 8004ae4:	2d0c      	cmp	r5, #12
 8004ae6:	d102      	bne.n	8004aee <HAL_TIM_OC_Start_DMA+0x7e>
 8004ae8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004aec:	e7ea      	b.n	8004ac4 <HAL_TIM_OC_Start_DMA+0x54>
 8004aee:	2d10      	cmp	r5, #16
 8004af0:	bf0c      	ite	eq
 8004af2:	f894 2042 	ldrbeq.w	r2, [r4, #66]	; 0x42
 8004af6:	f894 2043 	ldrbne.w	r2, [r4, #67]	; 0x43
 8004afa:	2a01      	cmp	r2, #1
 8004afc:	d1e6      	bne.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
    if ((pData == NULL) || (Length == 0U))
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d0e4      	beq.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0e2      	beq.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b06:	2202      	movs	r2, #2
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	d130      	bne.n	8004b6e <HAL_TIM_OC_Start_DMA+0xfe>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b12:	4a45      	ldr	r2, [pc, #276]	; (8004c28 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004b14:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b16:	4a45      	ldr	r2, [pc, #276]	; (8004c2c <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004b18:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b1a:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004b1c:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	3234      	adds	r2, #52	; 0x34
 8004b22:	f7fe fa1f 	bl	8002f64 <HAL_DMA_Start_IT>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d1d0      	bne.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	68d3      	ldr	r3, [r2, #12]
 8004b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004b32:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b34:	4629      	mov	r1, r5
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f7ff fec7 	bl	80048cc <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	493c      	ldr	r1, [pc, #240]	; (8004c34 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8004b42:	428b      	cmp	r3, r1
 8004b44:	d006      	beq.n	8004b54 <HAL_TIM_OC_Start_DMA+0xe4>
 8004b46:	4a3c      	ldr	r2, [pc, #240]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_OC_Start_DMA+0xe4>
 8004b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d166      	bne.n	8004c22 <HAL_TIM_OC_Start_DMA+0x1b2>
      __HAL_TIM_MOE_ENABLE(htim);
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b56:	428b      	cmp	r3, r1
      __HAL_TIM_MOE_ENABLE(htim);
 8004b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b5c:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	d151      	bne.n	8004c04 <HAL_TIM_OC_Start_DMA+0x194>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	4a36      	ldr	r2, [pc, #216]	; (8004c3c <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004b64:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b66:	2a06      	cmp	r2, #6
 8004b68:	d153      	bne.n	8004c12 <HAL_TIM_OC_Start_DMA+0x1a2>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e7af      	b.n	8004ace <HAL_TIM_OC_Start_DMA+0x5e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	2d04      	cmp	r5, #4
 8004b70:	d113      	bne.n	8004b9a <HAL_TIM_OC_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b74:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004b7a:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004b7e:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b80:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004b82:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b84:	6822      	ldr	r2, [r4, #0]
 8004b86:	3238      	adds	r2, #56	; 0x38
 8004b88:	f7fe f9ec 	bl	8002f64 <HAL_DMA_Start_IT>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d19d      	bne.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	68d3      	ldr	r3, [r2, #12]
 8004b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b98:	e7cb      	b.n	8004b32 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	2d08      	cmp	r5, #8
 8004b9c:	d113      	bne.n	8004bc6 <HAL_TIM_OC_Start_DMA+0x156>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004ba6:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ba8:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004baa:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004bae:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	323c      	adds	r2, #60	; 0x3c
 8004bb4:	f7fe f9d6 	bl	8002f64 <HAL_DMA_Start_IT>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d187      	bne.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	68d3      	ldr	r3, [r2, #12]
 8004bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bc4:	e7b5      	b.n	8004b32 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc6:	2d0c      	cmp	r5, #12
 8004bc8:	d114      	bne.n	8004bf4 <HAL_TIM_OC_Start_DMA+0x184>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bca:	6b20      	ldr	r0, [r4, #48]	; 0x30
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bcc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bd0:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004bd2:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004bd6:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004bda:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3240      	adds	r2, #64	; 0x40
 8004be0:	f7fe f9c0 	bl	8002f64 <HAL_DMA_Start_IT>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f47f af71 	bne.w	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	68d3      	ldr	r3, [r2, #12]
 8004bee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bf2:	e79e      	b.n	8004b32 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf4:	2d10      	cmp	r5, #16
 8004bf6:	d102      	bne.n	8004bfe <HAL_TIM_OC_Start_DMA+0x18e>
 8004bf8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004bfc:	e766      	b.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
 8004bfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  switch (Channel)
 8004c02:	e763      	b.n	8004acc <HAL_TIM_OC_Start_DMA+0x5c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d0aa      	beq.n	8004b60 <HAL_TIM_OC_Start_DMA+0xf0>
 8004c0a:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d103      	bne.n	8004c18 <HAL_TIM_OC_Start_DMA+0x1a8>
 8004c10:	e7a6      	b.n	8004b60 <HAL_TIM_OC_Start_DMA+0xf0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004c16:	d0a8      	beq.n	8004b6a <HAL_TIM_OC_Start_DMA+0xfa>
      __HAL_TIM_ENABLE(htim);
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e7a3      	b.n	8004b6a <HAL_TIM_OC_Start_DMA+0xfa>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	e7f2      	b.n	8004c0e <HAL_TIM_OC_Start_DMA+0x19e>
 8004c28:	080042fb 	.word	0x080042fb
 8004c2c:	08004367 	.word	0x08004367
 8004c30:	08004503 	.word	0x08004503
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	00010007 	.word	0x00010007

08004c40 <HAL_TIM_OC_Stop_DMA>:
  switch (Channel)
 8004c40:	2908      	cmp	r1, #8
{
 8004c42:	b538      	push	{r3, r4, r5, lr}
 8004c44:	4605      	mov	r5, r0
 8004c46:	460c      	mov	r4, r1
  switch (Channel)
 8004c48:	d050      	beq.n	8004cec <HAL_TIM_OC_Stop_DMA+0xac>
 8004c4a:	d804      	bhi.n	8004c56 <HAL_TIM_OC_Stop_DMA+0x16>
 8004c4c:	b161      	cbz	r1, 8004c68 <HAL_TIM_OC_Stop_DMA+0x28>
 8004c4e:	2904      	cmp	r1, #4
 8004c50:	d045      	beq.n	8004cde <HAL_TIM_OC_Stop_DMA+0x9e>
 8004c52:	2001      	movs	r0, #1
}
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004c56:	290c      	cmp	r1, #12
 8004c58:	d1fb      	bne.n	8004c52 <HAL_TIM_OC_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004c5a:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004c5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004c5e:	68d3      	ldr	r3, [r2, #12]
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c64:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004c66:	e005      	b.n	8004c74 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004c68:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004c6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004c6c:	68d3      	ldr	r3, [r2, #12]
 8004c6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c72:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004c74:	f7fe f9d8 	bl	8003028 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	6828      	ldr	r0, [r5, #0]
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	f7ff fe25 	bl	80048cc <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <HAL_TIM_OC_Stop_DMA+0xe8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <HAL_TIM_OC_Stop_DMA+0x5a>
 8004c8a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_OC_Stop_DMA+0x5a>
 8004c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10d      	bne.n	8004cb6 <HAL_TIM_OC_Stop_DMA+0x76>
      __HAL_TIM_MOE_DISABLE(htim);
 8004c9a:	6a19      	ldr	r1, [r3, #32]
 8004c9c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004ca0:	4211      	tst	r1, r2
 8004ca2:	d108      	bne.n	8004cb6 <HAL_TIM_OC_Stop_DMA+0x76>
 8004ca4:	6a19      	ldr	r1, [r3, #32]
 8004ca6:	f240 4244 	movw	r2, #1092	; 0x444
 8004caa:	4211      	tst	r1, r2
 8004cac:	bf02      	ittt	eq
 8004cae:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004cb0:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004cb4:	645a      	streq	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 8004cb6:	6a19      	ldr	r1, [r3, #32]
 8004cb8:	f241 1211 	movw	r2, #4369	; 0x1111
 8004cbc:	4211      	tst	r1, r2
 8004cbe:	d108      	bne.n	8004cd2 <HAL_TIM_OC_Stop_DMA+0x92>
 8004cc0:	6a19      	ldr	r1, [r3, #32]
 8004cc2:	f240 4244 	movw	r2, #1092	; 0x444
 8004cc6:	4211      	tst	r1, r2
 8004cc8:	bf02      	ittt	eq
 8004cca:	681a      	ldreq	r2, [r3, #0]
 8004ccc:	f022 0201 	biceq.w	r2, r2, #1
 8004cd0:	601a      	streq	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	b98c      	cbnz	r4, 8004cfa <HAL_TIM_OC_Stop_DMA+0xba>
 8004cd6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e7ba      	b.n	8004c54 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004cde:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ce0:	6a80      	ldr	r0, [r0, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004ce2:	68d3      	ldr	r3, [r2, #12]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004cea:	e7c3      	b.n	8004c74 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004cec:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004cee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004cf0:	68d3      	ldr	r3, [r2, #12]
 8004cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004cf8:	e7bc      	b.n	8004c74 <HAL_TIM_OC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004cfa:	2c04      	cmp	r4, #4
 8004cfc:	d102      	bne.n	8004d04 <HAL_TIM_OC_Stop_DMA+0xc4>
 8004cfe:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8004d02:	e7ea      	b.n	8004cda <HAL_TIM_OC_Stop_DMA+0x9a>
 8004d04:	2c08      	cmp	r4, #8
 8004d06:	d102      	bne.n	8004d0e <HAL_TIM_OC_Stop_DMA+0xce>
 8004d08:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004d0c:	e7e5      	b.n	8004cda <HAL_TIM_OC_Stop_DMA+0x9a>
 8004d0e:	2c0c      	cmp	r4, #12
 8004d10:	d102      	bne.n	8004d18 <HAL_TIM_OC_Stop_DMA+0xd8>
 8004d12:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8004d16:	e7e0      	b.n	8004cda <HAL_TIM_OC_Stop_DMA+0x9a>
 8004d18:	2c10      	cmp	r4, #16
 8004d1a:	bf0c      	ite	eq
 8004d1c:	f885 3042 	strbeq.w	r3, [r5, #66]	; 0x42
 8004d20:	f885 3043 	strbne.w	r3, [r5, #67]	; 0x43
 8004d24:	e7d9      	b.n	8004cda <HAL_TIM_OC_Stop_DMA+0x9a>
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f04f 0302 	mov.w	r3, #2
 8004d38:	d023      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d3c:	4d12      	ldr	r5, [pc, #72]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004d42:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d46:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d48:	bf02      	ittt	eq
 8004d4a:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d4c:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d50:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d52:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d58:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004d5c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5e:	d005      	beq.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004d60:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d64:	d002      	beq.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d6c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6e:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d72:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d74:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004d82:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40014000 	.word	0x40014000

08004d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d90:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d034      	beq.n	8004e04 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d9a:	68cb      	ldr	r3, [r1, #12]
 8004d9c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d9e:	4c1a      	ldr	r4, [pc, #104]	; (8004e08 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004da6:	684a      	ldr	r2, [r1, #4]
 8004da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dae:	680a      	ldr	r2, [r1, #0]
 8004db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004db6:	690a      	ldr	r2, [r1, #16]
 8004db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dbe:	694a      	ldr	r2, [r1, #20]
 8004dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dc6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dce:	698a      	ldr	r2, [r1, #24]
 8004dd0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dd8:	6802      	ldr	r2, [r0, #0]
 8004dda:	42a2      	cmp	r2, r4
 8004ddc:	d10c      	bne.n	8004df8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dde:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004de0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004de4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004de8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dea:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004df2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004df6:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004e00:	4618      	mov	r0, r3
}
 8004e02:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004e04:	2002      	movs	r0, #2
 8004e06:	e7fc      	b.n	8004e02 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8004e08:	40012c00 	.word	0x40012c00

08004e0c <HAL_TIMEx_CommutCallback>:
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIMEx_BreakCallback>:
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_Break2Callback>:
 8004e10:	4770      	bx	lr

08004e12 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e12:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	e852 3f00 	ldrex	r3, [r2]
 8004e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004e20:	6802      	ldr	r2, [r0, #0]
 8004e22:	2900      	cmp	r1, #0
 8004e24:	d1f5      	bne.n	8004e12 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	f102 0308 	add.w	r3, r2, #8
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	f102 0c08 	add.w	ip, r2, #8
 8004e36:	e84c 3100 	strex	r1, r3, [ip]
 8004e3a:	2900      	cmp	r1, #0
 8004e3c:	d1f3      	bne.n	8004e26 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d107      	bne.n	8004e54 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e48:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	e842 3100 	strex	r1, r3, [r2]
 8004e50:	2900      	cmp	r1, #0
 8004e52:	d1f7      	bne.n	8004e44 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	2320      	movs	r3, #32
 8004e56:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e5c:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_TxCpltCallback>:
 8004e60:	4770      	bx	lr

08004e62 <HAL_UART_ErrorCallback>:
 8004e62:	4770      	bx	lr

08004e64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e64:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e66:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e6e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e72:	f7ff fff6 	bl	8004e62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e76:	bd08      	pop	{r3, pc}

08004e78 <HAL_UART_AbortReceiveCpltCallback>:
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_UART_AbortReceive_IT>:
{
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	e852 3f00 	ldrex	r3, [r2]
 8004e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f5      	bne.n	8004e80 <HAL_UART_AbortReceive_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	f103 0008 	add.w	r0, r3, #8
 8004ea4:	e840 2100 	strex	r1, r2, [r0]
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d1f3      	bne.n	8004e94 <HAL_UART_AbortReceive_IT+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004eae:	2a01      	cmp	r2, #1
 8004eb0:	d107      	bne.n	8004ec2 <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004eb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	e843 2100 	strex	r1, r2, [r3]
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d1f7      	bne.n	8004eb2 <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004ec8:	d028      	beq.n	8004f1c <HAL_UART_AbortReceive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	f103 0208 	add.w	r2, r3, #8
 8004ece:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f103 0008 	add.w	r0, r3, #8
 8004eda:	e840 2100 	strex	r1, r2, [r0]
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	d1f3      	bne.n	8004eca <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 8004ee2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ee4:	b148      	cbz	r0, 8004efa <HAL_UART_AbortReceive_IT+0x7e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_UART_AbortReceive_IT+0xb4>)
 8004ee8:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eea:	f7fe f89d 	bl	8003028 <HAL_DMA_Abort_IT>
 8004eee:	b110      	cbz	r0, 8004ef6 <HAL_UART_AbortReceive_IT+0x7a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ef2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ef4:	4798      	blx	r3
}
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004efa:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8004efc:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 8004f00:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f02:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f04:	8b1a      	ldrh	r2, [r3, #24]
 8004f06:	b292      	uxth	r2, r2
 8004f08:	f042 0208 	orr.w	r2, r2, #8
 8004f0c:	831a      	strh	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	2320      	movs	r3, #32
 8004f10:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	6620      	str	r0, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff ffaf 	bl	8004e78 <HAL_UART_AbortReceiveCpltCallback>
 8004f1a:	e7ec      	b.n	8004ef6 <HAL_UART_AbortReceive_IT+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f1c:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 8004f1e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 8004f22:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f24:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8004f26:	2320      	movs	r3, #32
 8004f28:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	6622      	str	r2, [r4, #96]	; 0x60
 8004f2c:	e7f2      	b.n	8004f14 <HAL_UART_AbortReceive_IT+0x98>
 8004f2e:	bf00      	nop
 8004f30:	08004f35 	.word	0x08004f35

08004f34 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f34:	6a80      	ldr	r0, [r0, #40]	; 0x28

  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f36:	6802      	ldr	r2, [r0, #0]
{
 8004f38:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8004f3a:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f3c:	230f      	movs	r3, #15
  huart->RxXferCount = 0U;
 8004f3e:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f42:	6213      	str	r3, [r2, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f44:	8b13      	ldrh	r3, [r2, #24]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f043 0308 	orr.w	r3, r3, #8
 8004f4c:	8313      	strh	r3, [r2, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004f54:	f7ff ff90 	bl	8004e78 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f58:	bd08      	pop	{r3, pc}

08004f5a <HAL_UARTEx_RxEventCallback>:
}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f5c:	6803      	ldr	r3, [r0, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f60:	6819      	ldr	r1, [r3, #0]
{
 8004f62:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8004f64:	f640 060f 	movw	r6, #2063	; 0x80f
 8004f68:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f6a:	689d      	ldr	r5, [r3, #8]
{
 8004f6c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004f6e:	d10b      	bne.n	8004f88 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f70:	0696      	lsls	r6, r2, #26
 8004f72:	f140 8088 	bpl.w	8005086 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f76:	068e      	lsls	r6, r1, #26
 8004f78:	f140 8085 	bpl.w	8005086 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8004f7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d07b      	beq.n	800507a <HAL_UART_IRQHandler+0x11e>
}
 8004f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004f86:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f88:	4e95      	ldr	r6, [pc, #596]	; (80051e0 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f8a:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f8e:	400e      	ands	r6, r1
 8004f90:	4306      	orrs	r6, r0
 8004f92:	d078      	beq.n	8005086 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f94:	07d5      	lsls	r5, r2, #31
 8004f96:	d509      	bpl.n	8004fac <HAL_UART_IRQHandler+0x50>
 8004f98:	05ce      	lsls	r6, r1, #23
 8004f9a:	d507      	bpl.n	8004fac <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f9c:	2501      	movs	r5, #1
 8004f9e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004fa4:	f045 0501 	orr.w	r5, r5, #1
 8004fa8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fac:	0795      	lsls	r5, r2, #30
 8004fae:	d508      	bpl.n	8004fc2 <HAL_UART_IRQHandler+0x66>
 8004fb0:	b138      	cbz	r0, 8004fc2 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fb2:	2502      	movs	r5, #2
 8004fb4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004fba:	f045 0504 	orr.w	r5, r5, #4
 8004fbe:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc2:	0756      	lsls	r6, r2, #29
 8004fc4:	d508      	bpl.n	8004fd8 <HAL_UART_IRQHandler+0x7c>
 8004fc6:	b138      	cbz	r0, 8004fd8 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc8:	2504      	movs	r5, #4
 8004fca:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004fd0:	f045 0502 	orr.w	r5, r5, #2
 8004fd4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fd8:	0715      	lsls	r5, r2, #28
 8004fda:	d50b      	bpl.n	8004ff4 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fdc:	f001 0520 	and.w	r5, r1, #32
 8004fe0:	4328      	orrs	r0, r5
 8004fe2:	d007      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe4:	2008      	movs	r0, #8
 8004fe6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fe8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004fec:	f040 0008 	orr.w	r0, r0, #8
 8004ff0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ff4:	0516      	lsls	r6, r2, #20
 8004ff6:	d50a      	bpl.n	800500e <HAL_UART_IRQHandler+0xb2>
 8004ff8:	014d      	lsls	r5, r1, #5
 8004ffa:	d508      	bpl.n	800500e <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005000:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005002:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005006:	f043 0320 	orr.w	r3, r3, #32
 800500a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d031      	beq.n	800507a <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005016:	0690      	lsls	r0, r2, #26
 8005018:	d505      	bpl.n	8005026 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800501a:	068a      	lsls	r2, r1, #26
 800501c:	d503      	bpl.n	8005026 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 800501e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005020:	b10b      	cbz	r3, 8005026 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8005022:	4620      	mov	r0, r4
 8005024:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005026:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005028:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800502c:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800502e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005038:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800503a:	d01f      	beq.n	800507c <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 800503c:	f7ff fee9 	bl	8004e12 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	6893      	ldr	r3, [r2, #8]
 8005044:	065b      	lsls	r3, r3, #25
 8005046:	d515      	bpl.n	8005074 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	f102 0308 	add.w	r3, r2, #8
 800504c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	f102 0008 	add.w	r0, r2, #8
 8005058:	e840 3100 	strex	r1, r3, [r0]
 800505c:	2900      	cmp	r1, #0
 800505e:	d1f3      	bne.n	8005048 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8005060:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005062:	b138      	cbz	r0, 8005074 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005064:	4b5f      	ldr	r3, [pc, #380]	; (80051e4 <HAL_UART_IRQHandler+0x288>)
 8005066:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005068:	f7fd ffde 	bl	8003028 <HAL_DMA_Abort_IT>
 800506c:	b128      	cbz	r0, 800507a <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800506e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005070:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005072:	e786      	b.n	8004f82 <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff fef4 	bl	8004e62 <HAL_UART_ErrorCallback>
}
 800507a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800507c:	f7ff fef1 	bl	8004e62 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8005084:	e7f9      	b.n	800507a <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005086:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005088:	2801      	cmp	r0, #1
 800508a:	d17e      	bne.n	800518a <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800508c:	06d6      	lsls	r6, r2, #27
 800508e:	d57c      	bpl.n	800518a <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005090:	06c8      	lsls	r0, r1, #27
 8005092:	d57a      	bpl.n	800518a <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005094:	2210      	movs	r2, #16
 8005096:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	0651      	lsls	r1, r2, #25
 800509c:	d546      	bpl.n	800512c <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800509e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80050a0:	6811      	ldr	r1, [r2, #0]
 80050a2:	684a      	ldr	r2, [r1, #4]
 80050a4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	d0e7      	beq.n	800507a <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050aa:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80050ae:	4290      	cmp	r0, r2
 80050b0:	d9e3      	bls.n	800507a <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80050b2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050b6:	680a      	ldr	r2, [r1, #0]
 80050b8:	0692      	lsls	r2, r2, #26
 80050ba:	d42d      	bmi.n	8005118 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	e843 2100 	strex	r1, r2, [r3]
 80050c8:	2900      	cmp	r1, #0
 80050ca:	d1f7      	bne.n	80050bc <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	f103 0208 	add.w	r2, r3, #8
 80050d0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	f103 0008 	add.w	r0, r3, #8
 80050dc:	e840 2100 	strex	r1, r2, [r0]
 80050e0:	2900      	cmp	r1, #0
 80050e2:	d1f3      	bne.n	80050cc <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	f103 0008 	add.w	r0, r3, #8
 80050f4:	e840 2100 	strex	r1, r2, [r0]
 80050f8:	2900      	cmp	r1, #0
 80050fa:	d1f3      	bne.n	80050e4 <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 80050fc:	2220      	movs	r2, #32
 80050fe:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	e843 2100 	strex	r1, r2, [r3]
 800510e:	2900      	cmp	r1, #0
 8005110:	d1f7      	bne.n	8005102 <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005112:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005114:	f7fd ff65 	bl	8002fe2 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005118:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800511c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005120:	1ac9      	subs	r1, r1, r3
 8005122:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff ff18 	bl	8004f5a <HAL_UARTEx_RxEventCallback>
 800512a:	e7a6      	b.n	800507a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800512c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8005130:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8005132:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8005136:	b289      	uxth	r1, r1
 8005138:	2900      	cmp	r1, #0
 800513a:	d09e      	beq.n	800507a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005140:	1a89      	subs	r1, r1, r2
 8005142:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005144:	2900      	cmp	r1, #0
 8005146:	d098      	beq.n	800507a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	e843 2000 	strex	r0, r2, [r3]
 8005154:	2800      	cmp	r0, #0
 8005156:	d1f7      	bne.n	8005148 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	f103 0208 	add.w	r2, r3, #8
 800515c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	f103 0508 	add.w	r5, r3, #8
 8005168:	e845 2000 	strex	r0, r2, [r5]
 800516c:	2800      	cmp	r0, #0
 800516e:	d1f3      	bne.n	8005158 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 8005170:	2220      	movs	r2, #32
 8005172:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005174:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	e843 2000 	strex	r0, r2, [r3]
 8005184:	2800      	cmp	r0, #0
 8005186:	d1f7      	bne.n	8005178 <HAL_UART_IRQHandler+0x21c>
 8005188:	e7cc      	b.n	8005124 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800518a:	02d6      	lsls	r6, r2, #11
 800518c:	d509      	bpl.n	80051a2 <HAL_UART_IRQHandler+0x246>
 800518e:	0268      	lsls	r0, r5, #9
 8005190:	d507      	bpl.n	80051a2 <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005196:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800519e:	f000 bbc9 	b.w	8005934 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051a2:	0616      	lsls	r6, r2, #24
 80051a4:	d507      	bpl.n	80051b6 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051a6:	060d      	lsls	r5, r1, #24
 80051a8:	d505      	bpl.n	80051b6 <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 80051aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f43f af64 	beq.w	800507a <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80051b2:	4620      	mov	r0, r4
 80051b4:	e6e5      	b.n	8004f82 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051b6:	0650      	lsls	r0, r2, #25
 80051b8:	f57f af5f 	bpl.w	800507a <HAL_UART_IRQHandler+0x11e>
 80051bc:	064a      	lsls	r2, r1, #25
 80051be:	f57f af5c 	bpl.w	800507a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	e843 2100 	strex	r1, r2, [r3]
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d1f7      	bne.n	80051c2 <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d2:	2320      	movs	r3, #32
 80051d4:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051d6:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fe41 	bl	8004e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051de:	e74c      	b.n	800507a <HAL_UART_IRQHandler+0x11e>
 80051e0:	04000120 	.word	0x04000120
 80051e4:	08004e65 	.word	0x08004e65

080051e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051e8:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ea:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051ec:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ee:	2b22      	cmp	r3, #34	; 0x22
 80051f0:	d144      	bne.n	800527c <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051f4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80051f8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80051fa:	400b      	ands	r3, r1
 80051fc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80051fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005200:	3301      	adds	r3, #1
 8005202:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005204:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005208:	3b01      	subs	r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005210:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005214:	b29b      	uxth	r3, r3
 8005216:	bb6b      	cbnz	r3, 8005274 <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005218:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	e852 3f00 	ldrex	r3, [r2]
 800521e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005226:	6803      	ldr	r3, [r0, #0]
 8005228:	2900      	cmp	r1, #0
 800522a:	d1f5      	bne.n	8005218 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	f103 0208 	add.w	r2, r3, #8
 8005230:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005234:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	f103 0c08 	add.w	ip, r3, #8
 800523c:	e84c 2100 	strex	r1, r2, [ip]
 8005240:	2900      	cmp	r1, #0
 8005242:	d1f3      	bne.n	800522c <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005244:	2220      	movs	r2, #32
 8005246:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800524a:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	2a01      	cmp	r2, #1
 800524e:	d112      	bne.n	8005276 <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005256:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	e843 2100 	strex	r1, r2, [r3]
 800525e:	2900      	cmp	r1, #0
 8005260:	d1f7      	bne.n	8005252 <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005262:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005264:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005268:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800526a:	bf44      	itt	mi
 800526c:	2210      	movmi	r2, #16
 800526e:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005270:	f7ff fe73 	bl	8004f5a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005274:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005276:	f7fc fa69 	bl	800174c <HAL_UART_RxCpltCallback>
 800527a:	e7fb      	b.n	8005274 <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800527c:	8b13      	ldrh	r3, [r2, #24]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f043 0308 	orr.w	r3, r3, #8
 8005284:	8313      	strh	r3, [r2, #24]
}
 8005286:	e7f5      	b.n	8005274 <UART_RxISR_8BIT+0x8c>

08005288 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005288:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800528a:	2a22      	cmp	r2, #34	; 0x22
{
 800528c:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800528e:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005290:	d141      	bne.n	8005316 <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005292:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005294:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8005298:	4011      	ands	r1, r2
 800529a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800529c:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80052a0:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052a2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80052a6:	3a01      	subs	r2, #1
 80052a8:	b292      	uxth	r2, r2
 80052aa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052ae:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80052b2:	b292      	uxth	r2, r2
 80052b4:	bb5a      	cbnz	r2, 800530e <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	e843 2100 	strex	r1, r2, [r3]
 80052c2:	2900      	cmp	r1, #0
 80052c4:	d1f7      	bne.n	80052b6 <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	f103 0208 	add.w	r2, r3, #8
 80052ca:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	f103 0c08 	add.w	ip, r3, #8
 80052d6:	e84c 2100 	strex	r1, r2, [ip]
 80052da:	2900      	cmp	r1, #0
 80052dc:	d1f3      	bne.n	80052c6 <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052de:	2220      	movs	r2, #32
 80052e0:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e2:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80052e4:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e6:	2a01      	cmp	r2, #1
 80052e8:	d112      	bne.n	8005310 <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	e843 2100 	strex	r1, r2, [r3]
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d1f7      	bne.n	80052ec <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052fc:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052fe:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005302:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005304:	bf44      	itt	mi
 8005306:	2210      	movmi	r2, #16
 8005308:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530a:	f7ff fe26 	bl	8004f5a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800530e:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005310:	f7fc fa1c 	bl	800174c <HAL_UART_RxCpltCallback>
 8005314:	e7fb      	b.n	800530e <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005316:	8b1a      	ldrh	r2, [r3, #24]
 8005318:	b292      	uxth	r2, r2
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	831a      	strh	r2, [r3, #24]
}
 8005320:	e7f5      	b.n	800530e <UART_RxISR_16BIT+0x86>
	...

08005324 <UART_SetConfig>:
{
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005328:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800532a:	6921      	ldr	r1, [r4, #16]
 800532c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005330:	69c0      	ldr	r0, [r0, #28]
 8005332:	430a      	orrs	r2, r1
 8005334:	6961      	ldr	r1, [r4, #20]
 8005336:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005338:	4979      	ldr	r1, [pc, #484]	; (8005520 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800533a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800533c:	4029      	ands	r1, r5
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	68e1      	ldr	r1, [r4, #12]
 8005346:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534e:	4a75      	ldr	r2, [pc, #468]	; (8005524 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005350:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005352:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005354:	bf1c      	itt	ne
 8005356:	6a22      	ldrne	r2, [r4, #32]
 8005358:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005364:	4a70      	ldr	r2, [pc, #448]	; (8005528 <UART_SetConfig+0x204>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d117      	bne.n	800539a <UART_SetConfig+0x76>
 800536a:	4b70      	ldr	r3, [pc, #448]	; (800552c <UART_SetConfig+0x208>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	3b01      	subs	r3, #1
 8005376:	2b02      	cmp	r3, #2
 8005378:	f200 80b0 	bhi.w	80054dc <UART_SetConfig+0x1b8>
 800537c:	4a6c      	ldr	r2, [pc, #432]	; (8005530 <UART_SetConfig+0x20c>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005380:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005384:	f040 808b 	bne.w	800549e <UART_SetConfig+0x17a>
    switch (clocksource)
 8005388:	2b08      	cmp	r3, #8
 800538a:	d822      	bhi.n	80053d2 <UART_SetConfig+0xae>
 800538c:	e8df f003 	tbb	[pc, r3]
 8005390:	2185a969 	.word	0x2185a969
 8005394:	21212182 	.word	0x21212182
 8005398:	6d          	.byte	0x6d
 8005399:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539a:	4a66      	ldr	r2, [pc, #408]	; (8005534 <UART_SetConfig+0x210>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d106      	bne.n	80053ae <UART_SetConfig+0x8a>
 80053a0:	4b62      	ldr	r3, [pc, #392]	; (800552c <UART_SetConfig+0x208>)
 80053a2:	4a65      	ldr	r2, [pc, #404]	; (8005538 <UART_SetConfig+0x214>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f003 030c 	and.w	r3, r3, #12
 80053ac:	e7e7      	b.n	800537e <UART_SetConfig+0x5a>
 80053ae:	4a63      	ldr	r2, [pc, #396]	; (800553c <UART_SetConfig+0x218>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d118      	bne.n	80053e6 <UART_SetConfig+0xc2>
 80053b4:	4b5d      	ldr	r3, [pc, #372]	; (800552c <UART_SetConfig+0x208>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f000 8087 	beq.w	80054d2 <UART_SetConfig+0x1ae>
 80053c4:	d807      	bhi.n	80053d6 <UART_SetConfig+0xb2>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8094 	beq.w	80054f4 <UART_SetConfig+0x1d0>
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	f000 808b 	beq.w	80054e8 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d2:	2001      	movs	r0, #1
 80053d4:	e024      	b.n	8005420 <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d1fb      	bne.n	80053d2 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80053de:	d044      	beq.n	800546a <UART_SetConfig+0x146>
 80053e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053e4:	e08d      	b.n	8005502 <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e6:	4a4f      	ldr	r2, [pc, #316]	; (8005524 <UART_SetConfig+0x200>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d1f2      	bne.n	80053d2 <UART_SetConfig+0xae>
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <UART_SetConfig+0x208>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d015      	beq.n	8005428 <UART_SetConfig+0x104>
 80053fc:	d806      	bhi.n	800540c <UART_SetConfig+0xe8>
 80053fe:	b15b      	cbz	r3, 8005418 <UART_SetConfig+0xf4>
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d1e5      	bne.n	80053d2 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fe f945 	bl	8003694 <HAL_RCC_GetSysClockFreq>
        break;
 800540a:	e007      	b.n	800541c <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005410:	d1df      	bne.n	80053d2 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8005412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005416:	e008      	b.n	800542a <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fe fd10 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800541c:	b928      	cbnz	r0, 800542a <UART_SetConfig+0x106>
 800541e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005420:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005422:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8005426:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4845      	ldr	r0, [pc, #276]	; (8005540 <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800542a:	6862      	ldr	r2, [r4, #4]
 800542c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005430:	4283      	cmp	r3, r0
 8005432:	d8ce      	bhi.n	80053d2 <UART_SetConfig+0xae>
 8005434:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005438:	d8cb      	bhi.n	80053d2 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800543a:	0851      	lsrs	r1, r2, #1
 800543c:	2500      	movs	r5, #0
 800543e:	468c      	mov	ip, r1
 8005440:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005444:	4629      	mov	r1, r5
 8005446:	fbe0 c106 	umlal	ip, r1, r0, r6
 800544a:	462b      	mov	r3, r5
 800544c:	4660      	mov	r0, ip
 800544e:	f7fb f95b 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005452:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <UART_SetConfig+0x220>)
 8005454:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005458:	429a      	cmp	r2, r3
 800545a:	d8ba      	bhi.n	80053d2 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	60d8      	str	r0, [r3, #12]
 8005460:	e7dd      	b.n	800541e <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005462:	f7fe fceb 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005466:	2800      	cmp	r0, #0
 8005468:	d0d9      	beq.n	800541e <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	0853      	lsrs	r3, r2, #1
 800546e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005472:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005476:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547a:	f1a0 0210 	sub.w	r2, r0, #16
 800547e:	429a      	cmp	r2, r3
 8005480:	d8a7      	bhi.n	80053d2 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005482:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005486:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005488:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800548a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800548e:	4318      	orrs	r0, r3
 8005490:	60d0      	str	r0, [r2, #12]
 8005492:	e7c4      	b.n	800541e <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005494:	f7fe f8fe 	bl	8003694 <HAL_RCC_GetSysClockFreq>
        break;
 8005498:	e7e5      	b.n	8005466 <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 800549a:	4829      	ldr	r0, [pc, #164]	; (8005540 <UART_SetConfig+0x21c>)
 800549c:	e7e5      	b.n	800546a <UART_SetConfig+0x146>
    switch (clocksource)
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d897      	bhi.n	80053d2 <UART_SetConfig+0xae>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x184>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054fb 	.word	0x080054fb
 80054ac:	080054cd 	.word	0x080054cd
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080053d3 	.word	0x080053d3
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080053d3 	.word	0x080053d3
 80054c0:	080053d3 	.word	0x080053d3
 80054c4:	080053d3 	.word	0x080053d3
 80054c8:	080053e1 	.word	0x080053e1
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fcc8 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
        break;
 80054d0:	e015      	b.n	80054fe <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054d6:	d0e0      	beq.n	800549a <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4819      	ldr	r0, [pc, #100]	; (8005540 <UART_SetConfig+0x21c>)
 80054da:	e012      	b.n	8005502 <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054e0:	d1f4      	bne.n	80054cc <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e2:	f7fe fcbd 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
        break;
 80054e6:	e7be      	b.n	8005466 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054ec:	d0d2      	beq.n	8005494 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe f8d1 	bl	8003694 <HAL_RCC_GetSysClockFreq>
        break;
 80054f2:	e004      	b.n	80054fe <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054f8:	d0b3      	beq.n	8005462 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fa:	f7fe fc9f 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054fe:	2800      	cmp	r0, #0
 8005500:	d08d      	beq.n	800541e <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005508:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005510:	f1a3 0110 	sub.w	r1, r3, #16
 8005514:	4291      	cmp	r1, r2
 8005516:	f63f af5c 	bhi.w	80053d2 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	60d3      	str	r3, [r2, #12]
 800551e:	e77e      	b.n	800541e <UART_SetConfig+0xfa>
 8005520:	efff69f3 	.word	0xefff69f3
 8005524:	40008000 	.word	0x40008000
 8005528:	40013800 	.word	0x40013800
 800552c:	40021000 	.word	0x40021000
 8005530:	08007cfc 	.word	0x08007cfc
 8005534:	40004400 	.word	0x40004400
 8005538:	08007cff 	.word	0x08007cff
 800553c:	40004800 	.word	0x40004800
 8005540:	00f42400 	.word	0x00f42400
 8005544:	000ffcff 	.word	0x000ffcff

08005548 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005548:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800554a:	07da      	lsls	r2, r3, #31
{
 800554c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800554e:	d506      	bpl.n	800555e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005550:	6801      	ldr	r1, [r0, #0]
 8005552:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005554:	684a      	ldr	r2, [r1, #4]
 8005556:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800555a:	4322      	orrs	r2, r4
 800555c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800555e:	079c      	lsls	r4, r3, #30
 8005560:	d506      	bpl.n	8005570 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005562:	6801      	ldr	r1, [r0, #0]
 8005564:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005566:	684a      	ldr	r2, [r1, #4]
 8005568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800556c:	4322      	orrs	r2, r4
 800556e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005570:	0759      	lsls	r1, r3, #29
 8005572:	d506      	bpl.n	8005582 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005574:	6801      	ldr	r1, [r0, #0]
 8005576:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005578:	684a      	ldr	r2, [r1, #4]
 800557a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800557e:	4322      	orrs	r2, r4
 8005580:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005582:	071a      	lsls	r2, r3, #28
 8005584:	d506      	bpl.n	8005594 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	6801      	ldr	r1, [r0, #0]
 8005588:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800558a:	684a      	ldr	r2, [r1, #4]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005590:	4322      	orrs	r2, r4
 8005592:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005594:	06dc      	lsls	r4, r3, #27
 8005596:	d506      	bpl.n	80055a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800559c:	688a      	ldr	r2, [r1, #8]
 800559e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055a2:	4322      	orrs	r2, r4
 80055a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055a6:	0699      	lsls	r1, r3, #26
 80055a8:	d506      	bpl.n	80055b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055aa:	6801      	ldr	r1, [r0, #0]
 80055ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80055ae:	688a      	ldr	r2, [r1, #8]
 80055b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b4:	4322      	orrs	r2, r4
 80055b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b8:	065a      	lsls	r2, r3, #25
 80055ba:	d50f      	bpl.n	80055dc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055bc:	6801      	ldr	r1, [r0, #0]
 80055be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80055c0:	684a      	ldr	r2, [r1, #4]
 80055c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80055c6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ce:	d105      	bne.n	80055dc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d0:	684a      	ldr	r2, [r1, #4]
 80055d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80055d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80055d8:	4322      	orrs	r2, r4
 80055da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	d506      	bpl.n	80055ee <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e0:	6802      	ldr	r2, [r0, #0]
 80055e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80055e4:	6853      	ldr	r3, [r2, #4]
 80055e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6053      	str	r3, [r2, #4]
}
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <UART_WaitOnFlagUntilTimeout>:
{
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80055f8:	4604      	mov	r4, r0
 80055fa:	460e      	mov	r6, r1
 80055fc:	4615      	mov	r5, r2
 80055fe:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	69d3      	ldr	r3, [r2, #28]
 8005604:	ea36 0303 	bics.w	r3, r6, r3
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	42ab      	cmp	r3, r5
 8005610:	d001      	beq.n	8005616 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005612:	2000      	movs	r0, #0
 8005614:	e025      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8005616:	f1b8 3fff 	cmp.w	r8, #4294967295
 800561a:	d0f2      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fc fe4a 	bl	80022b4 <HAL_GetTick>
 8005620:	1bc0      	subs	r0, r0, r7
 8005622:	4540      	cmp	r0, r8
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	d802      	bhi.n	800562e <UART_WaitOnFlagUntilTimeout+0x3e>
 8005628:	f1b8 0f00 	cmp.w	r8, #0
 800562c:	d11b      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	e840 3200 	strex	r2, r3, [r0]
 800563a:	2a00      	cmp	r2, #0
 800563c:	d1f7      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	f100 0308 	add.w	r3, r0, #8
 8005642:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	f100 0108 	add.w	r1, r0, #8
 800564e:	e841 3200 	strex	r2, r3, [r1]
 8005652:	2a00      	cmp	r2, #0
 8005654:	d1f3      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005656:	2320      	movs	r3, #32
 8005658:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800565a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800565c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005660:	2003      	movs	r0, #3
}
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005666:	6803      	ldr	r3, [r0, #0]
 8005668:	075a      	lsls	r2, r3, #29
 800566a:	d5c9      	bpl.n	8005600 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566c:	69c3      	ldr	r3, [r0, #28]
 800566e:	051b      	lsls	r3, r3, #20
 8005670:	d5c6      	bpl.n	8005600 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005676:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	e840 3200 	strex	r2, r3, [r0]
 8005684:	2a00      	cmp	r2, #0
 8005686:	d1f7      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	f100 0308 	add.w	r3, r0, #8
 800568c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	f100 0108 	add.w	r1, r0, #8
 8005698:	e841 3200 	strex	r2, r3, [r1]
 800569c:	2a00      	cmp	r2, #0
 800569e:	d1f3      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80056a0:	2320      	movs	r3, #32
 80056a2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056a4:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80056aa:	e7d7      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0x6c>

080056ac <HAL_UART_Transmit>:
{
 80056ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80056b0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80056b4:	2b20      	cmp	r3, #32
{
 80056b6:	4604      	mov	r4, r0
 80056b8:	460e      	mov	r6, r1
 80056ba:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80056bc:	d14e      	bne.n	800575c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80056be:	2900      	cmp	r1, #0
 80056c0:	d04a      	beq.n	8005758 <HAL_UART_Transmit+0xac>
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d048      	beq.n	8005758 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80056c6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d046      	beq.n	800575c <HAL_UART_Transmit+0xb0>
 80056ce:	2301      	movs	r3, #1
 80056d0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056dc:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80056de:	f7fc fde9 	bl	80022b4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e2:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80056e4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80056ec:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80056ee:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f2:	d103      	bne.n	80056fc <HAL_UART_Transmit+0x50>
 80056f4:	6922      	ldr	r2, [r4, #16]
 80056f6:	b90a      	cbnz	r2, 80056fc <HAL_UART_Transmit+0x50>
 80056f8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80056fa:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80056fc:	2200      	movs	r2, #0
 80056fe:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005702:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800570a:	b292      	uxth	r2, r2
 800570c:	b93a      	cbnz	r2, 800571e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	2140      	movs	r1, #64	; 0x40
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff ff6d 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8005716:	b950      	cbnz	r0, 800572e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005718:	2320      	movs	r3, #32
 800571a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800571c:	e008      	b.n	8005730 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	2200      	movs	r2, #0
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	4620      	mov	r0, r4
 8005724:	9303      	str	r3, [sp, #12]
 8005726:	f7ff ff63 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	b118      	cbz	r0, 8005736 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 800572e:	2003      	movs	r0, #3
}
 8005730:	b004      	add	sp, #16
 8005732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005736:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005738:	b95e      	cbnz	r6, 8005752 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800573a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800573e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005744:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005748:	3a01      	subs	r2, #1
 800574a:	b292      	uxth	r2, r2
 800574c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005750:	e7d7      	b.n	8005702 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005752:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005756:	e7f4      	b.n	8005742 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005758:	2001      	movs	r0, #1
 800575a:	e7e9      	b.n	8005730 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800575c:	2002      	movs	r0, #2
 800575e:	e7e7      	b.n	8005730 <HAL_UART_Transmit+0x84>

08005760 <UART_CheckIdleState>:
{
 8005760:	b530      	push	{r4, r5, lr}
 8005762:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	2500      	movs	r5, #0
{
 8005766:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800576c:	f7fc fda2 	bl	80022b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005776:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005778:	d415      	bmi.n	80057a6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	0752      	lsls	r2, r2, #29
 8005780:	d509      	bpl.n	8005796 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005782:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005786:	9200      	str	r2, [sp, #0]
 8005788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800578c:	2200      	movs	r2, #0
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff ff2e 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8005794:	b9a0      	cbnz	r0, 80057c0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005796:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800579a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800579c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80057a4:	e00d      	b.n	80057c2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80057aa:	9200      	str	r2, [sp, #0]
 80057ac:	9003      	str	r0, [sp, #12]
 80057ae:	462a      	mov	r2, r5
 80057b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff ff1b 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	2800      	cmp	r0, #0
 80057be:	d0dc      	beq.n	800577a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80057c0:	2003      	movs	r0, #3
}
 80057c2:	b005      	add	sp, #20
 80057c4:	bd30      	pop	{r4, r5, pc}

080057c6 <HAL_UART_Init>:
{
 80057c6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80057c8:	4604      	mov	r4, r0
 80057ca:	b340      	cbz	r0, 800581e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80057cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80057ce:	b91b      	cbnz	r3, 80057d8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80057d0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80057d4:	f7fc fbee 	bl	8001fb4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80057d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80057da:	2324      	movs	r3, #36	; 0x24
 80057dc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fd9c 	bl	8005324 <UART_SetConfig>
 80057ec:	2801      	cmp	r0, #1
 80057ee:	d016      	beq.n	800581e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057f2:	b113      	cbz	r3, 80057fa <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff fea7 	bl	8005548 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005812:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800581a:	f7ff bfa1 	b.w	8005760 <UART_CheckIdleState>
}
 800581e:	2001      	movs	r0, #1
 8005820:	bd10      	pop	{r4, pc}
	...

08005824 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8005824:	6883      	ldr	r3, [r0, #8]
{
 8005826:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 800582c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8005830:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005834:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 8005838:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800583a:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800583c:	d132      	bne.n	80058a4 <UART_Start_Receive_IT+0x80>
 800583e:	6903      	ldr	r3, [r0, #16]
 8005840:	bb73      	cbnz	r3, 80058a0 <UART_Start_Receive_IT+0x7c>
 8005842:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005846:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005850:	2322      	movs	r3, #34	; 0x22
 8005852:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005854:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	f102 0308 	add.w	r3, r2, #8
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	3208      	adds	r2, #8
 8005864:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005868:	6802      	ldr	r2, [r0, #0]
 800586a:	2900      	cmp	r1, #0
 800586c:	d1f2      	bne.n	8005854 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	6883      	ldr	r3, [r0, #8]
 8005870:	6901      	ldr	r1, [r0, #16]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d126      	bne.n	80058c6 <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8005878:	4b18      	ldr	r3, [pc, #96]	; (80058dc <UART_Start_Receive_IT+0xb8>)
 800587a:	4c19      	ldr	r4, [pc, #100]	; (80058e0 <UART_Start_Receive_IT+0xbc>)
 800587c:	2900      	cmp	r1, #0
 800587e:	bf18      	it	ne
 8005880:	4623      	movne	r3, r4
 8005882:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005884:	2300      	movs	r3, #0
 8005886:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800588a:	b1f1      	cbz	r1, 80058ca <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005890:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	e842 3100 	strex	r1, r3, [r2]
 8005898:	2900      	cmp	r1, #0
 800589a:	d1f7      	bne.n	800588c <UART_Start_Receive_IT+0x68>
}
 800589c:	2000      	movs	r0, #0
 800589e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80058a0:	23ff      	movs	r3, #255	; 0xff
 80058a2:	e7d0      	b.n	8005846 <UART_Start_Receive_IT+0x22>
 80058a4:	b923      	cbnz	r3, 80058b0 <UART_Start_Receive_IT+0x8c>
 80058a6:	6903      	ldr	r3, [r0, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f9      	beq.n	80058a0 <UART_Start_Receive_IT+0x7c>
 80058ac:	237f      	movs	r3, #127	; 0x7f
 80058ae:	e7ca      	b.n	8005846 <UART_Start_Receive_IT+0x22>
 80058b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b4:	d104      	bne.n	80058c0 <UART_Start_Receive_IT+0x9c>
 80058b6:	6903      	ldr	r3, [r0, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f7      	beq.n	80058ac <UART_Start_Receive_IT+0x88>
 80058bc:	233f      	movs	r3, #63	; 0x3f
 80058be:	e7c2      	b.n	8005846 <UART_Start_Receive_IT+0x22>
 80058c0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80058c4:	e7c1      	b.n	800584a <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <UART_Start_Receive_IT+0xbc>)
 80058c8:	e7db      	b.n	8005882 <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058ce:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	e842 3100 	strex	r1, r3, [r2]
 80058d6:	2900      	cmp	r1, #0
 80058d8:	d1f7      	bne.n	80058ca <UART_Start_Receive_IT+0xa6>
 80058da:	e7df      	b.n	800589c <UART_Start_Receive_IT+0x78>
 80058dc:	08005289 	.word	0x08005289
 80058e0:	080051e9 	.word	0x080051e9

080058e4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80058e6:	2b20      	cmp	r3, #32
{
 80058e8:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ea:	d11f      	bne.n	800592c <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80058ec:	b1d9      	cbz	r1, 8005926 <HAL_UART_Receive_IT+0x42>
 80058ee:	b1d2      	cbz	r2, 8005926 <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 80058f0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d019      	beq.n	800592c <HAL_UART_Receive_IT+0x48>
 80058f8:	2301      	movs	r3, #1
 80058fa:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005900:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <HAL_UART_Receive_IT+0x4c>)
 8005906:	429c      	cmp	r4, r3
 8005908:	d00a      	beq.n	8005920 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	d507      	bpl.n	8005920 <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	e844 3500 	strex	r5, r3, [r4]
 800591c:	2d00      	cmp	r5, #0
 800591e:	d1f7      	bne.n	8005910 <HAL_UART_Receive_IT+0x2c>
}
 8005920:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005922:	f7ff bf7f 	b.w	8005824 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8005926:	2001      	movs	r0, #1
}
 8005928:	bc30      	pop	{r4, r5}
 800592a:	4770      	bx	lr
    return HAL_BUSY;
 800592c:	2002      	movs	r0, #2
 800592e:	e7fb      	b.n	8005928 <HAL_UART_Receive_IT+0x44>
 8005930:	40008000 	.word	0x40008000

08005934 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005934:	4770      	bx	lr
	...

08005938 <__errno>:
 8005938:	4b01      	ldr	r3, [pc, #4]	; (8005940 <__errno+0x8>)
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000040 	.word	0x20000040

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4d0d      	ldr	r5, [pc, #52]	; (800597c <__libc_init_array+0x38>)
 8005948:	4c0d      	ldr	r4, [pc, #52]	; (8005980 <__libc_init_array+0x3c>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	2600      	movs	r6, #0
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	4d0b      	ldr	r5, [pc, #44]	; (8005984 <__libc_init_array+0x40>)
 8005956:	4c0c      	ldr	r4, [pc, #48]	; (8005988 <__libc_init_array+0x44>)
 8005958:	f001 ff36 	bl	80077c8 <_init>
 800595c:	1b64      	subs	r4, r4, r5
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	2600      	movs	r6, #0
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08007ec8 	.word	0x08007ec8
 8005980:	08007ec8 	.word	0x08007ec8
 8005984:	08007ec8 	.word	0x08007ec8
 8005988:	08007ecc 	.word	0x08007ecc

0800598c <memset>:
 800598c:	4402      	add	r2, r0
 800598e:	4603      	mov	r3, r0
 8005990:	4293      	cmp	r3, r2
 8005992:	d100      	bne.n	8005996 <memset+0xa>
 8005994:	4770      	bx	lr
 8005996:	f803 1b01 	strb.w	r1, [r3], #1
 800599a:	e7f9      	b.n	8005990 <memset+0x4>

0800599c <iprintf>:
 800599c:	b40f      	push	{r0, r1, r2, r3}
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <iprintf+0x2c>)
 80059a0:	b513      	push	{r0, r1, r4, lr}
 80059a2:	681c      	ldr	r4, [r3, #0]
 80059a4:	b124      	cbz	r4, 80059b0 <iprintf+0x14>
 80059a6:	69a3      	ldr	r3, [r4, #24]
 80059a8:	b913      	cbnz	r3, 80059b0 <iprintf+0x14>
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fb44 	bl	8006038 <__sinit>
 80059b0:	ab05      	add	r3, sp, #20
 80059b2:	9a04      	ldr	r2, [sp, #16]
 80059b4:	68a1      	ldr	r1, [r4, #8]
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	4620      	mov	r0, r4
 80059ba:	f001 f88d 	bl	8006ad8 <_vfiprintf_r>
 80059be:	b002      	add	sp, #8
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c4:	b004      	add	sp, #16
 80059c6:	4770      	bx	lr
 80059c8:	20000040 	.word	0x20000040

080059cc <putchar>:
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <putchar+0x28>)
 80059ce:	b513      	push	{r0, r1, r4, lr}
 80059d0:	681c      	ldr	r4, [r3, #0]
 80059d2:	4601      	mov	r1, r0
 80059d4:	b134      	cbz	r4, 80059e4 <putchar+0x18>
 80059d6:	69a3      	ldr	r3, [r4, #24]
 80059d8:	b923      	cbnz	r3, 80059e4 <putchar+0x18>
 80059da:	9001      	str	r0, [sp, #4]
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 fb2b 	bl	8006038 <__sinit>
 80059e2:	9901      	ldr	r1, [sp, #4]
 80059e4:	68a2      	ldr	r2, [r4, #8]
 80059e6:	4620      	mov	r0, r4
 80059e8:	b002      	add	sp, #8
 80059ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ee:	f001 bc89 	b.w	8007304 <_putc_r>
 80059f2:	bf00      	nop
 80059f4:	20000040 	.word	0x20000040

080059f8 <_puts_r>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	460e      	mov	r6, r1
 80059fc:	4605      	mov	r5, r0
 80059fe:	b118      	cbz	r0, 8005a08 <_puts_r+0x10>
 8005a00:	6983      	ldr	r3, [r0, #24]
 8005a02:	b90b      	cbnz	r3, 8005a08 <_puts_r+0x10>
 8005a04:	f000 fb18 	bl	8006038 <__sinit>
 8005a08:	69ab      	ldr	r3, [r5, #24]
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	b913      	cbnz	r3, 8005a14 <_puts_r+0x1c>
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fb12 	bl	8006038 <__sinit>
 8005a14:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <_puts_r+0xd0>)
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d120      	bne.n	8005a5c <_puts_r+0x64>
 8005a1a:	686c      	ldr	r4, [r5, #4]
 8005a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a1e:	07db      	lsls	r3, r3, #31
 8005a20:	d405      	bmi.n	8005a2e <_puts_r+0x36>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	0598      	lsls	r0, r3, #22
 8005a26:	d402      	bmi.n	8005a2e <_puts_r+0x36>
 8005a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2a:	f000 fba3 	bl	8006174 <__retarget_lock_acquire_recursive>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	0719      	lsls	r1, r3, #28
 8005a32:	d51d      	bpl.n	8005a70 <_puts_r+0x78>
 8005a34:	6923      	ldr	r3, [r4, #16]
 8005a36:	b1db      	cbz	r3, 8005a70 <_puts_r+0x78>
 8005a38:	3e01      	subs	r6, #1
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a40:	3b01      	subs	r3, #1
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	bb39      	cbnz	r1, 8005a96 <_puts_r+0x9e>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da38      	bge.n	8005abc <_puts_r+0xc4>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	210a      	movs	r1, #10
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f8f6 	bl	8005c40 <__swbuf_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d011      	beq.n	8005a7c <_puts_r+0x84>
 8005a58:	250a      	movs	r5, #10
 8005a5a:	e011      	b.n	8005a80 <_puts_r+0x88>
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <_puts_r+0xd4>)
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	d101      	bne.n	8005a66 <_puts_r+0x6e>
 8005a62:	68ac      	ldr	r4, [r5, #8]
 8005a64:	e7da      	b.n	8005a1c <_puts_r+0x24>
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <_puts_r+0xd8>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	bf08      	it	eq
 8005a6c:	68ec      	ldreq	r4, [r5, #12]
 8005a6e:	e7d5      	b.n	8005a1c <_puts_r+0x24>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f948 	bl	8005d08 <__swsetup_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d0dd      	beq.n	8005a38 <_puts_r+0x40>
 8005a7c:	f04f 35ff 	mov.w	r5, #4294967295
 8005a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a82:	07da      	lsls	r2, r3, #31
 8005a84:	d405      	bmi.n	8005a92 <_puts_r+0x9a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	d402      	bmi.n	8005a92 <_puts_r+0x9a>
 8005a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8e:	f000 fb72 	bl	8006176 <__retarget_lock_release_recursive>
 8005a92:	4628      	mov	r0, r5
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da04      	bge.n	8005aa4 <_puts_r+0xac>
 8005a9a:	69a2      	ldr	r2, [r4, #24]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	dc06      	bgt.n	8005aae <_puts_r+0xb6>
 8005aa0:	290a      	cmp	r1, #10
 8005aa2:	d004      	beq.n	8005aae <_puts_r+0xb6>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	7019      	strb	r1, [r3, #0]
 8005aac:	e7c5      	b.n	8005a3a <_puts_r+0x42>
 8005aae:	4622      	mov	r2, r4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 f8c5 	bl	8005c40 <__swbuf_r>
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d1bf      	bne.n	8005a3a <_puts_r+0x42>
 8005aba:	e7df      	b.n	8005a7c <_puts_r+0x84>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	250a      	movs	r5, #10
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	701d      	strb	r5, [r3, #0]
 8005ac6:	e7db      	b.n	8005a80 <_puts_r+0x88>
 8005ac8:	08007d30 	.word	0x08007d30
 8005acc:	08007d50 	.word	0x08007d50
 8005ad0:	08007d10 	.word	0x08007d10

08005ad4 <puts>:
 8005ad4:	4b02      	ldr	r3, [pc, #8]	; (8005ae0 <puts+0xc>)
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	f7ff bf8d 	b.w	80059f8 <_puts_r>
 8005ade:	bf00      	nop
 8005ae0:	20000040 	.word	0x20000040

08005ae4 <siprintf>:
 8005ae4:	b40e      	push	{r1, r2, r3}
 8005ae6:	b500      	push	{lr}
 8005ae8:	b09c      	sub	sp, #112	; 0x70
 8005aea:	ab1d      	add	r3, sp, #116	; 0x74
 8005aec:	9002      	str	r0, [sp, #8]
 8005aee:	9006      	str	r0, [sp, #24]
 8005af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005af4:	4809      	ldr	r0, [pc, #36]	; (8005b1c <siprintf+0x38>)
 8005af6:	9107      	str	r1, [sp, #28]
 8005af8:	9104      	str	r1, [sp, #16]
 8005afa:	4909      	ldr	r1, [pc, #36]	; (8005b20 <siprintf+0x3c>)
 8005afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	6800      	ldr	r0, [r0, #0]
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	a902      	add	r1, sp, #8
 8005b08:	f000 fcea 	bl	80064e0 <_svfiprintf_r>
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	b01c      	add	sp, #112	; 0x70
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b003      	add	sp, #12
 8005b1a:	4770      	bx	lr
 8005b1c:	20000040 	.word	0x20000040
 8005b20:	ffff0208 	.word	0xffff0208

08005b24 <siscanf>:
 8005b24:	b40e      	push	{r1, r2, r3}
 8005b26:	b510      	push	{r4, lr}
 8005b28:	b09f      	sub	sp, #124	; 0x7c
 8005b2a:	ac21      	add	r4, sp, #132	; 0x84
 8005b2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b30:	f854 2b04 	ldr.w	r2, [r4], #4
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005b3a:	9004      	str	r0, [sp, #16]
 8005b3c:	9008      	str	r0, [sp, #32]
 8005b3e:	f7fa fb47 	bl	80001d0 <strlen>
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <siscanf+0x50>)
 8005b44:	9005      	str	r0, [sp, #20]
 8005b46:	9009      	str	r0, [sp, #36]	; 0x24
 8005b48:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4a:	480b      	ldr	r0, [pc, #44]	; (8005b78 <siscanf+0x54>)
 8005b4c:	9a01      	ldr	r2, [sp, #4]
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	9403      	str	r4, [sp, #12]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9311      	str	r3, [sp, #68]	; 0x44
 8005b56:	9316      	str	r3, [sp, #88]	; 0x58
 8005b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4623      	mov	r3, r4
 8005b64:	f000 fe16 	bl	8006794 <__ssvfiscanf_r>
 8005b68:	b01f      	add	sp, #124	; 0x7c
 8005b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6e:	b003      	add	sp, #12
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	08005b9f 	.word	0x08005b9f
 8005b78:	20000040 	.word	0x20000040

08005b7c <__sread>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	460c      	mov	r4, r1
 8005b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b84:	f001 fc06 	bl	8007394 <_read_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	bfab      	itete	ge
 8005b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b90:	181b      	addge	r3, r3, r0
 8005b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b96:	bfac      	ite	ge
 8005b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b9a:	81a3      	strhlt	r3, [r4, #12]
 8005b9c:	bd10      	pop	{r4, pc}

08005b9e <__seofread>:
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	4770      	bx	lr

08005ba2 <__swrite>:
 8005ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	898b      	ldrh	r3, [r1, #12]
 8005baa:	05db      	lsls	r3, r3, #23
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	d505      	bpl.n	8005bc0 <__swrite+0x1e>
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f000 fadc 	bl	8006178 <_lseek_r>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	f000 b885 	b.w	8005ce4 <_write_r>

08005bda <__sseek>:
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 fac9 	bl	8006178 <_lseek_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	bf15      	itete	ne
 8005bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bf6:	81a3      	strheq	r3, [r4, #12]
 8005bf8:	bf18      	it	ne
 8005bfa:	81a3      	strhne	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__sclose>:
 8005bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c02:	f000 b8ef 	b.w	8005de4 <_close_r>

08005c06 <strcpy>:
 8005c06:	4603      	mov	r3, r0
 8005c08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c0c:	f803 2b01 	strb.w	r2, [r3], #1
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d1f9      	bne.n	8005c08 <strcpy+0x2>
 8005c14:	4770      	bx	lr

08005c16 <strncmp>:
 8005c16:	b510      	push	{r4, lr}
 8005c18:	b17a      	cbz	r2, 8005c3a <strncmp+0x24>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	3901      	subs	r1, #1
 8005c1e:	1884      	adds	r4, r0, r2
 8005c20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005c28:	4290      	cmp	r0, r2
 8005c2a:	d101      	bne.n	8005c30 <strncmp+0x1a>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d101      	bne.n	8005c34 <strncmp+0x1e>
 8005c30:	1a80      	subs	r0, r0, r2
 8005c32:	bd10      	pop	{r4, pc}
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d1f3      	bne.n	8005c20 <strncmp+0xa>
 8005c38:	e7fa      	b.n	8005c30 <strncmp+0x1a>
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	e7f9      	b.n	8005c32 <strncmp+0x1c>
	...

08005c40 <__swbuf_r>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	460e      	mov	r6, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	4605      	mov	r5, r0
 8005c48:	b118      	cbz	r0, 8005c52 <__swbuf_r+0x12>
 8005c4a:	6983      	ldr	r3, [r0, #24]
 8005c4c:	b90b      	cbnz	r3, 8005c52 <__swbuf_r+0x12>
 8005c4e:	f000 f9f3 	bl	8006038 <__sinit>
 8005c52:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <__swbuf_r+0x98>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d12b      	bne.n	8005cb0 <__swbuf_r+0x70>
 8005c58:	686c      	ldr	r4, [r5, #4]
 8005c5a:	69a3      	ldr	r3, [r4, #24]
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	071a      	lsls	r2, r3, #28
 8005c62:	d52f      	bpl.n	8005cc4 <__swbuf_r+0x84>
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b36b      	cbz	r3, 8005cc4 <__swbuf_r+0x84>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	1ac0      	subs	r0, r0, r3
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	b2f6      	uxtb	r6, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	4637      	mov	r7, r6
 8005c76:	dc04      	bgt.n	8005c82 <__swbuf_r+0x42>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f948 	bl	8005f10 <_fflush_r>
 8005c80:	bb30      	cbnz	r0, 8005cd0 <__swbuf_r+0x90>
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	701e      	strb	r6, [r3, #0]
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	3001      	adds	r0, #1
 8005c94:	4283      	cmp	r3, r0
 8005c96:	d004      	beq.n	8005ca2 <__swbuf_r+0x62>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	07db      	lsls	r3, r3, #31
 8005c9c:	d506      	bpl.n	8005cac <__swbuf_r+0x6c>
 8005c9e:	2e0a      	cmp	r6, #10
 8005ca0:	d104      	bne.n	8005cac <__swbuf_r+0x6c>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f933 	bl	8005f10 <_fflush_r>
 8005caa:	b988      	cbnz	r0, 8005cd0 <__swbuf_r+0x90>
 8005cac:	4638      	mov	r0, r7
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <__swbuf_r+0x9c>)
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d101      	bne.n	8005cba <__swbuf_r+0x7a>
 8005cb6:	68ac      	ldr	r4, [r5, #8]
 8005cb8:	e7cf      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <__swbuf_r+0xa0>)
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	bf08      	it	eq
 8005cc0:	68ec      	ldreq	r4, [r5, #12]
 8005cc2:	e7ca      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 f81e 	bl	8005d08 <__swsetup_r>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d0cb      	beq.n	8005c68 <__swbuf_r+0x28>
 8005cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd4:	e7ea      	b.n	8005cac <__swbuf_r+0x6c>
 8005cd6:	bf00      	nop
 8005cd8:	08007d30 	.word	0x08007d30
 8005cdc:	08007d50 	.word	0x08007d50
 8005ce0:	08007d10 	.word	0x08007d10

08005ce4 <_write_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	; (8005d04 <_write_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fc fa2e 	bl	8002154 <_write>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_write_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_write_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000878 	.word	0x20000878

08005d08 <__swsetup_r>:
 8005d08:	4b32      	ldr	r3, [pc, #200]	; (8005dd4 <__swsetup_r+0xcc>)
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	681d      	ldr	r5, [r3, #0]
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	b125      	cbz	r5, 8005d1e <__swsetup_r+0x16>
 8005d14:	69ab      	ldr	r3, [r5, #24]
 8005d16:	b913      	cbnz	r3, 8005d1e <__swsetup_r+0x16>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f98d 	bl	8006038 <__sinit>
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <__swsetup_r+0xd0>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d10f      	bne.n	8005d44 <__swsetup_r+0x3c>
 8005d24:	686c      	ldr	r4, [r5, #4]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2c:	0719      	lsls	r1, r3, #28
 8005d2e:	d42c      	bmi.n	8005d8a <__swsetup_r+0x82>
 8005d30:	06dd      	lsls	r5, r3, #27
 8005d32:	d411      	bmi.n	8005d58 <__swsetup_r+0x50>
 8005d34:	2309      	movs	r3, #9
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	e03e      	b.n	8005dc2 <__swsetup_r+0xba>
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <__swsetup_r+0xd4>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <__swsetup_r+0x46>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7eb      	b.n	8005d26 <__swsetup_r+0x1e>
 8005d4e:	4b24      	ldr	r3, [pc, #144]	; (8005de0 <__swsetup_r+0xd8>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7e6      	b.n	8005d26 <__swsetup_r+0x1e>
 8005d58:	0758      	lsls	r0, r3, #29
 8005d5a:	d512      	bpl.n	8005d82 <__swsetup_r+0x7a>
 8005d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5e:	b141      	cbz	r1, 8005d72 <__swsetup_r+0x6a>
 8005d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <__swsetup_r+0x66>
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f000 fa7d 	bl	8006268 <_free_r>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6363      	str	r3, [r4, #52]	; 0x34
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b94b      	cbnz	r3, 8005da2 <__swsetup_r+0x9a>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d003      	beq.n	8005da2 <__swsetup_r+0x9a>
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 fa23 	bl	80061e8 <__smakebuf_r>
 8005da2:	89a0      	ldrh	r0, [r4, #12]
 8005da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005da8:	f010 0301 	ands.w	r3, r0, #1
 8005dac:	d00a      	beq.n	8005dc4 <__swsetup_r+0xbc>
 8005dae:	2300      	movs	r3, #0
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	6963      	ldr	r3, [r4, #20]
 8005db4:	425b      	negs	r3, r3
 8005db6:	61a3      	str	r3, [r4, #24]
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	b943      	cbnz	r3, 8005dce <__swsetup_r+0xc6>
 8005dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dc0:	d1ba      	bne.n	8005d38 <__swsetup_r+0x30>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	0781      	lsls	r1, r0, #30
 8005dc6:	bf58      	it	pl
 8005dc8:	6963      	ldrpl	r3, [r4, #20]
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	e7f4      	b.n	8005db8 <__swsetup_r+0xb0>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e7f7      	b.n	8005dc2 <__swsetup_r+0xba>
 8005dd2:	bf00      	nop
 8005dd4:	20000040 	.word	0x20000040
 8005dd8:	08007d30 	.word	0x08007d30
 8005ddc:	08007d50 	.word	0x08007d50
 8005de0:	08007d10 	.word	0x08007d10

08005de4 <_close_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d06      	ldr	r5, [pc, #24]	; (8005e00 <_close_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fc f9be 	bl	8002170 <_close>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_close_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_close_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000878 	.word	0x20000878

08005e04 <__sflush_r>:
 8005e04:	898a      	ldrh	r2, [r1, #12]
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	0710      	lsls	r0, r2, #28
 8005e0e:	460c      	mov	r4, r1
 8005e10:	d458      	bmi.n	8005ec4 <__sflush_r+0xc0>
 8005e12:	684b      	ldr	r3, [r1, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dc05      	bgt.n	8005e24 <__sflush_r+0x20>
 8005e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dc02      	bgt.n	8005e24 <__sflush_r+0x20>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	d0f9      	beq.n	8005e1e <__sflush_r+0x1a>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e30:	682f      	ldr	r7, [r5, #0]
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	d032      	beq.n	8005e9c <__sflush_r+0x98>
 8005e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	075a      	lsls	r2, r3, #29
 8005e3c:	d505      	bpl.n	8005e4a <__sflush_r+0x46>
 8005e3e:	6863      	ldr	r3, [r4, #4]
 8005e40:	1ac0      	subs	r0, r0, r3
 8005e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e44:	b10b      	cbz	r3, 8005e4a <__sflush_r+0x46>
 8005e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e48:	1ac0      	subs	r0, r0, r3
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e50:	6a21      	ldr	r1, [r4, #32]
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b0      	blx	r6
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	d106      	bne.n	8005e6a <__sflush_r+0x66>
 8005e5c:	6829      	ldr	r1, [r5, #0]
 8005e5e:	291d      	cmp	r1, #29
 8005e60:	d82c      	bhi.n	8005ebc <__sflush_r+0xb8>
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <__sflush_r+0x108>)
 8005e64:	40ca      	lsrs	r2, r1
 8005e66:	07d6      	lsls	r6, r2, #31
 8005e68:	d528      	bpl.n	8005ebc <__sflush_r+0xb8>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	6062      	str	r2, [r4, #4]
 8005e6e:	04d9      	lsls	r1, r3, #19
 8005e70:	6922      	ldr	r2, [r4, #16]
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	d504      	bpl.n	8005e80 <__sflush_r+0x7c>
 8005e76:	1c42      	adds	r2, r0, #1
 8005e78:	d101      	bne.n	8005e7e <__sflush_r+0x7a>
 8005e7a:	682b      	ldr	r3, [r5, #0]
 8005e7c:	b903      	cbnz	r3, 8005e80 <__sflush_r+0x7c>
 8005e7e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e82:	602f      	str	r7, [r5, #0]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d0ca      	beq.n	8005e1e <__sflush_r+0x1a>
 8005e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	d002      	beq.n	8005e96 <__sflush_r+0x92>
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 f9e9 	bl	8006268 <_free_r>
 8005e96:	2000      	movs	r0, #0
 8005e98:	6360      	str	r0, [r4, #52]	; 0x34
 8005e9a:	e7c1      	b.n	8005e20 <__sflush_r+0x1c>
 8005e9c:	6a21      	ldr	r1, [r4, #32]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b0      	blx	r6
 8005ea4:	1c41      	adds	r1, r0, #1
 8005ea6:	d1c7      	bne.n	8005e38 <__sflush_r+0x34>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0c4      	beq.n	8005e38 <__sflush_r+0x34>
 8005eae:	2b1d      	cmp	r3, #29
 8005eb0:	d001      	beq.n	8005eb6 <__sflush_r+0xb2>
 8005eb2:	2b16      	cmp	r3, #22
 8005eb4:	d101      	bne.n	8005eba <__sflush_r+0xb6>
 8005eb6:	602f      	str	r7, [r5, #0]
 8005eb8:	e7b1      	b.n	8005e1e <__sflush_r+0x1a>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e7ad      	b.n	8005e20 <__sflush_r+0x1c>
 8005ec4:	690f      	ldr	r7, [r1, #16]
 8005ec6:	2f00      	cmp	r7, #0
 8005ec8:	d0a9      	beq.n	8005e1e <__sflush_r+0x1a>
 8005eca:	0793      	lsls	r3, r2, #30
 8005ecc:	680e      	ldr	r6, [r1, #0]
 8005ece:	bf08      	it	eq
 8005ed0:	694b      	ldreq	r3, [r1, #20]
 8005ed2:	600f      	str	r7, [r1, #0]
 8005ed4:	bf18      	it	ne
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	eba6 0807 	sub.w	r8, r6, r7
 8005edc:	608b      	str	r3, [r1, #8]
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	dd9c      	ble.n	8005e1e <__sflush_r+0x1a>
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ee8:	4643      	mov	r3, r8
 8005eea:	463a      	mov	r2, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b0      	blx	r6
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dc06      	bgt.n	8005f02 <__sflush_r+0xfe>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	e78e      	b.n	8005e20 <__sflush_r+0x1c>
 8005f02:	4407      	add	r7, r0
 8005f04:	eba8 0800 	sub.w	r8, r8, r0
 8005f08:	e7e9      	b.n	8005ede <__sflush_r+0xda>
 8005f0a:	bf00      	nop
 8005f0c:	20400001 	.word	0x20400001

08005f10 <_fflush_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	4605      	mov	r5, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b913      	cbnz	r3, 8005f20 <_fflush_r+0x10>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	b118      	cbz	r0, 8005f2a <_fflush_r+0x1a>
 8005f22:	6983      	ldr	r3, [r0, #24]
 8005f24:	b90b      	cbnz	r3, 8005f2a <_fflush_r+0x1a>
 8005f26:	f000 f887 	bl	8006038 <__sinit>
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <_fflush_r+0x6c>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d11b      	bne.n	8005f68 <_fflush_r+0x58>
 8005f30:	686c      	ldr	r4, [r5, #4]
 8005f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0ef      	beq.n	8005f1a <_fflush_r+0xa>
 8005f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f3c:	07d0      	lsls	r0, r2, #31
 8005f3e:	d404      	bmi.n	8005f4a <_fflush_r+0x3a>
 8005f40:	0599      	lsls	r1, r3, #22
 8005f42:	d402      	bmi.n	8005f4a <_fflush_r+0x3a>
 8005f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f46:	f000 f915 	bl	8006174 <__retarget_lock_acquire_recursive>
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f7ff ff59 	bl	8005e04 <__sflush_r>
 8005f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f54:	07da      	lsls	r2, r3, #31
 8005f56:	4605      	mov	r5, r0
 8005f58:	d4e0      	bmi.n	8005f1c <_fflush_r+0xc>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	059b      	lsls	r3, r3, #22
 8005f5e:	d4dd      	bmi.n	8005f1c <_fflush_r+0xc>
 8005f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f62:	f000 f908 	bl	8006176 <__retarget_lock_release_recursive>
 8005f66:	e7d9      	b.n	8005f1c <_fflush_r+0xc>
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <_fflush_r+0x70>)
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	d101      	bne.n	8005f72 <_fflush_r+0x62>
 8005f6e:	68ac      	ldr	r4, [r5, #8]
 8005f70:	e7df      	b.n	8005f32 <_fflush_r+0x22>
 8005f72:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <_fflush_r+0x74>)
 8005f74:	429c      	cmp	r4, r3
 8005f76:	bf08      	it	eq
 8005f78:	68ec      	ldreq	r4, [r5, #12]
 8005f7a:	e7da      	b.n	8005f32 <_fflush_r+0x22>
 8005f7c:	08007d30 	.word	0x08007d30
 8005f80:	08007d50 	.word	0x08007d50
 8005f84:	08007d10 	.word	0x08007d10

08005f88 <std>:
 8005f88:	2300      	movs	r3, #0
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f96:	6083      	str	r3, [r0, #8]
 8005f98:	8181      	strh	r1, [r0, #12]
 8005f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f9c:	81c2      	strh	r2, [r0, #14]
 8005f9e:	6183      	str	r3, [r0, #24]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	305c      	adds	r0, #92	; 0x5c
 8005fa6:	f7ff fcf1 	bl	800598c <memset>
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <std+0x38>)
 8005fac:	6263      	str	r3, [r4, #36]	; 0x24
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <std+0x3c>)
 8005fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <std+0x40>)
 8005fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <std+0x44>)
 8005fb8:	6224      	str	r4, [r4, #32]
 8005fba:	6323      	str	r3, [r4, #48]	; 0x30
 8005fbc:	bd10      	pop	{r4, pc}
 8005fbe:	bf00      	nop
 8005fc0:	08005b7d 	.word	0x08005b7d
 8005fc4:	08005ba3 	.word	0x08005ba3
 8005fc8:	08005bdb 	.word	0x08005bdb
 8005fcc:	08005bff 	.word	0x08005bff

08005fd0 <_cleanup_r>:
 8005fd0:	4901      	ldr	r1, [pc, #4]	; (8005fd8 <_cleanup_r+0x8>)
 8005fd2:	f000 b8af 	b.w	8006134 <_fwalk_reent>
 8005fd6:	bf00      	nop
 8005fd8:	08005f11 	.word	0x08005f11

08005fdc <__sfmoreglue>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2268      	movs	r2, #104	; 0x68
 8005fe0:	1e4d      	subs	r5, r1, #1
 8005fe2:	4355      	muls	r5, r2
 8005fe4:	460e      	mov	r6, r1
 8005fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fea:	f000 f9a9 	bl	8006340 <_malloc_r>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	b140      	cbz	r0, 8006004 <__sfmoreglue+0x28>
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ff8:	300c      	adds	r0, #12
 8005ffa:	60a0      	str	r0, [r4, #8]
 8005ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006000:	f7ff fcc4 	bl	800598c <memset>
 8006004:	4620      	mov	r0, r4
 8006006:	bd70      	pop	{r4, r5, r6, pc}

08006008 <__sfp_lock_acquire>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__sfp_lock_acquire+0x8>)
 800600a:	f000 b8b3 	b.w	8006174 <__retarget_lock_acquire_recursive>
 800600e:	bf00      	nop
 8006010:	2000086d 	.word	0x2000086d

08006014 <__sfp_lock_release>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__sfp_lock_release+0x8>)
 8006016:	f000 b8ae 	b.w	8006176 <__retarget_lock_release_recursive>
 800601a:	bf00      	nop
 800601c:	2000086d 	.word	0x2000086d

08006020 <__sinit_lock_acquire>:
 8006020:	4801      	ldr	r0, [pc, #4]	; (8006028 <__sinit_lock_acquire+0x8>)
 8006022:	f000 b8a7 	b.w	8006174 <__retarget_lock_acquire_recursive>
 8006026:	bf00      	nop
 8006028:	2000086e 	.word	0x2000086e

0800602c <__sinit_lock_release>:
 800602c:	4801      	ldr	r0, [pc, #4]	; (8006034 <__sinit_lock_release+0x8>)
 800602e:	f000 b8a2 	b.w	8006176 <__retarget_lock_release_recursive>
 8006032:	bf00      	nop
 8006034:	2000086e 	.word	0x2000086e

08006038 <__sinit>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4604      	mov	r4, r0
 800603c:	f7ff fff0 	bl	8006020 <__sinit_lock_acquire>
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	b11b      	cbz	r3, 800604c <__sinit+0x14>
 8006044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006048:	f7ff bff0 	b.w	800602c <__sinit_lock_release>
 800604c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006050:	6523      	str	r3, [r4, #80]	; 0x50
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <__sinit+0x68>)
 8006054:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <__sinit+0x6c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	62a2      	str	r2, [r4, #40]	; 0x28
 800605a:	42a3      	cmp	r3, r4
 800605c:	bf04      	itt	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	61a3      	streq	r3, [r4, #24]
 8006062:	4620      	mov	r0, r4
 8006064:	f000 f820 	bl	80060a8 <__sfp>
 8006068:	6060      	str	r0, [r4, #4]
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f81c 	bl	80060a8 <__sfp>
 8006070:	60a0      	str	r0, [r4, #8]
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f818 	bl	80060a8 <__sfp>
 8006078:	2200      	movs	r2, #0
 800607a:	60e0      	str	r0, [r4, #12]
 800607c:	2104      	movs	r1, #4
 800607e:	6860      	ldr	r0, [r4, #4]
 8006080:	f7ff ff82 	bl	8005f88 <std>
 8006084:	68a0      	ldr	r0, [r4, #8]
 8006086:	2201      	movs	r2, #1
 8006088:	2109      	movs	r1, #9
 800608a:	f7ff ff7d 	bl	8005f88 <std>
 800608e:	68e0      	ldr	r0, [r4, #12]
 8006090:	2202      	movs	r2, #2
 8006092:	2112      	movs	r1, #18
 8006094:	f7ff ff78 	bl	8005f88 <std>
 8006098:	2301      	movs	r3, #1
 800609a:	61a3      	str	r3, [r4, #24]
 800609c:	e7d2      	b.n	8006044 <__sinit+0xc>
 800609e:	bf00      	nop
 80060a0:	08007d0c 	.word	0x08007d0c
 80060a4:	08005fd1 	.word	0x08005fd1

080060a8 <__sfp>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	4607      	mov	r7, r0
 80060ac:	f7ff ffac 	bl	8006008 <__sfp_lock_acquire>
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <__sfp+0x84>)
 80060b2:	681e      	ldr	r6, [r3, #0]
 80060b4:	69b3      	ldr	r3, [r6, #24]
 80060b6:	b913      	cbnz	r3, 80060be <__sfp+0x16>
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff ffbd 	bl	8006038 <__sinit>
 80060be:	3648      	adds	r6, #72	; 0x48
 80060c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	d503      	bpl.n	80060d0 <__sfp+0x28>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	b30b      	cbz	r3, 8006110 <__sfp+0x68>
 80060cc:	6836      	ldr	r6, [r6, #0]
 80060ce:	e7f7      	b.n	80060c0 <__sfp+0x18>
 80060d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060d4:	b9d5      	cbnz	r5, 800610c <__sfp+0x64>
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <__sfp+0x88>)
 80060d8:	60e3      	str	r3, [r4, #12]
 80060da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060de:	6665      	str	r5, [r4, #100]	; 0x64
 80060e0:	f000 f847 	bl	8006172 <__retarget_lock_init_recursive>
 80060e4:	f7ff ff96 	bl	8006014 <__sfp_lock_release>
 80060e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060f0:	6025      	str	r5, [r4, #0]
 80060f2:	61a5      	str	r5, [r4, #24]
 80060f4:	2208      	movs	r2, #8
 80060f6:	4629      	mov	r1, r5
 80060f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060fc:	f7ff fc46 	bl	800598c <memset>
 8006100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006108:	4620      	mov	r0, r4
 800610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610c:	3468      	adds	r4, #104	; 0x68
 800610e:	e7d9      	b.n	80060c4 <__sfp+0x1c>
 8006110:	2104      	movs	r1, #4
 8006112:	4638      	mov	r0, r7
 8006114:	f7ff ff62 	bl	8005fdc <__sfmoreglue>
 8006118:	4604      	mov	r4, r0
 800611a:	6030      	str	r0, [r6, #0]
 800611c:	2800      	cmp	r0, #0
 800611e:	d1d5      	bne.n	80060cc <__sfp+0x24>
 8006120:	f7ff ff78 	bl	8006014 <__sfp_lock_release>
 8006124:	230c      	movs	r3, #12
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	e7ee      	b.n	8006108 <__sfp+0x60>
 800612a:	bf00      	nop
 800612c:	08007d0c 	.word	0x08007d0c
 8006130:	ffff0001 	.word	0xffff0001

08006134 <_fwalk_reent>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	4606      	mov	r6, r0
 800613a:	4688      	mov	r8, r1
 800613c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006140:	2700      	movs	r7, #0
 8006142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006146:	f1b9 0901 	subs.w	r9, r9, #1
 800614a:	d505      	bpl.n	8006158 <_fwalk_reent+0x24>
 800614c:	6824      	ldr	r4, [r4, #0]
 800614e:	2c00      	cmp	r4, #0
 8006150:	d1f7      	bne.n	8006142 <_fwalk_reent+0xe>
 8006152:	4638      	mov	r0, r7
 8006154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006158:	89ab      	ldrh	r3, [r5, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d907      	bls.n	800616e <_fwalk_reent+0x3a>
 800615e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006162:	3301      	adds	r3, #1
 8006164:	d003      	beq.n	800616e <_fwalk_reent+0x3a>
 8006166:	4629      	mov	r1, r5
 8006168:	4630      	mov	r0, r6
 800616a:	47c0      	blx	r8
 800616c:	4307      	orrs	r7, r0
 800616e:	3568      	adds	r5, #104	; 0x68
 8006170:	e7e9      	b.n	8006146 <_fwalk_reent+0x12>

08006172 <__retarget_lock_init_recursive>:
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <_lseek_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	; (8006198 <_lseek_r+0x20>)
 800617c:	4604      	mov	r4, r0
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	2200      	movs	r2, #0
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fb fffc 	bl	8002184 <_lseek>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_lseek_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_lseek_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000878 	.word	0x20000878

0800619c <__swhatbuf_r>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	460e      	mov	r6, r1
 80061a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a4:	2900      	cmp	r1, #0
 80061a6:	b096      	sub	sp, #88	; 0x58
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	da08      	bge.n	80061c0 <__swhatbuf_r+0x24>
 80061ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	061a      	lsls	r2, r3, #24
 80061b8:	d410      	bmi.n	80061dc <__swhatbuf_r+0x40>
 80061ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061be:	e00e      	b.n	80061de <__swhatbuf_r+0x42>
 80061c0:	466a      	mov	r2, sp
 80061c2:	f001 fa73 	bl	80076ac <_fstat_r>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	dbf1      	blt.n	80061ae <__swhatbuf_r+0x12>
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061d4:	425a      	negs	r2, r3
 80061d6:	415a      	adcs	r2, r3
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	e7ee      	b.n	80061ba <__swhatbuf_r+0x1e>
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	2000      	movs	r0, #0
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	b016      	add	sp, #88	; 0x58
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080061e8 <__smakebuf_r>:
 80061e8:	898b      	ldrh	r3, [r1, #12]
 80061ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061ec:	079d      	lsls	r5, r3, #30
 80061ee:	4606      	mov	r6, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	d507      	bpl.n	8006204 <__smakebuf_r+0x1c>
 80061f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	2301      	movs	r3, #1
 80061fe:	6163      	str	r3, [r4, #20]
 8006200:	b002      	add	sp, #8
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	ab01      	add	r3, sp, #4
 8006206:	466a      	mov	r2, sp
 8006208:	f7ff ffc8 	bl	800619c <__swhatbuf_r>
 800620c:	9900      	ldr	r1, [sp, #0]
 800620e:	4605      	mov	r5, r0
 8006210:	4630      	mov	r0, r6
 8006212:	f000 f895 	bl	8006340 <_malloc_r>
 8006216:	b948      	cbnz	r0, 800622c <__smakebuf_r+0x44>
 8006218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800621c:	059a      	lsls	r2, r3, #22
 800621e:	d4ef      	bmi.n	8006200 <__smakebuf_r+0x18>
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	f043 0302 	orr.w	r3, r3, #2
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	e7e3      	b.n	80061f4 <__smakebuf_r+0xc>
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <__smakebuf_r+0x7c>)
 800622e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	6020      	str	r0, [r4, #0]
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	6163      	str	r3, [r4, #20]
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	6120      	str	r0, [r4, #16]
 8006242:	b15b      	cbz	r3, 800625c <__smakebuf_r+0x74>
 8006244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006248:	4630      	mov	r0, r6
 800624a:	f001 fa41 	bl	80076d0 <_isatty_r>
 800624e:	b128      	cbz	r0, 800625c <__smakebuf_r+0x74>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	89a0      	ldrh	r0, [r4, #12]
 800625e:	4305      	orrs	r5, r0
 8006260:	81a5      	strh	r5, [r4, #12]
 8006262:	e7cd      	b.n	8006200 <__smakebuf_r+0x18>
 8006264:	08005fd1 	.word	0x08005fd1

08006268 <_free_r>:
 8006268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626a:	2900      	cmp	r1, #0
 800626c:	d044      	beq.n	80062f8 <_free_r+0x90>
 800626e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006272:	9001      	str	r0, [sp, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f1a1 0404 	sub.w	r4, r1, #4
 800627a:	bfb8      	it	lt
 800627c:	18e4      	addlt	r4, r4, r3
 800627e:	f001 fa5f 	bl	8007740 <__malloc_lock>
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <_free_r+0x94>)
 8006284:	9801      	ldr	r0, [sp, #4]
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	b933      	cbnz	r3, 8006298 <_free_r+0x30>
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6014      	str	r4, [r2, #0]
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006294:	f001 ba5a 	b.w	800774c <__malloc_unlock>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d908      	bls.n	80062ae <_free_r+0x46>
 800629c:	6825      	ldr	r5, [r4, #0]
 800629e:	1961      	adds	r1, r4, r5
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1949      	addeq	r1, r1, r5
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	e7ed      	b.n	800628a <_free_r+0x22>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x50>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x46>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1855      	adds	r5, r2, r1
 80062bc:	42a5      	cmp	r5, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x70>
 80062c0:	6824      	ldr	r4, [r4, #0]
 80062c2:	4421      	add	r1, r4
 80062c4:	1854      	adds	r4, r2, r1
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1e0      	bne.n	800628e <_free_r+0x26>
 80062cc:	681c      	ldr	r4, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	4421      	add	r1, r4
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	e7da      	b.n	800628e <_free_r+0x26>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x78>
 80062da:	230c      	movs	r3, #12
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	e7d6      	b.n	800628e <_free_r+0x26>
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	1961      	adds	r1, r4, r5
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1949      	addeq	r1, r1, r5
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6054      	str	r4, [r2, #4]
 80062f6:	e7ca      	b.n	800628e <_free_r+0x26>
 80062f8:	b003      	add	sp, #12
 80062fa:	bd30      	pop	{r4, r5, pc}
 80062fc:	20000870 	.word	0x20000870

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0e      	ldr	r6, [pc, #56]	; (800633c <sbrk_aligned+0x3c>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f001 f854 	bl	80073b8 <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f001 f84f 	bl	80073b8 <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <sbrk_aligned+0x34>
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d007      	beq.n	8006338 <sbrk_aligned+0x38>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f001 f844 	bl	80073b8 <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d101      	bne.n	8006338 <sbrk_aligned+0x38>
 8006334:	f04f 34ff 	mov.w	r4, #4294967295
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	20000874 	.word	0x20000874

08006340 <_malloc_r>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4607      	mov	r7, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d905      	bls.n	8006368 <_malloc_r+0x28>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	2600      	movs	r6, #0
 8006362:	4630      	mov	r0, r6
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4e2e      	ldr	r6, [pc, #184]	; (8006424 <_malloc_r+0xe4>)
 800636a:	f001 f9e9 	bl	8007740 <__malloc_lock>
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	461c      	mov	r4, r3
 8006372:	bb34      	cbnz	r4, 80063c2 <_malloc_r+0x82>
 8006374:	4629      	mov	r1, r5
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ffc2 	bl	8006300 <sbrk_aligned>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	4604      	mov	r4, r0
 8006380:	d14d      	bne.n	800641e <_malloc_r+0xde>
 8006382:	6834      	ldr	r4, [r6, #0]
 8006384:	4626      	mov	r6, r4
 8006386:	2e00      	cmp	r6, #0
 8006388:	d140      	bne.n	800640c <_malloc_r+0xcc>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4631      	mov	r1, r6
 800638e:	4638      	mov	r0, r7
 8006390:	eb04 0803 	add.w	r8, r4, r3
 8006394:	f001 f810 	bl	80073b8 <_sbrk_r>
 8006398:	4580      	cmp	r8, r0
 800639a:	d13a      	bne.n	8006412 <_malloc_r+0xd2>
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	3503      	adds	r5, #3
 80063a0:	1a6d      	subs	r5, r5, r1
 80063a2:	f025 0503 	bic.w	r5, r5, #3
 80063a6:	3508      	adds	r5, #8
 80063a8:	2d0c      	cmp	r5, #12
 80063aa:	bf38      	it	cc
 80063ac:	250c      	movcc	r5, #12
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa5 	bl	8006300 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d02b      	beq.n	8006412 <_malloc_r+0xd2>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	e00e      	b.n	80063e0 <_malloc_r+0xa0>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	1b52      	subs	r2, r2, r5
 80063c6:	d41e      	bmi.n	8006406 <_malloc_r+0xc6>
 80063c8:	2a0b      	cmp	r2, #11
 80063ca:	d916      	bls.n	80063fa <_malloc_r+0xba>
 80063cc:	1961      	adds	r1, r4, r5
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	bf18      	it	ne
 80063d4:	6059      	strne	r1, [r3, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	bf08      	it	eq
 80063da:	6031      	streq	r1, [r6, #0]
 80063dc:	5162      	str	r2, [r4, r5]
 80063de:	604b      	str	r3, [r1, #4]
 80063e0:	4638      	mov	r0, r7
 80063e2:	f104 060b 	add.w	r6, r4, #11
 80063e6:	f001 f9b1 	bl	800774c <__malloc_unlock>
 80063ea:	f026 0607 	bic.w	r6, r6, #7
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	1af2      	subs	r2, r6, r3
 80063f2:	d0b6      	beq.n	8006362 <_malloc_r+0x22>
 80063f4:	1b9b      	subs	r3, r3, r6
 80063f6:	50a3      	str	r3, [r4, r2]
 80063f8:	e7b3      	b.n	8006362 <_malloc_r+0x22>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	bf0c      	ite	eq
 8006400:	6032      	streq	r2, [r6, #0]
 8006402:	605a      	strne	r2, [r3, #4]
 8006404:	e7ec      	b.n	80063e0 <_malloc_r+0xa0>
 8006406:	4623      	mov	r3, r4
 8006408:	6864      	ldr	r4, [r4, #4]
 800640a:	e7b2      	b.n	8006372 <_malloc_r+0x32>
 800640c:	4634      	mov	r4, r6
 800640e:	6876      	ldr	r6, [r6, #4]
 8006410:	e7b9      	b.n	8006386 <_malloc_r+0x46>
 8006412:	230c      	movs	r3, #12
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4638      	mov	r0, r7
 8006418:	f001 f998 	bl	800774c <__malloc_unlock>
 800641c:	e7a1      	b.n	8006362 <_malloc_r+0x22>
 800641e:	6025      	str	r5, [r4, #0]
 8006420:	e7de      	b.n	80063e0 <_malloc_r+0xa0>
 8006422:	bf00      	nop
 8006424:	20000870 	.word	0x20000870

08006428 <__ssputs_r>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	688e      	ldr	r6, [r1, #8]
 800642e:	429e      	cmp	r6, r3
 8006430:	4682      	mov	sl, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4690      	mov	r8, r2
 8006436:	461f      	mov	r7, r3
 8006438:	d838      	bhi.n	80064ac <__ssputs_r+0x84>
 800643a:	898a      	ldrh	r2, [r1, #12]
 800643c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006440:	d032      	beq.n	80064a8 <__ssputs_r+0x80>
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	6909      	ldr	r1, [r1, #16]
 8006446:	eba5 0901 	sub.w	r9, r5, r1
 800644a:	6965      	ldr	r5, [r4, #20]
 800644c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006454:	3301      	adds	r3, #1
 8006456:	444b      	add	r3, r9
 8006458:	106d      	asrs	r5, r5, #1
 800645a:	429d      	cmp	r5, r3
 800645c:	bf38      	it	cc
 800645e:	461d      	movcc	r5, r3
 8006460:	0553      	lsls	r3, r2, #21
 8006462:	d531      	bpl.n	80064c8 <__ssputs_r+0xa0>
 8006464:	4629      	mov	r1, r5
 8006466:	f7ff ff6b 	bl	8006340 <_malloc_r>
 800646a:	4606      	mov	r6, r0
 800646c:	b950      	cbnz	r0, 8006484 <__ssputs_r+0x5c>
 800646e:	230c      	movs	r3, #12
 8006470:	f8ca 3000 	str.w	r3, [sl]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	6921      	ldr	r1, [r4, #16]
 8006486:	464a      	mov	r2, r9
 8006488:	f001 f932 	bl	80076f0 <memcpy>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	6126      	str	r6, [r4, #16]
 800649a:	6165      	str	r5, [r4, #20]
 800649c:	444e      	add	r6, r9
 800649e:	eba5 0509 	sub.w	r5, r5, r9
 80064a2:	6026      	str	r6, [r4, #0]
 80064a4:	60a5      	str	r5, [r4, #8]
 80064a6:	463e      	mov	r6, r7
 80064a8:	42be      	cmp	r6, r7
 80064aa:	d900      	bls.n	80064ae <__ssputs_r+0x86>
 80064ac:	463e      	mov	r6, r7
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	4632      	mov	r2, r6
 80064b2:	4641      	mov	r1, r8
 80064b4:	f001 f92a 	bl	800770c <memmove>
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	1b9b      	subs	r3, r3, r6
 80064bc:	60a3      	str	r3, [r4, #8]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4433      	add	r3, r6
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7db      	b.n	8006480 <__ssputs_r+0x58>
 80064c8:	462a      	mov	r2, r5
 80064ca:	f001 f945 	bl	8007758 <_realloc_r>
 80064ce:	4606      	mov	r6, r0
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d1e1      	bne.n	8006498 <__ssputs_r+0x70>
 80064d4:	6921      	ldr	r1, [r4, #16]
 80064d6:	4650      	mov	r0, sl
 80064d8:	f7ff fec6 	bl	8006268 <_free_r>
 80064dc:	e7c7      	b.n	800646e <__ssputs_r+0x46>
	...

080064e0 <_svfiprintf_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	4698      	mov	r8, r3
 80064e6:	898b      	ldrh	r3, [r1, #12]
 80064e8:	061b      	lsls	r3, r3, #24
 80064ea:	b09d      	sub	sp, #116	; 0x74
 80064ec:	4607      	mov	r7, r0
 80064ee:	460d      	mov	r5, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	d50e      	bpl.n	8006512 <_svfiprintf_r+0x32>
 80064f4:	690b      	ldr	r3, [r1, #16]
 80064f6:	b963      	cbnz	r3, 8006512 <_svfiprintf_r+0x32>
 80064f8:	2140      	movs	r1, #64	; 0x40
 80064fa:	f7ff ff21 	bl	8006340 <_malloc_r>
 80064fe:	6028      	str	r0, [r5, #0]
 8006500:	6128      	str	r0, [r5, #16]
 8006502:	b920      	cbnz	r0, 800650e <_svfiprintf_r+0x2e>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	e0d1      	b.n	80066b2 <_svfiprintf_r+0x1d2>
 800650e:	2340      	movs	r3, #64	; 0x40
 8006510:	616b      	str	r3, [r5, #20]
 8006512:	2300      	movs	r3, #0
 8006514:	9309      	str	r3, [sp, #36]	; 0x24
 8006516:	2320      	movs	r3, #32
 8006518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800651c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006520:	2330      	movs	r3, #48	; 0x30
 8006522:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066cc <_svfiprintf_r+0x1ec>
 8006526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800652a:	f04f 0901 	mov.w	r9, #1
 800652e:	4623      	mov	r3, r4
 8006530:	469a      	mov	sl, r3
 8006532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006536:	b10a      	cbz	r2, 800653c <_svfiprintf_r+0x5c>
 8006538:	2a25      	cmp	r2, #37	; 0x25
 800653a:	d1f9      	bne.n	8006530 <_svfiprintf_r+0x50>
 800653c:	ebba 0b04 	subs.w	fp, sl, r4
 8006540:	d00b      	beq.n	800655a <_svfiprintf_r+0x7a>
 8006542:	465b      	mov	r3, fp
 8006544:	4622      	mov	r2, r4
 8006546:	4629      	mov	r1, r5
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff ff6d 	bl	8006428 <__ssputs_r>
 800654e:	3001      	adds	r0, #1
 8006550:	f000 80aa 	beq.w	80066a8 <_svfiprintf_r+0x1c8>
 8006554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006556:	445a      	add	r2, fp
 8006558:	9209      	str	r2, [sp, #36]	; 0x24
 800655a:	f89a 3000 	ldrb.w	r3, [sl]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80a2 	beq.w	80066a8 <_svfiprintf_r+0x1c8>
 8006564:	2300      	movs	r3, #0
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656e:	f10a 0a01 	add.w	sl, sl, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9307      	str	r3, [sp, #28]
 8006576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800657a:	931a      	str	r3, [sp, #104]	; 0x68
 800657c:	4654      	mov	r4, sl
 800657e:	2205      	movs	r2, #5
 8006580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006584:	4851      	ldr	r0, [pc, #324]	; (80066cc <_svfiprintf_r+0x1ec>)
 8006586:	f7f9 fe2b 	bl	80001e0 <memchr>
 800658a:	9a04      	ldr	r2, [sp, #16]
 800658c:	b9d8      	cbnz	r0, 80065c6 <_svfiprintf_r+0xe6>
 800658e:	06d0      	lsls	r0, r2, #27
 8006590:	bf44      	itt	mi
 8006592:	2320      	movmi	r3, #32
 8006594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006598:	0711      	lsls	r1, r2, #28
 800659a:	bf44      	itt	mi
 800659c:	232b      	movmi	r3, #43	; 0x2b
 800659e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a2:	f89a 3000 	ldrb.w	r3, [sl]
 80065a6:	2b2a      	cmp	r3, #42	; 0x2a
 80065a8:	d015      	beq.n	80065d6 <_svfiprintf_r+0xf6>
 80065aa:	9a07      	ldr	r2, [sp, #28]
 80065ac:	4654      	mov	r4, sl
 80065ae:	2000      	movs	r0, #0
 80065b0:	f04f 0c0a 	mov.w	ip, #10
 80065b4:	4621      	mov	r1, r4
 80065b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ba:	3b30      	subs	r3, #48	; 0x30
 80065bc:	2b09      	cmp	r3, #9
 80065be:	d94e      	bls.n	800665e <_svfiprintf_r+0x17e>
 80065c0:	b1b0      	cbz	r0, 80065f0 <_svfiprintf_r+0x110>
 80065c2:	9207      	str	r2, [sp, #28]
 80065c4:	e014      	b.n	80065f0 <_svfiprintf_r+0x110>
 80065c6:	eba0 0308 	sub.w	r3, r0, r8
 80065ca:	fa09 f303 	lsl.w	r3, r9, r3
 80065ce:	4313      	orrs	r3, r2
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	46a2      	mov	sl, r4
 80065d4:	e7d2      	b.n	800657c <_svfiprintf_r+0x9c>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	1d19      	adds	r1, r3, #4
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	9103      	str	r1, [sp, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfbb      	ittet	lt
 80065e2:	425b      	neglt	r3, r3
 80065e4:	f042 0202 	orrlt.w	r2, r2, #2
 80065e8:	9307      	strge	r3, [sp, #28]
 80065ea:	9307      	strlt	r3, [sp, #28]
 80065ec:	bfb8      	it	lt
 80065ee:	9204      	strlt	r2, [sp, #16]
 80065f0:	7823      	ldrb	r3, [r4, #0]
 80065f2:	2b2e      	cmp	r3, #46	; 0x2e
 80065f4:	d10c      	bne.n	8006610 <_svfiprintf_r+0x130>
 80065f6:	7863      	ldrb	r3, [r4, #1]
 80065f8:	2b2a      	cmp	r3, #42	; 0x2a
 80065fa:	d135      	bne.n	8006668 <_svfiprintf_r+0x188>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	bfb8      	it	lt
 8006608:	f04f 33ff 	movlt.w	r3, #4294967295
 800660c:	3402      	adds	r4, #2
 800660e:	9305      	str	r3, [sp, #20]
 8006610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066dc <_svfiprintf_r+0x1fc>
 8006614:	7821      	ldrb	r1, [r4, #0]
 8006616:	2203      	movs	r2, #3
 8006618:	4650      	mov	r0, sl
 800661a:	f7f9 fde1 	bl	80001e0 <memchr>
 800661e:	b140      	cbz	r0, 8006632 <_svfiprintf_r+0x152>
 8006620:	2340      	movs	r3, #64	; 0x40
 8006622:	eba0 000a 	sub.w	r0, r0, sl
 8006626:	fa03 f000 	lsl.w	r0, r3, r0
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	4303      	orrs	r3, r0
 800662e:	3401      	adds	r4, #1
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006636:	4826      	ldr	r0, [pc, #152]	; (80066d0 <_svfiprintf_r+0x1f0>)
 8006638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800663c:	2206      	movs	r2, #6
 800663e:	f7f9 fdcf 	bl	80001e0 <memchr>
 8006642:	2800      	cmp	r0, #0
 8006644:	d038      	beq.n	80066b8 <_svfiprintf_r+0x1d8>
 8006646:	4b23      	ldr	r3, [pc, #140]	; (80066d4 <_svfiprintf_r+0x1f4>)
 8006648:	bb1b      	cbnz	r3, 8006692 <_svfiprintf_r+0x1b2>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	3307      	adds	r3, #7
 800664e:	f023 0307 	bic.w	r3, r3, #7
 8006652:	3308      	adds	r3, #8
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	4433      	add	r3, r6
 800665a:	9309      	str	r3, [sp, #36]	; 0x24
 800665c:	e767      	b.n	800652e <_svfiprintf_r+0x4e>
 800665e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006662:	460c      	mov	r4, r1
 8006664:	2001      	movs	r0, #1
 8006666:	e7a5      	b.n	80065b4 <_svfiprintf_r+0xd4>
 8006668:	2300      	movs	r3, #0
 800666a:	3401      	adds	r4, #1
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	4619      	mov	r1, r3
 8006670:	f04f 0c0a 	mov.w	ip, #10
 8006674:	4620      	mov	r0, r4
 8006676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667a:	3a30      	subs	r2, #48	; 0x30
 800667c:	2a09      	cmp	r2, #9
 800667e:	d903      	bls.n	8006688 <_svfiprintf_r+0x1a8>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0c5      	beq.n	8006610 <_svfiprintf_r+0x130>
 8006684:	9105      	str	r1, [sp, #20]
 8006686:	e7c3      	b.n	8006610 <_svfiprintf_r+0x130>
 8006688:	fb0c 2101 	mla	r1, ip, r1, r2
 800668c:	4604      	mov	r4, r0
 800668e:	2301      	movs	r3, #1
 8006690:	e7f0      	b.n	8006674 <_svfiprintf_r+0x194>
 8006692:	ab03      	add	r3, sp, #12
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	462a      	mov	r2, r5
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <_svfiprintf_r+0x1f8>)
 800669a:	a904      	add	r1, sp, #16
 800669c:	4638      	mov	r0, r7
 800669e:	f3af 8000 	nop.w
 80066a2:	1c42      	adds	r2, r0, #1
 80066a4:	4606      	mov	r6, r0
 80066a6:	d1d6      	bne.n	8006656 <_svfiprintf_r+0x176>
 80066a8:	89ab      	ldrh	r3, [r5, #12]
 80066aa:	065b      	lsls	r3, r3, #25
 80066ac:	f53f af2c 	bmi.w	8006508 <_svfiprintf_r+0x28>
 80066b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b2:	b01d      	add	sp, #116	; 0x74
 80066b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	ab03      	add	r3, sp, #12
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	462a      	mov	r2, r5
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <_svfiprintf_r+0x1f8>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	4638      	mov	r0, r7
 80066c4:	f000 fba6 	bl	8006e14 <_printf_i>
 80066c8:	e7eb      	b.n	80066a2 <_svfiprintf_r+0x1c2>
 80066ca:	bf00      	nop
 80066cc:	08007d70 	.word	0x08007d70
 80066d0:	08007d7a 	.word	0x08007d7a
 80066d4:	00000000 	.word	0x00000000
 80066d8:	08006429 	.word	0x08006429
 80066dc:	08007d76 	.word	0x08007d76

080066e0 <_sungetc_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	1c4b      	adds	r3, r1, #1
 80066e4:	4614      	mov	r4, r2
 80066e6:	d103      	bne.n	80066f0 <_sungetc_r+0x10>
 80066e8:	f04f 35ff 	mov.w	r5, #4294967295
 80066ec:	4628      	mov	r0, r5
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	8993      	ldrh	r3, [r2, #12]
 80066f2:	f023 0320 	bic.w	r3, r3, #32
 80066f6:	8193      	strh	r3, [r2, #12]
 80066f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066fa:	6852      	ldr	r2, [r2, #4]
 80066fc:	b2cd      	uxtb	r5, r1
 80066fe:	b18b      	cbz	r3, 8006724 <_sungetc_r+0x44>
 8006700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006702:	4293      	cmp	r3, r2
 8006704:	dd08      	ble.n	8006718 <_sungetc_r+0x38>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	6022      	str	r2, [r4, #0]
 800670c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	3301      	adds	r3, #1
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	e7e9      	b.n	80066ec <_sungetc_r+0xc>
 8006718:	4621      	mov	r1, r4
 800671a:	f000 ff8d 	bl	8007638 <__submore>
 800671e:	2800      	cmp	r0, #0
 8006720:	d0f1      	beq.n	8006706 <_sungetc_r+0x26>
 8006722:	e7e1      	b.n	80066e8 <_sungetc_r+0x8>
 8006724:	6921      	ldr	r1, [r4, #16]
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	b151      	cbz	r1, 8006740 <_sungetc_r+0x60>
 800672a:	4299      	cmp	r1, r3
 800672c:	d208      	bcs.n	8006740 <_sungetc_r+0x60>
 800672e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006732:	42a9      	cmp	r1, r5
 8006734:	d104      	bne.n	8006740 <_sungetc_r+0x60>
 8006736:	3b01      	subs	r3, #1
 8006738:	3201      	adds	r2, #1
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	6062      	str	r2, [r4, #4]
 800673e:	e7d5      	b.n	80066ec <_sungetc_r+0xc>
 8006740:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006748:	6363      	str	r3, [r4, #52]	; 0x34
 800674a:	2303      	movs	r3, #3
 800674c:	63a3      	str	r3, [r4, #56]	; 0x38
 800674e:	4623      	mov	r3, r4
 8006750:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	2301      	movs	r3, #1
 8006758:	e7dc      	b.n	8006714 <_sungetc_r+0x34>

0800675a <__ssrefill_r>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006760:	b169      	cbz	r1, 800677e <__ssrefill_r+0x24>
 8006762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006766:	4299      	cmp	r1, r3
 8006768:	d001      	beq.n	800676e <__ssrefill_r+0x14>
 800676a:	f7ff fd7d 	bl	8006268 <_free_r>
 800676e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006770:	6063      	str	r3, [r4, #4]
 8006772:	2000      	movs	r0, #0
 8006774:	6360      	str	r0, [r4, #52]	; 0x34
 8006776:	b113      	cbz	r3, 800677e <__ssrefill_r+0x24>
 8006778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	bd10      	pop	{r4, pc}
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	e7f3      	b.n	800677c <__ssrefill_r+0x22>

08006794 <__ssvfiscanf_r>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	460c      	mov	r4, r1
 800679a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800679e:	2100      	movs	r1, #0
 80067a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80067a4:	49a6      	ldr	r1, [pc, #664]	; (8006a40 <__ssvfiscanf_r+0x2ac>)
 80067a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80067a8:	f10d 0804 	add.w	r8, sp, #4
 80067ac:	49a5      	ldr	r1, [pc, #660]	; (8006a44 <__ssvfiscanf_r+0x2b0>)
 80067ae:	4fa6      	ldr	r7, [pc, #664]	; (8006a48 <__ssvfiscanf_r+0x2b4>)
 80067b0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006a4c <__ssvfiscanf_r+0x2b8>
 80067b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80067b8:	4606      	mov	r6, r0
 80067ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	7813      	ldrb	r3, [r2, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 815a 	beq.w	8006a7a <__ssvfiscanf_r+0x2e6>
 80067c6:	5dd9      	ldrb	r1, [r3, r7]
 80067c8:	f011 0108 	ands.w	r1, r1, #8
 80067cc:	f102 0501 	add.w	r5, r2, #1
 80067d0:	d019      	beq.n	8006806 <__ssvfiscanf_r+0x72>
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd0f      	ble.n	80067f8 <__ssvfiscanf_r+0x64>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	5cba      	ldrb	r2, [r7, r2]
 80067de:	0712      	lsls	r2, r2, #28
 80067e0:	d401      	bmi.n	80067e6 <__ssvfiscanf_r+0x52>
 80067e2:	462a      	mov	r2, r5
 80067e4:	e7eb      	b.n	80067be <__ssvfiscanf_r+0x2a>
 80067e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80067e8:	3201      	adds	r2, #1
 80067ea:	9245      	str	r2, [sp, #276]	; 0x114
 80067ec:	6862      	ldr	r2, [r4, #4]
 80067ee:	3301      	adds	r3, #1
 80067f0:	3a01      	subs	r2, #1
 80067f2:	6062      	str	r2, [r4, #4]
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	e7ec      	b.n	80067d2 <__ssvfiscanf_r+0x3e>
 80067f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80067fa:	4621      	mov	r1, r4
 80067fc:	4630      	mov	r0, r6
 80067fe:	4798      	blx	r3
 8006800:	2800      	cmp	r0, #0
 8006802:	d0e9      	beq.n	80067d8 <__ssvfiscanf_r+0x44>
 8006804:	e7ed      	b.n	80067e2 <__ssvfiscanf_r+0x4e>
 8006806:	2b25      	cmp	r3, #37	; 0x25
 8006808:	d012      	beq.n	8006830 <__ssvfiscanf_r+0x9c>
 800680a:	469a      	mov	sl, r3
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f340 8091 	ble.w	8006936 <__ssvfiscanf_r+0x1a2>
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	7813      	ldrb	r3, [r2, #0]
 8006818:	4553      	cmp	r3, sl
 800681a:	f040 812e 	bne.w	8006a7a <__ssvfiscanf_r+0x2e6>
 800681e:	6863      	ldr	r3, [r4, #4]
 8006820:	3b01      	subs	r3, #1
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006826:	3201      	adds	r2, #1
 8006828:	3301      	adds	r3, #1
 800682a:	6022      	str	r2, [r4, #0]
 800682c:	9345      	str	r3, [sp, #276]	; 0x114
 800682e:	e7d8      	b.n	80067e2 <__ssvfiscanf_r+0x4e>
 8006830:	9141      	str	r1, [sp, #260]	; 0x104
 8006832:	9143      	str	r1, [sp, #268]	; 0x10c
 8006834:	7853      	ldrb	r3, [r2, #1]
 8006836:	2b2a      	cmp	r3, #42	; 0x2a
 8006838:	bf02      	ittt	eq
 800683a:	2310      	moveq	r3, #16
 800683c:	1c95      	addeq	r5, r2, #2
 800683e:	9341      	streq	r3, [sp, #260]	; 0x104
 8006840:	220a      	movs	r2, #10
 8006842:	46aa      	mov	sl, r5
 8006844:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006848:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800684c:	2b09      	cmp	r3, #9
 800684e:	d91d      	bls.n	800688c <__ssvfiscanf_r+0xf8>
 8006850:	487e      	ldr	r0, [pc, #504]	; (8006a4c <__ssvfiscanf_r+0x2b8>)
 8006852:	2203      	movs	r2, #3
 8006854:	f7f9 fcc4 	bl	80001e0 <memchr>
 8006858:	b140      	cbz	r0, 800686c <__ssvfiscanf_r+0xd8>
 800685a:	2301      	movs	r3, #1
 800685c:	eba0 0009 	sub.w	r0, r0, r9
 8006860:	fa03 f000 	lsl.w	r0, r3, r0
 8006864:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006866:	4318      	orrs	r0, r3
 8006868:	9041      	str	r0, [sp, #260]	; 0x104
 800686a:	4655      	mov	r5, sl
 800686c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006870:	2b78      	cmp	r3, #120	; 0x78
 8006872:	d806      	bhi.n	8006882 <__ssvfiscanf_r+0xee>
 8006874:	2b57      	cmp	r3, #87	; 0x57
 8006876:	d810      	bhi.n	800689a <__ssvfiscanf_r+0x106>
 8006878:	2b25      	cmp	r3, #37	; 0x25
 800687a:	d0c6      	beq.n	800680a <__ssvfiscanf_r+0x76>
 800687c:	d856      	bhi.n	800692c <__ssvfiscanf_r+0x198>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d064      	beq.n	800694c <__ssvfiscanf_r+0x1b8>
 8006882:	2303      	movs	r3, #3
 8006884:	9347      	str	r3, [sp, #284]	; 0x11c
 8006886:	230a      	movs	r3, #10
 8006888:	9342      	str	r3, [sp, #264]	; 0x108
 800688a:	e071      	b.n	8006970 <__ssvfiscanf_r+0x1dc>
 800688c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800688e:	fb02 1103 	mla	r1, r2, r3, r1
 8006892:	3930      	subs	r1, #48	; 0x30
 8006894:	9143      	str	r1, [sp, #268]	; 0x10c
 8006896:	4655      	mov	r5, sl
 8006898:	e7d3      	b.n	8006842 <__ssvfiscanf_r+0xae>
 800689a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800689e:	2a20      	cmp	r2, #32
 80068a0:	d8ef      	bhi.n	8006882 <__ssvfiscanf_r+0xee>
 80068a2:	a101      	add	r1, pc, #4	; (adr r1, 80068a8 <__ssvfiscanf_r+0x114>)
 80068a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068a8:	0800695b 	.word	0x0800695b
 80068ac:	08006883 	.word	0x08006883
 80068b0:	08006883 	.word	0x08006883
 80068b4:	080069b9 	.word	0x080069b9
 80068b8:	08006883 	.word	0x08006883
 80068bc:	08006883 	.word	0x08006883
 80068c0:	08006883 	.word	0x08006883
 80068c4:	08006883 	.word	0x08006883
 80068c8:	08006883 	.word	0x08006883
 80068cc:	08006883 	.word	0x08006883
 80068d0:	08006883 	.word	0x08006883
 80068d4:	080069cf 	.word	0x080069cf
 80068d8:	080069a5 	.word	0x080069a5
 80068dc:	08006933 	.word	0x08006933
 80068e0:	08006933 	.word	0x08006933
 80068e4:	08006933 	.word	0x08006933
 80068e8:	08006883 	.word	0x08006883
 80068ec:	080069a9 	.word	0x080069a9
 80068f0:	08006883 	.word	0x08006883
 80068f4:	08006883 	.word	0x08006883
 80068f8:	08006883 	.word	0x08006883
 80068fc:	08006883 	.word	0x08006883
 8006900:	080069df 	.word	0x080069df
 8006904:	080069b1 	.word	0x080069b1
 8006908:	08006953 	.word	0x08006953
 800690c:	08006883 	.word	0x08006883
 8006910:	08006883 	.word	0x08006883
 8006914:	080069db 	.word	0x080069db
 8006918:	08006883 	.word	0x08006883
 800691c:	080069a5 	.word	0x080069a5
 8006920:	08006883 	.word	0x08006883
 8006924:	08006883 	.word	0x08006883
 8006928:	0800695b 	.word	0x0800695b
 800692c:	3b45      	subs	r3, #69	; 0x45
 800692e:	2b02      	cmp	r3, #2
 8006930:	d8a7      	bhi.n	8006882 <__ssvfiscanf_r+0xee>
 8006932:	2305      	movs	r3, #5
 8006934:	e01b      	b.n	800696e <__ssvfiscanf_r+0x1da>
 8006936:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006938:	4621      	mov	r1, r4
 800693a:	4630      	mov	r0, r6
 800693c:	4798      	blx	r3
 800693e:	2800      	cmp	r0, #0
 8006940:	f43f af68 	beq.w	8006814 <__ssvfiscanf_r+0x80>
 8006944:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 808d 	bne.w	8006a66 <__ssvfiscanf_r+0x2d2>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	e08f      	b.n	8006a72 <__ssvfiscanf_r+0x2de>
 8006952:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006954:	f042 0220 	orr.w	r2, r2, #32
 8006958:	9241      	str	r2, [sp, #260]	; 0x104
 800695a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800695c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006960:	9241      	str	r2, [sp, #260]	; 0x104
 8006962:	2210      	movs	r2, #16
 8006964:	2b6f      	cmp	r3, #111	; 0x6f
 8006966:	9242      	str	r2, [sp, #264]	; 0x108
 8006968:	bf34      	ite	cc
 800696a:	2303      	movcc	r3, #3
 800696c:	2304      	movcs	r3, #4
 800696e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd42      	ble.n	80069fc <__ssvfiscanf_r+0x268>
 8006976:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006978:	0659      	lsls	r1, r3, #25
 800697a:	d404      	bmi.n	8006986 <__ssvfiscanf_r+0x1f2>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	5cba      	ldrb	r2, [r7, r2]
 8006982:	0712      	lsls	r2, r2, #28
 8006984:	d441      	bmi.n	8006a0a <__ssvfiscanf_r+0x276>
 8006986:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006988:	2b02      	cmp	r3, #2
 800698a:	dc50      	bgt.n	8006a2e <__ssvfiscanf_r+0x29a>
 800698c:	466b      	mov	r3, sp
 800698e:	4622      	mov	r2, r4
 8006990:	a941      	add	r1, sp, #260	; 0x104
 8006992:	4630      	mov	r0, r6
 8006994:	f000 fb64 	bl	8007060 <_scanf_chars>
 8006998:	2801      	cmp	r0, #1
 800699a:	d06e      	beq.n	8006a7a <__ssvfiscanf_r+0x2e6>
 800699c:	2802      	cmp	r0, #2
 800699e:	f47f af20 	bne.w	80067e2 <__ssvfiscanf_r+0x4e>
 80069a2:	e7cf      	b.n	8006944 <__ssvfiscanf_r+0x1b0>
 80069a4:	220a      	movs	r2, #10
 80069a6:	e7dd      	b.n	8006964 <__ssvfiscanf_r+0x1d0>
 80069a8:	2300      	movs	r3, #0
 80069aa:	9342      	str	r3, [sp, #264]	; 0x108
 80069ac:	2303      	movs	r3, #3
 80069ae:	e7de      	b.n	800696e <__ssvfiscanf_r+0x1da>
 80069b0:	2308      	movs	r3, #8
 80069b2:	9342      	str	r3, [sp, #264]	; 0x108
 80069b4:	2304      	movs	r3, #4
 80069b6:	e7da      	b.n	800696e <__ssvfiscanf_r+0x1da>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4640      	mov	r0, r8
 80069bc:	f000 fd0c 	bl	80073d8 <__sccl>
 80069c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80069c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c6:	9341      	str	r3, [sp, #260]	; 0x104
 80069c8:	4605      	mov	r5, r0
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7cf      	b.n	800696e <__ssvfiscanf_r+0x1da>
 80069ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80069d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d4:	9341      	str	r3, [sp, #260]	; 0x104
 80069d6:	2300      	movs	r3, #0
 80069d8:	e7c9      	b.n	800696e <__ssvfiscanf_r+0x1da>
 80069da:	2302      	movs	r3, #2
 80069dc:	e7c7      	b.n	800696e <__ssvfiscanf_r+0x1da>
 80069de:	9841      	ldr	r0, [sp, #260]	; 0x104
 80069e0:	06c3      	lsls	r3, r0, #27
 80069e2:	f53f aefe 	bmi.w	80067e2 <__ssvfiscanf_r+0x4e>
 80069e6:	9b00      	ldr	r3, [sp, #0]
 80069e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80069ea:	1d19      	adds	r1, r3, #4
 80069ec:	9100      	str	r1, [sp, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f010 0f01 	tst.w	r0, #1
 80069f4:	bf14      	ite	ne
 80069f6:	801a      	strhne	r2, [r3, #0]
 80069f8:	601a      	streq	r2, [r3, #0]
 80069fa:	e6f2      	b.n	80067e2 <__ssvfiscanf_r+0x4e>
 80069fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069fe:	4621      	mov	r1, r4
 8006a00:	4630      	mov	r0, r6
 8006a02:	4798      	blx	r3
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d0b6      	beq.n	8006976 <__ssvfiscanf_r+0x1e2>
 8006a08:	e79c      	b.n	8006944 <__ssvfiscanf_r+0x1b0>
 8006a0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a0c:	3201      	adds	r2, #1
 8006a0e:	9245      	str	r2, [sp, #276]	; 0x114
 8006a10:	6862      	ldr	r2, [r4, #4]
 8006a12:	3a01      	subs	r2, #1
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	6062      	str	r2, [r4, #4]
 8006a18:	dd02      	ble.n	8006a20 <__ssvfiscanf_r+0x28c>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	e7ad      	b.n	800697c <__ssvfiscanf_r+0x1e8>
 8006a20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a22:	4621      	mov	r1, r4
 8006a24:	4630      	mov	r0, r6
 8006a26:	4798      	blx	r3
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0a7      	beq.n	800697c <__ssvfiscanf_r+0x1e8>
 8006a2c:	e78a      	b.n	8006944 <__ssvfiscanf_r+0x1b0>
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	dc0e      	bgt.n	8006a50 <__ssvfiscanf_r+0x2bc>
 8006a32:	466b      	mov	r3, sp
 8006a34:	4622      	mov	r2, r4
 8006a36:	a941      	add	r1, sp, #260	; 0x104
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 fb6b 	bl	8007114 <_scanf_i>
 8006a3e:	e7ab      	b.n	8006998 <__ssvfiscanf_r+0x204>
 8006a40:	080066e1 	.word	0x080066e1
 8006a44:	0800675b 	.word	0x0800675b
 8006a48:	08007dbf 	.word	0x08007dbf
 8006a4c:	08007d76 	.word	0x08007d76
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <__ssvfiscanf_r+0x2ec>)
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f aec5 	beq.w	80067e2 <__ssvfiscanf_r+0x4e>
 8006a58:	466b      	mov	r3, sp
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	a941      	add	r1, sp, #260	; 0x104
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f3af 8000 	nop.w
 8006a64:	e798      	b.n	8006998 <__ssvfiscanf_r+0x204>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a6c:	bf18      	it	ne
 8006a6e:	f04f 30ff 	movne.w	r0, #4294967295
 8006a72:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006a7c:	e7f9      	b.n	8006a72 <__ssvfiscanf_r+0x2de>
 8006a7e:	bf00      	nop
 8006a80:	00000000 	.word	0x00000000

08006a84 <__sfputc_r>:
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	b410      	push	{r4}
 8006a8c:	6093      	str	r3, [r2, #8]
 8006a8e:	da08      	bge.n	8006aa2 <__sfputc_r+0x1e>
 8006a90:	6994      	ldr	r4, [r2, #24]
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	db01      	blt.n	8006a9a <__sfputc_r+0x16>
 8006a96:	290a      	cmp	r1, #10
 8006a98:	d103      	bne.n	8006aa2 <__sfputc_r+0x1e>
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	f7ff b8cf 	b.w	8005c40 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <__sfputs_r>:
 8006ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	18d5      	adds	r5, r2, r3
 8006abc:	42ac      	cmp	r4, r5
 8006abe:	d101      	bne.n	8006ac4 <__sfputs_r+0x12>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e007      	b.n	8006ad4 <__sfputs_r+0x22>
 8006ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac8:	463a      	mov	r2, r7
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ffda 	bl	8006a84 <__sfputc_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d1f3      	bne.n	8006abc <__sfputs_r+0xa>
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad8 <_vfiprintf_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	460d      	mov	r5, r1
 8006ade:	b09d      	sub	sp, #116	; 0x74
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4698      	mov	r8, r3
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	b118      	cbz	r0, 8006af0 <_vfiprintf_r+0x18>
 8006ae8:	6983      	ldr	r3, [r0, #24]
 8006aea:	b90b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x18>
 8006aec:	f7ff faa4 	bl	8006038 <__sinit>
 8006af0:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <_vfiprintf_r+0x240>)
 8006af2:	429d      	cmp	r5, r3
 8006af4:	d11b      	bne.n	8006b2e <_vfiprintf_r+0x56>
 8006af6:	6875      	ldr	r5, [r6, #4]
 8006af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afa:	07d9      	lsls	r1, r3, #31
 8006afc:	d405      	bmi.n	8006b0a <_vfiprintf_r+0x32>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	059a      	lsls	r2, r3, #22
 8006b02:	d402      	bmi.n	8006b0a <_vfiprintf_r+0x32>
 8006b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b06:	f7ff fb35 	bl	8006174 <__retarget_lock_acquire_recursive>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	d501      	bpl.n	8006b14 <_vfiprintf_r+0x3c>
 8006b10:	692b      	ldr	r3, [r5, #16]
 8006b12:	b9eb      	cbnz	r3, 8006b50 <_vfiprintf_r+0x78>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff f8f6 	bl	8005d08 <__swsetup_r>
 8006b1c:	b1c0      	cbz	r0, 8006b50 <_vfiprintf_r+0x78>
 8006b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b20:	07dc      	lsls	r4, r3, #31
 8006b22:	d50e      	bpl.n	8006b42 <_vfiprintf_r+0x6a>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b01d      	add	sp, #116	; 0x74
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <_vfiprintf_r+0x244>)
 8006b30:	429d      	cmp	r5, r3
 8006b32:	d101      	bne.n	8006b38 <_vfiprintf_r+0x60>
 8006b34:	68b5      	ldr	r5, [r6, #8]
 8006b36:	e7df      	b.n	8006af8 <_vfiprintf_r+0x20>
 8006b38:	4b79      	ldr	r3, [pc, #484]	; (8006d20 <_vfiprintf_r+0x248>)
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	bf08      	it	eq
 8006b3e:	68f5      	ldreq	r5, [r6, #12]
 8006b40:	e7da      	b.n	8006af8 <_vfiprintf_r+0x20>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	0598      	lsls	r0, r3, #22
 8006b46:	d4ed      	bmi.n	8006b24 <_vfiprintf_r+0x4c>
 8006b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4a:	f7ff fb14 	bl	8006176 <__retarget_lock_release_recursive>
 8006b4e:	e7e9      	b.n	8006b24 <_vfiprintf_r+0x4c>
 8006b50:	2300      	movs	r3, #0
 8006b52:	9309      	str	r3, [sp, #36]	; 0x24
 8006b54:	2320      	movs	r3, #32
 8006b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5e:	2330      	movs	r3, #48	; 0x30
 8006b60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d24 <_vfiprintf_r+0x24c>
 8006b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b68:	f04f 0901 	mov.w	r9, #1
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	469a      	mov	sl, r3
 8006b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b74:	b10a      	cbz	r2, 8006b7a <_vfiprintf_r+0xa2>
 8006b76:	2a25      	cmp	r2, #37	; 0x25
 8006b78:	d1f9      	bne.n	8006b6e <_vfiprintf_r+0x96>
 8006b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7e:	d00b      	beq.n	8006b98 <_vfiprintf_r+0xc0>
 8006b80:	465b      	mov	r3, fp
 8006b82:	4622      	mov	r2, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ff93 	bl	8006ab2 <__sfputs_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f000 80aa 	beq.w	8006ce6 <_vfiprintf_r+0x20e>
 8006b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b94:	445a      	add	r2, fp
 8006b96:	9209      	str	r2, [sp, #36]	; 0x24
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80a2 	beq.w	8006ce6 <_vfiprintf_r+0x20e>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	9307      	str	r3, [sp, #28]
 8006bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bba:	4654      	mov	r4, sl
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc2:	4858      	ldr	r0, [pc, #352]	; (8006d24 <_vfiprintf_r+0x24c>)
 8006bc4:	f7f9 fb0c 	bl	80001e0 <memchr>
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	b9d8      	cbnz	r0, 8006c04 <_vfiprintf_r+0x12c>
 8006bcc:	06d1      	lsls	r1, r2, #27
 8006bce:	bf44      	itt	mi
 8006bd0:	2320      	movmi	r3, #32
 8006bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd6:	0713      	lsls	r3, r2, #28
 8006bd8:	bf44      	itt	mi
 8006bda:	232b      	movmi	r3, #43	; 0x2b
 8006bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b2a      	cmp	r3, #42	; 0x2a
 8006be6:	d015      	beq.n	8006c14 <_vfiprintf_r+0x13c>
 8006be8:	9a07      	ldr	r2, [sp, #28]
 8006bea:	4654      	mov	r4, sl
 8006bec:	2000      	movs	r0, #0
 8006bee:	f04f 0c0a 	mov.w	ip, #10
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf8:	3b30      	subs	r3, #48	; 0x30
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d94e      	bls.n	8006c9c <_vfiprintf_r+0x1c4>
 8006bfe:	b1b0      	cbz	r0, 8006c2e <_vfiprintf_r+0x156>
 8006c00:	9207      	str	r2, [sp, #28]
 8006c02:	e014      	b.n	8006c2e <_vfiprintf_r+0x156>
 8006c04:	eba0 0308 	sub.w	r3, r0, r8
 8006c08:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	46a2      	mov	sl, r4
 8006c12:	e7d2      	b.n	8006bba <_vfiprintf_r+0xe2>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1d19      	adds	r1, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	9103      	str	r1, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bfbb      	ittet	lt
 8006c20:	425b      	neglt	r3, r3
 8006c22:	f042 0202 	orrlt.w	r2, r2, #2
 8006c26:	9307      	strge	r3, [sp, #28]
 8006c28:	9307      	strlt	r3, [sp, #28]
 8006c2a:	bfb8      	it	lt
 8006c2c:	9204      	strlt	r2, [sp, #16]
 8006c2e:	7823      	ldrb	r3, [r4, #0]
 8006c30:	2b2e      	cmp	r3, #46	; 0x2e
 8006c32:	d10c      	bne.n	8006c4e <_vfiprintf_r+0x176>
 8006c34:	7863      	ldrb	r3, [r4, #1]
 8006c36:	2b2a      	cmp	r3, #42	; 0x2a
 8006c38:	d135      	bne.n	8006ca6 <_vfiprintf_r+0x1ce>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	9203      	str	r2, [sp, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bfb8      	it	lt
 8006c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c4a:	3402      	adds	r4, #2
 8006c4c:	9305      	str	r3, [sp, #20]
 8006c4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d34 <_vfiprintf_r+0x25c>
 8006c52:	7821      	ldrb	r1, [r4, #0]
 8006c54:	2203      	movs	r2, #3
 8006c56:	4650      	mov	r0, sl
 8006c58:	f7f9 fac2 	bl	80001e0 <memchr>
 8006c5c:	b140      	cbz	r0, 8006c70 <_vfiprintf_r+0x198>
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	eba0 000a 	sub.w	r0, r0, sl
 8006c64:	fa03 f000 	lsl.w	r0, r3, r0
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	4303      	orrs	r3, r0
 8006c6c:	3401      	adds	r4, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	482c      	ldr	r0, [pc, #176]	; (8006d28 <_vfiprintf_r+0x250>)
 8006c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	f7f9 fab0 	bl	80001e0 <memchr>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d03f      	beq.n	8006d04 <_vfiprintf_r+0x22c>
 8006c84:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <_vfiprintf_r+0x254>)
 8006c86:	bb1b      	cbnz	r3, 8006cd0 <_vfiprintf_r+0x1f8>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	3307      	adds	r3, #7
 8006c8c:	f023 0307 	bic.w	r3, r3, #7
 8006c90:	3308      	adds	r3, #8
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	443b      	add	r3, r7
 8006c98:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9a:	e767      	b.n	8006b6c <_vfiprintf_r+0x94>
 8006c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e7a5      	b.n	8006bf2 <_vfiprintf_r+0x11a>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	3401      	adds	r4, #1
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	4619      	mov	r1, r3
 8006cae:	f04f 0c0a 	mov.w	ip, #10
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb8:	3a30      	subs	r2, #48	; 0x30
 8006cba:	2a09      	cmp	r2, #9
 8006cbc:	d903      	bls.n	8006cc6 <_vfiprintf_r+0x1ee>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0c5      	beq.n	8006c4e <_vfiprintf_r+0x176>
 8006cc2:	9105      	str	r1, [sp, #20]
 8006cc4:	e7c3      	b.n	8006c4e <_vfiprintf_r+0x176>
 8006cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cca:	4604      	mov	r4, r0
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e7f0      	b.n	8006cb2 <_vfiprintf_r+0x1da>
 8006cd0:	ab03      	add	r3, sp, #12
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <_vfiprintf_r+0x258>)
 8006cd8:	a904      	add	r1, sp, #16
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	1c78      	adds	r0, r7, #1
 8006ce4:	d1d6      	bne.n	8006c94 <_vfiprintf_r+0x1bc>
 8006ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d405      	bmi.n	8006cf8 <_vfiprintf_r+0x220>
 8006cec:	89ab      	ldrh	r3, [r5, #12]
 8006cee:	059a      	lsls	r2, r3, #22
 8006cf0:	d402      	bmi.n	8006cf8 <_vfiprintf_r+0x220>
 8006cf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf4:	f7ff fa3f 	bl	8006176 <__retarget_lock_release_recursive>
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	065b      	lsls	r3, r3, #25
 8006cfc:	f53f af12 	bmi.w	8006b24 <_vfiprintf_r+0x4c>
 8006d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d02:	e711      	b.n	8006b28 <_vfiprintf_r+0x50>
 8006d04:	ab03      	add	r3, sp, #12
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <_vfiprintf_r+0x258>)
 8006d0c:	a904      	add	r1, sp, #16
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 f880 	bl	8006e14 <_printf_i>
 8006d14:	e7e4      	b.n	8006ce0 <_vfiprintf_r+0x208>
 8006d16:	bf00      	nop
 8006d18:	08007d30 	.word	0x08007d30
 8006d1c:	08007d50 	.word	0x08007d50
 8006d20:	08007d10 	.word	0x08007d10
 8006d24:	08007d70 	.word	0x08007d70
 8006d28:	08007d7a 	.word	0x08007d7a
 8006d2c:	00000000 	.word	0x00000000
 8006d30:	08006ab3 	.word	0x08006ab3
 8006d34:	08007d76 	.word	0x08007d76

08006d38 <_printf_common>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	4699      	mov	r9, r3
 8006d40:	688a      	ldr	r2, [r1, #8]
 8006d42:	690b      	ldr	r3, [r1, #16]
 8006d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bfb8      	it	lt
 8006d4c:	4613      	movlt	r3, r2
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d54:	4607      	mov	r7, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	b10a      	cbz	r2, 8006d5e <_printf_common+0x26>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6033      	str	r3, [r6, #0]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	0699      	lsls	r1, r3, #26
 8006d62:	bf42      	ittt	mi
 8006d64:	6833      	ldrmi	r3, [r6, #0]
 8006d66:	3302      	addmi	r3, #2
 8006d68:	6033      	strmi	r3, [r6, #0]
 8006d6a:	6825      	ldr	r5, [r4, #0]
 8006d6c:	f015 0506 	ands.w	r5, r5, #6
 8006d70:	d106      	bne.n	8006d80 <_printf_common+0x48>
 8006d72:	f104 0a19 	add.w	sl, r4, #25
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	6832      	ldr	r2, [r6, #0]
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dc26      	bgt.n	8006dce <_printf_common+0x96>
 8006d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d84:	1e13      	subs	r3, r2, #0
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	bf18      	it	ne
 8006d8a:	2301      	movne	r3, #1
 8006d8c:	0692      	lsls	r2, r2, #26
 8006d8e:	d42b      	bmi.n	8006de8 <_printf_common+0xb0>
 8006d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d94:	4649      	mov	r1, r9
 8006d96:	4638      	mov	r0, r7
 8006d98:	47c0      	blx	r8
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d01e      	beq.n	8006ddc <_printf_common+0xa4>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	68e5      	ldr	r5, [r4, #12]
 8006da2:	6832      	ldr	r2, [r6, #0]
 8006da4:	f003 0306 	and.w	r3, r3, #6
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	bf08      	it	eq
 8006dac:	1aad      	subeq	r5, r5, r2
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	bf0c      	ite	eq
 8006db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db8:	2500      	movne	r5, #0
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bfc4      	itt	gt
 8006dbe:	1a9b      	subgt	r3, r3, r2
 8006dc0:	18ed      	addgt	r5, r5, r3
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	341a      	adds	r4, #26
 8006dc6:	42b5      	cmp	r5, r6
 8006dc8:	d11a      	bne.n	8006e00 <_printf_common+0xc8>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e008      	b.n	8006de0 <_printf_common+0xa8>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	47c0      	blx	r8
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d103      	bne.n	8006de4 <_printf_common+0xac>
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de4:	3501      	adds	r5, #1
 8006de6:	e7c6      	b.n	8006d76 <_printf_common+0x3e>
 8006de8:	18e1      	adds	r1, r4, r3
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	2030      	movs	r0, #48	; 0x30
 8006dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df2:	4422      	add	r2, r4
 8006df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	e7c7      	b.n	8006d90 <_printf_common+0x58>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4622      	mov	r2, r4
 8006e04:	4649      	mov	r1, r9
 8006e06:	4638      	mov	r0, r7
 8006e08:	47c0      	blx	r8
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d0e6      	beq.n	8006ddc <_printf_common+0xa4>
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7d9      	b.n	8006dc6 <_printf_common+0x8e>
	...

08006e14 <_printf_i>:
 8006e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	7e0f      	ldrb	r7, [r1, #24]
 8006e1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e1c:	2f78      	cmp	r7, #120	; 0x78
 8006e1e:	4691      	mov	r9, r2
 8006e20:	4680      	mov	r8, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	469a      	mov	sl, r3
 8006e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2a:	d807      	bhi.n	8006e3c <_printf_i+0x28>
 8006e2c:	2f62      	cmp	r7, #98	; 0x62
 8006e2e:	d80a      	bhi.n	8006e46 <_printf_i+0x32>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	f000 80d8 	beq.w	8006fe6 <_printf_i+0x1d2>
 8006e36:	2f58      	cmp	r7, #88	; 0x58
 8006e38:	f000 80a3 	beq.w	8006f82 <_printf_i+0x16e>
 8006e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e44:	e03a      	b.n	8006ebc <_printf_i+0xa8>
 8006e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4a:	2b15      	cmp	r3, #21
 8006e4c:	d8f6      	bhi.n	8006e3c <_printf_i+0x28>
 8006e4e:	a101      	add	r1, pc, #4	; (adr r1, 8006e54 <_printf_i+0x40>)
 8006e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006e3d 	.word	0x08006e3d
 8006e60:	08006e3d 	.word	0x08006e3d
 8006e64:	08006e3d 	.word	0x08006e3d
 8006e68:	08006e3d 	.word	0x08006e3d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e3d 	.word	0x08006e3d
 8006e74:	08006e3d 	.word	0x08006e3d
 8006e78:	08006e3d 	.word	0x08006e3d
 8006e7c:	08006e3d 	.word	0x08006e3d
 8006e80:	08006fcd 	.word	0x08006fcd
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	08006faf 	.word	0x08006faf
 8006e8c:	08006e3d 	.word	0x08006e3d
 8006e90:	08006e3d 	.word	0x08006e3d
 8006e94:	08006fef 	.word	0x08006fef
 8006e98:	08006e3d 	.word	0x08006e3d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e3d 	.word	0x08006e3d
 8006ea4:	08006e3d 	.word	0x08006e3d
 8006ea8:	08006fb7 	.word	0x08006fb7
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	1d1a      	adds	r2, r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	602a      	str	r2, [r5, #0]
 8006eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0a3      	b.n	8007008 <_printf_i+0x1f4>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	6829      	ldr	r1, [r5, #0]
 8006ec4:	0606      	lsls	r6, r0, #24
 8006ec6:	f101 0304 	add.w	r3, r1, #4
 8006eca:	d50a      	bpl.n	8006ee2 <_printf_i+0xce>
 8006ecc:	680e      	ldr	r6, [r1, #0]
 8006ece:	602b      	str	r3, [r5, #0]
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	da03      	bge.n	8006edc <_printf_i+0xc8>
 8006ed4:	232d      	movs	r3, #45	; 0x2d
 8006ed6:	4276      	negs	r6, r6
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006edc:	485e      	ldr	r0, [pc, #376]	; (8007058 <_printf_i+0x244>)
 8006ede:	230a      	movs	r3, #10
 8006ee0:	e019      	b.n	8006f16 <_printf_i+0x102>
 8006ee2:	680e      	ldr	r6, [r1, #0]
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eea:	bf18      	it	ne
 8006eec:	b236      	sxthne	r6, r6
 8006eee:	e7ef      	b.n	8006ed0 <_printf_i+0xbc>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0601      	lsls	r1, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xec>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xf2>
 8006f00:	0646      	lsls	r6, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe8>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4854      	ldr	r0, [pc, #336]	; (8007058 <_printf_i+0x244>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x118>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04d      	beq.n	8006fc8 <_printf_i+0x1b4>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x11a>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x14c>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x14c>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee2 	bl	8006d38 <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14c      	bne.n	8007012 <_printf_i+0x1fe>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	4835      	ldr	r0, [pc, #212]	; (8007058 <_printf_i+0x244>)
 8006f84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f88:	6829      	ldr	r1, [r5, #0]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f90:	6029      	str	r1, [r5, #0]
 8006f92:	061d      	lsls	r5, r3, #24
 8006f94:	d514      	bpl.n	8006fc0 <_printf_i+0x1ac>
 8006f96:	07df      	lsls	r7, r3, #31
 8006f98:	bf44      	itt	mi
 8006f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9e:	6023      	strmi	r3, [r4, #0]
 8006fa0:	b91e      	cbnz	r6, 8006faa <_printf_i+0x196>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f023 0320 	bic.w	r3, r3, #32
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	2310      	movs	r3, #16
 8006fac:	e7b0      	b.n	8006f10 <_printf_i+0xfc>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f043 0320 	orr.w	r3, r3, #32
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	2378      	movs	r3, #120	; 0x78
 8006fb8:	4828      	ldr	r0, [pc, #160]	; (800705c <_printf_i+0x248>)
 8006fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fbe:	e7e3      	b.n	8006f88 <_printf_i+0x174>
 8006fc0:	0659      	lsls	r1, r3, #25
 8006fc2:	bf48      	it	mi
 8006fc4:	b2b6      	uxthmi	r6, r6
 8006fc6:	e7e6      	b.n	8006f96 <_printf_i+0x182>
 8006fc8:	4615      	mov	r5, r2
 8006fca:	e7bb      	b.n	8006f44 <_printf_i+0x130>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	6826      	ldr	r6, [r4, #0]
 8006fd0:	6961      	ldr	r1, [r4, #20]
 8006fd2:	1d18      	adds	r0, r3, #4
 8006fd4:	6028      	str	r0, [r5, #0]
 8006fd6:	0635      	lsls	r5, r6, #24
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	d501      	bpl.n	8006fe0 <_printf_i+0x1cc>
 8006fdc:	6019      	str	r1, [r3, #0]
 8006fde:	e002      	b.n	8006fe6 <_printf_i+0x1d2>
 8006fe0:	0670      	lsls	r0, r6, #25
 8006fe2:	d5fb      	bpl.n	8006fdc <_printf_i+0x1c8>
 8006fe4:	8019      	strh	r1, [r3, #0]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	4615      	mov	r5, r2
 8006fec:	e7ba      	b.n	8006f64 <_printf_i+0x150>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	1d1a      	adds	r2, r3, #4
 8006ff2:	602a      	str	r2, [r5, #0]
 8006ff4:	681d      	ldr	r5, [r3, #0]
 8006ff6:	6862      	ldr	r2, [r4, #4]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7f9 f8f0 	bl	80001e0 <memchr>
 8007000:	b108      	cbz	r0, 8007006 <_printf_i+0x1f2>
 8007002:	1b40      	subs	r0, r0, r5
 8007004:	6060      	str	r0, [r4, #4]
 8007006:	6863      	ldr	r3, [r4, #4]
 8007008:	6123      	str	r3, [r4, #16]
 800700a:	2300      	movs	r3, #0
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007010:	e7a8      	b.n	8006f64 <_printf_i+0x150>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	462a      	mov	r2, r5
 8007016:	4649      	mov	r1, r9
 8007018:	4640      	mov	r0, r8
 800701a:	47d0      	blx	sl
 800701c:	3001      	adds	r0, #1
 800701e:	d0ab      	beq.n	8006f78 <_printf_i+0x164>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	079b      	lsls	r3, r3, #30
 8007024:	d413      	bmi.n	800704e <_printf_i+0x23a>
 8007026:	68e0      	ldr	r0, [r4, #12]
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	4298      	cmp	r0, r3
 800702c:	bfb8      	it	lt
 800702e:	4618      	movlt	r0, r3
 8007030:	e7a4      	b.n	8006f7c <_printf_i+0x168>
 8007032:	2301      	movs	r3, #1
 8007034:	4632      	mov	r2, r6
 8007036:	4649      	mov	r1, r9
 8007038:	4640      	mov	r0, r8
 800703a:	47d0      	blx	sl
 800703c:	3001      	adds	r0, #1
 800703e:	d09b      	beq.n	8006f78 <_printf_i+0x164>
 8007040:	3501      	adds	r5, #1
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	9903      	ldr	r1, [sp, #12]
 8007046:	1a5b      	subs	r3, r3, r1
 8007048:	42ab      	cmp	r3, r5
 800704a:	dcf2      	bgt.n	8007032 <_printf_i+0x21e>
 800704c:	e7eb      	b.n	8007026 <_printf_i+0x212>
 800704e:	2500      	movs	r5, #0
 8007050:	f104 0619 	add.w	r6, r4, #25
 8007054:	e7f5      	b.n	8007042 <_printf_i+0x22e>
 8007056:	bf00      	nop
 8007058:	08007d81 	.word	0x08007d81
 800705c:	08007d92 	.word	0x08007d92

08007060 <_scanf_chars>:
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	4615      	mov	r5, r2
 8007066:	688a      	ldr	r2, [r1, #8]
 8007068:	4680      	mov	r8, r0
 800706a:	460c      	mov	r4, r1
 800706c:	b932      	cbnz	r2, 800707c <_scanf_chars+0x1c>
 800706e:	698a      	ldr	r2, [r1, #24]
 8007070:	2a00      	cmp	r2, #0
 8007072:	bf0c      	ite	eq
 8007074:	2201      	moveq	r2, #1
 8007076:	f04f 32ff 	movne.w	r2, #4294967295
 800707a:	608a      	str	r2, [r1, #8]
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007110 <_scanf_chars+0xb0>
 8007082:	06d1      	lsls	r1, r2, #27
 8007084:	bf5f      	itttt	pl
 8007086:	681a      	ldrpl	r2, [r3, #0]
 8007088:	1d11      	addpl	r1, r2, #4
 800708a:	6019      	strpl	r1, [r3, #0]
 800708c:	6816      	ldrpl	r6, [r2, #0]
 800708e:	2700      	movs	r7, #0
 8007090:	69a0      	ldr	r0, [r4, #24]
 8007092:	b188      	cbz	r0, 80070b8 <_scanf_chars+0x58>
 8007094:	2801      	cmp	r0, #1
 8007096:	d107      	bne.n	80070a8 <_scanf_chars+0x48>
 8007098:	682a      	ldr	r2, [r5, #0]
 800709a:	7811      	ldrb	r1, [r2, #0]
 800709c:	6962      	ldr	r2, [r4, #20]
 800709e:	5c52      	ldrb	r2, [r2, r1]
 80070a0:	b952      	cbnz	r2, 80070b8 <_scanf_chars+0x58>
 80070a2:	2f00      	cmp	r7, #0
 80070a4:	d031      	beq.n	800710a <_scanf_chars+0xaa>
 80070a6:	e022      	b.n	80070ee <_scanf_chars+0x8e>
 80070a8:	2802      	cmp	r0, #2
 80070aa:	d120      	bne.n	80070ee <_scanf_chars+0x8e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80070b4:	071b      	lsls	r3, r3, #28
 80070b6:	d41a      	bmi.n	80070ee <_scanf_chars+0x8e>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	06da      	lsls	r2, r3, #27
 80070bc:	bf5e      	ittt	pl
 80070be:	682b      	ldrpl	r3, [r5, #0]
 80070c0:	781b      	ldrbpl	r3, [r3, #0]
 80070c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80070c6:	682a      	ldr	r2, [r5, #0]
 80070c8:	686b      	ldr	r3, [r5, #4]
 80070ca:	3201      	adds	r2, #1
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	68a2      	ldr	r2, [r4, #8]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	3a01      	subs	r2, #1
 80070d4:	606b      	str	r3, [r5, #4]
 80070d6:	3701      	adds	r7, #1
 80070d8:	60a2      	str	r2, [r4, #8]
 80070da:	b142      	cbz	r2, 80070ee <_scanf_chars+0x8e>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dcd7      	bgt.n	8007090 <_scanf_chars+0x30>
 80070e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070e4:	4629      	mov	r1, r5
 80070e6:	4640      	mov	r0, r8
 80070e8:	4798      	blx	r3
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d0d0      	beq.n	8007090 <_scanf_chars+0x30>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f013 0310 	ands.w	r3, r3, #16
 80070f4:	d105      	bne.n	8007102 <_scanf_chars+0xa2>
 80070f6:	68e2      	ldr	r2, [r4, #12]
 80070f8:	3201      	adds	r2, #1
 80070fa:	60e2      	str	r2, [r4, #12]
 80070fc:	69a2      	ldr	r2, [r4, #24]
 80070fe:	b102      	cbz	r2, 8007102 <_scanf_chars+0xa2>
 8007100:	7033      	strb	r3, [r6, #0]
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	443b      	add	r3, r7
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	2000      	movs	r0, #0
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	bf00      	nop
 8007110:	08007dbf 	.word	0x08007dbf

08007114 <_scanf_i>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4698      	mov	r8, r3
 800711a:	4b76      	ldr	r3, [pc, #472]	; (80072f4 <_scanf_i+0x1e0>)
 800711c:	460c      	mov	r4, r1
 800711e:	4682      	mov	sl, r0
 8007120:	4616      	mov	r6, r2
 8007122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007126:	b087      	sub	sp, #28
 8007128:	ab03      	add	r3, sp, #12
 800712a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800712e:	4b72      	ldr	r3, [pc, #456]	; (80072f8 <_scanf_i+0x1e4>)
 8007130:	69a1      	ldr	r1, [r4, #24]
 8007132:	4a72      	ldr	r2, [pc, #456]	; (80072fc <_scanf_i+0x1e8>)
 8007134:	2903      	cmp	r1, #3
 8007136:	bf18      	it	ne
 8007138:	461a      	movne	r2, r3
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	9201      	str	r2, [sp, #4]
 800713e:	1e5a      	subs	r2, r3, #1
 8007140:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007144:	bf88      	it	hi
 8007146:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800714a:	4627      	mov	r7, r4
 800714c:	bf82      	ittt	hi
 800714e:	eb03 0905 	addhi.w	r9, r3, r5
 8007152:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007156:	60a3      	strhi	r3, [r4, #8]
 8007158:	f857 3b1c 	ldr.w	r3, [r7], #28
 800715c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007160:	bf98      	it	ls
 8007162:	f04f 0900 	movls.w	r9, #0
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	463d      	mov	r5, r7
 800716a:	f04f 0b00 	mov.w	fp, #0
 800716e:	6831      	ldr	r1, [r6, #0]
 8007170:	ab03      	add	r3, sp, #12
 8007172:	7809      	ldrb	r1, [r1, #0]
 8007174:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007178:	2202      	movs	r2, #2
 800717a:	f7f9 f831 	bl	80001e0 <memchr>
 800717e:	b328      	cbz	r0, 80071cc <_scanf_i+0xb8>
 8007180:	f1bb 0f01 	cmp.w	fp, #1
 8007184:	d159      	bne.n	800723a <_scanf_i+0x126>
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	b92a      	cbnz	r2, 8007196 <_scanf_i+0x82>
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	2308      	movs	r3, #8
 800718e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	68a2      	ldr	r2, [r4, #8]
 80071a0:	1e51      	subs	r1, r2, #1
 80071a2:	60a1      	str	r1, [r4, #8]
 80071a4:	b192      	cbz	r2, 80071cc <_scanf_i+0xb8>
 80071a6:	6832      	ldr	r2, [r6, #0]
 80071a8:	1c51      	adds	r1, r2, #1
 80071aa:	6031      	str	r1, [r6, #0]
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	f805 2b01 	strb.w	r2, [r5], #1
 80071b2:	6872      	ldr	r2, [r6, #4]
 80071b4:	3a01      	subs	r2, #1
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	6072      	str	r2, [r6, #4]
 80071ba:	dc07      	bgt.n	80071cc <_scanf_i+0xb8>
 80071bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80071c0:	4631      	mov	r1, r6
 80071c2:	4650      	mov	r0, sl
 80071c4:	4790      	blx	r2
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f040 8085 	bne.w	80072d6 <_scanf_i+0x1c2>
 80071cc:	f10b 0b01 	add.w	fp, fp, #1
 80071d0:	f1bb 0f03 	cmp.w	fp, #3
 80071d4:	d1cb      	bne.n	800716e <_scanf_i+0x5a>
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	b90b      	cbnz	r3, 80071de <_scanf_i+0xca>
 80071da:	230a      	movs	r3, #10
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	4947      	ldr	r1, [pc, #284]	; (8007300 <_scanf_i+0x1ec>)
 80071e2:	6960      	ldr	r0, [r4, #20]
 80071e4:	1ac9      	subs	r1, r1, r3
 80071e6:	f000 f8f7 	bl	80073d8 <__sccl>
 80071ea:	f04f 0b00 	mov.w	fp, #0
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d03d      	beq.n	8007272 <_scanf_i+0x15e>
 80071f6:	6831      	ldr	r1, [r6, #0]
 80071f8:	6960      	ldr	r0, [r4, #20]
 80071fa:	f891 c000 	ldrb.w	ip, [r1]
 80071fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007202:	2800      	cmp	r0, #0
 8007204:	d035      	beq.n	8007272 <_scanf_i+0x15e>
 8007206:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800720a:	d124      	bne.n	8007256 <_scanf_i+0x142>
 800720c:	0510      	lsls	r0, r2, #20
 800720e:	d522      	bpl.n	8007256 <_scanf_i+0x142>
 8007210:	f10b 0b01 	add.w	fp, fp, #1
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	d003      	beq.n	8007222 <_scanf_i+0x10e>
 800721a:	3301      	adds	r3, #1
 800721c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	6873      	ldr	r3, [r6, #4]
 8007224:	3b01      	subs	r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	6073      	str	r3, [r6, #4]
 800722a:	dd1b      	ble.n	8007264 <_scanf_i+0x150>
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	3301      	adds	r3, #1
 8007230:	6033      	str	r3, [r6, #0]
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	e7d9      	b.n	80071ee <_scanf_i+0xda>
 800723a:	f1bb 0f02 	cmp.w	fp, #2
 800723e:	d1ae      	bne.n	800719e <_scanf_i+0x8a>
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007246:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800724a:	d1bf      	bne.n	80071cc <_scanf_i+0xb8>
 800724c:	2310      	movs	r3, #16
 800724e:	6063      	str	r3, [r4, #4]
 8007250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007254:	e7a2      	b.n	800719c <_scanf_i+0x88>
 8007256:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800725a:	6022      	str	r2, [r4, #0]
 800725c:	780b      	ldrb	r3, [r1, #0]
 800725e:	f805 3b01 	strb.w	r3, [r5], #1
 8007262:	e7de      	b.n	8007222 <_scanf_i+0x10e>
 8007264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007268:	4631      	mov	r1, r6
 800726a:	4650      	mov	r0, sl
 800726c:	4798      	blx	r3
 800726e:	2800      	cmp	r0, #0
 8007270:	d0df      	beq.n	8007232 <_scanf_i+0x11e>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	05db      	lsls	r3, r3, #23
 8007276:	d50d      	bpl.n	8007294 <_scanf_i+0x180>
 8007278:	42bd      	cmp	r5, r7
 800727a:	d909      	bls.n	8007290 <_scanf_i+0x17c>
 800727c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007284:	4632      	mov	r2, r6
 8007286:	4650      	mov	r0, sl
 8007288:	4798      	blx	r3
 800728a:	f105 39ff 	add.w	r9, r5, #4294967295
 800728e:	464d      	mov	r5, r9
 8007290:	42bd      	cmp	r5, r7
 8007292:	d02d      	beq.n	80072f0 <_scanf_i+0x1dc>
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	f012 0210 	ands.w	r2, r2, #16
 800729a:	d113      	bne.n	80072c4 <_scanf_i+0x1b0>
 800729c:	702a      	strb	r2, [r5, #0]
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	9e01      	ldr	r6, [sp, #4]
 80072a2:	4639      	mov	r1, r7
 80072a4:	4650      	mov	r0, sl
 80072a6:	47b0      	blx	r6
 80072a8:	6821      	ldr	r1, [r4, #0]
 80072aa:	f8d8 3000 	ldr.w	r3, [r8]
 80072ae:	f011 0f20 	tst.w	r1, #32
 80072b2:	d013      	beq.n	80072dc <_scanf_i+0x1c8>
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	f8c8 2000 	str.w	r2, [r8]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6018      	str	r0, [r3, #0]
 80072be:	68e3      	ldr	r3, [r4, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60e3      	str	r3, [r4, #12]
 80072c4:	1bed      	subs	r5, r5, r7
 80072c6:	44ab      	add	fp, r5
 80072c8:	6925      	ldr	r5, [r4, #16]
 80072ca:	445d      	add	r5, fp
 80072cc:	6125      	str	r5, [r4, #16]
 80072ce:	2000      	movs	r0, #0
 80072d0:	b007      	add	sp, #28
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	f04f 0b00 	mov.w	fp, #0
 80072da:	e7ca      	b.n	8007272 <_scanf_i+0x15e>
 80072dc:	1d1a      	adds	r2, r3, #4
 80072de:	f8c8 2000 	str.w	r2, [r8]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f011 0f01 	tst.w	r1, #1
 80072e8:	bf14      	ite	ne
 80072ea:	8018      	strhne	r0, [r3, #0]
 80072ec:	6018      	streq	r0, [r3, #0]
 80072ee:	e7e6      	b.n	80072be <_scanf_i+0x1aa>
 80072f0:	2001      	movs	r0, #1
 80072f2:	e7ed      	b.n	80072d0 <_scanf_i+0x1bc>
 80072f4:	080077e0 	.word	0x080077e0
 80072f8:	08007635 	.word	0x08007635
 80072fc:	0800754d 	.word	0x0800754d
 8007300:	08007dbc 	.word	0x08007dbc

08007304 <_putc_r>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	460d      	mov	r5, r1
 8007308:	4614      	mov	r4, r2
 800730a:	4606      	mov	r6, r0
 800730c:	b118      	cbz	r0, 8007316 <_putc_r+0x12>
 800730e:	6983      	ldr	r3, [r0, #24]
 8007310:	b90b      	cbnz	r3, 8007316 <_putc_r+0x12>
 8007312:	f7fe fe91 	bl	8006038 <__sinit>
 8007316:	4b1c      	ldr	r3, [pc, #112]	; (8007388 <_putc_r+0x84>)
 8007318:	429c      	cmp	r4, r3
 800731a:	d124      	bne.n	8007366 <_putc_r+0x62>
 800731c:	6874      	ldr	r4, [r6, #4]
 800731e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007320:	07d8      	lsls	r0, r3, #31
 8007322:	d405      	bmi.n	8007330 <_putc_r+0x2c>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	0599      	lsls	r1, r3, #22
 8007328:	d402      	bmi.n	8007330 <_putc_r+0x2c>
 800732a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800732c:	f7fe ff22 	bl	8006174 <__retarget_lock_acquire_recursive>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	3b01      	subs	r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	60a3      	str	r3, [r4, #8]
 8007338:	da05      	bge.n	8007346 <_putc_r+0x42>
 800733a:	69a2      	ldr	r2, [r4, #24]
 800733c:	4293      	cmp	r3, r2
 800733e:	db1c      	blt.n	800737a <_putc_r+0x76>
 8007340:	b2eb      	uxtb	r3, r5
 8007342:	2b0a      	cmp	r3, #10
 8007344:	d019      	beq.n	800737a <_putc_r+0x76>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	6022      	str	r2, [r4, #0]
 800734c:	701d      	strb	r5, [r3, #0]
 800734e:	b2ed      	uxtb	r5, r5
 8007350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007352:	07da      	lsls	r2, r3, #31
 8007354:	d405      	bmi.n	8007362 <_putc_r+0x5e>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	059b      	lsls	r3, r3, #22
 800735a:	d402      	bmi.n	8007362 <_putc_r+0x5e>
 800735c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735e:	f7fe ff0a 	bl	8006176 <__retarget_lock_release_recursive>
 8007362:	4628      	mov	r0, r5
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <_putc_r+0x88>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d101      	bne.n	8007370 <_putc_r+0x6c>
 800736c:	68b4      	ldr	r4, [r6, #8]
 800736e:	e7d6      	b.n	800731e <_putc_r+0x1a>
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <_putc_r+0x8c>)
 8007372:	429c      	cmp	r4, r3
 8007374:	bf08      	it	eq
 8007376:	68f4      	ldreq	r4, [r6, #12]
 8007378:	e7d1      	b.n	800731e <_putc_r+0x1a>
 800737a:	4629      	mov	r1, r5
 800737c:	4622      	mov	r2, r4
 800737e:	4630      	mov	r0, r6
 8007380:	f7fe fc5e 	bl	8005c40 <__swbuf_r>
 8007384:	4605      	mov	r5, r0
 8007386:	e7e3      	b.n	8007350 <_putc_r+0x4c>
 8007388:	08007d30 	.word	0x08007d30
 800738c:	08007d50 	.word	0x08007d50
 8007390:	08007d10 	.word	0x08007d10

08007394 <_read_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	; (80073b4 <_read_r+0x20>)
 8007398:	4604      	mov	r4, r0
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fa fec8 	bl	8002138 <_read>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_read_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_read_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20000878 	.word	0x20000878

080073b8 <_sbrk_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	; (80073d4 <_sbrk_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7fa fee0 	bl	8002188 <_sbrk>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_sbrk_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_sbrk_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20000878 	.word	0x20000878

080073d8 <__sccl>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	780b      	ldrb	r3, [r1, #0]
 80073dc:	4604      	mov	r4, r0
 80073de:	2b5e      	cmp	r3, #94	; 0x5e
 80073e0:	bf0b      	itete	eq
 80073e2:	784b      	ldrbeq	r3, [r1, #1]
 80073e4:	1c48      	addne	r0, r1, #1
 80073e6:	1c88      	addeq	r0, r1, #2
 80073e8:	2200      	movne	r2, #0
 80073ea:	bf08      	it	eq
 80073ec:	2201      	moveq	r2, #1
 80073ee:	1e61      	subs	r1, r4, #1
 80073f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80073f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80073f8:	42a9      	cmp	r1, r5
 80073fa:	d1fb      	bne.n	80073f4 <__sccl+0x1c>
 80073fc:	b90b      	cbnz	r3, 8007402 <__sccl+0x2a>
 80073fe:	3801      	subs	r0, #1
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	f082 0201 	eor.w	r2, r2, #1
 8007406:	54e2      	strb	r2, [r4, r3]
 8007408:	4605      	mov	r5, r0
 800740a:	4628      	mov	r0, r5
 800740c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007410:	292d      	cmp	r1, #45	; 0x2d
 8007412:	d006      	beq.n	8007422 <__sccl+0x4a>
 8007414:	295d      	cmp	r1, #93	; 0x5d
 8007416:	d0f3      	beq.n	8007400 <__sccl+0x28>
 8007418:	b909      	cbnz	r1, 800741e <__sccl+0x46>
 800741a:	4628      	mov	r0, r5
 800741c:	e7f0      	b.n	8007400 <__sccl+0x28>
 800741e:	460b      	mov	r3, r1
 8007420:	e7f1      	b.n	8007406 <__sccl+0x2e>
 8007422:	786e      	ldrb	r6, [r5, #1]
 8007424:	2e5d      	cmp	r6, #93	; 0x5d
 8007426:	d0fa      	beq.n	800741e <__sccl+0x46>
 8007428:	42b3      	cmp	r3, r6
 800742a:	dcf8      	bgt.n	800741e <__sccl+0x46>
 800742c:	3502      	adds	r5, #2
 800742e:	4619      	mov	r1, r3
 8007430:	3101      	adds	r1, #1
 8007432:	428e      	cmp	r6, r1
 8007434:	5462      	strb	r2, [r4, r1]
 8007436:	dcfb      	bgt.n	8007430 <__sccl+0x58>
 8007438:	1af1      	subs	r1, r6, r3
 800743a:	3901      	subs	r1, #1
 800743c:	1c58      	adds	r0, r3, #1
 800743e:	42b3      	cmp	r3, r6
 8007440:	bfa8      	it	ge
 8007442:	2100      	movge	r1, #0
 8007444:	1843      	adds	r3, r0, r1
 8007446:	e7e0      	b.n	800740a <__sccl+0x32>

08007448 <_strtol_l.constprop.0>:
 8007448:	2b01      	cmp	r3, #1
 800744a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744e:	d001      	beq.n	8007454 <_strtol_l.constprop.0+0xc>
 8007450:	2b24      	cmp	r3, #36	; 0x24
 8007452:	d906      	bls.n	8007462 <_strtol_l.constprop.0+0x1a>
 8007454:	f7fe fa70 	bl	8005938 <__errno>
 8007458:	2316      	movs	r3, #22
 800745a:	6003      	str	r3, [r0, #0]
 800745c:	2000      	movs	r0, #0
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007548 <_strtol_l.constprop.0+0x100>
 8007466:	460d      	mov	r5, r1
 8007468:	462e      	mov	r6, r5
 800746a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800746e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007472:	f017 0708 	ands.w	r7, r7, #8
 8007476:	d1f7      	bne.n	8007468 <_strtol_l.constprop.0+0x20>
 8007478:	2c2d      	cmp	r4, #45	; 0x2d
 800747a:	d132      	bne.n	80074e2 <_strtol_l.constprop.0+0x9a>
 800747c:	782c      	ldrb	r4, [r5, #0]
 800747e:	2701      	movs	r7, #1
 8007480:	1cb5      	adds	r5, r6, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d05b      	beq.n	800753e <_strtol_l.constprop.0+0xf6>
 8007486:	2b10      	cmp	r3, #16
 8007488:	d109      	bne.n	800749e <_strtol_l.constprop.0+0x56>
 800748a:	2c30      	cmp	r4, #48	; 0x30
 800748c:	d107      	bne.n	800749e <_strtol_l.constprop.0+0x56>
 800748e:	782c      	ldrb	r4, [r5, #0]
 8007490:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007494:	2c58      	cmp	r4, #88	; 0x58
 8007496:	d14d      	bne.n	8007534 <_strtol_l.constprop.0+0xec>
 8007498:	786c      	ldrb	r4, [r5, #1]
 800749a:	2310      	movs	r3, #16
 800749c:	3502      	adds	r5, #2
 800749e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80074a6:	f04f 0c00 	mov.w	ip, #0
 80074aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80074ae:	4666      	mov	r6, ip
 80074b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80074b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80074b8:	f1be 0f09 	cmp.w	lr, #9
 80074bc:	d816      	bhi.n	80074ec <_strtol_l.constprop.0+0xa4>
 80074be:	4674      	mov	r4, lr
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	dd24      	ble.n	800750e <_strtol_l.constprop.0+0xc6>
 80074c4:	f1bc 0f00 	cmp.w	ip, #0
 80074c8:	db1e      	blt.n	8007508 <_strtol_l.constprop.0+0xc0>
 80074ca:	45b1      	cmp	r9, r6
 80074cc:	d31c      	bcc.n	8007508 <_strtol_l.constprop.0+0xc0>
 80074ce:	d101      	bne.n	80074d4 <_strtol_l.constprop.0+0x8c>
 80074d0:	45a2      	cmp	sl, r4
 80074d2:	db19      	blt.n	8007508 <_strtol_l.constprop.0+0xc0>
 80074d4:	fb06 4603 	mla	r6, r6, r3, r4
 80074d8:	f04f 0c01 	mov.w	ip, #1
 80074dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074e0:	e7e8      	b.n	80074b4 <_strtol_l.constprop.0+0x6c>
 80074e2:	2c2b      	cmp	r4, #43	; 0x2b
 80074e4:	bf04      	itt	eq
 80074e6:	782c      	ldrbeq	r4, [r5, #0]
 80074e8:	1cb5      	addeq	r5, r6, #2
 80074ea:	e7ca      	b.n	8007482 <_strtol_l.constprop.0+0x3a>
 80074ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80074f0:	f1be 0f19 	cmp.w	lr, #25
 80074f4:	d801      	bhi.n	80074fa <_strtol_l.constprop.0+0xb2>
 80074f6:	3c37      	subs	r4, #55	; 0x37
 80074f8:	e7e2      	b.n	80074c0 <_strtol_l.constprop.0+0x78>
 80074fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80074fe:	f1be 0f19 	cmp.w	lr, #25
 8007502:	d804      	bhi.n	800750e <_strtol_l.constprop.0+0xc6>
 8007504:	3c57      	subs	r4, #87	; 0x57
 8007506:	e7db      	b.n	80074c0 <_strtol_l.constprop.0+0x78>
 8007508:	f04f 3cff 	mov.w	ip, #4294967295
 800750c:	e7e6      	b.n	80074dc <_strtol_l.constprop.0+0x94>
 800750e:	f1bc 0f00 	cmp.w	ip, #0
 8007512:	da05      	bge.n	8007520 <_strtol_l.constprop.0+0xd8>
 8007514:	2322      	movs	r3, #34	; 0x22
 8007516:	6003      	str	r3, [r0, #0]
 8007518:	4646      	mov	r6, r8
 800751a:	b942      	cbnz	r2, 800752e <_strtol_l.constprop.0+0xe6>
 800751c:	4630      	mov	r0, r6
 800751e:	e79e      	b.n	800745e <_strtol_l.constprop.0+0x16>
 8007520:	b107      	cbz	r7, 8007524 <_strtol_l.constprop.0+0xdc>
 8007522:	4276      	negs	r6, r6
 8007524:	2a00      	cmp	r2, #0
 8007526:	d0f9      	beq.n	800751c <_strtol_l.constprop.0+0xd4>
 8007528:	f1bc 0f00 	cmp.w	ip, #0
 800752c:	d000      	beq.n	8007530 <_strtol_l.constprop.0+0xe8>
 800752e:	1e69      	subs	r1, r5, #1
 8007530:	6011      	str	r1, [r2, #0]
 8007532:	e7f3      	b.n	800751c <_strtol_l.constprop.0+0xd4>
 8007534:	2430      	movs	r4, #48	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1b1      	bne.n	800749e <_strtol_l.constprop.0+0x56>
 800753a:	2308      	movs	r3, #8
 800753c:	e7af      	b.n	800749e <_strtol_l.constprop.0+0x56>
 800753e:	2c30      	cmp	r4, #48	; 0x30
 8007540:	d0a5      	beq.n	800748e <_strtol_l.constprop.0+0x46>
 8007542:	230a      	movs	r3, #10
 8007544:	e7ab      	b.n	800749e <_strtol_l.constprop.0+0x56>
 8007546:	bf00      	nop
 8007548:	08007dbf 	.word	0x08007dbf

0800754c <_strtol_r>:
 800754c:	f7ff bf7c 	b.w	8007448 <_strtol_l.constprop.0>

08007550 <_strtoul_l.constprop.0>:
 8007550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007554:	4f36      	ldr	r7, [pc, #216]	; (8007630 <_strtoul_l.constprop.0+0xe0>)
 8007556:	4686      	mov	lr, r0
 8007558:	460d      	mov	r5, r1
 800755a:	4628      	mov	r0, r5
 800755c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007560:	5de6      	ldrb	r6, [r4, r7]
 8007562:	f016 0608 	ands.w	r6, r6, #8
 8007566:	d1f8      	bne.n	800755a <_strtoul_l.constprop.0+0xa>
 8007568:	2c2d      	cmp	r4, #45	; 0x2d
 800756a:	d12f      	bne.n	80075cc <_strtoul_l.constprop.0+0x7c>
 800756c:	782c      	ldrb	r4, [r5, #0]
 800756e:	2601      	movs	r6, #1
 8007570:	1c85      	adds	r5, r0, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d057      	beq.n	8007626 <_strtoul_l.constprop.0+0xd6>
 8007576:	2b10      	cmp	r3, #16
 8007578:	d109      	bne.n	800758e <_strtoul_l.constprop.0+0x3e>
 800757a:	2c30      	cmp	r4, #48	; 0x30
 800757c:	d107      	bne.n	800758e <_strtoul_l.constprop.0+0x3e>
 800757e:	7828      	ldrb	r0, [r5, #0]
 8007580:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007584:	2858      	cmp	r0, #88	; 0x58
 8007586:	d149      	bne.n	800761c <_strtoul_l.constprop.0+0xcc>
 8007588:	786c      	ldrb	r4, [r5, #1]
 800758a:	2310      	movs	r3, #16
 800758c:	3502      	adds	r5, #2
 800758e:	f04f 38ff 	mov.w	r8, #4294967295
 8007592:	2700      	movs	r7, #0
 8007594:	fbb8 f8f3 	udiv	r8, r8, r3
 8007598:	fb03 f908 	mul.w	r9, r3, r8
 800759c:	ea6f 0909 	mvn.w	r9, r9
 80075a0:	4638      	mov	r0, r7
 80075a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075a6:	f1bc 0f09 	cmp.w	ip, #9
 80075aa:	d814      	bhi.n	80075d6 <_strtoul_l.constprop.0+0x86>
 80075ac:	4664      	mov	r4, ip
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	dd22      	ble.n	80075f8 <_strtoul_l.constprop.0+0xa8>
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	db1d      	blt.n	80075f2 <_strtoul_l.constprop.0+0xa2>
 80075b6:	4580      	cmp	r8, r0
 80075b8:	d31b      	bcc.n	80075f2 <_strtoul_l.constprop.0+0xa2>
 80075ba:	d101      	bne.n	80075c0 <_strtoul_l.constprop.0+0x70>
 80075bc:	45a1      	cmp	r9, r4
 80075be:	db18      	blt.n	80075f2 <_strtoul_l.constprop.0+0xa2>
 80075c0:	fb00 4003 	mla	r0, r0, r3, r4
 80075c4:	2701      	movs	r7, #1
 80075c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075ca:	e7ea      	b.n	80075a2 <_strtoul_l.constprop.0+0x52>
 80075cc:	2c2b      	cmp	r4, #43	; 0x2b
 80075ce:	bf04      	itt	eq
 80075d0:	782c      	ldrbeq	r4, [r5, #0]
 80075d2:	1c85      	addeq	r5, r0, #2
 80075d4:	e7cd      	b.n	8007572 <_strtoul_l.constprop.0+0x22>
 80075d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075da:	f1bc 0f19 	cmp.w	ip, #25
 80075de:	d801      	bhi.n	80075e4 <_strtoul_l.constprop.0+0x94>
 80075e0:	3c37      	subs	r4, #55	; 0x37
 80075e2:	e7e4      	b.n	80075ae <_strtoul_l.constprop.0+0x5e>
 80075e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075e8:	f1bc 0f19 	cmp.w	ip, #25
 80075ec:	d804      	bhi.n	80075f8 <_strtoul_l.constprop.0+0xa8>
 80075ee:	3c57      	subs	r4, #87	; 0x57
 80075f0:	e7dd      	b.n	80075ae <_strtoul_l.constprop.0+0x5e>
 80075f2:	f04f 37ff 	mov.w	r7, #4294967295
 80075f6:	e7e6      	b.n	80075c6 <_strtoul_l.constprop.0+0x76>
 80075f8:	2f00      	cmp	r7, #0
 80075fa:	da07      	bge.n	800760c <_strtoul_l.constprop.0+0xbc>
 80075fc:	2322      	movs	r3, #34	; 0x22
 80075fe:	f8ce 3000 	str.w	r3, [lr]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	b932      	cbnz	r2, 8007616 <_strtoul_l.constprop.0+0xc6>
 8007608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800760c:	b106      	cbz	r6, 8007610 <_strtoul_l.constprop.0+0xc0>
 800760e:	4240      	negs	r0, r0
 8007610:	2a00      	cmp	r2, #0
 8007612:	d0f9      	beq.n	8007608 <_strtoul_l.constprop.0+0xb8>
 8007614:	b107      	cbz	r7, 8007618 <_strtoul_l.constprop.0+0xc8>
 8007616:	1e69      	subs	r1, r5, #1
 8007618:	6011      	str	r1, [r2, #0]
 800761a:	e7f5      	b.n	8007608 <_strtoul_l.constprop.0+0xb8>
 800761c:	2430      	movs	r4, #48	; 0x30
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1b5      	bne.n	800758e <_strtoul_l.constprop.0+0x3e>
 8007622:	2308      	movs	r3, #8
 8007624:	e7b3      	b.n	800758e <_strtoul_l.constprop.0+0x3e>
 8007626:	2c30      	cmp	r4, #48	; 0x30
 8007628:	d0a9      	beq.n	800757e <_strtoul_l.constprop.0+0x2e>
 800762a:	230a      	movs	r3, #10
 800762c:	e7af      	b.n	800758e <_strtoul_l.constprop.0+0x3e>
 800762e:	bf00      	nop
 8007630:	08007dbf 	.word	0x08007dbf

08007634 <_strtoul_r>:
 8007634:	f7ff bf8c 	b.w	8007550 <_strtoul_l.constprop.0>

08007638 <__submore>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	460c      	mov	r4, r1
 800763e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007644:	4299      	cmp	r1, r3
 8007646:	d11d      	bne.n	8007684 <__submore+0x4c>
 8007648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800764c:	f7fe fe78 	bl	8006340 <_malloc_r>
 8007650:	b918      	cbnz	r0, 800765a <__submore+0x22>
 8007652:	f04f 30ff 	mov.w	r0, #4294967295
 8007656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007660:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007664:	6360      	str	r0, [r4, #52]	; 0x34
 8007666:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800766a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800766e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007672:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007676:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800767a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800767e:	6020      	str	r0, [r4, #0]
 8007680:	2000      	movs	r0, #0
 8007682:	e7e8      	b.n	8007656 <__submore+0x1e>
 8007684:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007686:	0077      	lsls	r7, r6, #1
 8007688:	463a      	mov	r2, r7
 800768a:	f000 f865 	bl	8007758 <_realloc_r>
 800768e:	4605      	mov	r5, r0
 8007690:	2800      	cmp	r0, #0
 8007692:	d0de      	beq.n	8007652 <__submore+0x1a>
 8007694:	eb00 0806 	add.w	r8, r0, r6
 8007698:	4601      	mov	r1, r0
 800769a:	4632      	mov	r2, r6
 800769c:	4640      	mov	r0, r8
 800769e:	f000 f827 	bl	80076f0 <memcpy>
 80076a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80076a6:	f8c4 8000 	str.w	r8, [r4]
 80076aa:	e7e9      	b.n	8007680 <__submore+0x48>

080076ac <_fstat_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	; (80076cc <_fstat_r+0x20>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	602b      	str	r3, [r5, #0]
 80076ba:	f7fa fd5c 	bl	8002176 <_fstat>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d102      	bne.n	80076c8 <_fstat_r+0x1c>
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	b103      	cbz	r3, 80076c8 <_fstat_r+0x1c>
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
 80076ca:	bf00      	nop
 80076cc:	20000878 	.word	0x20000878

080076d0 <_isatty_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d06      	ldr	r5, [pc, #24]	; (80076ec <_isatty_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7fa fd50 	bl	8002180 <_isatty>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_isatty_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_isatty_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000878 	.word	0x20000878

080076f0 <memcpy>:
 80076f0:	440a      	add	r2, r1
 80076f2:	4291      	cmp	r1, r2
 80076f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f8:	d100      	bne.n	80076fc <memcpy+0xc>
 80076fa:	4770      	bx	lr
 80076fc:	b510      	push	{r4, lr}
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	4291      	cmp	r1, r2
 8007708:	d1f9      	bne.n	80076fe <memcpy+0xe>
 800770a:	bd10      	pop	{r4, pc}

0800770c <memmove>:
 800770c:	4288      	cmp	r0, r1
 800770e:	b510      	push	{r4, lr}
 8007710:	eb01 0402 	add.w	r4, r1, r2
 8007714:	d902      	bls.n	800771c <memmove+0x10>
 8007716:	4284      	cmp	r4, r0
 8007718:	4623      	mov	r3, r4
 800771a:	d807      	bhi.n	800772c <memmove+0x20>
 800771c:	1e43      	subs	r3, r0, #1
 800771e:	42a1      	cmp	r1, r4
 8007720:	d008      	beq.n	8007734 <memmove+0x28>
 8007722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772a:	e7f8      	b.n	800771e <memmove+0x12>
 800772c:	4402      	add	r2, r0
 800772e:	4601      	mov	r1, r0
 8007730:	428a      	cmp	r2, r1
 8007732:	d100      	bne.n	8007736 <memmove+0x2a>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800773e:	e7f7      	b.n	8007730 <memmove+0x24>

08007740 <__malloc_lock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_lock+0x8>)
 8007742:	f7fe bd17 	b.w	8006174 <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	2000086c 	.word	0x2000086c

0800774c <__malloc_unlock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_unlock+0x8>)
 800774e:	f7fe bd12 	b.w	8006176 <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	2000086c 	.word	0x2000086c

08007758 <_realloc_r>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4680      	mov	r8, r0
 800775e:	4614      	mov	r4, r2
 8007760:	460e      	mov	r6, r1
 8007762:	b921      	cbnz	r1, 800776e <_realloc_r+0x16>
 8007764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	4611      	mov	r1, r2
 800776a:	f7fe bde9 	b.w	8006340 <_malloc_r>
 800776e:	b92a      	cbnz	r2, 800777c <_realloc_r+0x24>
 8007770:	f7fe fd7a 	bl	8006268 <_free_r>
 8007774:	4625      	mov	r5, r4
 8007776:	4628      	mov	r0, r5
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	f000 f81b 	bl	80077b6 <_malloc_usable_size_r>
 8007780:	4284      	cmp	r4, r0
 8007782:	4607      	mov	r7, r0
 8007784:	d802      	bhi.n	800778c <_realloc_r+0x34>
 8007786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800778a:	d812      	bhi.n	80077b2 <_realloc_r+0x5a>
 800778c:	4621      	mov	r1, r4
 800778e:	4640      	mov	r0, r8
 8007790:	f7fe fdd6 	bl	8006340 <_malloc_r>
 8007794:	4605      	mov	r5, r0
 8007796:	2800      	cmp	r0, #0
 8007798:	d0ed      	beq.n	8007776 <_realloc_r+0x1e>
 800779a:	42bc      	cmp	r4, r7
 800779c:	4622      	mov	r2, r4
 800779e:	4631      	mov	r1, r6
 80077a0:	bf28      	it	cs
 80077a2:	463a      	movcs	r2, r7
 80077a4:	f7ff ffa4 	bl	80076f0 <memcpy>
 80077a8:	4631      	mov	r1, r6
 80077aa:	4640      	mov	r0, r8
 80077ac:	f7fe fd5c 	bl	8006268 <_free_r>
 80077b0:	e7e1      	b.n	8007776 <_realloc_r+0x1e>
 80077b2:	4635      	mov	r5, r6
 80077b4:	e7df      	b.n	8007776 <_realloc_r+0x1e>

080077b6 <_malloc_usable_size_r>:
 80077b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ba:	1f18      	subs	r0, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfbc      	itt	lt
 80077c0:	580b      	ldrlt	r3, [r1, r0]
 80077c2:	18c0      	addlt	r0, r0, r3
 80077c4:	4770      	bx	lr
	...

080077c8 <_init>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr

080077d4 <_fini>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr
