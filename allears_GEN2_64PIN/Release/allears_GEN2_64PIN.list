
allears_GEN2_64PIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f10  08005f10  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f18  08005f18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  2000007c  08005f9c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000708  08005f9c  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c25  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1c  00000000  00000000  00043cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012db1  00000000  00000000  000489ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0005b79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d78  00000000  00000000  0005ca56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199cd  00000000  00000000  0005e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000073d9  00000000  00000000  0007819b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007f574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  0007f5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aec 	.word	0x08005aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005aec 	.word	0x08005aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b974 	b.w	80009f8 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <HAL_ADC_ErrorCallback>:
	}
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	adc1_cur_state = ECHO_ADC1_ERROR;
 80009fc:	4a02      	ldr	r2, [pc, #8]	; (8000a08 <HAL_ADC_ErrorCallback+0xc>)
 80009fe:	2305      	movs	r3, #5
 8000a00:	7013      	strb	r3, [r2, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 8000a02:	4a02      	ldr	r2, [pc, #8]	; (8000a0c <HAL_ADC_ErrorCallback+0x10>)
 8000a04:	7013      	strb	r3, [r2, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8000a06:	4770      	bx	lr
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000001 	.word	0x20000001

08000a10 <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 8000a10:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <Echo_ADC1_Enable+0x18>)
 8000a14:	217f      	movs	r1, #127	; 0x7f
 8000a16:	f001 fc5b 	bl	80022d0 <HAL_ADCEx_Calibration_Start>
 8000a1a:	b118      	cbz	r0, 8000a24 <Echo_ADC1_Enable+0x14>
	{
		Error_Handler();
	}
}
 8000a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a20:	f000 bc76 	b.w	8001310 <Error_Handler>
}
 8000a24:	bd08      	pop	{r3, pc}
 8000a26:	bf00      	nop
 8000a28:	20000318 	.word	0x20000318

08000a2c <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8000a2c:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <Echo_ADC2_Enable+0x18>)
 8000a30:	217f      	movs	r1, #127	; 0x7f
 8000a32:	f001 fc4d 	bl	80022d0 <HAL_ADCEx_Calibration_Start>
 8000a36:	b118      	cbz	r0, 8000a40 <Echo_ADC2_Enable+0x14>
	{
		Error_Handler();
	}
}
 8000a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a3c:	f000 bc68 	b.w	8001310 <Error_Handler>
}
 8000a40:	bd08      	pop	{r3, pc}
 8000a42:	bf00      	nop
 8000a44:	2000037c 	.word	0x2000037c

08000a48 <Echo_ADC_State_Init>:

/*
 * ADC INIT
 * */
void Echo_ADC_State_Init(void)
{
 8000a48:	b508      	push	{r3, lr}
		Echo_Stop_ADC1_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC1_CUR_STATE = state;
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <Echo_ADC_State_Init+0x18>)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	7013      	strb	r3, [r2, #0]
		Echo_Stop_ADC2_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC2_CUR_STATE = state;
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <Echo_ADC_State_Init+0x1c>)
 8000a52:	7013      	strb	r3, [r2, #0]
	Echo_ADC1_Enable();
 8000a54:	f7ff ffdc 	bl	8000a10 <Echo_ADC1_Enable>
}
 8000a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_ADC2_Enable();
 8000a5c:	f7ff bfe6 	b.w	8000a2c <Echo_ADC2_Enable>
 8000a60:	20000098 	.word	0x20000098
 8000a64:	20000099 	.word	0x20000099

08000a68 <Echo_Start_ADC1_Conv>:
{
 8000a68:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 8000a6a:	4905      	ldr	r1, [pc, #20]	; (8000a80 <Echo_Start_ADC1_Conv+0x18>)
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <Echo_Start_ADC1_Conv+0x1c>)
 8000a6e:	220a      	movs	r2, #10
 8000a70:	f001 fb3e 	bl	80020f0 <HAL_ADC_Start_DMA>
 8000a74:	b118      	cbz	r0, 8000a7e <Echo_Start_ADC1_Conv+0x16>
}
 8000a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000a7a:	f000 bc49 	b.w	8001310 <Error_Handler>
}
 8000a7e:	bd08      	pop	{r3, pc}
 8000a80:	2000009a 	.word	0x2000009a
 8000a84:	20000318 	.word	0x20000318

08000a88 <HAL_ADC_ConvCpltCallback>:
{
 8000a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (hadc->Instance == hadc1.Instance)
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000a8e:	6802      	ldr	r2, [r0, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
{
 8000a94:	4604      	mov	r4, r0
	if (hadc->Instance == hadc1.Instance)
 8000a96:	d13b      	bne.n	8000b10 <HAL_ADC_ConvCpltCallback+0x88>
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000a9c:	f103 0114 	add.w	r1, r3, #20
 8000aa0:	4616      	mov	r6, r2
 8000aa2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000aa6:	f842 0b04 	str.w	r0, [r2], #4
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d1f9      	bne.n	8000aa2 <HAL_ADC_ConvCpltCallback+0x1a>
		if (vpw_set_flag == true)
 8000aae:	4d25      	ldr	r5, [pc, #148]	; (8000b44 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000ab0:	782b      	ldrb	r3, [r5, #0]
 8000ab2:	b35b      	cbz	r3, 8000b0c <HAL_ADC_ConvCpltCallback+0x84>
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 8000ab4:	f8b6 8000 	ldrh.w	r8, [r6]
 8000ab8:	8877      	ldrh	r7, [r6, #2]
 8000aba:	eba8 0007 	sub.w	r0, r8, r7
 8000abe:	f7ff fd29 	bl	8000514 <__aeabi_i2d>
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000ac4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f7ff fded 	bl	80006a8 <__aeabi_dcmplt>
 8000ace:	b1e8      	cbz	r0, 8000b0c <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 8000ad0:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 8000ad4:	eba7 0009 	sub.w	r0, r7, r9
 8000ad8:	f7ff fd1c 	bl	8000514 <__aeabi_i2d>
 8000adc:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	f7ff fddf 	bl	80006a8 <__aeabi_dcmplt>
 8000aea:	b178      	cbz	r0, 8000b0c <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 8000aec:	eba9 0008 	sub.w	r0, r9, r8
 8000af0:	f7ff fd10 	bl	8000514 <__aeabi_i2d>
 8000af4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	4639      	mov	r1, r7
 8000afe:	f7ff fdd3 	bl	80006a8 <__aeabi_dcmplt>
 8000b02:	b118      	cbz	r0, 8000b0c <HAL_ADC_ConvCpltCallback+0x84>
				Echo_VPW_TP_OFF();
 8000b04:	f000 f938 	bl	8000d78 <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	702b      	strb	r3, [r5, #0]
		Echo_Start_ADC1_Conv();
 8000b0c:	f7ff ffac 	bl	8000a68 <Echo_Start_ADC1_Conv>
	if (hadc->Instance == hadc2.Instance)
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d10c      	bne.n	8000b34 <HAL_ADC_ConvCpltCallback+0xac>
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000b1e:	f103 0114 	add.w	r1, r3, #20
 8000b22:	f853 0b04 	ldr.w	r0, [r3], #4
 8000b26:	f842 0b04 	str.w	r0, [r2], #4
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d1f9      	bne.n	8000b22 <HAL_ADC_ConvCpltCallback+0x9a>
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	701a      	strb	r2, [r3, #0]
}
 8000b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b38:	20000318 	.word	0x20000318
 8000b3c:	2000009a 	.word	0x2000009a
 8000b40:	200000d6 	.word	0x200000d6
 8000b44:	2000020e 	.word	0x2000020e
 8000b48:	40340000 	.word	0x40340000
 8000b4c:	2000037c 	.word	0x2000037c
 8000b50:	200000ae 	.word	0x200000ae
 8000b54:	200000c2 	.word	0x200000c2
 8000b58:	20000001 	.word	0x20000001

08000b5c <Echo_Stop_ADC1_Conv>:
{
 8000b5c:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <Echo_Stop_ADC1_Conv+0x14>)
 8000b60:	f001 fb74 	bl	800224c <HAL_ADC_Stop_DMA>
 8000b64:	b118      	cbz	r0, 8000b6e <Echo_Stop_ADC1_Conv+0x12>
}
 8000b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000b6a:	f000 bbd1 	b.w	8001310 <Error_Handler>
}
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	20000318 	.word	0x20000318

08000b74 <Echo_Stepup_ADC1_AVG>:
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b74:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <Echo_Stepup_ADC1_AVG+0x28>)
	float adc1_avg = 0;
 8000b76:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000ba0 <Echo_Stepup_ADC1_AVG+0x2c>
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b7a:	2300      	movs	r3, #0
		adc1_avg += setpup_adc[i];
 8000b7c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8000b80:	ee07 1a10 	vmov	s14, r1
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b84:	3301      	adds	r3, #1
		adc1_avg += setpup_adc[i];
 8000b86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b8a:	2b0a      	cmp	r3, #10
		adc1_avg += setpup_adc[i];
 8000b8c:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8000b90:	d1f4      	bne.n	8000b7c <Echo_Stepup_ADC1_AVG+0x8>
}
 8000b92:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000b96:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000b9a:	4770      	bx	lr
 8000b9c:	200000d6 	.word	0x200000d6
 8000ba0:	00000000 	.word	0x00000000

08000ba4 <Echo_ADC_Calc_Stepup_V>:
	f_adc_val = in_adc_val / 4095.f;
 8000ba4:	ee07 0a90 	vmov	s15, r0
 8000ba8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000bcc <Echo_ADC_Calc_Stepup_V+0x28>
 8000bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 8000bb0:	ee30 0a20 	vadd.f32	s0, s0, s1
	f_adc_val = in_adc_val / 4095.f;
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 8000bb8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000bd0 <Echo_ADC_Calc_Stepup_V+0x2c>
 8000bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc0:	ee80 7a20 	vdiv.f32	s14, s0, s1
}
 8000bc4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	457ff000 	.word	0x457ff000
 8000bd0:	40533333 	.word	0x40533333

08000bd4 <Echo_Get_ADC1_State>:
}
 8000bd4:	4b01      	ldr	r3, [pc, #4]	; (8000bdc <Echo_Get_ADC1_State+0x8>)
 8000bd6:	7818      	ldrb	r0, [r3, #0]
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000098 	.word	0x20000098

08000be0 <Echo_Set_ADC1_State>:
	switch (state)
 8000be0:	1e43      	subs	r3, r0, #1
{
 8000be2:	b510      	push	{r4, lr}
 8000be4:	4604      	mov	r4, r0
	switch (state)
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d806      	bhi.n	8000bf8 <Echo_Set_ADC1_State+0x18>
 8000bea:	e8df f003 	tbb	[pc, r3]
 8000bee:	0803      	.short	0x0803
 8000bf0:	0b05      	.short	0x0b05
 8000bf2:	03          	.byte	0x03
 8000bf3:	00          	.byte	0x00
		Echo_Stop_ADC1_Conv();
 8000bf4:	f7ff ffb2 	bl	8000b5c <Echo_Stop_ADC1_Conv>
	ECHO_ADC1_CUR_STATE = state;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <Echo_Set_ADC1_State+0x2c>)
 8000bfa:	701c      	strb	r4, [r3, #0]
}
 8000bfc:	bd10      	pop	{r4, pc}
		Echo_Start_ADC1_Conv();
 8000bfe:	f7ff ff33 	bl	8000a68 <Echo_Start_ADC1_Conv>
		break;
 8000c02:	e7f9      	b.n	8000bf8 <Echo_Set_ADC1_State+0x18>
		adc1_cur_state = ECHO_ADC1_RUN;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <Echo_Set_ADC1_State+0x30>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	701a      	strb	r2, [r3, #0]
		break;
 8000c0a:	e7f5      	b.n	8000bf8 <Echo_Set_ADC1_State+0x18>
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	20000000 	.word	0x20000000

08000c14 <Echo_Flash_Read>:
	return HAL_OK;
}

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <Echo_Flash_Read+0x20>)
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <Echo_Flash_Read+0x24>)
 8000c18:	6810      	ldr	r0, [r2, #0]
 8000c1a:	6018      	str	r0, [r3, #0]
 8000c1c:	8892      	ldrh	r2, [r2, #4]
 8000c1e:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
			&& pwm_param.pulse_width == 0)
 8000c20:	8818      	ldrh	r0, [r3, #0]
 8000c22:	889a      	ldrh	r2, [r3, #4]
 8000c24:	885b      	ldrh	r3, [r3, #2]
 8000c26:	4310      	orrs	r0, r2
 8000c28:	4318      	orrs	r0, r3
 8000c2a:	b280      	uxth	r0, r0
	}
	else
	{
		return HAL_OK;
	}
}
 8000c2c:	fab0 f080 	clz	r0, r0
 8000c30:	0940      	lsrs	r0, r0, #5
 8000c32:	4770      	bx	lr
 8000c34:	0801e000 	.word	0x0801e000
 8000c38:	20000208 	.word	0x20000208

08000c3c <Echo_LED_Green_Off>:
/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <Echo_LED_Green_Off+0xc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	f001 be52 	b.w	80028ec <HAL_GPIO_WritePin>
 8000c48:	48000400 	.word	0x48000400

08000c4c <Echo_LED_Init>:
#endif
	}
}

void Echo_LED_Init(void)
{
 8000c4c:	b508      	push	{r3, lr}
	Echo_LED_Off_All();
 8000c4e:	f7ff fff5 	bl	8000c3c <Echo_LED_Green_Off>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8000c52:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <Echo_LED_Init+0x10>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	735a      	strb	r2, [r3, #13]
}
 8000c58:	bd08      	pop	{r3, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000ec 	.word	0x200000ec

08000c60 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c60:	b507      	push	{r0, r1, r2, lr}
	if (ch == '\n')
 8000c62:	280a      	cmp	r0, #10
{
 8000c64:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 8000c66:	d106      	bne.n	8000c76 <__io_putchar+0x16>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 8000c68:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__io_putchar+0x2c>)
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <__io_putchar+0x30>)
 8000c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c70:	2201      	movs	r2, #1
 8000c72:	f003 fbe3 	bl	800443c <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 8000c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	a901      	add	r1, sp, #4
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <__io_putchar+0x30>)
 8000c80:	f003 fbdc 	bl	800443c <HAL_UART_Transmit>
	return ch;
}
 8000c84:	9801      	ldr	r0, [sp, #4]
 8000c86:	b003      	add	sp, #12
 8000c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c8c:	08005ded 	.word	0x08005ded
 8000c90:	20000668 	.word	0x20000668

08000c94 <Echo_Print_Manual>:
/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <Echo_Print_Manual+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	f003 bdce 	b.w	8004838 <puts>
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8000ca0:	b500      	push	{lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2224      	movs	r2, #36	; 0x24
 8000ca8:	a801      	add	r0, sp, #4
 8000caa:	9100      	str	r1, [sp, #0]
 8000cac:	f003 fd36 	bl	800471c <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <Echo_Print_Version+0x28>)
 8000cb2:	4906      	ldr	r1, [pc, #24]	; (8000ccc <Echo_Print_Version+0x2c>)
 8000cb4:	4668      	mov	r0, sp
 8000cb6:	f003 fdc7 	bl	8004848 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 8000cba:	4668      	mov	r0, sp
 8000cbc:	f003 fdbc 	bl	8004838 <puts>
}
 8000cc0:	b00b      	add	sp, #44	; 0x2c
 8000cc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc6:	bf00      	nop
 8000cc8:	08005b04 	.word	0x08005b04
 8000ccc:	08005b12 	.word	0x08005b12

08000cd0 <Echo_Shell_Init>:
	}
}
/**********************/

void Echo_Shell_Init(void)
{
 8000cd0:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 8000cd2:	4c05      	ldr	r4, [pc, #20]	; (8000ce8 <Echo_Shell_Init+0x18>)
 8000cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd8:	2100      	movs	r1, #0
 8000cda:	1c60      	adds	r0, r4, #1
 8000cdc:	f003 fd1e 	bl	800471c <memset>
	SHELL_MSG_RCV_POS = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	7023      	strb	r3, [r4, #0]
}
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000fc 	.word	0x200000fc

08000cec <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b508      	push	{r3, lr}
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 8000cee:	6802      	ldr	r2, [r0, #0]
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cf2:	429a      	cmp	r2, r3
{
 8000cf4:	ed2d 8b02 	vpush	{d8}
	if (htim->Instance == TIM16)
 8000cf8:	d12e      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		/* ADC1 FSM */
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 8000cfa:	f7ff ff6b 	bl	8000bd4 <Echo_Get_ADC1_State>
 8000cfe:	2803      	cmp	r0, #3
 8000d00:	d12a      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 8000d02:	f7ff ff37 	bl	8000b74 <Echo_Stepup_ADC1_AVG>
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 8000d06:	ee10 0a10 	vmov	r0, s0
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 8000d0a:	eeb0 8a40 	vmov.f32	s16, s0
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 8000d0e:	f7ff fc13 	bl	8000538 <__aeabi_f2d>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d18:	f003 fd08 	bl	800472c <iprintf>
			ECHO_SHELL_PRINT(
 8000d1c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8000d20:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000d68 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000d24:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000d6c <HAL_TIM_PeriodElapsedCallback+0x80>
 8000d28:	ee18 3a10 	vmov	r3, s16
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	f7ff ff39 	bl	8000ba4 <Echo_ADC_Calc_Stepup_V>
 8000d32:	ee10 0a10 	vmov	r0, s0
 8000d36:	f7ff fbff 	bl	8000538 <__aeabi_f2d>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d40:	f003 fcf4 	bl	800472c <iprintf>
					("STEPUP VOLTAGE : %f\n",Echo_ADC_Calc_Stepup_V(adc_avg_data, R1_Vstup, R2_Vstup)));
			ECHO_SHELL_PRINT(("----------\r\n"));
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d46:	f003 fd77 	bl	8004838 <puts>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 8000d4a:	ecbd 8b02 	vpop	{d8}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 8000d4e:	2004      	movs	r0, #4
}
 8000d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 8000d54:	f7ff bf44 	b.w	8000be0 <Echo_Set_ADC1_State>
}
 8000d58:	ecbd 8b02 	vpop	{d8}
 8000d5c:	bd08      	pop	{r3, pc}
 8000d5e:	bf00      	nop
 8000d60:	40014400 	.word	0x40014400
 8000d64:	08005dbe 	.word	0x08005dbe
 8000d68:	42dc0000 	.word	0x42dc0000
 8000d6c:	45610000 	.word	0x45610000
 8000d70:	08005dce 	.word	0x08005dce
 8000d74:	08005de3 	.word	0x08005de3

08000d78 <Echo_VPW_TP_OFF>:
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
}

void Echo_VPW_TP_OFF(void)
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 bdb3 	b.w	80028ec <HAL_GPIO_WritePin>
	...

08000d88 <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 8000d88:	b500      	push	{lr}
	HAL_Delay(200);
 8000d8a:	20c8      	movs	r0, #200	; 0xc8
{
 8000d8c:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8000d8e:	f000 fddf 	bl	8001950 <HAL_Delay>
	char res_msg[55] =
 8000d92:	2100      	movs	r1, #0
 8000d94:	2233      	movs	r2, #51	; 0x33
 8000d96:	a801      	add	r0, sp, #4
 8000d98:	9100      	str	r1, [sp, #0]
 8000d9a:	f003 fcbf 	bl	800471c <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8000d9e:	f7ff ff39 	bl	8000c14 <Echo_Flash_Read>
 8000da2:	b150      	cbz	r0, 8000dba <Echo_PCI_State_Init+0x32>
	{
		pwm_param.dead_time = 20;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <Echo_PCI_State_Init+0x68>)
 8000da6:	2214      	movs	r2, #20
 8000da8:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8000daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dae:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8000db0:	2264      	movs	r2, #100	; 0x64
 8000db2:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <Echo_PCI_State_Init+0x6c>)
 8000db6:	220a      	movs	r2, #10
 8000db8:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8000dba:	f7ff ff71 	bl	8000ca0 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8000dbe:	f002 f9f1 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <Echo_PCI_State_Init+0x70>)
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4668      	mov	r0, sp
 8000dc8:	f003 fd3e 	bl	8004848 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f003 fd33 	bl	8004838 <puts>
	Echo_ADC_State_Init();
 8000dd2:	f7ff fe39 	bl	8000a48 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 8000dd6:	f7ff ff5d 	bl	8000c94 <Echo_Print_Manual>
	Echo_LED_Init();
 8000dda:	f7ff ff37 	bl	8000c4c <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8000dde:	f000 f80d 	bl	8000dfc <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 8000de2:	f7ff ff75 	bl	8000cd0 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 8000de6:	f000 f80f 	bl	8000e08 <Echo_Uart2_INTERRUPT_ENA>
}
 8000dea:	b00f      	add	sp, #60	; 0x3c
 8000dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8000df0:	20000208 	.word	0x20000208
 8000df4:	20000008 	.word	0x20000008
 8000df8:	08005def 	.word	0x08005def

08000dfc <Echo_Sys_FSM_State_Init>:
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
#endif
		break;

	}
	ECHO_CUR_SYS_STATE = state;
 8000dfc:	4b01      	ldr	r3, [pc, #4]	; (8000e04 <Echo_Sys_FSM_State_Init+0x8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	4770      	bx	lr
 8000e04:	2000020f 	.word	0x2000020f

08000e08 <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8000e08:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8000e0a:	4c08      	ldr	r4, [pc, #32]	; (8000e2c <Echo_Uart2_INTERRUPT_ENA+0x24>)
	ECHO_USART2_STATE_RESET();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <Echo_Uart2_INTERRUPT_ENA+0x28>)
 8000e0e:	2200      	movs	r2, #0
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8000e10:	4620      	mov	r0, r4
	ECHO_USART2_STATE_RESET();
 8000e12:	801a      	strh	r2, [r3, #0]
 8000e14:	805a      	strh	r2, [r3, #2]
 8000e16:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8000e18:	f002 fef8 	bl	8003c0c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	4905      	ldr	r1, [pc, #20]	; (8000e34 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
}
 8000e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f003 bc25 	b.w	8004674 <HAL_UART_Receive_IT>
 8000e2a:	bf00      	nop
 8000e2c:	20000668 	.word	0x20000668
 8000e30:	20000212 	.word	0x20000212
 8000e34:	20000210 	.word	0x20000210

08000e38 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
	{
	}
	else if (huart->Instance == USART2)
 8000e38:	6802      	ldr	r2, [r0, #0]
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_UART_RxCpltCallback+0x2c>)
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10b      	bne.n	8000e58 <HAL_UART_RxCpltCallback+0x20>
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_UART_RxCpltCallback+0x30>)
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_UART_RxCpltCallback+0x34>)
 8000e44:	7819      	ldrb	r1, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8000e46:	8853      	ldrh	r3, [r2, #2]
 8000e48:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8000e4a:	b2db      	uxtb	r3, r3
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8000e4c:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8000e4e:	4413      	add	r3, r2
 8000e50:	7199      	strb	r1, [r3, #6]
	echo_uart2_state.item_num++;
 8000e52:	8893      	ldrh	r3, [r2, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	8093      	strh	r3, [r2, #4]
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8000e58:	4904      	ldr	r1, [pc, #16]	; (8000e6c <HAL_UART_RxCpltCallback+0x34>)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_RxCpltCallback+0x38>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f003 bc09 	b.w	8004674 <HAL_UART_Receive_IT>
 8000e62:	bf00      	nop
 8000e64:	40004400 	.word	0x40004400
 8000e68:	20000212 	.word	0x20000212
 8000e6c:	20000210 	.word	0x20000210
 8000e70:	20000668 	.word	0x20000668

08000e74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e74:	b530      	push	{r4, r5, lr}
 8000e76:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000e78:	2244      	movs	r2, #68	; 0x44
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	a805      	add	r0, sp, #20
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000e7e:	2514      	movs	r5, #20
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000e80:	f003 fc4c 	bl	800471c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000e84:	462a      	mov	r2, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	4668      	mov	r0, sp
 8000e8a:	f003 fc47 	bl	800471c <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e92:	f001 fd41 	bl	8002918 <HAL_PWREx_ControlVoltageScaling>
 8000e96:	4604      	mov	r4, r0
 8000e98:	b108      	cbz	r0, 8000e9e <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9a:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e9c:	e7fe      	b.n	8000e9c <SystemClock_Config+0x28>
	HAL_PWR_EnableBkUpAccess();
 8000e9e:	f001 fd2b 	bl	80028f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <SystemClock_Config+0x7c>)
 8000ea4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000ea8:	f023 0318 	bic.w	r3, r3, #24
 8000eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eb0:	2301      	movs	r3, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000eb2:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eb6:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000eba:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000ebc:	9505      	str	r5, [sp, #20]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ebe:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec0:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f001 fdef 	bl	8002aa4 <HAL_RCC_OscConfig>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	b108      	cbz	r0, 8000ece <SystemClock_Config+0x5a>
 8000eca:	b672      	cpsid	i
	while (1)
 8000ecc:	e7fe      	b.n	8000ecc <SystemClock_Config+0x58>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ed0:	e9cd 3000 	strd	r3, r0, [sp]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	e9cd 0002 	strd	r0, r0, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eda:	4668      	mov	r0, sp
 8000edc:	f002 f8b8 	bl	8003050 <HAL_RCC_ClockConfig>
 8000ee0:	b108      	cbz	r0, 8000ee6 <SystemClock_Config+0x72>
 8000ee2:	b672      	cpsid	i
	while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <SystemClock_Config+0x70>
	HAL_RCCEx_EnableMSIPLLMode();
 8000ee6:	f002 fa7d 	bl	80033e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eea:	b017      	add	sp, #92	; 0x5c
 8000eec:	bd30      	pop	{r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <main>:
{
 8000ef4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4dae      	ldr	r5, [pc, #696]	; (80011b4 <main+0x2c0>)
{
 8000efa:	b09b      	sub	sp, #108	; 0x6c
	HAL_Init();
 8000efc:	f000 fd06 	bl	800190c <HAL_Init>
	SystemClock_Config();
 8000f00:	f7ff ffb8 	bl	8000e74 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f04:	2214      	movs	r2, #20
 8000f06:	2100      	movs	r1, #0
 8000f08:	a80f      	add	r0, sp, #60	; 0x3c
 8000f0a:	f003 fc07 	bl	800471c <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000f16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f20:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f26:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000f28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000f3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000f4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 8000f54:	2200      	movs	r2, #0
 8000f56:	f641 6130 	movw	r1, #7728	; 0x1e30
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 8000f60:	f001 fcc4 	bl	80028ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 8000f64:	2200      	movs	r2, #0
 8000f66:	4894      	ldr	r0, [pc, #592]	; (80011b8 <main+0x2c4>)
 8000f68:	f242 0133 	movw	r1, #8243	; 0x2033
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB,
 8000f6e:	f001 fcbd 	bl	80028ec <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f72:	f04f 0802 	mov.w	r8, #2
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f76:	4891      	ldr	r0, [pc, #580]	; (80011bc <main+0x2c8>)
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f78:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2701      	movs	r7, #1
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	e9cd 640f 	strd	r6, r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f001 fbf2 	bl	8002770 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	f641 6330 	movw	r3, #7728	; 0x1e30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	a90f      	add	r1, sp, #60	; 0x3c
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f001 fbe7 	bl	8002770 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin
 8000fa2:	f242 0333 	movw	r3, #8243	; 0x2033
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	4884      	ldr	r0, [pc, #528]	; (80011b8 <main+0x2c4>)
 8000fa8:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f001 fbdd 	bl	8002770 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000fb8:	433b      	orrs	r3, r7
 8000fba:	64ab      	str	r3, [r5, #72]	; 0x48
 8000fbc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000fbe:	403b      	ands	r3, r7
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	4641      	mov	r1, r8
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fc4:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fc6:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fc8:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fca:	f001 fa3f 	bl	800244c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f001 fa6e 	bl	80024b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8000fd4:	4622      	mov	r2, r4
 8000fd6:	4641      	mov	r1, r8
 8000fd8:	200c      	movs	r0, #12
 8000fda:	f001 fa37 	bl	800244c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f001 fa66 	bl	80024b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f001 fa2f 	bl	800244c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f001 fa5e 	bl	80024b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	2011      	movs	r0, #17
 8000ffa:	f001 fa27 	bl	800244c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ffe:	2011      	movs	r0, #17
 8001000:	f001 fa56 	bl	80024b0 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8001004:	486e      	ldr	r0, [pc, #440]	; (80011c0 <main+0x2cc>)
	huart2.Init.BaudRate = 115200;
 8001006:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80011e4 <main+0x2f0>
	huart2.Init.Parity = UART_PARITY_NONE;
 800100a:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 800100c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001010:	e9c0 e300 	strd	lr, r3, [r0]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001016:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	e9c0 3405 	strd	r3, r4, [r0, #20]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	e9c0 4407 	strd	r4, r4, [r0, #28]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001022:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001024:	f003 fa97 	bl	8004556 <HAL_UART_Init>
 8001028:	4605      	mov	r5, r0
 800102a:	b108      	cbz	r0, 8001030 <main+0x13c>
 800102c:	b672      	cpsid	i
	while (1)
 800102e:	e7fe      	b.n	800102e <main+0x13a>
	ADC_MultiModeTypeDef multimode =
 8001030:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001034:	900a      	str	r0, [sp, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig =
 8001036:	4601      	mov	r1, r0
 8001038:	2218      	movs	r2, #24
 800103a:	a80f      	add	r0, sp, #60	; 0x3c
 800103c:	f003 fb6e 	bl	800471c <memset>
	hadc1.Instance = ADC1;
 8001040:	4c60      	ldr	r4, [pc, #384]	; (80011c4 <main+0x2d0>)
 8001042:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <main+0x2d4>)
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001044:	6125      	str	r5, [r4, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001046:	f44f 7980 	mov.w	r9, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800104a:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800104e:	f8a4 9018 	strh.w	r9, [r4, #24]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001052:	2308      	movs	r3, #8
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	4620      	mov	r0, r4
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800105e:	6163      	str	r3, [r4, #20]
	hadc1.Init.NbrOfConversion = 1;
 8001060:	61e7      	str	r7, [r4, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001066:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106a:	6365      	str	r5, [r4, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800106c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	f000 fc98 	bl	80019a4 <HAL_ADC_Init>
 8001074:	b108      	cbz	r0, 800107a <main+0x186>
 8001076:	b672      	cpsid	i
	while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x184>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800107a:	9008      	str	r0, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800107c:	a908      	add	r1, sp, #32
 800107e:	4620      	mov	r0, r4
 8001080:	f001 f970 	bl	8002364 <HAL_ADCEx_MultiModeConfigChannel>
 8001084:	b108      	cbz	r0, 800108a <main+0x196>
 8001086:	b672      	cpsid	i
	while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x194>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <main+0x2d8>)
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108c:	f04f 0b04 	mov.w	fp, #4
	sConfig.Offset = 0;
 8001090:	e9cd b013 	strd	fp, r0, [sp, #76]	; 0x4c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001094:	f04f 0a06 	mov.w	sl, #6
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001098:	f04f 087f 	mov.w	r8, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	a90f      	add	r1, sp, #60	; 0x3c
 800109e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	e9cd 3a0f 	strd	r3, sl, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a4:	e9cd b811 	strd	fp, r8, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	f000 fd9a 	bl	8001be0 <HAL_ADC_ConfigChannel>
 80010ac:	4605      	mov	r5, r0
 80010ae:	b108      	cbz	r0, 80010b4 <main+0x1c0>
 80010b0:	b672      	cpsid	i
	while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0x1be>
	ADC_ChannelConfTypeDef sConfig =
 80010b4:	4601      	mov	r1, r0
 80010b6:	2218      	movs	r2, #24
 80010b8:	a80f      	add	r0, sp, #60	; 0x3c
 80010ba:	f003 fb2f 	bl	800471c <memset>
	hadc2.Instance = ADC2;
 80010be:	4c44      	ldr	r4, [pc, #272]	; (80011d0 <main+0x2dc>)
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <main+0x2e0>)
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80010c2:	f8a4 9018 	strh.w	r9, [r4, #24]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c6:	e9c4 3500 	strd	r3, r5, [r4]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010ca:	f44f 6cd8 	mov.w	ip, #1728	; 0x6c0
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d2:	4620      	mov	r0, r4
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	e9c4 5b04 	strd	r5, fp, [r4, #16]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010dc:	e9c4 c30a 	strd	ip, r3, [r4, #40]	; 0x28
	hadc2.Init.NbrOfConversion = 1;
 80010e0:	61e7      	str	r7, [r4, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e2:	f884 5020 	strb.w	r5, [r4, #32]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80010e6:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	6365      	str	r5, [r4, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 80010ec:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f0:	f000 fc58 	bl	80019a4 <HAL_ADC_Init>
 80010f4:	b108      	cbz	r0, 80010fa <main+0x206>
 80010f6:	b672      	cpsid	i
	while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x204>
	sConfig.Channel = ADC_CHANNEL_12;
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <main+0x2e4>)
	sConfig.Offset = 0;
 80010fc:	e9cd b013 	strd	fp, r0, [sp, #76]	; 0x4c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001100:	a90f      	add	r1, sp, #60	; 0x3c
 8001102:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	e9cd 3a0f 	strd	r3, sl, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	e9cd b811 	strd	fp, r8, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800110c:	f000 fd68 	bl	8001be0 <HAL_ADC_ConfigChannel>
 8001110:	4604      	mov	r4, r0
 8001112:	b108      	cbz	r0, 8001118 <main+0x224>
 8001114:	b672      	cpsid	i
	while (1)
 8001116:	e7fe      	b.n	8001116 <main+0x222>
	TIM_OC_InitTypeDef sConfigOC =
 8001118:	4601      	mov	r1, r0
	TIM_MasterConfigTypeDef sMasterConfig =
 800111a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 800111e:	9007      	str	r0, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC =
 8001120:	221c      	movs	r2, #28
 8001122:	a808      	add	r0, sp, #32
 8001124:	f003 fafa 	bl	800471c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001128:	222c      	movs	r2, #44	; 0x2c
 800112a:	4621      	mov	r1, r4
 800112c:	a80f      	add	r0, sp, #60	; 0x3c
 800112e:	f003 faf5 	bl	800471c <memset>
	htim1.Instance = TIM1;
 8001132:	4d2a      	ldr	r5, [pc, #168]	; (80011dc <main+0x2e8>)
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <main+0x2ec>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	60ac      	str	r4, [r5, #8]
	htim1.Init.Prescaler = 0;
 8001138:	e9c5 3400 	strd	r3, r4, [r5]
	htim1.Init.Period = 9999;
 800113c:	f242 730f 	movw	r3, #9999	; 0x270f
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	e9c5 3403 	strd	r3, r4, [r5, #12]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001144:	4628      	mov	r0, r5
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001146:	2380      	movs	r3, #128	; 0x80
	htim1.Init.RepetitionCounter = 0;
 8001148:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114a:	61ab      	str	r3, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114c:	f002 fb98 	bl	8003880 <HAL_TIM_PWM_Init>
 8001150:	b108      	cbz	r0, 8001156 <main+0x262>
 8001152:	b672      	cpsid	i
	while (1)
 8001154:	e7fe      	b.n	8001154 <main+0x260>
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001156:	e9cd 0005 	strd	r0, r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115c:	a905      	add	r1, sp, #20
 800115e:	4628      	mov	r0, r5
 8001160:	f002 fcac 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4602      	mov	r2, r0
 8001166:	b108      	cbz	r0, 800116c <main+0x278>
 8001168:	b672      	cpsid	i
	while (1)
 800116a:	e7fe      	b.n	800116a <main+0x276>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800116c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001170:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001174:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001176:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	a908      	add	r1, sp, #32
 800117a:	4628      	mov	r0, r5
	sConfigOC.Pulse = 1;
 800117c:	e9cd 3708 	strd	r3, r7, [sp, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	f002 fc1a 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 8001184:	b108      	cbz	r0, 800118a <main+0x296>
 8001186:	b672      	cpsid	i
	while (1)
 8001188:	e7fe      	b.n	8001188 <main+0x294>
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800118a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800118e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8001192:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001196:	e9cd 0613 	strd	r0, r6, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800119a:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
 800119e:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a2:	9019      	str	r0, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a4:	a90f      	add	r1, sp, #60	; 0x3c
 80011a6:	4628      	mov	r0, r5
 80011a8:	f002 fcba 	bl	8003b20 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ac:	b1e0      	cbz	r0, 80011e8 <main+0x2f4>
 80011ae:	b672      	cpsid	i
	while (1)
 80011b0:	e7fe      	b.n	80011b0 <main+0x2bc>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	20000668 	.word	0x20000668
 80011c4:	20000318 	.word	0x20000318
 80011c8:	50040000 	.word	0x50040000
 80011cc:	2e300800 	.word	0x2e300800
 80011d0:	2000037c 	.word	0x2000037c
 80011d4:	50040100 	.word	0x50040100
 80011d8:	32601000 	.word	0x32601000
 80011dc:	20000500 	.word	0x20000500
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40004400 	.word	0x40004400
	htim2.Instance = TIM2;
 80011e8:	4c43      	ldr	r4, [pc, #268]	; (80012f8 <main+0x404>)
	HAL_TIM_MspPostInit(&htim1);
 80011ea:	4844      	ldr	r0, [pc, #272]	; (80012fc <main+0x408>)
	TIM_MasterConfigTypeDef sMasterConfig =
 80011ec:	2500      	movs	r5, #0
	HAL_TIM_MspPostInit(&htim1);
 80011ee:	f000 f9d1 	bl	8001594 <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC =
 80011f2:	221c      	movs	r2, #28
 80011f4:	4629      	mov	r1, r5
 80011f6:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig =
 80011f8:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80011fc:	950a      	str	r5, [sp, #40]	; 0x28
	htim2.Init.Prescaler = 79;
 80011fe:	f04f 084f 	mov.w	r8, #79	; 0x4f
	TIM_OC_InitTypeDef sConfigOC =
 8001202:	f003 fa8b 	bl	800471c <memset>
	htim2.Init.Period = 999;
 8001206:	f240 37e7 	movw	r7, #999	; 0x3e7
	htim2.Init.Prescaler = 79;
 800120a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800120e:	2680      	movs	r6, #128	; 0x80
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001210:	4620      	mov	r0, r4
	htim2.Init.Prescaler = 79;
 8001212:	e9c4 3800 	strd	r3, r8, [r4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	e9c4 7503 	strd	r7, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121c:	61a6      	str	r6, [r4, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800121e:	f002 faff 	bl	8003820 <HAL_TIM_OC_Init>
 8001222:	b108      	cbz	r0, 8001228 <main+0x334>
 8001224:	b672      	cpsid	i
	while (1)
 8001226:	e7fe      	b.n	8001226 <main+0x332>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001228:	4620      	mov	r0, r4
 800122a:	f002 fb29 	bl	8003880 <HAL_TIM_PWM_Init>
 800122e:	b108      	cbz	r0, 8001234 <main+0x340>
 8001230:	b672      	cpsid	i
	while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x33e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001234:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	eb0d 0103 	add.w	r1, sp, r3
 800123c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800123e:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001240:	f002 fc3c 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4602      	mov	r2, r0
 8001246:	b108      	cbz	r0, 800124c <main+0x358>
 8001248:	b672      	cpsid	i
	while (1)
 800124a:	e7fe      	b.n	800124a <main+0x356>
	sConfigOC.Pulse = 5;
 800124c:	2530      	movs	r5, #48	; 0x30
 800124e:	2305      	movs	r3, #5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001250:	9011      	str	r0, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	a90f      	add	r1, sp, #60	; 0x3c
 8001256:	4620      	mov	r0, r4
	sConfigOC.Pulse = 5;
 8001258:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f002 fb78 	bl	8003950 <HAL_TIM_OC_ConfigChannel>
 8001260:	b108      	cbz	r0, 8001266 <main+0x372>
 8001262:	b672      	cpsid	i
	while (1)
 8001264:	e7fe      	b.n	8001264 <main+0x370>
	sConfigOC.Pulse = 1010;
 8001266:	2060      	movs	r0, #96	; 0x60
 8001268:	f240 33f2 	movw	r3, #1010	; 0x3f2
 800126c:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	2204      	movs	r2, #4
 8001272:	a90f      	add	r1, sp, #60	; 0x3c
 8001274:	4620      	mov	r0, r4
 8001276:	f002 fb9f 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 800127a:	b108      	cbz	r0, 8001280 <main+0x38c>
 800127c:	b672      	cpsid	i
	while (1)
 800127e:	e7fe      	b.n	800127e <main+0x38a>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	6993      	ldr	r3, [r2, #24]
 8001284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001288:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800128a:	a90f      	add	r1, sp, #60	; 0x3c
	sConfigOC.Pulse = 1040;
 800128c:	f44f 6382 	mov.w	r3, #1040	; 0x410
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001290:	220c      	movs	r2, #12
 8001292:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001294:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.Pulse = 1040;
 8001296:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001298:	f002 fb5a 	bl	8003950 <HAL_TIM_OC_ConfigChannel>
 800129c:	4605      	mov	r5, r0
 800129e:	b108      	cbz	r0, 80012a4 <main+0x3b0>
 80012a0:	b672      	cpsid	i
	while (1)
 80012a2:	e7fe      	b.n	80012a2 <main+0x3ae>
	HAL_TIM_MspPostInit(&htim2);
 80012a4:	4620      	mov	r0, r4
 80012a6:	f000 f975 	bl	8001594 <HAL_TIM_MspPostInit>
	htim16.Instance = TIM16;
 80012aa:	4815      	ldr	r0, [pc, #84]	; (8001300 <main+0x40c>)
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <main+0x410>)
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ae:	6186      	str	r6, [r0, #24]
	htim16.Init.Prescaler = 79;
 80012b0:	e9c0 3800 	strd	r3, r8, [r0]
	htim16.Init.Period = 999;
 80012b4:	e9c0 5702 	strd	r5, r7, [r0, #8]
	htim16.Init.RepetitionCounter = 0;
 80012b8:	e9c0 5504 	strd	r5, r5, [r0, #16]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012bc:	f002 fa80 	bl	80037c0 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b108      	cbz	r0, 80012c8 <main+0x3d4>
 80012c4:	b672      	cpsid	i
	while (1)
 80012c6:	e7fe      	b.n	80012c6 <main+0x3d2>
	huart1.Instance = USART1;
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <main+0x414>)
	huart1.Init.BaudRate = 115200;
 80012ca:	4910      	ldr	r1, [pc, #64]	; (800130c <main+0x418>)
	huart1.Init.Parity = UART_PARITY_NONE;
 80012cc:	6103      	str	r3, [r0, #16]
	huart1.Init.BaudRate = 115200;
 80012ce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d2:	e9c0 1200 	strd	r1, r2, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012d6:	220c      	movs	r2, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012dc:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e0:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e6:	f003 f936 	bl	8004556 <HAL_UART_Init>
 80012ea:	b108      	cbz	r0, 80012f0 <main+0x3fc>
 80012ec:	b672      	cpsid	i
	while (1)
 80012ee:	e7fe      	b.n	80012ee <main+0x3fa>
	Echo_PCI_State_Init();
 80012f0:	f7ff fd4a 	bl	8000d88 <Echo_PCI_State_Init>
	while (1)
 80012f4:	e7fe      	b.n	80012f4 <main+0x400>
 80012f6:	bf00      	nop
 80012f8:	20000598 	.word	0x20000598
 80012fc:	20000500 	.word	0x20000500
 8001300:	2000054c 	.word	0x2000054c
 8001304:	40014400 	.word	0x40014400
 8001308:	200005e4 	.word	0x200005e4
 800130c:	40013800 	.word	0x40013800

08001310 <Error_Handler>:
 8001310:	b672      	cpsid	i
	while (1)
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0x2>

08001314 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_MspInit+0x2c>)
 8001316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	661a      	str	r2, [r3, #96]	; 0x60
 800131e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001320:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	f002 0201 	and.w	r2, r2, #1
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800132c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001330:	659a      	str	r2, [r3, #88]	; 0x58
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133c:	b002      	add	sp, #8
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001344:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	2214      	movs	r2, #20
{
 8001348:	b08a      	sub	sp, #40	; 0x28
 800134a:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	2100      	movs	r1, #0
 800134e:	eb0d 0002 	add.w	r0, sp, r2
 8001352:	f003 f9e3 	bl	800471c <memset>
  if(hadc->Instance==ADC1)
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_ADC_MspInit+0xf0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d13c      	bne.n	80013d8 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800135e:	4a36      	ldr	r2, [pc, #216]	; (8001438 <HAL_ADC_MspInit+0xf4>)
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001364:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8001366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_ADC_MspInit+0xf8>)
 800136a:	d108      	bne.n	800137e <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001380:	4e2f      	ldr	r6, [pc, #188]	; (8001440 <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001392:	2440      	movs	r4, #64	; 0x40
 8001394:	230b      	movs	r3, #11
 8001396:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 800139a:	a905      	add	r1, sp, #20
    hdma_adc1.Instance = DMA1_Channel1;
 800139c:	4c29      	ldr	r4, [pc, #164]	; (8001444 <HAL_ADC_MspInit+0x100>)
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f001 f9e5 	bl	8002770 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ac:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	6122      	str	r2, [r4, #16]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013bc:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013c4:	4620      	mov	r0, r4
 80013c6:	f001 f895 	bl	80024f4 <HAL_DMA_Init>
 80013ca:	b108      	cbz	r0, 80013d0 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
 80013cc:	f7ff ffa0 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80013d0:	64ec      	str	r4, [r5, #76]	; 0x4c
 80013d2:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013d4:	b00a      	add	sp, #40	; 0x28
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_ADC_MspInit+0x104>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d1fa      	bne.n	80013d4 <HAL_ADC_MspInit+0x90>
    HAL_RCC_ADC_CLK_ENABLED++;
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <HAL_ADC_MspInit+0xf4>)
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013e4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 80013e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_ADC_MspInit+0xf8>)
 80013ea:	d108      	bne.n	80013fe <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80013f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80013fa:	9203      	str	r2, [sp, #12]
 80013fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc2.Instance = DMA1_Channel2;
 8001400:	4c12      	ldr	r4, [pc, #72]	; (800144c <HAL_ADC_MspInit+0x108>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	64da      	str	r2, [r3, #76]	; 0x4c
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	9304      	str	r3, [sp, #16]
 8001410:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001412:	2680      	movs	r6, #128	; 0x80
 8001414:	230b      	movs	r3, #11
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800141c:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001420:	f001 f9a6 	bl	8002770 <HAL_GPIO_Init>
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <HAL_ADC_MspInit+0x10c>)
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	6126      	str	r6, [r4, #16]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001428:	2300      	movs	r3, #0
 800142a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	e7bf      	b.n	80013b4 <HAL_ADC_MspInit+0x70>
 8001434:	50040000 	.word	0x50040000
 8001438:	200006ec 	.word	0x200006ec
 800143c:	40021000 	.word	0x40021000
 8001440:	40020008 	.word	0x40020008
 8001444:	200003e0 	.word	0x200003e0
 8001448:	50040100 	.word	0x50040100
 800144c:	20000428 	.word	0x20000428
 8001450:	4002001c 	.word	0x4002001c

08001454 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001454:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM1)
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_PWM_MspInit+0x3c>)
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d115      	bne.n	800148a <HAL_TIM_PWM_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001462:	2102      	movs	r1, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800146a:	661a      	str	r2, [r3, #96]	; 0x60
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001478:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800147a:	f000 ffe7 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800147e:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001480:	b003      	add	sp, #12
 8001482:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001486:	f001 b813 	b.w	80024b0 <HAL_NVIC_EnableIRQ>
}
 800148a:	b003      	add	sp, #12
 800148c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001490:	40012c00 	.word	0x40012c00

08001494 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800149a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800149c:	4605      	mov	r5, r0
  if(htim_oc->Instance==TIM2)
 800149e:	d14e      	bne.n	800153e <HAL_TIM_OC_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80014a4:	4c27      	ldr	r4, [pc, #156]	; (8001544 <HAL_TIM_OC_MspInit+0xb0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80014a8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8001550 <HAL_TIM_OC_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	659a      	str	r2, [r3, #88]	; 0x58
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c0:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ca:	e9c4 e204 	strd	lr, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ce:	2300      	movs	r3, #0
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	2220      	movs	r2, #32
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80014d6:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80014dc:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80014e2:	f001 f807 	bl	80024f4 <HAL_DMA_Init>
 80014e6:	b108      	cbz	r0, 80014ec <HAL_TIM_OC_MspInit+0x58>
    {
      Error_Handler();
 80014e8:	f7ff ff12 	bl	8001310 <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_TIM_OC_MspInit+0xb4>)
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80014ee:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80014f0:	632c      	str	r4, [r5, #48]	; 0x30
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80014f2:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80014f4:	4c15      	ldr	r4, [pc, #84]	; (800154c <HAL_TIM_OC_MspInit+0xb8>)
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001502:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001506:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800150a:	2220      	movs	r2, #32
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800150e:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001512:	4620      	mov	r0, r4
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001514:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800151a:	f000 ffeb 	bl	80024f4 <HAL_DMA_Init>
 800151e:	b108      	cbz	r0, 8001524 <HAL_TIM_OC_MspInit+0x90>
    {
      Error_Handler();
 8001520:	f7ff fef6 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001524:	626c      	str	r4, [r5, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2102      	movs	r1, #2
 800152a:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800152c:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800152e:	f000 ff8d 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001532:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001534:	b003      	add	sp, #12
 8001536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800153a:	f000 bfb9 	b.w	80024b0 <HAL_NVIC_EnableIRQ>
}
 800153e:	b003      	add	sp, #12
 8001540:	bd30      	pop	{r4, r5, pc}
 8001542:	bf00      	nop
 8001544:	200004b8 	.word	0x200004b8
 8001548:	40020058 	.word	0x40020058
 800154c:	20000470 	.word	0x20000470
 8001550:	40020080 	.word	0x40020080

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_Base_MspInit+0x3c>)
 8001558:	6802      	ldr	r2, [r0, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d115      	bne.n	800158a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800155e:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001562:	2102      	movs	r1, #2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800156a:	661a      	str	r2, [r3, #96]	; 0x60
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001578:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800157a:	f000 ff67 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800157e:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001580:	b003      	add	sp, #12
 8001582:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001586:	f000 bf93 	b.w	80024b0 <HAL_NVIC_EnableIRQ>
}
 800158a:	b003      	add	sp, #12
 800158c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001590:	40014400 	.word	0x40014400

08001594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001594:	b530      	push	{r4, r5, lr}
 8001596:	4604      	mov	r4, r0
 8001598:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	2214      	movs	r2, #20
 800159c:	2100      	movs	r1, #0
 800159e:	a803      	add	r0, sp, #12
 80015a0:	f003 f8bc 	bl	800471c <memset>
  if(htim->Instance==TIM1)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_TIM_MspPostInit+0xa4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d117      	bne.n	80015dc <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_TIM_MspPostInit+0xa8>)
 80015ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	2302      	movs	r3, #2
 80015c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 80015ce:	a903      	add	r1, sp, #12
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f001 f8cc 	bl	8002770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015d8:	b009      	add	sp, #36	; 0x24
 80015da:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d1fa      	bne.n	80015d8 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f2:	f002 0201 	and.w	r2, r2, #1
 80015f6:	9201      	str	r2, [sp, #4]
 80015f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fc:	f042 0202 	orr.w	r2, r2, #2
 8001600:	64da      	str	r2, [r3, #76]	; 0x4c
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800160c:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	f248 0302 	movw	r3, #32770	; 0x8002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	a903      	add	r1, sp, #12
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f001 f8a7 	bl	8002770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
 8001622:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001632:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8001634:	a903      	add	r1, sp, #12
 8001636:	e7cd      	b.n	80015d4 <HAL_TIM_MspPostInit+0x40>
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400

08001644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b510      	push	{r4, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	2214      	movs	r2, #20
 800164c:	2100      	movs	r1, #0
 800164e:	a804      	add	r0, sp, #16
 8001650:	f003 f864 	bl	800471c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	2234      	movs	r2, #52	; 0x34
 8001656:	2100      	movs	r1, #0
 8001658:	a809      	add	r0, sp, #36	; 0x24
 800165a:	f003 f85f 	bl	800471c <memset>
  if(huart->Instance==USART1)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	4a34      	ldr	r2, [pc, #208]	; (8001734 <HAL_UART_MspInit+0xf0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d132      	bne.n	80016cc <HAL_UART_MspInit+0x88>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001666:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800166a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f001 fdc4 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	b108      	cbz	r0, 8001676 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001672:	f7ff fe4d 	bl	8001310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	4830      	ldr	r0, [pc, #192]	; (800173c <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800167a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001680:	661a      	str	r2, [r3, #96]	; 0x60
 8001682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001684:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168e:	f042 0202 	orr.w	r2, r2, #2
 8001692:	64da      	str	r2, [r3, #76]	; 0x4c
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	21c0      	movs	r1, #192	; 0xc0
 80016a0:	2302      	movs	r3, #2
 80016a2:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2400      	movs	r4, #0
 80016a8:	2303      	movs	r3, #3
 80016aa:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f001 f85c 	bl	8002770 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b8:	2025      	movs	r0, #37	; 0x25
 80016ba:	4622      	mov	r2, r4
 80016bc:	4621      	mov	r1, r4
 80016be:	f000 fec5 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c2:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c4:	f000 fef4 	bl	80024b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c8:	b016      	add	sp, #88	; 0x58
 80016ca:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80016cc:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <HAL_UART_MspInit+0xfc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d1fa      	bne.n	80016c8 <HAL_UART_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d2:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d6:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f001 fd8e 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	b108      	cbz	r0, 80016e2 <HAL_UART_MspInit+0x9e>
      Error_Handler();
 80016de:	f7ff fe17 	bl	8001310 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_MspInit+0xf4>)
 80016e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016ea:	659a      	str	r2, [r3, #88]	; 0x58
 80016ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016f2:	9202      	str	r2, [sp, #8]
 80016f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2400      	movs	r4, #0
 8001712:	2303      	movs	r3, #3
 8001714:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001720:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f001 f825 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001726:	2026      	movs	r0, #38	; 0x26
 8001728:	4622      	mov	r2, r4
 800172a:	4621      	mov	r1, r4
 800172c:	f000 fe8e 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001730:	2026      	movs	r0, #38	; 0x26
 8001732:	e7c7      	b.n	80016c4 <HAL_UART_MspInit+0x80>
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000
 800173c:	48000400 	.word	0x48000400
 8001740:	40004400 	.word	0x40004400

08001744 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler>

08001746 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler>

08001748 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler>

0800174a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler>

0800174c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler>

0800174e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 b8ea 	b.w	800192c <HAL_IncTick>

08001758 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001758:	4801      	ldr	r0, [pc, #4]	; (8001760 <DMA1_Channel1_IRQHandler+0x8>)
 800175a:	f000 bfbf 	b.w	80026dc <HAL_DMA_IRQHandler>
 800175e:	bf00      	nop
 8001760:	200003e0 	.word	0x200003e0

08001764 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <DMA1_Channel2_IRQHandler+0x8>)
 8001766:	f000 bfb9 	b.w	80026dc <HAL_DMA_IRQHandler>
 800176a:	bf00      	nop
 800176c:	20000428 	.word	0x20000428

08001770 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <DMA1_Channel5_IRQHandler+0x8>)
 8001772:	f000 bfb3 	b.w	80026dc <HAL_DMA_IRQHandler>
 8001776:	bf00      	nop
 8001778:	20000470 	.word	0x20000470

0800177c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <DMA1_Channel7_IRQHandler+0x8>)
 800177e:	f000 bfad 	b.w	80026dc <HAL_DMA_IRQHandler>
 8001782:	bf00      	nop
 8001784:	200004b8 	.word	0x200004b8

08001788 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800178a:	4804      	ldr	r0, [pc, #16]	; (800179c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800178c:	f001 ff2e 	bl	80035ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001796:	f001 bf29 	b.w	80035ec <HAL_TIM_IRQHandler>
 800179a:	bf00      	nop
 800179c:	20000500 	.word	0x20000500
 80017a0:	2000054c 	.word	0x2000054c

080017a4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4801      	ldr	r0, [pc, #4]	; (80017ac <TIM2_IRQHandler+0x8>)
 80017a6:	f001 bf21 	b.w	80035ec <HAL_TIM_IRQHandler>
 80017aa:	bf00      	nop
 80017ac:	20000598 	.word	0x20000598

080017b0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <USART1_IRQHandler+0x8>)
 80017b2:	f002 ba9b 	b.w	8003cec <HAL_UART_IRQHandler>
 80017b6:	bf00      	nop
 80017b8:	200005e4 	.word	0x200005e4

080017bc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <USART2_IRQHandler+0x8>)
 80017be:	f002 ba95 	b.w	8003cec <HAL_UART_IRQHandler>
 80017c2:	bf00      	nop
 80017c4:	20000668 	.word	0x20000668

080017c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	460d      	mov	r5, r1
 80017cc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	460e      	mov	r6, r1
 80017d0:	1b73      	subs	r3, r6, r5
 80017d2:	429c      	cmp	r4, r3
 80017d4:	dc01      	bgt.n	80017da <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017d6:	4620      	mov	r0, r4
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	e7f5      	b.n	80017d0 <_read+0x8>

080017e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	460d      	mov	r5, r1
 80017e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	460e      	mov	r6, r1
 80017ec:	1b73      	subs	r3, r6, r5
 80017ee:	429c      	cmp	r4, r3
 80017f0:	dc01      	bgt.n	80017f6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80017f2:	4620      	mov	r0, r4
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80017f6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80017fa:	f7ff fa31 	bl	8000c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	e7f5      	b.n	80017ec <_write+0x8>

08001800 <_close>:

int _close(int file)
{
	return -1;
}
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	4770      	bx	lr

08001806 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800180c:	2000      	movs	r0, #0
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001810:	2001      	movs	r0, #1
 8001812:	4770      	bx	lr

08001814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001814:	2000      	movs	r0, #0
 8001816:	4770      	bx	lr

08001818 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <_sbrk+0x30>)
 800181a:	6811      	ldr	r1, [r2, #0]
{
 800181c:	b510      	push	{r4, lr}
 800181e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001820:	b909      	cbnz	r1, 8001826 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <_sbrk+0x34>)
 8001824:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	6810      	ldr	r0, [r2, #0]
 8001828:	4909      	ldr	r1, [pc, #36]	; (8001850 <_sbrk+0x38>)
 800182a:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <_sbrk+0x3c>)
 800182c:	4403      	add	r3, r0
 800182e:	1b09      	subs	r1, r1, r4
 8001830:	428b      	cmp	r3, r1
 8001832:	d906      	bls.n	8001842 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001834:	f002 ff48 	bl	80046c8 <__errno>
 8001838:	230c      	movs	r3, #12
 800183a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800183c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001840:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001842:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001844:	e7fc      	b.n	8001840 <_sbrk+0x28>
 8001846:	bf00      	nop
 8001848:	200006f0 	.word	0x200006f0
 800184c:	20000708 	.word	0x20000708
 8001850:	2000a000 	.word	0x2000a000
 8001854:	00000800 	.word	0x00000800

08001858 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <SystemInit+0x10>)
 800185a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800185e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001862:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopForever+0x2>
 8001870:	f7ff fff2 	bl	8001858 <SystemInit>
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <LoopForever+0x6>)
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <LoopForever+0xa>)
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <LoopForever+0xe>)
 800187a:	2300      	movs	r3, #0
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:
 800187e:	58d4      	ldr	r4, [r2, r3]
 8001880:	50c4      	str	r4, [r0, r3]
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:
 8001884:	18c4      	adds	r4, r0, r3
 8001886:	428c      	cmp	r4, r1
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <LoopForever+0x12>)
 800188c:	4c0a      	ldr	r4, [pc, #40]	; (80018b8 <LoopForever+0x16>)
 800188e:	2300      	movs	r3, #0
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:
 8001896:	42a2      	cmp	r2, r4
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>
 800189a:	f002 ff1b 	bl	80046d4 <__libc_init_array>
 800189e:	f7ff fb29 	bl	8000ef4 <main>

080018a2 <LoopForever>:
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
 80018a4:	2000a000 	.word	0x2000a000
 80018a8:	20000000 	.word	0x20000000
 80018ac:	2000007c 	.word	0x2000007c
 80018b0:	08005f20 	.word	0x08005f20
 80018b4:	2000007c 	.word	0x2000007c
 80018b8:	20000708 	.word	0x20000708

080018bc <ADC1_2_IRQHandler>:
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_InitTick+0x40>)
{
 80018c4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80018c6:	7818      	ldrb	r0, [r3, #0]
 80018c8:	b908      	cbnz	r0, 80018ce <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80018cc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_InitTick+0x44>)
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80018d8:	6810      	ldr	r0, [r2, #0]
 80018da:	fbb0 f0f3 	udiv	r0, r0, r3
 80018de:	f000 fdf5 	bl	80024cc <HAL_SYSTICK_Config>
 80018e2:	4604      	mov	r4, r0
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e8:	2d0f      	cmp	r5, #15
 80018ea:	d8ee      	bhi.n	80018ca <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	4602      	mov	r2, r0
 80018ee:	4629      	mov	r1, r5
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 fdaa 	bl	800244c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_InitTick+0x48>)
 80018fa:	4620      	mov	r0, r4
 80018fc:	601d      	str	r5, [r3, #0]
  return status;
 80018fe:	e7e5      	b.n	80018cc <HAL_InitTick+0xc>
 8001900:	20000010 	.word	0x20000010
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000014 	.word	0x20000014

0800190c <HAL_Init>:
{
 800190c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 fd8a 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ffd3 	bl	80018c0 <HAL_InitTick>
 800191a:	4604      	mov	r4, r0
 800191c:	b918      	cbnz	r0, 8001926 <HAL_Init+0x1a>
    HAL_MspInit();
 800191e:	f7ff fcf9 	bl	8001314 <HAL_MspInit>
}
 8001922:	4620      	mov	r0, r4
 8001924:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001926:	2401      	movs	r4, #1
 8001928:	e7fb      	b.n	8001922 <HAL_Init+0x16>
	...

0800192c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x10>)
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_IncTick+0x14>)
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	440b      	add	r3, r1
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200006f4 	.word	0x200006f4
 8001940:	20000010 	.word	0x20000010

08001944 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <HAL_GetTick+0x8>)
 8001946:	6818      	ldr	r0, [r3, #0]
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200006f4 	.word	0x200006f4

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fff6 	bl	8001944 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001958:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800195a:	bf1c      	itt	ne
 800195c:	4b05      	ldrne	r3, [pc, #20]	; (8001974 <HAL_Delay+0x24>)
 800195e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001960:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001962:	bf18      	it	ne
 8001964:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	f7ff ffed 	bl	8001944 <HAL_GetTick>
 800196a:	1b43      	subs	r3, r0, r5
 800196c:	42a3      	cmp	r3, r4
 800196e:	d3fa      	bcc.n	8001966 <HAL_Delay+0x16>
  {
  }
}
 8001970:	bd38      	pop	{r3, r4, r5, pc}
 8001972:	bf00      	nop
 8001974:	20000010 	.word	0x20000010

08001978 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001978:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800197a:	0dcc      	lsrs	r4, r1, #23
 800197c:	f004 0404 	and.w	r4, r4, #4
 8001980:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001982:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001986:	5823      	ldr	r3, [r4, r0]
 8001988:	2507      	movs	r5, #7
 800198a:	408d      	lsls	r5, r1
 800198c:	ea23 0305 	bic.w	r3, r3, r5
 8001990:	fa02 f101 	lsl.w	r1, r2, r1
 8001994:	430b      	orrs	r3, r1
 8001996:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001998:	bd30      	pop	{r4, r5, pc}

0800199a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199a:	6880      	ldr	r0, [r0, #8]
}
 800199c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019aa:	4604      	mov	r4, r0
 80019ac:	2800      	cmp	r0, #0
 80019ae:	f000 80c3 	beq.w	8001b38 <HAL_ADC_Init+0x194>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80019b4:	b925      	cbnz	r5, 80019c0 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b6:	f7ff fcc5 	bl	8001344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019bc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019c0:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019c2:	6883      	ldr	r3, [r0, #8]
 80019c4:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c6:	bf41      	itttt	mi
 80019c8:	6883      	ldrmi	r3, [r0, #8]
 80019ca:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 80019ce:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 80019d2:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d4:	6883      	ldr	r3, [r0, #8]
 80019d6:	00dd      	lsls	r5, r3, #3
 80019d8:	f140 808e 	bpl.w	8001af8 <HAL_ADC_Init+0x154>
 80019dc:	6883      	ldr	r3, [r0, #8]
 80019de:	00d9      	lsls	r1, r3, #3
 80019e0:	f100 80a1 	bmi.w	8001b26 <HAL_ADC_Init+0x182>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019f4:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f6:	f7ff ffd0 	bl	800199a <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a04:	f040 8095 	bne.w	8001b32 <HAL_ADC_Init+0x18e>
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a10:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a14:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a16:	07da      	lsls	r2, r3, #31
 8001a18:	d40e      	bmi.n	8001a38 <HAL_ADC_Init+0x94>
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_ADC_Init+0x198>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a22:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	07db      	lsls	r3, r3, #31
 8001a28:	d406      	bmi.n	8001a38 <HAL_ADC_Init+0x94>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a2a:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_ADC_Init+0x19c>)
 8001a2c:	6865      	ldr	r5, [r4, #4]
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001a34:	432b      	orrs	r3, r5
 8001a36:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001a38:	68e5      	ldr	r5, [r4, #12]
 8001a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a3c:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001a40:	432b      	orrs	r3, r5
 8001a42:	68a5      	ldr	r5, [r4, #8]
 8001a44:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a46:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a48:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8001a4a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a52:	bf02      	ittt	eq
 8001a54:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8001a56:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001a5a:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a60:	b122      	cbz	r2, 8001a6c <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001a62:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a64:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a68:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a6a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a6c:	68c5      	ldr	r5, [r0, #12]
 8001a6e:	4a35      	ldr	r2, [pc, #212]	; (8001b44 <HAL_ADC_Init+0x1a0>)
 8001a70:	402a      	ands	r2, r5
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a76:	f7ff ff90 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a7a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	f002 0208 	and.w	r2, r2, #8
 8001a82:	4302      	orrs	r2, r0
 8001a84:	d120      	bne.n	8001ac8 <HAL_ADC_Init+0x124>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a86:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a88:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8c:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a8e:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a90:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a94:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a98:	f020 0002 	bic.w	r0, r0, #2
 8001a9c:	4302      	orrs	r2, r0
 8001a9e:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aa0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001aa4:	2a01      	cmp	r2, #1
 8001aa6:	d140      	bne.n	8001b2a <HAL_ADC_Init+0x186>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aa8:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8001aac:	6918      	ldr	r0, [r3, #16]
 8001aae:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001ab2:	f020 0004 	bic.w	r0, r0, #4
 8001ab6:	432a      	orrs	r2, r5
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001abc:	4302      	orrs	r2, r0
 8001abe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ac0:	4302      	orrs	r2, r0
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ac6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac8:	6922      	ldr	r2, [r4, #16]
 8001aca:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001acc:	bf05      	ittet	eq
 8001ace:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001ad0:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ad4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001ad8:	bf06      	itte	eq
 8001ada:	f020 000f 	biceq.w	r0, r0, #15
 8001ade:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ae0:	f022 020f 	bicne.w	r2, r2, #15
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ae8:	f023 0303 	bic.w	r3, r3, #3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001af2:	4608      	mov	r0, r1
 8001af4:	b003      	add	sp, #12
 8001af6:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001af8:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_ADC_Init+0x1a4>)
 8001afc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6083      	str	r3, [r0, #8]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_ADC_Init+0x1a8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8001b16:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f43f af5e 	beq.w	80019dc <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	e7f7      	b.n	8001b16 <HAL_ADC_Init+0x172>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b26:	2100      	movs	r1, #0
 8001b28:	e765      	b.n	80019f6 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	e7c9      	b.n	8001ac6 <HAL_ADC_Init+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001b38:	2101      	movs	r1, #1
 8001b3a:	e7da      	b.n	8001af2 <HAL_ADC_Init+0x14e>
 8001b3c:	50040000 	.word	0x50040000
 8001b40:	50040300 	.word	0x50040300
 8001b44:	fff0c007 	.word	0xfff0c007
 8001b48:	00030d40 	.word	0x00030d40
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_ADC_ConvHalfCpltCallback>:
 8001b50:	4770      	bx	lr

08001b52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b52:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b54:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001b56:	f7ff fffb 	bl	8001b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b5a:	bd08      	pop	{r3, pc}

08001b5c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b60:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001b64:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b68:	d121      	bne.n	8001bae <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	0708      	lsls	r0, r1, #28
 8001b76:	d516      	bpl.n	8001ba6 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b78:	68d1      	ldr	r1, [r2, #12]
 8001b7a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001b7e:	d10e      	bne.n	8001b9e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b80:	68d2      	ldr	r2, [r2, #12]
 8001b82:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b86:	d10a      	bne.n	8001b9e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b92:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b94:	bf5e      	ittt	pl
 8001b96:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8001b98:	f042 0201 	orrpl.w	r2, r2, #1
 8001b9c:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe ff72 	bl	8000a88 <HAL_ADC_ConvCpltCallback>
}
 8001ba4:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001ba6:	68d2      	ldr	r2, [r2, #12]
 8001ba8:	f012 0f02 	tst.w	r2, #2
 8001bac:	e7eb      	b.n	8001b86 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bae:	06d2      	lsls	r2, r2, #27
 8001bb0:	d503      	bpl.n	8001bba <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ff22 	bl	80009fc <HAL_ADC_ErrorCallback>
 8001bb8:	e7f4      	b.n	8001ba4 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	4718      	bx	r3

08001bc4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001bc6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bc8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bce:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bd0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bd8:	f7fe ff10 	bl	80009fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bdc:	bd08      	pop	{r3, pc}
	...

08001be0 <HAL_ADC_ConfigChannel>:
{
 8001be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001be6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001bea:	2b01      	cmp	r3, #1
{
 8001bec:	4605      	mov	r5, r0
 8001bee:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8001bf0:	f000 81a5 	beq.w	8001f3e <HAL_ADC_ConfigChannel+0x35e>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfa:	6800      	ldr	r0, [r0, #0]
 8001bfc:	f7ff fecd 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001c00:	2800      	cmp	r0, #0
 8001c02:	f040 8196 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank <= 5U)
 8001c06:	684b      	ldr	r3, [r1, #4]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d809      	bhi.n	8001c20 <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 8001c0c:	3b02      	subs	r3, #2
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	f200 8094 	bhi.w	8001d3c <HAL_ADC_ConfigChannel+0x15c>
 8001c14:	e8df f003 	tbb	[pc, r3]
 8001c18:	8f8d8b02 	.word	0x8f8d8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c1c:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c1e:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c20:	6862      	ldr	r2, [r4, #4]
 8001c22:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8001c24:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c26:	0991      	lsrs	r1, r2, #6
 8001c28:	f001 010c 	and.w	r1, r1, #12
 8001c2c:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	59ce      	ldr	r6, [r1, r7]
 8001c36:	f04f 0c1f 	mov.w	ip, #31
 8001c3a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	fa0c f202 	lsl.w	r2, ip, r2
 8001c44:	ea26 0202 	bic.w	r2, r6, r2
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4c:	f7ff fea5 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001c50:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c52:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c54:	6882      	ldr	r2, [r0, #8]
 8001c56:	f002 0208 	and.w	r2, r2, #8
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	d124      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0xc8>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c5e:	68a3      	ldr	r3, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c60:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c66:	d16b      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c68:	f7ff fe86 	bl	8001978 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c6c:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c6e:	6953      	ldr	r3, [r2, #20]
 8001c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c74:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c76:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c78:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c7a:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c7c:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c7e:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8001c84:	d064      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c86:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001c8a:	0048      	lsls	r0, r1, #1
 8001c8c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001c8e:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001c92:	4081      	lsls	r1, r0
 8001c94:	48ab      	ldr	r0, [pc, #684]	; (8001f44 <HAL_ADC_ConfigChannel+0x364>)
 8001c96:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001c9a:	4038      	ands	r0, r7
 8001c9c:	4310      	orrs	r0, r2
 8001c9e:	4301      	orrs	r1, r0
 8001ca0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001ca4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001caa:	6883      	ldr	r3, [r0, #8]
 8001cac:	07d9      	lsls	r1, r3, #31
 8001cae:	d433      	bmi.n	8001d18 <HAL_ADC_ConfigChannel+0x138>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cb0:	68e7      	ldr	r7, [r4, #12]
 8001cb2:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001cb4:	4aa4      	ldr	r2, [pc, #656]	; (8001f48 <HAL_ADC_ConfigChannel+0x368>)
 8001cb6:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001cba:	f007 0c18 	and.w	ip, r7, #24
 8001cbe:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001cc2:	fa22 f20c 	lsr.w	r2, r2, ip
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	ea21 0106 	bic.w	r1, r1, r6
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cd2:	4a9e      	ldr	r2, [pc, #632]	; (8001f4c <HAL_ADC_ConfigChannel+0x36c>)
 8001cd4:	4297      	cmp	r7, r2
 8001cd6:	d11f      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x138>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cd8:	2e00      	cmp	r6, #0
 8001cda:	f040 808e 	bne.w	8001dfa <HAL_ADC_ConfigChannel+0x21a>
 8001cde:	0e9a      	lsrs	r2, r3, #26
 8001ce0:	3201      	adds	r2, #1
 8001ce2:	f002 071f 	and.w	r7, r2, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cea:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001cf0:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	f200 80b3 	bhi.w	8001e5e <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	f040 8099 	bne.w	8001e32 <HAL_ADC_ConfigChannel+0x252>
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	3301      	adds	r3, #1
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0e:	ea42 0103 	orr.w	r1, r2, r3
 8001d12:	68a2      	ldr	r2, [r4, #8]
 8001d14:	f7ff fe30 	bl	8001978 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d18:	6821      	ldr	r1, [r4, #0]
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <HAL_ADC_ConfigChannel+0x370>)
 8001d1c:	4219      	tst	r1, r3
 8001d1e:	f040 80b9 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x2b4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001d24:	2300      	movs	r3, #0
 8001d26:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001d2a:	b003      	add	sp, #12
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	e775      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d32:	2318      	movs	r3, #24
 8001d34:	e773      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	e770      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e76e      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fe19 	bl	8001978 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d46:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d48:	6953      	ldr	r3, [r2, #20]
 8001d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d4e:	e791      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d50:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001d52:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d54:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d58:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5c:	2e00      	cmp	r6, #0
 8001d5e:	d138      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x1f2>
 8001d60:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d64:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001d66:	bf02      	ittt	eq
 8001d68:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8001d6a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001d6e:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d70:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d7a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7e:	bb68      	cbnz	r0, 8001ddc <HAL_ADC_ConfigChannel+0x1fc>
 8001d80:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d84:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001d86:	bf02      	ittt	eq
 8001d88:	685a      	ldreq	r2, [r3, #4]
 8001d8a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001d8e:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d90:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d9a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d9e:	bb10      	cbnz	r0, 8001de6 <HAL_ADC_ConfigChannel+0x206>
 8001da0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001da6:	bf02      	ittt	eq
 8001da8:	689a      	ldreq	r2, [r3, #8]
 8001daa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db0:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dba:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dbe:	b9b8      	cbnz	r0, 8001df0 <HAL_ADC_ConfigChannel+0x210>
 8001dc0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dc4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001dc6:	bf02      	ittt	eq
 8001dc8:	68da      	ldreq	r2, [r3, #12]
 8001dca:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001dce:	60da      	streq	r2, [r3, #12]
}
 8001dd0:	e76a      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	e7c3      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	e7ce      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	e7d9      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	e7e4      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001dfe:	b132      	cbz	r2, 8001e0e <HAL_ADC_ConfigChannel+0x22e>
  return __builtin_clz(value);
 8001e00:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e04:	3201      	adds	r2, #1
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2a09      	cmp	r2, #9
 8001e0c:	d816      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001e12:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e16:	3201      	adds	r2, #1
 8001e18:	0692      	lsls	r2, r2, #26
 8001e1a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8001e22:	fab1 f181 	clz	r1, r1
 8001e26:	3101      	adds	r1, #1
 8001e28:	f001 071f 	and.w	r7, r1, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	40b9      	lsls	r1, r7
 8001e30:	e762      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	e762      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	3201      	adds	r2, #1
 8001e46:	0692      	lsls	r2, r2, #26
 8001e48:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8001e50:	fab1 f181 	clz	r1, r1
 8001e54:	3101      	adds	r1, #1
 8001e56:	f001 071f 	and.w	r7, r1, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	40b9      	lsls	r1, r7
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	b95e      	cbnz	r6, 8001e7a <HAL_ADC_ConfigChannel+0x29a>
 8001e62:	0e9e      	lsrs	r6, r3, #26
 8001e64:	3601      	adds	r6, #1
 8001e66:	f006 061f 	and.w	r6, r6, #31
 8001e6a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8001e6e:	391e      	subs	r1, #30
 8001e70:	0509      	lsls	r1, r1, #20
 8001e72:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e76:	4311      	orrs	r1, r2
 8001e78:	e74b      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8001e7e:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e82:	3101      	adds	r1, #1
 8001e84:	f001 031f 	and.w	r3, r1, #31
 8001e88:	f06f 061d 	mvn.w	r6, #29
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	fb11 6103 	smlabb	r1, r1, r3, r6
 8001e92:	e7ed      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x290>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <HAL_ADC_ConfigChannel+0x378>)
 8001e98:	6898      	ldr	r0, [r3, #8]
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8001ea0:	d11e      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x300>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ea2:	0202      	lsls	r2, r0, #8
 8001ea4:	f53f af3d 	bmi.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea8:	6829      	ldr	r1, [r5, #0]
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <HAL_ADC_ConfigChannel+0x37c>)
 8001eac:	4291      	cmp	r1, r2
 8001eae:	f47f af38 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001eb8:	4322      	orrs	r2, r4
 8001eba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ebe:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_ADC_ConfigChannel+0x380>)
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <HAL_ADC_ConfigChannel+0x384>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001eca:	230c      	movs	r3, #12
 8001ecc:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8001ed0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f43f af24 	beq.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 8001eda:	9b01      	ldr	r3, [sp, #4]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	e7f7      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2f0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <HAL_ADC_ConfigChannel+0x388>)
 8001ee2:	4291      	cmp	r1, r2
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x32a>
 8001ee6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001eea:	f47f af1a 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eee:	6829      	ldr	r1, [r5, #0]
 8001ef0:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8001ef4:	4291      	cmp	r1, r2
 8001ef6:	f47f af14 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001f00:	4322      	orrs	r2, r4
 8001f02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	e70c      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f0a:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_ADC_ConfigChannel+0x38c>)
 8001f0c:	4291      	cmp	r1, r2
 8001f0e:	f47f af08 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f12:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001f16:	f47f af04 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1a:	6829      	ldr	r1, [r5, #0]
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_ADC_ConfigChannel+0x37c>)
 8001f1e:	4291      	cmp	r1, r2
 8001f20:	f47f aeff 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001f2a:	4322      	orrs	r2, r4
 8001f2c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f30:	e7e9      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	e6f2      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	e6f3      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x14a>
 8001f42:	bf00      	nop
 8001f44:	03fff000 	.word	0x03fff000
 8001f48:	0007ffff 	.word	0x0007ffff
 8001f4c:	407f0000 	.word	0x407f0000
 8001f50:	80080000 	.word	0x80080000
 8001f54:	50040300 	.word	0x50040300
 8001f58:	c7520000 	.word	0xc7520000
 8001f5c:	50040000 	.word	0x50040000
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	00030d40 	.word	0x00030d40
 8001f68:	cb840000 	.word	0xcb840000
 8001f6c:	80000001 	.word	0x80000001

08001f70 <ADC_ConversionStop>:
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f74:	6800      	ldr	r0, [r0, #0]
 8001f76:	f7ff fd10 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	f002 0208 	and.w	r2, r2, #8
 8001f82:	4302      	orrs	r2, r0
 8001f84:	d101      	bne.n	8001f8a <ADC_ConversionStop+0x1a>
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
}
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	0190      	lsls	r0, r2, #6
 8001f8e:	d52b      	bpl.n	8001fe8 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f90:	8b20      	ldrh	r0, [r4, #24]
 8001f92:	f240 1201 	movw	r2, #257	; 0x101
 8001f96:	4290      	cmp	r0, r2
 8001f98:	d126      	bne.n	8001fe8 <ADC_ConversionStop+0x78>
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	0649      	lsls	r1, r1, #25
 8001fa0:	d516      	bpl.n	8001fd0 <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001fa6:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fcf6 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001fae:	b158      	cbz	r0, 8001fc8 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fb0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fb2:	6893      	ldr	r3, [r2, #8]
 8001fb4:	079e      	lsls	r6, r3, #30
 8001fb6:	d407      	bmi.n	8001fc8 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8001fb8:	6893      	ldr	r3, [r2, #8]
 8001fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001fc8:	2901      	cmp	r1, #1
 8001fca:	d10f      	bne.n	8001fec <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fcc:	2504      	movs	r5, #4
 8001fce:	e022      	b.n	8002016 <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	d1e3      	bne.n	8001f9c <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7cf      	b.n	8001f88 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001fe8:	2902      	cmp	r1, #2
 8001fea:	d1dd      	bne.n	8001fa8 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fee:	6893      	ldr	r3, [r2, #8]
 8001ff0:	0718      	lsls	r0, r3, #28
 8001ff2:	d50a      	bpl.n	800200a <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ff4:	6893      	ldr	r3, [r2, #8]
 8001ff6:	079b      	lsls	r3, r3, #30
 8001ff8:	d407      	bmi.n	800200a <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 8001ffa:	6893      	ldr	r3, [r2, #8]
 8001ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 800200a:	2902      	cmp	r1, #2
 800200c:	d014      	beq.n	8002038 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800200e:	2903      	cmp	r1, #3
 8002010:	bf14      	ite	ne
 8002012:	2504      	movne	r5, #4
 8002014:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 8002016:	f7ff fc95 	bl	8001944 <HAL_GetTick>
 800201a:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	422b      	tst	r3, r5
 8002022:	d0b0      	beq.n	8001f86 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002024:	f7ff fc8e 	bl	8001944 <HAL_GetTick>
 8002028:	1b80      	subs	r0, r0, r6
 800202a:	2805      	cmp	r0, #5
 800202c:	d9f6      	bls.n	800201c <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	422b      	tst	r3, r5
 8002034:	d0f2      	beq.n	800201c <ADC_ConversionStop+0xac>
 8002036:	e7cd      	b.n	8001fd4 <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 8002038:	2508      	movs	r5, #8
 800203a:	e7ec      	b.n	8002016 <ADC_ConversionStop+0xa6>
 800203c:	a3400001 	.word	0xa3400001

08002040 <ADC_Enable>:
{
 8002040:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002042:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002044:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002046:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002048:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204a:	07dd      	lsls	r5, r3, #31
{
 800204c:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204e:	d502      	bpl.n	8002056 <ADC_Enable+0x16>
  return HAL_OK;
 8002050:	2000      	movs	r0, #0
}
 8002052:	b002      	add	sp, #8
 8002054:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002056:	6891      	ldr	r1, [r2, #8]
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <ADC_Enable+0x9c>)
 800205a:	4219      	tst	r1, r3
 800205c:	d009      	beq.n	8002072 <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002060:	f043 0310 	orr.w	r3, r3, #16
 8002064:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
 8002070:	e7ef      	b.n	8002052 <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8002072:	6893      	ldr	r3, [r2, #8]
 8002074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <ADC_Enable+0xa0>)
 8002084:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002086:	0218      	lsls	r0, r3, #8
 8002088:	d419      	bmi.n	80020be <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 800208a:	f7ff fc5b 	bl	8001944 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 800208e:	4e15      	ldr	r6, [pc, #84]	; (80020e4 <ADC_Enable+0xa4>)
 8002090:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	07db      	lsls	r3, r3, #31
 8002098:	d4da      	bmi.n	8002050 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800209a:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800209c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 800209e:	bf5f      	itttt	pl
 80020a0:	6893      	ldrpl	r3, [r2, #8]
 80020a2:	4033      	andpl	r3, r6
 80020a4:	f043 0301 	orrpl.w	r3, r3, #1
 80020a8:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020aa:	f7ff fc4b 	bl	8001944 <HAL_GetTick>
 80020ae:	1b40      	subs	r0, r0, r5
 80020b0:	2802      	cmp	r0, #2
 80020b2:	d9ee      	bls.n	8002092 <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	07da      	lsls	r2, r3, #31
 80020ba:	d4ea      	bmi.n	8002092 <ADC_Enable+0x52>
 80020bc:	e7cf      	b.n	800205e <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <ADC_Enable+0xa8>)
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <ADC_Enable+0xac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80020c8:	230c      	movs	r3, #12
 80020ca:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 80020ce:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0d9      	beq.n	800208a <ADC_Enable+0x4a>
        wait_loop_index--;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	3b01      	subs	r3, #1
 80020da:	e7f8      	b.n	80020ce <ADC_Enable+0x8e>
 80020dc:	8000003f 	.word	0x8000003f
 80020e0:	50040300 	.word	0x50040300
 80020e4:	7fffffc0 	.word	0x7fffffc0
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	00030d40 	.word	0x00030d40

080020f0 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_ADC_Start_DMA+0xe0>)
{
 80020f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f6:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f8:	6800      	ldr	r0, [r0, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
{
 80020fc:	460e      	mov	r6, r1
 80020fe:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002100:	f7ff fc4b 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8002104:	2800      	cmp	r0, #0
 8002106:	d15d      	bne.n	80021c4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002108:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800210c:	2a01      	cmp	r2, #1
 800210e:	d059      	beq.n	80021c4 <HAL_ADC_Start_DMA+0xd4>
 8002110:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002114:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002118:	f04f 0301 	mov.w	r3, #1
 800211c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002120:	d84b      	bhi.n	80021ba <HAL_ADC_Start_DMA+0xca>
 8002122:	f240 2021 	movw	r0, #545	; 0x221
 8002126:	fa20 f008 	lsr.w	r0, r0, r8
 800212a:	43c0      	mvns	r0, r0
 800212c:	ea10 0503 	ands.w	r5, r0, r3
 8002130:	d143      	bne.n	80021ba <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff ff84 	bl	8002040 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002138:	2800      	cmp	r0, #0
 800213a:	d13b      	bne.n	80021b4 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 800213c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800213e:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_ADC_Start_DMA+0xe4>)
 8002150:	4299      	cmp	r1, r3
 8002152:	d039      	beq.n	80021c8 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002154:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002156:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800215a:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800215c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800215e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002160:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002164:	bf1c      	itt	ne
 8002166:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8002168:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800216c:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_ADC_Start_DMA+0xe8>)
 8002170:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_ADC_Start_DMA+0xec>)
 8002174:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_ADC_Start_DMA+0xf0>)
 8002178:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800217a:	231c      	movs	r3, #28
 800217c:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 800217e:	2300      	movs	r3, #0
 8002180:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002184:	684b      	ldr	r3, [r1, #4]
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800218c:	68cb      	ldr	r3, [r1, #12]
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002194:	4632      	mov	r2, r6
 8002196:	463b      	mov	r3, r7
 8002198:	3140      	adds	r1, #64	; 0x40
 800219a:	f000 fa17 	bl	80025cc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800219e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80021a0:	6893      	ldr	r3, [r2, #8]
 80021a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6093      	str	r3, [r2, #8]
}
 80021b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80021b4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80021b8:	e7fa      	b.n	80021b0 <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 80021ba:	2300      	movs	r3, #0
 80021bc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7f5      	b.n	80021b0 <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 80021c4:	2002      	movs	r0, #2
 80021c6:	e7f3      	b.n	80021b0 <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c8:	f1b8 0f00 	cmp.w	r8, #0
 80021cc:	d0c2      	beq.n	8002154 <HAL_ADC_Start_DMA+0x64>
 80021ce:	e7c5      	b.n	800215c <HAL_ADC_Start_DMA+0x6c>
 80021d0:	50040300 	.word	0x50040300
 80021d4:	50040100 	.word	0x50040100
 80021d8:	08001b5d 	.word	0x08001b5d
 80021dc:	08001b53 	.word	0x08001b53
 80021e0:	08001bc5 	.word	0x08001bc5

080021e4 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021e4:	6802      	ldr	r2, [r0, #0]
{
 80021e6:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021e8:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021ea:	6891      	ldr	r1, [r2, #8]
 80021ec:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021ee:	07c8      	lsls	r0, r1, #31
 80021f0:	d401      	bmi.n	80021f6 <ADC_Disable+0x12>
  return HAL_OK;
 80021f2:	2000      	movs	r0, #0
}
 80021f4:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 80021f6:	0799      	lsls	r1, r3, #30
 80021f8:	d4fb      	bmi.n	80021f2 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021fa:	6893      	ldr	r3, [r2, #8]
 80021fc:	f003 030d 	and.w	r3, r3, #13
 8002200:	2b01      	cmp	r3, #1
 8002202:	d119      	bne.n	8002238 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8002204:	6893      	ldr	r3, [r2, #8]
 8002206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002214:	2303      	movs	r3, #3
 8002216:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002218:	f7ff fb94 	bl	8001944 <HAL_GetTick>
 800221c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	07db      	lsls	r3, r3, #31
 8002224:	d5e5      	bpl.n	80021f2 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002226:	f7ff fb8d 	bl	8001944 <HAL_GetTick>
 800222a:	1b40      	subs	r0, r0, r5
 800222c:	2802      	cmp	r0, #2
 800222e:	d9f6      	bls.n	800221e <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	07da      	lsls	r2, r3, #31
 8002236:	d5f2      	bpl.n	800221e <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d3      	b.n	80021f4 <ADC_Disable+0x10>

0800224c <HAL_ADC_Stop_DMA>:
{
 800224c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800224e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002252:	2b01      	cmp	r3, #1
{
 8002254:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002256:	d035      	beq.n	80022c4 <HAL_ADC_Stop_DMA+0x78>
 8002258:	2301      	movs	r3, #1
 800225a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800225e:	2103      	movs	r1, #3
 8002260:	f7ff fe86 	bl	8001f70 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002264:	4604      	mov	r4, r0
 8002266:	b9e0      	cbnz	r0, 80022a2 <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002268:	682a      	ldr	r2, [r5, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800226a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800226c:	68d3      	ldr	r3, [r2, #12]
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002274:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002278:	2b02      	cmp	r3, #2
 800227a:	d107      	bne.n	800228c <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800227c:	f000 f9e5 	bl	800264a <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002280:	4604      	mov	r4, r0
 8002282:	b118      	cbz	r0, 800228c <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002284:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228a:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800228c:	682a      	ldr	r2, [r5, #0]
 800228e:	6853      	ldr	r3, [r2, #4]
 8002290:	f023 0310 	bic.w	r3, r3, #16
 8002294:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8002296:	4628      	mov	r0, r5
    if (tmp_hal_status == HAL_OK)
 8002298:	b944      	cbnz	r4, 80022ac <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 800229a:	f7ff ffa3 	bl	80021e4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800229e:	4604      	mov	r4, r0
 80022a0:	b138      	cbz	r0, 80022b2 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 80022a2:	2300      	movs	r3, #0
 80022a4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80022a8:	4620      	mov	r0, r4
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 80022ac:	f7ff ff9a 	bl	80021e4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80022b0:	e7f7      	b.n	80022a2 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 80022b2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80022b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	656b      	str	r3, [r5, #84]	; 0x54
 80022c2:	e7ee      	b.n	80022a2 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 80022c4:	2402      	movs	r4, #2
 80022c6:	e7ef      	b.n	80022a8 <HAL_ADC_Stop_DMA+0x5c>

080022c8 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022c8:	6880      	ldr	r0, [r0, #8]
}
 80022ca:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80022d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80022da:	2b01      	cmp	r3, #1
{
 80022dc:	4604      	mov	r4, r0
 80022de:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80022e0:	d03e      	beq.n	8002360 <HAL_ADCEx_Calibration_Start+0x90>
 80022e2:	2301      	movs	r3, #1
 80022e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80022e8:	f7ff ff7c 	bl	80021e4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d133      	bne.n	8002358 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80022f2:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80022f8:	f022 0202 	bic.w	r2, r2, #2
 80022fc:	f042 0202 	orr.w	r2, r2, #2
 8002300:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8002302:	68b3      	ldr	r3, [r6, #8]
 8002304:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800230c:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8002310:	432b      	orrs	r3, r5
 8002312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002316:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002318:	68b3      	ldr	r3, [r6, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da12      	bge.n	8002344 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 800231e:	9b01      	ldr	r3, [sp, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002324:	9b01      	ldr	r3, [sp, #4]
 8002326:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800232a:	d3f5      	bcc.n	8002318 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800232c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800232e:	f023 0312 	bic.w	r3, r3, #18
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002338:	2300      	movs	r3, #0
 800233a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002340:	b002      	add	sp, #8
 8002342:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002350:	2300      	movs	r3, #0
 8002352:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8002356:	e7f3      	b.n	8002340 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002358:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	e7f6      	b.n	800234e <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8002360:	2002      	movs	r0, #2
 8002362:	e7ed      	b.n	8002340 <HAL_ADCEx_Calibration_Start+0x70>

08002364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800236a:	2b01      	cmp	r3, #1
{
 800236c:	b09b      	sub	sp, #108	; 0x6c
 800236e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002370:	d052      	beq.n	8002418 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8002372:	2301      	movs	r3, #1
 8002374:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002378:	6817      	ldr	r7, [r2, #0]
 800237a:	4c28      	ldr	r4, [pc, #160]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800237c:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800237e:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002380:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002382:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002384:	d008      	beq.n	8002398 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002386:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002388:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238c:	f041 0120 	orr.w	r1, r1, #32
 8002390:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002392:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002394:	b01b      	add	sp, #108	; 0x6c
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002398:	4e21      	ldr	r6, [pc, #132]	; (8002420 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800239a:	4630      	mov	r0, r6
 800239c:	f7ff ff94 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 80023a0:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	6810      	ldr	r0, [r2, #0]
 80023a4:	f7ff ff90 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4320      	orrs	r0, r4
 80023aa:	d130      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023ac:	4c1d      	ldr	r4, [pc, #116]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80023ae:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023b0:	68a3      	ldr	r3, [r4, #8]
 80023b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b6:	b1e5      	cbz	r5, 80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023b8:	6848      	ldr	r0, [r1, #4]
 80023ba:	4303      	orrs	r3, r0
 80023bc:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80023c0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80023c4:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ca:	4303      	orrs	r3, r0
 80023cc:	f013 0301 	ands.w	r3, r3, #1
 80023d0:	d004      	beq.n	80023dc <HAL_ADCEx_MultiModeConfigChannel+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80023d4:	2300      	movs	r3, #0
 80023d6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80023da:	e7db      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 80023dc:	6889      	ldr	r1, [r1, #8]
 80023de:	68a0      	ldr	r0, [r4, #8]
 80023e0:	430d      	orrs	r5, r1
 80023e2:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80023e6:	f021 010f 	bic.w	r1, r1, #15
 80023ea:	430d      	orrs	r5, r1
 80023ec:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80023ee:	4618      	mov	r0, r3
 80023f0:	e7f0      	b.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f2:	60a3      	str	r3, [r4, #8]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f8:	4303      	orrs	r3, r0
 80023fa:	f013 0301 	ands.w	r3, r3, #1
 80023fe:	d1e8      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002400:	68a1      	ldr	r1, [r4, #8]
 8002402:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8002406:	f021 010f 	bic.w	r1, r1, #15
 800240a:	60a1      	str	r1, [r4, #8]
 800240c:	e7ef      	b.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002410:	f041 0120 	orr.w	r1, r1, #32
 8002414:	6551      	str	r1, [r2, #84]	; 0x54
 8002416:	e7ea      	b.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 8002418:	2002      	movs	r0, #2
 800241a:	e7bb      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 800241c:	50040000 	.word	0x50040000
 8002420:	50040100 	.word	0x50040100
 8002424:	50040300 	.word	0x50040300

08002428 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800242a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002438:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002444:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244e:	b530      	push	{r4, r5, lr}
 8002450:	68dc      	ldr	r4, [r3, #12]
 8002452:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002456:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	2d04      	cmp	r5, #4
 800245e:	bf28      	it	cs
 8002460:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002468:	bf8c      	ite	hi
 800246a:	3c03      	subhi	r4, #3
 800246c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246e:	fa03 f505 	lsl.w	r5, r3, r5
 8002472:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002476:	40a3      	lsls	r3, r4
 8002478:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800247e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	bfac      	ite	ge
 8002486:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	4a08      	ldrlt	r2, [pc, #32]	; (80024ac <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	bfb8      	it	lt
 8002492:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	b2db      	uxtb	r3, r3
 8002498:	bfaa      	itet	ge
 800249a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024a4:	bd30      	pop	{r4, r5, pc}
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	e000ed14 	.word	0xe000ed14

080024b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	db08      	blt.n	80024c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b4:	2301      	movs	r3, #1
 80024b6:	0942      	lsrs	r2, r0, #5
 80024b8:	f000 001f 	and.w	r0, r0, #31
 80024bc:	fa03 f000 	lsl.w	r0, r3, r0
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <HAL_NVIC_EnableIRQ+0x18>)
 80024c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100

080024cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	3801      	subs	r0, #1
 80024ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024d2:	d20b      	bcs.n	80024ec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	21f0      	movs	r1, #240	; 0xf0
 80024de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024ec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f4:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d05b      	beq.n	80025b2 <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024fa:	6801      	ldr	r1, [r0, #0]
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_DMA_Init+0xc4>)
 80024fe:	4299      	cmp	r1, r3
 8002500:	f04f 0414 	mov.w	r4, #20
 8002504:	d842      	bhi.n	800258c <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002506:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <HAL_DMA_Init+0xc8>)
 8002508:	440a      	add	r2, r1
 800250a:	fbb2 f2f4 	udiv	r2, r2, r4
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002512:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8002516:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800251e:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002524:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8002526:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	432b      	orrs	r3, r5
 800252a:	6945      	ldr	r5, [r0, #20]
 800252c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	6985      	ldr	r5, [r0, #24]
 8002530:	432b      	orrs	r3, r5
 8002532:	69c5      	ldr	r5, [r0, #28]
 8002534:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002538:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800253c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8002542:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002544:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8002548:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800254a:	d016      	beq.n	800257a <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800254c:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 800254e:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002550:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002554:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002556:	230f      	movs	r3, #15
 8002558:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800255a:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_DMA_Init+0xcc>)
 800255e:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002560:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8002564:	d11a      	bne.n	800259c <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002566:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 800256a:	4013      	ands	r3, r2
 800256c:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002570:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8002574:	431c      	orrs	r4, r3
 8002576:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257a:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800257c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002580:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002584:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8002588:	4618      	mov	r0, r3
}
 800258a:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_DMA_Init+0xd0>)
 800258e:	440b      	add	r3, r1
 8002590:	fbb3 f3f4 	udiv	r3, r3, r4
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_DMA_Init+0xd4>)
 800259a:	e7bc      	b.n	8002516 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800259c:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 80025a0:	400b      	ands	r3, r1
 80025a2:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025a6:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 80025aa:	431c      	orrs	r4, r3
 80025ac:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 80025b0:	e7e3      	b.n	800257a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e7e9      	b.n	800258a <HAL_DMA_Init+0x96>
 80025b6:	bf00      	nop
 80025b8:	40020407 	.word	0x40020407
 80025bc:	bffdfff8 	.word	0xbffdfff8
 80025c0:	40020000 	.word	0x40020000
 80025c4:	bffdfbf8 	.word	0xbffdfbf8
 80025c8:	40020400 	.word	0x40020400

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ce:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80025d2:	2c01      	cmp	r4, #1
 80025d4:	d037      	beq.n	8002646 <HAL_DMA_Start_IT+0x7a>
 80025d6:	2401      	movs	r4, #1
 80025d8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025dc:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80025e0:	2c01      	cmp	r4, #1
 80025e2:	b2e5      	uxtb	r5, r4
 80025e4:	f04f 0600 	mov.w	r6, #0
 80025e8:	f04f 0402 	mov.w	r4, #2
 80025ec:	d129      	bne.n	8002642 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ee:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f4:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80025f6:	6826      	ldr	r6, [r4, #0]
 80025f8:	f026 0601 	bic.w	r6, r6, #1
 80025fc:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025fe:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 8002602:	f007 071c 	and.w	r7, r7, #28
 8002606:	40bd      	lsls	r5, r7
 8002608:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800260a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260c:	6883      	ldr	r3, [r0, #8]
 800260e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002610:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002612:	bf0b      	itete	eq
 8002614:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002616:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002618:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800261a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800261c:	b14b      	cbz	r3, 8002632 <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002624:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2000      	movs	r0, #0
}
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f043 030a 	orr.w	r3, r3, #10
 8002640:	e7f0      	b.n	8002624 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8002642:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002646:	2002      	movs	r0, #2
 8002648:	e7f2      	b.n	8002630 <HAL_DMA_Start_IT+0x64>

0800264a <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800264e:	2b02      	cmp	r3, #2
 8002650:	d006      	beq.n	8002660 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002652:	2304      	movs	r3, #4
 8002654:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002656:	2300      	movs	r3, #0
 8002658:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800265c:	2001      	movs	r0, #1
 800265e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f022 020e 	bic.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002672:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8002676:	2201      	movs	r2, #1
 8002678:	f003 031c 	and.w	r3, r3, #28
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002682:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002684:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002688:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800268c:	4618      	mov	r0, r3
}
 800268e:	4770      	bx	lr

08002690 <HAL_DMA_Abort_IT>:
{
 8002690:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002692:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002696:	2a02      	cmp	r2, #2
 8002698:	d003      	beq.n	80026a2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	2204      	movs	r2, #4
 800269c:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800269e:	2001      	movs	r0, #1
}
 80026a0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a2:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80026a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a6:	6811      	ldr	r1, [r2, #0]
 80026a8:	f021 010e 	bic.w	r1, r1, #14
 80026ac:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	f021 0101 	bic.w	r1, r1, #1
 80026b4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b6:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80026ba:	2101      	movs	r1, #1
 80026bc:	f002 021c 	and.w	r2, r2, #28
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80026c6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80026c8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80026cc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80026d0:	b113      	cbz	r3, 80026d8 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80026d2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80026d4:	4620      	mov	r0, r4
 80026d6:	e7e3      	b.n	80026a0 <HAL_DMA_Abort_IT+0x10>
 80026d8:	4618      	mov	r0, r3
 80026da:	e7e1      	b.n	80026a0 <HAL_DMA_Abort_IT+0x10>

080026dc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026de:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80026e0:	6803      	ldr	r3, [r0, #0]
{
 80026e2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026e4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026ea:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026ec:	2404      	movs	r4, #4
 80026ee:	4094      	lsls	r4, r2
 80026f0:	4234      	tst	r4, r6
 80026f2:	d00e      	beq.n	8002712 <HAL_DMA_IRQHandler+0x36>
 80026f4:	f015 0f04 	tst.w	r5, #4
 80026f8:	d00b      	beq.n	8002712 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fe:	bf5e      	ittt	pl
 8002700:	681a      	ldrpl	r2, [r3, #0]
 8002702:	f022 0204 	bicpl.w	r2, r2, #4
 8002706:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002708:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800270a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800270c:	b373      	cbz	r3, 800276c <HAL_DMA_IRQHandler+0x90>
}
 800270e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002710:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002712:	2402      	movs	r4, #2
 8002714:	4094      	lsls	r4, r2
 8002716:	4234      	tst	r4, r6
 8002718:	d012      	beq.n	8002740 <HAL_DMA_IRQHandler+0x64>
 800271a:	f015 0f02 	tst.w	r5, #2
 800271e:	d00f      	beq.n	8002740 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	0695      	lsls	r5, r2, #26
 8002724:	d406      	bmi.n	8002734 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f022 020a 	bic.w	r2, r2, #10
 800272c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800272e:	2301      	movs	r3, #1
 8002730:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002734:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002736:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002738:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800273c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800273e:	e7e5      	b.n	800270c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002740:	2408      	movs	r4, #8
 8002742:	4094      	lsls	r4, r2
 8002744:	4234      	tst	r4, r6
 8002746:	d011      	beq.n	800276c <HAL_DMA_IRQHandler+0x90>
 8002748:	072c      	lsls	r4, r5, #28
 800274a:	d50f      	bpl.n	800276c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274c:	681c      	ldr	r4, [r3, #0]
 800274e:	f024 040e 	bic.w	r4, r4, #14
 8002752:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002754:	2301      	movs	r3, #1
 8002756:	fa03 f202 	lsl.w	r2, r3, r2
 800275a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800275e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002762:	2300      	movs	r3, #0
 8002764:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002768:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800276a:	e7cf      	b.n	800270c <HAL_DMA_IRQHandler+0x30>
}
 800276c:	bc70      	pop	{r4, r5, r6}
 800276e:	4770      	bx	lr

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002774:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80028e8 <HAL_GPIO_Init+0x178>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002778:	4c59      	ldr	r4, [pc, #356]	; (80028e0 <HAL_GPIO_Init+0x170>)
  uint32_t position = 0x00u;
 800277a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277c:	680a      	ldr	r2, [r1, #0]
 800277e:	fa32 f503 	lsrs.w	r5, r2, r3
 8002782:	d102      	bne.n	800278a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002784:	b003      	add	sp, #12
 8002786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800278a:	2501      	movs	r5, #1
 800278c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8002790:	ea18 0202 	ands.w	r2, r8, r2
 8002794:	f000 809c 	beq.w	80028d0 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279c:	f006 0503 	and.w	r5, r6, #3
 80027a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a8:	1e6f      	subs	r7, r5, #1
 80027aa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ac:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b0:	d834      	bhi.n	800281c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80027b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027b4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b8:	68cf      	ldr	r7, [r1, #12]
 80027ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80027be:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80027c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80027c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ca:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80027ce:	409f      	lsls	r7, r3
 80027d0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80027d4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80027d6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027dc:	688f      	ldr	r7, [r1, #8]
 80027de:	fa07 f70e 	lsl.w	r7, r7, lr
 80027e2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80027e8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ea:	d119      	bne.n	8002820 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80027ec:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80027f0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80027f8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027fc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002800:	f04f 0b0f 	mov.w	fp, #15
 8002804:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002808:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280c:	690f      	ldr	r7, [r1, #16]
 800280e:	fa07 f70a 	lsl.w	r7, r7, sl
 8002812:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8002816:	f8c8 7020 	str.w	r7, [r8, #32]
 800281a:	e001      	b.n	8002820 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	2d03      	cmp	r5, #3
 800281e:	d1da      	bne.n	80027d6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8002820:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002822:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002826:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800282a:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002830:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002832:	d04d      	beq.n	80028d0 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002838:	f045 0501 	orr.w	r5, r5, #1
 800283c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002840:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002844:	f023 0703 	bic.w	r7, r3, #3
 8002848:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800284c:	f005 0501 	and.w	r5, r5, #1
 8002850:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002854:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002856:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800285c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800285e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002862:	f04f 0e0f 	mov.w	lr, #15
 8002866:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800286a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002872:	d02f      	beq.n	80028d4 <HAL_GPIO_Init+0x164>
 8002874:	4d1b      	ldr	r5, [pc, #108]	; (80028e4 <HAL_GPIO_Init+0x174>)
 8002876:	42a8      	cmp	r0, r5
 8002878:	d02e      	beq.n	80028d8 <HAL_GPIO_Init+0x168>
 800287a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800287e:	42a8      	cmp	r0, r5
 8002880:	d02c      	beq.n	80028dc <HAL_GPIO_Init+0x16c>
 8002882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002886:	42a8      	cmp	r0, r5
 8002888:	bf0c      	ite	eq
 800288a:	2503      	moveq	r5, #3
 800288c:	2507      	movne	r5, #7
 800288e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002892:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002896:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8002898:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800289a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289c:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80028a0:	bf0c      	ite	eq
 80028a2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028a4:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80028a6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80028a8:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028aa:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80028ae:	bf0c      	ite	eq
 80028b0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028b2:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 80028b4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 80028b6:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 80028bc:	bf0c      	ite	eq
 80028be:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028c0:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 80028c2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 80028c4:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028c6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80028c8:	bf54      	ite	pl
 80028ca:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80028cc:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 80028ce:	6025      	str	r5, [r4, #0]
    position++;
 80028d0:	3301      	adds	r3, #1
 80028d2:	e753      	b.n	800277c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d4:	2500      	movs	r5, #0
 80028d6:	e7da      	b.n	800288e <HAL_GPIO_Init+0x11e>
 80028d8:	2501      	movs	r5, #1
 80028da:	e7d8      	b.n	800288e <HAL_GPIO_Init+0x11e>
 80028dc:	2502      	movs	r5, #2
 80028de:	e7d6      	b.n	800288e <HAL_GPIO_Init+0x11e>
 80028e0:	40010400 	.word	0x40010400
 80028e4:	48000400 	.word	0x48000400
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	b10a      	cbz	r2, 80028f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ee:	6181      	str	r1, [r0, #24]
 80028f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f8:	4a02      	ldr	r2, [pc, #8]	; (8002904 <HAL_PWR_EnableBkUpAccess+0xc>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	4770      	bx	lr
 8002904:	40007000 	.word	0x40007000

08002908 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <HAL_PWREx_GetVoltageRange+0xc>)
 800290a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800290c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800291a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	d11d      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292a:	d101      	bne.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800292c:	2000      	movs	r0, #0
 800292e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002930:	6813      	ldr	r3, [r2, #0]
 8002932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800293a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2132      	movs	r1, #50	; 0x32
 8002942:	434b      	muls	r3, r1
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294c:	6951      	ldr	r1, [r2, #20]
 800294e:	0549      	lsls	r1, r1, #21
 8002950:	d500      	bpl.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8002952:	b923      	cbnz	r3, 800295e <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002954:	6953      	ldr	r3, [r2, #20]
 8002956:	055b      	lsls	r3, r3, #21
 8002958:	d5e8      	bpl.n	800292c <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800295a:	2003      	movs	r0, #3
}
 800295c:	4770      	bx	lr
        wait_loop_index--;
 800295e:	3b01      	subs	r3, #1
 8002960:	e7f4      	b.n	800294c <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002966:	bf1f      	itttt	ne
 8002968:	6813      	ldrne	r3, [r2, #0]
 800296a:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800296e:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8002972:	6013      	strne	r3, [r2, #0]
 8002974:	e7da      	b.n	800292c <HAL_PWREx_ControlVoltageScaling+0x14>
 8002976:	bf00      	nop
 8002978:	40007000 	.word	0x40007000
 800297c:	2000000c 	.word	0x2000000c
 8002980:	000f4240 	.word	0x000f4240

08002984 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002984:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002986:	4d1e      	ldr	r5, [pc, #120]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002988:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800298a:	00da      	lsls	r2, r3, #3
{
 800298c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800298e:	d518      	bpl.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002990:	f7ff ffba 	bl	8002908 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002994:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002998:	d123      	bne.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299a:	2c80      	cmp	r4, #128	; 0x80
 800299c:	d929      	bls.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800299e:	2ca0      	cmp	r4, #160	; 0xa0
 80029a0:	bf8c      	ite	hi
 80029a2:	2002      	movhi	r0, #2
 80029a4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	4303      	orrs	r3, r0
 80029b0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029b2:	6813      	ldr	r3, [r2, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80029b8:	1a18      	subs	r0, r3, r0
 80029ba:	bf18      	it	ne
 80029bc:	2001      	movne	r0, #1
 80029be:	b003      	add	sp, #12
 80029c0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	65ab      	str	r3, [r5, #88]	; 0x58
 80029ca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80029d4:	f7ff ff98 	bl	8002908 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029de:	65ab      	str	r3, [r5, #88]	; 0x58
 80029e0:	e7d8      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80029e2:	2c80      	cmp	r4, #128	; 0x80
 80029e4:	d807      	bhi.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80029e6:	d008      	beq.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80029e8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80029ec:	4258      	negs	r0, r3
 80029ee:	4158      	adcs	r0, r3
 80029f0:	e7d9      	b.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f2:	2000      	movs	r0, #0
 80029f4:	e7d7      	b.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80029f6:	2003      	movs	r0, #3
 80029f8:	e7d5      	b.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80029fa:	2002      	movs	r0, #2
 80029fc:	e7d3      	b.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002a0a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0e:	f012 020c 	ands.w	r2, r2, #12
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x18>
 8002a14:	2a0c      	cmp	r2, #12
 8002a16:	d115      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a1c:	2901      	cmp	r1, #1
 8002a1e:	d118      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a20:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a22:	481d      	ldr	r0, [pc, #116]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a24:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a26:	bf55      	itete	pl
 8002a28:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a2c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a2e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a32:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a36:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3a:	b34a      	cbz	r2, 8002a90 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a3c:	2a0c      	cmp	r2, #12
 8002a3e:	d009      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x4c>
 8002a40:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a42:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a44:	2a04      	cmp	r2, #4
 8002a46:	d022      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a48:	2a08      	cmp	r2, #8
 8002a4a:	4814      	ldr	r0, [pc, #80]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a4c:	bf18      	it	ne
 8002a4e:	2000      	movne	r0, #0
 8002a50:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a52:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002a5a:	2a02      	cmp	r2, #2
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x82>
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a60:	2a03      	cmp	r2, #3
 8002a62:	bf08      	it	eq
 8002a64:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a66:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002a6e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a70:	68d8      	ldr	r0, [r3, #12]
 8002a72:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a76:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a7c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a80:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002a84:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a88:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8c:	e7eb      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08005e38 	.word	0x08005e38
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	00f42400 	.word	0x00f42400

08002aa4 <HAL_RCC_OscConfig>:
{
 8002aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	b918      	cbnz	r0, 8002ab4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
}
 8002aae:	b003      	add	sp, #12
 8002ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab4:	4c94      	ldr	r4, [pc, #592]	; (8002d08 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ab6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aba:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002abc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ac6:	d53d      	bpl.n	8002b44 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ac8:	b11e      	cbz	r6, 8002ad2 <HAL_RCC_OscConfig+0x2e>
 8002aca:	2e0c      	cmp	r6, #12
 8002acc:	d16a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x100>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ace:	2f01      	cmp	r7, #1
 8002ad0:	d168      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x100>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	0798      	lsls	r0, r3, #30
 8002ad6:	d502      	bpl.n	8002ade <HAL_RCC_OscConfig+0x3a>
 8002ad8:	69eb      	ldr	r3, [r5, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0e6      	beq.n	8002aac <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002ae2:	0719      	lsls	r1, r3, #28
 8002ae4:	bf56      	itet	pl
 8002ae6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002aea:	6823      	ldrmi	r3, [r4, #0]
 8002aec:	091b      	lsrpl	r3, r3, #4
 8002aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d93f      	bls.n	8002b76 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af6:	f7ff ff45 	bl	8002984 <RCC_SetFlashLatencyFromMSIRange>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d1d6      	bne.n	8002aac <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	6a2a      	ldr	r2, [r5, #32]
 8002b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b1e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b20:	f7ff ff72 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8002b24:	68a3      	ldr	r3, [r4, #8]
 8002b26:	4a79      	ldr	r2, [pc, #484]	; (8002d0c <HAL_RCC_OscConfig+0x268>)
 8002b28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	40d8      	lsrs	r0, r3
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	f7fe fec0 	bl	80018c0 <HAL_InitTick>
        if(status != HAL_OK)
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1b4      	bne.n	8002aae <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	07d8      	lsls	r0, r3, #31
 8002b48:	d463      	bmi.n	8002c12 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	0799      	lsls	r1, r3, #30
 8002b4e:	f100 80a2 	bmi.w	8002c96 <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	0718      	lsls	r0, r3, #28
 8002b56:	f100 80df 	bmi.w	8002d18 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	0759      	lsls	r1, r3, #29
 8002b5e:	f100 812f 	bmi.w	8002dc0 <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	0699      	lsls	r1, r3, #26
 8002b66:	f100 81ab 	bmi.w	8002ec0 <HAL_RCC_OscConfig+0x41c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 81d1 	bne.w	8002f14 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8002b72:	2000      	movs	r0, #0
 8002b74:	e79b      	b.n	8002aae <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b84:	4303      	orrs	r3, r0
 8002b86:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b88:	6863      	ldr	r3, [r4, #4]
 8002b8a:	6a2a      	ldr	r2, [r5, #32]
 8002b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b94:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b96:	2e00      	cmp	r6, #0
 8002b98:	d1c2      	bne.n	8002b20 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b9a:	f7ff fef3 	bl	8002984 <RCC_SetFlashLatencyFromMSIRange>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0be      	beq.n	8002b20 <HAL_RCC_OscConfig+0x7c>
 8002ba2:	e783      	b.n	8002aac <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ba4:	69eb      	ldr	r3, [r5, #28]
 8002ba6:	b31b      	cbz	r3, 8002bf0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fec8 	bl	8001944 <HAL_GetTick>
 8002bb4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	079a      	lsls	r2, r3, #30
 8002bba:	d511      	bpl.n	8002be0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	6a2a      	ldr	r2, [r5, #32]
 8002bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	e7b1      	b.n	8002b44 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be0:	f7fe feb0 	bl	8001944 <HAL_GetTick>
 8002be4:	eba0 0008 	sub.w	r0, r0, r8
 8002be8:	2802      	cmp	r0, #2
 8002bea:	d9e4      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8002bec:	2003      	movs	r0, #3
 8002bee:	e75e      	b.n	8002aae <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fea4 	bl	8001944 <HAL_GetTick>
 8002bfc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	079b      	lsls	r3, r3, #30
 8002c02:	d59f      	bpl.n	8002b44 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c04:	f7fe fe9e 	bl	8001944 <HAL_GetTick>
 8002c08:	eba0 0008 	sub.w	r0, r0, r8
 8002c0c:	2802      	cmp	r0, #2
 8002c0e:	d9f6      	bls.n	8002bfe <HAL_RCC_OscConfig+0x15a>
 8002c10:	e7ec      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c12:	2e08      	cmp	r6, #8
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17a>
 8002c16:	2e0c      	cmp	r6, #12
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c1a:	2f03      	cmp	r7, #3
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	039a      	lsls	r2, r3, #14
 8002c22:	d592      	bpl.n	8002b4a <HAL_RCC_OscConfig+0xa6>
 8002c24:	686b      	ldr	r3, [r5, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d18f      	bne.n	8002b4a <HAL_RCC_OscConfig+0xa6>
 8002c2a:	e73f      	b.n	8002aac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	686b      	ldr	r3, [r5, #4]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c32:	d110      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1b2>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fe82 	bl	8001944 <HAL_GetTick>
 8002c40:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	039b      	lsls	r3, r3, #14
 8002c46:	d480      	bmi.n	8002b4a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fe7c 	bl	8001944 <HAL_GetTick>
 8002c4c:	eba0 0008 	sub.w	r0, r0, r8
 8002c50:	2864      	cmp	r0, #100	; 0x64
 8002c52:	d9f6      	bls.n	8002c42 <HAL_RCC_OscConfig+0x19e>
 8002c54:	e7ca      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5a:	d104      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1c2>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	e7e6      	b.n	8002c34 <HAL_RCC_OscConfig+0x190>
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c6c:	6022      	str	r2, [r4, #0]
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c74:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1e0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fe63 	bl	8001944 <HAL_GetTick>
 8002c7e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	0398      	lsls	r0, r3, #14
 8002c84:	f57f af61 	bpl.w	8002b4a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fe5c 	bl	8001944 <HAL_GetTick>
 8002c8c:	eba0 0008 	sub.w	r0, r0, r8
 8002c90:	2864      	cmp	r0, #100	; 0x64
 8002c92:	d9f5      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1dc>
 8002c94:	e7aa      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c96:	2e04      	cmp	r6, #4
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1fe>
 8002c9a:	2e0c      	cmp	r6, #12
 8002c9c:	d110      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c9e:	2f02      	cmp	r7, #2
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	0559      	lsls	r1, r3, #21
 8002ca6:	d503      	bpl.n	8002cb0 <HAL_RCC_OscConfig+0x20c>
 8002ca8:	68eb      	ldr	r3, [r5, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f43f aefe 	beq.w	8002aac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	692a      	ldr	r2, [r5, #16]
 8002cb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cbc:	6063      	str	r3, [r4, #4]
 8002cbe:	e748      	b.n	8002b52 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc0:	68eb      	ldr	r3, [r5, #12]
 8002cc2:	b17b      	cbz	r3, 8002ce4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fe3a 	bl	8001944 <HAL_GetTick>
 8002cd0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	055a      	lsls	r2, r3, #21
 8002cd6:	d4eb      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fe34 	bl	8001944 <HAL_GetTick>
 8002cdc:	1bc0      	subs	r0, r0, r7
 8002cde:	2802      	cmp	r0, #2
 8002ce0:	d9f7      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x22e>
 8002ce2:	e783      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cec:	f7fe fe2a 	bl	8001944 <HAL_GetTick>
 8002cf0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	055b      	lsls	r3, r3, #21
 8002cf6:	f57f af2c 	bpl.w	8002b52 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fe23 	bl	8001944 <HAL_GetTick>
 8002cfe:	1bc0      	subs	r0, r0, r7
 8002d00:	2802      	cmp	r0, #2
 8002d02:	d9f6      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x24e>
 8002d04:	e772      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08005e1e 	.word	0x08005e1e
 8002d10:	2000000c 	.word	0x2000000c
 8002d14:	20000014 	.word	0x20000014
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d18:	696b      	ldr	r3, [r5, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x2f4>
      uint32_t csr_temp = RCC->CSR;
 8002d1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002d22:	69a9      	ldr	r1, [r5, #24]
 8002d24:	f003 0210 	and.w	r2, r3, #16
 8002d28:	4291      	cmp	r1, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2a6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	2a02      	cmp	r2, #2
 8002d32:	f43f aebb 	beq.w	8002aac <HAL_RCC_OscConfig+0x8>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d36:	07da      	lsls	r2, r3, #31
 8002d38:	d41b      	bmi.n	8002d72 <HAL_RCC_OscConfig+0x2ce>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002d3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d3e:	69aa      	ldr	r2, [r5, #24]
 8002d40:	f023 0310 	bic.w	r3, r3, #16
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d56:	f7fe fdf5 	bl	8001944 <HAL_GetTick>
 8002d5a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d5c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d60:	0798      	lsls	r0, r3, #30
 8002d62:	f53f aefa 	bmi.w	8002b5a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe fded 	bl	8001944 <HAL_GetTick>
 8002d6a:	1bc0      	subs	r0, r0, r7
 8002d6c:	2811      	cmp	r0, #17
 8002d6e:	d9f5      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2b8>
 8002d70:	e73c      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
          __HAL_RCC_LSI_DISABLE();
 8002d72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002d7e:	f7fe fde1 	bl	8001944 <HAL_GetTick>
 8002d82:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d88:	079b      	lsls	r3, r3, #30
 8002d8a:	d5d6      	bpl.n	8002d3a <HAL_RCC_OscConfig+0x296>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fdda 	bl	8001944 <HAL_GetTick>
 8002d90:	1bc0      	subs	r0, r0, r7
 8002d92:	2811      	cmp	r0, #17
 8002d94:	d9f6      	bls.n	8002d84 <HAL_RCC_OscConfig+0x2e0>
 8002d96:	e729      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8002d98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002da4:	f7fe fdce 	bl	8001944 <HAL_GetTick>
 8002da8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002daa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002dae:	0799      	lsls	r1, r3, #30
 8002db0:	f57f aed3 	bpl.w	8002b5a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fdc6 	bl	8001944 <HAL_GetTick>
 8002db8:	1bc0      	subs	r0, r0, r7
 8002dba:	2811      	cmp	r0, #17
 8002dbc:	d9f5      	bls.n	8002daa <HAL_RCC_OscConfig+0x306>
 8002dbe:	e715      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc2:	00da      	lsls	r2, r3, #3
 8002dc4:	d430      	bmi.n	8002e28 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dd8:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800304c <HAL_RCC_OscConfig+0x5a8>
 8002dde:	f8d8 3000 	ldr.w	r3, [r8]
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	d522      	bpl.n	8002e2c <HAL_RCC_OscConfig+0x388>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002de6:	68aa      	ldr	r2, [r5, #8]
 8002de8:	07d0      	lsls	r0, r2, #31
 8002dea:	d433      	bmi.n	8002e54 <HAL_RCC_OscConfig+0x3b0>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002df8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d13c      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3de>
      tickstart = HAL_GetTick();
 8002e08:	f7fe fd9c 	bl	8001944 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e10:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e16:	0798      	lsls	r0, r3, #30
 8002e18:	d44b      	bmi.n	8002eb2 <HAL_RCC_OscConfig+0x40e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e22:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002e26:	e035      	b.n	8002e94 <HAL_RCC_OscConfig+0x3f0>
    FlagStatus       pwrclkchanged = RESET;
 8002e28:	2700      	movs	r7, #0
 8002e2a:	e7d6      	b.n	8002dda <HAL_RCC_OscConfig+0x336>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	f8c8 3000 	str.w	r3, [r8]
      tickstart = HAL_GetTick();
 8002e38:	f7fe fd84 	bl	8001944 <HAL_GetTick>
 8002e3c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e42:	05d9      	lsls	r1, r3, #23
 8002e44:	d4cf      	bmi.n	8002de6 <HAL_RCC_OscConfig+0x342>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fe fd7d 	bl	8001944 <HAL_GetTick>
 8002e4a:	eba0 0009 	sub.w	r0, r0, r9
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	d9f5      	bls.n	8002e3e <HAL_RCC_OscConfig+0x39a>
 8002e52:	e6cb      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002e54:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e58:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8002e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e60:	430b      	orrs	r3, r1
 8002e62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e6a:	0752      	lsls	r2, r2, #29
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e6c:	bf42      	ittt	mi
 8002e6e:	f043 0304 	orrmi.w	r3, r3, #4
 8002e72:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e76:	f8d4 3090 	ldrmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002e82:	f7fe fd5f 	bl	8001944 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e8a:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e90:	079b      	lsls	r3, r3, #30
 8002e92:	d507      	bpl.n	8002ea4 <HAL_RCC_OscConfig+0x400>
    if(pwrclkchanged == SET)
 8002e94:	2f00      	cmp	r7, #0
 8002e96:	f43f ae64 	beq.w	8002b62 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ea2:	e65e      	b.n	8002b62 <HAL_RCC_OscConfig+0xbe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fd4e 	bl	8001944 <HAL_GetTick>
 8002ea8:	eba0 0008 	sub.w	r0, r0, r8
 8002eac:	4548      	cmp	r0, r9
 8002eae:	d9ed      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3e8>
 8002eb0:	e69c      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fd47 	bl	8001944 <HAL_GetTick>
 8002eb6:	eba0 0008 	sub.w	r0, r0, r8
 8002eba:	4548      	cmp	r0, r9
 8002ebc:	d9a9      	bls.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002ebe:	e695      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ec2:	b19b      	cbz	r3, 8002eec <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI48_ENABLE();
 8002ec4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fd38 	bl	8001944 <HAL_GetTick>
 8002ed4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002eda:	079a      	lsls	r2, r3, #30
 8002edc:	f53f ae45 	bmi.w	8002b6a <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ee0:	f7fe fd30 	bl	8001944 <HAL_GetTick>
 8002ee4:	1bc0      	subs	r0, r0, r7
 8002ee6:	2802      	cmp	r0, #2
 8002ee8:	d9f5      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x432>
 8002eea:	e67f      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8002eec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fd24 	bl	8001944 <HAL_GetTick>
 8002efc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002efe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002f02:	079b      	lsls	r3, r3, #30
 8002f04:	f57f ae31 	bpl.w	8002b6a <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f08:	f7fe fd1c 	bl	8001944 <HAL_GetTick>
 8002f0c:	1bc0      	subs	r0, r0, r7
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d9f5      	bls.n	8002efe <HAL_RCC_OscConfig+0x45a>
 8002f12:	e66b      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d17a      	bne.n	800300e <HAL_RCC_OscConfig+0x56a>
      pll_config = RCC->PLLCFGR;
 8002f18:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002f1c:	f003 0103 	and.w	r1, r3, #3
 8002f20:	4291      	cmp	r1, r2
 8002f22:	d11c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f24:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002f26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f2a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002f34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f38:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002f3c:	d10f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002f46:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f48:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f4e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f50:	0852      	lsrs	r2, r2, #1
 8002f52:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002f56:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002f5c:	d03e      	beq.n	8002fdc <HAL_RCC_OscConfig+0x538>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5e:	2e0c      	cmp	r6, #12
 8002f60:	f43f ada4 	beq.w	8002aac <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002f6c:	f7fe fcea 	bl	8001944 <HAL_GetTick>
 8002f70:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	0198      	lsls	r0, r3, #6
 8002f76:	d42b      	bmi.n	8002fd0 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	68e2      	ldr	r2, [r4, #12]
 8002f7a:	4b33      	ldr	r3, [pc, #204]	; (8003048 <HAL_RCC_OscConfig+0x5a4>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002f80:	4313      	orrs	r3, r2
 8002f82:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002f8a:	3a01      	subs	r2, #1
 8002f8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002f90:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002f92:	0852      	lsrs	r2, r2, #1
 8002f94:	3a01      	subs	r2, #1
 8002f96:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002f9a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f9c:	0852      	lsrs	r2, r2, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002fa4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fac:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002fb6:	f7fe fcc5 	bl	8001944 <HAL_GetTick>
 8002fba:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	0199      	lsls	r1, r3, #6
 8002fc0:	f53f add7 	bmi.w	8002b72 <HAL_RCC_OscConfig+0xce>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fcbe 	bl	8001944 <HAL_GetTick>
 8002fc8:	1b40      	subs	r0, r0, r5
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9f6      	bls.n	8002fbc <HAL_RCC_OscConfig+0x518>
 8002fce:	e60d      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fcb8 	bl	8001944 <HAL_GetTick>
 8002fd4:	1b80      	subs	r0, r0, r6
 8002fd6:	2802      	cmp	r0, #2
 8002fd8:	d9cb      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4ce>
 8002fda:	e607      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	019a      	lsls	r2, r3, #6
 8002fe0:	f53f adc7 	bmi.w	8002b72 <HAL_RCC_OscConfig+0xce>
          __HAL_RCC_PLL_ENABLE();
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	68e3      	ldr	r3, [r4, #12]
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002ff4:	f7fe fca6 	bl	8001944 <HAL_GetTick>
 8002ff8:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	f53f adb8 	bmi.w	8002b72 <HAL_RCC_OscConfig+0xce>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fc9f 	bl	8001944 <HAL_GetTick>
 8003006:	1b40      	subs	r0, r0, r5
 8003008:	2802      	cmp	r0, #2
 800300a:	d9f6      	bls.n	8002ffa <HAL_RCC_OscConfig+0x556>
 800300c:	e5ee      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300e:	2e0c      	cmp	r6, #12
 8003010:	f43f ad4c 	beq.w	8002aac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800301c:	f7fe fc92 	bl	8001944 <HAL_GetTick>
 8003020:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003028:	d107      	bne.n	800303a <HAL_RCC_OscConfig+0x596>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800302a:	68e2      	ldr	r2, [r4, #12]
 800302c:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003030:	f022 0203 	bic.w	r2, r2, #3
 8003034:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003036:	4618      	mov	r0, r3
 8003038:	e539      	b.n	8002aae <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fc83 	bl	8001944 <HAL_GetTick>
 800303e:	1b40      	subs	r0, r0, r5
 8003040:	2802      	cmp	r0, #2
 8003042:	d9ee      	bls.n	8003022 <HAL_RCC_OscConfig+0x57e>
 8003044:	e5d2      	b.n	8002bec <HAL_RCC_OscConfig+0x148>
 8003046:	bf00      	nop
 8003048:	f99f808c 	.word	0xf99f808c
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_ClockConfig>:
{
 8003050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003054:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003056:	4604      	mov	r4, r0
 8003058:	b910      	cbnz	r0, 8003060 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800305a:	2001      	movs	r0, #1
}
 800305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_RCC_ClockConfig+0x140>)
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	428b      	cmp	r3, r1
 800306a:	d32c      	bcc.n	80030c6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	0786      	lsls	r6, r0, #30
 8003070:	d434      	bmi.n	80030dc <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	07c1      	lsls	r1, r0, #31
 8003074:	d43f      	bmi.n	80030f6 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003076:	6821      	ldr	r1, [r4, #0]
 8003078:	078a      	lsls	r2, r1, #30
 800307a:	d468      	bmi.n	800314e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4a44      	ldr	r2, [pc, #272]	; (8003190 <HAL_RCC_ClockConfig+0x140>)
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	42ab      	cmp	r3, r5
 8003086:	d86f      	bhi.n	8003168 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	f011 0f04 	tst.w	r1, #4
 800308c:	4d41      	ldr	r5, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x144>)
 800308e:	d177      	bne.n	8003180 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	070b      	lsls	r3, r1, #28
 8003092:	d506      	bpl.n	80030a2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003094:	68ab      	ldr	r3, [r5, #8]
 8003096:	6922      	ldr	r2, [r4, #16]
 8003098:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800309c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030a0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a2:	f7ff fcb1 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80030a6:	68ab      	ldr	r3, [r5, #8]
 80030a8:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_ClockConfig+0x148>)
 80030aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80030ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	40d8      	lsrs	r0, r3
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_RCC_ClockConfig+0x14c>)
 80030bc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f7fe bbfd 	b.w	80018c0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	f023 0307 	bic.w	r3, r3, #7
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	428b      	cmp	r3, r1
 80030d8:	d1bf      	bne.n	800305a <HAL_RCC_ClockConfig+0xa>
 80030da:	e7c7      	b.n	800306c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030dc:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x144>)
 80030de:	68a6      	ldr	r6, [r4, #8]
 80030e0:	6891      	ldr	r1, [r2, #8]
 80030e2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80030e6:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	bf81      	itttt	hi
 80030ea:	6893      	ldrhi	r3, [r2, #8]
 80030ec:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80030f0:	4333      	orrhi	r3, r6
 80030f2:	6093      	strhi	r3, [r2, #8]
 80030f4:	e7bd      	b.n	8003072 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	4e26      	ldr	r6, [pc, #152]	; (8003194 <HAL_RCC_ClockConfig+0x144>)
 80030fa:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fe:	d11a      	bne.n	8003136 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003100:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003104:	d0a9      	beq.n	800305a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003106:	68b3      	ldr	r3, [r6, #8]
 8003108:	f023 0303 	bic.w	r3, r3, #3
 800310c:	4313      	orrs	r3, r2
 800310e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003110:	f7fe fc18 	bl	8001944 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003118:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	68b3      	ldr	r3, [r6, #8]
 800311c:	6862      	ldr	r2, [r4, #4]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003126:	d0a6      	beq.n	8003076 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fe fc0c 	bl	8001944 <HAL_GetTick>
 800312c:	1bc0      	subs	r0, r0, r7
 800312e:	4540      	cmp	r0, r8
 8003130:	d9f3      	bls.n	800311a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8003132:	2003      	movs	r0, #3
 8003134:	e792      	b.n	800305c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	2a02      	cmp	r2, #2
 8003138:	d102      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800313e:	e7e1      	b.n	8003104 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003140:	b912      	cbnz	r2, 8003148 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003142:	f013 0f02 	tst.w	r3, #2
 8003146:	e7dd      	b.n	8003104 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800314c:	e7da      	b.n	8003104 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_RCC_ClockConfig+0x144>)
 8003150:	68a6      	ldr	r6, [r4, #8]
 8003152:	6890      	ldr	r0, [r2, #8]
 8003154:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003158:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315a:	bf3f      	itttt	cc
 800315c:	6893      	ldrcc	r3, [r2, #8]
 800315e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8003162:	4333      	orrcc	r3, r6
 8003164:	6093      	strcc	r3, [r2, #8]
 8003166:	e789      	b.n	800307c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	432b      	orrs	r3, r5
 8003170:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	42ab      	cmp	r3, r5
 800317a:	f47f af6e 	bne.w	800305a <HAL_RCC_ClockConfig+0xa>
 800317e:	e783      	b.n	8003088 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	68ab      	ldr	r3, [r5, #8]
 8003182:	68e2      	ldr	r2, [r4, #12]
 8003184:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003188:	4313      	orrs	r3, r2
 800318a:	60ab      	str	r3, [r5, #8]
 800318c:	e780      	b.n	8003090 <HAL_RCC_ClockConfig+0x40>
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08005e1e 	.word	0x08005e1e
 800319c:	2000000c 	.word	0x2000000c
 80031a0:	20000014 	.word	0x20000014

080031a4 <HAL_RCC_GetHCLKFreq>:
}
 80031a4:	4b01      	ldr	r3, [pc, #4]	; (80031ac <HAL_RCC_GetHCLKFreq+0x8>)
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031b2:	4a06      	ldr	r2, [pc, #24]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031be:	6810      	ldr	r0, [r2, #0]
 80031c0:	f003 031f 	and.w	r3, r3, #31
}
 80031c4:	40d8      	lsrs	r0, r3
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08005e2e 	.word	0x08005e2e
 80031d0:	2000000c 	.word	0x2000000c

080031d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e2:	6810      	ldr	r0, [r2, #0]
 80031e4:	f003 031f 	and.w	r3, r3, #31
}
 80031e8:	40d8      	lsrs	r0, r3
 80031ea:	4770      	bx	lr
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08005e2e 	.word	0x08005e2e
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80031fc:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031fe:	6800      	ldr	r0, [r0, #0]
 8003200:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003204:	d039      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003206:	4d75      	ldr	r5, [pc, #468]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003208:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800320a:	00d8      	lsls	r0, r3, #3
 800320c:	d427      	bmi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	65ab      	str	r3, [r5, #88]	; 0x58
 8003216:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003220:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003222:	4f6f      	ldr	r7, [pc, #444]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322a:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800322c:	f7fe fb8a 	bl	8001944 <HAL_GetTick>
 8003230:	4680      	mov	r8, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	05d9      	lsls	r1, r3, #23
 8003236:	d514      	bpl.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003238:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800323c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003240:	d003      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003242:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003244:	4293      	cmp	r3, r2
 8003246:	f040 80a3 	bne.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x198>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800324e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325a:	2000      	movs	r0, #0
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2600      	movs	r6, #0
 8003260:	e7df      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fe fb6f 	bl	8001944 <HAL_GetTick>
 8003266:	eba0 0008 	sub.w	r0, r0, r8
 800326a:	2802      	cmp	r0, #2
 800326c:	d9e1      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 800326e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003270:	b11e      	cbz	r6, 800327a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	07df      	lsls	r7, r3, #31
 800327e:	d508      	bpl.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003280:	4956      	ldr	r1, [pc, #344]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003282:	6865      	ldr	r5, [r4, #4]
 8003284:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003288:	f022 0203 	bic.w	r2, r2, #3
 800328c:	432a      	orrs	r2, r5
 800328e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003292:	079e      	lsls	r6, r3, #30
 8003294:	d508      	bpl.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003296:	4951      	ldr	r1, [pc, #324]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003298:	68a5      	ldr	r5, [r4, #8]
 800329a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800329e:	f022 020c 	bic.w	r2, r2, #12
 80032a2:	432a      	orrs	r2, r5
 80032a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a8:	075d      	lsls	r5, r3, #29
 80032aa:	d508      	bpl.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ac:	494b      	ldr	r1, [pc, #300]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032ae:	68e5      	ldr	r5, [r4, #12]
 80032b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80032b8:	432a      	orrs	r2, r5
 80032ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032be:	0699      	lsls	r1, r3, #26
 80032c0:	d508      	bpl.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c2:	4946      	ldr	r1, [pc, #280]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032c4:	6925      	ldr	r5, [r4, #16]
 80032c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032ce:	432a      	orrs	r2, r5
 80032d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032d4:	059a      	lsls	r2, r3, #22
 80032d6:	d508      	bpl.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d8:	4940      	ldr	r1, [pc, #256]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032da:	6a25      	ldr	r5, [r4, #32]
 80032dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032e0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80032e4:	432a      	orrs	r2, r5
 80032e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ea:	055f      	lsls	r7, r3, #21
 80032ec:	d508      	bpl.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032ee:	493b      	ldr	r1, [pc, #236]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80032fa:	432a      	orrs	r2, r5
 80032fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003300:	065e      	lsls	r6, r3, #25
 8003302:	d508      	bpl.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003306:	6965      	ldr	r5, [r4, #20]
 8003308:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800330c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003310:	432a      	orrs	r2, r5
 8003312:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003316:	061d      	lsls	r5, r3, #24
 8003318:	d508      	bpl.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800331a:	4930      	ldr	r1, [pc, #192]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800331c:	69a5      	ldr	r5, [r4, #24]
 800331e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003322:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003326:	432a      	orrs	r2, r5
 8003328:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332c:	05d9      	lsls	r1, r3, #23
 800332e:	d508      	bpl.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003330:	492a      	ldr	r1, [pc, #168]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003332:	69e5      	ldr	r5, [r4, #28]
 8003334:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003338:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800333c:	432a      	orrs	r2, r5
 800333e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003342:	049a      	lsls	r2, r3, #18
 8003344:	d50f      	bpl.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003346:	4925      	ldr	r1, [pc, #148]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003348:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800334a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800334e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003352:	432a      	orrs	r2, r5
 8003354:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003358:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800335c:	bf02      	ittt	eq
 800335e:	68ca      	ldreq	r2, [r1, #12]
 8003360:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003364:	60ca      	streq	r2, [r1, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003366:	035b      	lsls	r3, r3, #13
 8003368:	d50f      	bpl.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800336c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800336e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003372:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003376:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003378:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800337c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003380:	d103      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003382:	68d3      	ldr	r3, [r2, #12]
 8003384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003388:	60d3      	str	r3, [r2, #12]
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800338a:	b002      	add	sp, #8
 800338c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003390:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003394:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a4:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ac:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ae:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80033b2:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033b6:	f57f af48 	bpl.w	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80033ba:	f7fe fac3 	bl	8001944 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80033c2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80033c8:	079b      	lsls	r3, r3, #30
 80033ca:	f53f af3e 	bmi.w	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe fab9 	bl	8001944 <HAL_GetTick>
 80033d2:	1bc0      	subs	r0, r0, r7
 80033d4:	4540      	cmp	r0, r8
 80033d6:	d9f5      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033d8:	e749      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000

080033e4 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033e4:	4a02      	ldr	r2, [pc, #8]	; (80033f0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6013      	str	r3, [r2, #0]
}
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000

080033f4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f4:	6a03      	ldr	r3, [r0, #32]
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fc:	6a03      	ldr	r3, [r0, #32]
{
 80033fe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003404:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800340a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800340e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003410:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003412:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003416:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003418:	4d12      	ldr	r5, [pc, #72]	; (8003464 <TIM_OC1_SetConfig+0x70>)
 800341a:	42a8      	cmp	r0, r5
 800341c:	d006      	beq.n	800342c <TIM_OC1_SetConfig+0x38>
 800341e:	4e12      	ldr	r6, [pc, #72]	; (8003468 <TIM_OC1_SetConfig+0x74>)
 8003420:	42b0      	cmp	r0, r6
 8003422:	d003      	beq.n	800342c <TIM_OC1_SetConfig+0x38>
 8003424:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003428:	42b0      	cmp	r0, r6
 800342a:	d114      	bne.n	8003456 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800342c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800342e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003432:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003434:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003436:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343a:	d006      	beq.n	800344a <TIM_OC1_SetConfig+0x56>
 800343c:	4d0a      	ldr	r5, [pc, #40]	; (8003468 <TIM_OC1_SetConfig+0x74>)
 800343e:	42a8      	cmp	r0, r5
 8003440:	d003      	beq.n	800344a <TIM_OC1_SetConfig+0x56>
 8003442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003446:	42a8      	cmp	r0, r5
 8003448:	d105      	bne.n	8003456 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344a:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800344e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003452:	4334      	orrs	r4, r6
 8003454:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003456:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003458:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345a:	684a      	ldr	r2, [r1, #4]
 800345c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	6203      	str	r3, [r0, #32]
}
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40014000 	.word	0x40014000

0800346c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800346c:	6a03      	ldr	r3, [r0, #32]
 800346e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003472:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003474:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003476:	6842      	ldr	r2, [r0, #4]
{
 8003478:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800347e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003482:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003486:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003488:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800348a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003492:	4d0f      	ldr	r5, [pc, #60]	; (80034d0 <TIM_OC3_SetConfig+0x64>)
 8003494:	42a8      	cmp	r0, r5
 8003496:	d10e      	bne.n	80034b6 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003498:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800349a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ae:	4335      	orrs	r5, r6
 80034b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80034b4:	e005      	b.n	80034c2 <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	4d07      	ldr	r5, [pc, #28]	; (80034d4 <TIM_OC3_SetConfig+0x68>)
 80034b8:	42a8      	cmp	r0, r5
 80034ba:	d0f4      	beq.n	80034a6 <TIM_OC3_SetConfig+0x3a>
 80034bc:	4d06      	ldr	r5, [pc, #24]	; (80034d8 <TIM_OC3_SetConfig+0x6c>)
 80034be:	42a8      	cmp	r0, r5
 80034c0:	d0f1      	beq.n	80034a6 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80034c8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	6203      	str	r3, [r0, #32]
}
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40014400 	.word	0x40014400

080034dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034dc:	6a03      	ldr	r3, [r0, #32]
 80034de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e4:	6a02      	ldr	r2, [r0, #32]
{
 80034e6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ea:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80034fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003500:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	4d0a      	ldr	r5, [pc, #40]	; (8003530 <TIM_OC4_SetConfig+0x54>)
 8003506:	42a8      	cmp	r0, r5
 8003508:	d007      	beq.n	800351a <TIM_OC4_SetConfig+0x3e>
 800350a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800350e:	42a8      	cmp	r0, r5
 8003510:	d003      	beq.n	800351a <TIM_OC4_SetConfig+0x3e>
 8003512:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003516:	42a8      	cmp	r0, r5
 8003518:	d104      	bne.n	8003524 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800351a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800351c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003520:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003524:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003526:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003528:	684b      	ldr	r3, [r1, #4]
 800352a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	6202      	str	r2, [r0, #32]
}
 800352e:	bd30      	pop	{r4, r5, pc}
 8003530:	40012c00 	.word	0x40012c00

08003534 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003534:	6a03      	ldr	r3, [r0, #32]
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353c:	6a02      	ldr	r2, [r0, #32]
{
 800353e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003542:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800354e:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003550:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8003552:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003556:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	4d0b      	ldr	r5, [pc, #44]	; (8003588 <TIM_OC5_SetConfig+0x54>)
 800355c:	42a8      	cmp	r0, r5
 800355e:	d007      	beq.n	8003570 <TIM_OC5_SetConfig+0x3c>
 8003560:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003564:	42a8      	cmp	r0, r5
 8003566:	d003      	beq.n	8003570 <TIM_OC5_SetConfig+0x3c>
 8003568:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800356c:	42a8      	cmp	r0, r5
 800356e:	d104      	bne.n	800357a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003570:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003572:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003576:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800357e:	684b      	ldr	r3, [r1, #4]
 8003580:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003582:	6202      	str	r2, [r0, #32]
}
 8003584:	bd30      	pop	{r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00

0800358c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800358c:	6a03      	ldr	r3, [r0, #32]
 800358e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003592:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003594:	6a02      	ldr	r2, [r0, #32]
{
 8003596:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035b0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	4d0a      	ldr	r5, [pc, #40]	; (80035e0 <TIM_OC6_SetConfig+0x54>)
 80035b6:	42a8      	cmp	r0, r5
 80035b8:	d007      	beq.n	80035ca <TIM_OC6_SetConfig+0x3e>
 80035ba:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80035be:	42a8      	cmp	r0, r5
 80035c0:	d003      	beq.n	80035ca <TIM_OC6_SetConfig+0x3e>
 80035c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035c6:	42a8      	cmp	r0, r5
 80035c8:	d104      	bne.n	80035d4 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035ca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035cc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035d0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035d6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035d8:	684b      	ldr	r3, [r1, #4]
 80035da:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035dc:	6202      	str	r2, [r0, #32]
}
 80035de:	bd30      	pop	{r4, r5, pc}
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <HAL_TIM_OC_DelayElapsedCallback>:
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80035e8:	4770      	bx	lr

080035ea <HAL_TIM_TriggerCallback>:
 80035ea:	4770      	bx	lr

080035ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	0791      	lsls	r1, r2, #30
{
 80035f2:	b510      	push	{r4, lr}
 80035f4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f6:	d50f      	bpl.n	8003618 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	0792      	lsls	r2, r2, #30
 80035fc:	d50c      	bpl.n	8003618 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035fe:	f06f 0202 	mvn.w	r2, #2
 8003602:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003604:	2201      	movs	r2, #1
 8003606:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	0799      	lsls	r1, r3, #30
 800360c:	f000 8085 	beq.w	800371a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003610:	f7ff ffe9 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003614:	2300      	movs	r3, #0
 8003616:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	0752      	lsls	r2, r2, #29
 800361e:	d510      	bpl.n	8003642 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	0750      	lsls	r0, r2, #29
 8003624:	d50d      	bpl.n	8003642 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003626:	f06f 0204 	mvn.w	r2, #4
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362c:	2202      	movs	r2, #2
 800362e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	d075      	beq.n	8003726 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	f7ff ffd4 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	2300      	movs	r3, #0
 8003640:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	0711      	lsls	r1, r2, #28
 8003648:	d50f      	bpl.n	800366a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	0712      	lsls	r2, r2, #28
 800364e:	d50c      	bpl.n	800366a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003650:	f06f 0208 	mvn.w	r2, #8
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003656:	2204      	movs	r2, #4
 8003658:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	d067      	beq.n	8003732 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	f7ff ffc0 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	2300      	movs	r3, #0
 8003668:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	06d0      	lsls	r0, r2, #27
 8003670:	d510      	bpl.n	8003694 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	06d1      	lsls	r1, r2, #27
 8003676:	d50d      	bpl.n	8003694 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003678:	f06f 0210 	mvn.w	r2, #16
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367e:	2208      	movs	r2, #8
 8003680:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003688:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368a:	d058      	beq.n	800373e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800368c:	f7ff ffab 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003690:	2300      	movs	r3, #0
 8003692:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	07d2      	lsls	r2, r2, #31
 800369a:	d508      	bpl.n	80036ae <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	07d0      	lsls	r0, r2, #31
 80036a0:	d505      	bpl.n	80036ae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a2:	f06f 0201 	mvn.w	r2, #1
 80036a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7fd fb1f 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	0611      	lsls	r1, r2, #24
 80036b4:	d508      	bpl.n	80036c8 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	0612      	lsls	r2, r2, #24
 80036ba:	d505      	bpl.n	80036c8 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 fa6b 	bl	8003b9e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	05d0      	lsls	r0, r2, #23
 80036ce:	d508      	bpl.n	80036e2 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	0611      	lsls	r1, r2, #24
 80036d4:	d505      	bpl.n	80036e2 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80036dc:	4620      	mov	r0, r4
 80036de:	f000 fa5f 	bl	8003ba0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	0652      	lsls	r2, r2, #25
 80036e8:	d508      	bpl.n	80036fc <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	0650      	lsls	r0, r2, #25
 80036ee:	d505      	bpl.n	80036fc <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff ff77 	bl	80035ea <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	0691      	lsls	r1, r2, #26
 8003702:	d522      	bpl.n	800374a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	0692      	lsls	r2, r2, #26
 8003708:	d51f      	bpl.n	800374a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800370e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003710:	611a      	str	r2, [r3, #16]
}
 8003712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003716:	f000 ba41 	b.w	8003b9c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	f7ff ff63 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ff62 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003724:	e776      	b.n	8003614 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	f7ff ff5d 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff ff5c 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003730:	e785      	b.n	800363e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	f7ff ff57 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003736:	4620      	mov	r0, r4
 8003738:	f7ff ff56 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 800373c:	e793      	b.n	8003666 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	f7ff ff51 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff ff50 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003748:	e7a2      	b.n	8003690 <HAL_TIM_IRQHandler+0xa4>
}
 800374a:	bd10      	pop	{r4, pc}

0800374c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800374e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	4290      	cmp	r0, r2
{
 8003752:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	d002      	beq.n	800375c <TIM_Base_SetConfig+0x10>
 8003756:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800375a:	d109      	bne.n	8003770 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800375c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003762:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8003764:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003768:	d009      	beq.n	800377e <TIM_Base_SetConfig+0x32>
 800376a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800376e:	d006      	beq.n	800377e <TIM_Base_SetConfig+0x32>
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <TIM_Base_SetConfig+0x70>)
 8003772:	4290      	cmp	r0, r2
 8003774:	d003      	beq.n	800377e <TIM_Base_SetConfig+0x32>
 8003776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800377a:	4290      	cmp	r0, r2
 800377c:	d103      	bne.n	8003786 <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003784:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003786:	694a      	ldr	r2, [r1, #20]
 8003788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800378c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800378e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	688b      	ldr	r3, [r1, #8]
 8003792:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003794:	680b      	ldr	r3, [r1, #0]
 8003796:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <TIM_Base_SetConfig+0x6c>)
 800379a:	4298      	cmp	r0, r3
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 800379e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80037a2:	4298      	cmp	r0, r3
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x62>
 80037a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037aa:	4298      	cmp	r0, r3
 80037ac:	d101      	bne.n	80037b2 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80037ae:	690b      	ldr	r3, [r1, #16]
 80037b0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80037b2:	2301      	movs	r3, #1
 80037b4:	6143      	str	r3, [r0, #20]
}
 80037b6:	bd10      	pop	{r4, pc}
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40014000 	.word	0x40014000

080037c0 <HAL_TIM_Base_Init>:
{
 80037c0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80037c2:	4604      	mov	r4, r0
 80037c4:	b350      	cbz	r0, 800381c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037ce:	b91b      	cbnz	r3, 80037d8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037d4:	f7fd febe 	bl	8001554 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037da:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	1d21      	adds	r1, r4, #4
 80037e2:	f7ff ffb3 	bl	800374c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80037ec:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80037f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80037f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80037fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80037fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800380a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800380e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003812:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003816:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800381a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800381c:	2001      	movs	r0, #1
 800381e:	e7fc      	b.n	800381a <HAL_TIM_Base_Init+0x5a>

08003820 <HAL_TIM_OC_Init>:
{
 8003820:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003822:	4604      	mov	r4, r0
 8003824:	b350      	cbz	r0, 800387c <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800382a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800382e:	b91b      	cbnz	r3, 8003838 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003830:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003834:	f7fd fe2e 	bl	8001494 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800383a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003840:	1d21      	adds	r1, r4, #4
 8003842:	f7ff ff83 	bl	800374c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003846:	2301      	movs	r3, #1
 8003848:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800384c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003852:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003856:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800385a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800385e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800386a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800386e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003872:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800387a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800387c:	2001      	movs	r0, #1
 800387e:	e7fc      	b.n	800387a <HAL_TIM_OC_Init+0x5a>

08003880 <HAL_TIM_PWM_Init>:
{
 8003880:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003882:	4604      	mov	r4, r0
 8003884:	b350      	cbz	r0, 80038dc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800388a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800388e:	b91b      	cbnz	r3, 8003898 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003890:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003894:	f7fd fdde 	bl	8001454 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	1d21      	adds	r1, r4, #4
 80038a2:	f7ff ff53 	bl	800374c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80038ac:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80038b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80038be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80038ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80038d2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80038d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80038da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038dc:	2001      	movs	r0, #1
 80038de:	e7fc      	b.n	80038da <HAL_TIM_PWM_Init+0x5a>

080038e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	6a03      	ldr	r3, [r0, #32]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80038e8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80038ea:	6842      	ldr	r2, [r0, #4]
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80038ee:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80038f6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003900:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003904:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003908:	4d0e      	ldr	r5, [pc, #56]	; (8003944 <TIM_OC2_SetConfig+0x64>)
 800390a:	42a8      	cmp	r0, r5
 800390c:	d10e      	bne.n	800392c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800390e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003914:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800391c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003920:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003924:	4335      	orrs	r5, r6
 8003926:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800392a:	e005      	b.n	8003938 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392c:	4d06      	ldr	r5, [pc, #24]	; (8003948 <TIM_OC2_SetConfig+0x68>)
 800392e:	42a8      	cmp	r0, r5
 8003930:	d0f4      	beq.n	800391c <TIM_OC2_SetConfig+0x3c>
 8003932:	4d06      	ldr	r5, [pc, #24]	; (800394c <TIM_OC2_SetConfig+0x6c>)
 8003934:	42a8      	cmp	r0, r5
 8003936:	d0f1      	beq.n	800391c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8003938:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800393a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800393c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800393e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003940:	6203      	str	r3, [r0, #32]
}
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400

08003950 <HAL_TIM_OC_ConfigChannel>:
{
 8003950:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
{
 8003958:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800395a:	d02b      	beq.n	80039b4 <HAL_TIM_OC_ConfigChannel+0x64>
 800395c:	2001      	movs	r0, #1
  switch (Channel)
 800395e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8003960:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8003964:	d01e      	beq.n	80039a4 <HAL_TIM_OC_ConfigChannel+0x54>
 8003966:	d808      	bhi.n	800397a <HAL_TIM_OC_ConfigChannel+0x2a>
 8003968:	2a04      	cmp	r2, #4
 800396a:	d013      	beq.n	8003994 <HAL_TIM_OC_ConfigChannel+0x44>
 800396c:	2a08      	cmp	r2, #8
 800396e:	d015      	beq.n	800399c <HAL_TIM_OC_ConfigChannel+0x4c>
 8003970:	b15a      	cbz	r2, 800398a <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8003972:	2300      	movs	r3, #0
 8003974:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8003978:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800397a:	2a10      	cmp	r2, #16
 800397c:	d016      	beq.n	80039ac <HAL_TIM_OC_ConfigChannel+0x5c>
 800397e:	2a14      	cmp	r2, #20
 8003980:	d1f7      	bne.n	8003972 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003982:	6828      	ldr	r0, [r5, #0]
 8003984:	f7ff fe02 	bl	800358c <TIM_OC6_SetConfig>
 8003988:	e002      	b.n	8003990 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800398a:	6828      	ldr	r0, [r5, #0]
 800398c:	f7ff fd32 	bl	80033f4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2000      	movs	r0, #0
      break;
 8003992:	e7ee      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003994:	6828      	ldr	r0, [r5, #0]
 8003996:	f7ff ffa3 	bl	80038e0 <TIM_OC2_SetConfig>
      break;
 800399a:	e7f9      	b.n	8003990 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399c:	6828      	ldr	r0, [r5, #0]
 800399e:	f7ff fd65 	bl	800346c <TIM_OC3_SetConfig>
      break;
 80039a2:	e7f5      	b.n	8003990 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039a4:	6828      	ldr	r0, [r5, #0]
 80039a6:	f7ff fd99 	bl	80034dc <TIM_OC4_SetConfig>
      break;
 80039aa:	e7f1      	b.n	8003990 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039ac:	6828      	ldr	r0, [r5, #0]
 80039ae:	f7ff fdc1 	bl	8003534 <TIM_OC5_SetConfig>
      break;
 80039b2:	e7ed      	b.n	8003990 <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 80039b4:	2002      	movs	r0, #2
 80039b6:	e7df      	b.n	8003978 <HAL_TIM_OC_ConfigChannel+0x28>

080039b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80039b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80039ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039be:	2b01      	cmp	r3, #1
{
 80039c0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80039c2:	d079      	beq.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x100>
 80039c4:	2001      	movs	r0, #1
  switch (Channel)
 80039c6:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80039c8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80039cc:	d052      	beq.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80039ce:	d808      	bhi.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80039d0:	2a04      	cmp	r2, #4
 80039d2:	d02d      	beq.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x78>
 80039d4:	2a08      	cmp	r2, #8
 80039d6:	d03c      	beq.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80039d8:	b1c2      	cbz	r2, 8003a0c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 80039da:	2300      	movs	r3, #0
 80039dc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80039e2:	2a10      	cmp	r2, #16
 80039e4:	d057      	beq.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0xde>
 80039e6:	2a14      	cmp	r2, #20
 80039e8:	d1f7      	bne.n	80039da <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039ea:	6828      	ldr	r0, [r5, #0]
 80039ec:	f7ff fdce 	bl	800358c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a0a:	e053      	b.n	8003ab4 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0c:	6828      	ldr	r0, [r5, #0]
 8003a0e:	f7ff fcf1 	bl	80033f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a12:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a14:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	f042 0208 	orr.w	r2, r2, #8
 8003a1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	f022 0204 	bic.w	r2, r2, #4
 8003a24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a2a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2000      	movs	r0, #0
      break;
 8003a2e:	e7d4      	b.n	80039da <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a30:	6828      	ldr	r0, [r5, #0]
 8003a32:	f7ff ff55 	bl	80038e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a36:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a38:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a50:	e7eb      	b.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	6828      	ldr	r0, [r5, #0]
 8003a54:	f7ff fd0a 	bl	800346c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a58:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a70:	61da      	str	r2, [r3, #28]
      break;
 8003a72:	e7db      	b.n	8003a2c <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a74:	6828      	ldr	r0, [r5, #0]
 8003a76:	f7ff fd31 	bl	80034dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a7c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a94:	e7ec      	b.n	8003a70 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a96:	6828      	ldr	r0, [r5, #0]
 8003a98:	f7ff fd4c 	bl	8003534 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a9c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a9e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa2:	f042 0208 	orr.w	r2, r2, #8
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ab2:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ab6:	e7b9      	b.n	8003a2c <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8003ab8:	2002      	movs	r0, #2
 8003aba:	e791      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x28>

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003abe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	f04f 0302 	mov.w	r3, #2
 8003ac8:	d023      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aca:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003acc:	4d12      	ldr	r5, [pc, #72]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ace:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003ad2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ad6:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ad8:	bf02      	ittt	eq
 8003ada:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003adc:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ae0:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae2:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae8:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aea:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8003aec:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	d005      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003af0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003af4:	d002      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d104      	bne.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afe:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b02:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b04:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b12:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000

08003b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b20:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d034      	beq.n	8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b2a:	68cb      	ldr	r3, [r1, #12]
 8003b2c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b2e:	4c1a      	ldr	r4, [pc, #104]	; (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b36:	684a      	ldr	r2, [r1, #4]
 8003b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b3e:	680a      	ldr	r2, [r1, #0]
 8003b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b46:	690a      	ldr	r2, [r1, #16]
 8003b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b4e:	694a      	ldr	r2, [r1, #20]
 8003b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b56:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b5e:	698a      	ldr	r2, [r1, #24]
 8003b60:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b68:	6802      	ldr	r2, [r0, #0]
 8003b6a:	42a2      	cmp	r2, r4
 8003b6c:	d10c      	bne.n	8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b6e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003b70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b74:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b78:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b7a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b80:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b86:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b88:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003b90:	4618      	mov	r0, r3
}
 8003b92:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003b94:	2002      	movs	r0, #2
 8003b96:	e7fc      	b.n	8003b92 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8003b98:	40012c00 	.word	0x40012c00

08003b9c <HAL_TIMEx_CommutCallback>:
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIMEx_BreakCallback>:
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIMEx_Break2Callback>:
 8003ba0:	4770      	bx	lr

08003ba2 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	e852 3f00 	ldrex	r3, [r2]
 8003ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003bb0:	6802      	ldr	r2, [r0, #0]
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	d1f5      	bne.n	8003ba2 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	f102 0308 	add.w	r3, r2, #8
 8003bba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	f102 0c08 	add.w	ip, r2, #8
 8003bc6:	e84c 3100 	strex	r1, r3, [ip]
 8003bca:	2900      	cmp	r1, #0
 8003bcc:	d1f3      	bne.n	8003bb6 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bce:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	e842 3100 	strex	r1, r3, [r2]
 8003be0:	2900      	cmp	r1, #0
 8003be2:	d1f7      	bne.n	8003bd4 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	2320      	movs	r3, #32
 8003be6:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	2300      	movs	r3, #0
 8003bea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bec:	6643      	str	r3, [r0, #100]	; 0x64
}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_TxCpltCallback>:
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_UART_ErrorCallback>:
 8003bf2:	4770      	bx	lr

08003bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bf6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bfe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c02:	f7ff fff6 	bl	8003bf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c06:	bd08      	pop	{r3, pc}

08003c08 <HAL_UART_AbortReceiveCpltCallback>:
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_UART_AbortReceive_IT>:
{
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	e852 3f00 	ldrex	r3, [r2]
 8003c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d1f5      	bne.n	8003c10 <HAL_UART_AbortReceive_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	f103 0208 	add.w	r2, r3, #8
 8003c28:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	f103 0008 	add.w	r0, r3, #8
 8003c34:	e840 2100 	strex	r1, r2, [r0]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d1f3      	bne.n	8003c24 <HAL_UART_AbortReceive_IT+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003c3e:	2a01      	cmp	r2, #1
 8003c40:	d107      	bne.n	8003c52 <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003c46:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	e843 2100 	strex	r1, r2, [r3]
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	d1f7      	bne.n	8003c42 <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003c58:	d028      	beq.n	8003cac <HAL_UART_AbortReceive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	f103 0208 	add.w	r2, r3, #8
 8003c5e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f103 0008 	add.w	r0, r3, #8
 8003c6a:	e840 2100 	strex	r1, r2, [r0]
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d1f3      	bne.n	8003c5a <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 8003c72:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003c74:	b148      	cbz	r0, 8003c8a <HAL_UART_AbortReceive_IT+0x7e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_UART_AbortReceive_IT+0xb4>)
 8003c78:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c7a:	f7fe fd09 	bl	8002690 <HAL_DMA_Abort_IT>
 8003c7e:	b110      	cbz	r0, 8003c86 <HAL_UART_AbortReceive_IT+0x7a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c80:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003c82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c84:	4798      	blx	r3
}
 8003c86:	2000      	movs	r0, #0
 8003c88:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003c8a:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8003c8c:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 8003c90:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003c92:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c94:	8b1a      	ldrh	r2, [r3, #24]
 8003c96:	b292      	uxth	r2, r2
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	831a      	strh	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	6620      	str	r0, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff ffaf 	bl	8003c08 <HAL_UART_AbortReceiveCpltCallback>
 8003caa:	e7ec      	b.n	8003c86 <HAL_UART_AbortReceive_IT+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003cac:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 8003cae:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 8003cb2:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003cb4:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	6622      	str	r2, [r4, #96]	; 0x60
 8003cbc:	e7f2      	b.n	8003ca4 <HAL_UART_AbortReceive_IT+0x98>
 8003cbe:	bf00      	nop
 8003cc0:	08003cc5 	.word	0x08003cc5

08003cc4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003cc6:	6802      	ldr	r2, [r0, #0]
{
 8003cc8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8003cca:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ccc:	230f      	movs	r3, #15
  huart->RxXferCount = 0U;
 8003cce:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003cd2:	6213      	str	r3, [r2, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cd4:	8b13      	ldrh	r3, [r2, #24]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	8313      	strh	r3, [r2, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cde:	2320      	movs	r3, #32
 8003ce0:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003ce4:	f7ff ff90 	bl	8003c08 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce8:	bd08      	pop	{r3, pc}

08003cea <HAL_UARTEx_RxEventCallback>:
}
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf0:	6819      	ldr	r1, [r3, #0]
{
 8003cf2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003cf4:	f640 060f 	movw	r6, #2063	; 0x80f
 8003cf8:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cfa:	689d      	ldr	r5, [r3, #8]
{
 8003cfc:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003cfe:	d10b      	bne.n	8003d18 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d00:	0696      	lsls	r6, r2, #26
 8003d02:	f140 8088 	bpl.w	8003e16 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d06:	068e      	lsls	r6, r1, #26
 8003d08:	f140 8085 	bpl.w	8003e16 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8003d0c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d07b      	beq.n	8003e0a <HAL_UART_IRQHandler+0x11e>
}
 8003d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003d16:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d18:	4e95      	ldr	r6, [pc, #596]	; (8003f70 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d1a:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d1e:	400e      	ands	r6, r1
 8003d20:	4306      	orrs	r6, r0
 8003d22:	d078      	beq.n	8003e16 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d24:	07d5      	lsls	r5, r2, #31
 8003d26:	d509      	bpl.n	8003d3c <HAL_UART_IRQHandler+0x50>
 8003d28:	05ce      	lsls	r6, r1, #23
 8003d2a:	d507      	bpl.n	8003d3c <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d2c:	2501      	movs	r5, #1
 8003d2e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d30:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003d34:	f045 0501 	orr.w	r5, r5, #1
 8003d38:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3c:	0795      	lsls	r5, r2, #30
 8003d3e:	d508      	bpl.n	8003d52 <HAL_UART_IRQHandler+0x66>
 8003d40:	b138      	cbz	r0, 8003d52 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d42:	2502      	movs	r5, #2
 8003d44:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d46:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003d4a:	f045 0504 	orr.w	r5, r5, #4
 8003d4e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d52:	0756      	lsls	r6, r2, #29
 8003d54:	d508      	bpl.n	8003d68 <HAL_UART_IRQHandler+0x7c>
 8003d56:	b138      	cbz	r0, 8003d68 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d58:	2504      	movs	r5, #4
 8003d5a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d5c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003d60:	f045 0502 	orr.w	r5, r5, #2
 8003d64:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d68:	0715      	lsls	r5, r2, #28
 8003d6a:	d50b      	bpl.n	8003d84 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d6c:	f001 0520 	and.w	r5, r1, #32
 8003d70:	4328      	orrs	r0, r5
 8003d72:	d007      	beq.n	8003d84 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d74:	2008      	movs	r0, #8
 8003d76:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d78:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003d7c:	f040 0008 	orr.w	r0, r0, #8
 8003d80:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d84:	0516      	lsls	r6, r2, #20
 8003d86:	d50a      	bpl.n	8003d9e <HAL_UART_IRQHandler+0xb2>
 8003d88:	014d      	lsls	r5, r1, #5
 8003d8a:	d508      	bpl.n	8003d9e <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d90:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d92:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d031      	beq.n	8003e0a <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003da6:	0690      	lsls	r0, r2, #26
 8003da8:	d505      	bpl.n	8003db6 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003daa:	068a      	lsls	r2, r1, #26
 8003dac:	d503      	bpl.n	8003db6 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8003dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003db0:	b10b      	cbz	r3, 8003db6 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8003db2:	4620      	mov	r0, r4
 8003db4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db6:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003db8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbc:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dbe:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8003dc8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dca:	d01f      	beq.n	8003e0c <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8003dcc:	f7ff fee9 	bl	8003ba2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	6893      	ldr	r3, [r2, #8]
 8003dd4:	065b      	lsls	r3, r3, #25
 8003dd6:	d515      	bpl.n	8003e04 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	f102 0308 	add.w	r3, r2, #8
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	f102 0008 	add.w	r0, r2, #8
 8003de8:	e840 3100 	strex	r1, r3, [r0]
 8003dec:	2900      	cmp	r1, #0
 8003dee:	d1f3      	bne.n	8003dd8 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8003df0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003df2:	b138      	cbz	r0, 8003e04 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df4:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_UART_IRQHandler+0x288>)
 8003df6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df8:	f7fe fc4a 	bl	8002690 <HAL_DMA_Abort_IT>
 8003dfc:	b128      	cbz	r0, 8003e0a <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e02:	e786      	b.n	8003d12 <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7ff fef4 	bl	8003bf2 <HAL_UART_ErrorCallback>
}
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003e0c:	f7ff fef1 	bl	8003bf2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8003e14:	e7f9      	b.n	8003e0a <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e16:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003e18:	2801      	cmp	r0, #1
 8003e1a:	d17e      	bne.n	8003f1a <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e1c:	06d6      	lsls	r6, r2, #27
 8003e1e:	d57c      	bpl.n	8003f1a <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e20:	06c8      	lsls	r0, r1, #27
 8003e22:	d57a      	bpl.n	8003f1a <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e24:	2210      	movs	r2, #16
 8003e26:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	0651      	lsls	r1, r2, #25
 8003e2c:	d546      	bpl.n	8003ebc <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003e30:	6811      	ldr	r1, [r2, #0]
 8003e32:	684a      	ldr	r2, [r1, #4]
 8003e34:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d0e7      	beq.n	8003e0a <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8003e3e:	4290      	cmp	r0, r2
 8003e40:	d9e3      	bls.n	8003e0a <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e42:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e46:	680a      	ldr	r2, [r1, #0]
 8003e48:	0692      	lsls	r2, r2, #26
 8003e4a:	d42d      	bmi.n	8003ea8 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	e843 2100 	strex	r1, r2, [r3]
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d1f7      	bne.n	8003e4c <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	f103 0208 	add.w	r2, r3, #8
 8003e60:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	f103 0008 	add.w	r0, r3, #8
 8003e6c:	e840 2100 	strex	r1, r2, [r0]
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d1f3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	f103 0208 	add.w	r2, r3, #8
 8003e78:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	f103 0008 	add.w	r0, r3, #8
 8003e84:	e840 2100 	strex	r1, r2, [r0]
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d1f3      	bne.n	8003e74 <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e90:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e96:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	e843 2100 	strex	r1, r2, [r3]
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d1f7      	bne.n	8003e92 <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003ea4:	f7fe fbd1 	bl	800264a <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ea8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003eac:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003eb0:	1ac9      	subs	r1, r1, r3
 8003eb2:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff ff18 	bl	8003cea <HAL_UARTEx_RxEventCallback>
 8003eba:	e7a6      	b.n	8003e0a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8003ec0:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8003ec2:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8003ec6:	b289      	uxth	r1, r1
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d09e      	beq.n	8003e0a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ecc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003ed0:	1a89      	subs	r1, r1, r2
 8003ed2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d098      	beq.n	8003e0a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003edc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	e843 2000 	strex	r0, r2, [r3]
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f7      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f103 0208 	add.w	r2, r3, #8
 8003eec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	f103 0508 	add.w	r5, r3, #8
 8003ef8:	e845 2000 	strex	r0, r2, [r5]
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d1f3      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 8003f00:	2220      	movs	r2, #32
 8003f02:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8003f04:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	e843 2000 	strex	r0, r2, [r3]
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1f7      	bne.n	8003f08 <HAL_UART_IRQHandler+0x21c>
 8003f18:	e7cc      	b.n	8003eb4 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f1a:	02d6      	lsls	r6, r2, #11
 8003f1c:	d509      	bpl.n	8003f32 <HAL_UART_IRQHandler+0x246>
 8003f1e:	0268      	lsls	r0, r5, #9
 8003f20:	d507      	bpl.n	8003f32 <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003f26:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003f2e:	f000 bbc9 	b.w	80046c4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f32:	0616      	lsls	r6, r2, #24
 8003f34:	d507      	bpl.n	8003f46 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f36:	060d      	lsls	r5, r1, #24
 8003f38:	d505      	bpl.n	8003f46 <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 8003f3a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f43f af64 	beq.w	8003e0a <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 8003f42:	4620      	mov	r0, r4
 8003f44:	e6e5      	b.n	8003d12 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f46:	0650      	lsls	r0, r2, #25
 8003f48:	f57f af5f 	bpl.w	8003e0a <HAL_UART_IRQHandler+0x11e>
 8003f4c:	064a      	lsls	r2, r1, #25
 8003f4e:	f57f af5c 	bpl.w	8003e0a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	e843 2100 	strex	r1, r2, [r3]
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	d1f7      	bne.n	8003f52 <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f62:	2320      	movs	r3, #32
 8003f64:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f66:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff fe41 	bl	8003bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	e74c      	b.n	8003e0a <HAL_UART_IRQHandler+0x11e>
 8003f70:	04000120 	.word	0x04000120
 8003f74:	08003bf5 	.word	0x08003bf5

08003f78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f78:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f7c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	d144      	bne.n	800400c <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f82:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f84:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8003f88:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003f8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f90:	3301      	adds	r3, #1
 8003f92:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003f94:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fa0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	bb6b      	cbnz	r3, 8004004 <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	e852 3f00 	ldrex	r3, [r2]
 8003fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d1f5      	bne.n	8003fa8 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f103 0208 	add.w	r2, r3, #8
 8003fc0:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	f103 0c08 	add.w	ip, r3, #8
 8003fcc:	e84c 2100 	strex	r1, r2, [ip]
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d1f3      	bne.n	8003fbc <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd8:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8003fda:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	2a01      	cmp	r2, #1
 8003fde:	d112      	bne.n	8004006 <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	e843 2100 	strex	r1, r2, [r3]
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	d1f7      	bne.n	8003fe2 <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ff2:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ff8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ffa:	bf44      	itt	mi
 8003ffc:	2210      	movmi	r2, #16
 8003ffe:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004000:	f7ff fe73 	bl	8003cea <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004004:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8004006:	f7fc ff17 	bl	8000e38 <HAL_UART_RxCpltCallback>
 800400a:	e7fb      	b.n	8004004 <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800400c:	8b13      	ldrh	r3, [r2, #24]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	8313      	strh	r3, [r2, #24]
}
 8004016:	e7f5      	b.n	8004004 <UART_RxISR_8BIT+0x8c>

08004018 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004018:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800401a:	2a22      	cmp	r2, #34	; 0x22
{
 800401c:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401e:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004020:	d141      	bne.n	80040a6 <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004022:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8004024:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8004028:	4011      	ands	r1, r2
 800402a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800402c:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8004030:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004032:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8004036:	3a01      	subs	r2, #1
 8004038:	b292      	uxth	r2, r2
 800403a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800403e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8004042:	b292      	uxth	r2, r2
 8004044:	bb5a      	cbnz	r2, 800409e <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	e843 2100 	strex	r1, r2, [r3]
 8004052:	2900      	cmp	r1, #0
 8004054:	d1f7      	bne.n	8004046 <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	f103 0208 	add.w	r2, r3, #8
 800405a:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	f103 0c08 	add.w	ip, r3, #8
 8004066:	e84c 2100 	strex	r1, r2, [ip]
 800406a:	2900      	cmp	r1, #0
 800406c:	d1f3      	bne.n	8004056 <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406e:	2220      	movs	r2, #32
 8004070:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004072:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8004074:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004076:	2a01      	cmp	r2, #1
 8004078:	d112      	bne.n	80040a0 <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004080:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	e843 2100 	strex	r1, r2, [r3]
 8004088:	2900      	cmp	r1, #0
 800408a:	d1f7      	bne.n	800407c <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800408c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004092:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004094:	bf44      	itt	mi
 8004096:	2210      	movmi	r2, #16
 8004098:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800409a:	f7ff fe26 	bl	8003cea <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800409e:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80040a0:	f7fc feca 	bl	8000e38 <HAL_UART_RxCpltCallback>
 80040a4:	e7fb      	b.n	800409e <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040a6:	8b1a      	ldrh	r2, [r3, #24]
 80040a8:	b292      	uxth	r2, r2
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	831a      	strh	r2, [r3, #24]
}
 80040b0:	e7f5      	b.n	800409e <UART_RxISR_16BIT+0x86>
	...

080040b4 <UART_SetConfig>:
{
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80040b8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ba:	6921      	ldr	r1, [r4, #16]
 80040bc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040be:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c0:	69c0      	ldr	r0, [r0, #28]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	6961      	ldr	r1, [r4, #20]
 80040c6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c8:	4979      	ldr	r1, [pc, #484]	; (80042b0 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040cc:	4029      	ands	r1, r5
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	68e1      	ldr	r1, [r4, #12]
 80040d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040de:	4a75      	ldr	r2, [pc, #468]	; (80042b4 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040e2:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80040e4:	bf1c      	itt	ne
 80040e6:	6a22      	ldrne	r2, [r4, #32]
 80040e8:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f4:	4a70      	ldr	r2, [pc, #448]	; (80042b8 <UART_SetConfig+0x204>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d117      	bne.n	800412a <UART_SetConfig+0x76>
 80040fa:	4b70      	ldr	r3, [pc, #448]	; (80042bc <UART_SetConfig+0x208>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	3b01      	subs	r3, #1
 8004106:	2b02      	cmp	r3, #2
 8004108:	f200 80b0 	bhi.w	800426c <UART_SetConfig+0x1b8>
 800410c:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <UART_SetConfig+0x20c>)
 800410e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004110:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004114:	f040 808b 	bne.w	800422e <UART_SetConfig+0x17a>
    switch (clocksource)
 8004118:	2b08      	cmp	r3, #8
 800411a:	d822      	bhi.n	8004162 <UART_SetConfig+0xae>
 800411c:	e8df f003 	tbb	[pc, r3]
 8004120:	2185a969 	.word	0x2185a969
 8004124:	21212182 	.word	0x21212182
 8004128:	6d          	.byte	0x6d
 8004129:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412a:	4a66      	ldr	r2, [pc, #408]	; (80042c4 <UART_SetConfig+0x210>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d106      	bne.n	800413e <UART_SetConfig+0x8a>
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <UART_SetConfig+0x208>)
 8004132:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <UART_SetConfig+0x214>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	e7e7      	b.n	800410e <UART_SetConfig+0x5a>
 800413e:	4a63      	ldr	r2, [pc, #396]	; (80042cc <UART_SetConfig+0x218>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d118      	bne.n	8004176 <UART_SetConfig+0xc2>
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <UART_SetConfig+0x208>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800414e:	2b20      	cmp	r3, #32
 8004150:	f000 8087 	beq.w	8004262 <UART_SetConfig+0x1ae>
 8004154:	d807      	bhi.n	8004166 <UART_SetConfig+0xb2>
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8094 	beq.w	8004284 <UART_SetConfig+0x1d0>
 800415c:	2b10      	cmp	r3, #16
 800415e:	f000 808b 	beq.w	8004278 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004162:	2001      	movs	r0, #1
 8004164:	e024      	b.n	80041b0 <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004166:	2b30      	cmp	r3, #48	; 0x30
 8004168:	d1fb      	bne.n	8004162 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800416e:	d044      	beq.n	80041fa <UART_SetConfig+0x146>
 8004170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004174:	e08d      	b.n	8004292 <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004176:	4a4f      	ldr	r2, [pc, #316]	; (80042b4 <UART_SetConfig+0x200>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d1f2      	bne.n	8004162 <UART_SetConfig+0xae>
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <UART_SetConfig+0x208>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	d015      	beq.n	80041b8 <UART_SetConfig+0x104>
 800418c:	d806      	bhi.n	800419c <UART_SetConfig+0xe8>
 800418e:	b15b      	cbz	r3, 80041a8 <UART_SetConfig+0xf4>
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d1e5      	bne.n	8004162 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe fc37 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
        break;
 800419a:	e007      	b.n	80041ac <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a0:	d1df      	bne.n	8004162 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041a6:	e008      	b.n	80041ba <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a8:	f7ff f802 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80041ac:	b928      	cbnz	r0, 80041ba <UART_SetConfig+0x106>
 80041ae:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80041b0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80041b2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80041b8:	4845      	ldr	r0, [pc, #276]	; (80042d0 <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80041c0:	4283      	cmp	r3, r0
 80041c2:	d8ce      	bhi.n	8004162 <UART_SetConfig+0xae>
 80041c4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80041c8:	d8cb      	bhi.n	8004162 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041ca:	0851      	lsrs	r1, r2, #1
 80041cc:	2500      	movs	r5, #0
 80041ce:	468c      	mov	ip, r1
 80041d0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80041d4:	4629      	mov	r1, r5
 80041d6:	fbe0 c106 	umlal	ip, r1, r0, r6
 80041da:	462b      	mov	r3, r5
 80041dc:	4660      	mov	r0, ip
 80041de:	f7fc fa8b 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e2:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <UART_SetConfig+0x220>)
 80041e4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d8ba      	bhi.n	8004162 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	60d8      	str	r0, [r3, #12]
 80041f0:	e7dd      	b.n	80041ae <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f2:	f7fe ffdd 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d0d9      	beq.n	80041ae <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	0853      	lsrs	r3, r2, #1
 80041fe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004202:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004206:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800420a:	f1a0 0210 	sub.w	r2, r0, #16
 800420e:	429a      	cmp	r2, r3
 8004210:	d8a7      	bhi.n	8004162 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004212:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8004216:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004218:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800421a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800421e:	4318      	orrs	r0, r3
 8004220:	60d0      	str	r0, [r2, #12]
 8004222:	e7c4      	b.n	80041ae <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8004224:	f7fe fbf0 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
        break;
 8004228:	e7e5      	b.n	80041f6 <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 800422a:	4829      	ldr	r0, [pc, #164]	; (80042d0 <UART_SetConfig+0x21c>)
 800422c:	e7e5      	b.n	80041fa <UART_SetConfig+0x146>
    switch (clocksource)
 800422e:	2b08      	cmp	r3, #8
 8004230:	d897      	bhi.n	8004162 <UART_SetConfig+0xae>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x184>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800428b 	.word	0x0800428b
 800423c:	0800425d 	.word	0x0800425d
 8004240:	08004269 	.word	0x08004269
 8004244:	08004163 	.word	0x08004163
 8004248:	0800427f 	.word	0x0800427f
 800424c:	08004163 	.word	0x08004163
 8004250:	08004163 	.word	0x08004163
 8004254:	08004163 	.word	0x08004163
 8004258:	08004171 	.word	0x08004171
        pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7fe ffba 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004260:	e015      	b.n	800428e <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004266:	d0e0      	beq.n	800422a <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4819      	ldr	r0, [pc, #100]	; (80042d0 <UART_SetConfig+0x21c>)
 800426a:	e012      	b.n	8004292 <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004270:	d1f4      	bne.n	800425c <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004272:	f7fe ffaf 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004276:	e7be      	b.n	80041f6 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004278:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800427c:	d0d2      	beq.n	8004224 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe fbc3 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
        break;
 8004282:	e004      	b.n	800428e <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004284:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004288:	d0b3      	beq.n	80041f2 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800428a:	f7fe ff91 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800428e:	2800      	cmp	r0, #0
 8004290:	d08d      	beq.n	80041ae <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004298:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80042a0:	f1a3 0110 	sub.w	r1, r3, #16
 80042a4:	4291      	cmp	r1, r2
 80042a6:	f63f af5c 	bhi.w	8004162 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	60d3      	str	r3, [r2, #12]
 80042ae:	e77e      	b.n	80041ae <UART_SetConfig+0xfa>
 80042b0:	efff69f3 	.word	0xefff69f3
 80042b4:	40008000 	.word	0x40008000
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08005e68 	.word	0x08005e68
 80042c4:	40004400 	.word	0x40004400
 80042c8:	08005e6b 	.word	0x08005e6b
 80042cc:	40004800 	.word	0x40004800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	000ffcff 	.word	0x000ffcff

080042d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042da:	07da      	lsls	r2, r3, #31
{
 80042dc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042de:	d506      	bpl.n	80042ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e0:	6801      	ldr	r1, [r0, #0]
 80042e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80042e4:	684a      	ldr	r2, [r1, #4]
 80042e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80042ea:	4322      	orrs	r2, r4
 80042ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ee:	079c      	lsls	r4, r3, #30
 80042f0:	d506      	bpl.n	8004300 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f2:	6801      	ldr	r1, [r0, #0]
 80042f4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80042f6:	684a      	ldr	r2, [r1, #4]
 80042f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042fc:	4322      	orrs	r2, r4
 80042fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004300:	0759      	lsls	r1, r3, #29
 8004302:	d506      	bpl.n	8004312 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004304:	6801      	ldr	r1, [r0, #0]
 8004306:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004308:	684a      	ldr	r2, [r1, #4]
 800430a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800430e:	4322      	orrs	r2, r4
 8004310:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004312:	071a      	lsls	r2, r3, #28
 8004314:	d506      	bpl.n	8004324 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004316:	6801      	ldr	r1, [r0, #0]
 8004318:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800431a:	684a      	ldr	r2, [r1, #4]
 800431c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004320:	4322      	orrs	r2, r4
 8004322:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004324:	06dc      	lsls	r4, r3, #27
 8004326:	d506      	bpl.n	8004336 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004328:	6801      	ldr	r1, [r0, #0]
 800432a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800432c:	688a      	ldr	r2, [r1, #8]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004332:	4322      	orrs	r2, r4
 8004334:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004336:	0699      	lsls	r1, r3, #26
 8004338:	d506      	bpl.n	8004348 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800433a:	6801      	ldr	r1, [r0, #0]
 800433c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800433e:	688a      	ldr	r2, [r1, #8]
 8004340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004344:	4322      	orrs	r2, r4
 8004346:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004348:	065a      	lsls	r2, r3, #25
 800434a:	d50f      	bpl.n	800436c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	6801      	ldr	r1, [r0, #0]
 800434e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004350:	684a      	ldr	r2, [r1, #4]
 8004352:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004356:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004358:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800435c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800435e:	d105      	bne.n	800436c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004360:	684a      	ldr	r2, [r1, #4]
 8004362:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004364:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004368:	4322      	orrs	r2, r4
 800436a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	d506      	bpl.n	800437e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004370:	6802      	ldr	r2, [r0, #0]
 8004372:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004374:	6853      	ldr	r3, [r2, #4]
 8004376:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800437a:	430b      	orrs	r3, r1
 800437c:	6053      	str	r3, [r2, #4]
}
 800437e:	bd10      	pop	{r4, pc}

08004380 <UART_WaitOnFlagUntilTimeout>:
{
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004388:	4604      	mov	r4, r0
 800438a:	460e      	mov	r6, r1
 800438c:	4615      	mov	r5, r2
 800438e:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	69d3      	ldr	r3, [r2, #28]
 8004394:	ea36 0303 	bics.w	r3, r6, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	42ab      	cmp	r3, r5
 80043a0:	d001      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80043a2:	2000      	movs	r0, #0
 80043a4:	e025      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80043aa:	d0f2      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fd faca 	bl	8001944 <HAL_GetTick>
 80043b0:	1bc0      	subs	r0, r0, r7
 80043b2:	4540      	cmp	r0, r8
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	d802      	bhi.n	80043be <UART_WaitOnFlagUntilTimeout+0x3e>
 80043b8:	f1b8 0f00 	cmp.w	r8, #0
 80043bc:	d11b      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	e840 3200 	strex	r2, r3, [r0]
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d1f7      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	f100 0308 	add.w	r3, r0, #8
 80043d2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	f100 0108 	add.w	r1, r0, #8
 80043de:	e841 3200 	strex	r2, r3, [r1]
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	d1f3      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80043e6:	2320      	movs	r3, #32
 80043e8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043ea:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80043ec:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
}
 80043f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043f6:	6803      	ldr	r3, [r0, #0]
 80043f8:	075a      	lsls	r2, r3, #29
 80043fa:	d5c9      	bpl.n	8004390 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fc:	69c3      	ldr	r3, [r0, #28]
 80043fe:	051b      	lsls	r3, r3, #20
 8004400:	d5c6      	bpl.n	8004390 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004406:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800440c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	e840 3200 	strex	r2, r3, [r0]
 8004414:	2a00      	cmp	r2, #0
 8004416:	d1f7      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	f100 0308 	add.w	r3, r0, #8
 800441c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	f100 0108 	add.w	r1, r0, #8
 8004428:	e841 3200 	strex	r2, r3, [r1]
 800442c:	2a00      	cmp	r2, #0
 800442e:	d1f3      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8004430:	2320      	movs	r3, #32
 8004432:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004434:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004436:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800443a:	e7d7      	b.n	80043ec <UART_WaitOnFlagUntilTimeout+0x6c>

0800443c <HAL_UART_Transmit>:
{
 800443c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004440:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004442:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004444:	2b20      	cmp	r3, #32
{
 8004446:	4604      	mov	r4, r0
 8004448:	460e      	mov	r6, r1
 800444a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800444c:	d14e      	bne.n	80044ec <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800444e:	2900      	cmp	r1, #0
 8004450:	d04a      	beq.n	80044e8 <HAL_UART_Transmit+0xac>
 8004452:	2a00      	cmp	r2, #0
 8004454:	d048      	beq.n	80044e8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004456:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800445a:	2b01      	cmp	r3, #1
 800445c:	d046      	beq.n	80044ec <HAL_UART_Transmit+0xb0>
 800445e:	2301      	movs	r3, #1
 8004460:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004466:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800446e:	f7fd fa69 	bl	8001944 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004472:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004474:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800447c:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800447e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004482:	d103      	bne.n	800448c <HAL_UART_Transmit+0x50>
 8004484:	6922      	ldr	r2, [r4, #16]
 8004486:	b90a      	cbnz	r2, 800448c <HAL_UART_Transmit+0x50>
 8004488:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800448a:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800448c:	2200      	movs	r2, #0
 800448e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8004492:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800449a:	b292      	uxth	r2, r2
 800449c:	b93a      	cbnz	r2, 80044ae <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	2140      	movs	r1, #64	; 0x40
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff ff6d 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80044a6:	b950      	cbnz	r0, 80044be <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80044a8:	2320      	movs	r3, #32
 80044aa:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80044ac:	e008      	b.n	80044c0 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	2200      	movs	r2, #0
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	4620      	mov	r0, r4
 80044b4:	9303      	str	r3, [sp, #12]
 80044b6:	f7ff ff63 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	b118      	cbz	r0, 80044c6 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80044be:	2003      	movs	r0, #3
}
 80044c0:	b004      	add	sp, #16
 80044c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c6:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80044c8:	b95e      	cbnz	r6, 80044e2 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80044ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d2:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80044d4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80044d8:	3a01      	subs	r2, #1
 80044da:	b292      	uxth	r2, r2
 80044dc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80044e0:	e7d7      	b.n	8004492 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e2:	f816 2b01 	ldrb.w	r2, [r6], #1
 80044e6:	e7f4      	b.n	80044d2 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7e9      	b.n	80044c0 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80044ec:	2002      	movs	r0, #2
 80044ee:	e7e7      	b.n	80044c0 <HAL_UART_Transmit+0x84>

080044f0 <UART_CheckIdleState>:
{
 80044f0:	b530      	push	{r4, r5, lr}
 80044f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	2500      	movs	r5, #0
{
 80044f6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80044fc:	f7fd fa22 	bl	8001944 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004506:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004508:	d415      	bmi.n	8004536 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	0752      	lsls	r2, r2, #29
 8004510:	d509      	bpl.n	8004526 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004512:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004516:	9200      	str	r2, [sp, #0]
 8004518:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800451c:	2200      	movs	r2, #0
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff ff2e 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8004524:	b9a0      	cbnz	r0, 8004550 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004526:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004528:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800452a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800452c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004534:	e00d      	b.n	8004552 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004536:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800453a:	9200      	str	r2, [sp, #0]
 800453c:	9003      	str	r0, [sp, #12]
 800453e:	462a      	mov	r2, r5
 8004540:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004544:	4620      	mov	r0, r4
 8004546:	f7ff ff1b 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	2800      	cmp	r0, #0
 800454e:	d0dc      	beq.n	800450a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004550:	2003      	movs	r0, #3
}
 8004552:	b005      	add	sp, #20
 8004554:	bd30      	pop	{r4, r5, pc}

08004556 <HAL_UART_Init>:
{
 8004556:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004558:	4604      	mov	r4, r0
 800455a:	b340      	cbz	r0, 80045ae <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800455c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800455e:	b91b      	cbnz	r3, 8004568 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004560:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004564:	f7fd f86e 	bl	8001644 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004568:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800456a:	2324      	movs	r3, #36	; 0x24
 800456c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800456e:	6813      	ldr	r3, [r2, #0]
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fd9c 	bl	80040b4 <UART_SetConfig>
 800457c:	2801      	cmp	r0, #1
 800457e:	d016      	beq.n	80045ae <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004582:	b113      	cbz	r3, 800458a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff fea7 	bl	80042d8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80045a2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80045aa:	f7ff bfa1 	b.w	80044f0 <UART_CheckIdleState>
}
 80045ae:	2001      	movs	r0, #1
 80045b0:	bd10      	pop	{r4, pc}
	...

080045b4 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80045b4:	6883      	ldr	r3, [r0, #8]
{
 80045b6:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80045bc:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80045c0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045c4:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 80045c8:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 80045ca:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80045cc:	d132      	bne.n	8004634 <UART_Start_Receive_IT+0x80>
 80045ce:	6903      	ldr	r3, [r0, #16]
 80045d0:	bb73      	cbnz	r3, 8004630 <UART_Start_Receive_IT+0x7c>
 80045d2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80045d6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e0:	2322      	movs	r3, #34	; 0x22
 80045e2:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	f102 0308 	add.w	r3, r2, #8
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	3208      	adds	r2, #8
 80045f4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80045f8:	6802      	ldr	r2, [r0, #0]
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d1f2      	bne.n	80045e4 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fe:	6883      	ldr	r3, [r0, #8]
 8004600:	6901      	ldr	r1, [r0, #16]
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d126      	bne.n	8004656 <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <UART_Start_Receive_IT+0xb8>)
 800460a:	4c19      	ldr	r4, [pc, #100]	; (8004670 <UART_Start_Receive_IT+0xbc>)
 800460c:	2900      	cmp	r1, #0
 800460e:	bf18      	it	ne
 8004610:	4623      	movne	r3, r4
 8004612:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004614:	2300      	movs	r3, #0
 8004616:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800461a:	b1f1      	cbz	r1, 800465a <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004620:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	e842 3100 	strex	r1, r3, [r2]
 8004628:	2900      	cmp	r1, #0
 800462a:	d1f7      	bne.n	800461c <UART_Start_Receive_IT+0x68>
}
 800462c:	2000      	movs	r0, #0
 800462e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8004630:	23ff      	movs	r3, #255	; 0xff
 8004632:	e7d0      	b.n	80045d6 <UART_Start_Receive_IT+0x22>
 8004634:	b923      	cbnz	r3, 8004640 <UART_Start_Receive_IT+0x8c>
 8004636:	6903      	ldr	r3, [r0, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f9      	beq.n	8004630 <UART_Start_Receive_IT+0x7c>
 800463c:	237f      	movs	r3, #127	; 0x7f
 800463e:	e7ca      	b.n	80045d6 <UART_Start_Receive_IT+0x22>
 8004640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004644:	d104      	bne.n	8004650 <UART_Start_Receive_IT+0x9c>
 8004646:	6903      	ldr	r3, [r0, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f7      	beq.n	800463c <UART_Start_Receive_IT+0x88>
 800464c:	233f      	movs	r3, #63	; 0x3f
 800464e:	e7c2      	b.n	80045d6 <UART_Start_Receive_IT+0x22>
 8004650:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8004654:	e7c1      	b.n	80045da <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <UART_Start_Receive_IT+0xbc>)
 8004658:	e7db      	b.n	8004612 <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800465e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	e842 3100 	strex	r1, r3, [r2]
 8004666:	2900      	cmp	r1, #0
 8004668:	d1f7      	bne.n	800465a <UART_Start_Receive_IT+0xa6>
 800466a:	e7df      	b.n	800462c <UART_Start_Receive_IT+0x78>
 800466c:	08004019 	.word	0x08004019
 8004670:	08003f79 	.word	0x08003f79

08004674 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004674:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004676:	2b20      	cmp	r3, #32
{
 8004678:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800467a:	d11f      	bne.n	80046bc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800467c:	b1d9      	cbz	r1, 80046b6 <HAL_UART_Receive_IT+0x42>
 800467e:	b1d2      	cbz	r2, 80046b6 <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8004680:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004684:	2b01      	cmp	r3, #1
 8004686:	d019      	beq.n	80046bc <HAL_UART_Receive_IT+0x48>
 8004688:	2301      	movs	r3, #1
 800468a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004690:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_UART_Receive_IT+0x4c>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d00a      	beq.n	80046b0 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	d507      	bpl.n	80046b0 <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	e844 3500 	strex	r5, r3, [r4]
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d1f7      	bne.n	80046a0 <HAL_UART_Receive_IT+0x2c>
}
 80046b0:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80046b2:	f7ff bf7f 	b.w	80045b4 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80046b6:	2001      	movs	r0, #1
}
 80046b8:	bc30      	pop	{r4, r5}
 80046ba:	4770      	bx	lr
    return HAL_BUSY;
 80046bc:	2002      	movs	r0, #2
 80046be:	e7fb      	b.n	80046b8 <HAL_UART_Receive_IT+0x44>
 80046c0:	40008000 	.word	0x40008000

080046c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046c4:	4770      	bx	lr
	...

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000018 	.word	0x20000018

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f001 fa00 	bl	8005aec <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08005f18 	.word	0x08005f18
 8004710:	08005f18 	.word	0x08005f18
 8004714:	08005f18 	.word	0x08005f18
 8004718:	08005f1c 	.word	0x08005f1c

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <iprintf>:
 800472c:	b40f      	push	{r0, r1, r2, r3}
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <iprintf+0x2c>)
 8004730:	b513      	push	{r0, r1, r4, lr}
 8004732:	681c      	ldr	r4, [r3, #0]
 8004734:	b124      	cbz	r4, 8004740 <iprintf+0x14>
 8004736:	69a3      	ldr	r3, [r4, #24]
 8004738:	b913      	cbnz	r3, 8004740 <iprintf+0x14>
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fae4 	bl	8004d08 <__sinit>
 8004740:	ab05      	add	r3, sp, #20
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	68a1      	ldr	r1, [r4, #8]
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	4620      	mov	r0, r4
 800474a:	f000 fe5b 	bl	8005404 <_vfiprintf_r>
 800474e:	b002      	add	sp, #8
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004754:	b004      	add	sp, #16
 8004756:	4770      	bx	lr
 8004758:	20000018 	.word	0x20000018

0800475c <_puts_r>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	460e      	mov	r6, r1
 8004760:	4605      	mov	r5, r0
 8004762:	b118      	cbz	r0, 800476c <_puts_r+0x10>
 8004764:	6983      	ldr	r3, [r0, #24]
 8004766:	b90b      	cbnz	r3, 800476c <_puts_r+0x10>
 8004768:	f000 face 	bl	8004d08 <__sinit>
 800476c:	69ab      	ldr	r3, [r5, #24]
 800476e:	68ac      	ldr	r4, [r5, #8]
 8004770:	b913      	cbnz	r3, 8004778 <_puts_r+0x1c>
 8004772:	4628      	mov	r0, r5
 8004774:	f000 fac8 	bl	8004d08 <__sinit>
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <_puts_r+0xd0>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d120      	bne.n	80047c0 <_puts_r+0x64>
 800477e:	686c      	ldr	r4, [r5, #4]
 8004780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	d405      	bmi.n	8004792 <_puts_r+0x36>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	0598      	lsls	r0, r3, #22
 800478a:	d402      	bmi.n	8004792 <_puts_r+0x36>
 800478c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478e:	f000 fb59 	bl	8004e44 <__retarget_lock_acquire_recursive>
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	0719      	lsls	r1, r3, #28
 8004796:	d51d      	bpl.n	80047d4 <_puts_r+0x78>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b1db      	cbz	r3, 80047d4 <_puts_r+0x78>
 800479c:	3e01      	subs	r6, #1
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047a4:	3b01      	subs	r3, #1
 80047a6:	60a3      	str	r3, [r4, #8]
 80047a8:	bb39      	cbnz	r1, 80047fa <_puts_r+0x9e>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da38      	bge.n	8004820 <_puts_r+0xc4>
 80047ae:	4622      	mov	r2, r4
 80047b0:	210a      	movs	r1, #10
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 f8ac 	bl	8004910 <__swbuf_r>
 80047b8:	3001      	adds	r0, #1
 80047ba:	d011      	beq.n	80047e0 <_puts_r+0x84>
 80047bc:	250a      	movs	r5, #10
 80047be:	e011      	b.n	80047e4 <_puts_r+0x88>
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <_puts_r+0xd4>)
 80047c2:	429c      	cmp	r4, r3
 80047c4:	d101      	bne.n	80047ca <_puts_r+0x6e>
 80047c6:	68ac      	ldr	r4, [r5, #8]
 80047c8:	e7da      	b.n	8004780 <_puts_r+0x24>
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <_puts_r+0xd8>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	bf08      	it	eq
 80047d0:	68ec      	ldreq	r4, [r5, #12]
 80047d2:	e7d5      	b.n	8004780 <_puts_r+0x24>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 f8fe 	bl	80049d8 <__swsetup_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d0dd      	beq.n	800479c <_puts_r+0x40>
 80047e0:	f04f 35ff 	mov.w	r5, #4294967295
 80047e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047e6:	07da      	lsls	r2, r3, #31
 80047e8:	d405      	bmi.n	80047f6 <_puts_r+0x9a>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	059b      	lsls	r3, r3, #22
 80047ee:	d402      	bmi.n	80047f6 <_puts_r+0x9a>
 80047f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047f2:	f000 fb28 	bl	8004e46 <__retarget_lock_release_recursive>
 80047f6:	4628      	mov	r0, r5
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da04      	bge.n	8004808 <_puts_r+0xac>
 80047fe:	69a2      	ldr	r2, [r4, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	dc06      	bgt.n	8004812 <_puts_r+0xb6>
 8004804:	290a      	cmp	r1, #10
 8004806:	d004      	beq.n	8004812 <_puts_r+0xb6>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	7019      	strb	r1, [r3, #0]
 8004810:	e7c5      	b.n	800479e <_puts_r+0x42>
 8004812:	4622      	mov	r2, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f000 f87b 	bl	8004910 <__swbuf_r>
 800481a:	3001      	adds	r0, #1
 800481c:	d1bf      	bne.n	800479e <_puts_r+0x42>
 800481e:	e7df      	b.n	80047e0 <_puts_r+0x84>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	250a      	movs	r5, #10
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	701d      	strb	r5, [r3, #0]
 800482a:	e7db      	b.n	80047e4 <_puts_r+0x88>
 800482c:	08005e9c 	.word	0x08005e9c
 8004830:	08005ebc 	.word	0x08005ebc
 8004834:	08005e7c 	.word	0x08005e7c

08004838 <puts>:
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <puts+0xc>)
 800483a:	4601      	mov	r1, r0
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f7ff bf8d 	b.w	800475c <_puts_r>
 8004842:	bf00      	nop
 8004844:	20000018 	.word	0x20000018

08004848 <siprintf>:
 8004848:	b40e      	push	{r1, r2, r3}
 800484a:	b500      	push	{lr}
 800484c:	b09c      	sub	sp, #112	; 0x70
 800484e:	ab1d      	add	r3, sp, #116	; 0x74
 8004850:	9002      	str	r0, [sp, #8]
 8004852:	9006      	str	r0, [sp, #24]
 8004854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004858:	4809      	ldr	r0, [pc, #36]	; (8004880 <siprintf+0x38>)
 800485a:	9107      	str	r1, [sp, #28]
 800485c:	9104      	str	r1, [sp, #16]
 800485e:	4909      	ldr	r1, [pc, #36]	; (8004884 <siprintf+0x3c>)
 8004860:	f853 2b04 	ldr.w	r2, [r3], #4
 8004864:	9105      	str	r1, [sp, #20]
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	a902      	add	r1, sp, #8
 800486c:	f000 fca0 	bl	80051b0 <_svfiprintf_r>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	b01c      	add	sp, #112	; 0x70
 8004878:	f85d eb04 	ldr.w	lr, [sp], #4
 800487c:	b003      	add	sp, #12
 800487e:	4770      	bx	lr
 8004880:	20000018 	.word	0x20000018
 8004884:	ffff0208 	.word	0xffff0208

08004888 <__sread>:
 8004888:	b510      	push	{r4, lr}
 800488a:	460c      	mov	r4, r1
 800488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004890:	f001 f87c 	bl	800598c <_read_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	bfab      	itete	ge
 8004898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800489a:	89a3      	ldrhlt	r3, [r4, #12]
 800489c:	181b      	addge	r3, r3, r0
 800489e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048a2:	bfac      	ite	ge
 80048a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048a6:	81a3      	strhlt	r3, [r4, #12]
 80048a8:	bd10      	pop	{r4, pc}

080048aa <__swrite>:
 80048aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ae:	461f      	mov	r7, r3
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	05db      	lsls	r3, r3, #23
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	4616      	mov	r6, r2
 80048ba:	d505      	bpl.n	80048c8 <__swrite+0x1e>
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	2302      	movs	r3, #2
 80048c2:	2200      	movs	r2, #0
 80048c4:	f000 fac0 	bl	8004e48 <_lseek_r>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	4628      	mov	r0, r5
 80048da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	f000 b869 	b.w	80049b4 <_write_r>

080048e2 <__sseek>:
 80048e2:	b510      	push	{r4, lr}
 80048e4:	460c      	mov	r4, r1
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 faad 	bl	8004e48 <_lseek_r>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	bf15      	itete	ne
 80048f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048fe:	81a3      	strheq	r3, [r4, #12]
 8004900:	bf18      	it	ne
 8004902:	81a3      	strhne	r3, [r4, #12]
 8004904:	bd10      	pop	{r4, pc}

08004906 <__sclose>:
 8004906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490a:	f000 b8d3 	b.w	8004ab4 <_close_r>
	...

08004910 <__swbuf_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	460e      	mov	r6, r1
 8004914:	4614      	mov	r4, r2
 8004916:	4605      	mov	r5, r0
 8004918:	b118      	cbz	r0, 8004922 <__swbuf_r+0x12>
 800491a:	6983      	ldr	r3, [r0, #24]
 800491c:	b90b      	cbnz	r3, 8004922 <__swbuf_r+0x12>
 800491e:	f000 f9f3 	bl	8004d08 <__sinit>
 8004922:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <__swbuf_r+0x98>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d12b      	bne.n	8004980 <__swbuf_r+0x70>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	69a3      	ldr	r3, [r4, #24]
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	071a      	lsls	r2, r3, #28
 8004932:	d52f      	bpl.n	8004994 <__swbuf_r+0x84>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b36b      	cbz	r3, 8004994 <__swbuf_r+0x84>
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	1ac0      	subs	r0, r0, r3
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	b2f6      	uxtb	r6, r6
 8004942:	4283      	cmp	r3, r0
 8004944:	4637      	mov	r7, r6
 8004946:	dc04      	bgt.n	8004952 <__swbuf_r+0x42>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f948 	bl	8004be0 <_fflush_r>
 8004950:	bb30      	cbnz	r0, 80049a0 <__swbuf_r+0x90>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	3b01      	subs	r3, #1
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	701e      	strb	r6, [r3, #0]
 8004960:	6963      	ldr	r3, [r4, #20]
 8004962:	3001      	adds	r0, #1
 8004964:	4283      	cmp	r3, r0
 8004966:	d004      	beq.n	8004972 <__swbuf_r+0x62>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	07db      	lsls	r3, r3, #31
 800496c:	d506      	bpl.n	800497c <__swbuf_r+0x6c>
 800496e:	2e0a      	cmp	r6, #10
 8004970:	d104      	bne.n	800497c <__swbuf_r+0x6c>
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f933 	bl	8004be0 <_fflush_r>
 800497a:	b988      	cbnz	r0, 80049a0 <__swbuf_r+0x90>
 800497c:	4638      	mov	r0, r7
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <__swbuf_r+0x9c>)
 8004982:	429c      	cmp	r4, r3
 8004984:	d101      	bne.n	800498a <__swbuf_r+0x7a>
 8004986:	68ac      	ldr	r4, [r5, #8]
 8004988:	e7cf      	b.n	800492a <__swbuf_r+0x1a>
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <__swbuf_r+0xa0>)
 800498c:	429c      	cmp	r4, r3
 800498e:	bf08      	it	eq
 8004990:	68ec      	ldreq	r4, [r5, #12]
 8004992:	e7ca      	b.n	800492a <__swbuf_r+0x1a>
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f81e 	bl	80049d8 <__swsetup_r>
 800499c:	2800      	cmp	r0, #0
 800499e:	d0cb      	beq.n	8004938 <__swbuf_r+0x28>
 80049a0:	f04f 37ff 	mov.w	r7, #4294967295
 80049a4:	e7ea      	b.n	800497c <__swbuf_r+0x6c>
 80049a6:	bf00      	nop
 80049a8:	08005e9c 	.word	0x08005e9c
 80049ac:	08005ebc 	.word	0x08005ebc
 80049b0:	08005e7c 	.word	0x08005e7c

080049b4 <_write_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_write_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fc ff0e 	bl	80017e4 <_write>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_write_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_write_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	20000704 	.word	0x20000704

080049d8 <__swsetup_r>:
 80049d8:	4b32      	ldr	r3, [pc, #200]	; (8004aa4 <__swsetup_r+0xcc>)
 80049da:	b570      	push	{r4, r5, r6, lr}
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	4606      	mov	r6, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	b125      	cbz	r5, 80049ee <__swsetup_r+0x16>
 80049e4:	69ab      	ldr	r3, [r5, #24]
 80049e6:	b913      	cbnz	r3, 80049ee <__swsetup_r+0x16>
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f98d 	bl	8004d08 <__sinit>
 80049ee:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <__swsetup_r+0xd0>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d10f      	bne.n	8004a14 <__swsetup_r+0x3c>
 80049f4:	686c      	ldr	r4, [r5, #4]
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049fc:	0719      	lsls	r1, r3, #28
 80049fe:	d42c      	bmi.n	8004a5a <__swsetup_r+0x82>
 8004a00:	06dd      	lsls	r5, r3, #27
 8004a02:	d411      	bmi.n	8004a28 <__swsetup_r+0x50>
 8004a04:	2309      	movs	r3, #9
 8004a06:	6033      	str	r3, [r6, #0]
 8004a08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	e03e      	b.n	8004a92 <__swsetup_r+0xba>
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <__swsetup_r+0xd4>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d101      	bne.n	8004a1e <__swsetup_r+0x46>
 8004a1a:	68ac      	ldr	r4, [r5, #8]
 8004a1c:	e7eb      	b.n	80049f6 <__swsetup_r+0x1e>
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <__swsetup_r+0xd8>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	bf08      	it	eq
 8004a24:	68ec      	ldreq	r4, [r5, #12]
 8004a26:	e7e6      	b.n	80049f6 <__swsetup_r+0x1e>
 8004a28:	0758      	lsls	r0, r3, #29
 8004a2a:	d512      	bpl.n	8004a52 <__swsetup_r+0x7a>
 8004a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a2e:	b141      	cbz	r1, 8004a42 <__swsetup_r+0x6a>
 8004a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a34:	4299      	cmp	r1, r3
 8004a36:	d002      	beq.n	8004a3e <__swsetup_r+0x66>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 fa7d 	bl	8004f38 <_free_r>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6363      	str	r3, [r4, #52]	; 0x34
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	b94b      	cbnz	r3, 8004a72 <__swsetup_r+0x9a>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d003      	beq.n	8004a72 <__swsetup_r+0x9a>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 fa23 	bl	8004eb8 <__smakebuf_r>
 8004a72:	89a0      	ldrh	r0, [r4, #12]
 8004a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a78:	f010 0301 	ands.w	r3, r0, #1
 8004a7c:	d00a      	beq.n	8004a94 <__swsetup_r+0xbc>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6963      	ldr	r3, [r4, #20]
 8004a84:	425b      	negs	r3, r3
 8004a86:	61a3      	str	r3, [r4, #24]
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	b943      	cbnz	r3, 8004a9e <__swsetup_r+0xc6>
 8004a8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a90:	d1ba      	bne.n	8004a08 <__swsetup_r+0x30>
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	0781      	lsls	r1, r0, #30
 8004a96:	bf58      	it	pl
 8004a98:	6963      	ldrpl	r3, [r4, #20]
 8004a9a:	60a3      	str	r3, [r4, #8]
 8004a9c:	e7f4      	b.n	8004a88 <__swsetup_r+0xb0>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7f7      	b.n	8004a92 <__swsetup_r+0xba>
 8004aa2:	bf00      	nop
 8004aa4:	20000018 	.word	0x20000018
 8004aa8:	08005e9c 	.word	0x08005e9c
 8004aac:	08005ebc 	.word	0x08005ebc
 8004ab0:	08005e7c 	.word	0x08005e7c

08004ab4 <_close_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d06      	ldr	r5, [pc, #24]	; (8004ad0 <_close_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fc fe9e 	bl	8001800 <_close>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_close_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_close_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000704 	.word	0x20000704

08004ad4 <__sflush_r>:
 8004ad4:	898a      	ldrh	r2, [r1, #12]
 8004ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ada:	4605      	mov	r5, r0
 8004adc:	0710      	lsls	r0, r2, #28
 8004ade:	460c      	mov	r4, r1
 8004ae0:	d458      	bmi.n	8004b94 <__sflush_r+0xc0>
 8004ae2:	684b      	ldr	r3, [r1, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dc05      	bgt.n	8004af4 <__sflush_r+0x20>
 8004ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dc02      	bgt.n	8004af4 <__sflush_r+0x20>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	d0f9      	beq.n	8004aee <__sflush_r+0x1a>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b00:	682f      	ldr	r7, [r5, #0]
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	d032      	beq.n	8004b6c <__sflush_r+0x98>
 8004b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	075a      	lsls	r2, r3, #29
 8004b0c:	d505      	bpl.n	8004b1a <__sflush_r+0x46>
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	1ac0      	subs	r0, r0, r3
 8004b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b14:	b10b      	cbz	r3, 8004b1a <__sflush_r+0x46>
 8004b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b18:	1ac0      	subs	r0, r0, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b20:	6a21      	ldr	r1, [r4, #32]
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b0      	blx	r6
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	d106      	bne.n	8004b3a <__sflush_r+0x66>
 8004b2c:	6829      	ldr	r1, [r5, #0]
 8004b2e:	291d      	cmp	r1, #29
 8004b30:	d82c      	bhi.n	8004b8c <__sflush_r+0xb8>
 8004b32:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <__sflush_r+0x108>)
 8004b34:	40ca      	lsrs	r2, r1
 8004b36:	07d6      	lsls	r6, r2, #31
 8004b38:	d528      	bpl.n	8004b8c <__sflush_r+0xb8>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	6062      	str	r2, [r4, #4]
 8004b3e:	04d9      	lsls	r1, r3, #19
 8004b40:	6922      	ldr	r2, [r4, #16]
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	d504      	bpl.n	8004b50 <__sflush_r+0x7c>
 8004b46:	1c42      	adds	r2, r0, #1
 8004b48:	d101      	bne.n	8004b4e <__sflush_r+0x7a>
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	b903      	cbnz	r3, 8004b50 <__sflush_r+0x7c>
 8004b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b52:	602f      	str	r7, [r5, #0]
 8004b54:	2900      	cmp	r1, #0
 8004b56:	d0ca      	beq.n	8004aee <__sflush_r+0x1a>
 8004b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	d002      	beq.n	8004b66 <__sflush_r+0x92>
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f9e9 	bl	8004f38 <_free_r>
 8004b66:	2000      	movs	r0, #0
 8004b68:	6360      	str	r0, [r4, #52]	; 0x34
 8004b6a:	e7c1      	b.n	8004af0 <__sflush_r+0x1c>
 8004b6c:	6a21      	ldr	r1, [r4, #32]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b0      	blx	r6
 8004b74:	1c41      	adds	r1, r0, #1
 8004b76:	d1c7      	bne.n	8004b08 <__sflush_r+0x34>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0c4      	beq.n	8004b08 <__sflush_r+0x34>
 8004b7e:	2b1d      	cmp	r3, #29
 8004b80:	d001      	beq.n	8004b86 <__sflush_r+0xb2>
 8004b82:	2b16      	cmp	r3, #22
 8004b84:	d101      	bne.n	8004b8a <__sflush_r+0xb6>
 8004b86:	602f      	str	r7, [r5, #0]
 8004b88:	e7b1      	b.n	8004aee <__sflush_r+0x1a>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	e7ad      	b.n	8004af0 <__sflush_r+0x1c>
 8004b94:	690f      	ldr	r7, [r1, #16]
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	d0a9      	beq.n	8004aee <__sflush_r+0x1a>
 8004b9a:	0793      	lsls	r3, r2, #30
 8004b9c:	680e      	ldr	r6, [r1, #0]
 8004b9e:	bf08      	it	eq
 8004ba0:	694b      	ldreq	r3, [r1, #20]
 8004ba2:	600f      	str	r7, [r1, #0]
 8004ba4:	bf18      	it	ne
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	eba6 0807 	sub.w	r8, r6, r7
 8004bac:	608b      	str	r3, [r1, #8]
 8004bae:	f1b8 0f00 	cmp.w	r8, #0
 8004bb2:	dd9c      	ble.n	8004aee <__sflush_r+0x1a>
 8004bb4:	6a21      	ldr	r1, [r4, #32]
 8004bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bb8:	4643      	mov	r3, r8
 8004bba:	463a      	mov	r2, r7
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b0      	blx	r6
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	dc06      	bgt.n	8004bd2 <__sflush_r+0xfe>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	e78e      	b.n	8004af0 <__sflush_r+0x1c>
 8004bd2:	4407      	add	r7, r0
 8004bd4:	eba8 0800 	sub.w	r8, r8, r0
 8004bd8:	e7e9      	b.n	8004bae <__sflush_r+0xda>
 8004bda:	bf00      	nop
 8004bdc:	20400001 	.word	0x20400001

08004be0 <_fflush_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	690b      	ldr	r3, [r1, #16]
 8004be4:	4605      	mov	r5, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	b913      	cbnz	r3, 8004bf0 <_fflush_r+0x10>
 8004bea:	2500      	movs	r5, #0
 8004bec:	4628      	mov	r0, r5
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	b118      	cbz	r0, 8004bfa <_fflush_r+0x1a>
 8004bf2:	6983      	ldr	r3, [r0, #24]
 8004bf4:	b90b      	cbnz	r3, 8004bfa <_fflush_r+0x1a>
 8004bf6:	f000 f887 	bl	8004d08 <__sinit>
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <_fflush_r+0x6c>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d11b      	bne.n	8004c38 <_fflush_r+0x58>
 8004c00:	686c      	ldr	r4, [r5, #4]
 8004c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ef      	beq.n	8004bea <_fflush_r+0xa>
 8004c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c0c:	07d0      	lsls	r0, r2, #31
 8004c0e:	d404      	bmi.n	8004c1a <_fflush_r+0x3a>
 8004c10:	0599      	lsls	r1, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_fflush_r+0x3a>
 8004c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c16:	f000 f915 	bl	8004e44 <__retarget_lock_acquire_recursive>
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	f7ff ff59 	bl	8004ad4 <__sflush_r>
 8004c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c24:	07da      	lsls	r2, r3, #31
 8004c26:	4605      	mov	r5, r0
 8004c28:	d4e0      	bmi.n	8004bec <_fflush_r+0xc>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	059b      	lsls	r3, r3, #22
 8004c2e:	d4dd      	bmi.n	8004bec <_fflush_r+0xc>
 8004c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c32:	f000 f908 	bl	8004e46 <__retarget_lock_release_recursive>
 8004c36:	e7d9      	b.n	8004bec <_fflush_r+0xc>
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <_fflush_r+0x70>)
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d101      	bne.n	8004c42 <_fflush_r+0x62>
 8004c3e:	68ac      	ldr	r4, [r5, #8]
 8004c40:	e7df      	b.n	8004c02 <_fflush_r+0x22>
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <_fflush_r+0x74>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	bf08      	it	eq
 8004c48:	68ec      	ldreq	r4, [r5, #12]
 8004c4a:	e7da      	b.n	8004c02 <_fflush_r+0x22>
 8004c4c:	08005e9c 	.word	0x08005e9c
 8004c50:	08005ebc 	.word	0x08005ebc
 8004c54:	08005e7c 	.word	0x08005e7c

08004c58 <std>:
 8004c58:	2300      	movs	r3, #0
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c66:	6083      	str	r3, [r0, #8]
 8004c68:	8181      	strh	r1, [r0, #12]
 8004c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c6c:	81c2      	strh	r2, [r0, #14]
 8004c6e:	6183      	str	r3, [r0, #24]
 8004c70:	4619      	mov	r1, r3
 8004c72:	2208      	movs	r2, #8
 8004c74:	305c      	adds	r0, #92	; 0x5c
 8004c76:	f7ff fd51 	bl	800471c <memset>
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <std+0x38>)
 8004c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <std+0x3c>)
 8004c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <std+0x40>)
 8004c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <std+0x44>)
 8004c88:	6224      	str	r4, [r4, #32]
 8004c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c8c:	bd10      	pop	{r4, pc}
 8004c8e:	bf00      	nop
 8004c90:	08004889 	.word	0x08004889
 8004c94:	080048ab 	.word	0x080048ab
 8004c98:	080048e3 	.word	0x080048e3
 8004c9c:	08004907 	.word	0x08004907

08004ca0 <_cleanup_r>:
 8004ca0:	4901      	ldr	r1, [pc, #4]	; (8004ca8 <_cleanup_r+0x8>)
 8004ca2:	f000 b8af 	b.w	8004e04 <_fwalk_reent>
 8004ca6:	bf00      	nop
 8004ca8:	08004be1 	.word	0x08004be1

08004cac <__sfmoreglue>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	2268      	movs	r2, #104	; 0x68
 8004cb0:	1e4d      	subs	r5, r1, #1
 8004cb2:	4355      	muls	r5, r2
 8004cb4:	460e      	mov	r6, r1
 8004cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cba:	f000 f9a9 	bl	8005010 <_malloc_r>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	b140      	cbz	r0, 8004cd4 <__sfmoreglue+0x28>
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8004cc8:	300c      	adds	r0, #12
 8004cca:	60a0      	str	r0, [r4, #8]
 8004ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cd0:	f7ff fd24 	bl	800471c <memset>
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <__sfp_lock_acquire>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__sfp_lock_acquire+0x8>)
 8004cda:	f000 b8b3 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	200006f9 	.word	0x200006f9

08004ce4 <__sfp_lock_release>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__sfp_lock_release+0x8>)
 8004ce6:	f000 b8ae 	b.w	8004e46 <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	200006f9 	.word	0x200006f9

08004cf0 <__sinit_lock_acquire>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__sinit_lock_acquire+0x8>)
 8004cf2:	f000 b8a7 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	200006fa 	.word	0x200006fa

08004cfc <__sinit_lock_release>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__sinit_lock_release+0x8>)
 8004cfe:	f000 b8a2 	b.w	8004e46 <__retarget_lock_release_recursive>
 8004d02:	bf00      	nop
 8004d04:	200006fa 	.word	0x200006fa

08004d08 <__sinit>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	f7ff fff0 	bl	8004cf0 <__sinit_lock_acquire>
 8004d10:	69a3      	ldr	r3, [r4, #24]
 8004d12:	b11b      	cbz	r3, 8004d1c <__sinit+0x14>
 8004d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d18:	f7ff bff0 	b.w	8004cfc <__sinit_lock_release>
 8004d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d20:	6523      	str	r3, [r4, #80]	; 0x50
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <__sinit+0x68>)
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <__sinit+0x6c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	bf04      	itt	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	61a3      	streq	r3, [r4, #24]
 8004d32:	4620      	mov	r0, r4
 8004d34:	f000 f820 	bl	8004d78 <__sfp>
 8004d38:	6060      	str	r0, [r4, #4]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 f81c 	bl	8004d78 <__sfp>
 8004d40:	60a0      	str	r0, [r4, #8]
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f818 	bl	8004d78 <__sfp>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	60e0      	str	r0, [r4, #12]
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	6860      	ldr	r0, [r4, #4]
 8004d50:	f7ff ff82 	bl	8004c58 <std>
 8004d54:	68a0      	ldr	r0, [r4, #8]
 8004d56:	2201      	movs	r2, #1
 8004d58:	2109      	movs	r1, #9
 8004d5a:	f7ff ff7d 	bl	8004c58 <std>
 8004d5e:	68e0      	ldr	r0, [r4, #12]
 8004d60:	2202      	movs	r2, #2
 8004d62:	2112      	movs	r1, #18
 8004d64:	f7ff ff78 	bl	8004c58 <std>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	61a3      	str	r3, [r4, #24]
 8004d6c:	e7d2      	b.n	8004d14 <__sinit+0xc>
 8004d6e:	bf00      	nop
 8004d70:	08005e78 	.word	0x08005e78
 8004d74:	08004ca1 	.word	0x08004ca1

08004d78 <__sfp>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	f7ff ffac 	bl	8004cd8 <__sfp_lock_acquire>
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <__sfp+0x84>)
 8004d82:	681e      	ldr	r6, [r3, #0]
 8004d84:	69b3      	ldr	r3, [r6, #24]
 8004d86:	b913      	cbnz	r3, 8004d8e <__sfp+0x16>
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f7ff ffbd 	bl	8004d08 <__sinit>
 8004d8e:	3648      	adds	r6, #72	; 0x48
 8004d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	d503      	bpl.n	8004da0 <__sfp+0x28>
 8004d98:	6833      	ldr	r3, [r6, #0]
 8004d9a:	b30b      	cbz	r3, 8004de0 <__sfp+0x68>
 8004d9c:	6836      	ldr	r6, [r6, #0]
 8004d9e:	e7f7      	b.n	8004d90 <__sfp+0x18>
 8004da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004da4:	b9d5      	cbnz	r5, 8004ddc <__sfp+0x64>
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <__sfp+0x88>)
 8004da8:	60e3      	str	r3, [r4, #12]
 8004daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dae:	6665      	str	r5, [r4, #100]	; 0x64
 8004db0:	f000 f847 	bl	8004e42 <__retarget_lock_init_recursive>
 8004db4:	f7ff ff96 	bl	8004ce4 <__sfp_lock_release>
 8004db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004dc0:	6025      	str	r5, [r4, #0]
 8004dc2:	61a5      	str	r5, [r4, #24]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004dcc:	f7ff fca6 	bl	800471c <memset>
 8004dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004dd8:	4620      	mov	r0, r4
 8004dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ddc:	3468      	adds	r4, #104	; 0x68
 8004dde:	e7d9      	b.n	8004d94 <__sfp+0x1c>
 8004de0:	2104      	movs	r1, #4
 8004de2:	4638      	mov	r0, r7
 8004de4:	f7ff ff62 	bl	8004cac <__sfmoreglue>
 8004de8:	4604      	mov	r4, r0
 8004dea:	6030      	str	r0, [r6, #0]
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1d5      	bne.n	8004d9c <__sfp+0x24>
 8004df0:	f7ff ff78 	bl	8004ce4 <__sfp_lock_release>
 8004df4:	230c      	movs	r3, #12
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	e7ee      	b.n	8004dd8 <__sfp+0x60>
 8004dfa:	bf00      	nop
 8004dfc:	08005e78 	.word	0x08005e78
 8004e00:	ffff0001 	.word	0xffff0001

08004e04 <_fwalk_reent>:
 8004e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	4606      	mov	r6, r0
 8004e0a:	4688      	mov	r8, r1
 8004e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e10:	2700      	movs	r7, #0
 8004e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e16:	f1b9 0901 	subs.w	r9, r9, #1
 8004e1a:	d505      	bpl.n	8004e28 <_fwalk_reent+0x24>
 8004e1c:	6824      	ldr	r4, [r4, #0]
 8004e1e:	2c00      	cmp	r4, #0
 8004e20:	d1f7      	bne.n	8004e12 <_fwalk_reent+0xe>
 8004e22:	4638      	mov	r0, r7
 8004e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e28:	89ab      	ldrh	r3, [r5, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d907      	bls.n	8004e3e <_fwalk_reent+0x3a>
 8004e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e32:	3301      	adds	r3, #1
 8004e34:	d003      	beq.n	8004e3e <_fwalk_reent+0x3a>
 8004e36:	4629      	mov	r1, r5
 8004e38:	4630      	mov	r0, r6
 8004e3a:	47c0      	blx	r8
 8004e3c:	4307      	orrs	r7, r0
 8004e3e:	3568      	adds	r5, #104	; 0x68
 8004e40:	e7e9      	b.n	8004e16 <_fwalk_reent+0x12>

08004e42 <__retarget_lock_init_recursive>:
 8004e42:	4770      	bx	lr

08004e44 <__retarget_lock_acquire_recursive>:
 8004e44:	4770      	bx	lr

08004e46 <__retarget_lock_release_recursive>:
 8004e46:	4770      	bx	lr

08004e48 <_lseek_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d07      	ldr	r5, [pc, #28]	; (8004e68 <_lseek_r+0x20>)
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	4608      	mov	r0, r1
 8004e50:	4611      	mov	r1, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	602a      	str	r2, [r5, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f7fc fcdc 	bl	8001814 <_lseek>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_lseek_r+0x1e>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_lseek_r+0x1e>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000704 	.word	0x20000704

08004e6c <__swhatbuf_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	da08      	bge.n	8004e90 <__swhatbuf_r+0x24>
 8004e7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	061a      	lsls	r2, r3, #24
 8004e88:	d410      	bmi.n	8004eac <__swhatbuf_r+0x40>
 8004e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8e:	e00e      	b.n	8004eae <__swhatbuf_r+0x42>
 8004e90:	466a      	mov	r2, sp
 8004e92:	f000 fd9d 	bl	80059d0 <_fstat_r>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	dbf1      	blt.n	8004e7e <__swhatbuf_r+0x12>
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ea4:	425a      	negs	r2, r3
 8004ea6:	415a      	adcs	r2, r3
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	e7ee      	b.n	8004e8a <__swhatbuf_r+0x1e>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	2000      	movs	r0, #0
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	b016      	add	sp, #88	; 0x58
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004eb8 <__smakebuf_r>:
 8004eb8:	898b      	ldrh	r3, [r1, #12]
 8004eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ebc:	079d      	lsls	r5, r3, #30
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	d507      	bpl.n	8004ed4 <__smakebuf_r+0x1c>
 8004ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6163      	str	r3, [r4, #20]
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	ab01      	add	r3, sp, #4
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	f7ff ffc8 	bl	8004e6c <__swhatbuf_r>
 8004edc:	9900      	ldr	r1, [sp, #0]
 8004ede:	4605      	mov	r5, r0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f895 	bl	8005010 <_malloc_r>
 8004ee6:	b948      	cbnz	r0, 8004efc <__smakebuf_r+0x44>
 8004ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d4ef      	bmi.n	8004ed0 <__smakebuf_r+0x18>
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	e7e3      	b.n	8004ec4 <__smakebuf_r+0xc>
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <__smakebuf_r+0x7c>)
 8004efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	6020      	str	r0, [r4, #0]
 8004f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	6163      	str	r3, [r4, #20]
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	6120      	str	r0, [r4, #16]
 8004f12:	b15b      	cbz	r3, 8004f2c <__smakebuf_r+0x74>
 8004f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 fd6b 	bl	80059f4 <_isatty_r>
 8004f1e:	b128      	cbz	r0, 8004f2c <__smakebuf_r+0x74>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	89a0      	ldrh	r0, [r4, #12]
 8004f2e:	4305      	orrs	r5, r0
 8004f30:	81a5      	strh	r5, [r4, #12]
 8004f32:	e7cd      	b.n	8004ed0 <__smakebuf_r+0x18>
 8004f34:	08004ca1 	.word	0x08004ca1

08004f38 <_free_r>:
 8004f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d044      	beq.n	8004fc8 <_free_r+0x90>
 8004f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f42:	9001      	str	r0, [sp, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f1a1 0404 	sub.w	r4, r1, #4
 8004f4a:	bfb8      	it	lt
 8004f4c:	18e4      	addlt	r4, r4, r3
 8004f4e:	f000 fd89 	bl	8005a64 <__malloc_lock>
 8004f52:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <_free_r+0x94>)
 8004f54:	9801      	ldr	r0, [sp, #4]
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b933      	cbnz	r3, 8004f68 <_free_r+0x30>
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6014      	str	r4, [r2, #0]
 8004f5e:	b003      	add	sp, #12
 8004f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f64:	f000 bd84 	b.w	8005a70 <__malloc_unlock>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x46>
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	1961      	adds	r1, r4, r5
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf01      	itttt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	1949      	addeq	r1, r1, r5
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	e7ed      	b.n	8004f5a <_free_r+0x22>
 8004f7e:	461a      	mov	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b10b      	cbz	r3, 8004f88 <_free_r+0x50>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x46>
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	1855      	adds	r5, r2, r1
 8004f8c:	42a5      	cmp	r5, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x70>
 8004f90:	6824      	ldr	r4, [r4, #0]
 8004f92:	4421      	add	r1, r4
 8004f94:	1854      	adds	r4, r2, r1
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	d1e0      	bne.n	8004f5e <_free_r+0x26>
 8004f9c:	681c      	ldr	r4, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	6053      	str	r3, [r2, #4]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	e7da      	b.n	8004f5e <_free_r+0x26>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x78>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6003      	str	r3, [r0, #0]
 8004fae:	e7d6      	b.n	8004f5e <_free_r+0x26>
 8004fb0:	6825      	ldr	r5, [r4, #0]
 8004fb2:	1961      	adds	r1, r4, r5
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf04      	itt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	bf04      	itt	eq
 8004fc0:	1949      	addeq	r1, r1, r5
 8004fc2:	6021      	streq	r1, [r4, #0]
 8004fc4:	6054      	str	r4, [r2, #4]
 8004fc6:	e7ca      	b.n	8004f5e <_free_r+0x26>
 8004fc8:	b003      	add	sp, #12
 8004fca:	bd30      	pop	{r4, r5, pc}
 8004fcc:	200006fc 	.word	0x200006fc

08004fd0 <sbrk_aligned>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0e      	ldr	r6, [pc, #56]	; (800500c <sbrk_aligned+0x3c>)
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	6831      	ldr	r1, [r6, #0]
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b911      	cbnz	r1, 8004fe2 <sbrk_aligned+0x12>
 8004fdc:	f000 fce8 	bl	80059b0 <_sbrk_r>
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fce3 	bl	80059b0 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d00a      	beq.n	8005004 <sbrk_aligned+0x34>
 8004fee:	1cc4      	adds	r4, r0, #3
 8004ff0:	f024 0403 	bic.w	r4, r4, #3
 8004ff4:	42a0      	cmp	r0, r4
 8004ff6:	d007      	beq.n	8005008 <sbrk_aligned+0x38>
 8004ff8:	1a21      	subs	r1, r4, r0
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 fcd8 	bl	80059b0 <_sbrk_r>
 8005000:	3001      	adds	r0, #1
 8005002:	d101      	bne.n	8005008 <sbrk_aligned+0x38>
 8005004:	f04f 34ff 	mov.w	r4, #4294967295
 8005008:	4620      	mov	r0, r4
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	20000700 	.word	0x20000700

08005010 <_malloc_r>:
 8005010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	1ccd      	adds	r5, r1, #3
 8005016:	f025 0503 	bic.w	r5, r5, #3
 800501a:	3508      	adds	r5, #8
 800501c:	2d0c      	cmp	r5, #12
 800501e:	bf38      	it	cc
 8005020:	250c      	movcc	r5, #12
 8005022:	2d00      	cmp	r5, #0
 8005024:	4607      	mov	r7, r0
 8005026:	db01      	blt.n	800502c <_malloc_r+0x1c>
 8005028:	42a9      	cmp	r1, r5
 800502a:	d905      	bls.n	8005038 <_malloc_r+0x28>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	2600      	movs	r6, #0
 8005032:	4630      	mov	r0, r6
 8005034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005038:	4e2e      	ldr	r6, [pc, #184]	; (80050f4 <_malloc_r+0xe4>)
 800503a:	f000 fd13 	bl	8005a64 <__malloc_lock>
 800503e:	6833      	ldr	r3, [r6, #0]
 8005040:	461c      	mov	r4, r3
 8005042:	bb34      	cbnz	r4, 8005092 <_malloc_r+0x82>
 8005044:	4629      	mov	r1, r5
 8005046:	4638      	mov	r0, r7
 8005048:	f7ff ffc2 	bl	8004fd0 <sbrk_aligned>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	4604      	mov	r4, r0
 8005050:	d14d      	bne.n	80050ee <_malloc_r+0xde>
 8005052:	6834      	ldr	r4, [r6, #0]
 8005054:	4626      	mov	r6, r4
 8005056:	2e00      	cmp	r6, #0
 8005058:	d140      	bne.n	80050dc <_malloc_r+0xcc>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	4631      	mov	r1, r6
 800505e:	4638      	mov	r0, r7
 8005060:	eb04 0803 	add.w	r8, r4, r3
 8005064:	f000 fca4 	bl	80059b0 <_sbrk_r>
 8005068:	4580      	cmp	r8, r0
 800506a:	d13a      	bne.n	80050e2 <_malloc_r+0xd2>
 800506c:	6821      	ldr	r1, [r4, #0]
 800506e:	3503      	adds	r5, #3
 8005070:	1a6d      	subs	r5, r5, r1
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	4629      	mov	r1, r5
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff ffa5 	bl	8004fd0 <sbrk_aligned>
 8005086:	3001      	adds	r0, #1
 8005088:	d02b      	beq.n	80050e2 <_malloc_r+0xd2>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	442b      	add	r3, r5
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	e00e      	b.n	80050b0 <_malloc_r+0xa0>
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	1b52      	subs	r2, r2, r5
 8005096:	d41e      	bmi.n	80050d6 <_malloc_r+0xc6>
 8005098:	2a0b      	cmp	r2, #11
 800509a:	d916      	bls.n	80050ca <_malloc_r+0xba>
 800509c:	1961      	adds	r1, r4, r5
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6025      	str	r5, [r4, #0]
 80050a2:	bf18      	it	ne
 80050a4:	6059      	strne	r1, [r3, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	bf08      	it	eq
 80050aa:	6031      	streq	r1, [r6, #0]
 80050ac:	5162      	str	r2, [r4, r5]
 80050ae:	604b      	str	r3, [r1, #4]
 80050b0:	4638      	mov	r0, r7
 80050b2:	f104 060b 	add.w	r6, r4, #11
 80050b6:	f000 fcdb 	bl	8005a70 <__malloc_unlock>
 80050ba:	f026 0607 	bic.w	r6, r6, #7
 80050be:	1d23      	adds	r3, r4, #4
 80050c0:	1af2      	subs	r2, r6, r3
 80050c2:	d0b6      	beq.n	8005032 <_malloc_r+0x22>
 80050c4:	1b9b      	subs	r3, r3, r6
 80050c6:	50a3      	str	r3, [r4, r2]
 80050c8:	e7b3      	b.n	8005032 <_malloc_r+0x22>
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	bf0c      	ite	eq
 80050d0:	6032      	streq	r2, [r6, #0]
 80050d2:	605a      	strne	r2, [r3, #4]
 80050d4:	e7ec      	b.n	80050b0 <_malloc_r+0xa0>
 80050d6:	4623      	mov	r3, r4
 80050d8:	6864      	ldr	r4, [r4, #4]
 80050da:	e7b2      	b.n	8005042 <_malloc_r+0x32>
 80050dc:	4634      	mov	r4, r6
 80050de:	6876      	ldr	r6, [r6, #4]
 80050e0:	e7b9      	b.n	8005056 <_malloc_r+0x46>
 80050e2:	230c      	movs	r3, #12
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4638      	mov	r0, r7
 80050e8:	f000 fcc2 	bl	8005a70 <__malloc_unlock>
 80050ec:	e7a1      	b.n	8005032 <_malloc_r+0x22>
 80050ee:	6025      	str	r5, [r4, #0]
 80050f0:	e7de      	b.n	80050b0 <_malloc_r+0xa0>
 80050f2:	bf00      	nop
 80050f4:	200006fc 	.word	0x200006fc

080050f8 <__ssputs_r>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	688e      	ldr	r6, [r1, #8]
 80050fe:	429e      	cmp	r6, r3
 8005100:	4682      	mov	sl, r0
 8005102:	460c      	mov	r4, r1
 8005104:	4690      	mov	r8, r2
 8005106:	461f      	mov	r7, r3
 8005108:	d838      	bhi.n	800517c <__ssputs_r+0x84>
 800510a:	898a      	ldrh	r2, [r1, #12]
 800510c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005110:	d032      	beq.n	8005178 <__ssputs_r+0x80>
 8005112:	6825      	ldr	r5, [r4, #0]
 8005114:	6909      	ldr	r1, [r1, #16]
 8005116:	eba5 0901 	sub.w	r9, r5, r1
 800511a:	6965      	ldr	r5, [r4, #20]
 800511c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005124:	3301      	adds	r3, #1
 8005126:	444b      	add	r3, r9
 8005128:	106d      	asrs	r5, r5, #1
 800512a:	429d      	cmp	r5, r3
 800512c:	bf38      	it	cc
 800512e:	461d      	movcc	r5, r3
 8005130:	0553      	lsls	r3, r2, #21
 8005132:	d531      	bpl.n	8005198 <__ssputs_r+0xa0>
 8005134:	4629      	mov	r1, r5
 8005136:	f7ff ff6b 	bl	8005010 <_malloc_r>
 800513a:	4606      	mov	r6, r0
 800513c:	b950      	cbnz	r0, 8005154 <__ssputs_r+0x5c>
 800513e:	230c      	movs	r3, #12
 8005140:	f8ca 3000 	str.w	r3, [sl]
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	6921      	ldr	r1, [r4, #16]
 8005156:	464a      	mov	r2, r9
 8005158:	f000 fc5c 	bl	8005a14 <memcpy>
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	81a3      	strh	r3, [r4, #12]
 8005168:	6126      	str	r6, [r4, #16]
 800516a:	6165      	str	r5, [r4, #20]
 800516c:	444e      	add	r6, r9
 800516e:	eba5 0509 	sub.w	r5, r5, r9
 8005172:	6026      	str	r6, [r4, #0]
 8005174:	60a5      	str	r5, [r4, #8]
 8005176:	463e      	mov	r6, r7
 8005178:	42be      	cmp	r6, r7
 800517a:	d900      	bls.n	800517e <__ssputs_r+0x86>
 800517c:	463e      	mov	r6, r7
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	4632      	mov	r2, r6
 8005182:	4641      	mov	r1, r8
 8005184:	f000 fc54 	bl	8005a30 <memmove>
 8005188:	68a3      	ldr	r3, [r4, #8]
 800518a:	1b9b      	subs	r3, r3, r6
 800518c:	60a3      	str	r3, [r4, #8]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	4433      	add	r3, r6
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	2000      	movs	r0, #0
 8005196:	e7db      	b.n	8005150 <__ssputs_r+0x58>
 8005198:	462a      	mov	r2, r5
 800519a:	f000 fc6f 	bl	8005a7c <_realloc_r>
 800519e:	4606      	mov	r6, r0
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d1e1      	bne.n	8005168 <__ssputs_r+0x70>
 80051a4:	6921      	ldr	r1, [r4, #16]
 80051a6:	4650      	mov	r0, sl
 80051a8:	f7ff fec6 	bl	8004f38 <_free_r>
 80051ac:	e7c7      	b.n	800513e <__ssputs_r+0x46>
	...

080051b0 <_svfiprintf_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	4698      	mov	r8, r3
 80051b6:	898b      	ldrh	r3, [r1, #12]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	b09d      	sub	sp, #116	; 0x74
 80051bc:	4607      	mov	r7, r0
 80051be:	460d      	mov	r5, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	d50e      	bpl.n	80051e2 <_svfiprintf_r+0x32>
 80051c4:	690b      	ldr	r3, [r1, #16]
 80051c6:	b963      	cbnz	r3, 80051e2 <_svfiprintf_r+0x32>
 80051c8:	2140      	movs	r1, #64	; 0x40
 80051ca:	f7ff ff21 	bl	8005010 <_malloc_r>
 80051ce:	6028      	str	r0, [r5, #0]
 80051d0:	6128      	str	r0, [r5, #16]
 80051d2:	b920      	cbnz	r0, 80051de <_svfiprintf_r+0x2e>
 80051d4:	230c      	movs	r3, #12
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e0d1      	b.n	8005382 <_svfiprintf_r+0x1d2>
 80051de:	2340      	movs	r3, #64	; 0x40
 80051e0:	616b      	str	r3, [r5, #20]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9309      	str	r3, [sp, #36]	; 0x24
 80051e6:	2320      	movs	r3, #32
 80051e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f0:	2330      	movs	r3, #48	; 0x30
 80051f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800539c <_svfiprintf_r+0x1ec>
 80051f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051fa:	f04f 0901 	mov.w	r9, #1
 80051fe:	4623      	mov	r3, r4
 8005200:	469a      	mov	sl, r3
 8005202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005206:	b10a      	cbz	r2, 800520c <_svfiprintf_r+0x5c>
 8005208:	2a25      	cmp	r2, #37	; 0x25
 800520a:	d1f9      	bne.n	8005200 <_svfiprintf_r+0x50>
 800520c:	ebba 0b04 	subs.w	fp, sl, r4
 8005210:	d00b      	beq.n	800522a <_svfiprintf_r+0x7a>
 8005212:	465b      	mov	r3, fp
 8005214:	4622      	mov	r2, r4
 8005216:	4629      	mov	r1, r5
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ff6d 	bl	80050f8 <__ssputs_r>
 800521e:	3001      	adds	r0, #1
 8005220:	f000 80aa 	beq.w	8005378 <_svfiprintf_r+0x1c8>
 8005224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005226:	445a      	add	r2, fp
 8005228:	9209      	str	r2, [sp, #36]	; 0x24
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80a2 	beq.w	8005378 <_svfiprintf_r+0x1c8>
 8005234:	2300      	movs	r3, #0
 8005236:	f04f 32ff 	mov.w	r2, #4294967295
 800523a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800523e:	f10a 0a01 	add.w	sl, sl, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	9307      	str	r3, [sp, #28]
 8005246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800524a:	931a      	str	r3, [sp, #104]	; 0x68
 800524c:	4654      	mov	r4, sl
 800524e:	2205      	movs	r2, #5
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	4851      	ldr	r0, [pc, #324]	; (800539c <_svfiprintf_r+0x1ec>)
 8005256:	f7fa ffbb 	bl	80001d0 <memchr>
 800525a:	9a04      	ldr	r2, [sp, #16]
 800525c:	b9d8      	cbnz	r0, 8005296 <_svfiprintf_r+0xe6>
 800525e:	06d0      	lsls	r0, r2, #27
 8005260:	bf44      	itt	mi
 8005262:	2320      	movmi	r3, #32
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005268:	0711      	lsls	r1, r2, #28
 800526a:	bf44      	itt	mi
 800526c:	232b      	movmi	r3, #43	; 0x2b
 800526e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005272:	f89a 3000 	ldrb.w	r3, [sl]
 8005276:	2b2a      	cmp	r3, #42	; 0x2a
 8005278:	d015      	beq.n	80052a6 <_svfiprintf_r+0xf6>
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	4654      	mov	r4, sl
 800527e:	2000      	movs	r0, #0
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4621      	mov	r1, r4
 8005286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528a:	3b30      	subs	r3, #48	; 0x30
 800528c:	2b09      	cmp	r3, #9
 800528e:	d94e      	bls.n	800532e <_svfiprintf_r+0x17e>
 8005290:	b1b0      	cbz	r0, 80052c0 <_svfiprintf_r+0x110>
 8005292:	9207      	str	r2, [sp, #28]
 8005294:	e014      	b.n	80052c0 <_svfiprintf_r+0x110>
 8005296:	eba0 0308 	sub.w	r3, r0, r8
 800529a:	fa09 f303 	lsl.w	r3, r9, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	46a2      	mov	sl, r4
 80052a4:	e7d2      	b.n	800524c <_svfiprintf_r+0x9c>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfbb      	ittet	lt
 80052b2:	425b      	neglt	r3, r3
 80052b4:	f042 0202 	orrlt.w	r2, r2, #2
 80052b8:	9307      	strge	r3, [sp, #28]
 80052ba:	9307      	strlt	r3, [sp, #28]
 80052bc:	bfb8      	it	lt
 80052be:	9204      	strlt	r2, [sp, #16]
 80052c0:	7823      	ldrb	r3, [r4, #0]
 80052c2:	2b2e      	cmp	r3, #46	; 0x2e
 80052c4:	d10c      	bne.n	80052e0 <_svfiprintf_r+0x130>
 80052c6:	7863      	ldrb	r3, [r4, #1]
 80052c8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ca:	d135      	bne.n	8005338 <_svfiprintf_r+0x188>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bfb8      	it	lt
 80052d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80052dc:	3402      	adds	r4, #2
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053ac <_svfiprintf_r+0x1fc>
 80052e4:	7821      	ldrb	r1, [r4, #0]
 80052e6:	2203      	movs	r2, #3
 80052e8:	4650      	mov	r0, sl
 80052ea:	f7fa ff71 	bl	80001d0 <memchr>
 80052ee:	b140      	cbz	r0, 8005302 <_svfiprintf_r+0x152>
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	eba0 000a 	sub.w	r0, r0, sl
 80052f6:	fa03 f000 	lsl.w	r0, r3, r0
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	4303      	orrs	r3, r0
 80052fe:	3401      	adds	r4, #1
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005306:	4826      	ldr	r0, [pc, #152]	; (80053a0 <_svfiprintf_r+0x1f0>)
 8005308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530c:	2206      	movs	r2, #6
 800530e:	f7fa ff5f 	bl	80001d0 <memchr>
 8005312:	2800      	cmp	r0, #0
 8005314:	d038      	beq.n	8005388 <_svfiprintf_r+0x1d8>
 8005316:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <_svfiprintf_r+0x1f4>)
 8005318:	bb1b      	cbnz	r3, 8005362 <_svfiprintf_r+0x1b2>
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	3307      	adds	r3, #7
 800531e:	f023 0307 	bic.w	r3, r3, #7
 8005322:	3308      	adds	r3, #8
 8005324:	9303      	str	r3, [sp, #12]
 8005326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005328:	4433      	add	r3, r6
 800532a:	9309      	str	r3, [sp, #36]	; 0x24
 800532c:	e767      	b.n	80051fe <_svfiprintf_r+0x4e>
 800532e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005332:	460c      	mov	r4, r1
 8005334:	2001      	movs	r0, #1
 8005336:	e7a5      	b.n	8005284 <_svfiprintf_r+0xd4>
 8005338:	2300      	movs	r3, #0
 800533a:	3401      	adds	r4, #1
 800533c:	9305      	str	r3, [sp, #20]
 800533e:	4619      	mov	r1, r3
 8005340:	f04f 0c0a 	mov.w	ip, #10
 8005344:	4620      	mov	r0, r4
 8005346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534a:	3a30      	subs	r2, #48	; 0x30
 800534c:	2a09      	cmp	r2, #9
 800534e:	d903      	bls.n	8005358 <_svfiprintf_r+0x1a8>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0c5      	beq.n	80052e0 <_svfiprintf_r+0x130>
 8005354:	9105      	str	r1, [sp, #20]
 8005356:	e7c3      	b.n	80052e0 <_svfiprintf_r+0x130>
 8005358:	fb0c 2101 	mla	r1, ip, r1, r2
 800535c:	4604      	mov	r4, r0
 800535e:	2301      	movs	r3, #1
 8005360:	e7f0      	b.n	8005344 <_svfiprintf_r+0x194>
 8005362:	ab03      	add	r3, sp, #12
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	462a      	mov	r2, r5
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <_svfiprintf_r+0x1f8>)
 800536a:	a904      	add	r1, sp, #16
 800536c:	4638      	mov	r0, r7
 800536e:	f3af 8000 	nop.w
 8005372:	1c42      	adds	r2, r0, #1
 8005374:	4606      	mov	r6, r0
 8005376:	d1d6      	bne.n	8005326 <_svfiprintf_r+0x176>
 8005378:	89ab      	ldrh	r3, [r5, #12]
 800537a:	065b      	lsls	r3, r3, #25
 800537c:	f53f af2c 	bmi.w	80051d8 <_svfiprintf_r+0x28>
 8005380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005382:	b01d      	add	sp, #116	; 0x74
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	ab03      	add	r3, sp, #12
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	462a      	mov	r2, r5
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <_svfiprintf_r+0x1f8>)
 8005390:	a904      	add	r1, sp, #16
 8005392:	4638      	mov	r0, r7
 8005394:	f000 f9d4 	bl	8005740 <_printf_i>
 8005398:	e7eb      	b.n	8005372 <_svfiprintf_r+0x1c2>
 800539a:	bf00      	nop
 800539c:	08005edc 	.word	0x08005edc
 80053a0:	08005ee6 	.word	0x08005ee6
 80053a4:	00000000 	.word	0x00000000
 80053a8:	080050f9 	.word	0x080050f9
 80053ac:	08005ee2 	.word	0x08005ee2

080053b0 <__sfputc_r>:
 80053b0:	6893      	ldr	r3, [r2, #8]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	b410      	push	{r4}
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	da08      	bge.n	80053ce <__sfputc_r+0x1e>
 80053bc:	6994      	ldr	r4, [r2, #24]
 80053be:	42a3      	cmp	r3, r4
 80053c0:	db01      	blt.n	80053c6 <__sfputc_r+0x16>
 80053c2:	290a      	cmp	r1, #10
 80053c4:	d103      	bne.n	80053ce <__sfputc_r+0x1e>
 80053c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ca:	f7ff baa1 	b.w	8004910 <__swbuf_r>
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	1c58      	adds	r0, r3, #1
 80053d2:	6010      	str	r0, [r2, #0]
 80053d4:	7019      	strb	r1, [r3, #0]
 80053d6:	4608      	mov	r0, r1
 80053d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053dc:	4770      	bx	lr

080053de <__sfputs_r>:
 80053de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e0:	4606      	mov	r6, r0
 80053e2:	460f      	mov	r7, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	18d5      	adds	r5, r2, r3
 80053e8:	42ac      	cmp	r4, r5
 80053ea:	d101      	bne.n	80053f0 <__sfputs_r+0x12>
 80053ec:	2000      	movs	r0, #0
 80053ee:	e007      	b.n	8005400 <__sfputs_r+0x22>
 80053f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f4:	463a      	mov	r2, r7
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff ffda 	bl	80053b0 <__sfputc_r>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d1f3      	bne.n	80053e8 <__sfputs_r+0xa>
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005404 <_vfiprintf_r>:
 8005404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005408:	460d      	mov	r5, r1
 800540a:	b09d      	sub	sp, #116	; 0x74
 800540c:	4614      	mov	r4, r2
 800540e:	4698      	mov	r8, r3
 8005410:	4606      	mov	r6, r0
 8005412:	b118      	cbz	r0, 800541c <_vfiprintf_r+0x18>
 8005414:	6983      	ldr	r3, [r0, #24]
 8005416:	b90b      	cbnz	r3, 800541c <_vfiprintf_r+0x18>
 8005418:	f7ff fc76 	bl	8004d08 <__sinit>
 800541c:	4b89      	ldr	r3, [pc, #548]	; (8005644 <_vfiprintf_r+0x240>)
 800541e:	429d      	cmp	r5, r3
 8005420:	d11b      	bne.n	800545a <_vfiprintf_r+0x56>
 8005422:	6875      	ldr	r5, [r6, #4]
 8005424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005426:	07d9      	lsls	r1, r3, #31
 8005428:	d405      	bmi.n	8005436 <_vfiprintf_r+0x32>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	059a      	lsls	r2, r3, #22
 800542e:	d402      	bmi.n	8005436 <_vfiprintf_r+0x32>
 8005430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005432:	f7ff fd07 	bl	8004e44 <__retarget_lock_acquire_recursive>
 8005436:	89ab      	ldrh	r3, [r5, #12]
 8005438:	071b      	lsls	r3, r3, #28
 800543a:	d501      	bpl.n	8005440 <_vfiprintf_r+0x3c>
 800543c:	692b      	ldr	r3, [r5, #16]
 800543e:	b9eb      	cbnz	r3, 800547c <_vfiprintf_r+0x78>
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff fac8 	bl	80049d8 <__swsetup_r>
 8005448:	b1c0      	cbz	r0, 800547c <_vfiprintf_r+0x78>
 800544a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800544c:	07dc      	lsls	r4, r3, #31
 800544e:	d50e      	bpl.n	800546e <_vfiprintf_r+0x6a>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	b01d      	add	sp, #116	; 0x74
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545a:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <_vfiprintf_r+0x244>)
 800545c:	429d      	cmp	r5, r3
 800545e:	d101      	bne.n	8005464 <_vfiprintf_r+0x60>
 8005460:	68b5      	ldr	r5, [r6, #8]
 8005462:	e7df      	b.n	8005424 <_vfiprintf_r+0x20>
 8005464:	4b79      	ldr	r3, [pc, #484]	; (800564c <_vfiprintf_r+0x248>)
 8005466:	429d      	cmp	r5, r3
 8005468:	bf08      	it	eq
 800546a:	68f5      	ldreq	r5, [r6, #12]
 800546c:	e7da      	b.n	8005424 <_vfiprintf_r+0x20>
 800546e:	89ab      	ldrh	r3, [r5, #12]
 8005470:	0598      	lsls	r0, r3, #22
 8005472:	d4ed      	bmi.n	8005450 <_vfiprintf_r+0x4c>
 8005474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005476:	f7ff fce6 	bl	8004e46 <__retarget_lock_release_recursive>
 800547a:	e7e9      	b.n	8005450 <_vfiprintf_r+0x4c>
 800547c:	2300      	movs	r3, #0
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	2320      	movs	r3, #32
 8005482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005486:	f8cd 800c 	str.w	r8, [sp, #12]
 800548a:	2330      	movs	r3, #48	; 0x30
 800548c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005650 <_vfiprintf_r+0x24c>
 8005490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005494:	f04f 0901 	mov.w	r9, #1
 8005498:	4623      	mov	r3, r4
 800549a:	469a      	mov	sl, r3
 800549c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a0:	b10a      	cbz	r2, 80054a6 <_vfiprintf_r+0xa2>
 80054a2:	2a25      	cmp	r2, #37	; 0x25
 80054a4:	d1f9      	bne.n	800549a <_vfiprintf_r+0x96>
 80054a6:	ebba 0b04 	subs.w	fp, sl, r4
 80054aa:	d00b      	beq.n	80054c4 <_vfiprintf_r+0xc0>
 80054ac:	465b      	mov	r3, fp
 80054ae:	4622      	mov	r2, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7ff ff93 	bl	80053de <__sfputs_r>
 80054b8:	3001      	adds	r0, #1
 80054ba:	f000 80aa 	beq.w	8005612 <_vfiprintf_r+0x20e>
 80054be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c0:	445a      	add	r2, fp
 80054c2:	9209      	str	r2, [sp, #36]	; 0x24
 80054c4:	f89a 3000 	ldrb.w	r3, [sl]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80a2 	beq.w	8005612 <_vfiprintf_r+0x20e>
 80054ce:	2300      	movs	r3, #0
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054d8:	f10a 0a01 	add.w	sl, sl, #1
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	9307      	str	r3, [sp, #28]
 80054e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054e4:	931a      	str	r3, [sp, #104]	; 0x68
 80054e6:	4654      	mov	r4, sl
 80054e8:	2205      	movs	r2, #5
 80054ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ee:	4858      	ldr	r0, [pc, #352]	; (8005650 <_vfiprintf_r+0x24c>)
 80054f0:	f7fa fe6e 	bl	80001d0 <memchr>
 80054f4:	9a04      	ldr	r2, [sp, #16]
 80054f6:	b9d8      	cbnz	r0, 8005530 <_vfiprintf_r+0x12c>
 80054f8:	06d1      	lsls	r1, r2, #27
 80054fa:	bf44      	itt	mi
 80054fc:	2320      	movmi	r3, #32
 80054fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005502:	0713      	lsls	r3, r2, #28
 8005504:	bf44      	itt	mi
 8005506:	232b      	movmi	r3, #43	; 0x2b
 8005508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550c:	f89a 3000 	ldrb.w	r3, [sl]
 8005510:	2b2a      	cmp	r3, #42	; 0x2a
 8005512:	d015      	beq.n	8005540 <_vfiprintf_r+0x13c>
 8005514:	9a07      	ldr	r2, [sp, #28]
 8005516:	4654      	mov	r4, sl
 8005518:	2000      	movs	r0, #0
 800551a:	f04f 0c0a 	mov.w	ip, #10
 800551e:	4621      	mov	r1, r4
 8005520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005524:	3b30      	subs	r3, #48	; 0x30
 8005526:	2b09      	cmp	r3, #9
 8005528:	d94e      	bls.n	80055c8 <_vfiprintf_r+0x1c4>
 800552a:	b1b0      	cbz	r0, 800555a <_vfiprintf_r+0x156>
 800552c:	9207      	str	r2, [sp, #28]
 800552e:	e014      	b.n	800555a <_vfiprintf_r+0x156>
 8005530:	eba0 0308 	sub.w	r3, r0, r8
 8005534:	fa09 f303 	lsl.w	r3, r9, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	9304      	str	r3, [sp, #16]
 800553c:	46a2      	mov	sl, r4
 800553e:	e7d2      	b.n	80054e6 <_vfiprintf_r+0xe2>
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	1d19      	adds	r1, r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	9103      	str	r1, [sp, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	bfbb      	ittet	lt
 800554c:	425b      	neglt	r3, r3
 800554e:	f042 0202 	orrlt.w	r2, r2, #2
 8005552:	9307      	strge	r3, [sp, #28]
 8005554:	9307      	strlt	r3, [sp, #28]
 8005556:	bfb8      	it	lt
 8005558:	9204      	strlt	r2, [sp, #16]
 800555a:	7823      	ldrb	r3, [r4, #0]
 800555c:	2b2e      	cmp	r3, #46	; 0x2e
 800555e:	d10c      	bne.n	800557a <_vfiprintf_r+0x176>
 8005560:	7863      	ldrb	r3, [r4, #1]
 8005562:	2b2a      	cmp	r3, #42	; 0x2a
 8005564:	d135      	bne.n	80055d2 <_vfiprintf_r+0x1ce>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	1d1a      	adds	r2, r3, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	9203      	str	r2, [sp, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	bfb8      	it	lt
 8005572:	f04f 33ff 	movlt.w	r3, #4294967295
 8005576:	3402      	adds	r4, #2
 8005578:	9305      	str	r3, [sp, #20]
 800557a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005660 <_vfiprintf_r+0x25c>
 800557e:	7821      	ldrb	r1, [r4, #0]
 8005580:	2203      	movs	r2, #3
 8005582:	4650      	mov	r0, sl
 8005584:	f7fa fe24 	bl	80001d0 <memchr>
 8005588:	b140      	cbz	r0, 800559c <_vfiprintf_r+0x198>
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	eba0 000a 	sub.w	r0, r0, sl
 8005590:	fa03 f000 	lsl.w	r0, r3, r0
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	4303      	orrs	r3, r0
 8005598:	3401      	adds	r4, #1
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a0:	482c      	ldr	r0, [pc, #176]	; (8005654 <_vfiprintf_r+0x250>)
 80055a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055a6:	2206      	movs	r2, #6
 80055a8:	f7fa fe12 	bl	80001d0 <memchr>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d03f      	beq.n	8005630 <_vfiprintf_r+0x22c>
 80055b0:	4b29      	ldr	r3, [pc, #164]	; (8005658 <_vfiprintf_r+0x254>)
 80055b2:	bb1b      	cbnz	r3, 80055fc <_vfiprintf_r+0x1f8>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	3307      	adds	r3, #7
 80055b8:	f023 0307 	bic.w	r3, r3, #7
 80055bc:	3308      	adds	r3, #8
 80055be:	9303      	str	r3, [sp, #12]
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	443b      	add	r3, r7
 80055c4:	9309      	str	r3, [sp, #36]	; 0x24
 80055c6:	e767      	b.n	8005498 <_vfiprintf_r+0x94>
 80055c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055cc:	460c      	mov	r4, r1
 80055ce:	2001      	movs	r0, #1
 80055d0:	e7a5      	b.n	800551e <_vfiprintf_r+0x11a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	3401      	adds	r4, #1
 80055d6:	9305      	str	r3, [sp, #20]
 80055d8:	4619      	mov	r1, r3
 80055da:	f04f 0c0a 	mov.w	ip, #10
 80055de:	4620      	mov	r0, r4
 80055e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e4:	3a30      	subs	r2, #48	; 0x30
 80055e6:	2a09      	cmp	r2, #9
 80055e8:	d903      	bls.n	80055f2 <_vfiprintf_r+0x1ee>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0c5      	beq.n	800557a <_vfiprintf_r+0x176>
 80055ee:	9105      	str	r1, [sp, #20]
 80055f0:	e7c3      	b.n	800557a <_vfiprintf_r+0x176>
 80055f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055f6:	4604      	mov	r4, r0
 80055f8:	2301      	movs	r3, #1
 80055fa:	e7f0      	b.n	80055de <_vfiprintf_r+0x1da>
 80055fc:	ab03      	add	r3, sp, #12
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	462a      	mov	r2, r5
 8005602:	4b16      	ldr	r3, [pc, #88]	; (800565c <_vfiprintf_r+0x258>)
 8005604:	a904      	add	r1, sp, #16
 8005606:	4630      	mov	r0, r6
 8005608:	f3af 8000 	nop.w
 800560c:	4607      	mov	r7, r0
 800560e:	1c78      	adds	r0, r7, #1
 8005610:	d1d6      	bne.n	80055c0 <_vfiprintf_r+0x1bc>
 8005612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005614:	07d9      	lsls	r1, r3, #31
 8005616:	d405      	bmi.n	8005624 <_vfiprintf_r+0x220>
 8005618:	89ab      	ldrh	r3, [r5, #12]
 800561a:	059a      	lsls	r2, r3, #22
 800561c:	d402      	bmi.n	8005624 <_vfiprintf_r+0x220>
 800561e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005620:	f7ff fc11 	bl	8004e46 <__retarget_lock_release_recursive>
 8005624:	89ab      	ldrh	r3, [r5, #12]
 8005626:	065b      	lsls	r3, r3, #25
 8005628:	f53f af12 	bmi.w	8005450 <_vfiprintf_r+0x4c>
 800562c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800562e:	e711      	b.n	8005454 <_vfiprintf_r+0x50>
 8005630:	ab03      	add	r3, sp, #12
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	462a      	mov	r2, r5
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <_vfiprintf_r+0x258>)
 8005638:	a904      	add	r1, sp, #16
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f880 	bl	8005740 <_printf_i>
 8005640:	e7e4      	b.n	800560c <_vfiprintf_r+0x208>
 8005642:	bf00      	nop
 8005644:	08005e9c 	.word	0x08005e9c
 8005648:	08005ebc 	.word	0x08005ebc
 800564c:	08005e7c 	.word	0x08005e7c
 8005650:	08005edc 	.word	0x08005edc
 8005654:	08005ee6 	.word	0x08005ee6
 8005658:	00000000 	.word	0x00000000
 800565c:	080053df 	.word	0x080053df
 8005660:	08005ee2 	.word	0x08005ee2

08005664 <_printf_common>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	4616      	mov	r6, r2
 800566a:	4699      	mov	r9, r3
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	690b      	ldr	r3, [r1, #16]
 8005670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005674:	4293      	cmp	r3, r2
 8005676:	bfb8      	it	lt
 8005678:	4613      	movlt	r3, r2
 800567a:	6033      	str	r3, [r6, #0]
 800567c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005680:	4607      	mov	r7, r0
 8005682:	460c      	mov	r4, r1
 8005684:	b10a      	cbz	r2, 800568a <_printf_common+0x26>
 8005686:	3301      	adds	r3, #1
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	0699      	lsls	r1, r3, #26
 800568e:	bf42      	ittt	mi
 8005690:	6833      	ldrmi	r3, [r6, #0]
 8005692:	3302      	addmi	r3, #2
 8005694:	6033      	strmi	r3, [r6, #0]
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	f015 0506 	ands.w	r5, r5, #6
 800569c:	d106      	bne.n	80056ac <_printf_common+0x48>
 800569e:	f104 0a19 	add.w	sl, r4, #25
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	6832      	ldr	r2, [r6, #0]
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dc26      	bgt.n	80056fa <_printf_common+0x96>
 80056ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b0:	1e13      	subs	r3, r2, #0
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	bf18      	it	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	0692      	lsls	r2, r2, #26
 80056ba:	d42b      	bmi.n	8005714 <_printf_common+0xb0>
 80056bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c0:	4649      	mov	r1, r9
 80056c2:	4638      	mov	r0, r7
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d01e      	beq.n	8005708 <_printf_common+0xa4>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	68e5      	ldr	r5, [r4, #12]
 80056ce:	6832      	ldr	r2, [r6, #0]
 80056d0:	f003 0306 	and.w	r3, r3, #6
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	bf08      	it	eq
 80056d8:	1aad      	subeq	r5, r5, r2
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	6922      	ldr	r2, [r4, #16]
 80056de:	bf0c      	ite	eq
 80056e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e4:	2500      	movne	r5, #0
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bfc4      	itt	gt
 80056ea:	1a9b      	subgt	r3, r3, r2
 80056ec:	18ed      	addgt	r5, r5, r3
 80056ee:	2600      	movs	r6, #0
 80056f0:	341a      	adds	r4, #26
 80056f2:	42b5      	cmp	r5, r6
 80056f4:	d11a      	bne.n	800572c <_printf_common+0xc8>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e008      	b.n	800570c <_printf_common+0xa8>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4652      	mov	r2, sl
 80056fe:	4649      	mov	r1, r9
 8005700:	4638      	mov	r0, r7
 8005702:	47c0      	blx	r8
 8005704:	3001      	adds	r0, #1
 8005706:	d103      	bne.n	8005710 <_printf_common+0xac>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	3501      	adds	r5, #1
 8005712:	e7c6      	b.n	80056a2 <_printf_common+0x3e>
 8005714:	18e1      	adds	r1, r4, r3
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	2030      	movs	r0, #48	; 0x30
 800571a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571e:	4422      	add	r2, r4
 8005720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005728:	3302      	adds	r3, #2
 800572a:	e7c7      	b.n	80056bc <_printf_common+0x58>
 800572c:	2301      	movs	r3, #1
 800572e:	4622      	mov	r2, r4
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d0e6      	beq.n	8005708 <_printf_common+0xa4>
 800573a:	3601      	adds	r6, #1
 800573c:	e7d9      	b.n	80056f2 <_printf_common+0x8e>
	...

08005740 <_printf_i>:
 8005740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	7e0f      	ldrb	r7, [r1, #24]
 8005746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005748:	2f78      	cmp	r7, #120	; 0x78
 800574a:	4691      	mov	r9, r2
 800574c:	4680      	mov	r8, r0
 800574e:	460c      	mov	r4, r1
 8005750:	469a      	mov	sl, r3
 8005752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005756:	d807      	bhi.n	8005768 <_printf_i+0x28>
 8005758:	2f62      	cmp	r7, #98	; 0x62
 800575a:	d80a      	bhi.n	8005772 <_printf_i+0x32>
 800575c:	2f00      	cmp	r7, #0
 800575e:	f000 80d8 	beq.w	8005912 <_printf_i+0x1d2>
 8005762:	2f58      	cmp	r7, #88	; 0x58
 8005764:	f000 80a3 	beq.w	80058ae <_printf_i+0x16e>
 8005768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800576c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005770:	e03a      	b.n	80057e8 <_printf_i+0xa8>
 8005772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005776:	2b15      	cmp	r3, #21
 8005778:	d8f6      	bhi.n	8005768 <_printf_i+0x28>
 800577a:	a101      	add	r1, pc, #4	; (adr r1, 8005780 <_printf_i+0x40>)
 800577c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057ed 	.word	0x080057ed
 8005788:	08005769 	.word	0x08005769
 800578c:	08005769 	.word	0x08005769
 8005790:	08005769 	.word	0x08005769
 8005794:	08005769 	.word	0x08005769
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005769 	.word	0x08005769
 80057a0:	08005769 	.word	0x08005769
 80057a4:	08005769 	.word	0x08005769
 80057a8:	08005769 	.word	0x08005769
 80057ac:	080058f9 	.word	0x080058f9
 80057b0:	0800581d 	.word	0x0800581d
 80057b4:	080058db 	.word	0x080058db
 80057b8:	08005769 	.word	0x08005769
 80057bc:	08005769 	.word	0x08005769
 80057c0:	0800591b 	.word	0x0800591b
 80057c4:	08005769 	.word	0x08005769
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	08005769 	.word	0x08005769
 80057d0:	08005769 	.word	0x08005769
 80057d4:	080058e3 	.word	0x080058e3
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	1d1a      	adds	r2, r3, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	602a      	str	r2, [r5, #0]
 80057e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0a3      	b.n	8005934 <_printf_i+0x1f4>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	6829      	ldr	r1, [r5, #0]
 80057f0:	0606      	lsls	r6, r0, #24
 80057f2:	f101 0304 	add.w	r3, r1, #4
 80057f6:	d50a      	bpl.n	800580e <_printf_i+0xce>
 80057f8:	680e      	ldr	r6, [r1, #0]
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	2e00      	cmp	r6, #0
 80057fe:	da03      	bge.n	8005808 <_printf_i+0xc8>
 8005800:	232d      	movs	r3, #45	; 0x2d
 8005802:	4276      	negs	r6, r6
 8005804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005808:	485e      	ldr	r0, [pc, #376]	; (8005984 <_printf_i+0x244>)
 800580a:	230a      	movs	r3, #10
 800580c:	e019      	b.n	8005842 <_printf_i+0x102>
 800580e:	680e      	ldr	r6, [r1, #0]
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005816:	bf18      	it	ne
 8005818:	b236      	sxthne	r6, r6
 800581a:	e7ef      	b.n	80057fc <_printf_i+0xbc>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	6820      	ldr	r0, [r4, #0]
 8005820:	1d19      	adds	r1, r3, #4
 8005822:	6029      	str	r1, [r5, #0]
 8005824:	0601      	lsls	r1, r0, #24
 8005826:	d501      	bpl.n	800582c <_printf_i+0xec>
 8005828:	681e      	ldr	r6, [r3, #0]
 800582a:	e002      	b.n	8005832 <_printf_i+0xf2>
 800582c:	0646      	lsls	r6, r0, #25
 800582e:	d5fb      	bpl.n	8005828 <_printf_i+0xe8>
 8005830:	881e      	ldrh	r6, [r3, #0]
 8005832:	4854      	ldr	r0, [pc, #336]	; (8005984 <_printf_i+0x244>)
 8005834:	2f6f      	cmp	r7, #111	; 0x6f
 8005836:	bf0c      	ite	eq
 8005838:	2308      	moveq	r3, #8
 800583a:	230a      	movne	r3, #10
 800583c:	2100      	movs	r1, #0
 800583e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005842:	6865      	ldr	r5, [r4, #4]
 8005844:	60a5      	str	r5, [r4, #8]
 8005846:	2d00      	cmp	r5, #0
 8005848:	bfa2      	ittt	ge
 800584a:	6821      	ldrge	r1, [r4, #0]
 800584c:	f021 0104 	bicge.w	r1, r1, #4
 8005850:	6021      	strge	r1, [r4, #0]
 8005852:	b90e      	cbnz	r6, 8005858 <_printf_i+0x118>
 8005854:	2d00      	cmp	r5, #0
 8005856:	d04d      	beq.n	80058f4 <_printf_i+0x1b4>
 8005858:	4615      	mov	r5, r2
 800585a:	fbb6 f1f3 	udiv	r1, r6, r3
 800585e:	fb03 6711 	mls	r7, r3, r1, r6
 8005862:	5dc7      	ldrb	r7, [r0, r7]
 8005864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005868:	4637      	mov	r7, r6
 800586a:	42bb      	cmp	r3, r7
 800586c:	460e      	mov	r6, r1
 800586e:	d9f4      	bls.n	800585a <_printf_i+0x11a>
 8005870:	2b08      	cmp	r3, #8
 8005872:	d10b      	bne.n	800588c <_printf_i+0x14c>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	07de      	lsls	r6, r3, #31
 8005878:	d508      	bpl.n	800588c <_printf_i+0x14c>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	6861      	ldr	r1, [r4, #4]
 800587e:	4299      	cmp	r1, r3
 8005880:	bfde      	ittt	le
 8005882:	2330      	movle	r3, #48	; 0x30
 8005884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800588c:	1b52      	subs	r2, r2, r5
 800588e:	6122      	str	r2, [r4, #16]
 8005890:	f8cd a000 	str.w	sl, [sp]
 8005894:	464b      	mov	r3, r9
 8005896:	aa03      	add	r2, sp, #12
 8005898:	4621      	mov	r1, r4
 800589a:	4640      	mov	r0, r8
 800589c:	f7ff fee2 	bl	8005664 <_printf_common>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d14c      	bne.n	800593e <_printf_i+0x1fe>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	b004      	add	sp, #16
 80058aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ae:	4835      	ldr	r0, [pc, #212]	; (8005984 <_printf_i+0x244>)
 80058b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058b4:	6829      	ldr	r1, [r5, #0]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058bc:	6029      	str	r1, [r5, #0]
 80058be:	061d      	lsls	r5, r3, #24
 80058c0:	d514      	bpl.n	80058ec <_printf_i+0x1ac>
 80058c2:	07df      	lsls	r7, r3, #31
 80058c4:	bf44      	itt	mi
 80058c6:	f043 0320 	orrmi.w	r3, r3, #32
 80058ca:	6023      	strmi	r3, [r4, #0]
 80058cc:	b91e      	cbnz	r6, 80058d6 <_printf_i+0x196>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	f023 0320 	bic.w	r3, r3, #32
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	2310      	movs	r3, #16
 80058d8:	e7b0      	b.n	800583c <_printf_i+0xfc>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f043 0320 	orr.w	r3, r3, #32
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	2378      	movs	r3, #120	; 0x78
 80058e4:	4828      	ldr	r0, [pc, #160]	; (8005988 <_printf_i+0x248>)
 80058e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ea:	e7e3      	b.n	80058b4 <_printf_i+0x174>
 80058ec:	0659      	lsls	r1, r3, #25
 80058ee:	bf48      	it	mi
 80058f0:	b2b6      	uxthmi	r6, r6
 80058f2:	e7e6      	b.n	80058c2 <_printf_i+0x182>
 80058f4:	4615      	mov	r5, r2
 80058f6:	e7bb      	b.n	8005870 <_printf_i+0x130>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	6826      	ldr	r6, [r4, #0]
 80058fc:	6961      	ldr	r1, [r4, #20]
 80058fe:	1d18      	adds	r0, r3, #4
 8005900:	6028      	str	r0, [r5, #0]
 8005902:	0635      	lsls	r5, r6, #24
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	d501      	bpl.n	800590c <_printf_i+0x1cc>
 8005908:	6019      	str	r1, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0x1d2>
 800590c:	0670      	lsls	r0, r6, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0x1c8>
 8005910:	8019      	strh	r1, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	4615      	mov	r5, r2
 8005918:	e7ba      	b.n	8005890 <_printf_i+0x150>
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	1d1a      	adds	r2, r3, #4
 800591e:	602a      	str	r2, [r5, #0]
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	6862      	ldr	r2, [r4, #4]
 8005924:	2100      	movs	r1, #0
 8005926:	4628      	mov	r0, r5
 8005928:	f7fa fc52 	bl	80001d0 <memchr>
 800592c:	b108      	cbz	r0, 8005932 <_printf_i+0x1f2>
 800592e:	1b40      	subs	r0, r0, r5
 8005930:	6060      	str	r0, [r4, #4]
 8005932:	6863      	ldr	r3, [r4, #4]
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	2300      	movs	r3, #0
 8005938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800593c:	e7a8      	b.n	8005890 <_printf_i+0x150>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	462a      	mov	r2, r5
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d0ab      	beq.n	80058a4 <_printf_i+0x164>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	d413      	bmi.n	800597a <_printf_i+0x23a>
 8005952:	68e0      	ldr	r0, [r4, #12]
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	4298      	cmp	r0, r3
 8005958:	bfb8      	it	lt
 800595a:	4618      	movlt	r0, r3
 800595c:	e7a4      	b.n	80058a8 <_printf_i+0x168>
 800595e:	2301      	movs	r3, #1
 8005960:	4632      	mov	r2, r6
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d09b      	beq.n	80058a4 <_printf_i+0x164>
 800596c:	3501      	adds	r5, #1
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	9903      	ldr	r1, [sp, #12]
 8005972:	1a5b      	subs	r3, r3, r1
 8005974:	42ab      	cmp	r3, r5
 8005976:	dcf2      	bgt.n	800595e <_printf_i+0x21e>
 8005978:	e7eb      	b.n	8005952 <_printf_i+0x212>
 800597a:	2500      	movs	r5, #0
 800597c:	f104 0619 	add.w	r6, r4, #25
 8005980:	e7f5      	b.n	800596e <_printf_i+0x22e>
 8005982:	bf00      	nop
 8005984:	08005eed 	.word	0x08005eed
 8005988:	08005efe 	.word	0x08005efe

0800598c <_read_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_read_r+0x20>)
 8005990:	4604      	mov	r4, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fb ff14 	bl	80017c8 <_read>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_read_r+0x1e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_read_r+0x1e>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000704 	.word	0x20000704

080059b0 <_sbrk_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d06      	ldr	r5, [pc, #24]	; (80059cc <_sbrk_r+0x1c>)
 80059b4:	2300      	movs	r3, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	4608      	mov	r0, r1
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f7fb ff2c 	bl	8001818 <_sbrk>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_sbrk_r+0x1a>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_sbrk_r+0x1a>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20000704 	.word	0x20000704

080059d0 <_fstat_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d07      	ldr	r5, [pc, #28]	; (80059f0 <_fstat_r+0x20>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	f7fb ff12 	bl	8001806 <_fstat>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d102      	bne.n	80059ec <_fstat_r+0x1c>
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	b103      	cbz	r3, 80059ec <_fstat_r+0x1c>
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	bd38      	pop	{r3, r4, r5, pc}
 80059ee:	bf00      	nop
 80059f0:	20000704 	.word	0x20000704

080059f4 <_isatty_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	; (8005a10 <_isatty_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fb ff06 	bl	8001810 <_isatty>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_isatty_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_isatty_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000704 	.word	0x20000704

08005a14 <memcpy>:
 8005a14:	440a      	add	r2, r1
 8005a16:	4291      	cmp	r1, r2
 8005a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1c:	d100      	bne.n	8005a20 <memcpy+0xc>
 8005a1e:	4770      	bx	lr
 8005a20:	b510      	push	{r4, lr}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	d1f9      	bne.n	8005a22 <memcpy+0xe>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <memmove>:
 8005a30:	4288      	cmp	r0, r1
 8005a32:	b510      	push	{r4, lr}
 8005a34:	eb01 0402 	add.w	r4, r1, r2
 8005a38:	d902      	bls.n	8005a40 <memmove+0x10>
 8005a3a:	4284      	cmp	r4, r0
 8005a3c:	4623      	mov	r3, r4
 8005a3e:	d807      	bhi.n	8005a50 <memmove+0x20>
 8005a40:	1e43      	subs	r3, r0, #1
 8005a42:	42a1      	cmp	r1, r4
 8005a44:	d008      	beq.n	8005a58 <memmove+0x28>
 8005a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a4e:	e7f8      	b.n	8005a42 <memmove+0x12>
 8005a50:	4402      	add	r2, r0
 8005a52:	4601      	mov	r1, r0
 8005a54:	428a      	cmp	r2, r1
 8005a56:	d100      	bne.n	8005a5a <memmove+0x2a>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a62:	e7f7      	b.n	8005a54 <memmove+0x24>

08005a64 <__malloc_lock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__malloc_lock+0x8>)
 8005a66:	f7ff b9ed 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	200006f8 	.word	0x200006f8

08005a70 <__malloc_unlock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__malloc_unlock+0x8>)
 8005a72:	f7ff b9e8 	b.w	8004e46 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	200006f8 	.word	0x200006f8

08005a7c <_realloc_r>:
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	4680      	mov	r8, r0
 8005a82:	4614      	mov	r4, r2
 8005a84:	460e      	mov	r6, r1
 8005a86:	b921      	cbnz	r1, 8005a92 <_realloc_r+0x16>
 8005a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	f7ff babf 	b.w	8005010 <_malloc_r>
 8005a92:	b92a      	cbnz	r2, 8005aa0 <_realloc_r+0x24>
 8005a94:	f7ff fa50 	bl	8004f38 <_free_r>
 8005a98:	4625      	mov	r5, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa0:	f000 f81b 	bl	8005ada <_malloc_usable_size_r>
 8005aa4:	4284      	cmp	r4, r0
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	d802      	bhi.n	8005ab0 <_realloc_r+0x34>
 8005aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aae:	d812      	bhi.n	8005ad6 <_realloc_r+0x5a>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	f7ff faac 	bl	8005010 <_malloc_r>
 8005ab8:	4605      	mov	r5, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d0ed      	beq.n	8005a9a <_realloc_r+0x1e>
 8005abe:	42bc      	cmp	r4, r7
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	bf28      	it	cs
 8005ac6:	463a      	movcs	r2, r7
 8005ac8:	f7ff ffa4 	bl	8005a14 <memcpy>
 8005acc:	4631      	mov	r1, r6
 8005ace:	4640      	mov	r0, r8
 8005ad0:	f7ff fa32 	bl	8004f38 <_free_r>
 8005ad4:	e7e1      	b.n	8005a9a <_realloc_r+0x1e>
 8005ad6:	4635      	mov	r5, r6
 8005ad8:	e7df      	b.n	8005a9a <_realloc_r+0x1e>

08005ada <_malloc_usable_size_r>:
 8005ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ade:	1f18      	subs	r0, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbc      	itt	lt
 8005ae4:	580b      	ldrlt	r3, [r1, r0]
 8005ae6:	18c0      	addlt	r0, r0, r3
 8005ae8:	4770      	bx	lr
	...

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
