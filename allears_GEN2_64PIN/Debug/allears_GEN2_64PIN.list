
allears_GEN2_64PIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800ded0  0800ded0  0001ded0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e804  0800e804  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e804  0800e804  0001e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e80c  0800e80c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e80c  0800e80c  0001e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  200001ec  0800ea00  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000089c  0800ea00  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3ad  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402b  00000000  00000000  0003c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  000405f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020be6  00000000  00000000  00043450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cffa  00000000  00000000  00064036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2ac6  00000000  00000000  00081030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078f0  00000000  00000000  00143b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800deb8 	.word	0x0800deb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800deb8 	.word	0x0800deb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ConvCpltCallback>:
echo_adc2_state_data_t echo_adc2_fsm_state;
echo_adc2_state_t adc2_cur_state = ECHO_ADC2_IDLE;

/* ADC CALLBACK FUNCTION */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_ADC_ConvCpltCallback+0x120>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d164      	bne.n	80010d8 <HAL_ADC_ConvCpltCallback+0xe0>
	{
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e00a      	b.n	800102a <HAL_ADC_ConvCpltCallback+0x32>
		{
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8001014:	4a41      	ldr	r2, [pc, #260]	; (800111c <HAL_ADC_ConvCpltCallback+0x124>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800101c:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b09      	cmp	r3, #9
 800102e:	ddf1      	ble.n	8001014 <HAL_ADC_ConvCpltCallback+0x1c>
		}

		if (vpw_set_flag == true)
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04c      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
		{
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_i2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4692      	mov	sl, r2
 8001052:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 800105c:	4650      	mov	r0, sl
 800105e:	4659      	mov	r1, fp
 8001060:	f7ff fd3c 	bl	8000adc <__aeabi_dcmplt>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800106c:	885b      	ldrh	r3, [r3, #2]
 800106e:	461a      	mov	r2, r3
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa54 	bl	8000524 <__aeabi_i2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4690      	mov	r8, r2
 8001082:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 800108c:	4640      	mov	r0, r8
 800108e:	4649      	mov	r1, r9
 8001090:	f7ff fd24 	bl	8000adc <__aeabi_dcmplt>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d01c      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff fd0c 	bl	8000adc <__aeabi_dcmplt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
			{
				Echo_VPW_TP_OFF();
 80010ca:	f000 fb37 	bl	800173c <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_ADC_ConvCpltCallback+0x12c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
			}
		}
#if 0
		ADC1_CONV_OK = true;
#endif
		Echo_Start_ADC1_Conv();
 80010d4:	f000 f87e 	bl	80011d4 <Echo_Start_ADC1_Conv>
		//adc1_cur_state = ECHO_ADC1_CONV_OK; //Echo_Set_ADC1_State(ECHO_ADC1_CONV_OK);
	}

	if (hadc->Instance == hadc2.Instance)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_ConvCpltCallback+0x134>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d113      	bne.n	800110c <HAL_ADC_ConvCpltCallback+0x114>
	{
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	e00a      	b.n	8001100 <HAL_ADC_ConvCpltCallback+0x108>
		{
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_ADC_ConvCpltCallback+0x138>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_ADC_ConvCpltCallback+0x13c>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b09      	cmp	r3, #9
 8001104:	ddf1      	ble.n	80010ea <HAL_ADC_ConvCpltCallback+0xf2>
		}
#if 0
		ADC2_CONV_OK = true;
#endif
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_ADC_ConvCpltCallback+0x140>)
 8001108:	2203      	movs	r2, #3
 800110a:	701a      	strb	r2, [r3, #0]
	}
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001116:	bf00      	nop
 8001118:	200004ac 	.word	0x200004ac
 800111c:	20000208 	.word	0x20000208
 8001120:	20000230 	.word	0x20000230
 8001124:	2000037c 	.word	0x2000037c
 8001128:	40340000 	.word	0x40340000
 800112c:	20000510 	.word	0x20000510
 8001130:	2000021c 	.word	0x2000021c
 8001134:	20000244 	.word	0x20000244
 8001138:	20000001 	.word	0x20000001

0800113c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	adc1_cur_state = ECHO_ADC1_ERROR;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_ADC_ErrorCallback+0x20>)
 8001146:	2205      	movs	r2, #5
 8001148:	701a      	strb	r2, [r3, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_ADC_ErrorCallback+0x24>)
 800114c:	2205      	movs	r2, #5
 800114e:	701a      	strb	r2, [r3, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000000 	.word	0x20000000
 8001160:	20000001 	.word	0x20000001

08001164 <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001168:	217f      	movs	r1, #127	; 0x7f
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <Echo_ADC1_Enable+0x1c>)
 800116c:	f003 f928 	bl	80043c0 <HAL_ADCEx_Calibration_Start>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <Echo_ADC1_Enable+0x16>
	{
		Error_Handler();
 8001176:	f001 f8e3 	bl	8002340 <Error_Handler>
	}
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200004ac 	.word	0x200004ac

08001184 <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001188:	217f      	movs	r1, #127	; 0x7f
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <Echo_ADC2_Enable+0x1c>)
 800118c:	f003 f918 	bl	80043c0 <HAL_ADCEx_Calibration_Start>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <Echo_ADC2_Enable+0x16>
	{
		Error_Handler();
 8001196:	f001 f8d3 	bl	8002340 <Error_Handler>
	}
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000510 	.word	0x20000510

080011a4 <Echo_ADC_State_Init>:

/*
 * ADC INIT
 * */
void Echo_ADC_State_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	ECHO_ADC1_CUR_STATE = echo_adc1_state_max;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <Echo_ADC_State_Init+0x28>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	701a      	strb	r2, [r3, #0]
	ECHO_ADC2_CUR_STATE = echo_adc2_state_max;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <Echo_ADC_State_Init+0x2c>)
 80011b0:	2206      	movs	r2, #6
 80011b2:	701a      	strb	r2, [r3, #0]
	Echo_Set_ADC1_State(ECHO_ADC1_STATE_INIT);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f8d1 	bl	800135c <Echo_Set_ADC1_State>
	Echo_Set_ADC2_State(ECHO_ADC2_STATE_INIT);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f900 	bl	80013c0 <Echo_Set_ADC2_State>
	Echo_ADC1_Enable();
 80011c0:	f7ff ffd0 	bl	8001164 <Echo_ADC1_Enable>
	Echo_ADC2_Enable();
 80011c4:	f7ff ffde 	bl	8001184 <Echo_ADC2_Enable>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000258 	.word	0x20000258
 80011d0:	2000025c 	.word	0x2000025c

080011d4 <Echo_Start_ADC1_Conv>:

/*
 * ADC START CONVERSION
 * */
void Echo_Start_ADC1_Conv()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 80011d8:	220a      	movs	r2, #10
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <Echo_Start_ADC1_Conv+0x1c>)
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <Echo_Start_ADC1_Conv+0x20>)
 80011de:	f002 f94b 	bl	8003478 <HAL_ADC_Start_DMA>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <Echo_Start_ADC1_Conv+0x18>
	ADC1_CHK_CH_NUM * ECHO_ADC1_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
 80011e8:	f001 f8aa 	bl	8002340 <Error_Handler>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000208 	.word	0x20000208
 80011f4:	200004ac 	.word	0x200004ac

080011f8 <Echo_Start_ADC2_Conv>:

void Echo_Start_ADC2_Conv()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC2_CONV_BUF,
 80011fc:	220a      	movs	r2, #10
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <Echo_Start_ADC2_Conv+0x1c>)
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <Echo_Start_ADC2_Conv+0x20>)
 8001202:	f002 f939 	bl	8003478 <HAL_ADC_Start_DMA>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <Echo_Start_ADC2_Conv+0x18>
	ADC2_CHK_CH_NUM * ECHO_ADC2_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
 800120c:	f001 f898 	bl	8002340 <Error_Handler>
	}
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000021c 	.word	0x2000021c
 8001218:	20000510 	.word	0x20000510

0800121c <Echo_Stop_ADC1_Conv>:

/*
 * ADC STOP CONVERSION
 * */
void Echo_Stop_ADC1_Conv()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <Echo_Stop_ADC1_Conv+0x18>)
 8001222:	f002 f9dd 	bl	80035e0 <HAL_ADC_Stop_DMA>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <Echo_Stop_ADC1_Conv+0x14>
	{
		Error_Handler();
 800122c:	f001 f888 	bl	8002340 <Error_Handler>
	}
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200004ac 	.word	0x200004ac

08001238 <Echo_Stop_ADC2_Conv>:

void Echo_Stop_ADC2_Conv()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <Echo_Stop_ADC2_Conv+0x18>)
 800123e:	f002 f9cf 	bl	80035e0 <HAL_ADC_Stop_DMA>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <Echo_Stop_ADC2_Conv+0x14>
	{
		Error_Handler();
 8001248:	f001 f87a 	bl	8002340 <Error_Handler>
	}
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000510 	.word	0x20000510

08001254 <Echo_Stepup_ADC1_AVG>:

/*
 * STEPUP ADC AVG CALC
 * */
float Echo_Stepup_ADC1_AVG()
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	float adc1_avg = 0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	e010      	b.n	8001288 <Echo_Stepup_ADC1_AVG+0x34>
	{
		adc1_avg += setpup_adc[i];
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <Echo_Stepup_ADC1_AVG+0x58>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	ed97 7a01 	vldr	s14, [r7, #4]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b09      	cmp	r3, #9
 800128c:	ddeb      	ble.n	8001266 <Echo_Stepup_ADC1_AVG+0x12>
	}
	return adc1_avg / ECHO_ADC1_RCV_SIZE;
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129a:	eef0 7a66 	vmov.f32	s15, s13
}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000230 	.word	0x20000230

080012b0 <Echo_ADC_Calc_Stepup_V>:

/*
 * VOLTAGE CALC FUNCTION
 * */
float Echo_ADC_Calc_Stepup_V(uint16_t in_adc_val, float r1, float r2)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80012c0:	81fb      	strh	r3, [r7, #14]
	float f_adc_val;
	uint32_t vdda = 3300UL;
 80012c2:	f640 43e4 	movw	r3, #3300	; 0xce4
 80012c6:	61fb      	str	r3, [r7, #28]
	float v_ref = (float) (vdda * 0.001);
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f7ff f91b 	bl	8000504 <__aeabi_ui2d>
 80012ce:	a31b      	add	r3, pc, #108	; (adr r3, 800133c <Echo_ADC_Calc_Stepup_V+0x8c>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f990 	bl	80005f8 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc82 	bl	8000be8 <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
	float v_out;

	f_adc_val = in_adc_val / 4095.f;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001338 <Echo_ADC_Calc_Stepup_V+0x88>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80012fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001302:	edd7 7a05 	vldr	s15, [r7, #20]
 8001306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130a:	edd7 6a02 	vldr	s13, [r7, #8]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8001316:	edd7 6a01 	vldr	s13, [r7, #4]
 800131a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a04 	vstr	s15, [r7, #16]

	return v_out;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	457ff000 	.word	0x457ff000
 800133c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001340:	3f50624d 	.word	0x3f50624d

08001344 <Echo_Get_ADC1_State>:
	}
}
/**********************/

echo_adc1_state_t Echo_Get_ADC1_State(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	return ECHO_ADC1_CUR_STATE;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <Echo_Get_ADC1_State+0x14>)
 800134a:	781b      	ldrb	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000258 	.word	0x20000258

0800135c <Echo_Set_ADC1_State>:
{
	return ECHO_ADC2_CUR_STATE;
}

void Echo_Set_ADC1_State(echo_adc1_state_t state)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d81c      	bhi.n	80013a6 <Echo_Set_ADC1_State+0x4a>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <Echo_Set_ADC1_State+0x18>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	080013a7 	.word	0x080013a7
 8001378:	0800138d 	.word	0x0800138d
 800137c:	08001393 	.word	0x08001393
 8001380:	080013a7 	.word	0x080013a7
 8001384:	08001399 	.word	0x08001399
 8001388:	080013a1 	.word	0x080013a1
	{
	case ECHO_ADC1_STATE_INIT:
		break;
	case ECHO_ADC1_IDLE:
		Echo_Stop_ADC1_Conv();
 800138c:	f7ff ff46 	bl	800121c <Echo_Stop_ADC1_Conv>
		break;
 8001390:	e00a      	b.n	80013a8 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_RUN:
		Echo_Start_ADC1_Conv();
 8001392:	f7ff ff1f 	bl	80011d4 <Echo_Start_ADC1_Conv>
		break;
 8001396:	e007      	b.n	80013a8 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_CONV_OK:
		break;
	case ECHO_ADC1_PRINT_OK:
		adc1_cur_state = ECHO_ADC1_RUN;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <Echo_Set_ADC1_State+0x5c>)
 800139a:	2202      	movs	r2, #2
 800139c:	701a      	strb	r2, [r3, #0]
		break;
 800139e:	e003      	b.n	80013a8 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_ERROR:
		Echo_Stop_ADC1_Conv();
 80013a0:	f7ff ff3c 	bl	800121c <Echo_Stop_ADC1_Conv>
		break;
 80013a4:	e000      	b.n	80013a8 <Echo_Set_ADC1_State+0x4c>
	default:
		break;
 80013a6:	bf00      	nop
	}
	ECHO_ADC1_CUR_STATE = state;
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <Echo_Set_ADC1_State+0x60>)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	7013      	strb	r3, [r2, #0]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000258 	.word	0x20000258

080013c0 <Echo_Set_ADC2_State>:

void Echo_Set_ADC2_State(echo_adc2_state_t state)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d81c      	bhi.n	800140a <Echo_Set_ADC2_State+0x4a>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <Echo_Set_ADC2_State+0x18>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	0800140b 	.word	0x0800140b
 80013dc:	080013f1 	.word	0x080013f1
 80013e0:	080013f7 	.word	0x080013f7
 80013e4:	0800140b 	.word	0x0800140b
 80013e8:	080013fd 	.word	0x080013fd
 80013ec:	08001405 	.word	0x08001405
	{
	case ECHO_ADC2_STATE_INIT:
		break;
	case ECHO_ADC2_IDLE:
		Echo_Stop_ADC2_Conv();
 80013f0:	f7ff ff22 	bl	8001238 <Echo_Stop_ADC2_Conv>
		break;
 80013f4:	e00a      	b.n	800140c <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_RUN:
		Echo_Start_ADC2_Conv();
 80013f6:	f7ff feff 	bl	80011f8 <Echo_Start_ADC2_Conv>
		break;
 80013fa:	e007      	b.n	800140c <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_CONV_OK:
		break;
	case ECHO_ADC2_PRINT_OK:
		Echo_Set_ADC2_State(ECHO_ADC2_RUN);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f7ff ffdf 	bl	80013c0 <Echo_Set_ADC2_State>
		break;
 8001402:	e003      	b.n	800140c <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_ERROR:
		Echo_Stop_ADC2_Conv();
 8001404:	f7ff ff18 	bl	8001238 <Echo_Stop_ADC2_Conv>
		break;
 8001408:	e000      	b.n	800140c <Echo_Set_ADC2_State+0x4c>
	default:
		break;
 800140a:	bf00      	nop
	}
	ECHO_ADC2_CUR_STATE = state;
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <Echo_Set_ADC2_State+0x5c>)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	7013      	strb	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000025c 	.word	0x2000025c

08001420 <Echo_Flash_Read>:
	HAL_FLASH_Lock();
	return HAL_OK;
}

HAL_StatusTypeDef Echo_Flash_Read()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <Echo_Flash_Read+0x38>)
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <Echo_Flash_Read+0x3c>)
 8001428:	6810      	ldr	r0, [r2, #0]
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	8892      	ldrh	r2, [r2, #4]
 800142e:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Echo_Flash_Read+0x38>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <Echo_Flash_Read+0x2c>
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <Echo_Flash_Read+0x38>)
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <Echo_Flash_Read+0x2c>
			&& pwm_param.pulse_width == 0)
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <Echo_Flash_Read+0x38>)
 8001442:	885b      	ldrh	r3, [r3, #2]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <Echo_Flash_Read+0x2c>
	{
		return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <Echo_Flash_Read+0x2e>
	}
	else
	{
		return HAL_OK;
 800144c:	2300      	movs	r3, #0
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20000380 	.word	0x20000380
 800145c:	0801e000 	.word	0x0801e000

08001460 <Echo_LED_Green_Off>:

/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	4802      	ldr	r0, [pc, #8]	; (8001474 <Echo_LED_Green_Off+0x14>)
 800146c:	f003 fda6 	bl	8004fbc <HAL_GPIO_WritePin>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	48000400 	.word	0x48000400

08001478 <Echo_LED_Green_On>:

__STATIC_INLINE void Echo_LED_Green_On(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <Echo_LED_Green_On+0x14>)
 8001484:	f003 fd9a 	bl	8004fbc <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	48000400 	.word	0x48000400

08001490 <Echo_LED_Off_All>:

__STATIC_INLINE void Echo_LED_Off_All(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <Echo_LED_Off_All+0x14>)
 800149c:	f003 fd8e 	bl	8004fbc <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	48000400 	.word	0x48000400

080014a8 <Echo_LED_State_Reset>:

__STATIC_INLINE void Echo_LED_State_Reset(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <Echo_LED_State_Reset+0x18>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	735a      	strb	r2, [r3, #13]
	ECHO_LED_ON = false;
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <Echo_LED_State_Reset+0x18>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	Echo_LED_Off_All();
 80014b8:	f7ff ffea 	bl	8001490 <Echo_LED_Off_All>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000260 	.word	0x20000260

080014c4 <Echo_LED_CTRL>:

static void Echo_LED_CTRL(echo_led_color_t colors)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	if (colors == ECHO_LED_COLOR_NONE)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <Echo_LED_CTRL+0x16>
	{
		Echo_LED_Off_All();
 80014d4:	f7ff ffdc 	bl	8001490 <Echo_LED_Off_All>
	Echo_LED_Blue_On();
	else
	Echo_LED_Blue_Off();
#endif
	}
}
 80014d8:	e009      	b.n	80014ee <Echo_LED_CTRL+0x2a>
		if (colors & ECHO_LED_GREEN)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <Echo_LED_CTRL+0x26>
			Echo_LED_Green_On();
 80014e4:	f7ff ffc8 	bl	8001478 <Echo_LED_Green_On>
}
 80014e8:	e001      	b.n	80014ee <Echo_LED_CTRL+0x2a>
			Echo_LED_Green_Off();
 80014ea:	f7ff ffb9 	bl	8001460 <Echo_LED_Green_Off>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <Echo_LED_Init>:

void Echo_LED_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	Echo_LED_Off_All();
 80014fc:	f7ff ffc8 	bl	8001490 <Echo_LED_Off_All>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <Echo_LED_Init+0x14>)
 8001502:	2200      	movs	r2, #0
 8001504:	735a      	strb	r2, [r3, #13]
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000260 	.word	0x20000260

08001510 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <Echo_LED_Enable+0x20>)
 8001516:	f008 fecf 	bl	800a2b8 <puts>
#endif
	Echo_LED_State_Reset();
 800151a:	f7ff ffc5 	bl	80014a8 <Echo_LED_State_Reset>
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <Echo_LED_Enable+0x24>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <Echo_LED_Enable+0x24>)
 8001526:	2200      	movs	r2, #0
 8001528:	731a      	strb	r2, [r3, #12]
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0800ded0 	.word	0x0800ded0
 8001534:	20000260 	.word	0x20000260

08001538 <Echo_Set_LED_State>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_Set_LED_State(echo_led_sate_t led_state)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	echo_led_state_ind_t led_ind;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
 8001542:	482a      	ldr	r0, [pc, #168]	; (80015ec <Echo_Set_LED_State+0xb4>)
 8001544:	f008 feb8 	bl	800a2b8 <puts>
#endif
	Echo_LED_Enable();
 8001548:	f7ff ffe2 	bl	8001510 <Echo_LED_Enable>

	if (ECHO_LED_IND_DISABLED() == true)
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 800154e:	7b1b      	ldrb	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d145      	bne.n	80015e0 <Echo_Set_LED_State+0xa8>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <Echo_Set_LED_State+0x26>
		led_state = ECHO_LED_STATE_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	71fb      	strb	r3, [r7, #7]

	if (led_state == ECHO_LED_CUR_STATE)
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 8001560:	7b5b      	ldrb	r3, [r3, #13]
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	429a      	cmp	r2, r3
 8001566:	d03d      	beq.n	80015e4 <Echo_Set_LED_State+0xac>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	4922      	ldr	r1, [pc, #136]	; (80015f4 <Echo_Set_LED_State+0xbc>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	440b      	add	r3, r1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	723b      	strb	r3, [r7, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	491d      	ldr	r1, [pc, #116]	; (80015f4 <Echo_Set_LED_State+0xbc>)
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	3302      	adds	r3, #2
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	817b      	strh	r3, [r7, #10]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	4918      	ldr	r1, [pc, #96]	; (80015f4 <Echo_Set_LED_State+0xbc>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	81bb      	strh	r3, [r7, #12]

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ff8e 	bl	80014c4 <Echo_LED_CTRL>

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <Echo_Set_LED_State+0x88>
	{
		ECHO_LED_ON = false;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = 0;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e00b      	b.n	80015d8 <Echo_Set_LED_State+0xa0>
	}
	else
	{
		Echo_LED_CTRL(led_ind.led_colors);
 80015c0:	7a3b      	ldrb	r3, [r7, #8]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff7e 	bl	80014c4 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 80015ce:	f001 fb9d 	bl	8002d0c <HAL_GetTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 80015d6:	6053      	str	r3, [r2, #4]
	}

	ECHO_LED_CUR_STATE = led_state;
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <Echo_Set_LED_State+0xb8>)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	7353      	strb	r3, [r2, #13]
 80015de:	e002      	b.n	80015e6 <Echo_Set_LED_State+0xae>
		return;
 80015e0:	bf00      	nop
 80015e2:	e000      	b.n	80015e6 <Echo_Set_LED_State+0xae>
		return;
 80015e4:	bf00      	nop

}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800dee4 	.word	0x0800dee4
 80015f0:	20000260 	.word	0x20000260
 80015f4:	0800e2f8 	.word	0x0800e2f8

080015f8 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d106      	bne.n	8001614 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	2201      	movs	r2, #1
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__io_putchar+0x34>)
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <__io_putchar+0x38>)
 8001610:	f006 fb5a 	bl	8007cc8 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 8001614:	1d39      	adds	r1, r7, #4
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	2201      	movs	r2, #1
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <__io_putchar+0x38>)
 800161e:	f006 fb53 	bl	8007cc8 <HAL_UART_Transmit>
	return ch;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800df2c 	.word	0x0800df2c
 8001630:	200007fc 	.word	0x200007fc

08001634 <Echo_Print_Manual>:

/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <Echo_Print_Manual+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f008 fe3b 	bl	800a2b8 <puts>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000004 	.word	0x20000004

0800164c <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
	char res_msg[40] =
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2224      	movs	r2, #36	; 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f007 ff23 	bl	80094a8 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001662:	463b      	mov	r3, r7
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <Echo_Print_Version+0x34>)
 8001666:	4907      	ldr	r1, [pc, #28]	; (8001684 <Echo_Print_Version+0x38>)
 8001668:	4618      	mov	r0, r3
 800166a:	f008 fe33 	bl	800a2d4 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 800166e:	463b      	mov	r3, r7
 8001670:	4618      	mov	r0, r3
 8001672:	f008 fe21 	bl	800a2b8 <puts>
}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800e1e4 	.word	0x0800e1e4
 8001684:	0800e1f0 	.word	0x0800e1f0

08001688 <Echo_Shell_Init>:
	}
}
/**********************/

void Echo_Shell_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 800168c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001690:	2100      	movs	r1, #0
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <Echo_Shell_Init+0x1c>)
 8001694:	f007 ff08 	bl	80094a8 <memset>
	SHELL_MSG_RCV_POS = 0;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <Echo_Shell_Init+0x20>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000271 	.word	0x20000271
 80016a8:	20000270 	.word	0x20000270

080016ac <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12e      	bne.n	800171c <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		/* ADC1 FSM */
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 80016be:	f7ff fe41 	bl	8001344 <Echo_Get_ADC1_State>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d129      	bne.n	800171c <HAL_TIM_PeriodElapsedCallback+0x70>
		{
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 80016c8:	f7ff fdc4 	bl	8001254 <Echo_Stepup_ADC1_AVG>
 80016cc:	ed87 0a03 	vstr	s0, [r7, #12]
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7fe ff39 	bl	8000548 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016dc:	f008 fd66 	bl	800a1ac <iprintf>
			ECHO_SHELL_PRINT(
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800172c <HAL_TIM_PeriodElapsedCallback+0x80>
 80016f2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001730 <HAL_TIM_PeriodElapsedCallback+0x84>
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fdda 	bl	80012b0 <Echo_ADC_Calc_Stepup_V>
 80016fc:	ee10 3a10 	vmov	r3, s0
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff21 	bl	8000548 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800170c:	f008 fd4e 	bl	800a1ac <iprintf>
					("STEPUP VOLTAGE : %f\n",Echo_ADC_Calc_Stepup_V(adc_avg_data, R1_Vstup, R2_Vstup)));
			ECHO_SHELL_PRINT(("----------\r\n"));
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001712:	f008 fdd1 	bl	800a2b8 <puts>
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 8001716:	2004      	movs	r0, #4
 8001718:	f7ff fe20 	bl	800135c <Echo_Set_ADC1_State>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40014400 	.word	0x40014400
 8001728:	0800e230 	.word	0x0800e230
 800172c:	42dc0000 	.word	0x42dc0000
 8001730:	45610000 	.word	0x45610000
 8001734:	0800e240 	.word	0x0800e240
 8001738:	0800e258 	.word	0x0800e258

0800173c <Echo_VPW_TP_OFF>:
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
}

void Echo_VPW_TP_OFF(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f003 fc37 	bl	8004fbc <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <Echo_Pulse_Prm_Config>:
#ifdef ECHO_PULSE_DMA
/*
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_Prm_Config()
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	/* HZ SETTING */
	TIM2->CNT = 0;
 8001758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 8001762:	889b      	ldrh	r3, [r3, #4]
 8001764:	461a      	mov	r2, r3
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <Echo_Pulse_Prm_Config+0x9c>)
 8001768:	fb93 f3f2 	sdiv	r3, r3, r2
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	f103 020a 	add.w	r2, r3, #10
 800177c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 8001784:	885b      	ldrh	r3, [r3, #2]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 800178a:	8812      	ldrh	r2, [r2, #0]
 800178c:	4413      	add	r3, r2
 800178e:	330a      	adds	r3, #10
 8001790:	461a      	mov	r2, r3
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <Echo_Pulse_Prm_Config+0xa0>)
 8001794:	601a      	str	r2, [r3, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 8001798:	885b      	ldrh	r3, [r3, #2]
 800179a:	461a      	mov	r2, r3
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <Echo_Pulse_Prm_Config+0xa0>)
 80017a6:	605a      	str	r2, [r3, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 80017aa:	885b      	ldrh	r3, [r3, #2]
 80017ac:	3305      	adds	r3, #5
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <Echo_Pulse_Prm_Config+0xa4>)
 80017b2:	601a      	str	r2, [r3, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 80017b6:	885b      	ldrh	r3, [r3, #2]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	3305      	adds	r3, #5
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <Echo_Pulse_Prm_Config+0xa4>)
 80017c6:	605a      	str	r2, [r3, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <Echo_Pulse_Prm_Config+0x98>)
 80017d0:	8812      	ldrh	r2, [r2, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	3305      	adds	r3, #5
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <Echo_Pulse_Prm_Config+0xa4>)
 80017da:	609a      	str	r2, [r3, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <Echo_Pulse_Prm_Config+0xa4>)
 80017de:	2205      	movs	r2, #5
 80017e0:	60da      	str	r2, [r3, #12]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	20000380 	.word	0x20000380
 80017f0:	000f4240 	.word	0x000f4240
 80017f4:	20000388 	.word	0x20000388
 80017f8:	20000390 	.word	0x20000390

080017fc <Echo_Stim_Stop>:

/*
 * Stimulation Start AND Stop
 */
void Echo_Stim_Stop()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 8001800:	2104      	movs	r1, #4
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <Echo_Stim_Stop+0x30>)
 8001804:	f005 f9ca 	bl	8006b9c <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8001808:	2100      	movs	r1, #0
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <Echo_Stim_Stop+0x30>)
 800180c:	f004 ffa8 	bl	8006760 <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 8001810:	210c      	movs	r1, #12
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <Echo_Stim_Stop+0x30>)
 8001814:	f004 ffa4 	bl	8006760 <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 8001818:	f000 f8c0 	bl	800199c <Echo_StepUP_Stop>
	Echo_Stop_ADC2_Conv();
 800181c:	f7ff fd0c 	bl	8001238 <Echo_Stop_ADC2_Conv>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <Echo_Stim_Stop+0x30>)
 8001822:	f004 fd1f 	bl	8006264 <HAL_TIM_Base_Stop_IT>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000650 	.word	0x20000650

08001830 <Echo_Stim_Start>:

void Echo_Stim_Start()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0

#if 1
	TIM_MasterConfigTypeDef sMasterConfig =
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <Echo_Stim_Start+0x158>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 800185c:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <Echo_Stim_Start+0x158>)
 800185e:	224f      	movs	r2, #79	; 0x4f
 8001860:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <Echo_Stim_Start+0x158>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8001868:	4b47      	ldr	r3, [pc, #284]	; (8001988 <Echo_Stim_Start+0x158>)
 800186a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <Echo_Stim_Start+0x158>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <Echo_Stim_Start+0x158>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800187c:	4842      	ldr	r0, [pc, #264]	; (8001988 <Echo_Stim_Start+0x158>)
 800187e:	f004 fd20 	bl	80062c2 <HAL_TIM_OC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <Echo_Stim_Start+0x5c>
	{
		Error_Handler();
 8001888:	f000 fd5a 	bl	8002340 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800188c:	483e      	ldr	r0, [pc, #248]	; (8001988 <Echo_Stim_Start+0x158>)
 800188e:	f005 f84f 	bl	8006930 <HAL_TIM_PWM_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <Echo_Stim_Start+0x6c>
	{
		Error_Handler();
 8001898:	f000 fd52 	bl	8002340 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800189c:	2320      	movs	r3, #32
 800189e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4837      	ldr	r0, [pc, #220]	; (8001988 <Echo_Stim_Start+0x158>)
 80018ac:	f006 f8c2 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <Echo_Stim_Start+0x8a>
	{
		Error_Handler();
 80018b6:	f000 fd43 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80018ba:	2330      	movs	r3, #48	; 0x30
 80018bc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 5;
 80018be:	2305      	movs	r3, #5
 80018c0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	482d      	ldr	r0, [pc, #180]	; (8001988 <Echo_Stim_Start+0x158>)
 80018d2:	f005 fb0b 	bl	8006eec <HAL_TIM_OC_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <Echo_Stim_Start+0xb0>
	{
		Error_Handler();
 80018dc:	f000 fd30 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	; 0x60
 80018e2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1010;
 80018e4:	f240 33f2 	movw	r3, #1010	; 0x3f2
 80018e8:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4825      	ldr	r0, [pc, #148]	; (8001988 <Echo_Stim_Start+0x158>)
 80018f2:	f005 fb75 	bl	8006fe0 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <Echo_Stim_Start+0xd0>
	{
		Error_Handler();
 80018fc:	f000 fd20 	bl	8002340 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <Echo_Stim_Start+0x158>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <Echo_Stim_Start+0x158>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001910:	2330      	movs	r3, #48	; 0x30
 8001912:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1040;
 8001914:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001918:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	220c      	movs	r2, #12
 800191e:	4619      	mov	r1, r3
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <Echo_Stim_Start+0x158>)
 8001922:	f005 fae3 	bl	8006eec <HAL_TIM_OC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <Echo_Stim_Start+0x100>
	{
		Error_Handler();
 800192c:	f000 fd08 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <Echo_Stim_Start+0x158>)
 8001932:	f000 fee1 	bl	80026f8 <HAL_TIM_MspPostInit>
#endif

	Echo_Pulse_Prm_Config();
 8001936:	f7ff ff0d 	bl	8001754 <Echo_Pulse_Prm_Config>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 800193a:	2104      	movs	r1, #4
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <Echo_Stim_Start+0x158>)
 800193e:	f005 f84f 	bl	80069e0 <HAL_TIM_PWM_Start>

	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 8001942:	2304      	movs	r3, #4
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <Echo_Stim_Start+0x15c>)
 8001946:	2100      	movs	r1, #0
 8001948:	480f      	ldr	r0, [pc, #60]	; (8001988 <Echo_Stim_Start+0x158>)
 800194a:	f004 fd11 	bl	8006370 <HAL_TIM_OC_Start_DMA>
			(uint32_t*) current_ctrl_proc_arr, 4); // PA5 TIM2 CH_1 CURRENT CONTROL
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <Echo_Stim_Start+0x160>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <Echo_Stim_Start+0x160>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0206 	bic.w	r2, r2, #6
 800195c:	601a      	str	r2, [r3, #0]

	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 800195e:	2302      	movs	r3, #2
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <Echo_Stim_Start+0x164>)
 8001962:	210c      	movs	r1, #12
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <Echo_Stim_Start+0x158>)
 8001966:	f004 fd03 	bl	8006370 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <Echo_Stim_Start+0x168>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <Echo_Stim_Start+0x168>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0206 	bic.w	r2, r2, #6
 8001978:	601a      	str	r2, [r3, #0]

	Echo_StepUP_Start();
 800197a:	f000 f81f 	bl	80019bc <Echo_StepUP_Start>

#if NOT_USEAGE_TRGO
	Echo_Start_ADC2_Conv();
	HAL_TIM_Base_Start_IT(&htim2);
#endif
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000650 	.word	0x20000650
 800198c:	20000390 	.word	0x20000390
 8001990:	20000730 	.word	0x20000730
 8001994:	20000388 	.word	0x20000388
 8001998:	200006e8 	.word	0x200006e8

0800199c <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80019a0:	2100      	movs	r1, #0
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <Echo_StepUP_Stop+0x18>)
 80019a4:	f005 f8fa 	bl	8006b9c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <Echo_StepUP_Stop+0x1c>)
 80019aa:	f004 fc5b 	bl	8006264 <HAL_TIM_Base_Stop_IT>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000604 	.word	0x20000604
 80019b8:	2000069c 	.word	0x2000069c

080019bc <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	TIM1->CCR1 = v_step_tv;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <Echo_StepUP_Start+0x20>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <Echo_StepUP_Start+0x24>)
 80019c6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019c8:	2100      	movs	r1, #0
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <Echo_StepUP_Start+0x28>)
 80019cc:	f005 f808 	bl	80069e0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <Echo_StepUP_Start+0x2c>)
 80019d2:	f004 fbf3 	bl	80061bc <HAL_TIM_Base_Start_IT>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	20000604 	.word	0x20000604
 80019e8:	2000069c 	.word	0x2000069c

080019ec <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80019f2:	20c8      	movs	r0, #200	; 0xc8
 80019f4:	f001 f996 	bl	8002d24 <HAL_Delay>
	char res_msg[55] =
 80019f8:	2300      	movs	r3, #0
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2233      	movs	r2, #51	; 0x33
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 fd50 	bl	80094a8 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001a08:	f7ff fd0a 	bl	8001420 <Echo_Flash_Read>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00c      	beq.n	8001a2c <Echo_PCI_State_Init+0x40>
	{
		pwm_param.dead_time = 20;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <Echo_PCI_State_Init+0x7c>)
 8001a14:	2214      	movs	r2, #20
 8001a16:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <Echo_PCI_State_Init+0x7c>)
 8001a1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1e:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <Echo_PCI_State_Init+0x7c>)
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <Echo_PCI_State_Init+0x80>)
 8001a28:	220a      	movs	r2, #10
 8001a2a:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8001a2c:	f7ff fe0e 	bl	800164c <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001a30:	f004 f93e 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	463b      	mov	r3, r7
 8001a38:	490d      	ldr	r1, [pc, #52]	; (8001a70 <Echo_PCI_State_Init+0x84>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fc4a 	bl	800a2d4 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001a40:	463b      	mov	r3, r7
 8001a42:	4618      	mov	r0, r3
 8001a44:	f008 fc38 	bl	800a2b8 <puts>
	Echo_ADC_State_Init();
 8001a48:	f7ff fbac 	bl	80011a4 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 8001a4c:	f7ff fdf2 	bl	8001634 <Echo_Print_Manual>
	Echo_LED_Init();
 8001a50:	f7ff fd52 	bl	80014f8 <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8001a54:	f000 f80e 	bl	8001a74 <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 8001a58:	f7ff fe16 	bl	8001688 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 8001a5c:	f000 f88e 	bl	8001b7c <Echo_Uart2_INTERRUPT_ENA>
}
 8001a60:	bf00      	nop
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000380 	.word	0x20000380
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	0800e264 	.word	0x0800e264

08001a74 <Echo_Sys_FSM_State_Init>:
echo_sys_state_t cur_state = ECHO_SYS_STATE_IDLE;

extern echo_adc1_state_t adc1_cur_state;
/* while out code*/
void Echo_Sys_FSM_State_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	ECHO_CUR_SYS_STATE = echo_sys_state_max;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <Echo_Sys_FSM_State_Init+0x14>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	701a      	strb	r2, [r3, #0]
	//ECHO_BUTTON_STATE = Echo_Button_NoPressed();
	Echo_Set_Sys_FSM_State(ECHO_SYS_STATE_INIT);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f804 	bl	8001a8c <Echo_Set_Sys_FSM_State>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200003a0 	.word	0x200003a0

08001a8c <Echo_Set_Sys_FSM_State>:
	 }
	 */
}

void Echo_Set_Sys_FSM_State(echo_sys_state_t state)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	/*
	 if (ECHO_CUR_STATE == state || state >= echo_state_max)
	 return;
	 */

	switch (state)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d82e      	bhi.n	8001afa <Echo_Set_Sys_FSM_State+0x6e>
 8001a9c:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <Echo_Set_Sys_FSM_State+0x18>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001abd 	.word	0x08001abd
 8001aac:	08001ad5 	.word	0x08001ad5
 8001ab0:	08001aed 	.word	0x08001aed
	{

	case ECHO_SYS_STATE_INIT:
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <Echo_Set_Sys_FSM_State+0x88>)
 8001ab6:	f008 fbff 	bl	800a2b8 <puts>
#endif
#endif
		break;
 8001aba:	e024      	b.n	8001b06 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_SYS_STATE_IDLE:
		Echo_Stim_Stop();
 8001abc:	f7ff fe9e 	bl	80017fc <Echo_Stim_Stop>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fd39 	bl	8001538 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_IDLE;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <Echo_Set_Sys_FSM_State+0x8c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <Echo_Set_Sys_FSM_State+0x90>)
 8001ace:	f008 fbf3 	bl	800a2b8 <puts>
#endif
#endif
		break;
 8001ad2:	e018      	b.n	8001b06 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_SYS_STATE_RUN:
		Echo_Stim_Start();
 8001ad4:	f7ff feac 	bl	8001830 <Echo_Stim_Start>
		Echo_Set_LED_State(ECHO_LED_RUN);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff fd2d 	bl	8001538 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_RUN;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <Echo_Set_Sys_FSM_State+0x8c>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <Echo_Set_Sys_FSM_State+0x94>)
 8001ae6:	f008 fbe7 	bl	800a2b8 <puts>
#endif
#endif
		break;
 8001aea:	e00c      	b.n	8001b06 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_sys_STATE_ERROR:
		Echo_Set_LED_State(ECHO_LED_IDLE);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fd23 	bl	8001538 <Echo_Set_LED_State>
		//Echo_ADC_StateSet(ECHO_ADC_IDLE);
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <Echo_Set_Sys_FSM_State+0x98>)
 8001af4:	f008 fbe0 	bl	800a2b8 <puts>
#endif
#endif
		break;
 8001af8:	e005      	b.n	8001b06 <Echo_Set_Sys_FSM_State+0x7a>

	default:
		// Cannot be here
#ifdef DEBUG
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4619      	mov	r1, r3
 8001afe:	480a      	ldr	r0, [pc, #40]	; (8001b28 <Echo_Set_Sys_FSM_State+0x9c>)
 8001b00:	f008 fb54 	bl	800a1ac <iprintf>
#endif
		break;
 8001b04:	bf00      	nop

	}
	ECHO_CUR_SYS_STATE = state;
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <Echo_Set_Sys_FSM_State+0xa0>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	7013      	strb	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0800e294 	.word	0x0800e294
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	0800e2a8 	.word	0x0800e2a8
 8001b20:	0800e2bc 	.word	0x0800e2bc
 8001b24:	0800e2cc 	.word	0x0800e2cc
 8001b28:	0800e2e0 	.word	0x0800e2e0
 8001b2c:	200003a0 	.word	0x200003a0

08001b30 <Echo_Uart2_RCV_Q_Put_INLINE>:

uint8_t echo_uart2_rcv_buf[ECHO_USART2_RCV_Q_SIZE];
uint8_t echo_uart2_rcv_byte = 0;

static __INLINE void Echo_Uart2_RCV_Q_Put_INLINE(uint8_t item)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b3c:	885b      	ldrh	r3, [r3, #2]
 8001b3e:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001b40:	425a      	negs	r2, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	bf58      	it	pl
 8001b48:	4253      	negpl	r3, r2
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b4e:	805a      	strh	r2, [r3, #2]

	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b52:	885b      	ldrh	r3, [r3, #2]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	719a      	strb	r2, [r3, #6]

	echo_uart2_state.item_num++;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b60:	889b      	ldrh	r3, [r3, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8001b68:	809a      	strh	r2, [r3, #4]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200003a4 	.word	0x200003a4

08001b7c <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	805a      	strh	r2, [r3, #2]
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <Echo_Uart2_INTERRUPT_ENA+0x30>)
 8001b94:	f006 f982 	bl	8007e9c <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <Echo_Uart2_INTERRUPT_ENA+0x34>)
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <Echo_Uart2_INTERRUPT_ENA+0x30>)
 8001b9e:	f006 f927 	bl	8007df0 <HAL_UART_Receive_IT>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003a4 	.word	0x200003a4
 8001bac:	200007fc 	.word	0x200007fc
 8001bb0:	200004aa 	.word	0x200004aa

08001bb4 <HAL_UART_RxCpltCallback>:

/*
 * 1. UART RX Interrupt
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_UART_RxCpltCallback+0x38>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_UART_RxCpltCallback+0x26>
	{
	}
	else if (huart->Instance == USART2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_UART_RxCpltCallback+0x3c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d104      	bne.n	8001bda <HAL_UART_RxCpltCallback+0x26>
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_UART_RxCpltCallback+0x40>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ffab 	bl	8001b30 <Echo_Uart2_RCV_Q_Put_INLINE>
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4905      	ldr	r1, [pc, #20]	; (8001bf4 <HAL_UART_RxCpltCallback+0x40>)
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <HAL_UART_RxCpltCallback+0x44>)
 8001be0:	f006 f906 	bl	8007df0 <HAL_UART_Receive_IT>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	200004aa 	.word	0x200004aa
 8001bf8:	200007fc 	.word	0x200007fc

08001bfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c00:	f001 f81b 	bl	8002c3a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c04:	f000 f816 	bl	8001c34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c08:	f000 fb1c 	bl	8002244 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c0c:	f000 fae4 	bl	80021d8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001c10:	f000 fab2 	bl	8002178 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001c14:	f000 f864 	bl	8001ce0 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001c18:	f000 f8d8 	bl	8001dcc <MX_ADC2_Init>
	MX_TIM1_Init();
 8001c1c:	f000 f93c 	bl	8001e98 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c20:	f000 f9ca 	bl	8001fb8 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001c24:	f000 fa52 	bl	80020cc <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8001c28:	f000 fa76 	bl	8002118 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	static uint32_t schdule_tick = 0;
	Echo_PCI_State_Init();
 8001c2c:	f7ff fede 	bl	80019ec <Echo_PCI_State_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001c30:	e7fe      	b.n	8001c30 <main+0x34>
	...

08001c34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b096      	sub	sp, #88	; 0x58
 8001c38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2244      	movs	r2, #68	; 0x44
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 fc30 	bl	80094a8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c5a:	f003 f9e5 	bl	8005028 <HAL_PWREx_ControlVoltageScaling>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001c64:	f000 fb6c 	bl	8002340 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c68:	f003 f9c0 	bl	8004fec <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <SystemClock_Config+0xa8>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <SystemClock_Config+0xa8>)
 8001c74:	f023 0318 	bic.w	r3, r3, #24
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001c7c:	2314      	movs	r3, #20
 8001c7e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c84:	2301      	movs	r3, #1
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fa1b 	bl	80050d4 <HAL_RCC_OscConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8001ca4:	f000 fb4c 	bl	8002340 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fe69 	bl	8005998 <HAL_RCC_ClockConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001ccc:	f000 fb38 	bl	8002340 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001cd0:	f004 fa0c 	bl	80060ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8001cd4:	bf00      	nop
 8001cd6:	3758      	adds	r7, #88	; 0x58
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode =
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d04:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <MX_ADC1_Init+0xe4>)
 8001d06:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d22:	2208      	movs	r2, #8
 8001d24:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d62:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d64:	f001 fa38 	bl	80031d8 <HAL_ADC_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8001d6e:	f000 fae7 	bl	8002340 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001d7e:	f002 fb7f 	bl	8004480 <HAL_ADCEx_MultiModeConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001d88:	f000 fada 	bl	8002340 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_ADC1_Init+0xe8>)
 8001d8e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d90:	2306      	movs	r3, #6
 8001d92:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001d94:	2304      	movs	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d98:	237f      	movs	r3, #127	; 0x7f
 8001d9a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_ADC1_Init+0xe0>)
 8001daa:	f001 fc85 	bl	80036b8 <HAL_ADC_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8001db4:	f000 fac4 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200004ac 	.word	0x200004ac
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	2e300800 	.word	0x2e300800

08001dcc <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001de4:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <MX_ADC2_Init+0xc4>)
 8001de6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e02:	2204      	movs	r2, #4
 8001e04:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e22:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e48:	f001 f9c6 	bl	80031d8 <HAL_ADC_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_ADC2_Init+0x8a>
	{
		Error_Handler();
 8001e52:	f000 fa75 	bl	8002340 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_ADC2_Init+0xc8>)
 8001e58:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e62:	237f      	movs	r3, #127	; 0x7f
 8001e64:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e66:	2304      	movs	r3, #4
 8001e68:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <MX_ADC2_Init+0xc0>)
 8001e74:	f001 fc20 	bl	80036b8 <HAL_ADC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC2_Init+0xb6>
	{
		Error_Handler();
 8001e7e:	f000 fa5f 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000510 	.word	0x20000510
 8001e90:	50040100 	.word	0x50040100
 8001e94:	32601000 	.word	0x32601000

08001e98 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b096      	sub	sp, #88	; 0x58
 8001e9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8001e9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8001eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	222c      	movs	r2, #44	; 0x2c
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f007 faef 	bl	80094a8 <memset>
	{ 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ecc:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <MX_TIM1_Init+0x11c>)
 8001ece:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 8001edc:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ede:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ee2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ef6:	482e      	ldr	r0, [pc, #184]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001ef8:	f004 fd1a 	bl	8006930 <HAL_TIM_PWM_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001f02:	f000 fa1d 	bl	8002340 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4825      	ldr	r0, [pc, #148]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001f1a:	f005 fd8b 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001f24:	f000 fa0c 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f28:	2360      	movs	r3, #96	; 0x60
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001f4e:	f005 f847 	bl	8006fe0 <HAL_TIM_PWM_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001f58:	f000 f9f2 	bl	8002340 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001f92:	f005 fdb5 	bl	8007b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 8001f9c:	f000 f9d0 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM1_Init+0x118>)
 8001fa2:	f000 fba9 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 8001fa6:	bf00      	nop
 8001fa8:	3758      	adds	r7, #88	; 0x58
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000604 	.word	0x20000604
 8001fb4:	40012c00 	.word	0x40012c00

08001fb8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <MX_TIM2_Init+0x110>)
 8001fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <MX_TIM2_Init+0x110>)
 8001fe6:	224f      	movs	r2, #79	; 0x4f
 8001fe8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <MX_TIM2_Init+0x110>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <MX_TIM2_Init+0x110>)
 8001ff2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <MX_TIM2_Init+0x110>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <MX_TIM2_Init+0x110>)
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002004:	4830      	ldr	r0, [pc, #192]	; (80020c8 <MX_TIM2_Init+0x110>)
 8002006:	f004 f95c 	bl	80062c2 <HAL_TIM_OC_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8002010:	f000 f996 	bl	8002340 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002014:	482c      	ldr	r0, [pc, #176]	; (80020c8 <MX_TIM2_Init+0x110>)
 8002016:	f004 fc8b 	bl	8006930 <HAL_TIM_PWM_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 8002020:	f000 f98e 	bl	8002340 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002024:	2320      	movs	r3, #32
 8002026:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4825      	ldr	r0, [pc, #148]	; (80020c8 <MX_TIM2_Init+0x110>)
 8002034:	f005 fcfe 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 800203e:	f000 f97f 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002042:	2330      	movs	r3, #48	; 0x30
 8002044:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 5;
 8002046:	2305      	movs	r3, #5
 8002048:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <MX_TIM2_Init+0x110>)
 800205a:	f004 ff47 	bl	8006eec <HAL_TIM_OC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM2_Init+0xb0>
	{
		Error_Handler();
 8002064:	f000 f96c 	bl	8002340 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1010;
 800206c:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8002070:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4813      	ldr	r0, [pc, #76]	; (80020c8 <MX_TIM2_Init+0x110>)
 800207a:	f004 ffb1 	bl	8006fe0 <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0xd0>
	{
		Error_Handler();
 8002084:	f000 f95c 	bl	8002340 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_TIM2_Init+0x110>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_TIM2_Init+0x110>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002096:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002098:	2330      	movs	r3, #48	; 0x30
 800209a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1040;
 800209c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80020a0:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	220c      	movs	r2, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_TIM2_Init+0x110>)
 80020aa:	f004 ff1f 	bl	8006eec <HAL_TIM_OC_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM2_Init+0x100>
	{
		Error_Handler();
 80020b4:	f000 f944 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <MX_TIM2_Init+0x110>)
 80020ba:	f000 fb1d 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000650 	.word	0x20000650

080020cc <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <MX_TIM16_Init+0x44>)
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <MX_TIM16_Init+0x48>)
 80020d4:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 79;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_TIM16_Init+0x44>)
 80020d8:	224f      	movs	r2, #79	; 0x4f
 80020da:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_TIM16_Init+0x44>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 999;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <MX_TIM16_Init+0x44>)
 80020e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_TIM16_Init+0x44>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <MX_TIM16_Init+0x44>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_TIM16_Init+0x44>)
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <MX_TIM16_Init+0x44>)
 80020fe:	f004 f805 	bl	800610c <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM16_Init+0x40>
	{
		Error_Handler();
 8002108:	f000 f91a 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000069c 	.word	0x2000069c
 8002114:	40014400 	.word	0x40014400

08002118 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART1_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800215c:	f005 fd66 	bl	8007c2c <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002166:	f000 f8eb 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000778 	.word	0x20000778
 8002174:	40013800 	.word	0x40013800

08002178 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <MX_USART2_UART_Init+0x5c>)
 8002180:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_USART2_UART_Init+0x58>)
 80021bc:	f005 fd36 	bl	8007c2c <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80021c6:	f000 f8bb 	bl	8002340 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200007fc 	.word	0x200007fc
 80021d4:	40004400 	.word	0x40004400

080021d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_DMA_Init+0x68>)
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <MX_DMA_Init+0x68>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6493      	str	r3, [r2, #72]	; 0x48
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MX_DMA_Init+0x68>)
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2102      	movs	r1, #2
 80021fa:	200b      	movs	r0, #11
 80021fc:	f002 fabf 	bl	800477e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002200:	200b      	movs	r0, #11
 8002202:	f002 fad8 	bl	80047b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2102      	movs	r1, #2
 800220a:	200c      	movs	r0, #12
 800220c:	f002 fab7 	bl	800477e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002210:	200c      	movs	r0, #12
 8002212:	f002 fad0 	bl	80047b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	200f      	movs	r0, #15
 800221c:	f002 faaf 	bl	800477e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002220:	200f      	movs	r0, #15
 8002222:	f002 fac8 	bl	80047b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2011      	movs	r0, #17
 800222c:	f002 faa7 	bl	800477e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002230:	2011      	movs	r0, #17
 8002232:	f002 fac0 	bl	80047b6 <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	4b36      	ldr	r3, [pc, #216]	; (8002334 <MX_GPIO_Init+0xf0>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a35      	ldr	r2, [pc, #212]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <MX_GPIO_Init+0xf0>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a29      	ldr	r2, [pc, #164]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <MX_GPIO_Init+0xf0>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <MX_GPIO_Init+0xf0>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a23      	ldr	r2, [pc, #140]	; (8002334 <MX_GPIO_Init+0xf0>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <MX_GPIO_Init+0xf0>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80022ba:	2200      	movs	r2, #0
 80022bc:	f641 6130 	movw	r1, #7728	; 0x1e30
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c4:	f002 fe7a 	bl	8004fbc <HAL_GPIO_WritePin>
	SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80022c8:	2200      	movs	r2, #0
 80022ca:	f242 0133 	movw	r1, #8243	; 0x2033
 80022ce:	481a      	ldr	r0, [pc, #104]	; (8002338 <MX_GPIO_Init+0xf4>)
 80022d0:	f002 fe74 	bl	8004fbc <HAL_GPIO_WritePin>
			QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin | BIPHASIC_SW_Pin
					| PEAK_DISCHG_SW_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : START_BTN_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022de:	2302      	movs	r3, #2
 80022e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4814      	ldr	r0, [pc, #80]	; (800233c <MX_GPIO_Init+0xf8>)
 80022ea:	f002 fcf5 	bl	8004cd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin DAC0_Pin DAC1_Pin
	 DAC2_Pin DAC3_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin
 80022ee:	f641 6330 	movw	r3, #7728	; 0x1e30
 80022f2:	617b      	str	r3, [r7, #20]
			| DAC2_Pin | DAC3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230a:	f002 fce5 	bl	8004cd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : QCC_CTRL0_Pin QCC_CTRL1_Pin LED_Pin BIPHASIC_SW_Pin
	 PEAK_DISCHG_SW_Pin */
	GPIO_InitStruct.Pin = QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin
 800230e:	f242 0333 	movw	r3, #8243	; 0x2033
 8002312:	617b      	str	r3, [r7, #20]
			| BIPHASIC_SW_Pin | PEAK_DISCHG_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_GPIO_Init+0xf4>)
 8002328:	f002 fcd6 	bl	8004cd8 <HAL_GPIO_Init>

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	48000400 	.word	0x48000400
 800233c:	48000800 	.word	0x48000800

08002340 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002348:	e7fe      	b.n	8002348 <Error_Handler+0x8>
	...

0800234c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_MspInit+0x44>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_MspInit+0x44>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x44>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x44>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_ADC_MspInit+0x19c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d159      	bne.n	800246a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 80023be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80023c0:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10b      	bne.n	80023e0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80023c8:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	4a5a      	ldr	r2, [pc, #360]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VDDH_FEEDBACK_Pin;
 80023f8:	2340      	movs	r3, #64	; 0x40
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023fc:	230b      	movs	r3, #11
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240e:	f002 fc63 	bl	8004cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_ADC_MspInit+0x1ac>)
 8002416:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002418:	4b48      	ldr	r3, [pc, #288]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800242a:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002430:	4b42      	ldr	r3, [pc, #264]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002436:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 800243a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002440:	4b3e      	ldr	r3, [pc, #248]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800244c:	483b      	ldr	r0, [pc, #236]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 800244e:	f002 f9cd 	bl	80047ec <HAL_DMA_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002458:	f7ff ff72 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a37      	ldr	r2, [pc, #220]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002460:	64da      	str	r2, [r3, #76]	; 0x4c
 8002462:	4a36      	ldr	r2, [pc, #216]	; (800253c <HAL_ADC_MspInit+0x1a8>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002468:	e05d      	b.n	8002526 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_ADC_MspInit+0x1b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d158      	bne.n	8002526 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 800247c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_ADC_MspInit+0x1a0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10b      	bne.n	800249e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 800248c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a25      	ldr	r2, [pc, #148]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_ADC_MspInit+0x1a4>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_Pin;
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024ba:	230b      	movs	r3, #11
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024cc:	f002 fc04 	bl	8004cd8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_ADC_MspInit+0x1b8>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 80024f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 800250c:	f002 f96e 	bl	80047ec <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8002516:	f7ff ff13 	bl	8002340 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 800251e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_ADC_MspInit+0x1b4>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002526:	bf00      	nop
 8002528:	3730      	adds	r7, #48	; 0x30
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	50040000 	.word	0x50040000
 8002534:	20000880 	.word	0x20000880
 8002538:	40021000 	.word	0x40021000
 800253c:	20000574 	.word	0x20000574
 8002540:	40020008 	.word	0x40020008
 8002544:	50040100 	.word	0x50040100
 8002548:	200005bc 	.word	0x200005bc
 800254c:	4002001c 	.word	0x4002001c

08002550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_TIM_PWM_MspInit+0x44>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_TIM_PWM_MspInit+0x48>)
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_TIM_PWM_MspInit+0x48>)
 8002568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800256c:	6613      	str	r3, [r2, #96]	; 0x60
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_TIM_PWM_MspInit+0x48>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2102      	movs	r1, #2
 800257e:	2019      	movs	r0, #25
 8002580:	f002 f8fd 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002584:	2019      	movs	r0, #25
 8002586:	f002 f916 	bl	80047b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d16f      	bne.n	800268e <HAL_TIM_OC_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ae:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_TIM_OC_MspInit+0xfc>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	4a39      	ldr	r2, [pc, #228]	; (8002698 <HAL_TIM_OC_MspInit+0xfc>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_TIM_OC_MspInit+0xfc>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_TIM_OC_MspInit+0x104>)
 80025ca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80025cc:	4b33      	ldr	r3, [pc, #204]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025ce:	2204      	movs	r2, #4
 80025d0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025f2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002600:	4826      	ldr	r0, [pc, #152]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 8002602:	f002 f8f3 	bl	80047ec <HAL_DMA_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_TIM_OC_MspInit+0x74>
    {
      Error_Handler();
 800260c:	f7ff fe98 	bl	8002340 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_TIM_OC_MspInit+0x100>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_TIM_OC_MspInit+0x10c>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002630:	2204      	movs	r2, #4
 8002632:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002654:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002662:	4810      	ldr	r0, [pc, #64]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002664:	f002 f8c2 	bl	80047ec <HAL_DMA_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_TIM_OC_MspInit+0xd6>
    {
      Error_Handler();
 800266e:	f7ff fe67 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_TIM_OC_MspInit+0x108>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2102      	movs	r1, #2
 8002682:	201c      	movs	r0, #28
 8002684:	f002 f87b 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002688:	201c      	movs	r0, #28
 800268a:	f002 f894 	bl	80047b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	200006e8 	.word	0x200006e8
 80026a0:	40020080 	.word	0x40020080
 80026a4:	20000730 	.word	0x20000730
 80026a8:	40020058 	.word	0x40020058

080026ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_TIM_Base_MspInit+0x44>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d113      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_TIM_Base_MspInit+0x48>)
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_TIM_Base_MspInit+0x48>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0x48>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2102      	movs	r1, #2
 80026da:	2019      	movs	r0, #25
 80026dc:	f002 f84f 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026e0:	2019      	movs	r0, #25
 80026e2:	f002 f868 	bl	80047b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <HAL_TIM_MspPostInit+0xe8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11e      	bne.n	8002758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f002 fac1 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002756:	e03f      	b.n	80027d8 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d13a      	bne.n	80027d8 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_TIM_MspPostInit+0xec>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CURRENT_CTRL_Pin;
 8002792:	f248 0302 	movw	r3, #32770	; 0x8002
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a4:	2301      	movs	r3, #1
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f002 fa91 	bl	8004cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
 80027b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c8:	2301      	movs	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_TIM_MspPostInit+0xf0>)
 80027d4:	f002 fa80 	bl	8004cd8 <HAL_GPIO_Init>
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	48000400 	.word	0x48000400

080027ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b098      	sub	sp, #96	; 0x60
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	2234      	movs	r2, #52	; 0x34
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f006 fe4b 	bl	80094a8 <memset>
  if(huart->Instance==USART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_UART_MspInit+0x140>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d13e      	bne.n	800289a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800281c:	2301      	movs	r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fad9 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002834:	f7ff fd84 	bl	8002340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_UART_MspInit+0x144>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <HAL_UART_MspInit+0x144>)
 800283e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002842:	6613      	str	r3, [r2, #96]	; 0x60
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_UART_MspInit+0x144>)
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_UART_MspInit+0x144>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_UART_MspInit+0x144>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_UART_MspInit+0x144>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002878:	2307      	movs	r3, #7
 800287a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002880:	4619      	mov	r1, r3
 8002882:	482c      	ldr	r0, [pc, #176]	; (8002934 <HAL_UART_MspInit+0x148>)
 8002884:	f002 fa28 	bl	8004cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2025      	movs	r0, #37	; 0x25
 800288e:	f001 ff76 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002892:	2025      	movs	r0, #37	; 0x25
 8002894:	f001 ff8f 	bl	80047b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002898:	e043      	b.n	8002922 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a26      	ldr	r2, [pc, #152]	; (8002938 <HAL_UART_MspInit+0x14c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d13e      	bne.n	8002922 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fa95 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80028bc:	f7ff fd40 	bl	8002340 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_UART_MspInit+0x144>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028f0:	230c      	movs	r3, #12
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002900:	2307      	movs	r3, #7
 8002902:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f002 f9e3 	bl	8004cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2026      	movs	r0, #38	; 0x26
 8002918:	f001 ff31 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291c:	2026      	movs	r0, #38	; 0x26
 800291e:	f001 ff4a 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3760      	adds	r7, #96	; 0x60
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40013800 	.word	0x40013800
 8002930:	40021000 	.word	0x40021000
 8002934:	48000400 	.word	0x48000400
 8002938:	40004400 	.word	0x40004400

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002988:	f000 f9ac 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Channel1_IRQHandler+0x10>)
 8002996:	f002 f8c0 	bl	8004b1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000574 	.word	0x20000574

080029a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Channel2_IRQHandler+0x10>)
 80029aa:	f002 f8b6 	bl	8004b1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200005bc 	.word	0x200005bc

080029b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA1_Channel5_IRQHandler+0x10>)
 80029be:	f002 f8ac 	bl	8004b1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000730 	.word	0x20000730

080029cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Channel7_IRQHandler+0x10>)
 80029d2:	f002 f8a2 	bl	8004b1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200006e8 	.word	0x200006e8

080029e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80029e6:	f004 f961 	bl	8006cac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80029ea:	4803      	ldr	r0, [pc, #12]	; (80029f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80029ec:	f004 f95e 	bl	8006cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000604 	.word	0x20000604
 80029f8:	2000069c 	.word	0x2000069c

080029fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM2_IRQHandler+0x10>)
 8002a02:	f004 f953 	bl	8006cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000650 	.word	0x20000650

08002a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART1_IRQHandler+0x10>)
 8002a16:	f005 fb09 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000778 	.word	0x20000778

08002a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <USART2_IRQHandler+0x10>)
 8002a2a:	f005 faff 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200007fc 	.word	0x200007fc

08002a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_kill>:

int _kill(int pid, int sig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a52:	f006 fcff 	bl	8009454 <__errno>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2216      	movs	r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_exit>:

void _exit (int status)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffe7 	bl	8002a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a7a:	e7fe      	b.n	8002a7a <_exit+0x12>

08002a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e00a      	b.n	8002aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a8e:	f3af 8000 	nop.w
 8002a92:	4601      	mov	r1, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	dbf0      	blt.n	8002a8e <_read+0x12>
	}

return len;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e009      	b.n	8002adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fd91 	bl	80015f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf1      	blt.n	8002ac8 <_write+0x12>
	}
	return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_close>:

int _close(int file)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b16:	605a      	str	r2, [r3, #4]
	return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_isatty>:

int _isatty(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f006 fc64 	bl	8009454 <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	2000a000 	.word	0x2000a000
 8002bb8:	00000800 	.word	0x00000800
 8002bbc:	20000884 	.word	0x20000884
 8002bc0:	200008a0 	.word	0x200008a0

08002bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bec:	f7ff ffea 	bl	8002bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	; (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c16:	f006 fc23 	bl	8009460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1a:	f7fe ffef 	bl	8001bfc <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002c2c:	0800e814 	.word	0x0800e814
  ldr r2, =_sbss
 8002c30:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002c34:	2000089c 	.word	0x2000089c

08002c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_2_IRQHandler>

08002c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f001 fd8f 	bl	8004768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f000 f80e 	bl	8002c6c <HAL_InitTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	e001      	b.n	8002c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c5c:	f7ff fb76 	bl	800234c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c60:	79fb      	ldrb	r3, [r7, #7]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_InitTick+0x6c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_InitTick+0x70>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_InitTick+0x6c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fd9b 	bl	80047d2 <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d809      	bhi.n	8002cbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f001 fd65 	bl	800477e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_InitTick+0x74>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e004      	b.n	8002ccc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e001      	b.n	8002ccc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000014 	.word	0x20000014
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	20000010 	.word	0x20000010

08002ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x20>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000014 	.word	0x20000014
 8002d08:	20000888 	.word	0x20000888

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000888 	.word	0x20000888

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff ffee 	bl	8002d0c <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d005      	beq.n	8002d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_Delay+0x44>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4a:	bf00      	nop
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f7      	bhi.n	8002d4c <HAL_Delay+0x28>
  {
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000014 	.word	0x20000014

08002d6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <LL_ADC_SetOffset+0x44>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	03fff000 	.word	0x03fff000

08002e1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3330      	adds	r3, #48	; 0x30
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	211f      	movs	r1, #31
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 011f 	and.w	r1, r3, #31
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b087      	sub	sp, #28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3314      	adds	r3, #20
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0e5b      	lsrs	r3, r3, #25
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0d1b      	lsrs	r3, r3, #20
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2107      	movs	r1, #7
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	0d1b      	lsrs	r3, r3, #20
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	431a      	orrs	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0318 	and.w	r3, r3, #24
 8002f9a:	4908      	ldr	r1, [pc, #32]	; (8002fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	0007ffff 	.word	0x0007ffff

08002fc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6093      	str	r3, [r2, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003014:	d101      	bne.n	800301a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800303c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003064:	d101      	bne.n	800306a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <LL_ADC_IsEnabled+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_ADC_IsEnabled+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d101      	bne.n	8003106 <LL_ADC_IsDisableOngoing+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_ADC_IsDisableOngoing+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800314c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003150:	f043 0210 	orr.w	r2, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d101      	bne.n	800317c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d101      	bne.n	80031ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e131      	b.n	8003456 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff f8c7 	bl	8002394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fef1 	bl	8003000 <LL_ADC_IsDeepPowerDownEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fed7 	bl	8002fdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff0c 	bl	8003050 <LL_ADC_IsInternalRegulatorEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fef0 	bl	8003028 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003248:	4b85      	ldr	r3, [pc, #532]	; (8003460 <HAL_ADC_Init+0x288>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	4a85      	ldr	r2, [pc, #532]	; (8003464 <HAL_ADC_Init+0x28c>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800325c:	e002      	b.n	8003264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff feee 	bl	8003050 <LL_ADC_IsInternalRegulatorEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff62 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80ca 	bne.w	8003444 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80c6 	bne.w	8003444 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032c0:	f043 0202 	orr.w	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fefb 	bl	80030c8 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d110      	bne.n	80032fa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d8:	4863      	ldr	r0, [pc, #396]	; (8003468 <HAL_ADC_Init+0x290>)
 80032da:	f7ff fef5 	bl	80030c8 <LL_ADC_IsEnabled>
 80032de:	4604      	mov	r4, r0
 80032e0:	4862      	ldr	r0, [pc, #392]	; (800346c <HAL_ADC_Init+0x294>)
 80032e2:	f7ff fef1 	bl	80030c8 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4323      	orrs	r3, r4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	485e      	ldr	r0, [pc, #376]	; (8003470 <HAL_ADC_Init+0x298>)
 80032f6:	f7ff fd39 	bl	8002d6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7e5b      	ldrb	r3, [r3, #25]
 80032fe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003304:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800330a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003310:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003318:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	3b01      	subs	r3, #1
 800332e:	045b      	lsls	r3, r3, #17
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_ADC_Init+0x29c>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	430b      	orrs	r3, r1
 8003364:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fefa 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003370:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff1b 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 800337c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d13d      	bne.n	8003400 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d13a      	bne.n	8003400 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800338e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003396:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a6:	f023 0302 	bic.w	r3, r3, #2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d118      	bne.n	80033f0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033e0:	430a      	orrs	r2, r1
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e007      	b.n	8003400 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10c      	bne.n	8003422 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f023 010f 	bic.w	r1, r3, #15
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
 8003420:	e007      	b.n	8003432 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020f 	bic.w	r2, r2, #15
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
 8003442:	e007      	b.n	8003454 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0210 	orr.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003454:	7ffb      	ldrb	r3, [r7, #31]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	bf00      	nop
 8003460:	2000000c 	.word	0x2000000c
 8003464:	053e2d63 	.word	0x053e2d63
 8003468:	50040000 	.word	0x50040000
 800346c:	50040100 	.word	0x50040100
 8003470:	50040300 	.word	0x50040300
 8003474:	fff0c007 	.word	0xfff0c007

08003478 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003484:	4850      	ldr	r0, [pc, #320]	; (80035c8 <HAL_ADC_Start_DMA+0x150>)
 8003486:	f7ff fd9b 	bl	8002fc0 <LL_ADC_GetMultimode>
 800348a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe67 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 808e 	bne.w	80035ba <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_Start_DMA+0x34>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e089      	b.n	80035c0 <HAL_ADC_Start_DMA+0x148>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d002      	beq.n	80034c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b09      	cmp	r3, #9
 80034c4:	d172      	bne.n	80035ac <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fdae 	bl	8004028 <ADC_Enable>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d165      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a37      	ldr	r2, [pc, #220]	; (80035cc <HAL_ADC_Start_DMA+0x154>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d002      	beq.n	80034fa <HAL_ADC_Start_DMA+0x82>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	e000      	b.n	80034fc <HAL_ADC_Start_DMA+0x84>
 80034fa:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_ADC_Start_DMA+0x158>)
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4293      	cmp	r3, r2
 8003502:	d002      	beq.n	800350a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f023 0206 	bic.w	r2, r3, #6
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58
 800352e:	e002      	b.n	8003536 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_ADC_Start_DMA+0x15c>)
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <HAL_ADC_Start_DMA+0x160>)
 8003544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_ADC_Start_DMA+0x164>)
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	221c      	movs	r2, #28
 8003554:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0210 	orr.w	r2, r2, #16
 800356c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3340      	adds	r3, #64	; 0x40
 8003588:	4619      	mov	r1, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f001 f9e5 	bl	800495c <HAL_DMA_Start_IT>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fdba 	bl	8003114 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035a0:	e00d      	b.n	80035be <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80035aa:	e008      	b.n	80035be <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035b8:	e001      	b.n	80035be <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
 80035bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	50040300 	.word	0x50040300
 80035cc:	50040100 	.word	0x50040100
 80035d0:	50040000 	.word	0x50040000
 80035d4:	080041f3 	.word	0x080041f3
 80035d8:	080042cb 	.word	0x080042cb
 80035dc:	080042e7 	.word	0x080042e7

080035e0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Stop_DMA+0x16>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e051      	b.n	800369a <HAL_ADC_Stop_DMA+0xba>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035fe:	2103      	movs	r1, #3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fc55 	bl	8003eb0 <ADC_ConversionStop>
 8003606:	4603      	mov	r3, r0
 8003608:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d13f      	bne.n	8003690 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d10f      	bne.n	800364e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4618      	mov	r0, r3
 8003634:	f001 f9f2 	bl	8004a1c <HAL_DMA_Abort>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0210 	bic.w	r2, r2, #16
 800365c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fd65 	bl	8004134 <ADC_Disable>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e002      	b.n	8003676 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fd5f 	bl	8004134 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0b6      	sub	sp, #216	; 0xd8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x22>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e3d5      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x7ce>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fd3c 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 83ba 	bne.w	8003e68 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d824      	bhi.n	8003746 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	3b02      	subs	r3, #2
 8003702:	2b03      	cmp	r3, #3
 8003704:	d81b      	bhi.n	800373e <HAL_ADC_ConfigChannel+0x86>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_ADC_ConfigChannel+0x54>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003725 	.word	0x08003725
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003735 	.word	0x08003735
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	220c      	movs	r2, #12
 8003720:	605a      	str	r2, [r3, #4]
          break;
 8003722:	e011      	b.n	8003748 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2212      	movs	r2, #18
 8003728:	605a      	str	r2, [r3, #4]
          break;
 800372a:	e00d      	b.n	8003748 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2218      	movs	r2, #24
 8003730:	605a      	str	r2, [r3, #4]
          break;
 8003732:	e009      	b.n	8003748 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373a:	605a      	str	r2, [r3, #4]
          break;
 800373c:	e004      	b.n	8003748 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2206      	movs	r2, #6
 8003742:	605a      	str	r2, [r3, #4]
          break;
 8003744:	e000      	b.n	8003748 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003746:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	f7ff fbb8 	bl	8002eca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fd00 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003764:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fd20 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 8003772:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 81c1 	bne.w	8003b02 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 81bc 	bne.w	8003b02 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003792:	d10f      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	f7ff fbbf 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fb66 	bl	8002e7e <LL_ADC_SetSamplingTimeCommonConfig>
 80037b2:	e00e      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f7ff fbae 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb56 	bl	8002e7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00a      	beq.n	800380a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6919      	ldr	r1, [r3, #16]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003804:	f7ff fae6 	bl	8002dd4 <LL_ADC_SetOffset>
 8003808:	e17b      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb03 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x17e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff faf8 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 800382c:	4603      	mov	r3, r0
 800382e:	0e9b      	lsrs	r3, r3, #26
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	e01e      	b.n	8003874 <HAL_ADC_ConfigChannel+0x1bc>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff faed 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003842:	4603      	mov	r3, r0
 8003844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800385c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e004      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_ADC_ConfigChannel+0x1d4>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	e018      	b.n	80038be <HAL_ADC_ConfigChannel+0x206>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80038a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e004      	b.n	80038be <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80038b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038be:	429a      	cmp	r2, r3
 80038c0:	d106      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fabc 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff faa0 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x244>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fa95 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	0e9b      	lsrs	r3, r3, #26
 80038f6:	f003 021f 	and.w	r2, r3, #31
 80038fa:	e01e      	b.n	800393a <HAL_ADC_ConfigChannel+0x282>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fa8a 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800391a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800391e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800392e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	2b00      	cmp	r3, #0
 8003944:	d105      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x29a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	0e9b      	lsrs	r3, r3, #26
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	e018      	b.n	8003984 <HAL_ADC_ConfigChannel+0x2cc>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003966:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800396a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800396e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e004      	b.n	8003984 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800397a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fa59 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2102      	movs	r1, #2
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fa3d 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x30a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fa32 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	e01e      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x348>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fa27 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80039e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80039e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e004      	b.n	80039fe <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80039f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x360>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	e016      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x38e>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e004      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d106      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2102      	movs	r1, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f9f8 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2103      	movs	r1, #3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f9dc 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x3cc>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2103      	movs	r1, #3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f9d1 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	f003 021f 	and.w	r2, r3, #31
 8003a82:	e017      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x3fc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2103      	movs	r1, #3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f9c6 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003a90:	4603      	mov	r3, r0
 8003a92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a9e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	e003      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x414>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0e9b      	lsrs	r3, r3, #26
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	e011      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x438>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	e003      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d106      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2103      	movs	r1, #3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f9a3 	bl	8002e48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fade 	bl	80030c8 <LL_ADC_IsEnabled>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 8140 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f7ff fa29 	bl	8002f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a8f      	ldr	r2, [pc, #572]	; (8003d68 <HAL_ADC_ConfigChannel+0x6b0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 8131 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x4a2>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0e9b      	lsrs	r3, r3, #26
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2b09      	cmp	r3, #9
 8003b50:	bf94      	ite	ls
 8003b52:	2301      	movls	r3, #1
 8003b54:	2300      	movhi	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e019      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x4d6>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b6a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003b72:	2320      	movs	r3, #32
 8003b74:	e003      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d079      	beq.n	8003c86 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x4f6>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	069b      	lsls	r3, r3, #26
 8003ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bac:	e015      	b.n	8003bda <HAL_ADC_ConfigChannel+0x522>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	e003      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x542>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	e017      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x572>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x598>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e9b      	lsrs	r3, r3, #26
 8003c40:	3301      	adds	r3, #1
 8003c42:	f003 021f 	and.w	r2, r3, #31
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	051b      	lsls	r3, r3, #20
 8003c4e:	e018      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x5ca>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e003      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	f003 021f 	and.w	r2, r3, #31
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c82:	430b      	orrs	r3, r1
 8003c84:	e081      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x5ea>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	3301      	adds	r3, #1
 8003c9a:	069b      	lsls	r3, r3, #26
 8003c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca0:	e015      	b.n	8003cce <HAL_ADC_ConfigChannel+0x616>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	069b      	lsls	r3, r3, #26
 8003cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x636>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	e017      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x666>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	61fb      	str	r3, [r7, #28]
  return result;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e003      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x692>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0e9b      	lsrs	r3, r3, #26
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 021f 	and.w	r2, r3, #31
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	3b1e      	subs	r3, #30
 8003d42:	051b      	lsls	r3, r3, #20
 8003d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d48:	e01e      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x6d0>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	613b      	str	r3, [r7, #16]
  return result;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003d62:	2320      	movs	r3, #32
 8003d64:	e006      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x6bc>
 8003d66:	bf00      	nop
 8003d68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	3b1e      	subs	r3, #30
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7ff f8c7 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_ADC_ConfigChannel+0x7d8>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d06c      	beq.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da0:	483c      	ldr	r0, [pc, #240]	; (8003e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8003da2:	f7ff f809 	bl	8002db8 <LL_ADC_GetCommonPathInternalCh>
 8003da6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <HAL_ADC_ConfigChannel+0x7e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d127      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d121      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a35      	ldr	r2, [pc, #212]	; (8003e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d157      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	482f      	ldr	r0, [pc, #188]	; (8003e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8003dd6:	f7fe ffdc 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_ADC_ConfigChannel+0x7e8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	4a30      	ldr	r2, [pc, #192]	; (8003ea4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df4:	e002      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f9      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e02:	e03a      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_ADC_ConfigChannel+0x7f0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d113      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x77e>
 8003e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d12a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4819      	ldr	r0, [pc, #100]	; (8003e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e30:	f7fe ffaf 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e34:	e021      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_ADC_ConfigChannel+0x7f4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d11c      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d111      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e5e:	4619      	mov	r1, r3
 8003e60:	480c      	ldr	r0, [pc, #48]	; (8003e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e62:	f7fe ff96 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
 8003e66:	e008      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f043 0220 	orr.w	r2, r3, #32
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	37d8      	adds	r7, #216	; 0xd8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	80080000 	.word	0x80080000
 8003e94:	50040300 	.word	0x50040300
 8003e98:	c7520000 	.word	0xc7520000
 8003e9c:	50040000 	.word	0x50040000
 8003ea0:	2000000c 	.word	0x2000000c
 8003ea4:	053e2d63 	.word	0x053e2d63
 8003ea8:	cb840000 	.word	0xcb840000
 8003eac:	80000001 	.word	0x80000001

08003eb0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f94c 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003ecc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f96d 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 8003ed8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8098 	beq.w	8004018 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02a      	beq.n	8003f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7e5b      	ldrb	r3, [r3, #25]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d126      	bne.n	8003f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7e1b      	ldrb	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d122      	bne.n	8003f4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f0a:	e014      	b.n	8003f36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4a45      	ldr	r2, [pc, #276]	; (8004024 <ADC_ConversionStop+0x174>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d90d      	bls.n	8003f30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0210 	orr.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e074      	b.n	800401a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d1e3      	bne.n	8003f0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2240      	movs	r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d014      	beq.n	8003f7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f904 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f8c1 	bl	80030ee <LL_ADC_IsDisableOngoing>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f8e0 	bl	800313c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d014      	beq.n	8003fac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f913 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f8a9 	bl	80030ee <LL_ADC_IsDisableOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f8ef 	bl	800318a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d005      	beq.n	8003fbe <ADC_ConversionStop+0x10e>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d105      	bne.n	8003fc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003fb8:	230c      	movs	r3, #12
 8003fba:	617b      	str	r3, [r7, #20]
        break;
 8003fbc:	e005      	b.n	8003fca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	617b      	str	r3, [r7, #20]
        break;
 8003fc2:	e002      	b.n	8003fca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	617b      	str	r3, [r7, #20]
        break;
 8003fc8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003fca:	f7fe fe9f 	bl	8002d0c <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fd0:	e01b      	b.n	800400a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fd2:	f7fe fe9b 	bl	8002d0c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d914      	bls.n	800400a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f043 0210 	orr.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e007      	b.n	800401a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1dc      	bne.n	8003fd2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	a33fffff 	.word	0xa33fffff

08004028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff f845 	bl	80030c8 <LL_ADC_IsEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d169      	bne.n	8004118 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <ADC_Enable+0xfc>)
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e055      	b.n	800411a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff f800 	bl	8003078 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004078:	482b      	ldr	r0, [pc, #172]	; (8004128 <ADC_Enable+0x100>)
 800407a:	f7fe fe9d 	bl	8002db8 <LL_ADC_GetCommonPathInternalCh>
 800407e:	4603      	mov	r3, r0
 8004080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <ADC_Enable+0x104>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	4a28      	ldr	r2, [pc, #160]	; (8004130 <ADC_Enable+0x108>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80040a2:	e002      	b.n	80040aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f9      	bne.n	80040a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040b0:	f7fe fe2c 	bl	8002d0c <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b6:	e028      	b.n	800410a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f803 	bl	80030c8 <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe ffd3 	bl	8003078 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040d2:	f7fe fe1b 	bl	8002d0c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d914      	bls.n	800410a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d00d      	beq.n	800410a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0210 	orr.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d1cf      	bne.n	80040b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	8000003f 	.word	0x8000003f
 8004128:	50040300 	.word	0x50040300
 800412c:	2000000c 	.word	0x2000000c
 8004130:	053e2d63 	.word	0x053e2d63

08004134 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe ffd4 	bl	80030ee <LL_ADC_IsDisableOngoing>
 8004146:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ffbb 	bl	80030c8 <LL_ADC_IsEnabled>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d047      	beq.n	80041e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d144      	bne.n	80041e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030d 	and.w	r3, r3, #13
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10c      	bne.n	8004186 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe ff95 	bl	80030a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2203      	movs	r2, #3
 800417c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800417e:	f7fe fdc5 	bl	8002d0c <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004184:	e029      	b.n	80041da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0210 	orr.w	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	f043 0201 	orr.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e023      	b.n	80041ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041a2:	f7fe fdb3 	bl	8002d0c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d914      	bls.n	80041da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e007      	b.n	80041ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1dc      	bne.n	80041a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d14b      	bne.n	80042a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d021      	beq.n	800426a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fe3a 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d032      	beq.n	800429c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d12b      	bne.n	800429c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11f      	bne.n	800429c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
 8004268:	e018      	b.n	800429c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7fc feab 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042a2:	e00e      	b.n	80042c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7fc ff43 	bl	800113c <HAL_ADC_ErrorCallback>
}
 80042b6:	e004      	b.n	80042c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff f9e2 	bl	80036a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7fc ff15 	bl	800113c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <LL_ADC_IsEnabled>:
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <LL_ADC_IsEnabled+0x18>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <LL_ADC_IsEnabled+0x1a>
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_ADC_StartCalibration>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800435c:	4313      	orrs	r3, r2
 800435e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_ADC_IsCalibrationOnGoing>:
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004386:	d101      	bne.n	800438c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_ADC_REG_IsConversionOngoing>:
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d101      	bne.n	80043b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_ADCEx_Calibration_Start+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e04d      	b.n	8004478 <HAL_ADCEx_Calibration_Start+0xb8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fea5 	bl	8004134 <ADC_Disable>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d136      	bne.n	8004462 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043fc:	f023 0302 	bic.w	r3, r3, #2
 8004400:	f043 0202 	orr.w	r2, r3, #2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff96 	bl	8004340 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004414:	e014      	b.n	8004440 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004422:	d30d      	bcc.n	8004440 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004428:	f023 0312 	bic.w	r3, r3, #18
 800442c:	f043 0210 	orr.w	r2, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e01b      	b.n	8004478 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff94 	bl	8004372 <LL_ADC_IsCalibrationOnGoing>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e2      	bne.n	8004416 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f023 0303 	bic.w	r3, r3, #3
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
 8004460:	e005      	b.n	800446e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b09f      	sub	sp, #124	; 0x7c
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800449a:	2302      	movs	r3, #2
 800449c:	e089      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044a6:	2300      	movs	r3, #0
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044aa:	2300      	movs	r3, #0
 80044ac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a42      	ldr	r2, [pc, #264]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d102      	bne.n	80044be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044b8:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	e001      	b.n	80044c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e068      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff59 	bl	800439a <LL_ADC_REG_IsConversionOngoing>
 80044e8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff53 	bl	800439a <LL_ADC_REG_IsConversionOngoing>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d14a      	bne.n	8004590 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d147      	bne.n	8004590 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004500:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004502:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d027      	beq.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800451e:	035b      	lsls	r3, r3, #13
 8004520:	430b      	orrs	r3, r1
 8004522:	431a      	orrs	r2, r3
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004528:	4824      	ldr	r0, [pc, #144]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800452a:	f7ff fef6 	bl	800431a <LL_ADC_IsEnabled>
 800452e:	4604      	mov	r4, r0
 8004530:	4823      	ldr	r0, [pc, #140]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004532:	f7ff fef2 	bl	800431a <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	4323      	orrs	r3, r4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d132      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004546:	f023 030f 	bic.w	r3, r3, #15
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	430a      	orrs	r2, r1
 8004554:	431a      	orrs	r2, r3
 8004556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004558:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800455a:	e023      	b.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004568:	4814      	ldr	r0, [pc, #80]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800456a:	f7ff fed6 	bl	800431a <LL_ADC_IsEnabled>
 800456e:	4604      	mov	r4, r0
 8004570:	4813      	ldr	r0, [pc, #76]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004572:	f7ff fed2 	bl	800431a <LL_ADC_IsEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	4323      	orrs	r3, r4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d112      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800457e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004586:	f023 030f 	bic.w	r3, r3, #15
 800458a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800458c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800458e:	e009      	b.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045a2:	e000      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	377c      	adds	r7, #124	; 0x7c
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	50040000 	.word	0x50040000
 80045c0:	50040100 	.word	0x50040100
 80045c4:	50040300 	.word	0x50040300

080045c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <__NVIC_GetPriorityGrouping+0x18>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0307 	and.w	r3, r3, #7
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db0b      	blt.n	8004656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4907      	ldr	r1, [pc, #28]	; (8004664 <__NVIC_EnableIRQ+0x38>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2001      	movs	r0, #1
 800464e:	fa00 f202 	lsl.w	r2, r0, r2
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	; (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	; (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f1c3 0307 	rsb	r3, r3, #7
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf28      	it	cs
 80046da:	2304      	movcs	r3, #4
 80046dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d902      	bls.n	80046ec <NVIC_EncodePriority+0x30>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3b03      	subs	r3, #3
 80046ea:	e000      	b.n	80046ee <NVIC_EncodePriority+0x32>
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004704:	f04f 31ff 	mov.w	r1, #4294967295
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43d9      	mvns	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	4313      	orrs	r3, r2
         );
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	; 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004734:	d301      	bcc.n	800473a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004736:	2301      	movs	r3, #1
 8004738:	e00f      	b.n	800475a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <SysTick_Config+0x40>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004742:	210f      	movs	r1, #15
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	f7ff ff8e 	bl	8004668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <SysTick_Config+0x40>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <SysTick_Config+0x40>)
 8004754:	2207      	movs	r2, #7
 8004756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000e010 	.word	0xe000e010

08004768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff ff29 	bl	80045c8 <__NVIC_SetPriorityGrouping>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004790:	f7ff ff3e 	bl	8004610 <__NVIC_GetPriorityGrouping>
 8004794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7ff ff8e 	bl	80046bc <NVIC_EncodePriority>
 80047a0:	4602      	mov	r2, r0
 80047a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff5d 	bl	8004668 <__NVIC_SetPriority>
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff31 	bl	800462c <__NVIC_EnableIRQ>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ffa2 	bl	8004724 <SysTick_Config>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e098      	b.n	8004930 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <HAL_DMA_Init+0x150>)
 8004806:	429a      	cmp	r2, r3
 8004808:	d80f      	bhi.n	800482a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_DMA_Init+0x154>)
 8004812:	4413      	add	r3, r2
 8004814:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <HAL_DMA_Init+0x158>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a48      	ldr	r2, [pc, #288]	; (8004948 <HAL_DMA_Init+0x15c>)
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
 8004828:	e00e      	b.n	8004848 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_DMA_Init+0x160>)
 8004832:	4413      	add	r3, r2
 8004834:	4a43      	ldr	r2, [pc, #268]	; (8004944 <HAL_DMA_Init+0x158>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	009a      	lsls	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a42      	ldr	r2, [pc, #264]	; (8004950 <HAL_DMA_Init+0x164>)
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800486c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a2:	d039      	beq.n	8004918 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <HAL_DMA_Init+0x15c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d11a      	bne.n	80048e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_DMA_Init+0x168>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f003 031c 	and.w	r3, r3, #28
 80048ba:	210f      	movs	r1, #15
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	4924      	ldr	r1, [pc, #144]	; (8004954 <HAL_DMA_Init+0x168>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <HAL_DMA_Init+0x168>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f003 031c 	and.w	r3, r3, #28
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	491d      	ldr	r1, [pc, #116]	; (8004954 <HAL_DMA_Init+0x168>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
 80048e2:	e019      	b.n	8004918 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <HAL_DMA_Init+0x16c>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 031c 	and.w	r3, r3, #28
 80048f0:	210f      	movs	r1, #15
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	4917      	ldr	r1, [pc, #92]	; (8004958 <HAL_DMA_Init+0x16c>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_DMA_Init+0x16c>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f003 031c 	and.w	r3, r3, #28
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	4911      	ldr	r1, [pc, #68]	; (8004958 <HAL_DMA_Init+0x16c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40020407 	.word	0x40020407
 8004940:	bffdfff8 	.word	0xbffdfff8
 8004944:	cccccccd 	.word	0xcccccccd
 8004948:	40020000 	.word	0x40020000
 800494c:	bffdfbf8 	.word	0xbffdfbf8
 8004950:	40020400 	.word	0x40020400
 8004954:	400200a8 	.word	0x400200a8
 8004958:	400204a8 	.word	0x400204a8

0800495c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_DMA_Start_IT+0x20>
 8004978:	2302      	movs	r3, #2
 800497a:	e04b      	b.n	8004a14 <HAL_DMA_Start_IT+0xb8>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d13a      	bne.n	8004a06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f95f 	bl	8004c78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 020e 	orr.w	r2, r2, #14
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e00f      	b.n	80049f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0204 	bic.w	r2, r2, #4
 80049e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 020a 	orr.w	r2, r2, #10
 80049f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e005      	b.n	8004a12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d008      	beq.n	8004a46 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2204      	movs	r2, #4
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e022      	b.n	8004a8c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 020e 	bic.w	r2, r2, #14
 8004a54:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f003 021c 	and.w	r2, r3, #28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f202 	lsl.w	r2, r1, r2
 8004a78:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d005      	beq.n	8004abc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e029      	b.n	8004b10 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 020e 	bic.w	r2, r2, #14
 8004aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	f003 021c 	and.w	r2, r3, #28
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f202 	lsl.w	r2, r1, r2
 8004aee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
    }
  }
  return status;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f003 031c 	and.w	r3, r3, #28
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d026      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x7a>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d021      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f003 021c 	and.w	r2, r3, #28
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d071      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b92:	e06c      	b.n	8004c6e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f003 031c 	and.w	r3, r3, #28
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xec>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d029      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 020a 	bic.w	r2, r2, #10
 8004bce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	f003 021c 	and.w	r2, r3, #28
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2102      	movs	r1, #2
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d038      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c04:	e033      	b.n	8004c6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f003 031c 	and.w	r3, r3, #28
 8004c0e:	2208      	movs	r2, #8
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02a      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x156>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d025      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 020e 	bic.w	r2, r2, #14
 8004c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	f003 021c 	and.w	r2, r3, #28
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f202 	lsl.w	r2, r1, r2
 8004c46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
}
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f003 021c 	and.w	r2, r3, #28
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2101      	movs	r1, #1
 8004c94:	fa01 f202 	lsl.w	r2, r1, r2
 8004c98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d108      	bne.n	8004cbc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cba:	e007      	b.n	8004ccc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce6:	e14e      	b.n	8004f86 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8140 	beq.w	8004f80 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d005      	beq.n	8004d18 <HAL_GPIO_Init+0x40>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d130      	bne.n	8004d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4e:	2201      	movs	r2, #1
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0201 	and.w	r2, r3, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d017      	beq.n	8004db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d123      	bne.n	8004e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	08da      	lsrs	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	6939      	ldr	r1, [r7, #16]
 8004e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0203 	and.w	r2, r3, #3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 809a 	beq.w	8004f80 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4c:	4b55      	ldr	r3, [pc, #340]	; (8004fa4 <HAL_GPIO_Init+0x2cc>)
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	4a54      	ldr	r2, [pc, #336]	; (8004fa4 <HAL_GPIO_Init+0x2cc>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6613      	str	r3, [r2, #96]	; 0x60
 8004e58:	4b52      	ldr	r3, [pc, #328]	; (8004fa4 <HAL_GPIO_Init+0x2cc>)
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e64:	4a50      	ldr	r2, [pc, #320]	; (8004fa8 <HAL_GPIO_Init+0x2d0>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e8e:	d013      	beq.n	8004eb8 <HAL_GPIO_Init+0x1e0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a46      	ldr	r2, [pc, #280]	; (8004fac <HAL_GPIO_Init+0x2d4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00d      	beq.n	8004eb4 <HAL_GPIO_Init+0x1dc>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a45      	ldr	r2, [pc, #276]	; (8004fb0 <HAL_GPIO_Init+0x2d8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <HAL_GPIO_Init+0x1d8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a44      	ldr	r2, [pc, #272]	; (8004fb4 <HAL_GPIO_Init+0x2dc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_GPIO_Init+0x1d4>
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <HAL_GPIO_Init+0x1e2>
 8004eac:	2307      	movs	r3, #7
 8004eae:	e004      	b.n	8004eba <HAL_GPIO_Init+0x1e2>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e002      	b.n	8004eba <HAL_GPIO_Init+0x1e2>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_GPIO_Init+0x1e2>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	f002 0203 	and.w	r2, r2, #3
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	4093      	lsls	r3, r2
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eca:	4937      	ldr	r1, [pc, #220]	; (8004fa8 <HAL_GPIO_Init+0x2d0>)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ed8:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f02:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f26:	4a24      	ldr	r2, [pc, #144]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f2c:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f7a:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <HAL_GPIO_Init+0x2e0>)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3301      	adds	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f aea9 	bne.w	8004ce8 <HAL_GPIO_Init+0x10>
  }
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	48000400 	.word	0x48000400
 8004fb0:	48000800 	.word	0x48000800
 8004fb4:	48000c00 	.word	0x48000c00
 8004fb8:	40010400 	.word	0x40010400

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd8:	e002      	b.n	8004fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40007000 	.word	0x40007000

0800500c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <HAL_PWREx_GetVoltageRange+0x18>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000

08005028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005036:	d130      	bne.n	800509a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005044:	d038      	beq.n	80050b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005046:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2232      	movs	r2, #50	; 0x32
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	0c9b      	lsrs	r3, r3, #18
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506c:	e002      	b.n	8005074 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b01      	subs	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005074:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005080:	d102      	bne.n	8005088 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f2      	bne.n	800506e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005094:	d110      	bne.n	80050b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e00f      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	d007      	beq.n	80050b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b0:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40007000 	.word	0x40007000
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	431bde83 	.word	0x431bde83

080050d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f000 bc4f 	b.w	8005986 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e8:	4b97      	ldr	r3, [pc, #604]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f2:	4b95      	ldr	r3, [pc, #596]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80e6 	beq.w	80052d6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_RCC_OscConfig+0x4c>
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	f040 808d 	bne.w	8005232 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b01      	cmp	r3, #1
 800511c:	f040 8089 	bne.w	8005232 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005120:	4b89      	ldr	r3, [pc, #548]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <HAL_RCC_OscConfig+0x66>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f000 bc26 	b.w	8005986 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513e:	4b82      	ldr	r3, [pc, #520]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_RCC_OscConfig+0x80>
 800514a:	4b7f      	ldr	r3, [pc, #508]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005152:	e005      	b.n	8005160 <HAL_RCC_OscConfig+0x8c>
 8005154:	4b7c      	ldr	r3, [pc, #496]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005160:	4293      	cmp	r3, r2
 8005162:	d224      	bcs.n	80051ae <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fdd9 	bl	8005d20 <RCC_SetFlashLatencyFromMSIRange>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f000 bc06 	b.w	8005986 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517a:	4b73      	ldr	r3, [pc, #460]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a72      	ldr	r2, [pc, #456]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b70      	ldr	r3, [pc, #448]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	496d      	ldr	r1, [pc, #436]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005198:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	4968      	ldr	r1, [pc, #416]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	e025      	b.n	80051fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ae:	4b66      	ldr	r3, [pc, #408]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a65      	ldr	r2, [pc, #404]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051b4:	f043 0308 	orr.w	r3, r3, #8
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b63      	ldr	r3, [pc, #396]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	4960      	ldr	r1, [pc, #384]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051cc:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	495b      	ldr	r1, [pc, #364]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fd98 	bl	8005d20 <RCC_SetFlashLatencyFromMSIRange>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e3c5      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051fa:	f000 fccd 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b51      	ldr	r3, [pc, #324]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	4950      	ldr	r1, [pc, #320]	; (800534c <HAL_RCC_OscConfig+0x278>)
 800520c:	5ccb      	ldrb	r3, [r1, r3]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_RCC_OscConfig+0x27c>)
 8005218:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800521a:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <HAL_RCC_OscConfig+0x280>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fd24 	bl	8002c6c <HAL_InitTick>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d052      	beq.n	80052d4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	e3a9      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d032      	beq.n	80052a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a42      	ldr	r2, [pc, #264]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005246:	f7fd fd61 	bl	8002d0c <HAL_GetTick>
 800524a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800524e:	f7fd fd5d 	bl	8002d0c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e392      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005260:	4b39      	ldr	r3, [pc, #228]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a35      	ldr	r2, [pc, #212]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005272:	f043 0308 	orr.w	r3, r3, #8
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	4930      	ldr	r1, [pc, #192]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800528a:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	492b      	ldr	r1, [pc, #172]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800529a:	4313      	orrs	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
 800529e:	e01a      	b.n	80052d6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a28      	ldr	r2, [pc, #160]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052ac:	f7fd fd2e 	bl	8002d0c <HAL_GetTick>
 80052b0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052b4:	f7fd fd2a 	bl	8002d0c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e35f      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x1e0>
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d073      	beq.n	80053ca <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_OscConfig+0x220>
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d10e      	bne.n	800530c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d10b      	bne.n	800530c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d063      	beq.n	80053c8 <HAL_RCC_OscConfig+0x2f4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d15f      	bne.n	80053c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e33c      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d106      	bne.n	8005324 <HAL_RCC_OscConfig+0x250>
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e025      	b.n	8005370 <HAL_RCC_OscConfig+0x29c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800532c:	d114      	bne.n	8005358 <HAL_RCC_OscConfig+0x284>
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b03      	ldr	r3, [pc, #12]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a02      	ldr	r2, [pc, #8]	; (8005348 <HAL_RCC_OscConfig+0x274>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e013      	b.n	8005370 <HAL_RCC_OscConfig+0x29c>
 8005348:	40021000 	.word	0x40021000
 800534c:	0800e30c 	.word	0x0800e30c
 8005350:	2000000c 	.word	0x2000000c
 8005354:	20000010 	.word	0x20000010
 8005358:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a8e      	ldr	r2, [pc, #568]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b8c      	ldr	r3, [pc, #560]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a8b      	ldr	r2, [pc, #556]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fcc8 	bl	8002d0c <HAL_GetTick>
 800537c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005380:	f7fd fcc4 	bl	8002d0c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e2f9      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	4b81      	ldr	r3, [pc, #516]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x2ac>
 800539e:	e014      	b.n	80053ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd fcb4 	bl	8002d0c <HAL_GetTick>
 80053a4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fd fcb0 	bl	8002d0c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e2e5      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ba:	4b77      	ldr	r3, [pc, #476]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x2d4>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d060      	beq.n	8005498 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_OscConfig+0x314>
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d119      	bne.n	8005416 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d116      	bne.n	8005416 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e8:	4b6b      	ldr	r3, [pc, #428]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_OscConfig+0x32c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e2c2      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b65      	ldr	r3, [pc, #404]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	4962      	ldr	r1, [pc, #392]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005414:	e040      	b.n	8005498 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d023      	beq.n	8005466 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800541e:	4b5e      	ldr	r3, [pc, #376]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5d      	ldr	r2, [pc, #372]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fd fc6f 	bl	8002d0c <HAL_GetTick>
 800542e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005432:	f7fd fc6b 	bl	8002d0c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e2a0      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005444:	4b54      	ldr	r3, [pc, #336]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b51      	ldr	r3, [pc, #324]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	494e      	ldr	r1, [pc, #312]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
 8005464:	e018      	b.n	8005498 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005466:	4b4c      	ldr	r3, [pc, #304]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4b      	ldr	r2, [pc, #300]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fd fc4b 	bl	8002d0c <HAL_GetTick>
 8005476:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547a:	f7fd fc47 	bl	8002d0c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e27c      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8082 	beq.w	80055aa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d05f      	beq.n	800556e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80054ae:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 80054b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d037      	beq.n	8005534 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d006      	beq.n	80054dc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e254      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 80054e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054f6:	f7fd fc09 	bl	8002d0c <HAL_GetTick>
 80054fa:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fe:	f7fd fc05 	bl	8002d0c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b11      	cmp	r3, #17
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e23a      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ef      	bne.n	80054fe <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800551e:	4b1e      	ldr	r3, [pc, #120]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	491a      	ldr	r1, [pc, #104]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005534:	4b18      	ldr	r3, [pc, #96]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	4a17      	ldr	r2, [pc, #92]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fd fbe2 	bl	8002d0c <HAL_GetTick>
 8005548:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554c:	f7fd fbde 	bl	8002d0c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b11      	cmp	r3, #17
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e213      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ef      	beq.n	800554c <HAL_RCC_OscConfig+0x478>
 800556c:	e01d      	b.n	80055aa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_RCC_OscConfig+0x4c4>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fd fbc5 	bl	8002d0c <HAL_GetTick>
 8005582:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005586:	f7fd fbc1 	bl	8002d0c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b11      	cmp	r3, #17
 8005592:	d903      	bls.n	800559c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1f6      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
 8005598:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800559c:	4ba9      	ldr	r3, [pc, #676]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800559e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ed      	bne.n	8005586 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80bd 	beq.w	8005732 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055be:	4ba1      	ldr	r3, [pc, #644]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10e      	bne.n	80055e8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	4b9e      	ldr	r3, [pc, #632]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	4a9d      	ldr	r2, [pc, #628]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6593      	str	r3, [r2, #88]	; 0x58
 80055d6:	4b9b      	ldr	r3, [pc, #620]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e8:	4b97      	ldr	r3, [pc, #604]	; (8005848 <HAL_RCC_OscConfig+0x774>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d118      	bne.n	8005626 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f4:	4b94      	ldr	r3, [pc, #592]	; (8005848 <HAL_RCC_OscConfig+0x774>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a93      	ldr	r2, [pc, #588]	; (8005848 <HAL_RCC_OscConfig+0x774>)
 80055fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005600:	f7fd fb84 	bl	8002d0c <HAL_GetTick>
 8005604:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005608:	f7fd fb80 	bl	8002d0c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1b5      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561a:	4b8b      	ldr	r3, [pc, #556]	; (8005848 <HAL_RCC_OscConfig+0x774>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02c      	beq.n	800568c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005632:	4b84      	ldr	r3, [pc, #528]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	497f      	ldr	r1, [pc, #508]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005658:	4b7a      	ldr	r3, [pc, #488]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a79      	ldr	r2, [pc, #484]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005668:	4b76      	ldr	r3, [pc, #472]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	4a75      	ldr	r2, [pc, #468]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005678:	e018      	b.n	80056ac <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800567a:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	4a70      	ldr	r2, [pc, #448]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800568a:	e00f      	b.n	80056ac <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800568c:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	4a6c      	ldr	r2, [pc, #432]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800569c:	4b69      	ldr	r3, [pc, #420]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	4a68      	ldr	r2, [pc, #416]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d016      	beq.n	80056e2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd fb2a 	bl	8002d0c <HAL_GetTick>
 80056b8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fd fb26 	bl	8002d0c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e159      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d2:	4b5c      	ldr	r3, [pc, #368]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ed      	beq.n	80056bc <HAL_RCC_OscConfig+0x5e8>
 80056e0:	e01d      	b.n	800571e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fd fb13 	bl	8002d0c <HAL_GetTick>
 80056e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ea:	f7fd fb0f 	bl	8002d0c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e142      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005700:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ed      	bne.n	80056ea <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800570e:	4b4d      	ldr	r3, [pc, #308]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	4a4b      	ldr	r2, [pc, #300]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800572c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01c      	beq.n	8005780 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005746:	4b3f      	ldr	r3, [pc, #252]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800574c:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f7fd fad9 	bl	8002d0c <HAL_GetTick>
 800575a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800575e:	f7fd fad5 	bl	8002d0c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e10a      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005770:	4b34      	ldr	r3, [pc, #208]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <HAL_RCC_OscConfig+0x68a>
 800577e:	e01b      	b.n	80057b8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005780:	4b30      	ldr	r3, [pc, #192]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fd fabc 	bl	8002d0c <HAL_GetTick>
 8005794:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005798:	f7fd fab8 	bl	8002d0c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e0ed      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057aa:	4b26      	ldr	r3, [pc, #152]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80057ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ef      	bne.n	8005798 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80e1 	beq.w	8005984 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	f040 80b5 	bne.w	8005936 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f003 0203 	and.w	r2, r3, #3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	429a      	cmp	r2, r3
 80057de:	d124      	bne.n	800582a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	3b01      	subs	r3, #1
 80057ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11b      	bne.n	800582a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d113      	bne.n	800582a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	3b01      	subs	r3, #1
 8005810:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d109      	bne.n	800582a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	3b01      	subs	r3, #1
 8005824:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d05f      	beq.n	80058ea <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d05a      	beq.n	80058e6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a03      	ldr	r2, [pc, #12]	; (8005844 <HAL_RCC_OscConfig+0x770>)
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800583c:	f7fd fa66 	bl	8002d0c <HAL_GetTick>
 8005840:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005842:	e00c      	b.n	800585e <HAL_RCC_OscConfig+0x78a>
 8005844:	40021000 	.word	0x40021000
 8005848:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd fa5e 	bl	8002d0c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e093      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	4b49      	ldr	r3, [pc, #292]	; (8005994 <HAL_RCC_OscConfig+0x8c0>)
 8005870:	4013      	ands	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800587a:	3a01      	subs	r2, #1
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005884:	0212      	lsls	r2, r2, #8
 8005886:	4311      	orrs	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800588c:	0852      	lsrs	r2, r2, #1
 800588e:	3a01      	subs	r2, #1
 8005890:	0552      	lsls	r2, r2, #21
 8005892:	4311      	orrs	r1, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005898:	0852      	lsrs	r2, r2, #1
 800589a:	3a01      	subs	r2, #1
 800589c:	0652      	lsls	r2, r2, #25
 800589e:	430a      	orrs	r2, r1
 80058a0:	493b      	ldr	r1, [pc, #236]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058a6:	4b3a      	ldr	r3, [pc, #232]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a39      	ldr	r2, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b2:	4b37      	ldr	r3, [pc, #220]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4a36      	ldr	r2, [pc, #216]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058bc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058be:	f7fd fa25 	bl	8002d0c <HAL_GetTick>
 80058c2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c6:	f7fd fa21 	bl	8002d0c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e056      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d8:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058e4:	e04e      	b.n	8005984 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e04d      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d146      	bne.n	8005984 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005900:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800590e:	f7fd f9fd 	bl	8002d0c <HAL_GetTick>
 8005912:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005916:	f7fd f9f9 	bl	8002d0c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e02e      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005928:	4b19      	ldr	r3, [pc, #100]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x842>
 8005934:	e026      	b.n	8005984 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d021      	beq.n	8005980 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593c:	4b14      	ldr	r3, [pc, #80]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fd f9e0 	bl	8002d0c <HAL_GetTick>
 800594c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fd f9dc 	bl	8002d0c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e011      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800596e:	4b08      	ldr	r3, [pc, #32]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a07      	ldr	r2, [pc, #28]	; (8005990 <HAL_RCC_OscConfig+0x8bc>)
 8005974:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005978:	f023 0303 	bic.w	r3, r3, #3
 800597c:	60d3      	str	r3, [r2, #12]
 800597e:	e001      	b.n	8005984 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3728      	adds	r7, #40	; 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40021000 	.word	0x40021000
 8005994:	f99f808c 	.word	0xf99f808c

08005998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0e7      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ac:	4b75      	ldr	r3, [pc, #468]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d910      	bls.n	80059dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b72      	ldr	r3, [pc, #456]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 0207 	bic.w	r2, r3, #7
 80059c2:	4970      	ldr	r1, [pc, #448]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b6e      	ldr	r3, [pc, #440]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0cf      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	4b66      	ldr	r3, [pc, #408]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d908      	bls.n	8005a0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f8:	4b63      	ldr	r3, [pc, #396]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4960      	ldr	r1, [pc, #384]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d04c      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1e:	4b5a      	ldr	r3, [pc, #360]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d121      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0a6      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d107      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a36:	4b54      	ldr	r3, [pc, #336]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d115      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e09a      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a4e:	4b4e      	ldr	r3, [pc, #312]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e08e      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a5e:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e086      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a6e:	4b46      	ldr	r3, [pc, #280]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 0203 	bic.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4943      	ldr	r1, [pc, #268]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fd f944 	bl	8002d0c <HAL_GetTick>
 8005a84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a86:	e00a      	b.n	8005a9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a88:	f7fd f940 	bl	8002d0c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e06e      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9e:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 020c 	and.w	r2, r3, #12
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d1eb      	bne.n	8005a88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d010      	beq.n	8005ade <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d208      	bcs.n	8005ade <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005acc:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	492b      	ldr	r1, [pc, #172]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ade:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d210      	bcs.n	8005b0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aec:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f023 0207 	bic.w	r2, r3, #7
 8005af4:	4923      	ldr	r1, [pc, #140]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afc:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <HAL_RCC_ClockConfig+0x1ec>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d001      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e036      	b.n	8005b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4918      	ldr	r1, [pc, #96]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4910      	ldr	r1, [pc, #64]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b4c:	f000 f824 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <HAL_RCC_ClockConfig+0x1f0>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	490b      	ldr	r1, [pc, #44]	; (8005b8c <HAL_RCC_ClockConfig+0x1f4>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x1f8>)
 8005b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_RCC_ClockConfig+0x1fc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fd f87b 	bl	8002c6c <HAL_InitTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40022000 	.word	0x40022000
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	0800e30c 	.word	0x0800e30c
 8005b90:	2000000c 	.word	0x2000000c
 8005b94:	20000010 	.word	0x20000010

08005b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b089      	sub	sp, #36	; 0x24
 8005b9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba6:	4b3e      	ldr	r3, [pc, #248]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb0:	4b3b      	ldr	r3, [pc, #236]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x34>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b0c      	cmp	r3, #12
 8005bc4:	d121      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11e      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bcc:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bd8:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	e005      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005be8:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bf4:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	e004      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c1c:	4b23      	ldr	r3, [pc, #140]	; (8005cac <HAL_RCC_GetSysClockFreq+0x114>)
 8005c1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d134      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0xa6>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d003      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0xac>
 8005c3c:	e005      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c40:	617b      	str	r3, [r7, #20]
      break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCC_GetSysClockFreq+0x114>)
 8005c46:	617b      	str	r3, [r7, #20]
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	617b      	str	r3, [r7, #20]
      break;
 8005c4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	fb03 f202 	mul.w	r2, r3, r2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	0e5b      	lsrs	r3, r3, #25
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	3301      	adds	r3, #1
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c90:	69bb      	ldr	r3, [r7, #24]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3724      	adds	r7, #36	; 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	0800e324 	.word	0x0800e324
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	007a1200 	.word	0x007a1200

08005cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000000c 	.word	0x2000000c

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ccc:	f7ff fff0 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4904      	ldr	r1, [pc, #16]	; (8005cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	0800e31c 	.word	0x0800e31c

08005cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cf8:	f7ff ffda 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	0adb      	lsrs	r3, r3, #11
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4904      	ldr	r1, [pc, #16]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800e31c 	.word	0x0800e31c

08005d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d2c:	4b2a      	ldr	r3, [pc, #168]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d38:	f7ff f968 	bl	800500c <HAL_PWREx_GetVoltageRange>
 8005d3c:	6178      	str	r0, [r7, #20]
 8005d3e:	e014      	b.n	8005d6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d40:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d4c:	4b22      	ldr	r3, [pc, #136]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d58:	f7ff f958 	bl	800500c <HAL_PWREx_GetVoltageRange>
 8005d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d10b      	bne.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d919      	bls.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2ba0      	cmp	r3, #160	; 0xa0
 8005d7c:	d902      	bls.n	8005d84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d7e:	2302      	movs	r3, #2
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e013      	b.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d84:	2301      	movs	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	e010      	b.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d902      	bls.n	8005d96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d90:	2303      	movs	r3, #3
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	e00a      	b.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d102      	bne.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	e004      	b.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b70      	cmp	r3, #112	; 0x70
 8005da6:	d101      	bne.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005da8:	2301      	movs	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 0207 	bic.w	r2, r3, #7
 8005db4:	4909      	ldr	r1, [pc, #36]	; (8005ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d001      	beq.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40022000 	.word	0x40022000

08005de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005de8:	2300      	movs	r3, #0
 8005dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dec:	2300      	movs	r3, #0
 8005dee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 809e 	beq.w	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e02:	4b46      	ldr	r3, [pc, #280]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00d      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b40      	ldr	r3, [pc, #256]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1c:	4a3f      	ldr	r2, [pc, #252]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6593      	str	r3, [r2, #88]	; 0x58
 8005e24:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e34:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a39      	ldr	r2, [pc, #228]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e40:	f7fc ff64 	bl	8002d0c <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e46:	e009      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e48:	f7fc ff60 	bl	8002d0c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d902      	bls.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	74fb      	strb	r3, [r7, #19]
        break;
 8005e5a:	e005      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e5c:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ef      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005e68:	7cfb      	ldrb	r3, [r7, #19]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d15a      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e6e:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01e      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d019      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e8a:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e96:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eb6:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fc ff20 	bl	8002d0c <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ece:	e00b      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed0:	f7fc ff1c 	bl	8002d0c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	74fb      	strb	r3, [r7, #19]
            break;
 8005ee6:	e006      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ec      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efc:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f12:	e009      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	74bb      	strb	r3, [r7, #18]
 8005f18:	e006      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	7cfb      	ldrb	r3, [r7, #19]
 8005f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f28:	7c7b      	ldrb	r3, [r7, #17]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2e:	4b6e      	ldr	r3, [pc, #440]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a6d      	ldr	r2, [pc, #436]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f46:	4b68      	ldr	r3, [pc, #416]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4c:	f023 0203 	bic.w	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4964      	ldr	r1, [pc, #400]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f68:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 020c 	bic.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	495c      	ldr	r1, [pc, #368]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f8a:	4b57      	ldr	r3, [pc, #348]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4953      	ldr	r1, [pc, #332]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fac:	4b4e      	ldr	r3, [pc, #312]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	494b      	ldr	r1, [pc, #300]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b46      	ldr	r3, [pc, #280]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4942      	ldr	r1, [pc, #264]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ff0:	4b3d      	ldr	r3, [pc, #244]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	493a      	ldr	r1, [pc, #232]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006012:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	4931      	ldr	r1, [pc, #196]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006034:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	4929      	ldr	r1, [pc, #164]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4920      	ldr	r1, [pc, #128]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d015      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006078:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	4918      	ldr	r1, [pc, #96]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006096:	d105      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006098:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060b0:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	490a      	ldr	r1, [pc, #40]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40021000 	.word	0x40021000

080060ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40021000 	.word	0x40021000

0800610c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e049      	b.n	80061b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc faba 	bl	80026ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f001 f96a 	bl	8007424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e03b      	b.n	800624c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a19      	ldr	r2, [pc, #100]	; (8006258 <HAL_TIM_Base_Start_IT+0x9c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_TIM_Base_Start_IT+0x4e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d004      	beq.n	800620a <HAL_TIM_Base_Start_IT+0x4e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <HAL_TIM_Base_Start_IT+0xa0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d115      	bne.n	8006236 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <HAL_TIM_Base_Start_IT+0xa4>)
 8006212:	4013      	ands	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b06      	cmp	r3, #6
 800621a:	d015      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006222:	d011      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	e008      	b.n	8006248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e000      	b.n	800624a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40014000 	.word	0x40014000
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	f241 1311 	movw	r3, #4369	; 0x1111
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10f      	bne.n	80062ac <HAL_TIM_Base_Stop_IT+0x48>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f240 4344 	movw	r3, #1092	; 0x444
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d107      	bne.n	80062ac <HAL_TIM_Base_Stop_IT+0x48>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e049      	b.n	8006368 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fc f957 	bl	800259c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f001 f88f 	bl	8007424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_TIM_OC_Start_DMA+0x2c>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e03c      	b.n	8006416 <HAL_TIM_OC_Start_DMA+0xa6>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d109      	bne.n	80063b6 <HAL_TIM_OC_Start_DMA+0x46>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	bf0c      	ite	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	2300      	movne	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e02f      	b.n	8006416 <HAL_TIM_OC_Start_DMA+0xa6>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_OC_Start_DMA+0x60>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e022      	b.n	8006416 <HAL_TIM_OC_Start_DMA+0xa6>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d109      	bne.n	80063ea <HAL_TIM_OC_Start_DMA+0x7a>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e015      	b.n	8006416 <HAL_TIM_OC_Start_DMA+0xa6>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_OC_Start_DMA+0x94>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e008      	b.n	8006416 <HAL_TIM_OC_Start_DMA+0xa6>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
 800641c:	e18d      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <HAL_TIM_OC_Start_DMA+0xc8>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e03c      	b.n	80064b2 <HAL_TIM_OC_Start_DMA+0x142>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d109      	bne.n	8006452 <HAL_TIM_OC_Start_DMA+0xe2>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b01      	cmp	r3, #1
 8006448:	bf0c      	ite	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	2300      	movne	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	e02f      	b.n	80064b2 <HAL_TIM_OC_Start_DMA+0x142>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d109      	bne.n	800646c <HAL_TIM_OC_Start_DMA+0xfc>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e022      	b.n	80064b2 <HAL_TIM_OC_Start_DMA+0x142>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b0c      	cmp	r3, #12
 8006470:	d109      	bne.n	8006486 <HAL_TIM_OC_Start_DMA+0x116>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	e015      	b.n	80064b2 <HAL_TIM_OC_Start_DMA+0x142>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b10      	cmp	r3, #16
 800648a:	d109      	bne.n	80064a0 <HAL_TIM_OC_Start_DMA+0x130>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e008      	b.n	80064b2 <HAL_TIM_OC_Start_DMA+0x142>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d034      	beq.n	8006520 <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_TIM_OC_Start_DMA+0x152>
 80064bc:	887b      	ldrh	r3, [r7, #2]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e139      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_OC_Start_DMA+0x166>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d4:	e026      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_OC_Start_DMA+0x176>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	e01e      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_OC_Start_DMA+0x186>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f4:	e016      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_OC_Start_DMA+0x196>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006504:	e00e      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b10      	cmp	r3, #16
 800650a:	d104      	bne.n	8006516 <HAL_TIM_OC_Start_DMA+0x1a6>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	e006      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800651e:	e001      	b.n	8006524 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e10a      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	f200 80ae 	bhi.w	8006688 <HAL_TIM_OC_Start_DMA+0x318>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_TIM_OC_Start_DMA+0x1c4>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006569 	.word	0x08006569
 8006538:	08006689 	.word	0x08006689
 800653c:	08006689 	.word	0x08006689
 8006540:	08006689 	.word	0x08006689
 8006544:	080065b1 	.word	0x080065b1
 8006548:	08006689 	.word	0x08006689
 800654c:	08006689 	.word	0x08006689
 8006550:	08006689 	.word	0x08006689
 8006554:	080065f9 	.word	0x080065f9
 8006558:	08006689 	.word	0x08006689
 800655c:	08006689 	.word	0x08006689
 8006560:	08006689 	.word	0x08006689
 8006564:	08006641 	.word	0x08006641
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	4a75      	ldr	r2, [pc, #468]	; (8006744 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	4a74      	ldr	r2, [pc, #464]	; (8006748 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	4a73      	ldr	r2, [pc, #460]	; (800674c <HAL_TIM_OC_Start_DMA+0x3dc>)
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3334      	adds	r3, #52	; 0x34
 800658c:	461a      	mov	r2, r3
 800658e:	887b      	ldrh	r3, [r7, #2]
 8006590:	f7fe f9e4 	bl	800495c <HAL_DMA_Start_IT>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0cd      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ac:	60da      	str	r2, [r3, #12]
      break;
 80065ae:	e06e      	b.n	800668e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	4a63      	ldr	r2, [pc, #396]	; (8006744 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	4a62      	ldr	r2, [pc, #392]	; (8006748 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80065be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	4a61      	ldr	r2, [pc, #388]	; (800674c <HAL_TIM_OC_Start_DMA+0x3dc>)
 80065c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3338      	adds	r3, #56	; 0x38
 80065d4:	461a      	mov	r2, r3
 80065d6:	887b      	ldrh	r3, [r7, #2]
 80065d8:	f7fe f9c0 	bl	800495c <HAL_DMA_Start_IT>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e0a9      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f4:	60da      	str	r2, [r3, #12]
      break;
 80065f6:	e04a      	b.n	800668e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a51      	ldr	r2, [pc, #324]	; (8006744 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a50      	ldr	r2, [pc, #320]	; (8006748 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8006606:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4a4f      	ldr	r2, [pc, #316]	; (800674c <HAL_TIM_OC_Start_DMA+0x3dc>)
 800660e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	333c      	adds	r3, #60	; 0x3c
 800661c:	461a      	mov	r2, r3
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	f7fe f99c 	bl	800495c <HAL_DMA_Start_IT>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e085      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663c:	60da      	str	r2, [r3, #12]
      break;
 800663e:	e026      	b.n	800668e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	4a3f      	ldr	r2, [pc, #252]	; (8006744 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8006646:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	4a3e      	ldr	r2, [pc, #248]	; (8006748 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800664e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_TIM_OC_Start_DMA+0x3dc>)
 8006656:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3340      	adds	r3, #64	; 0x40
 8006664:	461a      	mov	r2, r3
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	f7fe f978 	bl	800495c <HAL_DMA_Start_IT>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e061      	b.n	800673a <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006684:	60da      	str	r2, [r3, #12]
      break;
 8006686:	e002      	b.n	800668e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
      break;
 800668c:	bf00      	nop
  }

  if (status == HAL_OK)
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d151      	bne.n	8006738 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f9a3 	bl	80079e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <HAL_TIM_OC_Start_DMA+0x3e0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d009      	beq.n	80066c0 <HAL_TIM_OC_Start_DMA+0x350>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a28      	ldr	r2, [pc, #160]	; (8006754 <HAL_TIM_OC_Start_DMA+0x3e4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_OC_Start_DMA+0x350>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a27      	ldr	r2, [pc, #156]	; (8006758 <HAL_TIM_OC_Start_DMA+0x3e8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d101      	bne.n	80066c4 <HAL_TIM_OC_Start_DMA+0x354>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <HAL_TIM_OC_Start_DMA+0x356>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <HAL_TIM_OC_Start_DMA+0x3e0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_OC_Start_DMA+0x388>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d004      	beq.n	80066f8 <HAL_TIM_OC_Start_DMA+0x388>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_TIM_OC_Start_DMA+0x3e4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d115      	bne.n	8006724 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <HAL_TIM_OC_Start_DMA+0x3ec>)
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b06      	cmp	r3, #6
 8006708:	d015      	beq.n	8006736 <HAL_TIM_OC_Start_DMA+0x3c6>
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d011      	beq.n	8006736 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	e008      	b.n	8006736 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e000      	b.n	8006738 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006736:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	08007313 	.word	0x08007313
 8006748:	080073bb 	.word	0x080073bb
 800674c:	08007281 	.word	0x08007281
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40014000 	.word	0x40014000
 8006758:	40014400 	.word	0x40014400
 800675c:	00010007 	.word	0x00010007

08006760 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b0c      	cmp	r3, #12
 8006772:	d855      	bhi.n	8006820 <HAL_TIM_OC_Stop_DMA+0xc0>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <HAL_TIM_OC_Stop_DMA+0x1c>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067b1 	.word	0x080067b1
 8006780:	08006821 	.word	0x08006821
 8006784:	08006821 	.word	0x08006821
 8006788:	08006821 	.word	0x08006821
 800678c:	080067cd 	.word	0x080067cd
 8006790:	08006821 	.word	0x08006821
 8006794:	08006821 	.word	0x08006821
 8006798:	08006821 	.word	0x08006821
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	08006821 	.word	0x08006821
 80067a4:	08006821 	.word	0x08006821
 80067a8:	08006821 	.word	0x08006821
 80067ac:	08006805 	.word	0x08006805
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe f967 	bl	8004a98 <HAL_DMA_Abort_IT>
      break;
 80067ca:	e02c      	b.n	8006826 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe f959 	bl	8004a98 <HAL_DMA_Abort_IT>
      break;
 80067e6:	e01e      	b.n	8006826 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe f94b 	bl	8004a98 <HAL_DMA_Abort_IT>
      break;
 8006802:	e010      	b.n	8006826 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006812:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe f93d 	bl	8004a98 <HAL_DMA_Abort_IT>
      break;
 800681e:	e002      	b.n	8006826 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	bf00      	nop
  }

  if (status == HAL_OK)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d176      	bne.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2200      	movs	r2, #0
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f001 f8d7 	bl	80079e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a39      	ldr	r2, [pc, #228]	; (8006924 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_TIM_OC_Stop_DMA+0xf8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a37      	ldr	r2, [pc, #220]	; (8006928 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIM_OC_Stop_DMA+0xf8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a36      	ldr	r2, [pc, #216]	; (800692c <HAL_TIM_OC_Stop_DMA+0x1cc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d101      	bne.n	800685c <HAL_TIM_OC_Stop_DMA+0xfc>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <HAL_TIM_OC_Stop_DMA+0xfe>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	f241 1311 	movw	r3, #4369	; 0x1111
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_TIM_OC_Stop_DMA+0x132>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	f240 4344 	movw	r3, #1092	; 0x444
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_TIM_OC_Stop_DMA+0x132>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006890:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	f241 1311 	movw	r3, #4369	; 0x1111
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <HAL_TIM_OC_Stop_DMA+0x162>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	f240 4344 	movw	r3, #1092	; 0x444
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <HAL_TIM_OC_Stop_DMA+0x162>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_OC_Stop_DMA+0x172>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	e023      	b.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_OC_Stop_DMA+0x182>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e0:	e01b      	b.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_OC_Stop_DMA+0x192>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	e013      	b.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_OC_Stop_DMA+0x1a2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006900:	e00b      	b.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b10      	cmp	r3, #16
 8006906:	d104      	bne.n	8006912 <HAL_TIM_OC_Stop_DMA+0x1b2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006910:	e003      	b.n	800691a <HAL_TIM_OC_Stop_DMA+0x1ba>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400

08006930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e049      	b.n	80069d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fdfa 	bl	8002550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 fd58 	bl	8007424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x24>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e03c      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d109      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x3e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e02f      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d109      	bne.n	8006a38 <HAL_TIM_PWM_Start+0x58>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e022      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b0c      	cmp	r3, #12
 8006a3c:	d109      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x72>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	bf14      	ite	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	2300      	moveq	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e015      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d109      	bne.n	8006a6c <HAL_TIM_PWM_Start+0x8c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	bf14      	ite	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	2300      	moveq	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e008      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e07e      	b.n	8006b84 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xb6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a94:	e023      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0xc6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	e01b      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Start+0xd6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	e013      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0xe6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac4:	e00b      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0xf6>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad4:	e003      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff7e 	bl	80079e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <HAL_TIM_PWM_Start+0x1ac>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x12a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <HAL_TIM_PWM_Start+0x1b0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x12a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_TIM_PWM_Start+0x1b4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_PWM_Start+0x12e>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <HAL_TIM_PWM_Start+0x130>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <HAL_TIM_PWM_Start+0x1ac>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x162>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d004      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x162>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <HAL_TIM_PWM_Start+0x1b0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d115      	bne.n	8006b6e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <HAL_TIM_PWM_Start+0x1b8>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d015      	beq.n	8006b80 <HAL_TIM_PWM_Start+0x1a0>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5a:	d011      	beq.n	8006b80 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	e008      	b.n	8006b80 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e000      	b.n	8006b82 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400
 8006b98:	00010007 	.word	0x00010007

08006b9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2200      	movs	r2, #0
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ff1a 	bl	80079e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a39      	ldr	r2, [pc, #228]	; (8006ca0 <HAL_TIM_PWM_Stop+0x104>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_TIM_PWM_Stop+0x36>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a38      	ldr	r2, [pc, #224]	; (8006ca4 <HAL_TIM_PWM_Stop+0x108>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIM_PWM_Stop+0x36>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a36      	ldr	r2, [pc, #216]	; (8006ca8 <HAL_TIM_PWM_Stop+0x10c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_PWM_Stop+0x3a>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_TIM_PWM_Stop+0x3c>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6a1a      	ldr	r2, [r3, #32]
 8006be2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10f      	bne.n	8006c0c <HAL_TIM_PWM_Stop+0x70>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a1a      	ldr	r2, [r3, #32]
 8006bf2:	f240 4344 	movw	r3, #1092	; 0x444
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d107      	bne.n	8006c0c <HAL_TIM_PWM_Stop+0x70>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <HAL_TIM_PWM_Stop+0xa0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a1a      	ldr	r2, [r3, #32]
 8006c22:	f240 4344 	movw	r3, #1092	; 0x444
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_PWM_Stop+0xa0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0201 	bic.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <HAL_TIM_PWM_Stop+0xb0>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c4a:	e023      	b.n	8006c94 <HAL_TIM_PWM_Stop+0xf8>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d104      	bne.n	8006c5c <HAL_TIM_PWM_Stop+0xc0>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5a:	e01b      	b.n	8006c94 <HAL_TIM_PWM_Stop+0xf8>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d104      	bne.n	8006c6c <HAL_TIM_PWM_Stop+0xd0>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c6a:	e013      	b.n	8006c94 <HAL_TIM_PWM_Stop+0xf8>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b0c      	cmp	r3, #12
 8006c70:	d104      	bne.n	8006c7c <HAL_TIM_PWM_Stop+0xe0>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c7a:	e00b      	b.n	8006c94 <HAL_TIM_PWM_Stop+0xf8>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d104      	bne.n	8006c8c <HAL_TIM_PWM_Stop+0xf0>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c8a:	e003      	b.n	8006c94 <HAL_TIM_PWM_Stop+0xf8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400

08006cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d122      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d11b      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0202 	mvn.w	r2, #2
 8006cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa94 	bl	800721c <HAL_TIM_IC_CaptureCallback>
 8006cf4:	e005      	b.n	8006d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa86 	bl	8007208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa97 	bl	8007230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d122      	bne.n	8006d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d11b      	bne.n	8006d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0204 	mvn.w	r2, #4
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa6a 	bl	800721c <HAL_TIM_IC_CaptureCallback>
 8006d48:	e005      	b.n	8006d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa5c 	bl	8007208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa6d 	bl	8007230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d122      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d11b      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f06f 0208 	mvn.w	r2, #8
 8006d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2204      	movs	r2, #4
 8006d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa40 	bl	800721c <HAL_TIM_IC_CaptureCallback>
 8006d9c:	e005      	b.n	8006daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa32 	bl	8007208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa43 	bl	8007230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d122      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d11b      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0210 	mvn.w	r2, #16
 8006dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa16 	bl	800721c <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa08 	bl	8007208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa19 	bl	8007230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d10e      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d107      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0201 	mvn.w	r2, #1
 8006e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa fc3e 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d10e      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e48:	2b80      	cmp	r3, #128	; 0x80
 8006e4a:	d107      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fed4 	bl	8007c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	d10e      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d107      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fec7 	bl	8007c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d10e      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d107      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f9d1 	bl	8007258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d10e      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d107      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f06f 0220 	mvn.w	r2, #32
 8006eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fe87 	bl	8007bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e066      	b.n	8006fd8 <HAL_TIM_OC_ConfigChannel+0xec>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b14      	cmp	r3, #20
 8006f16:	d857      	bhi.n	8006fc8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006f83 	.word	0x08006f83
 8006f34:	08006fc9 	.word	0x08006fc9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006f91 	.word	0x08006f91
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006f9f 	.word	0x08006f9f
 8006f54:	08006fc9 	.word	0x08006fc9
 8006f58:	08006fc9 	.word	0x08006fc9
 8006f5c:	08006fc9 	.word	0x08006fc9
 8006f60:	08006fad 	.word	0x08006fad
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	08006fc9 	.word	0x08006fc9
 8006f70:	08006fbb 	.word	0x08006fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fab6 	bl	80074ec <TIM_OC1_SetConfig>
      break;
 8006f80:	e025      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fb2b 	bl	80075e4 <TIM_OC2_SetConfig>
      break;
 8006f8e:	e01e      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fb9e 	bl	80076d8 <TIM_OC3_SetConfig>
      break;
 8006f9c:	e017      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc0f 	bl	80077c8 <TIM_OC4_SetConfig>
      break;
 8006faa:	e010      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fc66 	bl	8007884 <TIM_OC5_SetConfig>
      break;
 8006fb8:	e009      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fcb7 	bl	8007934 <TIM_OC6_SetConfig>
      break;
 8006fc6:	e002      	b.n	8006fce <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
      break;
 8006fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e0ff      	b.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b14      	cmp	r3, #20
 800700a:	f200 80f0 	bhi.w	80071ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007069 	.word	0x08007069
 8007018:	080071ef 	.word	0x080071ef
 800701c:	080071ef 	.word	0x080071ef
 8007020:	080071ef 	.word	0x080071ef
 8007024:	080070a9 	.word	0x080070a9
 8007028:	080071ef 	.word	0x080071ef
 800702c:	080071ef 	.word	0x080071ef
 8007030:	080071ef 	.word	0x080071ef
 8007034:	080070eb 	.word	0x080070eb
 8007038:	080071ef 	.word	0x080071ef
 800703c:	080071ef 	.word	0x080071ef
 8007040:	080071ef 	.word	0x080071ef
 8007044:	0800712b 	.word	0x0800712b
 8007048:	080071ef 	.word	0x080071ef
 800704c:	080071ef 	.word	0x080071ef
 8007050:	080071ef 	.word	0x080071ef
 8007054:	0800716d 	.word	0x0800716d
 8007058:	080071ef 	.word	0x080071ef
 800705c:	080071ef 	.word	0x080071ef
 8007060:	080071ef 	.word	0x080071ef
 8007064:	080071ad 	.word	0x080071ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fa3c 	bl	80074ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0208 	orr.w	r2, r2, #8
 8007082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0204 	bic.w	r2, r2, #4
 8007092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6999      	ldr	r1, [r3, #24]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	619a      	str	r2, [r3, #24]
      break;
 80070a6:	e0a5      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fa98 	bl	80075e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6999      	ldr	r1, [r3, #24]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	021a      	lsls	r2, r3, #8
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	619a      	str	r2, [r3, #24]
      break;
 80070e8:	e084      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 faf1 	bl	80076d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0208 	orr.w	r2, r2, #8
 8007104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0204 	bic.w	r2, r2, #4
 8007114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69d9      	ldr	r1, [r3, #28]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	61da      	str	r2, [r3, #28]
      break;
 8007128:	e064      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68b9      	ldr	r1, [r7, #8]
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fb49 	bl	80077c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69d9      	ldr	r1, [r3, #28]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	021a      	lsls	r2, r3, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	61da      	str	r2, [r3, #28]
      break;
 800716a:	e043      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb86 	bl	8007884 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0208 	orr.w	r2, r2, #8
 8007186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0204 	bic.w	r2, r2, #4
 8007196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071aa:	e023      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbbe 	bl	8007934 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071ec:	e002      	b.n	80071f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
      break;
 80071f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop

08007208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d107      	bne.n	80072a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a6:	e02a      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d107      	bne.n	80072c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2202      	movs	r2, #2
 80072b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c0:	e01d      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d107      	bne.n	80072dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2204      	movs	r2, #4
 80072d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072da:	e010      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d107      	bne.n	80072f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2208      	movs	r2, #8
 80072ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072f4:	e003      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff ffb4 	bl	800726c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d10b      	bne.n	8007342 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d136      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007340:	e031      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d10b      	bne.n	8007364 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2202      	movs	r2, #2
 8007350:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d125      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007362:	e020      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d10b      	bne.n	8007386 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2204      	movs	r2, #4
 8007372:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d114      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007384:	e00f      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d10a      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2208      	movs	r2, #8
 8007394:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff ff42 	bl	8007230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	771a      	strb	r2, [r3, #28]
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d103      	bne.n	80073da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	771a      	strb	r2, [r3, #28]
 80073d8:	e019      	b.n	800740e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d103      	bne.n	80073ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2202      	movs	r2, #2
 80073e8:	771a      	strb	r2, [r3, #28]
 80073ea:	e010      	b.n	800740e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d103      	bne.n	80073fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2204      	movs	r2, #4
 80073fa:	771a      	strb	r2, [r3, #28]
 80073fc:	e007      	b.n	800740e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d102      	bne.n	800740e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2208      	movs	r2, #8
 800740c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff ff18 	bl	8007244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	771a      	strb	r2, [r3, #28]
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <TIM_Base_SetConfig+0xbc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0x20>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007442:	d108      	bne.n	8007456 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <TIM_Base_SetConfig+0xbc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00b      	beq.n	8007476 <TIM_Base_SetConfig+0x52>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007464:	d007      	beq.n	8007476 <TIM_Base_SetConfig+0x52>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1e      	ldr	r2, [pc, #120]	; (80074e4 <TIM_Base_SetConfig+0xc0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_Base_SetConfig+0x52>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <TIM_Base_SetConfig+0xc4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d108      	bne.n	8007488 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <TIM_Base_SetConfig+0xbc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_Base_SetConfig+0xa0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a0b      	ldr	r2, [pc, #44]	; (80074e4 <TIM_Base_SetConfig+0xc0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0xa0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <TIM_Base_SetConfig+0xc4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d103      	bne.n	80074cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	615a      	str	r2, [r3, #20]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40014400 	.word	0x40014400

080074ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0201 	bic.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f023 0302 	bic.w	r3, r3, #2
 8007538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a24      	ldr	r2, [pc, #144]	; (80075d8 <TIM_OC1_SetConfig+0xec>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_OC1_SetConfig+0x70>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a23      	ldr	r2, [pc, #140]	; (80075dc <TIM_OC1_SetConfig+0xf0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_OC1_SetConfig+0x70>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a22      	ldr	r2, [pc, #136]	; (80075e0 <TIM_OC1_SetConfig+0xf4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d10c      	bne.n	8007576 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 0308 	bic.w	r3, r3, #8
 8007562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 0304 	bic.w	r3, r3, #4
 8007574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <TIM_OC1_SetConfig+0xec>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <TIM_OC1_SetConfig+0xa2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <TIM_OC1_SetConfig+0xf0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <TIM_OC1_SetConfig+0xa2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <TIM_OC1_SetConfig+0xf4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d111      	bne.n	80075b2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400

080075e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f023 0210 	bic.w	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0320 	bic.w	r3, r3, #32
 8007632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a22      	ldr	r2, [pc, #136]	; (80076cc <TIM_OC2_SetConfig+0xe8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d10d      	bne.n	8007664 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a19      	ldr	r2, [pc, #100]	; (80076cc <TIM_OC2_SetConfig+0xe8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d007      	beq.n	800767c <TIM_OC2_SetConfig+0x98>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <TIM_OC2_SetConfig+0xec>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_OC2_SetConfig+0x98>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <TIM_OC2_SetConfig+0xf0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d113      	bne.n	80076a4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800768a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400

080076d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a21      	ldr	r2, [pc, #132]	; (80077bc <TIM_OC3_SetConfig+0xe4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10d      	bne.n	8007756 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a18      	ldr	r2, [pc, #96]	; (80077bc <TIM_OC3_SetConfig+0xe4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <TIM_OC3_SetConfig+0x96>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <TIM_OC3_SetConfig+0xe8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d003      	beq.n	800776e <TIM_OC3_SetConfig+0x96>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a16      	ldr	r2, [pc, #88]	; (80077c4 <TIM_OC3_SetConfig+0xec>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d113      	bne.n	8007796 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800777c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400

080077c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	031b      	lsls	r3, r3, #12
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a14      	ldr	r2, [pc, #80]	; (8007878 <TIM_OC4_SetConfig+0xb0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_OC4_SetConfig+0x74>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a13      	ldr	r2, [pc, #76]	; (800787c <TIM_OC4_SetConfig+0xb4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_OC4_SetConfig+0x74>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a12      	ldr	r2, [pc, #72]	; (8007880 <TIM_OC4_SetConfig+0xb8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d109      	bne.n	8007850 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	019b      	lsls	r3, r3, #6
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400

08007884 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a13      	ldr	r2, [pc, #76]	; (8007928 <TIM_OC5_SetConfig+0xa4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d007      	beq.n	80078ee <TIM_OC5_SetConfig+0x6a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a12      	ldr	r2, [pc, #72]	; (800792c <TIM_OC5_SetConfig+0xa8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_OC5_SetConfig+0x6a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a11      	ldr	r2, [pc, #68]	; (8007930 <TIM_OC5_SetConfig+0xac>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d109      	bne.n	8007902 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400

08007934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800797a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	051b      	lsls	r3, r3, #20
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a14      	ldr	r2, [pc, #80]	; (80079dc <TIM_OC6_SetConfig+0xa8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_OC6_SetConfig+0x6c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a13      	ldr	r2, [pc, #76]	; (80079e0 <TIM_OC6_SetConfig+0xac>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC6_SetConfig+0x6c>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a12      	ldr	r2, [pc, #72]	; (80079e4 <TIM_OC6_SetConfig+0xb0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40014400 	.word	0x40014400

080079e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2201      	movs	r2, #1
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e04f      	b.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a14      	ldr	r2, [pc, #80]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a10      	ldr	r2, [pc, #64]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10c      	bne.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	40014000 	.word	0x40014000

08007b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e060      	b.n	8007bde <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a14      	ldr	r2, [pc, #80]	; (8007bec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d115      	bne.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	051b      	lsls	r3, r3, #20
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40012c00 	.word	0x40012c00

08007bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e040      	b.n	8007cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fa fdcc 	bl	80027ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2224      	movs	r2, #36	; 0x24
 8007c58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0201 	bic.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fcea 	bl	8008644 <UART_SetConfig>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e022      	b.n	8007cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 ff38 	bl	8008af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 ffbf 	bl	8008c3c <UART_CheckIdleState>
 8007cbe:	4603      	mov	r3, r0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	f040 8082 	bne.w	8007de6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <HAL_UART_Transmit+0x26>
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e07a      	b.n	8007de8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_UART_Transmit+0x38>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e073      	b.n	8007de8 <HAL_UART_Transmit+0x120>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2221      	movs	r2, #33	; 0x21
 8007d14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d16:	f7fa fff9 	bl	8002d0c <HAL_GetTick>
 8007d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d34:	d108      	bne.n	8007d48 <HAL_UART_Transmit+0x80>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	e003      	b.n	8007d50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007d58:	e02d      	b.n	8007db6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2180      	movs	r1, #128	; 0x80
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 ffb2 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e039      	b.n	8007de8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d86:	b292      	uxth	r2, r2
 8007d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e008      	b.n	8007da4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	3301      	adds	r3, #1
 8007da2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1cb      	bne.n	8007d5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2140      	movs	r1, #64	; 0x40
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 ff7e 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e005      	b.n	8007de8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	e000      	b.n	8007de8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007de6:	2302      	movs	r3, #2
  }
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d142      	bne.n	8007e8c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_UART_Receive_IT+0x22>
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e03b      	b.n	8007e8e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_UART_Receive_IT+0x34>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e034      	b.n	8007e8e <HAL_UART_Receive_IT+0x9e>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <HAL_UART_Receive_IT+0xa8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01f      	beq.n	8007e7c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 ffe8 	bl	8008e58 <UART_Start_Receive_IT>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	e000      	b.n	8007e8e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007e8c:	2302      	movs	r3, #2
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3728      	adds	r7, #40	; 0x28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40008000 	.word	0x40008000

08007e9c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b09a      	sub	sp, #104	; 0x68
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e6      	bne.n	8007ea4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	663b      	str	r3, [r7, #96]	; 0x60
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ef6:	643a      	str	r2, [r7, #64]	; 0x40
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e5      	bne.n	8007ed6 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d118      	bne.n	8007f44 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f023 0310 	bic.w	r3, r3, #16
 8007f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f32:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e6      	bne.n	8007f12 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d150      	bne.n	8007ff4 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f72:	61ba      	str	r2, [r7, #24]
 8007f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d013      	beq.n	8007fb6 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <HAL_UART_AbortReceive_IT+0x18c>)
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc fd7c 	bl	8004a98 <HAL_DMA_Abort_IT>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03a      	beq.n	800801c <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	e032      	b.n	800801c <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	220f      	movs	r2, #15
 8007fca:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	8b1b      	ldrh	r3, [r3, #24]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0208 	orr.w	r2, r2, #8
 8007fdc:	b292      	uxth	r2, r2
 8007fde:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb13 	bl	8008618 <HAL_UART_AbortReceiveCpltCallback>
 8007ff2:	e013      	b.n	800801c <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	220f      	movs	r2, #15
 8008008:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fafe 	bl	8008618 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3768      	adds	r7, #104	; 0x68
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	080090df 	.word	0x080090df

0800802c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0ba      	sub	sp, #232	; 0xe8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008056:	f640 030f 	movw	r3, #2063	; 0x80f
 800805a:	4013      	ands	r3, r2
 800805c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d115      	bne.n	8008094 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00f      	beq.n	8008094 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 82a6 	beq.w	80085d6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
      }
      return;
 8008092:	e2a0      	b.n	80085d6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8117 	beq.w	80082cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800809e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080ae:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_UART_IRQHandler+0x298>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 810a 	beq.w	80082cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d011      	beq.n	80080e8 <HAL_UART_IRQHandler+0xbc>
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080de:	f043 0201 	orr.w	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d011      	beq.n	8008118 <HAL_UART_IRQHandler+0xec>
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2202      	movs	r2, #2
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810e:	f043 0204 	orr.w	r2, r3, #4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0x11c>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2204      	movs	r2, #4
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813e:	f043 0202 	orr.w	r2, r3, #2
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d017      	beq.n	8008184 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2208      	movs	r2, #8
 8008172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817a:	f043 0208 	orr.w	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800818c:	2b00      	cmp	r3, #0
 800818e:	d012      	beq.n	80081b6 <HAL_UART_IRQHandler+0x18a>
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00c      	beq.n	80081b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 820c 	beq.w	80085da <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d005      	beq.n	800820e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008206:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800820a:	2b00      	cmp	r3, #0
 800820c:	d04f      	beq.n	80082ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 feec 	bl	8008fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d141      	bne.n	80082a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800823c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800824e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800825a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1d9      	bne.n	8008222 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <HAL_UART_IRQHandler+0x29c>)
 800827c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	4618      	mov	r0, r3
 8008284:	f7fc fc08 	bl	8004a98 <HAL_DMA_Abort_IT>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d017      	beq.n	80082be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	e00f      	b.n	80082be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f9b0 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a4:	e00b      	b.n	80082be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f9ac 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	e007      	b.n	80082be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f9a8 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80082bc:	e18d      	b.n	80085da <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	bf00      	nop
    return;
 80082c0:	e18b      	b.n	80085da <HAL_UART_IRQHandler+0x5ae>
 80082c2:	bf00      	nop
 80082c4:	04000120 	.word	0x04000120
 80082c8:	080090b3 	.word	0x080090b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f040 8146 	bne.w	8008562 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 813f 	beq.w	8008562 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8138 	beq.w	8008562 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2210      	movs	r2, #16
 80082f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	f040 80b4 	bne.w	8008472 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008316:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 815f 	beq.w	80085de <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800832a:	429a      	cmp	r2, r3
 800832c:	f080 8157 	bcs.w	80085de <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 8085 	bne.w	8008456 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800837a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800838e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1da      	bne.n	800834c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083a8:	f023 0301 	bic.w	r3, r3, #1
 80083ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e1      	bne.n	8008396 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e3      	bne.n	80083d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008426:	f023 0310 	bic.w	r3, r3, #16
 800842a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008438:	65bb      	str	r3, [r7, #88]	; 0x58
 800843a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800843e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e4      	bne.n	8008416 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008450:	4618      	mov	r0, r3
 8008452:	f7fc fae3 	bl	8004a1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008462:	b29b      	uxth	r3, r3
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	b29b      	uxth	r3, r3
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f8de 	bl	800862c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008470:	e0b5      	b.n	80085de <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800847e:	b29b      	uxth	r3, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80a7 	beq.w	80085e2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80a2 	beq.w	80085e2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
 80084c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e4      	bne.n	800849e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	623b      	str	r3, [r7, #32]
   return(result);
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	f023 0301 	bic.w	r3, r3, #1
 80084ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084f8:	633a      	str	r2, [r7, #48]	; 0x30
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	60fb      	str	r3, [r7, #12]
   return(result);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0310 	bic.w	r3, r3, #16
 8008532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	69b9      	ldr	r1, [r7, #24]
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	617b      	str	r3, [r7, #20]
   return(result);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e4      	bne.n	800851e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f866 	bl	800862c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008560:	e03f      	b.n	80085e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00e      	beq.n	800858c <HAL_UART_IRQHandler+0x560>
 800856e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 ff5a 	bl	800943e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800858a:	e02d      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01c      	beq.n	80085e6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
    }
    return;
 80085b4:	e017      	b.n	80085e6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d012      	beq.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
 80085c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fdab 	bl	800912a <UART_EndTransmit_IT>
    return;
 80085d4:	e008      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085d6:	bf00      	nop
 80085d8:	e006      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80085da:	bf00      	nop
 80085dc:	e004      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80085e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80085e8:	37e8      	adds	r7, #232	; 0xe8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008648:	b08a      	sub	sp, #40	; 0x28
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	431a      	orrs	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	4313      	orrs	r3, r2
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b9e      	ldr	r3, [pc, #632]	; (80088ec <UART_SetConfig+0x2a8>)
 8008674:	4013      	ands	r3, r2
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	6812      	ldr	r2, [r2, #0]
 800867a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800867c:	430b      	orrs	r3, r1
 800867e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a93      	ldr	r2, [pc, #588]	; (80088f0 <UART_SetConfig+0x2ac>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	4313      	orrs	r3, r2
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a8a      	ldr	r2, [pc, #552]	; (80088f4 <UART_SetConfig+0x2b0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d126      	bne.n	800871c <UART_SetConfig+0xd8>
 80086ce:	4b8a      	ldr	r3, [pc, #552]	; (80088f8 <UART_SetConfig+0x2b4>)
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d81b      	bhi.n	8008714 <UART_SetConfig+0xd0>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0xa0>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	08008705 	.word	0x08008705
 80086ec:	080086fd 	.word	0x080086fd
 80086f0:	0800870d 	.word	0x0800870d
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e0ab      	b.n	8008854 <UART_SetConfig+0x210>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008702:	e0a7      	b.n	8008854 <UART_SetConfig+0x210>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870a:	e0a3      	b.n	8008854 <UART_SetConfig+0x210>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008712:	e09f      	b.n	8008854 <UART_SetConfig+0x210>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871a:	e09b      	b.n	8008854 <UART_SetConfig+0x210>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a76      	ldr	r2, [pc, #472]	; (80088fc <UART_SetConfig+0x2b8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d138      	bne.n	8008798 <UART_SetConfig+0x154>
 8008726:	4b74      	ldr	r3, [pc, #464]	; (80088f8 <UART_SetConfig+0x2b4>)
 8008728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872c:	f003 030c 	and.w	r3, r3, #12
 8008730:	2b0c      	cmp	r3, #12
 8008732:	d82d      	bhi.n	8008790 <UART_SetConfig+0x14c>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0xf8>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008771 	.word	0x08008771
 8008740:	08008791 	.word	0x08008791
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008781 	.word	0x08008781
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008779 	.word	0x08008779
 8008760:	08008791 	.word	0x08008791
 8008764:	08008791 	.word	0x08008791
 8008768:	08008791 	.word	0x08008791
 800876c:	08008789 	.word	0x08008789
 8008770:	2300      	movs	r3, #0
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008776:	e06d      	b.n	8008854 <UART_SetConfig+0x210>
 8008778:	2302      	movs	r3, #2
 800877a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877e:	e069      	b.n	8008854 <UART_SetConfig+0x210>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008786:	e065      	b.n	8008854 <UART_SetConfig+0x210>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878e:	e061      	b.n	8008854 <UART_SetConfig+0x210>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008796:	e05d      	b.n	8008854 <UART_SetConfig+0x210>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a58      	ldr	r2, [pc, #352]	; (8008900 <UART_SetConfig+0x2bc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d125      	bne.n	80087ee <UART_SetConfig+0x1aa>
 80087a2:	4b55      	ldr	r3, [pc, #340]	; (80088f8 <UART_SetConfig+0x2b4>)
 80087a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087ac:	2b30      	cmp	r3, #48	; 0x30
 80087ae:	d016      	beq.n	80087de <UART_SetConfig+0x19a>
 80087b0:	2b30      	cmp	r3, #48	; 0x30
 80087b2:	d818      	bhi.n	80087e6 <UART_SetConfig+0x1a2>
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d00a      	beq.n	80087ce <UART_SetConfig+0x18a>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d814      	bhi.n	80087e6 <UART_SetConfig+0x1a2>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <UART_SetConfig+0x182>
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d008      	beq.n	80087d6 <UART_SetConfig+0x192>
 80087c4:	e00f      	b.n	80087e6 <UART_SetConfig+0x1a2>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087cc:	e042      	b.n	8008854 <UART_SetConfig+0x210>
 80087ce:	2302      	movs	r3, #2
 80087d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d4:	e03e      	b.n	8008854 <UART_SetConfig+0x210>
 80087d6:	2304      	movs	r3, #4
 80087d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087dc:	e03a      	b.n	8008854 <UART_SetConfig+0x210>
 80087de:	2308      	movs	r3, #8
 80087e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e4:	e036      	b.n	8008854 <UART_SetConfig+0x210>
 80087e6:	2310      	movs	r3, #16
 80087e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ec:	e032      	b.n	8008854 <UART_SetConfig+0x210>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a3f      	ldr	r2, [pc, #252]	; (80088f0 <UART_SetConfig+0x2ac>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d12a      	bne.n	800884e <UART_SetConfig+0x20a>
 80087f8:	4b3f      	ldr	r3, [pc, #252]	; (80088f8 <UART_SetConfig+0x2b4>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008806:	d01a      	beq.n	800883e <UART_SetConfig+0x1fa>
 8008808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800880c:	d81b      	bhi.n	8008846 <UART_SetConfig+0x202>
 800880e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008812:	d00c      	beq.n	800882e <UART_SetConfig+0x1ea>
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008818:	d815      	bhi.n	8008846 <UART_SetConfig+0x202>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <UART_SetConfig+0x1e2>
 800881e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008822:	d008      	beq.n	8008836 <UART_SetConfig+0x1f2>
 8008824:	e00f      	b.n	8008846 <UART_SetConfig+0x202>
 8008826:	2300      	movs	r3, #0
 8008828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882c:	e012      	b.n	8008854 <UART_SetConfig+0x210>
 800882e:	2302      	movs	r3, #2
 8008830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008834:	e00e      	b.n	8008854 <UART_SetConfig+0x210>
 8008836:	2304      	movs	r3, #4
 8008838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883c:	e00a      	b.n	8008854 <UART_SetConfig+0x210>
 800883e:	2308      	movs	r3, #8
 8008840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008844:	e006      	b.n	8008854 <UART_SetConfig+0x210>
 8008846:	2310      	movs	r3, #16
 8008848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884c:	e002      	b.n	8008854 <UART_SetConfig+0x210>
 800884e:	2310      	movs	r3, #16
 8008850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a25      	ldr	r2, [pc, #148]	; (80088f0 <UART_SetConfig+0x2ac>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f040 808a 	bne.w	8008974 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008864:	2b08      	cmp	r3, #8
 8008866:	d824      	bhi.n	80088b2 <UART_SetConfig+0x26e>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x22c>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008895 	.word	0x08008895
 8008874:	080088b3 	.word	0x080088b3
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088b3 	.word	0x080088b3
 8008880:	080088a3 	.word	0x080088a3
 8008884:	080088b3 	.word	0x080088b3
 8008888:	080088b3 	.word	0x080088b3
 800888c:	080088b3 	.word	0x080088b3
 8008890:	080088ab 	.word	0x080088ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fd fa18 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8008898:	61f8      	str	r0, [r7, #28]
        break;
 800889a:	e010      	b.n	80088be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800889c:	4b19      	ldr	r3, [pc, #100]	; (8008904 <UART_SetConfig+0x2c0>)
 800889e:	61fb      	str	r3, [r7, #28]
        break;
 80088a0:	e00d      	b.n	80088be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a2:	f7fd f979 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 80088a6:	61f8      	str	r0, [r7, #28]
        break;
 80088a8:	e009      	b.n	80088be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ae:	61fb      	str	r3, [r7, #28]
        break;
 80088b0:	e005      	b.n	80088be <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 8109 	beq.w	8008ad8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d305      	bcc.n	80088e2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d912      	bls.n	8008908 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088e8:	e0f6      	b.n	8008ad8 <UART_SetConfig+0x494>
 80088ea:	bf00      	nop
 80088ec:	efff69f3 	.word	0xefff69f3
 80088f0:	40008000 	.word	0x40008000
 80088f4:	40013800 	.word	0x40013800
 80088f8:	40021000 	.word	0x40021000
 80088fc:	40004400 	.word	0x40004400
 8008900:	40004800 	.word	0x40004800
 8008904:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2200      	movs	r2, #0
 800890c:	461c      	mov	r4, r3
 800890e:	4615      	mov	r5, r2
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	022b      	lsls	r3, r5, #8
 800891a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800891e:	0222      	lsls	r2, r4, #8
 8008920:	68f9      	ldr	r1, [r7, #12]
 8008922:	6849      	ldr	r1, [r1, #4]
 8008924:	0849      	lsrs	r1, r1, #1
 8008926:	2000      	movs	r0, #0
 8008928:	4688      	mov	r8, r1
 800892a:	4681      	mov	r9, r0
 800892c:	eb12 0a08 	adds.w	sl, r2, r8
 8008930:	eb43 0b09 	adc.w	fp, r3, r9
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008942:	4650      	mov	r0, sl
 8008944:	4659      	mov	r1, fp
 8008946:	f7f8 f99f 	bl	8000c88 <__aeabi_uldivmod>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4613      	mov	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008958:	d308      	bcc.n	800896c <UART_SetConfig+0x328>
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008960:	d204      	bcs.n	800896c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	e0b5      	b.n	8008ad8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008972:	e0b1      	b.n	8008ad8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897c:	d15d      	bne.n	8008a3a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800897e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008982:	2b08      	cmp	r3, #8
 8008984:	d827      	bhi.n	80089d6 <UART_SetConfig+0x392>
 8008986:	a201      	add	r2, pc, #4	; (adr r2, 800898c <UART_SetConfig+0x348>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089c1 	.word	0x080089c1
 8008998:	080089d7 	.word	0x080089d7
 800899c:	080089c7 	.word	0x080089c7
 80089a0:	080089d7 	.word	0x080089d7
 80089a4:	080089d7 	.word	0x080089d7
 80089a8:	080089d7 	.word	0x080089d7
 80089ac:	080089cf 	.word	0x080089cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b0:	f7fd f98a 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 80089b4:	61f8      	str	r0, [r7, #28]
        break;
 80089b6:	e014      	b.n	80089e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b8:	f7fd f99c 	bl	8005cf4 <HAL_RCC_GetPCLK2Freq>
 80089bc:	61f8      	str	r0, [r7, #28]
        break;
 80089be:	e010      	b.n	80089e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089c0:	4b4c      	ldr	r3, [pc, #304]	; (8008af4 <UART_SetConfig+0x4b0>)
 80089c2:	61fb      	str	r3, [r7, #28]
        break;
 80089c4:	e00d      	b.n	80089e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089c6:	f7fd f8e7 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 80089ca:	61f8      	str	r0, [r7, #28]
        break;
 80089cc:	e009      	b.n	80089e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089d2:	61fb      	str	r3, [r7, #28]
        break;
 80089d4:	e005      	b.n	80089e2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80089e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d077      	beq.n	8008ad8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	005a      	lsls	r2, r3, #1
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	441a      	add	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b0f      	cmp	r3, #15
 8008a02:	d916      	bls.n	8008a32 <UART_SetConfig+0x3ee>
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0a:	d212      	bcs.n	8008a32 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f023 030f 	bic.w	r3, r3, #15
 8008a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	8afb      	ldrh	r3, [r7, #22]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	8afa      	ldrh	r2, [r7, #22]
 8008a2e:	60da      	str	r2, [r3, #12]
 8008a30:	e052      	b.n	8008ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a38:	e04e      	b.n	8008ad8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d827      	bhi.n	8008a92 <UART_SetConfig+0x44e>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x404>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fd f92c 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61f8      	str	r0, [r7, #28]
        break;
 8008a72:	e014      	b.n	8008a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fd f93e 	bl	8005cf4 <HAL_RCC_GetPCLK2Freq>
 8008a78:	61f8      	str	r0, [r7, #28]
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <UART_SetConfig+0x4b0>)
 8008a7e:	61fb      	str	r3, [r7, #28]
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fd f889 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8008a86:	61f8      	str	r0, [r7, #28]
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	61fb      	str	r3, [r7, #28]
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d019      	beq.n	8008ad8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	085a      	lsrs	r2, r3, #1
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	441a      	add	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d909      	bls.n	8008ad2 <UART_SetConfig+0x48e>
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d205      	bcs.n	8008ad2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	e002      	b.n	8008ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3728      	adds	r7, #40	; 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af2:	bf00      	nop
 8008af4:	00f42400 	.word	0x00f42400

08008af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf6:	d10a      	bne.n	8008c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c4c:	f7fa f85e 	bl	8002d0c <HAL_GetTick>
 8008c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d10e      	bne.n	8008c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f82d 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e023      	b.n	8008cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d10e      	bne.n	8008caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f817 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e00d      	b.n	8008cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b09c      	sub	sp, #112	; 0x70
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cde:	e0a5      	b.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	f000 80a1 	beq.w	8008e2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cea:	f7fa f80f 	bl	8002d0c <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d302      	bcc.n	8008d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d13e      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d14:	667b      	str	r3, [r7, #100]	; 0x64
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	663b      	str	r3, [r7, #96]	; 0x60
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e067      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d04f      	beq.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9a:	d147      	bne.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008da4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e6      	bne.n	8008da6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	613b      	str	r3, [r7, #16]
   return(result);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008df8:	623a      	str	r2, [r7, #32]
 8008dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69f9      	ldr	r1, [r7, #28]
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e010      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69da      	ldr	r2, [r3, #28]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4013      	ands	r3, r2
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	bf0c      	ite	eq
 8008e3c:	2301      	moveq	r3, #1
 8008e3e:	2300      	movne	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	f43f af4a 	beq.w	8008ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3770      	adds	r7, #112	; 0x70
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b097      	sub	sp, #92	; 0x5c
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8a:	d10e      	bne.n	8008eaa <UART_Start_Receive_IT+0x52>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <UART_Start_Receive_IT+0x48>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e9e:	e02d      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ea8:	e028      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10d      	bne.n	8008ece <UART_Start_Receive_IT+0x76>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <UART_Start_Receive_IT+0x6c>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	22ff      	movs	r2, #255	; 0xff
 8008ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ec2:	e01b      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	227f      	movs	r2, #127	; 0x7f
 8008ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ecc:	e016      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ed6:	d10d      	bne.n	8008ef4 <UART_Start_Receive_IT+0x9c>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <UART_Start_Receive_IT+0x92>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	227f      	movs	r2, #127	; 0x7f
 8008ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ee8:	e008      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	223f      	movs	r2, #63	; 0x3f
 8008eee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ef2:	e003      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2222      	movs	r2, #34	; 0x22
 8008f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	657b      	str	r3, [r7, #84]	; 0x54
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e5      	bne.n	8008f0a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f46:	d107      	bne.n	8008f58 <UART_Start_Receive_IT+0x100>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a24      	ldr	r2, [pc, #144]	; (8008fe4 <UART_Start_Receive_IT+0x18c>)
 8008f54:	665a      	str	r2, [r3, #100]	; 0x64
 8008f56:	e002      	b.n	8008f5e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a23      	ldr	r2, [pc, #140]	; (8008fe8 <UART_Start_Receive_IT+0x190>)
 8008f5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d019      	beq.n	8008fa2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_Start_Receive_IT+0x116>
 8008fa0:	e018      	b.n	8008fd4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f043 0320 	orr.w	r3, r3, #32
 8008fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc0:	623b      	str	r3, [r7, #32]
 8008fc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	6a3a      	ldr	r2, [r7, #32]
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	375c      	adds	r7, #92	; 0x5c
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	080092df 	.word	0x080092df
 8008fe8:	0800917f 	.word	0x0800917f

08008fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b095      	sub	sp, #84	; 0x54
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009012:	643b      	str	r3, [r7, #64]	; 0x40
 8009014:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e6      	bne.n	8008ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	61fb      	str	r3, [r7, #28]
   return(result);
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905e:	2b01      	cmp	r3, #1
 8009060:	d118      	bne.n	8009094 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f023 0310 	bic.w	r3, r3, #16
 8009076:	647b      	str	r3, [r7, #68]	; 0x44
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	613b      	str	r3, [r7, #16]
   return(result);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e6      	bne.n	8009062 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2220      	movs	r2, #32
 8009098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80090a6:	bf00      	nop
 80090a8:	3754      	adds	r7, #84	; 0x54
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fa97 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	220f      	movs	r2, #15
 80090fa:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	8b1b      	ldrh	r3, [r3, #24]
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0208 	orr.w	r2, r2, #8
 800910c:	b292      	uxth	r2, r2
 800910e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2220      	movs	r2, #32
 8009114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fa7b 	bl	8008618 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b088      	sub	sp, #32
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6979      	ldr	r1, [r7, #20]
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	613b      	str	r3, [r7, #16]
   return(result);
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e6      	bne.n	8009132 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff fa3d 	bl	80085f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009176:	bf00      	nop
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b096      	sub	sp, #88	; 0x58
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800918c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009194:	2b22      	cmp	r3, #34	; 0x22
 8009196:	f040 8094 	bne.w	80092c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091a8:	b2d9      	uxtb	r1, r3
 80091aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b4:	400a      	ands	r2, r1
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d179      	bne.n	80092d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f6:	653b      	str	r3, [r7, #80]	; 0x50
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009200:	647b      	str	r3, [r7, #68]	; 0x44
 8009202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e6      	bne.n	80091e2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	623b      	str	r3, [r7, #32]
   return(result);
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	f023 0301 	bic.w	r3, r3, #1
 800922a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009234:	633a      	str	r2, [r7, #48]	; 0x30
 8009236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800923a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e5      	bne.n	8009214 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009258:	2b01      	cmp	r3, #1
 800925a:	d12e      	bne.n	80092ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	64bb      	str	r3, [r7, #72]	; 0x48
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009280:	61fb      	str	r3, [r7, #28]
 8009282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	69b9      	ldr	r1, [r7, #24]
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	617b      	str	r3, [r7, #20]
   return(result);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d103      	bne.n	80092aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2210      	movs	r2, #16
 80092a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff f9ba 	bl	800862c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b8:	e00d      	b.n	80092d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f8 fc7a 	bl	8001bb4 <HAL_UART_RxCpltCallback>
}
 80092c0:	e009      	b.n	80092d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	8b1b      	ldrh	r3, [r3, #24]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0208 	orr.w	r2, r2, #8
 80092d2:	b292      	uxth	r2, r2
 80092d4:	831a      	strh	r2, [r3, #24]
}
 80092d6:	bf00      	nop
 80092d8:	3758      	adds	r7, #88	; 0x58
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b096      	sub	sp, #88	; 0x58
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f4:	2b22      	cmp	r3, #34	; 0x22
 80092f6:	f040 8094 	bne.w	8009422 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009300:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009308:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800930a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800930e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009312:	4013      	ands	r3, r2
 8009314:	b29a      	uxth	r2, r3
 8009316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931e:	1c9a      	adds	r2, r3, #2
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800933c:	b29b      	uxth	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d179      	bne.n	8009436 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
 8009362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	61fb      	str	r3, [r7, #28]
   return(result);
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	64bb      	str	r3, [r7, #72]	; 0x48
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800939a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e5      	bne.n	8009374 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2220      	movs	r2, #32
 80093ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d12e      	bne.n	800941a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f023 0310 	bic.w	r3, r3, #16
 80093d6:	647b      	str	r3, [r7, #68]	; 0x44
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	613b      	str	r3, [r7, #16]
   return(result);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e6      	bne.n	80093c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	f003 0310 	and.w	r3, r3, #16
 80093fe:	2b10      	cmp	r3, #16
 8009400:	d103      	bne.n	800940a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2210      	movs	r2, #16
 8009408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff f90a 	bl	800862c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009418:	e00d      	b.n	8009436 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7f8 fbca 	bl	8001bb4 <HAL_UART_RxCpltCallback>
}
 8009420:	e009      	b.n	8009436 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	8b1b      	ldrh	r3, [r3, #24]
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0208 	orr.w	r2, r2, #8
 8009432:	b292      	uxth	r2, r2
 8009434:	831a      	strh	r2, [r3, #24]
}
 8009436:	bf00      	nop
 8009438:	3758      	adds	r7, #88	; 0x58
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <__errno>:
 8009454:	4b01      	ldr	r3, [pc, #4]	; (800945c <__errno+0x8>)
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000018 	.word	0x20000018

08009460 <__libc_init_array>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4d0d      	ldr	r5, [pc, #52]	; (8009498 <__libc_init_array+0x38>)
 8009464:	4c0d      	ldr	r4, [pc, #52]	; (800949c <__libc_init_array+0x3c>)
 8009466:	1b64      	subs	r4, r4, r5
 8009468:	10a4      	asrs	r4, r4, #2
 800946a:	2600      	movs	r6, #0
 800946c:	42a6      	cmp	r6, r4
 800946e:	d109      	bne.n	8009484 <__libc_init_array+0x24>
 8009470:	4d0b      	ldr	r5, [pc, #44]	; (80094a0 <__libc_init_array+0x40>)
 8009472:	4c0c      	ldr	r4, [pc, #48]	; (80094a4 <__libc_init_array+0x44>)
 8009474:	f004 fd20 	bl	800deb8 <_init>
 8009478:	1b64      	subs	r4, r4, r5
 800947a:	10a4      	asrs	r4, r4, #2
 800947c:	2600      	movs	r6, #0
 800947e:	42a6      	cmp	r6, r4
 8009480:	d105      	bne.n	800948e <__libc_init_array+0x2e>
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	f855 3b04 	ldr.w	r3, [r5], #4
 8009488:	4798      	blx	r3
 800948a:	3601      	adds	r6, #1
 800948c:	e7ee      	b.n	800946c <__libc_init_array+0xc>
 800948e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009492:	4798      	blx	r3
 8009494:	3601      	adds	r6, #1
 8009496:	e7f2      	b.n	800947e <__libc_init_array+0x1e>
 8009498:	0800e80c 	.word	0x0800e80c
 800949c:	0800e80c 	.word	0x0800e80c
 80094a0:	0800e80c 	.word	0x0800e80c
 80094a4:	0800e810 	.word	0x0800e810

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <__cvt>:
 80094b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	ec55 4b10 	vmov	r4, r5, d0
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	460e      	mov	r6, r1
 80094c4:	4619      	mov	r1, r3
 80094c6:	462b      	mov	r3, r5
 80094c8:	bfbb      	ittet	lt
 80094ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094ce:	461d      	movlt	r5, r3
 80094d0:	2300      	movge	r3, #0
 80094d2:	232d      	movlt	r3, #45	; 0x2d
 80094d4:	700b      	strb	r3, [r1, #0]
 80094d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094dc:	4691      	mov	r9, r2
 80094de:	f023 0820 	bic.w	r8, r3, #32
 80094e2:	bfbc      	itt	lt
 80094e4:	4622      	movlt	r2, r4
 80094e6:	4614      	movlt	r4, r2
 80094e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094ec:	d005      	beq.n	80094fa <__cvt+0x42>
 80094ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094f2:	d100      	bne.n	80094f6 <__cvt+0x3e>
 80094f4:	3601      	adds	r6, #1
 80094f6:	2102      	movs	r1, #2
 80094f8:	e000      	b.n	80094fc <__cvt+0x44>
 80094fa:	2103      	movs	r1, #3
 80094fc:	ab03      	add	r3, sp, #12
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	ab02      	add	r3, sp, #8
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	ec45 4b10 	vmov	d0, r4, r5
 8009508:	4653      	mov	r3, sl
 800950a:	4632      	mov	r2, r6
 800950c:	f001 ff78 	bl	800b400 <_dtoa_r>
 8009510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009514:	4607      	mov	r7, r0
 8009516:	d102      	bne.n	800951e <__cvt+0x66>
 8009518:	f019 0f01 	tst.w	r9, #1
 800951c:	d022      	beq.n	8009564 <__cvt+0xac>
 800951e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009522:	eb07 0906 	add.w	r9, r7, r6
 8009526:	d110      	bne.n	800954a <__cvt+0x92>
 8009528:	783b      	ldrb	r3, [r7, #0]
 800952a:	2b30      	cmp	r3, #48	; 0x30
 800952c:	d10a      	bne.n	8009544 <__cvt+0x8c>
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	4620      	mov	r0, r4
 8009534:	4629      	mov	r1, r5
 8009536:	f7f7 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800953a:	b918      	cbnz	r0, 8009544 <__cvt+0x8c>
 800953c:	f1c6 0601 	rsb	r6, r6, #1
 8009540:	f8ca 6000 	str.w	r6, [sl]
 8009544:	f8da 3000 	ldr.w	r3, [sl]
 8009548:	4499      	add	r9, r3
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f7 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009556:	b108      	cbz	r0, 800955c <__cvt+0xa4>
 8009558:	f8cd 900c 	str.w	r9, [sp, #12]
 800955c:	2230      	movs	r2, #48	; 0x30
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	454b      	cmp	r3, r9
 8009562:	d307      	bcc.n	8009574 <__cvt+0xbc>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009568:	1bdb      	subs	r3, r3, r7
 800956a:	4638      	mov	r0, r7
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	b004      	add	sp, #16
 8009570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009574:	1c59      	adds	r1, r3, #1
 8009576:	9103      	str	r1, [sp, #12]
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	e7f0      	b.n	800955e <__cvt+0xa6>

0800957c <__exponent>:
 800957c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800957e:	4603      	mov	r3, r0
 8009580:	2900      	cmp	r1, #0
 8009582:	bfb8      	it	lt
 8009584:	4249      	neglt	r1, r1
 8009586:	f803 2b02 	strb.w	r2, [r3], #2
 800958a:	bfb4      	ite	lt
 800958c:	222d      	movlt	r2, #45	; 0x2d
 800958e:	222b      	movge	r2, #43	; 0x2b
 8009590:	2909      	cmp	r1, #9
 8009592:	7042      	strb	r2, [r0, #1]
 8009594:	dd2a      	ble.n	80095ec <__exponent+0x70>
 8009596:	f10d 0407 	add.w	r4, sp, #7
 800959a:	46a4      	mov	ip, r4
 800959c:	270a      	movs	r7, #10
 800959e:	46a6      	mov	lr, r4
 80095a0:	460a      	mov	r2, r1
 80095a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80095a6:	fb07 1516 	mls	r5, r7, r6, r1
 80095aa:	3530      	adds	r5, #48	; 0x30
 80095ac:	2a63      	cmp	r2, #99	; 0x63
 80095ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80095b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095b6:	4631      	mov	r1, r6
 80095b8:	dcf1      	bgt.n	800959e <__exponent+0x22>
 80095ba:	3130      	adds	r1, #48	; 0x30
 80095bc:	f1ae 0502 	sub.w	r5, lr, #2
 80095c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095c4:	1c44      	adds	r4, r0, #1
 80095c6:	4629      	mov	r1, r5
 80095c8:	4561      	cmp	r1, ip
 80095ca:	d30a      	bcc.n	80095e2 <__exponent+0x66>
 80095cc:	f10d 0209 	add.w	r2, sp, #9
 80095d0:	eba2 020e 	sub.w	r2, r2, lr
 80095d4:	4565      	cmp	r5, ip
 80095d6:	bf88      	it	hi
 80095d8:	2200      	movhi	r2, #0
 80095da:	4413      	add	r3, r2
 80095dc:	1a18      	subs	r0, r3, r0
 80095de:	b003      	add	sp, #12
 80095e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095ea:	e7ed      	b.n	80095c8 <__exponent+0x4c>
 80095ec:	2330      	movs	r3, #48	; 0x30
 80095ee:	3130      	adds	r1, #48	; 0x30
 80095f0:	7083      	strb	r3, [r0, #2]
 80095f2:	70c1      	strb	r1, [r0, #3]
 80095f4:	1d03      	adds	r3, r0, #4
 80095f6:	e7f1      	b.n	80095dc <__exponent+0x60>

080095f8 <_printf_float>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	ed2d 8b02 	vpush	{d8}
 8009600:	b08d      	sub	sp, #52	; 0x34
 8009602:	460c      	mov	r4, r1
 8009604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009608:	4616      	mov	r6, r2
 800960a:	461f      	mov	r7, r3
 800960c:	4605      	mov	r5, r0
 800960e:	f003 fa0b 	bl	800ca28 <_localeconv_r>
 8009612:	f8d0 a000 	ldr.w	sl, [r0]
 8009616:	4650      	mov	r0, sl
 8009618:	f7f6 fdda 	bl	80001d0 <strlen>
 800961c:	2300      	movs	r3, #0
 800961e:	930a      	str	r3, [sp, #40]	; 0x28
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	9305      	str	r3, [sp, #20]
 8009624:	f8d8 3000 	ldr.w	r3, [r8]
 8009628:	f894 b018 	ldrb.w	fp, [r4, #24]
 800962c:	3307      	adds	r3, #7
 800962e:	f023 0307 	bic.w	r3, r3, #7
 8009632:	f103 0208 	add.w	r2, r3, #8
 8009636:	f8c8 2000 	str.w	r2, [r8]
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009650:	ee08 0a10 	vmov	s16, r0
 8009654:	4b9f      	ldr	r3, [pc, #636]	; (80098d4 <_printf_float+0x2dc>)
 8009656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	f7f7 fa65 	bl	8000b2c <__aeabi_dcmpun>
 8009662:	bb88      	cbnz	r0, 80096c8 <_printf_float+0xd0>
 8009664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009668:	4b9a      	ldr	r3, [pc, #616]	; (80098d4 <_printf_float+0x2dc>)
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	f7f7 fa3f 	bl	8000af0 <__aeabi_dcmple>
 8009672:	bb48      	cbnz	r0, 80096c8 <_printf_float+0xd0>
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8009680:	b110      	cbz	r0, 8009688 <_printf_float+0x90>
 8009682:	232d      	movs	r3, #45	; 0x2d
 8009684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009688:	4b93      	ldr	r3, [pc, #588]	; (80098d8 <_printf_float+0x2e0>)
 800968a:	4894      	ldr	r0, [pc, #592]	; (80098dc <_printf_float+0x2e4>)
 800968c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009690:	bf94      	ite	ls
 8009692:	4698      	movls	r8, r3
 8009694:	4680      	movhi	r8, r0
 8009696:	2303      	movs	r3, #3
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	f023 0204 	bic.w	r2, r3, #4
 80096a0:	6022      	str	r2, [r4, #0]
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	9700      	str	r7, [sp, #0]
 80096a8:	4633      	mov	r3, r6
 80096aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80096ac:	4621      	mov	r1, r4
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f9d8 	bl	8009a64 <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f040 8090 	bne.w	80097da <_printf_float+0x1e2>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295
 80096be:	b00d      	add	sp, #52	; 0x34
 80096c0:	ecbd 8b02 	vpop	{d8}
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f7 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80096d4:	b140      	cbz	r0, 80096e8 <_printf_float+0xf0>
 80096d6:	464b      	mov	r3, r9
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfbc      	itt	lt
 80096dc:	232d      	movlt	r3, #45	; 0x2d
 80096de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096e2:	487f      	ldr	r0, [pc, #508]	; (80098e0 <_printf_float+0x2e8>)
 80096e4:	4b7f      	ldr	r3, [pc, #508]	; (80098e4 <_printf_float+0x2ec>)
 80096e6:	e7d1      	b.n	800968c <_printf_float+0x94>
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096ee:	9206      	str	r2, [sp, #24]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	d13f      	bne.n	8009774 <_printf_float+0x17c>
 80096f4:	2306      	movs	r3, #6
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	9b05      	ldr	r3, [sp, #20]
 80096fa:	6861      	ldr	r1, [r4, #4]
 80096fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009700:	2300      	movs	r3, #0
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	ab0a      	add	r3, sp, #40	; 0x28
 8009706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800970a:	ab09      	add	r3, sp, #36	; 0x24
 800970c:	ec49 8b10 	vmov	d0, r8, r9
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009718:	4628      	mov	r0, r5
 800971a:	f7ff fecd 	bl	80094b8 <__cvt>
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009722:	2b47      	cmp	r3, #71	; 0x47
 8009724:	4680      	mov	r8, r0
 8009726:	d108      	bne.n	800973a <_printf_float+0x142>
 8009728:	1cc8      	adds	r0, r1, #3
 800972a:	db02      	blt.n	8009732 <_printf_float+0x13a>
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	4299      	cmp	r1, r3
 8009730:	dd41      	ble.n	80097b6 <_printf_float+0x1be>
 8009732:	f1ab 0b02 	sub.w	fp, fp, #2
 8009736:	fa5f fb8b 	uxtb.w	fp, fp
 800973a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800973e:	d820      	bhi.n	8009782 <_printf_float+0x18a>
 8009740:	3901      	subs	r1, #1
 8009742:	465a      	mov	r2, fp
 8009744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009748:	9109      	str	r1, [sp, #36]	; 0x24
 800974a:	f7ff ff17 	bl	800957c <__exponent>
 800974e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009750:	1813      	adds	r3, r2, r0
 8009752:	2a01      	cmp	r2, #1
 8009754:	4681      	mov	r9, r0
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	dc02      	bgt.n	8009760 <_printf_float+0x168>
 800975a:	6822      	ldr	r2, [r4, #0]
 800975c:	07d2      	lsls	r2, r2, #31
 800975e:	d501      	bpl.n	8009764 <_printf_float+0x16c>
 8009760:	3301      	adds	r3, #1
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009768:	2b00      	cmp	r3, #0
 800976a:	d09c      	beq.n	80096a6 <_printf_float+0xae>
 800976c:	232d      	movs	r3, #45	; 0x2d
 800976e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009772:	e798      	b.n	80096a6 <_printf_float+0xae>
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	2a47      	cmp	r2, #71	; 0x47
 8009778:	d1be      	bne.n	80096f8 <_printf_float+0x100>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1bc      	bne.n	80096f8 <_printf_float+0x100>
 800977e:	2301      	movs	r3, #1
 8009780:	e7b9      	b.n	80096f6 <_printf_float+0xfe>
 8009782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009786:	d118      	bne.n	80097ba <_printf_float+0x1c2>
 8009788:	2900      	cmp	r1, #0
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	dd0b      	ble.n	80097a6 <_printf_float+0x1ae>
 800978e:	6121      	str	r1, [r4, #16]
 8009790:	b913      	cbnz	r3, 8009798 <_printf_float+0x1a0>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d502      	bpl.n	800979e <_printf_float+0x1a6>
 8009798:	3301      	adds	r3, #1
 800979a:	440b      	add	r3, r1
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	65a1      	str	r1, [r4, #88]	; 0x58
 80097a0:	f04f 0900 	mov.w	r9, #0
 80097a4:	e7de      	b.n	8009764 <_printf_float+0x16c>
 80097a6:	b913      	cbnz	r3, 80097ae <_printf_float+0x1b6>
 80097a8:	6822      	ldr	r2, [r4, #0]
 80097aa:	07d2      	lsls	r2, r2, #31
 80097ac:	d501      	bpl.n	80097b2 <_printf_float+0x1ba>
 80097ae:	3302      	adds	r3, #2
 80097b0:	e7f4      	b.n	800979c <_printf_float+0x1a4>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f2      	b.n	800979c <_printf_float+0x1a4>
 80097b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	4299      	cmp	r1, r3
 80097be:	db05      	blt.n	80097cc <_printf_float+0x1d4>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	6121      	str	r1, [r4, #16]
 80097c4:	07d8      	lsls	r0, r3, #31
 80097c6:	d5ea      	bpl.n	800979e <_printf_float+0x1a6>
 80097c8:	1c4b      	adds	r3, r1, #1
 80097ca:	e7e7      	b.n	800979c <_printf_float+0x1a4>
 80097cc:	2900      	cmp	r1, #0
 80097ce:	bfd4      	ite	le
 80097d0:	f1c1 0202 	rsble	r2, r1, #2
 80097d4:	2201      	movgt	r2, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	e7e0      	b.n	800979c <_printf_float+0x1a4>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	055a      	lsls	r2, r3, #21
 80097de:	d407      	bmi.n	80097f0 <_printf_float+0x1f8>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	4642      	mov	r2, r8
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	d12c      	bne.n	8009848 <_printf_float+0x250>
 80097ee:	e764      	b.n	80096ba <_printf_float+0xc2>
 80097f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097f4:	f240 80e0 	bls.w	80099b8 <_printf_float+0x3c0>
 80097f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097fc:	2200      	movs	r2, #0
 80097fe:	2300      	movs	r3, #0
 8009800:	f7f7 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8009804:	2800      	cmp	r0, #0
 8009806:	d034      	beq.n	8009872 <_printf_float+0x27a>
 8009808:	4a37      	ldr	r2, [pc, #220]	; (80098e8 <_printf_float+0x2f0>)
 800980a:	2301      	movs	r3, #1
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af51 	beq.w	80096ba <_printf_float+0xc2>
 8009818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800981c:	429a      	cmp	r2, r3
 800981e:	db02      	blt.n	8009826 <_printf_float+0x22e>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	07d8      	lsls	r0, r3, #31
 8009824:	d510      	bpl.n	8009848 <_printf_float+0x250>
 8009826:	ee18 3a10 	vmov	r3, s16
 800982a:	4652      	mov	r2, sl
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f af41 	beq.w	80096ba <_printf_float+0xc2>
 8009838:	f04f 0800 	mov.w	r8, #0
 800983c:	f104 091a 	add.w	r9, r4, #26
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	3b01      	subs	r3, #1
 8009844:	4543      	cmp	r3, r8
 8009846:	dc09      	bgt.n	800985c <_printf_float+0x264>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	079b      	lsls	r3, r3, #30
 800984c:	f100 8105 	bmi.w	8009a5a <_printf_float+0x462>
 8009850:	68e0      	ldr	r0, [r4, #12]
 8009852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009854:	4298      	cmp	r0, r3
 8009856:	bfb8      	it	lt
 8009858:	4618      	movlt	r0, r3
 800985a:	e730      	b.n	80096be <_printf_float+0xc6>
 800985c:	2301      	movs	r3, #1
 800985e:	464a      	mov	r2, r9
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f af27 	beq.w	80096ba <_printf_float+0xc2>
 800986c:	f108 0801 	add.w	r8, r8, #1
 8009870:	e7e6      	b.n	8009840 <_printf_float+0x248>
 8009872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	dc39      	bgt.n	80098ec <_printf_float+0x2f4>
 8009878:	4a1b      	ldr	r2, [pc, #108]	; (80098e8 <_printf_float+0x2f0>)
 800987a:	2301      	movs	r3, #1
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	47b8      	blx	r7
 8009882:	3001      	adds	r0, #1
 8009884:	f43f af19 	beq.w	80096ba <_printf_float+0xc2>
 8009888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800988c:	4313      	orrs	r3, r2
 800988e:	d102      	bne.n	8009896 <_printf_float+0x29e>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07d9      	lsls	r1, r3, #31
 8009894:	d5d8      	bpl.n	8009848 <_printf_float+0x250>
 8009896:	ee18 3a10 	vmov	r3, s16
 800989a:	4652      	mov	r2, sl
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f af09 	beq.w	80096ba <_printf_float+0xc2>
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	f104 0a1a 	add.w	sl, r4, #26
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	425b      	negs	r3, r3
 80098b4:	454b      	cmp	r3, r9
 80098b6:	dc01      	bgt.n	80098bc <_printf_float+0x2c4>
 80098b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ba:	e792      	b.n	80097e2 <_printf_float+0x1ea>
 80098bc:	2301      	movs	r3, #1
 80098be:	4652      	mov	r2, sl
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f aef7 	beq.w	80096ba <_printf_float+0xc2>
 80098cc:	f109 0901 	add.w	r9, r9, #1
 80098d0:	e7ee      	b.n	80098b0 <_printf_float+0x2b8>
 80098d2:	bf00      	nop
 80098d4:	7fefffff 	.word	0x7fefffff
 80098d8:	0800e358 	.word	0x0800e358
 80098dc:	0800e35c 	.word	0x0800e35c
 80098e0:	0800e364 	.word	0x0800e364
 80098e4:	0800e360 	.word	0x0800e360
 80098e8:	0800e368 	.word	0x0800e368
 80098ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098f0:	429a      	cmp	r2, r3
 80098f2:	bfa8      	it	ge
 80098f4:	461a      	movge	r2, r3
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	4691      	mov	r9, r2
 80098fa:	dc37      	bgt.n	800996c <_printf_float+0x374>
 80098fc:	f04f 0b00 	mov.w	fp, #0
 8009900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009904:	f104 021a 	add.w	r2, r4, #26
 8009908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	eba3 0309 	sub.w	r3, r3, r9
 8009910:	455b      	cmp	r3, fp
 8009912:	dc33      	bgt.n	800997c <_printf_float+0x384>
 8009914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009918:	429a      	cmp	r2, r3
 800991a:	db3b      	blt.n	8009994 <_printf_float+0x39c>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	07da      	lsls	r2, r3, #31
 8009920:	d438      	bmi.n	8009994 <_printf_float+0x39c>
 8009922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009924:	9a05      	ldr	r2, [sp, #20]
 8009926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009928:	1a9a      	subs	r2, r3, r2
 800992a:	eba3 0901 	sub.w	r9, r3, r1
 800992e:	4591      	cmp	r9, r2
 8009930:	bfa8      	it	ge
 8009932:	4691      	movge	r9, r2
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	dc35      	bgt.n	80099a6 <_printf_float+0x3ae>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009942:	f104 0a1a 	add.w	sl, r4, #26
 8009946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	eba3 0309 	sub.w	r3, r3, r9
 8009950:	4543      	cmp	r3, r8
 8009952:	f77f af79 	ble.w	8009848 <_printf_float+0x250>
 8009956:	2301      	movs	r3, #1
 8009958:	4652      	mov	r2, sl
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f aeaa 	beq.w	80096ba <_printf_float+0xc2>
 8009966:	f108 0801 	add.w	r8, r8, #1
 800996a:	e7ec      	b.n	8009946 <_printf_float+0x34e>
 800996c:	4613      	mov	r3, r2
 800996e:	4631      	mov	r1, r6
 8009970:	4642      	mov	r2, r8
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	d1c0      	bne.n	80098fc <_printf_float+0x304>
 800997a:	e69e      	b.n	80096ba <_printf_float+0xc2>
 800997c:	2301      	movs	r3, #1
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	9205      	str	r2, [sp, #20]
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	f43f ae97 	beq.w	80096ba <_printf_float+0xc2>
 800998c:	9a05      	ldr	r2, [sp, #20]
 800998e:	f10b 0b01 	add.w	fp, fp, #1
 8009992:	e7b9      	b.n	8009908 <_printf_float+0x310>
 8009994:	ee18 3a10 	vmov	r3, s16
 8009998:	4652      	mov	r2, sl
 800999a:	4631      	mov	r1, r6
 800999c:	4628      	mov	r0, r5
 800999e:	47b8      	blx	r7
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1be      	bne.n	8009922 <_printf_float+0x32a>
 80099a4:	e689      	b.n	80096ba <_printf_float+0xc2>
 80099a6:	9a05      	ldr	r2, [sp, #20]
 80099a8:	464b      	mov	r3, r9
 80099aa:	4442      	add	r2, r8
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	d1c1      	bne.n	800993a <_printf_float+0x342>
 80099b6:	e680      	b.n	80096ba <_printf_float+0xc2>
 80099b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ba:	2a01      	cmp	r2, #1
 80099bc:	dc01      	bgt.n	80099c2 <_printf_float+0x3ca>
 80099be:	07db      	lsls	r3, r3, #31
 80099c0:	d538      	bpl.n	8009a34 <_printf_float+0x43c>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4642      	mov	r2, r8
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f ae74 	beq.w	80096ba <_printf_float+0xc2>
 80099d2:	ee18 3a10 	vmov	r3, s16
 80099d6:	4652      	mov	r2, sl
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f ae6b 	beq.w	80096ba <_printf_float+0xc2>
 80099e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	f7f7 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f0:	b9d8      	cbnz	r0, 8009a2a <_printf_float+0x432>
 80099f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099f4:	f108 0201 	add.w	r2, r8, #1
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	d10e      	bne.n	8009a22 <_printf_float+0x42a>
 8009a04:	e659      	b.n	80096ba <_printf_float+0xc2>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4652      	mov	r2, sl
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f ae52 	beq.w	80096ba <_printf_float+0xc2>
 8009a16:	f108 0801 	add.w	r8, r8, #1
 8009a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	4543      	cmp	r3, r8
 8009a20:	dcf1      	bgt.n	8009a06 <_printf_float+0x40e>
 8009a22:	464b      	mov	r3, r9
 8009a24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a28:	e6dc      	b.n	80097e4 <_printf_float+0x1ec>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	f104 0a1a 	add.w	sl, r4, #26
 8009a32:	e7f2      	b.n	8009a1a <_printf_float+0x422>
 8009a34:	2301      	movs	r3, #1
 8009a36:	4642      	mov	r2, r8
 8009a38:	e7df      	b.n	80099fa <_printf_float+0x402>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	464a      	mov	r2, r9
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b8      	blx	r7
 8009a44:	3001      	adds	r0, #1
 8009a46:	f43f ae38 	beq.w	80096ba <_printf_float+0xc2>
 8009a4a:	f108 0801 	add.w	r8, r8, #1
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a52:	1a5b      	subs	r3, r3, r1
 8009a54:	4543      	cmp	r3, r8
 8009a56:	dcf0      	bgt.n	8009a3a <_printf_float+0x442>
 8009a58:	e6fa      	b.n	8009850 <_printf_float+0x258>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 0919 	add.w	r9, r4, #25
 8009a62:	e7f4      	b.n	8009a4e <_printf_float+0x456>

08009a64 <_printf_common>:
 8009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	4616      	mov	r6, r2
 8009a6a:	4699      	mov	r9, r3
 8009a6c:	688a      	ldr	r2, [r1, #8]
 8009a6e:	690b      	ldr	r3, [r1, #16]
 8009a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a74:	4293      	cmp	r3, r2
 8009a76:	bfb8      	it	lt
 8009a78:	4613      	movlt	r3, r2
 8009a7a:	6033      	str	r3, [r6, #0]
 8009a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a80:	4607      	mov	r7, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b10a      	cbz	r2, 8009a8a <_printf_common+0x26>
 8009a86:	3301      	adds	r3, #1
 8009a88:	6033      	str	r3, [r6, #0]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	0699      	lsls	r1, r3, #26
 8009a8e:	bf42      	ittt	mi
 8009a90:	6833      	ldrmi	r3, [r6, #0]
 8009a92:	3302      	addmi	r3, #2
 8009a94:	6033      	strmi	r3, [r6, #0]
 8009a96:	6825      	ldr	r5, [r4, #0]
 8009a98:	f015 0506 	ands.w	r5, r5, #6
 8009a9c:	d106      	bne.n	8009aac <_printf_common+0x48>
 8009a9e:	f104 0a19 	add.w	sl, r4, #25
 8009aa2:	68e3      	ldr	r3, [r4, #12]
 8009aa4:	6832      	ldr	r2, [r6, #0]
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	dc26      	bgt.n	8009afa <_printf_common+0x96>
 8009aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ab0:	1e13      	subs	r3, r2, #0
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	2301      	movne	r3, #1
 8009ab8:	0692      	lsls	r2, r2, #26
 8009aba:	d42b      	bmi.n	8009b14 <_printf_common+0xb0>
 8009abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d01e      	beq.n	8009b08 <_printf_common+0xa4>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	68e5      	ldr	r5, [r4, #12]
 8009ace:	6832      	ldr	r2, [r6, #0]
 8009ad0:	f003 0306 	and.w	r3, r3, #6
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	bf08      	it	eq
 8009ad8:	1aad      	subeq	r5, r5, r2
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	bf0c      	ite	eq
 8009ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ae4:	2500      	movne	r5, #0
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bfc4      	itt	gt
 8009aea:	1a9b      	subgt	r3, r3, r2
 8009aec:	18ed      	addgt	r5, r5, r3
 8009aee:	2600      	movs	r6, #0
 8009af0:	341a      	adds	r4, #26
 8009af2:	42b5      	cmp	r5, r6
 8009af4:	d11a      	bne.n	8009b2c <_printf_common+0xc8>
 8009af6:	2000      	movs	r0, #0
 8009af8:	e008      	b.n	8009b0c <_printf_common+0xa8>
 8009afa:	2301      	movs	r3, #1
 8009afc:	4652      	mov	r2, sl
 8009afe:	4649      	mov	r1, r9
 8009b00:	4638      	mov	r0, r7
 8009b02:	47c0      	blx	r8
 8009b04:	3001      	adds	r0, #1
 8009b06:	d103      	bne.n	8009b10 <_printf_common+0xac>
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b10:	3501      	adds	r5, #1
 8009b12:	e7c6      	b.n	8009aa2 <_printf_common+0x3e>
 8009b14:	18e1      	adds	r1, r4, r3
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	2030      	movs	r0, #48	; 0x30
 8009b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b1e:	4422      	add	r2, r4
 8009b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b28:	3302      	adds	r3, #2
 8009b2a:	e7c7      	b.n	8009abc <_printf_common+0x58>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4622      	mov	r2, r4
 8009b30:	4649      	mov	r1, r9
 8009b32:	4638      	mov	r0, r7
 8009b34:	47c0      	blx	r8
 8009b36:	3001      	adds	r0, #1
 8009b38:	d0e6      	beq.n	8009b08 <_printf_common+0xa4>
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7d9      	b.n	8009af2 <_printf_common+0x8e>
	...

08009b40 <_printf_i>:
 8009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	7e0f      	ldrb	r7, [r1, #24]
 8009b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b48:	2f78      	cmp	r7, #120	; 0x78
 8009b4a:	4691      	mov	r9, r2
 8009b4c:	4680      	mov	r8, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	469a      	mov	sl, r3
 8009b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b56:	d807      	bhi.n	8009b68 <_printf_i+0x28>
 8009b58:	2f62      	cmp	r7, #98	; 0x62
 8009b5a:	d80a      	bhi.n	8009b72 <_printf_i+0x32>
 8009b5c:	2f00      	cmp	r7, #0
 8009b5e:	f000 80d8 	beq.w	8009d12 <_printf_i+0x1d2>
 8009b62:	2f58      	cmp	r7, #88	; 0x58
 8009b64:	f000 80a3 	beq.w	8009cae <_printf_i+0x16e>
 8009b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b70:	e03a      	b.n	8009be8 <_printf_i+0xa8>
 8009b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b76:	2b15      	cmp	r3, #21
 8009b78:	d8f6      	bhi.n	8009b68 <_printf_i+0x28>
 8009b7a:	a101      	add	r1, pc, #4	; (adr r1, 8009b80 <_printf_i+0x40>)
 8009b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009b69 	.word	0x08009b69
 8009b8c:	08009b69 	.word	0x08009b69
 8009b90:	08009b69 	.word	0x08009b69
 8009b94:	08009b69 	.word	0x08009b69
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b69 	.word	0x08009b69
 8009ba0:	08009b69 	.word	0x08009b69
 8009ba4:	08009b69 	.word	0x08009b69
 8009ba8:	08009b69 	.word	0x08009b69
 8009bac:	08009cf9 	.word	0x08009cf9
 8009bb0:	08009c1d 	.word	0x08009c1d
 8009bb4:	08009cdb 	.word	0x08009cdb
 8009bb8:	08009b69 	.word	0x08009b69
 8009bbc:	08009b69 	.word	0x08009b69
 8009bc0:	08009d1b 	.word	0x08009d1b
 8009bc4:	08009b69 	.word	0x08009b69
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b69 	.word	0x08009b69
 8009bd0:	08009b69 	.word	0x08009b69
 8009bd4:	08009ce3 	.word	0x08009ce3
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	1d1a      	adds	r2, r3, #4
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	602a      	str	r2, [r5, #0]
 8009be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009be8:	2301      	movs	r3, #1
 8009bea:	e0a3      	b.n	8009d34 <_printf_i+0x1f4>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	6829      	ldr	r1, [r5, #0]
 8009bf0:	0606      	lsls	r6, r0, #24
 8009bf2:	f101 0304 	add.w	r3, r1, #4
 8009bf6:	d50a      	bpl.n	8009c0e <_printf_i+0xce>
 8009bf8:	680e      	ldr	r6, [r1, #0]
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	2e00      	cmp	r6, #0
 8009bfe:	da03      	bge.n	8009c08 <_printf_i+0xc8>
 8009c00:	232d      	movs	r3, #45	; 0x2d
 8009c02:	4276      	negs	r6, r6
 8009c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c08:	485e      	ldr	r0, [pc, #376]	; (8009d84 <_printf_i+0x244>)
 8009c0a:	230a      	movs	r3, #10
 8009c0c:	e019      	b.n	8009c42 <_printf_i+0x102>
 8009c0e:	680e      	ldr	r6, [r1, #0]
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c16:	bf18      	it	ne
 8009c18:	b236      	sxthne	r6, r6
 8009c1a:	e7ef      	b.n	8009bfc <_printf_i+0xbc>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	1d19      	adds	r1, r3, #4
 8009c22:	6029      	str	r1, [r5, #0]
 8009c24:	0601      	lsls	r1, r0, #24
 8009c26:	d501      	bpl.n	8009c2c <_printf_i+0xec>
 8009c28:	681e      	ldr	r6, [r3, #0]
 8009c2a:	e002      	b.n	8009c32 <_printf_i+0xf2>
 8009c2c:	0646      	lsls	r6, r0, #25
 8009c2e:	d5fb      	bpl.n	8009c28 <_printf_i+0xe8>
 8009c30:	881e      	ldrh	r6, [r3, #0]
 8009c32:	4854      	ldr	r0, [pc, #336]	; (8009d84 <_printf_i+0x244>)
 8009c34:	2f6f      	cmp	r7, #111	; 0x6f
 8009c36:	bf0c      	ite	eq
 8009c38:	2308      	moveq	r3, #8
 8009c3a:	230a      	movne	r3, #10
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c42:	6865      	ldr	r5, [r4, #4]
 8009c44:	60a5      	str	r5, [r4, #8]
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	bfa2      	ittt	ge
 8009c4a:	6821      	ldrge	r1, [r4, #0]
 8009c4c:	f021 0104 	bicge.w	r1, r1, #4
 8009c50:	6021      	strge	r1, [r4, #0]
 8009c52:	b90e      	cbnz	r6, 8009c58 <_printf_i+0x118>
 8009c54:	2d00      	cmp	r5, #0
 8009c56:	d04d      	beq.n	8009cf4 <_printf_i+0x1b4>
 8009c58:	4615      	mov	r5, r2
 8009c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c62:	5dc7      	ldrb	r7, [r0, r7]
 8009c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c68:	4637      	mov	r7, r6
 8009c6a:	42bb      	cmp	r3, r7
 8009c6c:	460e      	mov	r6, r1
 8009c6e:	d9f4      	bls.n	8009c5a <_printf_i+0x11a>
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d10b      	bne.n	8009c8c <_printf_i+0x14c>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	07de      	lsls	r6, r3, #31
 8009c78:	d508      	bpl.n	8009c8c <_printf_i+0x14c>
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	bfde      	ittt	le
 8009c82:	2330      	movle	r3, #48	; 0x30
 8009c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c8c:	1b52      	subs	r2, r2, r5
 8009c8e:	6122      	str	r2, [r4, #16]
 8009c90:	f8cd a000 	str.w	sl, [sp]
 8009c94:	464b      	mov	r3, r9
 8009c96:	aa03      	add	r2, sp, #12
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f7ff fee2 	bl	8009a64 <_printf_common>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d14c      	bne.n	8009d3e <_printf_i+0x1fe>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	b004      	add	sp, #16
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	4835      	ldr	r0, [pc, #212]	; (8009d84 <_printf_i+0x244>)
 8009cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cb4:	6829      	ldr	r1, [r5, #0]
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cbc:	6029      	str	r1, [r5, #0]
 8009cbe:	061d      	lsls	r5, r3, #24
 8009cc0:	d514      	bpl.n	8009cec <_printf_i+0x1ac>
 8009cc2:	07df      	lsls	r7, r3, #31
 8009cc4:	bf44      	itt	mi
 8009cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cca:	6023      	strmi	r3, [r4, #0]
 8009ccc:	b91e      	cbnz	r6, 8009cd6 <_printf_i+0x196>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	f023 0320 	bic.w	r3, r3, #32
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	2310      	movs	r3, #16
 8009cd8:	e7b0      	b.n	8009c3c <_printf_i+0xfc>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2378      	movs	r3, #120	; 0x78
 8009ce4:	4828      	ldr	r0, [pc, #160]	; (8009d88 <_printf_i+0x248>)
 8009ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cea:	e7e3      	b.n	8009cb4 <_printf_i+0x174>
 8009cec:	0659      	lsls	r1, r3, #25
 8009cee:	bf48      	it	mi
 8009cf0:	b2b6      	uxthmi	r6, r6
 8009cf2:	e7e6      	b.n	8009cc2 <_printf_i+0x182>
 8009cf4:	4615      	mov	r5, r2
 8009cf6:	e7bb      	b.n	8009c70 <_printf_i+0x130>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	6826      	ldr	r6, [r4, #0]
 8009cfc:	6961      	ldr	r1, [r4, #20]
 8009cfe:	1d18      	adds	r0, r3, #4
 8009d00:	6028      	str	r0, [r5, #0]
 8009d02:	0635      	lsls	r5, r6, #24
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	d501      	bpl.n	8009d0c <_printf_i+0x1cc>
 8009d08:	6019      	str	r1, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <_printf_i+0x1d2>
 8009d0c:	0670      	lsls	r0, r6, #25
 8009d0e:	d5fb      	bpl.n	8009d08 <_printf_i+0x1c8>
 8009d10:	8019      	strh	r1, [r3, #0]
 8009d12:	2300      	movs	r3, #0
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	4615      	mov	r5, r2
 8009d18:	e7ba      	b.n	8009c90 <_printf_i+0x150>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	1d1a      	adds	r2, r3, #4
 8009d1e:	602a      	str	r2, [r5, #0]
 8009d20:	681d      	ldr	r5, [r3, #0]
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	2100      	movs	r1, #0
 8009d26:	4628      	mov	r0, r5
 8009d28:	f7f6 fa5a 	bl	80001e0 <memchr>
 8009d2c:	b108      	cbz	r0, 8009d32 <_printf_i+0x1f2>
 8009d2e:	1b40      	subs	r0, r0, r5
 8009d30:	6060      	str	r0, [r4, #4]
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	6123      	str	r3, [r4, #16]
 8009d36:	2300      	movs	r3, #0
 8009d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3c:	e7a8      	b.n	8009c90 <_printf_i+0x150>
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	462a      	mov	r2, r5
 8009d42:	4649      	mov	r1, r9
 8009d44:	4640      	mov	r0, r8
 8009d46:	47d0      	blx	sl
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d0ab      	beq.n	8009ca4 <_printf_i+0x164>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079b      	lsls	r3, r3, #30
 8009d50:	d413      	bmi.n	8009d7a <_printf_i+0x23a>
 8009d52:	68e0      	ldr	r0, [r4, #12]
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	4298      	cmp	r0, r3
 8009d58:	bfb8      	it	lt
 8009d5a:	4618      	movlt	r0, r3
 8009d5c:	e7a4      	b.n	8009ca8 <_printf_i+0x168>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4632      	mov	r2, r6
 8009d62:	4649      	mov	r1, r9
 8009d64:	4640      	mov	r0, r8
 8009d66:	47d0      	blx	sl
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d09b      	beq.n	8009ca4 <_printf_i+0x164>
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	68e3      	ldr	r3, [r4, #12]
 8009d70:	9903      	ldr	r1, [sp, #12]
 8009d72:	1a5b      	subs	r3, r3, r1
 8009d74:	42ab      	cmp	r3, r5
 8009d76:	dcf2      	bgt.n	8009d5e <_printf_i+0x21e>
 8009d78:	e7eb      	b.n	8009d52 <_printf_i+0x212>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	f104 0619 	add.w	r6, r4, #25
 8009d80:	e7f5      	b.n	8009d6e <_printf_i+0x22e>
 8009d82:	bf00      	nop
 8009d84:	0800e36a 	.word	0x0800e36a
 8009d88:	0800e37b 	.word	0x0800e37b

08009d8c <_scanf_float>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	b087      	sub	sp, #28
 8009d92:	4617      	mov	r7, r2
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	688b      	ldr	r3, [r1, #8]
 8009d98:	1e5a      	subs	r2, r3, #1
 8009d9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d9e:	bf83      	ittte	hi
 8009da0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009da4:	195b      	addhi	r3, r3, r5
 8009da6:	9302      	strhi	r3, [sp, #8]
 8009da8:	2300      	movls	r3, #0
 8009daa:	bf86      	itte	hi
 8009dac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009db0:	608b      	strhi	r3, [r1, #8]
 8009db2:	9302      	strls	r3, [sp, #8]
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	468b      	mov	fp, r1
 8009db8:	2500      	movs	r5, #0
 8009dba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009dbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	460c      	mov	r4, r1
 8009dca:	465e      	mov	r6, fp
 8009dcc:	46aa      	mov	sl, r5
 8009dce:	46a9      	mov	r9, r5
 8009dd0:	9501      	str	r5, [sp, #4]
 8009dd2:	68a2      	ldr	r2, [r4, #8]
 8009dd4:	b152      	cbz	r2, 8009dec <_scanf_float+0x60>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b4e      	cmp	r3, #78	; 0x4e
 8009ddc:	d864      	bhi.n	8009ea8 <_scanf_float+0x11c>
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d83c      	bhi.n	8009e5c <_scanf_float+0xd0>
 8009de2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009de6:	b2c8      	uxtb	r0, r1
 8009de8:	280e      	cmp	r0, #14
 8009dea:	d93a      	bls.n	8009e62 <_scanf_float+0xd6>
 8009dec:	f1b9 0f00 	cmp.w	r9, #0
 8009df0:	d003      	beq.n	8009dfa <_scanf_float+0x6e>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dfe:	f1ba 0f01 	cmp.w	sl, #1
 8009e02:	f200 8113 	bhi.w	800a02c <_scanf_float+0x2a0>
 8009e06:	455e      	cmp	r6, fp
 8009e08:	f200 8105 	bhi.w	800a016 <_scanf_float+0x28a>
 8009e0c:	2501      	movs	r5, #1
 8009e0e:	4628      	mov	r0, r5
 8009e10:	b007      	add	sp, #28
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e1a:	2a0d      	cmp	r2, #13
 8009e1c:	d8e6      	bhi.n	8009dec <_scanf_float+0x60>
 8009e1e:	a101      	add	r1, pc, #4	; (adr r1, 8009e24 <_scanf_float+0x98>)
 8009e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e24:	08009f63 	.word	0x08009f63
 8009e28:	08009ded 	.word	0x08009ded
 8009e2c:	08009ded 	.word	0x08009ded
 8009e30:	08009ded 	.word	0x08009ded
 8009e34:	08009fc3 	.word	0x08009fc3
 8009e38:	08009f9b 	.word	0x08009f9b
 8009e3c:	08009ded 	.word	0x08009ded
 8009e40:	08009ded 	.word	0x08009ded
 8009e44:	08009f71 	.word	0x08009f71
 8009e48:	08009ded 	.word	0x08009ded
 8009e4c:	08009ded 	.word	0x08009ded
 8009e50:	08009ded 	.word	0x08009ded
 8009e54:	08009ded 	.word	0x08009ded
 8009e58:	08009f29 	.word	0x08009f29
 8009e5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e60:	e7db      	b.n	8009e1a <_scanf_float+0x8e>
 8009e62:	290e      	cmp	r1, #14
 8009e64:	d8c2      	bhi.n	8009dec <_scanf_float+0x60>
 8009e66:	a001      	add	r0, pc, #4	; (adr r0, 8009e6c <_scanf_float+0xe0>)
 8009e68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e6c:	08009f1b 	.word	0x08009f1b
 8009e70:	08009ded 	.word	0x08009ded
 8009e74:	08009f1b 	.word	0x08009f1b
 8009e78:	08009faf 	.word	0x08009faf
 8009e7c:	08009ded 	.word	0x08009ded
 8009e80:	08009ec9 	.word	0x08009ec9
 8009e84:	08009f05 	.word	0x08009f05
 8009e88:	08009f05 	.word	0x08009f05
 8009e8c:	08009f05 	.word	0x08009f05
 8009e90:	08009f05 	.word	0x08009f05
 8009e94:	08009f05 	.word	0x08009f05
 8009e98:	08009f05 	.word	0x08009f05
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009f05 	.word	0x08009f05
 8009ea4:	08009f05 	.word	0x08009f05
 8009ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8009eaa:	d809      	bhi.n	8009ec0 <_scanf_float+0x134>
 8009eac:	2b60      	cmp	r3, #96	; 0x60
 8009eae:	d8b2      	bhi.n	8009e16 <_scanf_float+0x8a>
 8009eb0:	2b54      	cmp	r3, #84	; 0x54
 8009eb2:	d077      	beq.n	8009fa4 <_scanf_float+0x218>
 8009eb4:	2b59      	cmp	r3, #89	; 0x59
 8009eb6:	d199      	bne.n	8009dec <_scanf_float+0x60>
 8009eb8:	2d07      	cmp	r5, #7
 8009eba:	d197      	bne.n	8009dec <_scanf_float+0x60>
 8009ebc:	2508      	movs	r5, #8
 8009ebe:	e029      	b.n	8009f14 <_scanf_float+0x188>
 8009ec0:	2b74      	cmp	r3, #116	; 0x74
 8009ec2:	d06f      	beq.n	8009fa4 <_scanf_float+0x218>
 8009ec4:	2b79      	cmp	r3, #121	; 0x79
 8009ec6:	e7f6      	b.n	8009eb6 <_scanf_float+0x12a>
 8009ec8:	6821      	ldr	r1, [r4, #0]
 8009eca:	05c8      	lsls	r0, r1, #23
 8009ecc:	d51a      	bpl.n	8009f04 <_scanf_float+0x178>
 8009ece:	9b02      	ldr	r3, [sp, #8]
 8009ed0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ed4:	6021      	str	r1, [r4, #0]
 8009ed6:	f109 0901 	add.w	r9, r9, #1
 8009eda:	b11b      	cbz	r3, 8009ee4 <_scanf_float+0x158>
 8009edc:	3b01      	subs	r3, #1
 8009ede:	3201      	adds	r2, #1
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	60a2      	str	r2, [r4, #8]
 8009ee4:	68a3      	ldr	r3, [r4, #8]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	60a3      	str	r3, [r4, #8]
 8009eea:	6923      	ldr	r3, [r4, #16]
 8009eec:	3301      	adds	r3, #1
 8009eee:	6123      	str	r3, [r4, #16]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	607b      	str	r3, [r7, #4]
 8009ef8:	f340 8084 	ble.w	800a004 <_scanf_float+0x278>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	e766      	b.n	8009dd2 <_scanf_float+0x46>
 8009f04:	eb1a 0f05 	cmn.w	sl, r5
 8009f08:	f47f af70 	bne.w	8009dec <_scanf_float+0x60>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f12:	6022      	str	r2, [r4, #0]
 8009f14:	f806 3b01 	strb.w	r3, [r6], #1
 8009f18:	e7e4      	b.n	8009ee4 <_scanf_float+0x158>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	0610      	lsls	r0, r2, #24
 8009f1e:	f57f af65 	bpl.w	8009dec <_scanf_float+0x60>
 8009f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f26:	e7f4      	b.n	8009f12 <_scanf_float+0x186>
 8009f28:	f1ba 0f00 	cmp.w	sl, #0
 8009f2c:	d10e      	bne.n	8009f4c <_scanf_float+0x1c0>
 8009f2e:	f1b9 0f00 	cmp.w	r9, #0
 8009f32:	d10e      	bne.n	8009f52 <_scanf_float+0x1c6>
 8009f34:	6822      	ldr	r2, [r4, #0]
 8009f36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f3e:	d108      	bne.n	8009f52 <_scanf_float+0x1c6>
 8009f40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	f04f 0a01 	mov.w	sl, #1
 8009f4a:	e7e3      	b.n	8009f14 <_scanf_float+0x188>
 8009f4c:	f1ba 0f02 	cmp.w	sl, #2
 8009f50:	d055      	beq.n	8009ffe <_scanf_float+0x272>
 8009f52:	2d01      	cmp	r5, #1
 8009f54:	d002      	beq.n	8009f5c <_scanf_float+0x1d0>
 8009f56:	2d04      	cmp	r5, #4
 8009f58:	f47f af48 	bne.w	8009dec <_scanf_float+0x60>
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	b2ed      	uxtb	r5, r5
 8009f60:	e7d8      	b.n	8009f14 <_scanf_float+0x188>
 8009f62:	f1ba 0f01 	cmp.w	sl, #1
 8009f66:	f47f af41 	bne.w	8009dec <_scanf_float+0x60>
 8009f6a:	f04f 0a02 	mov.w	sl, #2
 8009f6e:	e7d1      	b.n	8009f14 <_scanf_float+0x188>
 8009f70:	b97d      	cbnz	r5, 8009f92 <_scanf_float+0x206>
 8009f72:	f1b9 0f00 	cmp.w	r9, #0
 8009f76:	f47f af3c 	bne.w	8009df2 <_scanf_float+0x66>
 8009f7a:	6822      	ldr	r2, [r4, #0]
 8009f7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f84:	f47f af39 	bne.w	8009dfa <_scanf_float+0x6e>
 8009f88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f8c:	6022      	str	r2, [r4, #0]
 8009f8e:	2501      	movs	r5, #1
 8009f90:	e7c0      	b.n	8009f14 <_scanf_float+0x188>
 8009f92:	2d03      	cmp	r5, #3
 8009f94:	d0e2      	beq.n	8009f5c <_scanf_float+0x1d0>
 8009f96:	2d05      	cmp	r5, #5
 8009f98:	e7de      	b.n	8009f58 <_scanf_float+0x1cc>
 8009f9a:	2d02      	cmp	r5, #2
 8009f9c:	f47f af26 	bne.w	8009dec <_scanf_float+0x60>
 8009fa0:	2503      	movs	r5, #3
 8009fa2:	e7b7      	b.n	8009f14 <_scanf_float+0x188>
 8009fa4:	2d06      	cmp	r5, #6
 8009fa6:	f47f af21 	bne.w	8009dec <_scanf_float+0x60>
 8009faa:	2507      	movs	r5, #7
 8009fac:	e7b2      	b.n	8009f14 <_scanf_float+0x188>
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	0591      	lsls	r1, r2, #22
 8009fb2:	f57f af1b 	bpl.w	8009dec <_scanf_float+0x60>
 8009fb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009fba:	6022      	str	r2, [r4, #0]
 8009fbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fc0:	e7a8      	b.n	8009f14 <_scanf_float+0x188>
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009fc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009fcc:	d006      	beq.n	8009fdc <_scanf_float+0x250>
 8009fce:	0550      	lsls	r0, r2, #21
 8009fd0:	f57f af0c 	bpl.w	8009dec <_scanf_float+0x60>
 8009fd4:	f1b9 0f00 	cmp.w	r9, #0
 8009fd8:	f43f af0f 	beq.w	8009dfa <_scanf_float+0x6e>
 8009fdc:	0591      	lsls	r1, r2, #22
 8009fde:	bf58      	it	pl
 8009fe0:	9901      	ldrpl	r1, [sp, #4]
 8009fe2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009fe6:	bf58      	it	pl
 8009fe8:	eba9 0101 	subpl.w	r1, r9, r1
 8009fec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ff0:	bf58      	it	pl
 8009ff2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ff6:	6022      	str	r2, [r4, #0]
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	e78a      	b.n	8009f14 <_scanf_float+0x188>
 8009ffe:	f04f 0a03 	mov.w	sl, #3
 800a002:	e787      	b.n	8009f14 <_scanf_float+0x188>
 800a004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a008:	4639      	mov	r1, r7
 800a00a:	4640      	mov	r0, r8
 800a00c:	4798      	blx	r3
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f aedf 	beq.w	8009dd2 <_scanf_float+0x46>
 800a014:	e6ea      	b.n	8009dec <_scanf_float+0x60>
 800a016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a01a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a01e:	463a      	mov	r2, r7
 800a020:	4640      	mov	r0, r8
 800a022:	4798      	blx	r3
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	3b01      	subs	r3, #1
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	e6ec      	b.n	8009e06 <_scanf_float+0x7a>
 800a02c:	1e6b      	subs	r3, r5, #1
 800a02e:	2b06      	cmp	r3, #6
 800a030:	d825      	bhi.n	800a07e <_scanf_float+0x2f2>
 800a032:	2d02      	cmp	r5, #2
 800a034:	d836      	bhi.n	800a0a4 <_scanf_float+0x318>
 800a036:	455e      	cmp	r6, fp
 800a038:	f67f aee8 	bls.w	8009e0c <_scanf_float+0x80>
 800a03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a040:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a044:	463a      	mov	r2, r7
 800a046:	4640      	mov	r0, r8
 800a048:	4798      	blx	r3
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	6123      	str	r3, [r4, #16]
 800a050:	e7f1      	b.n	800a036 <_scanf_float+0x2aa>
 800a052:	9802      	ldr	r0, [sp, #8]
 800a054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a058:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	463a      	mov	r2, r7
 800a060:	4640      	mov	r0, r8
 800a062:	4798      	blx	r3
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	3b01      	subs	r3, #1
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a06e:	fa5f fa8a 	uxtb.w	sl, sl
 800a072:	f1ba 0f02 	cmp.w	sl, #2
 800a076:	d1ec      	bne.n	800a052 <_scanf_float+0x2c6>
 800a078:	3d03      	subs	r5, #3
 800a07a:	b2ed      	uxtb	r5, r5
 800a07c:	1b76      	subs	r6, r6, r5
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	05da      	lsls	r2, r3, #23
 800a082:	d52f      	bpl.n	800a0e4 <_scanf_float+0x358>
 800a084:	055b      	lsls	r3, r3, #21
 800a086:	d510      	bpl.n	800a0aa <_scanf_float+0x31e>
 800a088:	455e      	cmp	r6, fp
 800a08a:	f67f aebf 	bls.w	8009e0c <_scanf_float+0x80>
 800a08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a096:	463a      	mov	r2, r7
 800a098:	4640      	mov	r0, r8
 800a09a:	4798      	blx	r3
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	e7f1      	b.n	800a088 <_scanf_float+0x2fc>
 800a0a4:	46aa      	mov	sl, r5
 800a0a6:	9602      	str	r6, [sp, #8]
 800a0a8:	e7df      	b.n	800a06a <_scanf_float+0x2de>
 800a0aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	2965      	cmp	r1, #101	; 0x65
 800a0b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	d00c      	beq.n	800a0d8 <_scanf_float+0x34c>
 800a0be:	2945      	cmp	r1, #69	; 0x45
 800a0c0:	d00a      	beq.n	800a0d8 <_scanf_float+0x34c>
 800a0c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0c6:	463a      	mov	r2, r7
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4798      	blx	r3
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	1eb5      	subs	r5, r6, #2
 800a0d6:	6123      	str	r3, [r4, #16]
 800a0d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0dc:	463a      	mov	r2, r7
 800a0de:	4640      	mov	r0, r8
 800a0e0:	4798      	blx	r3
 800a0e2:	462e      	mov	r6, r5
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	f015 0510 	ands.w	r5, r5, #16
 800a0ea:	d159      	bne.n	800a1a0 <_scanf_float+0x414>
 800a0ec:	7035      	strb	r5, [r6, #0]
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f8:	d11b      	bne.n	800a132 <_scanf_float+0x3a6>
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	454b      	cmp	r3, r9
 800a0fe:	eba3 0209 	sub.w	r2, r3, r9
 800a102:	d123      	bne.n	800a14c <_scanf_float+0x3c0>
 800a104:	2200      	movs	r2, #0
 800a106:	4659      	mov	r1, fp
 800a108:	4640      	mov	r0, r8
 800a10a:	f000 ff7f 	bl	800b00c <_strtod_r>
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	f012 0f02 	tst.w	r2, #2
 800a116:	ec57 6b10 	vmov	r6, r7, d0
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	d021      	beq.n	800a162 <_scanf_float+0x3d6>
 800a11e:	9903      	ldr	r1, [sp, #12]
 800a120:	1d1a      	adds	r2, r3, #4
 800a122:	600a      	str	r2, [r1, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	e9c3 6700 	strd	r6, r7, [r3]
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60e3      	str	r3, [r4, #12]
 800a130:	e66d      	b.n	8009e0e <_scanf_float+0x82>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0e5      	beq.n	800a104 <_scanf_float+0x378>
 800a138:	9905      	ldr	r1, [sp, #20]
 800a13a:	230a      	movs	r3, #10
 800a13c:	462a      	mov	r2, r5
 800a13e:	3101      	adds	r1, #1
 800a140:	4640      	mov	r0, r8
 800a142:	f000 ffeb 	bl	800b11c <_strtol_r>
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	9e05      	ldr	r6, [sp, #20]
 800a14a:	1ac2      	subs	r2, r0, r3
 800a14c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a150:	429e      	cmp	r6, r3
 800a152:	bf28      	it	cs
 800a154:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a158:	4912      	ldr	r1, [pc, #72]	; (800a1a4 <_scanf_float+0x418>)
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 f8ba 	bl	800a2d4 <siprintf>
 800a160:	e7d0      	b.n	800a104 <_scanf_float+0x378>
 800a162:	9903      	ldr	r1, [sp, #12]
 800a164:	f012 0f04 	tst.w	r2, #4
 800a168:	f103 0204 	add.w	r2, r3, #4
 800a16c:	600a      	str	r2, [r1, #0]
 800a16e:	d1d9      	bne.n	800a124 <_scanf_float+0x398>
 800a170:	f8d3 8000 	ldr.w	r8, [r3]
 800a174:	ee10 2a10 	vmov	r2, s0
 800a178:	ee10 0a10 	vmov	r0, s0
 800a17c:	463b      	mov	r3, r7
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 800a184:	b128      	cbz	r0, 800a192 <_scanf_float+0x406>
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <_scanf_float+0x41c>)
 800a188:	f000 f89e 	bl	800a2c8 <nanf>
 800a18c:	ed88 0a00 	vstr	s0, [r8]
 800a190:	e7cb      	b.n	800a12a <_scanf_float+0x39e>
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fd27 	bl	8000be8 <__aeabi_d2f>
 800a19a:	f8c8 0000 	str.w	r0, [r8]
 800a19e:	e7c4      	b.n	800a12a <_scanf_float+0x39e>
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	e634      	b.n	8009e0e <_scanf_float+0x82>
 800a1a4:	0800e38c 	.word	0x0800e38c
 800a1a8:	0800e800 	.word	0x0800e800

0800a1ac <iprintf>:
 800a1ac:	b40f      	push	{r0, r1, r2, r3}
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <iprintf+0x2c>)
 800a1b0:	b513      	push	{r0, r1, r4, lr}
 800a1b2:	681c      	ldr	r4, [r3, #0]
 800a1b4:	b124      	cbz	r4, 800a1c0 <iprintf+0x14>
 800a1b6:	69a3      	ldr	r3, [r4, #24]
 800a1b8:	b913      	cbnz	r3, 800a1c0 <iprintf+0x14>
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f002 f828 	bl	800c210 <__sinit>
 800a1c0:	ab05      	add	r3, sp, #20
 800a1c2:	9a04      	ldr	r2, [sp, #16]
 800a1c4:	68a1      	ldr	r1, [r4, #8]
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f003 fc13 	bl	800d9f4 <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d4:	b004      	add	sp, #16
 800a1d6:	4770      	bx	lr
 800a1d8:	20000018 	.word	0x20000018

0800a1dc <_puts_r>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	b118      	cbz	r0, 800a1ec <_puts_r+0x10>
 800a1e4:	6983      	ldr	r3, [r0, #24]
 800a1e6:	b90b      	cbnz	r3, 800a1ec <_puts_r+0x10>
 800a1e8:	f002 f812 	bl	800c210 <__sinit>
 800a1ec:	69ab      	ldr	r3, [r5, #24]
 800a1ee:	68ac      	ldr	r4, [r5, #8]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_puts_r+0x1c>
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f002 f80c 	bl	800c210 <__sinit>
 800a1f8:	4b2c      	ldr	r3, [pc, #176]	; (800a2ac <_puts_r+0xd0>)
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d120      	bne.n	800a240 <_puts_r+0x64>
 800a1fe:	686c      	ldr	r4, [r5, #4]
 800a200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a202:	07db      	lsls	r3, r3, #31
 800a204:	d405      	bmi.n	800a212 <_puts_r+0x36>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	0598      	lsls	r0, r3, #22
 800a20a:	d402      	bmi.n	800a212 <_puts_r+0x36>
 800a20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20e:	f002 fc10 	bl	800ca32 <__retarget_lock_acquire_recursive>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	0719      	lsls	r1, r3, #28
 800a216:	d51d      	bpl.n	800a254 <_puts_r+0x78>
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	b1db      	cbz	r3, 800a254 <_puts_r+0x78>
 800a21c:	3e01      	subs	r6, #1
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a224:	3b01      	subs	r3, #1
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	bb39      	cbnz	r1, 800a27a <_puts_r+0x9e>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da38      	bge.n	800a2a0 <_puts_r+0xc4>
 800a22e:	4622      	mov	r2, r4
 800a230:	210a      	movs	r1, #10
 800a232:	4628      	mov	r0, r5
 800a234:	f000 ff74 	bl	800b120 <__swbuf_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	d011      	beq.n	800a260 <_puts_r+0x84>
 800a23c:	250a      	movs	r5, #10
 800a23e:	e011      	b.n	800a264 <_puts_r+0x88>
 800a240:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <_puts_r+0xd4>)
 800a242:	429c      	cmp	r4, r3
 800a244:	d101      	bne.n	800a24a <_puts_r+0x6e>
 800a246:	68ac      	ldr	r4, [r5, #8]
 800a248:	e7da      	b.n	800a200 <_puts_r+0x24>
 800a24a:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <_puts_r+0xd8>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	bf08      	it	eq
 800a250:	68ec      	ldreq	r4, [r5, #12]
 800a252:	e7d5      	b.n	800a200 <_puts_r+0x24>
 800a254:	4621      	mov	r1, r4
 800a256:	4628      	mov	r0, r5
 800a258:	f000 ffc6 	bl	800b1e8 <__swsetup_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d0dd      	beq.n	800a21c <_puts_r+0x40>
 800a260:	f04f 35ff 	mov.w	r5, #4294967295
 800a264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a266:	07da      	lsls	r2, r3, #31
 800a268:	d405      	bmi.n	800a276 <_puts_r+0x9a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	059b      	lsls	r3, r3, #22
 800a26e:	d402      	bmi.n	800a276 <_puts_r+0x9a>
 800a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a272:	f002 fbdf 	bl	800ca34 <__retarget_lock_release_recursive>
 800a276:	4628      	mov	r0, r5
 800a278:	bd70      	pop	{r4, r5, r6, pc}
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da04      	bge.n	800a288 <_puts_r+0xac>
 800a27e:	69a2      	ldr	r2, [r4, #24]
 800a280:	429a      	cmp	r2, r3
 800a282:	dc06      	bgt.n	800a292 <_puts_r+0xb6>
 800a284:	290a      	cmp	r1, #10
 800a286:	d004      	beq.n	800a292 <_puts_r+0xb6>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	7019      	strb	r1, [r3, #0]
 800a290:	e7c5      	b.n	800a21e <_puts_r+0x42>
 800a292:	4622      	mov	r2, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 ff43 	bl	800b120 <__swbuf_r>
 800a29a:	3001      	adds	r0, #1
 800a29c:	d1bf      	bne.n	800a21e <_puts_r+0x42>
 800a29e:	e7df      	b.n	800a260 <_puts_r+0x84>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	250a      	movs	r5, #10
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	701d      	strb	r5, [r3, #0]
 800a2aa:	e7db      	b.n	800a264 <_puts_r+0x88>
 800a2ac:	0800e59c 	.word	0x0800e59c
 800a2b0:	0800e5bc 	.word	0x0800e5bc
 800a2b4:	0800e57c 	.word	0x0800e57c

0800a2b8 <puts>:
 800a2b8:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <puts+0xc>)
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	f7ff bf8d 	b.w	800a1dc <_puts_r>
 800a2c2:	bf00      	nop
 800a2c4:	20000018 	.word	0x20000018

0800a2c8 <nanf>:
 800a2c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a2d0 <nanf+0x8>
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	7fc00000 	.word	0x7fc00000

0800a2d4 <siprintf>:
 800a2d4:	b40e      	push	{r1, r2, r3}
 800a2d6:	b500      	push	{lr}
 800a2d8:	b09c      	sub	sp, #112	; 0x70
 800a2da:	ab1d      	add	r3, sp, #116	; 0x74
 800a2dc:	9002      	str	r0, [sp, #8]
 800a2de:	9006      	str	r0, [sp, #24]
 800a2e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2e4:	4809      	ldr	r0, [pc, #36]	; (800a30c <siprintf+0x38>)
 800a2e6:	9107      	str	r1, [sp, #28]
 800a2e8:	9104      	str	r1, [sp, #16]
 800a2ea:	4909      	ldr	r1, [pc, #36]	; (800a310 <siprintf+0x3c>)
 800a2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f0:	9105      	str	r1, [sp, #20]
 800a2f2:	6800      	ldr	r0, [r0, #0]
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	a902      	add	r1, sp, #8
 800a2f8:	f003 fa52 	bl	800d7a0 <_svfiprintf_r>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	2200      	movs	r2, #0
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	b01c      	add	sp, #112	; 0x70
 800a304:	f85d eb04 	ldr.w	lr, [sp], #4
 800a308:	b003      	add	sp, #12
 800a30a:	4770      	bx	lr
 800a30c:	20000018 	.word	0x20000018
 800a310:	ffff0208 	.word	0xffff0208

0800a314 <__sread>:
 800a314:	b510      	push	{r4, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	f003 fc9a 	bl	800dc54 <_read_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	bfab      	itete	ge
 800a324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a326:	89a3      	ldrhlt	r3, [r4, #12]
 800a328:	181b      	addge	r3, r3, r0
 800a32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32e:	bfac      	ite	ge
 800a330:	6563      	strge	r3, [r4, #84]	; 0x54
 800a332:	81a3      	strhlt	r3, [r4, #12]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__swrite>:
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	461f      	mov	r7, r3
 800a33c:	898b      	ldrh	r3, [r1, #12]
 800a33e:	05db      	lsls	r3, r3, #23
 800a340:	4605      	mov	r5, r0
 800a342:	460c      	mov	r4, r1
 800a344:	4616      	mov	r6, r2
 800a346:	d505      	bpl.n	800a354 <__swrite+0x1e>
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	2302      	movs	r3, #2
 800a34e:	2200      	movs	r2, #0
 800a350:	f002 fb72 	bl	800ca38 <_lseek_r>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a35a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	4632      	mov	r2, r6
 800a362:	463b      	mov	r3, r7
 800a364:	4628      	mov	r0, r5
 800a366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	f000 bf2b 	b.w	800b1c4 <_write_r>

0800a36e <__sseek>:
 800a36e:	b510      	push	{r4, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f002 fb5f 	bl	800ca38 <_lseek_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	bf15      	itete	ne
 800a380:	6560      	strne	r0, [r4, #84]	; 0x54
 800a382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a38a:	81a3      	strheq	r3, [r4, #12]
 800a38c:	bf18      	it	ne
 800a38e:	81a3      	strhne	r3, [r4, #12]
 800a390:	bd10      	pop	{r4, pc}

0800a392 <__sclose>:
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 bf95 	b.w	800b2c4 <_close_r>

0800a39a <strncmp>:
 800a39a:	b510      	push	{r4, lr}
 800a39c:	b17a      	cbz	r2, 800a3be <strncmp+0x24>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	3901      	subs	r1, #1
 800a3a2:	1884      	adds	r4, r0, r2
 800a3a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a3ac:	4290      	cmp	r0, r2
 800a3ae:	d101      	bne.n	800a3b4 <strncmp+0x1a>
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	d101      	bne.n	800a3b8 <strncmp+0x1e>
 800a3b4:	1a80      	subs	r0, r0, r2
 800a3b6:	bd10      	pop	{r4, pc}
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1f3      	bne.n	800a3a4 <strncmp+0xa>
 800a3bc:	e7fa      	b.n	800a3b4 <strncmp+0x1a>
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7f9      	b.n	800a3b6 <strncmp+0x1c>

0800a3c2 <sulp>:
 800a3c2:	b570      	push	{r4, r5, r6, lr}
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	ec45 4b10 	vmov	d0, r4, r5
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	f002 ff45 	bl	800d25c <__ulp>
 800a3d2:	ec51 0b10 	vmov	r0, r1, d0
 800a3d6:	b17e      	cbz	r6, 800a3f8 <sulp+0x36>
 800a3d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	dd09      	ble.n	800a3f8 <sulp+0x36>
 800a3e4:	051b      	lsls	r3, r3, #20
 800a3e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a3ea:	2400      	movs	r4, #0
 800a3ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f900 	bl	80005f8 <__aeabi_dmul>
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	0000      	movs	r0, r0
 800a3fc:	0000      	movs	r0, r0
	...

0800a400 <_strtod_l>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b02 	vpush	{d8}
 800a408:	b09d      	sub	sp, #116	; 0x74
 800a40a:	461f      	mov	r7, r3
 800a40c:	2300      	movs	r3, #0
 800a40e:	9318      	str	r3, [sp, #96]	; 0x60
 800a410:	4ba2      	ldr	r3, [pc, #648]	; (800a69c <_strtod_l+0x29c>)
 800a412:	9213      	str	r2, [sp, #76]	; 0x4c
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	9305      	str	r3, [sp, #20]
 800a418:	4604      	mov	r4, r0
 800a41a:	4618      	mov	r0, r3
 800a41c:	4688      	mov	r8, r1
 800a41e:	f7f5 fed7 	bl	80001d0 <strlen>
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	4605      	mov	r5, r0
 800a428:	f04f 0b00 	mov.w	fp, #0
 800a42c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	2a2b      	cmp	r2, #43	; 0x2b
 800a436:	d04e      	beq.n	800a4d6 <_strtod_l+0xd6>
 800a438:	d83b      	bhi.n	800a4b2 <_strtod_l+0xb2>
 800a43a:	2a0d      	cmp	r2, #13
 800a43c:	d834      	bhi.n	800a4a8 <_strtod_l+0xa8>
 800a43e:	2a08      	cmp	r2, #8
 800a440:	d834      	bhi.n	800a4ac <_strtod_l+0xac>
 800a442:	2a00      	cmp	r2, #0
 800a444:	d03e      	beq.n	800a4c4 <_strtod_l+0xc4>
 800a446:	2300      	movs	r3, #0
 800a448:	930a      	str	r3, [sp, #40]	; 0x28
 800a44a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a44c:	7833      	ldrb	r3, [r6, #0]
 800a44e:	2b30      	cmp	r3, #48	; 0x30
 800a450:	f040 80b0 	bne.w	800a5b4 <_strtod_l+0x1b4>
 800a454:	7873      	ldrb	r3, [r6, #1]
 800a456:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a45a:	2b58      	cmp	r3, #88	; 0x58
 800a45c:	d168      	bne.n	800a530 <_strtod_l+0x130>
 800a45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	ab18      	add	r3, sp, #96	; 0x60
 800a464:	9702      	str	r7, [sp, #8]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4a8d      	ldr	r2, [pc, #564]	; (800a6a0 <_strtod_l+0x2a0>)
 800a46a:	ab19      	add	r3, sp, #100	; 0x64
 800a46c:	a917      	add	r1, sp, #92	; 0x5c
 800a46e:	4620      	mov	r0, r4
 800a470:	f001 ffd2 	bl	800c418 <__gethex>
 800a474:	f010 0707 	ands.w	r7, r0, #7
 800a478:	4605      	mov	r5, r0
 800a47a:	d005      	beq.n	800a488 <_strtod_l+0x88>
 800a47c:	2f06      	cmp	r7, #6
 800a47e:	d12c      	bne.n	800a4da <_strtod_l+0xda>
 800a480:	3601      	adds	r6, #1
 800a482:	2300      	movs	r3, #0
 800a484:	9617      	str	r6, [sp, #92]	; 0x5c
 800a486:	930a      	str	r3, [sp, #40]	; 0x28
 800a488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 8590 	bne.w	800afb0 <_strtod_l+0xbb0>
 800a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a492:	b1eb      	cbz	r3, 800a4d0 <_strtod_l+0xd0>
 800a494:	4652      	mov	r2, sl
 800a496:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a49a:	ec43 2b10 	vmov	d0, r2, r3
 800a49e:	b01d      	add	sp, #116	; 0x74
 800a4a0:	ecbd 8b02 	vpop	{d8}
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	2a20      	cmp	r2, #32
 800a4aa:	d1cc      	bne.n	800a446 <_strtod_l+0x46>
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800a4b0:	e7be      	b.n	800a430 <_strtod_l+0x30>
 800a4b2:	2a2d      	cmp	r2, #45	; 0x2d
 800a4b4:	d1c7      	bne.n	800a446 <_strtod_l+0x46>
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1c2      	bne.n	800a44a <_strtod_l+0x4a>
 800a4c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 856e 	bne.w	800afac <_strtod_l+0xbac>
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	e7e1      	b.n	800a49a <_strtod_l+0x9a>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	e7ee      	b.n	800a4b8 <_strtod_l+0xb8>
 800a4da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4dc:	b13a      	cbz	r2, 800a4ee <_strtod_l+0xee>
 800a4de:	2135      	movs	r1, #53	; 0x35
 800a4e0:	a81a      	add	r0, sp, #104	; 0x68
 800a4e2:	f002 ffc6 	bl	800d472 <__copybits>
 800a4e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f002 fb85 	bl	800cbf8 <_Bfree>
 800a4ee:	3f01      	subs	r7, #1
 800a4f0:	2f04      	cmp	r7, #4
 800a4f2:	d806      	bhi.n	800a502 <_strtod_l+0x102>
 800a4f4:	e8df f007 	tbb	[pc, r7]
 800a4f8:	1714030a 	.word	0x1714030a
 800a4fc:	0a          	.byte	0x0a
 800a4fd:	00          	.byte	0x00
 800a4fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a502:	0728      	lsls	r0, r5, #28
 800a504:	d5c0      	bpl.n	800a488 <_strtod_l+0x88>
 800a506:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a50a:	e7bd      	b.n	800a488 <_strtod_l+0x88>
 800a50c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a510:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a512:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a516:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a51a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a51e:	e7f0      	b.n	800a502 <_strtod_l+0x102>
 800a520:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a6a4 <_strtod_l+0x2a4>
 800a524:	e7ed      	b.n	800a502 <_strtod_l+0x102>
 800a526:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a52a:	f04f 3aff 	mov.w	sl, #4294967295
 800a52e:	e7e8      	b.n	800a502 <_strtod_l+0x102>
 800a530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	9217      	str	r2, [sp, #92]	; 0x5c
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	2b30      	cmp	r3, #48	; 0x30
 800a53a:	d0f9      	beq.n	800a530 <_strtod_l+0x130>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0a3      	beq.n	800a488 <_strtod_l+0x88>
 800a540:	2301      	movs	r3, #1
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	9304      	str	r3, [sp, #16]
 800a548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a550:	464f      	mov	r7, r9
 800a552:	220a      	movs	r2, #10
 800a554:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a556:	7806      	ldrb	r6, [r0, #0]
 800a558:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a55c:	b2d9      	uxtb	r1, r3
 800a55e:	2909      	cmp	r1, #9
 800a560:	d92a      	bls.n	800a5b8 <_strtod_l+0x1b8>
 800a562:	9905      	ldr	r1, [sp, #20]
 800a564:	462a      	mov	r2, r5
 800a566:	f7ff ff18 	bl	800a39a <strncmp>
 800a56a:	b398      	cbz	r0, 800a5d4 <_strtod_l+0x1d4>
 800a56c:	2000      	movs	r0, #0
 800a56e:	4632      	mov	r2, r6
 800a570:	463d      	mov	r5, r7
 800a572:	9005      	str	r0, [sp, #20]
 800a574:	4603      	mov	r3, r0
 800a576:	2a65      	cmp	r2, #101	; 0x65
 800a578:	d001      	beq.n	800a57e <_strtod_l+0x17e>
 800a57a:	2a45      	cmp	r2, #69	; 0x45
 800a57c:	d118      	bne.n	800a5b0 <_strtod_l+0x1b0>
 800a57e:	b91d      	cbnz	r5, 800a588 <_strtod_l+0x188>
 800a580:	9a04      	ldr	r2, [sp, #16]
 800a582:	4302      	orrs	r2, r0
 800a584:	d09e      	beq.n	800a4c4 <_strtod_l+0xc4>
 800a586:	2500      	movs	r5, #0
 800a588:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a58c:	f108 0201 	add.w	r2, r8, #1
 800a590:	9217      	str	r2, [sp, #92]	; 0x5c
 800a592:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a596:	2a2b      	cmp	r2, #43	; 0x2b
 800a598:	d075      	beq.n	800a686 <_strtod_l+0x286>
 800a59a:	2a2d      	cmp	r2, #45	; 0x2d
 800a59c:	d07b      	beq.n	800a696 <_strtod_l+0x296>
 800a59e:	f04f 0c00 	mov.w	ip, #0
 800a5a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a5a6:	2909      	cmp	r1, #9
 800a5a8:	f240 8082 	bls.w	800a6b0 <_strtod_l+0x2b0>
 800a5ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	e09d      	b.n	800a6f0 <_strtod_l+0x2f0>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	e7c4      	b.n	800a542 <_strtod_l+0x142>
 800a5b8:	2f08      	cmp	r7, #8
 800a5ba:	bfd8      	it	le
 800a5bc:	9907      	ldrle	r1, [sp, #28]
 800a5be:	f100 0001 	add.w	r0, r0, #1
 800a5c2:	bfda      	itte	le
 800a5c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5c8:	9307      	strle	r3, [sp, #28]
 800a5ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a5ce:	3701      	adds	r7, #1
 800a5d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a5d2:	e7bf      	b.n	800a554 <_strtod_l+0x154>
 800a5d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5d6:	195a      	adds	r2, r3, r5
 800a5d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5da:	5d5a      	ldrb	r2, [r3, r5]
 800a5dc:	2f00      	cmp	r7, #0
 800a5de:	d037      	beq.n	800a650 <_strtod_l+0x250>
 800a5e0:	9005      	str	r0, [sp, #20]
 800a5e2:	463d      	mov	r5, r7
 800a5e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a5e8:	2b09      	cmp	r3, #9
 800a5ea:	d912      	bls.n	800a612 <_strtod_l+0x212>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e7c2      	b.n	800a576 <_strtod_l+0x176>
 800a5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5f6:	785a      	ldrb	r2, [r3, #1]
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	2a30      	cmp	r2, #48	; 0x30
 800a5fc:	d0f8      	beq.n	800a5f0 <_strtod_l+0x1f0>
 800a5fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a602:	2b08      	cmp	r3, #8
 800a604:	f200 84d9 	bhi.w	800afba <_strtod_l+0xbba>
 800a608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a60a:	9005      	str	r0, [sp, #20]
 800a60c:	2000      	movs	r0, #0
 800a60e:	9308      	str	r3, [sp, #32]
 800a610:	4605      	mov	r5, r0
 800a612:	3a30      	subs	r2, #48	; 0x30
 800a614:	f100 0301 	add.w	r3, r0, #1
 800a618:	d014      	beq.n	800a644 <_strtod_l+0x244>
 800a61a:	9905      	ldr	r1, [sp, #20]
 800a61c:	4419      	add	r1, r3
 800a61e:	9105      	str	r1, [sp, #20]
 800a620:	462b      	mov	r3, r5
 800a622:	eb00 0e05 	add.w	lr, r0, r5
 800a626:	210a      	movs	r1, #10
 800a628:	4573      	cmp	r3, lr
 800a62a:	d113      	bne.n	800a654 <_strtod_l+0x254>
 800a62c:	182b      	adds	r3, r5, r0
 800a62e:	2b08      	cmp	r3, #8
 800a630:	f105 0501 	add.w	r5, r5, #1
 800a634:	4405      	add	r5, r0
 800a636:	dc1c      	bgt.n	800a672 <_strtod_l+0x272>
 800a638:	9907      	ldr	r1, [sp, #28]
 800a63a:	230a      	movs	r3, #10
 800a63c:	fb03 2301 	mla	r3, r3, r1, r2
 800a640:	9307      	str	r3, [sp, #28]
 800a642:	2300      	movs	r3, #0
 800a644:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a646:	1c51      	adds	r1, r2, #1
 800a648:	9117      	str	r1, [sp, #92]	; 0x5c
 800a64a:	7852      	ldrb	r2, [r2, #1]
 800a64c:	4618      	mov	r0, r3
 800a64e:	e7c9      	b.n	800a5e4 <_strtod_l+0x1e4>
 800a650:	4638      	mov	r0, r7
 800a652:	e7d2      	b.n	800a5fa <_strtod_l+0x1fa>
 800a654:	2b08      	cmp	r3, #8
 800a656:	dc04      	bgt.n	800a662 <_strtod_l+0x262>
 800a658:	9e07      	ldr	r6, [sp, #28]
 800a65a:	434e      	muls	r6, r1
 800a65c:	9607      	str	r6, [sp, #28]
 800a65e:	3301      	adds	r3, #1
 800a660:	e7e2      	b.n	800a628 <_strtod_l+0x228>
 800a662:	f103 0c01 	add.w	ip, r3, #1
 800a666:	f1bc 0f10 	cmp.w	ip, #16
 800a66a:	bfd8      	it	le
 800a66c:	fb01 f909 	mulle.w	r9, r1, r9
 800a670:	e7f5      	b.n	800a65e <_strtod_l+0x25e>
 800a672:	2d10      	cmp	r5, #16
 800a674:	bfdc      	itt	le
 800a676:	230a      	movle	r3, #10
 800a678:	fb03 2909 	mlale	r9, r3, r9, r2
 800a67c:	e7e1      	b.n	800a642 <_strtod_l+0x242>
 800a67e:	2300      	movs	r3, #0
 800a680:	9305      	str	r3, [sp, #20]
 800a682:	2301      	movs	r3, #1
 800a684:	e77c      	b.n	800a580 <_strtod_l+0x180>
 800a686:	f04f 0c00 	mov.w	ip, #0
 800a68a:	f108 0202 	add.w	r2, r8, #2
 800a68e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a690:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a694:	e785      	b.n	800a5a2 <_strtod_l+0x1a2>
 800a696:	f04f 0c01 	mov.w	ip, #1
 800a69a:	e7f6      	b.n	800a68a <_strtod_l+0x28a>
 800a69c:	0800e644 	.word	0x0800e644
 800a6a0:	0800e394 	.word	0x0800e394
 800a6a4:	7ff00000 	.word	0x7ff00000
 800a6a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6aa:	1c51      	adds	r1, r2, #1
 800a6ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800a6ae:	7852      	ldrb	r2, [r2, #1]
 800a6b0:	2a30      	cmp	r2, #48	; 0x30
 800a6b2:	d0f9      	beq.n	800a6a8 <_strtod_l+0x2a8>
 800a6b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a6b8:	2908      	cmp	r1, #8
 800a6ba:	f63f af79 	bhi.w	800a5b0 <_strtod_l+0x1b0>
 800a6be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a6c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6c4:	9206      	str	r2, [sp, #24]
 800a6c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6c8:	1c51      	adds	r1, r2, #1
 800a6ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800a6cc:	7852      	ldrb	r2, [r2, #1]
 800a6ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a6d2:	2e09      	cmp	r6, #9
 800a6d4:	d937      	bls.n	800a746 <_strtod_l+0x346>
 800a6d6:	9e06      	ldr	r6, [sp, #24]
 800a6d8:	1b89      	subs	r1, r1, r6
 800a6da:	2908      	cmp	r1, #8
 800a6dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a6e0:	dc02      	bgt.n	800a6e8 <_strtod_l+0x2e8>
 800a6e2:	4576      	cmp	r6, lr
 800a6e4:	bfa8      	it	ge
 800a6e6:	4676      	movge	r6, lr
 800a6e8:	f1bc 0f00 	cmp.w	ip, #0
 800a6ec:	d000      	beq.n	800a6f0 <_strtod_l+0x2f0>
 800a6ee:	4276      	negs	r6, r6
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	d14d      	bne.n	800a790 <_strtod_l+0x390>
 800a6f4:	9904      	ldr	r1, [sp, #16]
 800a6f6:	4301      	orrs	r1, r0
 800a6f8:	f47f aec6 	bne.w	800a488 <_strtod_l+0x88>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f47f aee1 	bne.w	800a4c4 <_strtod_l+0xc4>
 800a702:	2a69      	cmp	r2, #105	; 0x69
 800a704:	d027      	beq.n	800a756 <_strtod_l+0x356>
 800a706:	dc24      	bgt.n	800a752 <_strtod_l+0x352>
 800a708:	2a49      	cmp	r2, #73	; 0x49
 800a70a:	d024      	beq.n	800a756 <_strtod_l+0x356>
 800a70c:	2a4e      	cmp	r2, #78	; 0x4e
 800a70e:	f47f aed9 	bne.w	800a4c4 <_strtod_l+0xc4>
 800a712:	499f      	ldr	r1, [pc, #636]	; (800a990 <_strtod_l+0x590>)
 800a714:	a817      	add	r0, sp, #92	; 0x5c
 800a716:	f002 f8d7 	bl	800c8c8 <__match>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f aed2 	beq.w	800a4c4 <_strtod_l+0xc4>
 800a720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b28      	cmp	r3, #40	; 0x28
 800a726:	d12d      	bne.n	800a784 <_strtod_l+0x384>
 800a728:	499a      	ldr	r1, [pc, #616]	; (800a994 <_strtod_l+0x594>)
 800a72a:	aa1a      	add	r2, sp, #104	; 0x68
 800a72c:	a817      	add	r0, sp, #92	; 0x5c
 800a72e:	f002 f8df 	bl	800c8f0 <__hexnan>
 800a732:	2805      	cmp	r0, #5
 800a734:	d126      	bne.n	800a784 <_strtod_l+0x384>
 800a736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a738:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a73c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a740:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a744:	e6a0      	b.n	800a488 <_strtod_l+0x88>
 800a746:	210a      	movs	r1, #10
 800a748:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a74c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a750:	e7b9      	b.n	800a6c6 <_strtod_l+0x2c6>
 800a752:	2a6e      	cmp	r2, #110	; 0x6e
 800a754:	e7db      	b.n	800a70e <_strtod_l+0x30e>
 800a756:	4990      	ldr	r1, [pc, #576]	; (800a998 <_strtod_l+0x598>)
 800a758:	a817      	add	r0, sp, #92	; 0x5c
 800a75a:	f002 f8b5 	bl	800c8c8 <__match>
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f aeb0 	beq.w	800a4c4 <_strtod_l+0xc4>
 800a764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a766:	498d      	ldr	r1, [pc, #564]	; (800a99c <_strtod_l+0x59c>)
 800a768:	3b01      	subs	r3, #1
 800a76a:	a817      	add	r0, sp, #92	; 0x5c
 800a76c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a76e:	f002 f8ab 	bl	800c8c8 <__match>
 800a772:	b910      	cbnz	r0, 800a77a <_strtod_l+0x37a>
 800a774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a776:	3301      	adds	r3, #1
 800a778:	9317      	str	r3, [sp, #92]	; 0x5c
 800a77a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a9ac <_strtod_l+0x5ac>
 800a77e:	f04f 0a00 	mov.w	sl, #0
 800a782:	e681      	b.n	800a488 <_strtod_l+0x88>
 800a784:	4886      	ldr	r0, [pc, #536]	; (800a9a0 <_strtod_l+0x5a0>)
 800a786:	f003 fa77 	bl	800dc78 <nan>
 800a78a:	ec5b ab10 	vmov	sl, fp, d0
 800a78e:	e67b      	b.n	800a488 <_strtod_l+0x88>
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	9807      	ldr	r0, [sp, #28]
 800a794:	1af3      	subs	r3, r6, r3
 800a796:	2f00      	cmp	r7, #0
 800a798:	bf08      	it	eq
 800a79a:	462f      	moveq	r7, r5
 800a79c:	2d10      	cmp	r5, #16
 800a79e:	9306      	str	r3, [sp, #24]
 800a7a0:	46a8      	mov	r8, r5
 800a7a2:	bfa8      	it	ge
 800a7a4:	f04f 0810 	movge.w	r8, #16
 800a7a8:	f7f5 feac 	bl	8000504 <__aeabi_ui2d>
 800a7ac:	2d09      	cmp	r5, #9
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	468b      	mov	fp, r1
 800a7b2:	dd13      	ble.n	800a7dc <_strtod_l+0x3dc>
 800a7b4:	4b7b      	ldr	r3, [pc, #492]	; (800a9a4 <_strtod_l+0x5a4>)
 800a7b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a7ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4682      	mov	sl, r0
 800a7c4:	4648      	mov	r0, r9
 800a7c6:	468b      	mov	fp, r1
 800a7c8:	f7f5 fe9c 	bl	8000504 <__aeabi_ui2d>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	4659      	mov	r1, fp
 800a7d4:	f7f5 fd5a 	bl	800028c <__adddf3>
 800a7d8:	4682      	mov	sl, r0
 800a7da:	468b      	mov	fp, r1
 800a7dc:	2d0f      	cmp	r5, #15
 800a7de:	dc38      	bgt.n	800a852 <_strtod_l+0x452>
 800a7e0:	9b06      	ldr	r3, [sp, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f43f ae50 	beq.w	800a488 <_strtod_l+0x88>
 800a7e8:	dd24      	ble.n	800a834 <_strtod_l+0x434>
 800a7ea:	2b16      	cmp	r3, #22
 800a7ec:	dc0b      	bgt.n	800a806 <_strtod_l+0x406>
 800a7ee:	496d      	ldr	r1, [pc, #436]	; (800a9a4 <_strtod_l+0x5a4>)
 800a7f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	465b      	mov	r3, fp
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	e640      	b.n	800a488 <_strtod_l+0x88>
 800a806:	9a06      	ldr	r2, [sp, #24]
 800a808:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a80c:	4293      	cmp	r3, r2
 800a80e:	db20      	blt.n	800a852 <_strtod_l+0x452>
 800a810:	4c64      	ldr	r4, [pc, #400]	; (800a9a4 <_strtod_l+0x5a4>)
 800a812:	f1c5 050f 	rsb	r5, r5, #15
 800a816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a81a:	4652      	mov	r2, sl
 800a81c:	465b      	mov	r3, fp
 800a81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	9b06      	ldr	r3, [sp, #24]
 800a828:	1b5d      	subs	r5, r3, r5
 800a82a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a82e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a832:	e7e3      	b.n	800a7fc <_strtod_l+0x3fc>
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	3316      	adds	r3, #22
 800a838:	db0b      	blt.n	800a852 <_strtod_l+0x452>
 800a83a:	9b05      	ldr	r3, [sp, #20]
 800a83c:	1b9e      	subs	r6, r3, r6
 800a83e:	4b59      	ldr	r3, [pc, #356]	; (800a9a4 <_strtod_l+0x5a4>)
 800a840:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a844:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a848:	4650      	mov	r0, sl
 800a84a:	4659      	mov	r1, fp
 800a84c:	f7f5 fffe 	bl	800084c <__aeabi_ddiv>
 800a850:	e7d6      	b.n	800a800 <_strtod_l+0x400>
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	eba5 0808 	sub.w	r8, r5, r8
 800a858:	4498      	add	r8, r3
 800a85a:	f1b8 0f00 	cmp.w	r8, #0
 800a85e:	dd74      	ble.n	800a94a <_strtod_l+0x54a>
 800a860:	f018 030f 	ands.w	r3, r8, #15
 800a864:	d00a      	beq.n	800a87c <_strtod_l+0x47c>
 800a866:	494f      	ldr	r1, [pc, #316]	; (800a9a4 <_strtod_l+0x5a4>)
 800a868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a86c:	4652      	mov	r2, sl
 800a86e:	465b      	mov	r3, fp
 800a870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	4682      	mov	sl, r0
 800a87a:	468b      	mov	fp, r1
 800a87c:	f038 080f 	bics.w	r8, r8, #15
 800a880:	d04f      	beq.n	800a922 <_strtod_l+0x522>
 800a882:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a886:	dd22      	ble.n	800a8ce <_strtod_l+0x4ce>
 800a888:	2500      	movs	r5, #0
 800a88a:	462e      	mov	r6, r5
 800a88c:	9507      	str	r5, [sp, #28]
 800a88e:	9505      	str	r5, [sp, #20]
 800a890:	2322      	movs	r3, #34	; 0x22
 800a892:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a9ac <_strtod_l+0x5ac>
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	f04f 0a00 	mov.w	sl, #0
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f43f adf2 	beq.w	800a488 <_strtod_l+0x88>
 800a8a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f002 f9a6 	bl	800cbf8 <_Bfree>
 800a8ac:	9905      	ldr	r1, [sp, #20]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f002 f9a2 	bl	800cbf8 <_Bfree>
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f002 f99e 	bl	800cbf8 <_Bfree>
 800a8bc:	9907      	ldr	r1, [sp, #28]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f002 f99a 	bl	800cbf8 <_Bfree>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f002 f996 	bl	800cbf8 <_Bfree>
 800a8cc:	e5dc      	b.n	800a488 <_strtod_l+0x88>
 800a8ce:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <_strtod_l+0x5a8>)
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a8d8:	4650      	mov	r0, sl
 800a8da:	4659      	mov	r1, fp
 800a8dc:	4699      	mov	r9, r3
 800a8de:	f1b8 0f01 	cmp.w	r8, #1
 800a8e2:	dc21      	bgt.n	800a928 <_strtod_l+0x528>
 800a8e4:	b10b      	cbz	r3, 800a8ea <_strtod_l+0x4ea>
 800a8e6:	4682      	mov	sl, r0
 800a8e8:	468b      	mov	fp, r1
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	; (800a9a8 <_strtod_l+0x5a8>)
 800a8ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a8f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a8f4:	4652      	mov	r2, sl
 800a8f6:	465b      	mov	r3, fp
 800a8f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a8fc:	f7f5 fe7c 	bl	80005f8 <__aeabi_dmul>
 800a900:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <_strtod_l+0x5ac>)
 800a902:	460a      	mov	r2, r1
 800a904:	400b      	ands	r3, r1
 800a906:	492a      	ldr	r1, [pc, #168]	; (800a9b0 <_strtod_l+0x5b0>)
 800a908:	428b      	cmp	r3, r1
 800a90a:	4682      	mov	sl, r0
 800a90c:	d8bc      	bhi.n	800a888 <_strtod_l+0x488>
 800a90e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a912:	428b      	cmp	r3, r1
 800a914:	bf86      	itte	hi
 800a916:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a9b4 <_strtod_l+0x5b4>
 800a91a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a91e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a922:	2300      	movs	r3, #0
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	e084      	b.n	800aa32 <_strtod_l+0x632>
 800a928:	f018 0f01 	tst.w	r8, #1
 800a92c:	d005      	beq.n	800a93a <_strtod_l+0x53a>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a934:	f7f5 fe60 	bl	80005f8 <__aeabi_dmul>
 800a938:	2301      	movs	r3, #1
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	3208      	adds	r2, #8
 800a93e:	f109 0901 	add.w	r9, r9, #1
 800a942:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a946:	9204      	str	r2, [sp, #16]
 800a948:	e7c9      	b.n	800a8de <_strtod_l+0x4de>
 800a94a:	d0ea      	beq.n	800a922 <_strtod_l+0x522>
 800a94c:	f1c8 0800 	rsb	r8, r8, #0
 800a950:	f018 020f 	ands.w	r2, r8, #15
 800a954:	d00a      	beq.n	800a96c <_strtod_l+0x56c>
 800a956:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <_strtod_l+0x5a4>)
 800a958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95c:	4650      	mov	r0, sl
 800a95e:	4659      	mov	r1, fp
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 ff72 	bl	800084c <__aeabi_ddiv>
 800a968:	4682      	mov	sl, r0
 800a96a:	468b      	mov	fp, r1
 800a96c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a970:	d0d7      	beq.n	800a922 <_strtod_l+0x522>
 800a972:	f1b8 0f1f 	cmp.w	r8, #31
 800a976:	dd1f      	ble.n	800a9b8 <_strtod_l+0x5b8>
 800a978:	2500      	movs	r5, #0
 800a97a:	462e      	mov	r6, r5
 800a97c:	9507      	str	r5, [sp, #28]
 800a97e:	9505      	str	r5, [sp, #20]
 800a980:	2322      	movs	r3, #34	; 0x22
 800a982:	f04f 0a00 	mov.w	sl, #0
 800a986:	f04f 0b00 	mov.w	fp, #0
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	e786      	b.n	800a89c <_strtod_l+0x49c>
 800a98e:	bf00      	nop
 800a990:	0800e365 	.word	0x0800e365
 800a994:	0800e3a8 	.word	0x0800e3a8
 800a998:	0800e35d 	.word	0x0800e35d
 800a99c:	0800e4ec 	.word	0x0800e4ec
 800a9a0:	0800e800 	.word	0x0800e800
 800a9a4:	0800e6e0 	.word	0x0800e6e0
 800a9a8:	0800e6b8 	.word	0x0800e6b8
 800a9ac:	7ff00000 	.word	0x7ff00000
 800a9b0:	7ca00000 	.word	0x7ca00000
 800a9b4:	7fefffff 	.word	0x7fefffff
 800a9b8:	f018 0310 	ands.w	r3, r8, #16
 800a9bc:	bf18      	it	ne
 800a9be:	236a      	movne	r3, #106	; 0x6a
 800a9c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ad70 <_strtod_l+0x970>
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f018 0f01 	tst.w	r8, #1
 800a9d0:	d004      	beq.n	800a9dc <_strtod_l+0x5dc>
 800a9d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a9d6:	f7f5 fe0f 	bl	80005f8 <__aeabi_dmul>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a9e0:	f109 0908 	add.w	r9, r9, #8
 800a9e4:	d1f2      	bne.n	800a9cc <_strtod_l+0x5cc>
 800a9e6:	b10b      	cbz	r3, 800a9ec <_strtod_l+0x5ec>
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	b1c3      	cbz	r3, 800aa22 <_strtod_l+0x622>
 800a9f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a9f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	4659      	mov	r1, fp
 800a9fc:	dd11      	ble.n	800aa22 <_strtod_l+0x622>
 800a9fe:	2b1f      	cmp	r3, #31
 800aa00:	f340 8124 	ble.w	800ac4c <_strtod_l+0x84c>
 800aa04:	2b34      	cmp	r3, #52	; 0x34
 800aa06:	bfde      	ittt	le
 800aa08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa0c:	f04f 33ff 	movle.w	r3, #4294967295
 800aa10:	fa03 f202 	lslle.w	r2, r3, r2
 800aa14:	f04f 0a00 	mov.w	sl, #0
 800aa18:	bfcc      	ite	gt
 800aa1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aa1e:	ea02 0b01 	andle.w	fp, r2, r1
 800aa22:	2200      	movs	r2, #0
 800aa24:	2300      	movs	r3, #0
 800aa26:	4650      	mov	r0, sl
 800aa28:	4659      	mov	r1, fp
 800aa2a:	f7f6 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d1a2      	bne.n	800a978 <_strtod_l+0x578>
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	9908      	ldr	r1, [sp, #32]
 800aa38:	462b      	mov	r3, r5
 800aa3a:	463a      	mov	r2, r7
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f002 f943 	bl	800ccc8 <__s2b>
 800aa42:	9007      	str	r0, [sp, #28]
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f43f af1f 	beq.w	800a888 <_strtod_l+0x488>
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	1b9e      	subs	r6, r3, r6
 800aa4e:	9b06      	ldr	r3, [sp, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfb4      	ite	lt
 800aa54:	4633      	movlt	r3, r6
 800aa56:	2300      	movge	r3, #0
 800aa58:	930c      	str	r3, [sp, #48]	; 0x30
 800aa5a:	9b06      	ldr	r3, [sp, #24]
 800aa5c:	2500      	movs	r5, #0
 800aa5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa62:	9312      	str	r3, [sp, #72]	; 0x48
 800aa64:	462e      	mov	r6, r5
 800aa66:	9b07      	ldr	r3, [sp, #28]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	f002 f884 	bl	800cb78 <_Balloc>
 800aa70:	9005      	str	r0, [sp, #20]
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f43f af0c 	beq.w	800a890 <_strtod_l+0x490>
 800aa78:	9b07      	ldr	r3, [sp, #28]
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	3202      	adds	r2, #2
 800aa7e:	f103 010c 	add.w	r1, r3, #12
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	300c      	adds	r0, #12
 800aa86:	f002 f869 	bl	800cb5c <memcpy>
 800aa8a:	ec4b ab10 	vmov	d0, sl, fp
 800aa8e:	aa1a      	add	r2, sp, #104	; 0x68
 800aa90:	a919      	add	r1, sp, #100	; 0x64
 800aa92:	4620      	mov	r0, r4
 800aa94:	f002 fc5e 	bl	800d354 <__d2b>
 800aa98:	ec4b ab18 	vmov	d8, sl, fp
 800aa9c:	9018      	str	r0, [sp, #96]	; 0x60
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f aef6 	beq.w	800a890 <_strtod_l+0x490>
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f002 f9a8 	bl	800cdfc <__i2b>
 800aaac:	4606      	mov	r6, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f aeee 	beq.w	800a890 <_strtod_l+0x490>
 800aab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aab6:	9904      	ldr	r1, [sp, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bfab      	itete	ge
 800aabc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800aabe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800aac0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aac2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800aac6:	bfac      	ite	ge
 800aac8:	eb03 0902 	addge.w	r9, r3, r2
 800aacc:	1ad7      	sublt	r7, r2, r3
 800aace:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aad0:	eba3 0801 	sub.w	r8, r3, r1
 800aad4:	4490      	add	r8, r2
 800aad6:	4ba1      	ldr	r3, [pc, #644]	; (800ad5c <_strtod_l+0x95c>)
 800aad8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aadc:	4598      	cmp	r8, r3
 800aade:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aae2:	f280 80c7 	bge.w	800ac74 <_strtod_l+0x874>
 800aae6:	eba3 0308 	sub.w	r3, r3, r8
 800aaea:	2b1f      	cmp	r3, #31
 800aaec:	eba2 0203 	sub.w	r2, r2, r3
 800aaf0:	f04f 0101 	mov.w	r1, #1
 800aaf4:	f300 80b1 	bgt.w	800ac5a <_strtod_l+0x85a>
 800aaf8:	fa01 f303 	lsl.w	r3, r1, r3
 800aafc:	930d      	str	r3, [sp, #52]	; 0x34
 800aafe:	2300      	movs	r3, #0
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	eb09 0802 	add.w	r8, r9, r2
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	45c1      	cmp	r9, r8
 800ab0a:	4417      	add	r7, r2
 800ab0c:	441f      	add	r7, r3
 800ab0e:	464b      	mov	r3, r9
 800ab10:	bfa8      	it	ge
 800ab12:	4643      	movge	r3, r8
 800ab14:	42bb      	cmp	r3, r7
 800ab16:	bfa8      	it	ge
 800ab18:	463b      	movge	r3, r7
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfc2      	ittt	gt
 800ab1e:	eba8 0803 	subgt.w	r8, r8, r3
 800ab22:	1aff      	subgt	r7, r7, r3
 800ab24:	eba9 0903 	subgt.w	r9, r9, r3
 800ab28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd17      	ble.n	800ab5e <_strtod_l+0x75e>
 800ab2e:	4631      	mov	r1, r6
 800ab30:	461a      	mov	r2, r3
 800ab32:	4620      	mov	r0, r4
 800ab34:	f002 fa22 	bl	800cf7c <__pow5mult>
 800ab38:	4606      	mov	r6, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f43f aea8 	beq.w	800a890 <_strtod_l+0x490>
 800ab40:	4601      	mov	r1, r0
 800ab42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab44:	4620      	mov	r0, r4
 800ab46:	f002 f96f 	bl	800ce28 <__multiply>
 800ab4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f43f ae9f 	beq.w	800a890 <_strtod_l+0x490>
 800ab52:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab54:	4620      	mov	r0, r4
 800ab56:	f002 f84f 	bl	800cbf8 <_Bfree>
 800ab5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ab5e:	f1b8 0f00 	cmp.w	r8, #0
 800ab62:	f300 808c 	bgt.w	800ac7e <_strtod_l+0x87e>
 800ab66:	9b06      	ldr	r3, [sp, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dd08      	ble.n	800ab7e <_strtod_l+0x77e>
 800ab6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab6e:	9905      	ldr	r1, [sp, #20]
 800ab70:	4620      	mov	r0, r4
 800ab72:	f002 fa03 	bl	800cf7c <__pow5mult>
 800ab76:	9005      	str	r0, [sp, #20]
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	f43f ae89 	beq.w	800a890 <_strtod_l+0x490>
 800ab7e:	2f00      	cmp	r7, #0
 800ab80:	dd08      	ble.n	800ab94 <_strtod_l+0x794>
 800ab82:	9905      	ldr	r1, [sp, #20]
 800ab84:	463a      	mov	r2, r7
 800ab86:	4620      	mov	r0, r4
 800ab88:	f002 fa52 	bl	800d030 <__lshift>
 800ab8c:	9005      	str	r0, [sp, #20]
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f43f ae7e 	beq.w	800a890 <_strtod_l+0x490>
 800ab94:	f1b9 0f00 	cmp.w	r9, #0
 800ab98:	dd08      	ble.n	800abac <_strtod_l+0x7ac>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	464a      	mov	r2, r9
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f002 fa46 	bl	800d030 <__lshift>
 800aba4:	4606      	mov	r6, r0
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f ae72 	beq.w	800a890 <_strtod_l+0x490>
 800abac:	9a05      	ldr	r2, [sp, #20]
 800abae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abb0:	4620      	mov	r0, r4
 800abb2:	f002 fac9 	bl	800d148 <__mdiff>
 800abb6:	4605      	mov	r5, r0
 800abb8:	2800      	cmp	r0, #0
 800abba:	f43f ae69 	beq.w	800a890 <_strtod_l+0x490>
 800abbe:	68c3      	ldr	r3, [r0, #12]
 800abc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc2:	2300      	movs	r3, #0
 800abc4:	60c3      	str	r3, [r0, #12]
 800abc6:	4631      	mov	r1, r6
 800abc8:	f002 faa2 	bl	800d110 <__mcmp>
 800abcc:	2800      	cmp	r0, #0
 800abce:	da60      	bge.n	800ac92 <_strtod_l+0x892>
 800abd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd2:	ea53 030a 	orrs.w	r3, r3, sl
 800abd6:	f040 8082 	bne.w	800acde <_strtod_l+0x8de>
 800abda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d17d      	bne.n	800acde <_strtod_l+0x8de>
 800abe2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abe6:	0d1b      	lsrs	r3, r3, #20
 800abe8:	051b      	lsls	r3, r3, #20
 800abea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abee:	d976      	bls.n	800acde <_strtod_l+0x8de>
 800abf0:	696b      	ldr	r3, [r5, #20]
 800abf2:	b913      	cbnz	r3, 800abfa <_strtod_l+0x7fa>
 800abf4:	692b      	ldr	r3, [r5, #16]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	dd71      	ble.n	800acde <_strtod_l+0x8de>
 800abfa:	4629      	mov	r1, r5
 800abfc:	2201      	movs	r2, #1
 800abfe:	4620      	mov	r0, r4
 800ac00:	f002 fa16 	bl	800d030 <__lshift>
 800ac04:	4631      	mov	r1, r6
 800ac06:	4605      	mov	r5, r0
 800ac08:	f002 fa82 	bl	800d110 <__mcmp>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	dd66      	ble.n	800acde <_strtod_l+0x8de>
 800ac10:	9904      	ldr	r1, [sp, #16]
 800ac12:	4a53      	ldr	r2, [pc, #332]	; (800ad60 <_strtod_l+0x960>)
 800ac14:	465b      	mov	r3, fp
 800ac16:	2900      	cmp	r1, #0
 800ac18:	f000 8081 	beq.w	800ad1e <_strtod_l+0x91e>
 800ac1c:	ea02 010b 	and.w	r1, r2, fp
 800ac20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac24:	dc7b      	bgt.n	800ad1e <_strtod_l+0x91e>
 800ac26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac2a:	f77f aea9 	ble.w	800a980 <_strtod_l+0x580>
 800ac2e:	4b4d      	ldr	r3, [pc, #308]	; (800ad64 <_strtod_l+0x964>)
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	2200      	movs	r2, #0
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4303      	orrs	r3, r0
 800ac3e:	bf08      	it	eq
 800ac40:	2322      	moveq	r3, #34	; 0x22
 800ac42:	4682      	mov	sl, r0
 800ac44:	468b      	mov	fp, r1
 800ac46:	bf08      	it	eq
 800ac48:	6023      	streq	r3, [r4, #0]
 800ac4a:	e62b      	b.n	800a8a4 <_strtod_l+0x4a4>
 800ac4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac50:	fa02 f303 	lsl.w	r3, r2, r3
 800ac54:	ea03 0a0a 	and.w	sl, r3, sl
 800ac58:	e6e3      	b.n	800aa22 <_strtod_l+0x622>
 800ac5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ac5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ac62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ac66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ac6a:	fa01 f308 	lsl.w	r3, r1, r8
 800ac6e:	9308      	str	r3, [sp, #32]
 800ac70:	910d      	str	r1, [sp, #52]	; 0x34
 800ac72:	e746      	b.n	800ab02 <_strtod_l+0x702>
 800ac74:	2300      	movs	r3, #0
 800ac76:	9308      	str	r3, [sp, #32]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac7c:	e741      	b.n	800ab02 <_strtod_l+0x702>
 800ac7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac80:	4642      	mov	r2, r8
 800ac82:	4620      	mov	r0, r4
 800ac84:	f002 f9d4 	bl	800d030 <__lshift>
 800ac88:	9018      	str	r0, [sp, #96]	; 0x60
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f47f af6b 	bne.w	800ab66 <_strtod_l+0x766>
 800ac90:	e5fe      	b.n	800a890 <_strtod_l+0x490>
 800ac92:	465f      	mov	r7, fp
 800ac94:	d16e      	bne.n	800ad74 <_strtod_l+0x974>
 800ac96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac9c:	b342      	cbz	r2, 800acf0 <_strtod_l+0x8f0>
 800ac9e:	4a32      	ldr	r2, [pc, #200]	; (800ad68 <_strtod_l+0x968>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d128      	bne.n	800acf6 <_strtod_l+0x8f6>
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	4651      	mov	r1, sl
 800aca8:	b1eb      	cbz	r3, 800ace6 <_strtod_l+0x8e6>
 800acaa:	4b2d      	ldr	r3, [pc, #180]	; (800ad60 <_strtod_l+0x960>)
 800acac:	403b      	ands	r3, r7
 800acae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acb2:	f04f 32ff 	mov.w	r2, #4294967295
 800acb6:	d819      	bhi.n	800acec <_strtod_l+0x8ec>
 800acb8:	0d1b      	lsrs	r3, r3, #20
 800acba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acbe:	fa02 f303 	lsl.w	r3, r2, r3
 800acc2:	4299      	cmp	r1, r3
 800acc4:	d117      	bne.n	800acf6 <_strtod_l+0x8f6>
 800acc6:	4b29      	ldr	r3, [pc, #164]	; (800ad6c <_strtod_l+0x96c>)
 800acc8:	429f      	cmp	r7, r3
 800acca:	d102      	bne.n	800acd2 <_strtod_l+0x8d2>
 800accc:	3101      	adds	r1, #1
 800acce:	f43f addf 	beq.w	800a890 <_strtod_l+0x490>
 800acd2:	4b23      	ldr	r3, [pc, #140]	; (800ad60 <_strtod_l+0x960>)
 800acd4:	403b      	ands	r3, r7
 800acd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800acda:	f04f 0a00 	mov.w	sl, #0
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1a4      	bne.n	800ac2e <_strtod_l+0x82e>
 800ace4:	e5de      	b.n	800a8a4 <_strtod_l+0x4a4>
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295
 800acea:	e7ea      	b.n	800acc2 <_strtod_l+0x8c2>
 800acec:	4613      	mov	r3, r2
 800acee:	e7e8      	b.n	800acc2 <_strtod_l+0x8c2>
 800acf0:	ea53 030a 	orrs.w	r3, r3, sl
 800acf4:	d08c      	beq.n	800ac10 <_strtod_l+0x810>
 800acf6:	9b08      	ldr	r3, [sp, #32]
 800acf8:	b1db      	cbz	r3, 800ad32 <_strtod_l+0x932>
 800acfa:	423b      	tst	r3, r7
 800acfc:	d0ef      	beq.n	800acde <_strtod_l+0x8de>
 800acfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad00:	9a04      	ldr	r2, [sp, #16]
 800ad02:	4650      	mov	r0, sl
 800ad04:	4659      	mov	r1, fp
 800ad06:	b1c3      	cbz	r3, 800ad3a <_strtod_l+0x93a>
 800ad08:	f7ff fb5b 	bl	800a3c2 <sulp>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	ec51 0b18 	vmov	r0, r1, d8
 800ad14:	f7f5 faba 	bl	800028c <__adddf3>
 800ad18:	4682      	mov	sl, r0
 800ad1a:	468b      	mov	fp, r1
 800ad1c:	e7df      	b.n	800acde <_strtod_l+0x8de>
 800ad1e:	4013      	ands	r3, r2
 800ad20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ad30:	e7d5      	b.n	800acde <_strtod_l+0x8de>
 800ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad34:	ea13 0f0a 	tst.w	r3, sl
 800ad38:	e7e0      	b.n	800acfc <_strtod_l+0x8fc>
 800ad3a:	f7ff fb42 	bl	800a3c2 <sulp>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	ec51 0b18 	vmov	r0, r1, d8
 800ad46:	f7f5 fa9f 	bl	8000288 <__aeabi_dsub>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4682      	mov	sl, r0
 800ad50:	468b      	mov	fp, r1
 800ad52:	f7f5 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d0c1      	beq.n	800acde <_strtod_l+0x8de>
 800ad5a:	e611      	b.n	800a980 <_strtod_l+0x580>
 800ad5c:	fffffc02 	.word	0xfffffc02
 800ad60:	7ff00000 	.word	0x7ff00000
 800ad64:	39500000 	.word	0x39500000
 800ad68:	000fffff 	.word	0x000fffff
 800ad6c:	7fefffff 	.word	0x7fefffff
 800ad70:	0800e3c0 	.word	0x0800e3c0
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	f002 fb48 	bl	800d40c <__ratio>
 800ad7c:	ec59 8b10 	vmov	r8, r9, d0
 800ad80:	ee10 0a10 	vmov	r0, s0
 800ad84:	2200      	movs	r2, #0
 800ad86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	f7f5 feb0 	bl	8000af0 <__aeabi_dcmple>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d07a      	beq.n	800ae8a <_strtod_l+0xa8a>
 800ad94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d04a      	beq.n	800ae30 <_strtod_l+0xa30>
 800ad9a:	4b95      	ldr	r3, [pc, #596]	; (800aff0 <_strtod_l+0xbf0>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ada2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aff0 <_strtod_l+0xbf0>
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	4b92      	ldr	r3, [pc, #584]	; (800aff4 <_strtod_l+0xbf4>)
 800adac:	403b      	ands	r3, r7
 800adae:	930d      	str	r3, [sp, #52]	; 0x34
 800adb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adb2:	4b91      	ldr	r3, [pc, #580]	; (800aff8 <_strtod_l+0xbf8>)
 800adb4:	429a      	cmp	r2, r3
 800adb6:	f040 80b0 	bne.w	800af1a <_strtod_l+0xb1a>
 800adba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800adc2:	ec4b ab10 	vmov	d0, sl, fp
 800adc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adca:	f002 fa47 	bl	800d25c <__ulp>
 800adce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800add2:	ec53 2b10 	vmov	r2, r3, d0
 800add6:	f7f5 fc0f 	bl	80005f8 <__aeabi_dmul>
 800adda:	4652      	mov	r2, sl
 800addc:	465b      	mov	r3, fp
 800adde:	f7f5 fa55 	bl	800028c <__adddf3>
 800ade2:	460b      	mov	r3, r1
 800ade4:	4983      	ldr	r1, [pc, #524]	; (800aff4 <_strtod_l+0xbf4>)
 800ade6:	4a85      	ldr	r2, [pc, #532]	; (800affc <_strtod_l+0xbfc>)
 800ade8:	4019      	ands	r1, r3
 800adea:	4291      	cmp	r1, r2
 800adec:	4682      	mov	sl, r0
 800adee:	d960      	bls.n	800aeb2 <_strtod_l+0xab2>
 800adf0:	ee18 3a90 	vmov	r3, s17
 800adf4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d104      	bne.n	800ae06 <_strtod_l+0xa06>
 800adfc:	ee18 3a10 	vmov	r3, s16
 800ae00:	3301      	adds	r3, #1
 800ae02:	f43f ad45 	beq.w	800a890 <_strtod_l+0x490>
 800ae06:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b008 <_strtod_l+0xc08>
 800ae0a:	f04f 3aff 	mov.w	sl, #4294967295
 800ae0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae10:	4620      	mov	r0, r4
 800ae12:	f001 fef1 	bl	800cbf8 <_Bfree>
 800ae16:	9905      	ldr	r1, [sp, #20]
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f001 feed 	bl	800cbf8 <_Bfree>
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4620      	mov	r0, r4
 800ae22:	f001 fee9 	bl	800cbf8 <_Bfree>
 800ae26:	4629      	mov	r1, r5
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 fee5 	bl	800cbf8 <_Bfree>
 800ae2e:	e61a      	b.n	800aa66 <_strtod_l+0x666>
 800ae30:	f1ba 0f00 	cmp.w	sl, #0
 800ae34:	d11b      	bne.n	800ae6e <_strtod_l+0xa6e>
 800ae36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae3a:	b9f3      	cbnz	r3, 800ae7a <_strtod_l+0xa7a>
 800ae3c:	4b6c      	ldr	r3, [pc, #432]	; (800aff0 <_strtod_l+0xbf0>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800ae48:	b9d0      	cbnz	r0, 800ae80 <_strtod_l+0xa80>
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4b6c      	ldr	r3, [pc, #432]	; (800b000 <_strtod_l+0xc00>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	4680      	mov	r8, r0
 800ae58:	4689      	mov	r9, r1
 800ae5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ae62:	9315      	str	r3, [sp, #84]	; 0x54
 800ae64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ae68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae6c:	e79d      	b.n	800adaa <_strtod_l+0x9aa>
 800ae6e:	f1ba 0f01 	cmp.w	sl, #1
 800ae72:	d102      	bne.n	800ae7a <_strtod_l+0xa7a>
 800ae74:	2f00      	cmp	r7, #0
 800ae76:	f43f ad83 	beq.w	800a980 <_strtod_l+0x580>
 800ae7a:	4b62      	ldr	r3, [pc, #392]	; (800b004 <_strtod_l+0xc04>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	e78e      	b.n	800ad9e <_strtod_l+0x99e>
 800ae80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b000 <_strtod_l+0xc00>
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	e7e7      	b.n	800ae5a <_strtod_l+0xa5a>
 800ae8a:	4b5d      	ldr	r3, [pc, #372]	; (800b000 <_strtod_l+0xc00>)
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	2200      	movs	r2, #0
 800ae92:	f7f5 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ae96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae98:	4680      	mov	r8, r0
 800ae9a:	4689      	mov	r9, r1
 800ae9c:	b933      	cbnz	r3, 800aeac <_strtod_l+0xaac>
 800ae9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aea2:	900e      	str	r0, [sp, #56]	; 0x38
 800aea4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aeaa:	e7dd      	b.n	800ae68 <_strtod_l+0xa68>
 800aeac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aeb0:	e7f9      	b.n	800aea6 <_strtod_l+0xaa6>
 800aeb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1a8      	bne.n	800ae0e <_strtod_l+0xa0e>
 800aebc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aec2:	0d1b      	lsrs	r3, r3, #20
 800aec4:	051b      	lsls	r3, r3, #20
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d1a1      	bne.n	800ae0e <_strtod_l+0xa0e>
 800aeca:	4640      	mov	r0, r8
 800aecc:	4649      	mov	r1, r9
 800aece:	f7f5 fef3 	bl	8000cb8 <__aeabi_d2lz>
 800aed2:	f7f5 fb63 	bl	800059c <__aeabi_l2d>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4640      	mov	r0, r8
 800aedc:	4649      	mov	r1, r9
 800aede:	f7f5 f9d3 	bl	8000288 <__aeabi_dsub>
 800aee2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aee8:	ea43 030a 	orr.w	r3, r3, sl
 800aeec:	4313      	orrs	r3, r2
 800aeee:	4680      	mov	r8, r0
 800aef0:	4689      	mov	r9, r1
 800aef2:	d055      	beq.n	800afa0 <_strtod_l+0xba0>
 800aef4:	a336      	add	r3, pc, #216	; (adr r3, 800afd0 <_strtod_l+0xbd0>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 fdef 	bl	8000adc <__aeabi_dcmplt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f47f acd0 	bne.w	800a8a4 <_strtod_l+0x4a4>
 800af04:	a334      	add	r3, pc, #208	; (adr r3, 800afd8 <_strtod_l+0xbd8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	f7f5 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 800af12:	2800      	cmp	r0, #0
 800af14:	f43f af7b 	beq.w	800ae0e <_strtod_l+0xa0e>
 800af18:	e4c4      	b.n	800a8a4 <_strtod_l+0x4a4>
 800af1a:	9b04      	ldr	r3, [sp, #16]
 800af1c:	b333      	cbz	r3, 800af6c <_strtod_l+0xb6c>
 800af1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af24:	d822      	bhi.n	800af6c <_strtod_l+0xb6c>
 800af26:	a32e      	add	r3, pc, #184	; (adr r3, 800afe0 <_strtod_l+0xbe0>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	f7f5 fdde 	bl	8000af0 <__aeabi_dcmple>
 800af34:	b1a0      	cbz	r0, 800af60 <_strtod_l+0xb60>
 800af36:	4649      	mov	r1, r9
 800af38:	4640      	mov	r0, r8
 800af3a:	f7f5 fe35 	bl	8000ba8 <__aeabi_d2uiz>
 800af3e:	2801      	cmp	r0, #1
 800af40:	bf38      	it	cc
 800af42:	2001      	movcc	r0, #1
 800af44:	f7f5 fade 	bl	8000504 <__aeabi_ui2d>
 800af48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af4a:	4680      	mov	r8, r0
 800af4c:	4689      	mov	r9, r1
 800af4e:	bb23      	cbnz	r3, 800af9a <_strtod_l+0xb9a>
 800af50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af54:	9010      	str	r0, [sp, #64]	; 0x40
 800af56:	9311      	str	r3, [sp, #68]	; 0x44
 800af58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af68:	1a9b      	subs	r3, r3, r2
 800af6a:	9309      	str	r3, [sp, #36]	; 0x24
 800af6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af70:	eeb0 0a48 	vmov.f32	s0, s16
 800af74:	eef0 0a68 	vmov.f32	s1, s17
 800af78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af7c:	f002 f96e 	bl	800d25c <__ulp>
 800af80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af84:	ec53 2b10 	vmov	r2, r3, d0
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	ec53 2b18 	vmov	r2, r3, d8
 800af90:	f7f5 f97c 	bl	800028c <__adddf3>
 800af94:	4682      	mov	sl, r0
 800af96:	468b      	mov	fp, r1
 800af98:	e78d      	b.n	800aeb6 <_strtod_l+0xab6>
 800af9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800af9e:	e7db      	b.n	800af58 <_strtod_l+0xb58>
 800afa0:	a311      	add	r3, pc, #68	; (adr r3, 800afe8 <_strtod_l+0xbe8>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 fd99 	bl	8000adc <__aeabi_dcmplt>
 800afaa:	e7b2      	b.n	800af12 <_strtod_l+0xb12>
 800afac:	2300      	movs	r3, #0
 800afae:	930a      	str	r3, [sp, #40]	; 0x28
 800afb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	f7ff ba6b 	b.w	800a490 <_strtod_l+0x90>
 800afba:	2a65      	cmp	r2, #101	; 0x65
 800afbc:	f43f ab5f 	beq.w	800a67e <_strtod_l+0x27e>
 800afc0:	2a45      	cmp	r2, #69	; 0x45
 800afc2:	f43f ab5c 	beq.w	800a67e <_strtod_l+0x27e>
 800afc6:	2301      	movs	r3, #1
 800afc8:	f7ff bb94 	b.w	800a6f4 <_strtod_l+0x2f4>
 800afcc:	f3af 8000 	nop.w
 800afd0:	94a03595 	.word	0x94a03595
 800afd4:	3fdfffff 	.word	0x3fdfffff
 800afd8:	35afe535 	.word	0x35afe535
 800afdc:	3fe00000 	.word	0x3fe00000
 800afe0:	ffc00000 	.word	0xffc00000
 800afe4:	41dfffff 	.word	0x41dfffff
 800afe8:	94a03595 	.word	0x94a03595
 800afec:	3fcfffff 	.word	0x3fcfffff
 800aff0:	3ff00000 	.word	0x3ff00000
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	7fe00000 	.word	0x7fe00000
 800affc:	7c9fffff 	.word	0x7c9fffff
 800b000:	3fe00000 	.word	0x3fe00000
 800b004:	bff00000 	.word	0xbff00000
 800b008:	7fefffff 	.word	0x7fefffff

0800b00c <_strtod_r>:
 800b00c:	4b01      	ldr	r3, [pc, #4]	; (800b014 <_strtod_r+0x8>)
 800b00e:	f7ff b9f7 	b.w	800a400 <_strtod_l>
 800b012:	bf00      	nop
 800b014:	20000080 	.word	0x20000080

0800b018 <_strtol_l.constprop.0>:
 800b018:	2b01      	cmp	r3, #1
 800b01a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01e:	d001      	beq.n	800b024 <_strtol_l.constprop.0+0xc>
 800b020:	2b24      	cmp	r3, #36	; 0x24
 800b022:	d906      	bls.n	800b032 <_strtol_l.constprop.0+0x1a>
 800b024:	f7fe fa16 	bl	8009454 <__errno>
 800b028:	2316      	movs	r3, #22
 800b02a:	6003      	str	r3, [r0, #0]
 800b02c:	2000      	movs	r0, #0
 800b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b032:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b118 <_strtol_l.constprop.0+0x100>
 800b036:	460d      	mov	r5, r1
 800b038:	462e      	mov	r6, r5
 800b03a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b03e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b042:	f017 0708 	ands.w	r7, r7, #8
 800b046:	d1f7      	bne.n	800b038 <_strtol_l.constprop.0+0x20>
 800b048:	2c2d      	cmp	r4, #45	; 0x2d
 800b04a:	d132      	bne.n	800b0b2 <_strtol_l.constprop.0+0x9a>
 800b04c:	782c      	ldrb	r4, [r5, #0]
 800b04e:	2701      	movs	r7, #1
 800b050:	1cb5      	adds	r5, r6, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d05b      	beq.n	800b10e <_strtol_l.constprop.0+0xf6>
 800b056:	2b10      	cmp	r3, #16
 800b058:	d109      	bne.n	800b06e <_strtol_l.constprop.0+0x56>
 800b05a:	2c30      	cmp	r4, #48	; 0x30
 800b05c:	d107      	bne.n	800b06e <_strtol_l.constprop.0+0x56>
 800b05e:	782c      	ldrb	r4, [r5, #0]
 800b060:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b064:	2c58      	cmp	r4, #88	; 0x58
 800b066:	d14d      	bne.n	800b104 <_strtol_l.constprop.0+0xec>
 800b068:	786c      	ldrb	r4, [r5, #1]
 800b06a:	2310      	movs	r3, #16
 800b06c:	3502      	adds	r5, #2
 800b06e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b072:	f108 38ff 	add.w	r8, r8, #4294967295
 800b076:	f04f 0c00 	mov.w	ip, #0
 800b07a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b07e:	4666      	mov	r6, ip
 800b080:	fb03 8a19 	mls	sl, r3, r9, r8
 800b084:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b088:	f1be 0f09 	cmp.w	lr, #9
 800b08c:	d816      	bhi.n	800b0bc <_strtol_l.constprop.0+0xa4>
 800b08e:	4674      	mov	r4, lr
 800b090:	42a3      	cmp	r3, r4
 800b092:	dd24      	ble.n	800b0de <_strtol_l.constprop.0+0xc6>
 800b094:	f1bc 0f00 	cmp.w	ip, #0
 800b098:	db1e      	blt.n	800b0d8 <_strtol_l.constprop.0+0xc0>
 800b09a:	45b1      	cmp	r9, r6
 800b09c:	d31c      	bcc.n	800b0d8 <_strtol_l.constprop.0+0xc0>
 800b09e:	d101      	bne.n	800b0a4 <_strtol_l.constprop.0+0x8c>
 800b0a0:	45a2      	cmp	sl, r4
 800b0a2:	db19      	blt.n	800b0d8 <_strtol_l.constprop.0+0xc0>
 800b0a4:	fb06 4603 	mla	r6, r6, r3, r4
 800b0a8:	f04f 0c01 	mov.w	ip, #1
 800b0ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0b0:	e7e8      	b.n	800b084 <_strtol_l.constprop.0+0x6c>
 800b0b2:	2c2b      	cmp	r4, #43	; 0x2b
 800b0b4:	bf04      	itt	eq
 800b0b6:	782c      	ldrbeq	r4, [r5, #0]
 800b0b8:	1cb5      	addeq	r5, r6, #2
 800b0ba:	e7ca      	b.n	800b052 <_strtol_l.constprop.0+0x3a>
 800b0bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b0c0:	f1be 0f19 	cmp.w	lr, #25
 800b0c4:	d801      	bhi.n	800b0ca <_strtol_l.constprop.0+0xb2>
 800b0c6:	3c37      	subs	r4, #55	; 0x37
 800b0c8:	e7e2      	b.n	800b090 <_strtol_l.constprop.0+0x78>
 800b0ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b0ce:	f1be 0f19 	cmp.w	lr, #25
 800b0d2:	d804      	bhi.n	800b0de <_strtol_l.constprop.0+0xc6>
 800b0d4:	3c57      	subs	r4, #87	; 0x57
 800b0d6:	e7db      	b.n	800b090 <_strtol_l.constprop.0+0x78>
 800b0d8:	f04f 3cff 	mov.w	ip, #4294967295
 800b0dc:	e7e6      	b.n	800b0ac <_strtol_l.constprop.0+0x94>
 800b0de:	f1bc 0f00 	cmp.w	ip, #0
 800b0e2:	da05      	bge.n	800b0f0 <_strtol_l.constprop.0+0xd8>
 800b0e4:	2322      	movs	r3, #34	; 0x22
 800b0e6:	6003      	str	r3, [r0, #0]
 800b0e8:	4646      	mov	r6, r8
 800b0ea:	b942      	cbnz	r2, 800b0fe <_strtol_l.constprop.0+0xe6>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	e79e      	b.n	800b02e <_strtol_l.constprop.0+0x16>
 800b0f0:	b107      	cbz	r7, 800b0f4 <_strtol_l.constprop.0+0xdc>
 800b0f2:	4276      	negs	r6, r6
 800b0f4:	2a00      	cmp	r2, #0
 800b0f6:	d0f9      	beq.n	800b0ec <_strtol_l.constprop.0+0xd4>
 800b0f8:	f1bc 0f00 	cmp.w	ip, #0
 800b0fc:	d000      	beq.n	800b100 <_strtol_l.constprop.0+0xe8>
 800b0fe:	1e69      	subs	r1, r5, #1
 800b100:	6011      	str	r1, [r2, #0]
 800b102:	e7f3      	b.n	800b0ec <_strtol_l.constprop.0+0xd4>
 800b104:	2430      	movs	r4, #48	; 0x30
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1b1      	bne.n	800b06e <_strtol_l.constprop.0+0x56>
 800b10a:	2308      	movs	r3, #8
 800b10c:	e7af      	b.n	800b06e <_strtol_l.constprop.0+0x56>
 800b10e:	2c30      	cmp	r4, #48	; 0x30
 800b110:	d0a5      	beq.n	800b05e <_strtol_l.constprop.0+0x46>
 800b112:	230a      	movs	r3, #10
 800b114:	e7ab      	b.n	800b06e <_strtol_l.constprop.0+0x56>
 800b116:	bf00      	nop
 800b118:	0800e3e9 	.word	0x0800e3e9

0800b11c <_strtol_r>:
 800b11c:	f7ff bf7c 	b.w	800b018 <_strtol_l.constprop.0>

0800b120 <__swbuf_r>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	460e      	mov	r6, r1
 800b124:	4614      	mov	r4, r2
 800b126:	4605      	mov	r5, r0
 800b128:	b118      	cbz	r0, 800b132 <__swbuf_r+0x12>
 800b12a:	6983      	ldr	r3, [r0, #24]
 800b12c:	b90b      	cbnz	r3, 800b132 <__swbuf_r+0x12>
 800b12e:	f001 f86f 	bl	800c210 <__sinit>
 800b132:	4b21      	ldr	r3, [pc, #132]	; (800b1b8 <__swbuf_r+0x98>)
 800b134:	429c      	cmp	r4, r3
 800b136:	d12b      	bne.n	800b190 <__swbuf_r+0x70>
 800b138:	686c      	ldr	r4, [r5, #4]
 800b13a:	69a3      	ldr	r3, [r4, #24]
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	071a      	lsls	r2, r3, #28
 800b142:	d52f      	bpl.n	800b1a4 <__swbuf_r+0x84>
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	b36b      	cbz	r3, 800b1a4 <__swbuf_r+0x84>
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	6820      	ldr	r0, [r4, #0]
 800b14c:	1ac0      	subs	r0, r0, r3
 800b14e:	6963      	ldr	r3, [r4, #20]
 800b150:	b2f6      	uxtb	r6, r6
 800b152:	4283      	cmp	r3, r0
 800b154:	4637      	mov	r7, r6
 800b156:	dc04      	bgt.n	800b162 <__swbuf_r+0x42>
 800b158:	4621      	mov	r1, r4
 800b15a:	4628      	mov	r0, r5
 800b15c:	f000 ffc4 	bl	800c0e8 <_fflush_r>
 800b160:	bb30      	cbnz	r0, 800b1b0 <__swbuf_r+0x90>
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	3b01      	subs	r3, #1
 800b166:	60a3      	str	r3, [r4, #8]
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	6022      	str	r2, [r4, #0]
 800b16e:	701e      	strb	r6, [r3, #0]
 800b170:	6963      	ldr	r3, [r4, #20]
 800b172:	3001      	adds	r0, #1
 800b174:	4283      	cmp	r3, r0
 800b176:	d004      	beq.n	800b182 <__swbuf_r+0x62>
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	07db      	lsls	r3, r3, #31
 800b17c:	d506      	bpl.n	800b18c <__swbuf_r+0x6c>
 800b17e:	2e0a      	cmp	r6, #10
 800b180:	d104      	bne.n	800b18c <__swbuf_r+0x6c>
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 ffaf 	bl	800c0e8 <_fflush_r>
 800b18a:	b988      	cbnz	r0, 800b1b0 <__swbuf_r+0x90>
 800b18c:	4638      	mov	r0, r7
 800b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <__swbuf_r+0x9c>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d101      	bne.n	800b19a <__swbuf_r+0x7a>
 800b196:	68ac      	ldr	r4, [r5, #8]
 800b198:	e7cf      	b.n	800b13a <__swbuf_r+0x1a>
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <__swbuf_r+0xa0>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	bf08      	it	eq
 800b1a0:	68ec      	ldreq	r4, [r5, #12]
 800b1a2:	e7ca      	b.n	800b13a <__swbuf_r+0x1a>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f000 f81e 	bl	800b1e8 <__swsetup_r>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0cb      	beq.n	800b148 <__swbuf_r+0x28>
 800b1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1b4:	e7ea      	b.n	800b18c <__swbuf_r+0x6c>
 800b1b6:	bf00      	nop
 800b1b8:	0800e59c 	.word	0x0800e59c
 800b1bc:	0800e5bc 	.word	0x0800e5bc
 800b1c0:	0800e57c 	.word	0x0800e57c

0800b1c4 <_write_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_write_r+0x20>)
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	602a      	str	r2, [r5, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f7f7 fc6f 	bl	8002ab6 <_write>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_write_r+0x1e>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_write_r+0x1e>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20000898 	.word	0x20000898

0800b1e8 <__swsetup_r>:
 800b1e8:	4b32      	ldr	r3, [pc, #200]	; (800b2b4 <__swsetup_r+0xcc>)
 800b1ea:	b570      	push	{r4, r5, r6, lr}
 800b1ec:	681d      	ldr	r5, [r3, #0]
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	b125      	cbz	r5, 800b1fe <__swsetup_r+0x16>
 800b1f4:	69ab      	ldr	r3, [r5, #24]
 800b1f6:	b913      	cbnz	r3, 800b1fe <__swsetup_r+0x16>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f001 f809 	bl	800c210 <__sinit>
 800b1fe:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <__swsetup_r+0xd0>)
 800b200:	429c      	cmp	r4, r3
 800b202:	d10f      	bne.n	800b224 <__swsetup_r+0x3c>
 800b204:	686c      	ldr	r4, [r5, #4]
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b20c:	0719      	lsls	r1, r3, #28
 800b20e:	d42c      	bmi.n	800b26a <__swsetup_r+0x82>
 800b210:	06dd      	lsls	r5, r3, #27
 800b212:	d411      	bmi.n	800b238 <__swsetup_r+0x50>
 800b214:	2309      	movs	r3, #9
 800b216:	6033      	str	r3, [r6, #0]
 800b218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	e03e      	b.n	800b2a2 <__swsetup_r+0xba>
 800b224:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <__swsetup_r+0xd4>)
 800b226:	429c      	cmp	r4, r3
 800b228:	d101      	bne.n	800b22e <__swsetup_r+0x46>
 800b22a:	68ac      	ldr	r4, [r5, #8]
 800b22c:	e7eb      	b.n	800b206 <__swsetup_r+0x1e>
 800b22e:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <__swsetup_r+0xd8>)
 800b230:	429c      	cmp	r4, r3
 800b232:	bf08      	it	eq
 800b234:	68ec      	ldreq	r4, [r5, #12]
 800b236:	e7e6      	b.n	800b206 <__swsetup_r+0x1e>
 800b238:	0758      	lsls	r0, r3, #29
 800b23a:	d512      	bpl.n	800b262 <__swsetup_r+0x7a>
 800b23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b23e:	b141      	cbz	r1, 800b252 <__swsetup_r+0x6a>
 800b240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b244:	4299      	cmp	r1, r3
 800b246:	d002      	beq.n	800b24e <__swsetup_r+0x66>
 800b248:	4630      	mov	r0, r6
 800b24a:	f002 f96d 	bl	800d528 <_free_r>
 800b24e:	2300      	movs	r3, #0
 800b250:	6363      	str	r3, [r4, #52]	; 0x34
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	2300      	movs	r3, #0
 800b25c:	6063      	str	r3, [r4, #4]
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	f043 0308 	orr.w	r3, r3, #8
 800b268:	81a3      	strh	r3, [r4, #12]
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	b94b      	cbnz	r3, 800b282 <__swsetup_r+0x9a>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b278:	d003      	beq.n	800b282 <__swsetup_r+0x9a>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4630      	mov	r0, r6
 800b27e:	f001 fc13 	bl	800caa8 <__smakebuf_r>
 800b282:	89a0      	ldrh	r0, [r4, #12]
 800b284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b288:	f010 0301 	ands.w	r3, r0, #1
 800b28c:	d00a      	beq.n	800b2a4 <__swsetup_r+0xbc>
 800b28e:	2300      	movs	r3, #0
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	6963      	ldr	r3, [r4, #20]
 800b294:	425b      	negs	r3, r3
 800b296:	61a3      	str	r3, [r4, #24]
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	b943      	cbnz	r3, 800b2ae <__swsetup_r+0xc6>
 800b29c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2a0:	d1ba      	bne.n	800b218 <__swsetup_r+0x30>
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	0781      	lsls	r1, r0, #30
 800b2a6:	bf58      	it	pl
 800b2a8:	6963      	ldrpl	r3, [r4, #20]
 800b2aa:	60a3      	str	r3, [r4, #8]
 800b2ac:	e7f4      	b.n	800b298 <__swsetup_r+0xb0>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e7f7      	b.n	800b2a2 <__swsetup_r+0xba>
 800b2b2:	bf00      	nop
 800b2b4:	20000018 	.word	0x20000018
 800b2b8:	0800e59c 	.word	0x0800e59c
 800b2bc:	0800e5bc 	.word	0x0800e5bc
 800b2c0:	0800e57c 	.word	0x0800e57c

0800b2c4 <_close_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	; (800b2e0 <_close_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f7 fc0d 	bl	8002aee <_close>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_close_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_close_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	20000898 	.word	0x20000898

0800b2e4 <quorem>:
 800b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	6903      	ldr	r3, [r0, #16]
 800b2ea:	690c      	ldr	r4, [r1, #16]
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	f2c0 8081 	blt.w	800b3f6 <quorem+0x112>
 800b2f4:	3c01      	subs	r4, #1
 800b2f6:	f101 0814 	add.w	r8, r1, #20
 800b2fa:	f100 0514 	add.w	r5, r0, #20
 800b2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b30c:	3301      	adds	r3, #1
 800b30e:	429a      	cmp	r2, r3
 800b310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b318:	fbb2 f6f3 	udiv	r6, r2, r3
 800b31c:	d331      	bcc.n	800b382 <quorem+0x9e>
 800b31e:	f04f 0e00 	mov.w	lr, #0
 800b322:	4640      	mov	r0, r8
 800b324:	46ac      	mov	ip, r5
 800b326:	46f2      	mov	sl, lr
 800b328:	f850 2b04 	ldr.w	r2, [r0], #4
 800b32c:	b293      	uxth	r3, r2
 800b32e:	fb06 e303 	mla	r3, r6, r3, lr
 800b332:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b336:	b29b      	uxth	r3, r3
 800b338:	ebaa 0303 	sub.w	r3, sl, r3
 800b33c:	f8dc a000 	ldr.w	sl, [ip]
 800b340:	0c12      	lsrs	r2, r2, #16
 800b342:	fa13 f38a 	uxtah	r3, r3, sl
 800b346:	fb06 e202 	mla	r2, r6, r2, lr
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	9b00      	ldr	r3, [sp, #0]
 800b34e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b352:	b292      	uxth	r2, r2
 800b354:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b35c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b360:	4581      	cmp	r9, r0
 800b362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b366:	f84c 3b04 	str.w	r3, [ip], #4
 800b36a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b36e:	d2db      	bcs.n	800b328 <quorem+0x44>
 800b370:	f855 300b 	ldr.w	r3, [r5, fp]
 800b374:	b92b      	cbnz	r3, 800b382 <quorem+0x9e>
 800b376:	9b01      	ldr	r3, [sp, #4]
 800b378:	3b04      	subs	r3, #4
 800b37a:	429d      	cmp	r5, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	d32e      	bcc.n	800b3de <quorem+0xfa>
 800b380:	613c      	str	r4, [r7, #16]
 800b382:	4638      	mov	r0, r7
 800b384:	f001 fec4 	bl	800d110 <__mcmp>
 800b388:	2800      	cmp	r0, #0
 800b38a:	db24      	blt.n	800b3d6 <quorem+0xf2>
 800b38c:	3601      	adds	r6, #1
 800b38e:	4628      	mov	r0, r5
 800b390:	f04f 0c00 	mov.w	ip, #0
 800b394:	f858 2b04 	ldr.w	r2, [r8], #4
 800b398:	f8d0 e000 	ldr.w	lr, [r0]
 800b39c:	b293      	uxth	r3, r2
 800b39e:	ebac 0303 	sub.w	r3, ip, r3
 800b3a2:	0c12      	lsrs	r2, r2, #16
 800b3a4:	fa13 f38e 	uxtah	r3, r3, lr
 800b3a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3b6:	45c1      	cmp	r9, r8
 800b3b8:	f840 3b04 	str.w	r3, [r0], #4
 800b3bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3c0:	d2e8      	bcs.n	800b394 <quorem+0xb0>
 800b3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3ca:	b922      	cbnz	r2, 800b3d6 <quorem+0xf2>
 800b3cc:	3b04      	subs	r3, #4
 800b3ce:	429d      	cmp	r5, r3
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	d30a      	bcc.n	800b3ea <quorem+0x106>
 800b3d4:	613c      	str	r4, [r7, #16]
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	b003      	add	sp, #12
 800b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	3b04      	subs	r3, #4
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	d1cc      	bne.n	800b380 <quorem+0x9c>
 800b3e6:	3c01      	subs	r4, #1
 800b3e8:	e7c7      	b.n	800b37a <quorem+0x96>
 800b3ea:	6812      	ldr	r2, [r2, #0]
 800b3ec:	3b04      	subs	r3, #4
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d1f0      	bne.n	800b3d4 <quorem+0xf0>
 800b3f2:	3c01      	subs	r4, #1
 800b3f4:	e7eb      	b.n	800b3ce <quorem+0xea>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e7ee      	b.n	800b3d8 <quorem+0xf4>
 800b3fa:	0000      	movs	r0, r0
 800b3fc:	0000      	movs	r0, r0
	...

0800b400 <_dtoa_r>:
 800b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	ed2d 8b04 	vpush	{d8-d9}
 800b408:	ec57 6b10 	vmov	r6, r7, d0
 800b40c:	b093      	sub	sp, #76	; 0x4c
 800b40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b414:	9106      	str	r1, [sp, #24]
 800b416:	ee10 aa10 	vmov	sl, s0
 800b41a:	4604      	mov	r4, r0
 800b41c:	9209      	str	r2, [sp, #36]	; 0x24
 800b41e:	930c      	str	r3, [sp, #48]	; 0x30
 800b420:	46bb      	mov	fp, r7
 800b422:	b975      	cbnz	r5, 800b442 <_dtoa_r+0x42>
 800b424:	2010      	movs	r0, #16
 800b426:	f001 fb7f 	bl	800cb28 <malloc>
 800b42a:	4602      	mov	r2, r0
 800b42c:	6260      	str	r0, [r4, #36]	; 0x24
 800b42e:	b920      	cbnz	r0, 800b43a <_dtoa_r+0x3a>
 800b430:	4ba7      	ldr	r3, [pc, #668]	; (800b6d0 <_dtoa_r+0x2d0>)
 800b432:	21ea      	movs	r1, #234	; 0xea
 800b434:	48a7      	ldr	r0, [pc, #668]	; (800b6d4 <_dtoa_r+0x2d4>)
 800b436:	f002 fc45 	bl	800dcc4 <__assert_func>
 800b43a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b43e:	6005      	str	r5, [r0, #0]
 800b440:	60c5      	str	r5, [r0, #12]
 800b442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b444:	6819      	ldr	r1, [r3, #0]
 800b446:	b151      	cbz	r1, 800b45e <_dtoa_r+0x5e>
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	604a      	str	r2, [r1, #4]
 800b44c:	2301      	movs	r3, #1
 800b44e:	4093      	lsls	r3, r2
 800b450:	608b      	str	r3, [r1, #8]
 800b452:	4620      	mov	r0, r4
 800b454:	f001 fbd0 	bl	800cbf8 <_Bfree>
 800b458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b45a:	2200      	movs	r2, #0
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	1e3b      	subs	r3, r7, #0
 800b460:	bfaa      	itet	ge
 800b462:	2300      	movge	r3, #0
 800b464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b468:	f8c8 3000 	strge.w	r3, [r8]
 800b46c:	4b9a      	ldr	r3, [pc, #616]	; (800b6d8 <_dtoa_r+0x2d8>)
 800b46e:	bfbc      	itt	lt
 800b470:	2201      	movlt	r2, #1
 800b472:	f8c8 2000 	strlt.w	r2, [r8]
 800b476:	ea33 030b 	bics.w	r3, r3, fp
 800b47a:	d11b      	bne.n	800b4b4 <_dtoa_r+0xb4>
 800b47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b47e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b488:	4333      	orrs	r3, r6
 800b48a:	f000 8592 	beq.w	800bfb2 <_dtoa_r+0xbb2>
 800b48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b490:	b963      	cbnz	r3, 800b4ac <_dtoa_r+0xac>
 800b492:	4b92      	ldr	r3, [pc, #584]	; (800b6dc <_dtoa_r+0x2dc>)
 800b494:	e022      	b.n	800b4dc <_dtoa_r+0xdc>
 800b496:	4b92      	ldr	r3, [pc, #584]	; (800b6e0 <_dtoa_r+0x2e0>)
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	3308      	adds	r3, #8
 800b49c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	9801      	ldr	r0, [sp, #4]
 800b4a2:	b013      	add	sp, #76	; 0x4c
 800b4a4:	ecbd 8b04 	vpop	{d8-d9}
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	4b8b      	ldr	r3, [pc, #556]	; (800b6dc <_dtoa_r+0x2dc>)
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	3303      	adds	r3, #3
 800b4b2:	e7f3      	b.n	800b49c <_dtoa_r+0x9c>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	4659      	mov	r1, fp
 800b4bc:	f7f5 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c0:	ec4b ab19 	vmov	d9, sl, fp
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	b158      	cbz	r0, 800b4e0 <_dtoa_r+0xe0>
 800b4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 856b 	beq.w	800bfac <_dtoa_r+0xbac>
 800b4d6:	4883      	ldr	r0, [pc, #524]	; (800b6e4 <_dtoa_r+0x2e4>)
 800b4d8:	6018      	str	r0, [r3, #0]
 800b4da:	1e43      	subs	r3, r0, #1
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	e7df      	b.n	800b4a0 <_dtoa_r+0xa0>
 800b4e0:	ec4b ab10 	vmov	d0, sl, fp
 800b4e4:	aa10      	add	r2, sp, #64	; 0x40
 800b4e6:	a911      	add	r1, sp, #68	; 0x44
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f001 ff33 	bl	800d354 <__d2b>
 800b4ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b4f2:	ee08 0a10 	vmov	s16, r0
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	f000 8084 	beq.w	800b604 <_dtoa_r+0x204>
 800b4fc:	ee19 3a90 	vmov	r3, s19
 800b500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b508:	4656      	mov	r6, sl
 800b50a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b516:	4b74      	ldr	r3, [pc, #464]	; (800b6e8 <_dtoa_r+0x2e8>)
 800b518:	2200      	movs	r2, #0
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f4 feb3 	bl	8000288 <__aeabi_dsub>
 800b522:	a365      	add	r3, pc, #404	; (adr r3, 800b6b8 <_dtoa_r+0x2b8>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	a364      	add	r3, pc, #400	; (adr r3, 800b6c0 <_dtoa_r+0x2c0>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 feab 	bl	800028c <__adddf3>
 800b536:	4606      	mov	r6, r0
 800b538:	4628      	mov	r0, r5
 800b53a:	460f      	mov	r7, r1
 800b53c:	f7f4 fff2 	bl	8000524 <__aeabi_i2d>
 800b540:	a361      	add	r3, pc, #388	; (adr r3, 800b6c8 <_dtoa_r+0x2c8>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f5 f857 	bl	80005f8 <__aeabi_dmul>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4630      	mov	r0, r6
 800b550:	4639      	mov	r1, r7
 800b552:	f7f4 fe9b 	bl	800028c <__adddf3>
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	f7f5 fafd 	bl	8000b58 <__aeabi_d2iz>
 800b55e:	2200      	movs	r2, #0
 800b560:	9000      	str	r0, [sp, #0]
 800b562:	2300      	movs	r3, #0
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f5 fab8 	bl	8000adc <__aeabi_dcmplt>
 800b56c:	b150      	cbz	r0, 800b584 <_dtoa_r+0x184>
 800b56e:	9800      	ldr	r0, [sp, #0]
 800b570:	f7f4 ffd8 	bl	8000524 <__aeabi_i2d>
 800b574:	4632      	mov	r2, r6
 800b576:	463b      	mov	r3, r7
 800b578:	f7f5 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b57c:	b910      	cbnz	r0, 800b584 <_dtoa_r+0x184>
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	3b01      	subs	r3, #1
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	9b00      	ldr	r3, [sp, #0]
 800b586:	2b16      	cmp	r3, #22
 800b588:	d85a      	bhi.n	800b640 <_dtoa_r+0x240>
 800b58a:	9a00      	ldr	r2, [sp, #0]
 800b58c:	4b57      	ldr	r3, [pc, #348]	; (800b6ec <_dtoa_r+0x2ec>)
 800b58e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	ec51 0b19 	vmov	r0, r1, d9
 800b59a:	f7f5 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d050      	beq.n	800b644 <_dtoa_r+0x244>
 800b5a2:	9b00      	ldr	r3, [sp, #0]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ae:	1b5d      	subs	r5, r3, r5
 800b5b0:	1e6b      	subs	r3, r5, #1
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	bf45      	ittet	mi
 800b5b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b5ba:	9304      	strmi	r3, [sp, #16]
 800b5bc:	2300      	movpl	r3, #0
 800b5be:	2300      	movmi	r3, #0
 800b5c0:	bf4c      	ite	mi
 800b5c2:	9305      	strmi	r3, [sp, #20]
 800b5c4:	9304      	strpl	r3, [sp, #16]
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	db3d      	blt.n	800b648 <_dtoa_r+0x248>
 800b5cc:	9b05      	ldr	r3, [sp, #20]
 800b5ce:	9a00      	ldr	r2, [sp, #0]
 800b5d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b5d2:	4413      	add	r3, r2
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9307      	str	r3, [sp, #28]
 800b5da:	9b06      	ldr	r3, [sp, #24]
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	f200 8089 	bhi.w	800b6f4 <_dtoa_r+0x2f4>
 800b5e2:	2b05      	cmp	r3, #5
 800b5e4:	bfc4      	itt	gt
 800b5e6:	3b04      	subgt	r3, #4
 800b5e8:	9306      	strgt	r3, [sp, #24]
 800b5ea:	9b06      	ldr	r3, [sp, #24]
 800b5ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b5f0:	bfcc      	ite	gt
 800b5f2:	2500      	movgt	r5, #0
 800b5f4:	2501      	movle	r5, #1
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	f200 8087 	bhi.w	800b70a <_dtoa_r+0x30a>
 800b5fc:	e8df f003 	tbb	[pc, r3]
 800b600:	59383a2d 	.word	0x59383a2d
 800b604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b608:	441d      	add	r5, r3
 800b60a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b60e:	2b20      	cmp	r3, #32
 800b610:	bfc1      	itttt	gt
 800b612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b61a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b61e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b622:	bfda      	itte	le
 800b624:	f1c3 0320 	rsble	r3, r3, #32
 800b628:	fa06 f003 	lslle.w	r0, r6, r3
 800b62c:	4318      	orrgt	r0, r3
 800b62e:	f7f4 ff69 	bl	8000504 <__aeabi_ui2d>
 800b632:	2301      	movs	r3, #1
 800b634:	4606      	mov	r6, r0
 800b636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b63a:	3d01      	subs	r5, #1
 800b63c:	930e      	str	r3, [sp, #56]	; 0x38
 800b63e:	e76a      	b.n	800b516 <_dtoa_r+0x116>
 800b640:	2301      	movs	r3, #1
 800b642:	e7b2      	b.n	800b5aa <_dtoa_r+0x1aa>
 800b644:	900b      	str	r0, [sp, #44]	; 0x2c
 800b646:	e7b1      	b.n	800b5ac <_dtoa_r+0x1ac>
 800b648:	9b04      	ldr	r3, [sp, #16]
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	1a9b      	subs	r3, r3, r2
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	4253      	negs	r3, r2
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	2300      	movs	r3, #0
 800b656:	930a      	str	r3, [sp, #40]	; 0x28
 800b658:	e7bf      	b.n	800b5da <_dtoa_r+0x1da>
 800b65a:	2300      	movs	r3, #0
 800b65c:	9308      	str	r3, [sp, #32]
 800b65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b660:	2b00      	cmp	r3, #0
 800b662:	dc55      	bgt.n	800b710 <_dtoa_r+0x310>
 800b664:	2301      	movs	r3, #1
 800b666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b66a:	461a      	mov	r2, r3
 800b66c:	9209      	str	r2, [sp, #36]	; 0x24
 800b66e:	e00c      	b.n	800b68a <_dtoa_r+0x28a>
 800b670:	2301      	movs	r3, #1
 800b672:	e7f3      	b.n	800b65c <_dtoa_r+0x25c>
 800b674:	2300      	movs	r3, #0
 800b676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b678:	9308      	str	r3, [sp, #32]
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	4413      	add	r3, r2
 800b67e:	9302      	str	r3, [sp, #8]
 800b680:	3301      	adds	r3, #1
 800b682:	2b01      	cmp	r3, #1
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	bfb8      	it	lt
 800b688:	2301      	movlt	r3, #1
 800b68a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b68c:	2200      	movs	r2, #0
 800b68e:	6042      	str	r2, [r0, #4]
 800b690:	2204      	movs	r2, #4
 800b692:	f102 0614 	add.w	r6, r2, #20
 800b696:	429e      	cmp	r6, r3
 800b698:	6841      	ldr	r1, [r0, #4]
 800b69a:	d93d      	bls.n	800b718 <_dtoa_r+0x318>
 800b69c:	4620      	mov	r0, r4
 800b69e:	f001 fa6b 	bl	800cb78 <_Balloc>
 800b6a2:	9001      	str	r0, [sp, #4]
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d13b      	bne.n	800b720 <_dtoa_r+0x320>
 800b6a8:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <_dtoa_r+0x2f0>)
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b6b0:	e6c0      	b.n	800b434 <_dtoa_r+0x34>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e7df      	b.n	800b676 <_dtoa_r+0x276>
 800b6b6:	bf00      	nop
 800b6b8:	636f4361 	.word	0x636f4361
 800b6bc:	3fd287a7 	.word	0x3fd287a7
 800b6c0:	8b60c8b3 	.word	0x8b60c8b3
 800b6c4:	3fc68a28 	.word	0x3fc68a28
 800b6c8:	509f79fb 	.word	0x509f79fb
 800b6cc:	3fd34413 	.word	0x3fd34413
 800b6d0:	0800e4f6 	.word	0x0800e4f6
 800b6d4:	0800e50d 	.word	0x0800e50d
 800b6d8:	7ff00000 	.word	0x7ff00000
 800b6dc:	0800e4f2 	.word	0x0800e4f2
 800b6e0:	0800e4e9 	.word	0x0800e4e9
 800b6e4:	0800e369 	.word	0x0800e369
 800b6e8:	3ff80000 	.word	0x3ff80000
 800b6ec:	0800e6e0 	.word	0x0800e6e0
 800b6f0:	0800e568 	.word	0x0800e568
 800b6f4:	2501      	movs	r5, #1
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9306      	str	r3, [sp, #24]
 800b6fa:	9508      	str	r5, [sp, #32]
 800b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b704:	2200      	movs	r2, #0
 800b706:	2312      	movs	r3, #18
 800b708:	e7b0      	b.n	800b66c <_dtoa_r+0x26c>
 800b70a:	2301      	movs	r3, #1
 800b70c:	9308      	str	r3, [sp, #32]
 800b70e:	e7f5      	b.n	800b6fc <_dtoa_r+0x2fc>
 800b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b716:	e7b8      	b.n	800b68a <_dtoa_r+0x28a>
 800b718:	3101      	adds	r1, #1
 800b71a:	6041      	str	r1, [r0, #4]
 800b71c:	0052      	lsls	r2, r2, #1
 800b71e:	e7b8      	b.n	800b692 <_dtoa_r+0x292>
 800b720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b722:	9a01      	ldr	r2, [sp, #4]
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	2b0e      	cmp	r3, #14
 800b72a:	f200 809d 	bhi.w	800b868 <_dtoa_r+0x468>
 800b72e:	2d00      	cmp	r5, #0
 800b730:	f000 809a 	beq.w	800b868 <_dtoa_r+0x468>
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	dd32      	ble.n	800b7a0 <_dtoa_r+0x3a0>
 800b73a:	4ab7      	ldr	r2, [pc, #732]	; (800ba18 <_dtoa_r+0x618>)
 800b73c:	f003 030f 	and.w	r3, r3, #15
 800b740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	05d8      	lsls	r0, r3, #23
 800b74c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b750:	d516      	bpl.n	800b780 <_dtoa_r+0x380>
 800b752:	4bb2      	ldr	r3, [pc, #712]	; (800ba1c <_dtoa_r+0x61c>)
 800b754:	ec51 0b19 	vmov	r0, r1, d9
 800b758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b75c:	f7f5 f876 	bl	800084c <__aeabi_ddiv>
 800b760:	f007 070f 	and.w	r7, r7, #15
 800b764:	4682      	mov	sl, r0
 800b766:	468b      	mov	fp, r1
 800b768:	2503      	movs	r5, #3
 800b76a:	4eac      	ldr	r6, [pc, #688]	; (800ba1c <_dtoa_r+0x61c>)
 800b76c:	b957      	cbnz	r7, 800b784 <_dtoa_r+0x384>
 800b76e:	4642      	mov	r2, r8
 800b770:	464b      	mov	r3, r9
 800b772:	4650      	mov	r0, sl
 800b774:	4659      	mov	r1, fp
 800b776:	f7f5 f869 	bl	800084c <__aeabi_ddiv>
 800b77a:	4682      	mov	sl, r0
 800b77c:	468b      	mov	fp, r1
 800b77e:	e028      	b.n	800b7d2 <_dtoa_r+0x3d2>
 800b780:	2502      	movs	r5, #2
 800b782:	e7f2      	b.n	800b76a <_dtoa_r+0x36a>
 800b784:	07f9      	lsls	r1, r7, #31
 800b786:	d508      	bpl.n	800b79a <_dtoa_r+0x39a>
 800b788:	4640      	mov	r0, r8
 800b78a:	4649      	mov	r1, r9
 800b78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	3501      	adds	r5, #1
 800b796:	4680      	mov	r8, r0
 800b798:	4689      	mov	r9, r1
 800b79a:	107f      	asrs	r7, r7, #1
 800b79c:	3608      	adds	r6, #8
 800b79e:	e7e5      	b.n	800b76c <_dtoa_r+0x36c>
 800b7a0:	f000 809b 	beq.w	800b8da <_dtoa_r+0x4da>
 800b7a4:	9b00      	ldr	r3, [sp, #0]
 800b7a6:	4f9d      	ldr	r7, [pc, #628]	; (800ba1c <_dtoa_r+0x61c>)
 800b7a8:	425e      	negs	r6, r3
 800b7aa:	4b9b      	ldr	r3, [pc, #620]	; (800ba18 <_dtoa_r+0x618>)
 800b7ac:	f006 020f 	and.w	r2, r6, #15
 800b7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	ec51 0b19 	vmov	r0, r1, d9
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	1136      	asrs	r6, r6, #4
 800b7c2:	4682      	mov	sl, r0
 800b7c4:	468b      	mov	fp, r1
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2502      	movs	r5, #2
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	d17a      	bne.n	800b8c4 <_dtoa_r+0x4c4>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1d3      	bne.n	800b77a <_dtoa_r+0x37a>
 800b7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 8082 	beq.w	800b8de <_dtoa_r+0x4de>
 800b7da:	4b91      	ldr	r3, [pc, #580]	; (800ba20 <_dtoa_r+0x620>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	4650      	mov	r0, sl
 800b7e0:	4659      	mov	r1, fp
 800b7e2:	f7f5 f97b 	bl	8000adc <__aeabi_dcmplt>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d079      	beq.n	800b8de <_dtoa_r+0x4de>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d076      	beq.n	800b8de <_dtoa_r+0x4de>
 800b7f0:	9b02      	ldr	r3, [sp, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dd36      	ble.n	800b864 <_dtoa_r+0x464>
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	1e5f      	subs	r7, r3, #1
 800b7fe:	2200      	movs	r2, #0
 800b800:	4b88      	ldr	r3, [pc, #544]	; (800ba24 <_dtoa_r+0x624>)
 800b802:	f7f4 fef9 	bl	80005f8 <__aeabi_dmul>
 800b806:	9e02      	ldr	r6, [sp, #8]
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	3501      	adds	r5, #1
 800b80e:	4628      	mov	r0, r5
 800b810:	f7f4 fe88 	bl	8000524 <__aeabi_i2d>
 800b814:	4652      	mov	r2, sl
 800b816:	465b      	mov	r3, fp
 800b818:	f7f4 feee 	bl	80005f8 <__aeabi_dmul>
 800b81c:	4b82      	ldr	r3, [pc, #520]	; (800ba28 <_dtoa_r+0x628>)
 800b81e:	2200      	movs	r2, #0
 800b820:	f7f4 fd34 	bl	800028c <__adddf3>
 800b824:	46d0      	mov	r8, sl
 800b826:	46d9      	mov	r9, fp
 800b828:	4682      	mov	sl, r0
 800b82a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d158      	bne.n	800b8e4 <_dtoa_r+0x4e4>
 800b832:	4b7e      	ldr	r3, [pc, #504]	; (800ba2c <_dtoa_r+0x62c>)
 800b834:	2200      	movs	r2, #0
 800b836:	4640      	mov	r0, r8
 800b838:	4649      	mov	r1, r9
 800b83a:	f7f4 fd25 	bl	8000288 <__aeabi_dsub>
 800b83e:	4652      	mov	r2, sl
 800b840:	465b      	mov	r3, fp
 800b842:	4680      	mov	r8, r0
 800b844:	4689      	mov	r9, r1
 800b846:	f7f5 f967 	bl	8000b18 <__aeabi_dcmpgt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f040 8295 	bne.w	800bd7a <_dtoa_r+0x97a>
 800b850:	4652      	mov	r2, sl
 800b852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b856:	4640      	mov	r0, r8
 800b858:	4649      	mov	r1, r9
 800b85a:	f7f5 f93f 	bl	8000adc <__aeabi_dcmplt>
 800b85e:	2800      	cmp	r0, #0
 800b860:	f040 8289 	bne.w	800bd76 <_dtoa_r+0x976>
 800b864:	ec5b ab19 	vmov	sl, fp, d9
 800b868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f2c0 8148 	blt.w	800bb00 <_dtoa_r+0x700>
 800b870:	9a00      	ldr	r2, [sp, #0]
 800b872:	2a0e      	cmp	r2, #14
 800b874:	f300 8144 	bgt.w	800bb00 <_dtoa_r+0x700>
 800b878:	4b67      	ldr	r3, [pc, #412]	; (800ba18 <_dtoa_r+0x618>)
 800b87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	f280 80d5 	bge.w	800ba34 <_dtoa_r+0x634>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f300 80d1 	bgt.w	800ba34 <_dtoa_r+0x634>
 800b892:	f040 826f 	bne.w	800bd74 <_dtoa_r+0x974>
 800b896:	4b65      	ldr	r3, [pc, #404]	; (800ba2c <_dtoa_r+0x62c>)
 800b898:	2200      	movs	r2, #0
 800b89a:	4640      	mov	r0, r8
 800b89c:	4649      	mov	r1, r9
 800b89e:	f7f4 feab 	bl	80005f8 <__aeabi_dmul>
 800b8a2:	4652      	mov	r2, sl
 800b8a4:	465b      	mov	r3, fp
 800b8a6:	f7f5 f92d 	bl	8000b04 <__aeabi_dcmpge>
 800b8aa:	9e03      	ldr	r6, [sp, #12]
 800b8ac:	4637      	mov	r7, r6
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f040 8245 	bne.w	800bd3e <_dtoa_r+0x93e>
 800b8b4:	9d01      	ldr	r5, [sp, #4]
 800b8b6:	2331      	movs	r3, #49	; 0x31
 800b8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800b8bc:	9b00      	ldr	r3, [sp, #0]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	e240      	b.n	800bd46 <_dtoa_r+0x946>
 800b8c4:	07f2      	lsls	r2, r6, #31
 800b8c6:	d505      	bpl.n	800b8d4 <_dtoa_r+0x4d4>
 800b8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	3501      	adds	r5, #1
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	1076      	asrs	r6, r6, #1
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	e777      	b.n	800b7ca <_dtoa_r+0x3ca>
 800b8da:	2502      	movs	r5, #2
 800b8dc:	e779      	b.n	800b7d2 <_dtoa_r+0x3d2>
 800b8de:	9f00      	ldr	r7, [sp, #0]
 800b8e0:	9e03      	ldr	r6, [sp, #12]
 800b8e2:	e794      	b.n	800b80e <_dtoa_r+0x40e>
 800b8e4:	9901      	ldr	r1, [sp, #4]
 800b8e6:	4b4c      	ldr	r3, [pc, #304]	; (800ba18 <_dtoa_r+0x618>)
 800b8e8:	4431      	add	r1, r6
 800b8ea:	910d      	str	r1, [sp, #52]	; 0x34
 800b8ec:	9908      	ldr	r1, [sp, #32]
 800b8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	d043      	beq.n	800b982 <_dtoa_r+0x582>
 800b8fa:	494d      	ldr	r1, [pc, #308]	; (800ba30 <_dtoa_r+0x630>)
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f7f4 ffa5 	bl	800084c <__aeabi_ddiv>
 800b902:	4652      	mov	r2, sl
 800b904:	465b      	mov	r3, fp
 800b906:	f7f4 fcbf 	bl	8000288 <__aeabi_dsub>
 800b90a:	9d01      	ldr	r5, [sp, #4]
 800b90c:	4682      	mov	sl, r0
 800b90e:	468b      	mov	fp, r1
 800b910:	4649      	mov	r1, r9
 800b912:	4640      	mov	r0, r8
 800b914:	f7f5 f920 	bl	8000b58 <__aeabi_d2iz>
 800b918:	4606      	mov	r6, r0
 800b91a:	f7f4 fe03 	bl	8000524 <__aeabi_i2d>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	3630      	adds	r6, #48	; 0x30
 800b92c:	f805 6b01 	strb.w	r6, [r5], #1
 800b930:	4652      	mov	r2, sl
 800b932:	465b      	mov	r3, fp
 800b934:	4680      	mov	r8, r0
 800b936:	4689      	mov	r9, r1
 800b938:	f7f5 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d163      	bne.n	800ba08 <_dtoa_r+0x608>
 800b940:	4642      	mov	r2, r8
 800b942:	464b      	mov	r3, r9
 800b944:	4936      	ldr	r1, [pc, #216]	; (800ba20 <_dtoa_r+0x620>)
 800b946:	2000      	movs	r0, #0
 800b948:	f7f4 fc9e 	bl	8000288 <__aeabi_dsub>
 800b94c:	4652      	mov	r2, sl
 800b94e:	465b      	mov	r3, fp
 800b950:	f7f5 f8c4 	bl	8000adc <__aeabi_dcmplt>
 800b954:	2800      	cmp	r0, #0
 800b956:	f040 80b5 	bne.w	800bac4 <_dtoa_r+0x6c4>
 800b95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b95c:	429d      	cmp	r5, r3
 800b95e:	d081      	beq.n	800b864 <_dtoa_r+0x464>
 800b960:	4b30      	ldr	r3, [pc, #192]	; (800ba24 <_dtoa_r+0x624>)
 800b962:	2200      	movs	r2, #0
 800b964:	4650      	mov	r0, sl
 800b966:	4659      	mov	r1, fp
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	4b2d      	ldr	r3, [pc, #180]	; (800ba24 <_dtoa_r+0x624>)
 800b96e:	4682      	mov	sl, r0
 800b970:	468b      	mov	fp, r1
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	2200      	movs	r2, #0
 800b978:	f7f4 fe3e 	bl	80005f8 <__aeabi_dmul>
 800b97c:	4680      	mov	r8, r0
 800b97e:	4689      	mov	r9, r1
 800b980:	e7c6      	b.n	800b910 <_dtoa_r+0x510>
 800b982:	4650      	mov	r0, sl
 800b984:	4659      	mov	r1, fp
 800b986:	f7f4 fe37 	bl	80005f8 <__aeabi_dmul>
 800b98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b98c:	9d01      	ldr	r5, [sp, #4]
 800b98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b990:	4682      	mov	sl, r0
 800b992:	468b      	mov	fp, r1
 800b994:	4649      	mov	r1, r9
 800b996:	4640      	mov	r0, r8
 800b998:	f7f5 f8de 	bl	8000b58 <__aeabi_d2iz>
 800b99c:	4606      	mov	r6, r0
 800b99e:	f7f4 fdc1 	bl	8000524 <__aeabi_i2d>
 800b9a2:	3630      	adds	r6, #48	; 0x30
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f4 fc6c 	bl	8000288 <__aeabi_dsub>
 800b9b0:	f805 6b01 	strb.w	r6, [r5], #1
 800b9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	d124      	bne.n	800ba0c <_dtoa_r+0x60c>
 800b9c2:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <_dtoa_r+0x630>)
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	4659      	mov	r1, fp
 800b9c8:	f7f4 fc60 	bl	800028c <__adddf3>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	f7f5 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d173      	bne.n	800bac4 <_dtoa_r+0x6c4>
 800b9dc:	4652      	mov	r2, sl
 800b9de:	465b      	mov	r3, fp
 800b9e0:	4913      	ldr	r1, [pc, #76]	; (800ba30 <_dtoa_r+0x630>)
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f7f4 fc50 	bl	8000288 <__aeabi_dsub>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	f7f5 f874 	bl	8000adc <__aeabi_dcmplt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f43f af35 	beq.w	800b864 <_dtoa_r+0x464>
 800b9fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9fc:	1e6b      	subs	r3, r5, #1
 800b9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba04:	2b30      	cmp	r3, #48	; 0x30
 800ba06:	d0f8      	beq.n	800b9fa <_dtoa_r+0x5fa>
 800ba08:	9700      	str	r7, [sp, #0]
 800ba0a:	e049      	b.n	800baa0 <_dtoa_r+0x6a0>
 800ba0c:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <_dtoa_r+0x624>)
 800ba0e:	f7f4 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ba12:	4680      	mov	r8, r0
 800ba14:	4689      	mov	r9, r1
 800ba16:	e7bd      	b.n	800b994 <_dtoa_r+0x594>
 800ba18:	0800e6e0 	.word	0x0800e6e0
 800ba1c:	0800e6b8 	.word	0x0800e6b8
 800ba20:	3ff00000 	.word	0x3ff00000
 800ba24:	40240000 	.word	0x40240000
 800ba28:	401c0000 	.word	0x401c0000
 800ba2c:	40140000 	.word	0x40140000
 800ba30:	3fe00000 	.word	0x3fe00000
 800ba34:	9d01      	ldr	r5, [sp, #4]
 800ba36:	4656      	mov	r6, sl
 800ba38:	465f      	mov	r7, fp
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	464b      	mov	r3, r9
 800ba3e:	4630      	mov	r0, r6
 800ba40:	4639      	mov	r1, r7
 800ba42:	f7f4 ff03 	bl	800084c <__aeabi_ddiv>
 800ba46:	f7f5 f887 	bl	8000b58 <__aeabi_d2iz>
 800ba4a:	4682      	mov	sl, r0
 800ba4c:	f7f4 fd6a 	bl	8000524 <__aeabi_i2d>
 800ba50:	4642      	mov	r2, r8
 800ba52:	464b      	mov	r3, r9
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ba64:	f7f4 fc10 	bl	8000288 <__aeabi_dsub>
 800ba68:	f805 6b01 	strb.w	r6, [r5], #1
 800ba6c:	9e01      	ldr	r6, [sp, #4]
 800ba6e:	9f03      	ldr	r7, [sp, #12]
 800ba70:	1bae      	subs	r6, r5, r6
 800ba72:	42b7      	cmp	r7, r6
 800ba74:	4602      	mov	r2, r0
 800ba76:	460b      	mov	r3, r1
 800ba78:	d135      	bne.n	800bae6 <_dtoa_r+0x6e6>
 800ba7a:	f7f4 fc07 	bl	800028c <__adddf3>
 800ba7e:	4642      	mov	r2, r8
 800ba80:	464b      	mov	r3, r9
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	f7f5 f847 	bl	8000b18 <__aeabi_dcmpgt>
 800ba8a:	b9d0      	cbnz	r0, 800bac2 <_dtoa_r+0x6c2>
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	464b      	mov	r3, r9
 800ba90:	4630      	mov	r0, r6
 800ba92:	4639      	mov	r1, r7
 800ba94:	f7f5 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba98:	b110      	cbz	r0, 800baa0 <_dtoa_r+0x6a0>
 800ba9a:	f01a 0f01 	tst.w	sl, #1
 800ba9e:	d110      	bne.n	800bac2 <_dtoa_r+0x6c2>
 800baa0:	4620      	mov	r0, r4
 800baa2:	ee18 1a10 	vmov	r1, s16
 800baa6:	f001 f8a7 	bl	800cbf8 <_Bfree>
 800baaa:	2300      	movs	r3, #0
 800baac:	9800      	ldr	r0, [sp, #0]
 800baae:	702b      	strb	r3, [r5, #0]
 800bab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab2:	3001      	adds	r0, #1
 800bab4:	6018      	str	r0, [r3, #0]
 800bab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f43f acf1 	beq.w	800b4a0 <_dtoa_r+0xa0>
 800babe:	601d      	str	r5, [r3, #0]
 800bac0:	e4ee      	b.n	800b4a0 <_dtoa_r+0xa0>
 800bac2:	9f00      	ldr	r7, [sp, #0]
 800bac4:	462b      	mov	r3, r5
 800bac6:	461d      	mov	r5, r3
 800bac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bacc:	2a39      	cmp	r2, #57	; 0x39
 800bace:	d106      	bne.n	800bade <_dtoa_r+0x6de>
 800bad0:	9a01      	ldr	r2, [sp, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d1f7      	bne.n	800bac6 <_dtoa_r+0x6c6>
 800bad6:	9901      	ldr	r1, [sp, #4]
 800bad8:	2230      	movs	r2, #48	; 0x30
 800bada:	3701      	adds	r7, #1
 800badc:	700a      	strb	r2, [r1, #0]
 800bade:	781a      	ldrb	r2, [r3, #0]
 800bae0:	3201      	adds	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]
 800bae4:	e790      	b.n	800ba08 <_dtoa_r+0x608>
 800bae6:	4ba6      	ldr	r3, [pc, #664]	; (800bd80 <_dtoa_r+0x980>)
 800bae8:	2200      	movs	r2, #0
 800baea:	f7f4 fd85 	bl	80005f8 <__aeabi_dmul>
 800baee:	2200      	movs	r2, #0
 800baf0:	2300      	movs	r3, #0
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	f7f4 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d09d      	beq.n	800ba3a <_dtoa_r+0x63a>
 800bafe:	e7cf      	b.n	800baa0 <_dtoa_r+0x6a0>
 800bb00:	9a08      	ldr	r2, [sp, #32]
 800bb02:	2a00      	cmp	r2, #0
 800bb04:	f000 80d7 	beq.w	800bcb6 <_dtoa_r+0x8b6>
 800bb08:	9a06      	ldr	r2, [sp, #24]
 800bb0a:	2a01      	cmp	r2, #1
 800bb0c:	f300 80ba 	bgt.w	800bc84 <_dtoa_r+0x884>
 800bb10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	f000 80b2 	beq.w	800bc7c <_dtoa_r+0x87c>
 800bb18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb1c:	9e07      	ldr	r6, [sp, #28]
 800bb1e:	9d04      	ldr	r5, [sp, #16]
 800bb20:	9a04      	ldr	r2, [sp, #16]
 800bb22:	441a      	add	r2, r3
 800bb24:	9204      	str	r2, [sp, #16]
 800bb26:	9a05      	ldr	r2, [sp, #20]
 800bb28:	2101      	movs	r1, #1
 800bb2a:	441a      	add	r2, r3
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	9205      	str	r2, [sp, #20]
 800bb30:	f001 f964 	bl	800cdfc <__i2b>
 800bb34:	4607      	mov	r7, r0
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	dd0c      	ble.n	800bb54 <_dtoa_r+0x754>
 800bb3a:	9b05      	ldr	r3, [sp, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd09      	ble.n	800bb54 <_dtoa_r+0x754>
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	9a04      	ldr	r2, [sp, #16]
 800bb44:	bfa8      	it	ge
 800bb46:	462b      	movge	r3, r5
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	9204      	str	r2, [sp, #16]
 800bb4c:	9a05      	ldr	r2, [sp, #20]
 800bb4e:	1aed      	subs	r5, r5, r3
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	9305      	str	r3, [sp, #20]
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	b31b      	cbz	r3, 800bba0 <_dtoa_r+0x7a0>
 800bb58:	9b08      	ldr	r3, [sp, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80af 	beq.w	800bcbe <_dtoa_r+0x8be>
 800bb60:	2e00      	cmp	r6, #0
 800bb62:	dd13      	ble.n	800bb8c <_dtoa_r+0x78c>
 800bb64:	4639      	mov	r1, r7
 800bb66:	4632      	mov	r2, r6
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f001 fa07 	bl	800cf7c <__pow5mult>
 800bb6e:	ee18 2a10 	vmov	r2, s16
 800bb72:	4601      	mov	r1, r0
 800bb74:	4607      	mov	r7, r0
 800bb76:	4620      	mov	r0, r4
 800bb78:	f001 f956 	bl	800ce28 <__multiply>
 800bb7c:	ee18 1a10 	vmov	r1, s16
 800bb80:	4680      	mov	r8, r0
 800bb82:	4620      	mov	r0, r4
 800bb84:	f001 f838 	bl	800cbf8 <_Bfree>
 800bb88:	ee08 8a10 	vmov	s16, r8
 800bb8c:	9b07      	ldr	r3, [sp, #28]
 800bb8e:	1b9a      	subs	r2, r3, r6
 800bb90:	d006      	beq.n	800bba0 <_dtoa_r+0x7a0>
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	4620      	mov	r0, r4
 800bb98:	f001 f9f0 	bl	800cf7c <__pow5mult>
 800bb9c:	ee08 0a10 	vmov	s16, r0
 800bba0:	2101      	movs	r1, #1
 800bba2:	4620      	mov	r0, r4
 800bba4:	f001 f92a 	bl	800cdfc <__i2b>
 800bba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	4606      	mov	r6, r0
 800bbae:	f340 8088 	ble.w	800bcc2 <_dtoa_r+0x8c2>
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4601      	mov	r1, r0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f001 f9e0 	bl	800cf7c <__pow5mult>
 800bbbc:	9b06      	ldr	r3, [sp, #24]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	f340 8081 	ble.w	800bcc8 <_dtoa_r+0x8c8>
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	6933      	ldr	r3, [r6, #16]
 800bbcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbd0:	6918      	ldr	r0, [r3, #16]
 800bbd2:	f001 f8c3 	bl	800cd5c <__hi0bits>
 800bbd6:	f1c0 0020 	rsb	r0, r0, #32
 800bbda:	9b05      	ldr	r3, [sp, #20]
 800bbdc:	4418      	add	r0, r3
 800bbde:	f010 001f 	ands.w	r0, r0, #31
 800bbe2:	f000 8092 	beq.w	800bd0a <_dtoa_r+0x90a>
 800bbe6:	f1c0 0320 	rsb	r3, r0, #32
 800bbea:	2b04      	cmp	r3, #4
 800bbec:	f340 808a 	ble.w	800bd04 <_dtoa_r+0x904>
 800bbf0:	f1c0 001c 	rsb	r0, r0, #28
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	4403      	add	r3, r0
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	9b05      	ldr	r3, [sp, #20]
 800bbfc:	4403      	add	r3, r0
 800bbfe:	4405      	add	r5, r0
 800bc00:	9305      	str	r3, [sp, #20]
 800bc02:	9b04      	ldr	r3, [sp, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dd07      	ble.n	800bc18 <_dtoa_r+0x818>
 800bc08:	ee18 1a10 	vmov	r1, s16
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f001 fa0e 	bl	800d030 <__lshift>
 800bc14:	ee08 0a10 	vmov	s16, r0
 800bc18:	9b05      	ldr	r3, [sp, #20]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dd05      	ble.n	800bc2a <_dtoa_r+0x82a>
 800bc1e:	4631      	mov	r1, r6
 800bc20:	461a      	mov	r2, r3
 800bc22:	4620      	mov	r0, r4
 800bc24:	f001 fa04 	bl	800d030 <__lshift>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d06e      	beq.n	800bd0e <_dtoa_r+0x90e>
 800bc30:	ee18 0a10 	vmov	r0, s16
 800bc34:	4631      	mov	r1, r6
 800bc36:	f001 fa6b 	bl	800d110 <__mcmp>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	da67      	bge.n	800bd0e <_dtoa_r+0x90e>
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	ee18 1a10 	vmov	r1, s16
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	220a      	movs	r2, #10
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fff5 	bl	800cc3c <__multadd>
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	ee08 0a10 	vmov	s16, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 81b1 	beq.w	800bfc0 <_dtoa_r+0xbc0>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	4639      	mov	r1, r7
 800bc62:	220a      	movs	r2, #10
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 ffe9 	bl	800cc3c <__multadd>
 800bc6a:	9b02      	ldr	r3, [sp, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	4607      	mov	r7, r0
 800bc70:	f300 808e 	bgt.w	800bd90 <_dtoa_r+0x990>
 800bc74:	9b06      	ldr	r3, [sp, #24]
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	dc51      	bgt.n	800bd1e <_dtoa_r+0x91e>
 800bc7a:	e089      	b.n	800bd90 <_dtoa_r+0x990>
 800bc7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc82:	e74b      	b.n	800bb1c <_dtoa_r+0x71c>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	1e5e      	subs	r6, r3, #1
 800bc88:	9b07      	ldr	r3, [sp, #28]
 800bc8a:	42b3      	cmp	r3, r6
 800bc8c:	bfbf      	itttt	lt
 800bc8e:	9b07      	ldrlt	r3, [sp, #28]
 800bc90:	9607      	strlt	r6, [sp, #28]
 800bc92:	1af2      	sublt	r2, r6, r3
 800bc94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bc96:	bfb6      	itet	lt
 800bc98:	189b      	addlt	r3, r3, r2
 800bc9a:	1b9e      	subge	r6, r3, r6
 800bc9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	bfb8      	it	lt
 800bca2:	2600      	movlt	r6, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	bfb7      	itett	lt
 800bca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bcac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bcb0:	1a9d      	sublt	r5, r3, r2
 800bcb2:	2300      	movlt	r3, #0
 800bcb4:	e734      	b.n	800bb20 <_dtoa_r+0x720>
 800bcb6:	9e07      	ldr	r6, [sp, #28]
 800bcb8:	9d04      	ldr	r5, [sp, #16]
 800bcba:	9f08      	ldr	r7, [sp, #32]
 800bcbc:	e73b      	b.n	800bb36 <_dtoa_r+0x736>
 800bcbe:	9a07      	ldr	r2, [sp, #28]
 800bcc0:	e767      	b.n	800bb92 <_dtoa_r+0x792>
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	dc18      	bgt.n	800bcfa <_dtoa_r+0x8fa>
 800bcc8:	f1ba 0f00 	cmp.w	sl, #0
 800bccc:	d115      	bne.n	800bcfa <_dtoa_r+0x8fa>
 800bcce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcd2:	b993      	cbnz	r3, 800bcfa <_dtoa_r+0x8fa>
 800bcd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcd8:	0d1b      	lsrs	r3, r3, #20
 800bcda:	051b      	lsls	r3, r3, #20
 800bcdc:	b183      	cbz	r3, 800bd00 <_dtoa_r+0x900>
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	3301      	adds	r3, #1
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	9b05      	ldr	r3, [sp, #20]
 800bce6:	3301      	adds	r3, #1
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	f04f 0801 	mov.w	r8, #1
 800bcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f47f af6a 	bne.w	800bbca <_dtoa_r+0x7ca>
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	e76f      	b.n	800bbda <_dtoa_r+0x7da>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	e7f6      	b.n	800bcee <_dtoa_r+0x8ee>
 800bd00:	4698      	mov	r8, r3
 800bd02:	e7f4      	b.n	800bcee <_dtoa_r+0x8ee>
 800bd04:	f43f af7d 	beq.w	800bc02 <_dtoa_r+0x802>
 800bd08:	4618      	mov	r0, r3
 800bd0a:	301c      	adds	r0, #28
 800bd0c:	e772      	b.n	800bbf4 <_dtoa_r+0x7f4>
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dc37      	bgt.n	800bd84 <_dtoa_r+0x984>
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	dd34      	ble.n	800bd84 <_dtoa_r+0x984>
 800bd1a:	9b03      	ldr	r3, [sp, #12]
 800bd1c:	9302      	str	r3, [sp, #8]
 800bd1e:	9b02      	ldr	r3, [sp, #8]
 800bd20:	b96b      	cbnz	r3, 800bd3e <_dtoa_r+0x93e>
 800bd22:	4631      	mov	r1, r6
 800bd24:	2205      	movs	r2, #5
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 ff88 	bl	800cc3c <__multadd>
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	4606      	mov	r6, r0
 800bd30:	ee18 0a10 	vmov	r0, s16
 800bd34:	f001 f9ec 	bl	800d110 <__mcmp>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	f73f adbb 	bgt.w	800b8b4 <_dtoa_r+0x4b4>
 800bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd40:	9d01      	ldr	r5, [sp, #4]
 800bd42:	43db      	mvns	r3, r3
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	f04f 0800 	mov.w	r8, #0
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 ff53 	bl	800cbf8 <_Bfree>
 800bd52:	2f00      	cmp	r7, #0
 800bd54:	f43f aea4 	beq.w	800baa0 <_dtoa_r+0x6a0>
 800bd58:	f1b8 0f00 	cmp.w	r8, #0
 800bd5c:	d005      	beq.n	800bd6a <_dtoa_r+0x96a>
 800bd5e:	45b8      	cmp	r8, r7
 800bd60:	d003      	beq.n	800bd6a <_dtoa_r+0x96a>
 800bd62:	4641      	mov	r1, r8
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 ff47 	bl	800cbf8 <_Bfree>
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 ff43 	bl	800cbf8 <_Bfree>
 800bd72:	e695      	b.n	800baa0 <_dtoa_r+0x6a0>
 800bd74:	2600      	movs	r6, #0
 800bd76:	4637      	mov	r7, r6
 800bd78:	e7e1      	b.n	800bd3e <_dtoa_r+0x93e>
 800bd7a:	9700      	str	r7, [sp, #0]
 800bd7c:	4637      	mov	r7, r6
 800bd7e:	e599      	b.n	800b8b4 <_dtoa_r+0x4b4>
 800bd80:	40240000 	.word	0x40240000
 800bd84:	9b08      	ldr	r3, [sp, #32]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 80ca 	beq.w	800bf20 <_dtoa_r+0xb20>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	9302      	str	r3, [sp, #8]
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	dd05      	ble.n	800bda0 <_dtoa_r+0x9a0>
 800bd94:	4639      	mov	r1, r7
 800bd96:	462a      	mov	r2, r5
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f001 f949 	bl	800d030 <__lshift>
 800bd9e:	4607      	mov	r7, r0
 800bda0:	f1b8 0f00 	cmp.w	r8, #0
 800bda4:	d05b      	beq.n	800be5e <_dtoa_r+0xa5e>
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fee5 	bl	800cb78 <_Balloc>
 800bdae:	4605      	mov	r5, r0
 800bdb0:	b928      	cbnz	r0, 800bdbe <_dtoa_r+0x9be>
 800bdb2:	4b87      	ldr	r3, [pc, #540]	; (800bfd0 <_dtoa_r+0xbd0>)
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdba:	f7ff bb3b 	b.w	800b434 <_dtoa_r+0x34>
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	3202      	adds	r2, #2
 800bdc2:	0092      	lsls	r2, r2, #2
 800bdc4:	f107 010c 	add.w	r1, r7, #12
 800bdc8:	300c      	adds	r0, #12
 800bdca:	f000 fec7 	bl	800cb5c <memcpy>
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f001 f92c 	bl	800d030 <__lshift>
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	f103 0901 	add.w	r9, r3, #1
 800bdde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bde2:	4413      	add	r3, r2
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	f00a 0301 	and.w	r3, sl, #1
 800bdea:	46b8      	mov	r8, r7
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	4607      	mov	r7, r0
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	ee18 0a10 	vmov	r0, s16
 800bdf6:	f7ff fa75 	bl	800b2e4 <quorem>
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	9002      	str	r0, [sp, #8]
 800bdfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be02:	ee18 0a10 	vmov	r0, s16
 800be06:	f001 f983 	bl	800d110 <__mcmp>
 800be0a:	463a      	mov	r2, r7
 800be0c:	9003      	str	r0, [sp, #12]
 800be0e:	4631      	mov	r1, r6
 800be10:	4620      	mov	r0, r4
 800be12:	f001 f999 	bl	800d148 <__mdiff>
 800be16:	68c2      	ldr	r2, [r0, #12]
 800be18:	f109 3bff 	add.w	fp, r9, #4294967295
 800be1c:	4605      	mov	r5, r0
 800be1e:	bb02      	cbnz	r2, 800be62 <_dtoa_r+0xa62>
 800be20:	4601      	mov	r1, r0
 800be22:	ee18 0a10 	vmov	r0, s16
 800be26:	f001 f973 	bl	800d110 <__mcmp>
 800be2a:	4602      	mov	r2, r0
 800be2c:	4629      	mov	r1, r5
 800be2e:	4620      	mov	r0, r4
 800be30:	9207      	str	r2, [sp, #28]
 800be32:	f000 fee1 	bl	800cbf8 <_Bfree>
 800be36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800be3a:	ea43 0102 	orr.w	r1, r3, r2
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	430b      	orrs	r3, r1
 800be42:	464d      	mov	r5, r9
 800be44:	d10f      	bne.n	800be66 <_dtoa_r+0xa66>
 800be46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be4a:	d02a      	beq.n	800bea2 <_dtoa_r+0xaa2>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	dd02      	ble.n	800be58 <_dtoa_r+0xa58>
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800be58:	f88b a000 	strb.w	sl, [fp]
 800be5c:	e775      	b.n	800bd4a <_dtoa_r+0x94a>
 800be5e:	4638      	mov	r0, r7
 800be60:	e7ba      	b.n	800bdd8 <_dtoa_r+0x9d8>
 800be62:	2201      	movs	r2, #1
 800be64:	e7e2      	b.n	800be2c <_dtoa_r+0xa2c>
 800be66:	9b03      	ldr	r3, [sp, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	db04      	blt.n	800be76 <_dtoa_r+0xa76>
 800be6c:	9906      	ldr	r1, [sp, #24]
 800be6e:	430b      	orrs	r3, r1
 800be70:	9904      	ldr	r1, [sp, #16]
 800be72:	430b      	orrs	r3, r1
 800be74:	d122      	bne.n	800bebc <_dtoa_r+0xabc>
 800be76:	2a00      	cmp	r2, #0
 800be78:	ddee      	ble.n	800be58 <_dtoa_r+0xa58>
 800be7a:	ee18 1a10 	vmov	r1, s16
 800be7e:	2201      	movs	r2, #1
 800be80:	4620      	mov	r0, r4
 800be82:	f001 f8d5 	bl	800d030 <__lshift>
 800be86:	4631      	mov	r1, r6
 800be88:	ee08 0a10 	vmov	s16, r0
 800be8c:	f001 f940 	bl	800d110 <__mcmp>
 800be90:	2800      	cmp	r0, #0
 800be92:	dc03      	bgt.n	800be9c <_dtoa_r+0xa9c>
 800be94:	d1e0      	bne.n	800be58 <_dtoa_r+0xa58>
 800be96:	f01a 0f01 	tst.w	sl, #1
 800be9a:	d0dd      	beq.n	800be58 <_dtoa_r+0xa58>
 800be9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bea0:	d1d7      	bne.n	800be52 <_dtoa_r+0xa52>
 800bea2:	2339      	movs	r3, #57	; 0x39
 800bea4:	f88b 3000 	strb.w	r3, [fp]
 800bea8:	462b      	mov	r3, r5
 800beaa:	461d      	mov	r5, r3
 800beac:	3b01      	subs	r3, #1
 800beae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800beb2:	2a39      	cmp	r2, #57	; 0x39
 800beb4:	d071      	beq.n	800bf9a <_dtoa_r+0xb9a>
 800beb6:	3201      	adds	r2, #1
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	e746      	b.n	800bd4a <_dtoa_r+0x94a>
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	dd07      	ble.n	800bed0 <_dtoa_r+0xad0>
 800bec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bec4:	d0ed      	beq.n	800bea2 <_dtoa_r+0xaa2>
 800bec6:	f10a 0301 	add.w	r3, sl, #1
 800beca:	f88b 3000 	strb.w	r3, [fp]
 800bece:	e73c      	b.n	800bd4a <_dtoa_r+0x94a>
 800bed0:	9b05      	ldr	r3, [sp, #20]
 800bed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bed6:	4599      	cmp	r9, r3
 800bed8:	d047      	beq.n	800bf6a <_dtoa_r+0xb6a>
 800beda:	ee18 1a10 	vmov	r1, s16
 800bede:	2300      	movs	r3, #0
 800bee0:	220a      	movs	r2, #10
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 feaa 	bl	800cc3c <__multadd>
 800bee8:	45b8      	cmp	r8, r7
 800beea:	ee08 0a10 	vmov	s16, r0
 800beee:	f04f 0300 	mov.w	r3, #0
 800bef2:	f04f 020a 	mov.w	r2, #10
 800bef6:	4641      	mov	r1, r8
 800bef8:	4620      	mov	r0, r4
 800befa:	d106      	bne.n	800bf0a <_dtoa_r+0xb0a>
 800befc:	f000 fe9e 	bl	800cc3c <__multadd>
 800bf00:	4680      	mov	r8, r0
 800bf02:	4607      	mov	r7, r0
 800bf04:	f109 0901 	add.w	r9, r9, #1
 800bf08:	e772      	b.n	800bdf0 <_dtoa_r+0x9f0>
 800bf0a:	f000 fe97 	bl	800cc3c <__multadd>
 800bf0e:	4639      	mov	r1, r7
 800bf10:	4680      	mov	r8, r0
 800bf12:	2300      	movs	r3, #0
 800bf14:	220a      	movs	r2, #10
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 fe90 	bl	800cc3c <__multadd>
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	e7f1      	b.n	800bf04 <_dtoa_r+0xb04>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	9302      	str	r3, [sp, #8]
 800bf24:	9d01      	ldr	r5, [sp, #4]
 800bf26:	ee18 0a10 	vmov	r0, s16
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	f7ff f9da 	bl	800b2e4 <quorem>
 800bf30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	f805 ab01 	strb.w	sl, [r5], #1
 800bf3a:	1aea      	subs	r2, r5, r3
 800bf3c:	9b02      	ldr	r3, [sp, #8]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	dd09      	ble.n	800bf56 <_dtoa_r+0xb56>
 800bf42:	ee18 1a10 	vmov	r1, s16
 800bf46:	2300      	movs	r3, #0
 800bf48:	220a      	movs	r2, #10
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fe76 	bl	800cc3c <__multadd>
 800bf50:	ee08 0a10 	vmov	s16, r0
 800bf54:	e7e7      	b.n	800bf26 <_dtoa_r+0xb26>
 800bf56:	9b02      	ldr	r3, [sp, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	bfc8      	it	gt
 800bf5c:	461d      	movgt	r5, r3
 800bf5e:	9b01      	ldr	r3, [sp, #4]
 800bf60:	bfd8      	it	le
 800bf62:	2501      	movle	r5, #1
 800bf64:	441d      	add	r5, r3
 800bf66:	f04f 0800 	mov.w	r8, #0
 800bf6a:	ee18 1a10 	vmov	r1, s16
 800bf6e:	2201      	movs	r2, #1
 800bf70:	4620      	mov	r0, r4
 800bf72:	f001 f85d 	bl	800d030 <__lshift>
 800bf76:	4631      	mov	r1, r6
 800bf78:	ee08 0a10 	vmov	s16, r0
 800bf7c:	f001 f8c8 	bl	800d110 <__mcmp>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	dc91      	bgt.n	800bea8 <_dtoa_r+0xaa8>
 800bf84:	d102      	bne.n	800bf8c <_dtoa_r+0xb8c>
 800bf86:	f01a 0f01 	tst.w	sl, #1
 800bf8a:	d18d      	bne.n	800bea8 <_dtoa_r+0xaa8>
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	461d      	mov	r5, r3
 800bf90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf94:	2a30      	cmp	r2, #48	; 0x30
 800bf96:	d0fa      	beq.n	800bf8e <_dtoa_r+0xb8e>
 800bf98:	e6d7      	b.n	800bd4a <_dtoa_r+0x94a>
 800bf9a:	9a01      	ldr	r2, [sp, #4]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d184      	bne.n	800beaa <_dtoa_r+0xaaa>
 800bfa0:	9b00      	ldr	r3, [sp, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	2331      	movs	r3, #49	; 0x31
 800bfa8:	7013      	strb	r3, [r2, #0]
 800bfaa:	e6ce      	b.n	800bd4a <_dtoa_r+0x94a>
 800bfac:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <_dtoa_r+0xbd4>)
 800bfae:	f7ff ba95 	b.w	800b4dc <_dtoa_r+0xdc>
 800bfb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f47f aa6e 	bne.w	800b496 <_dtoa_r+0x96>
 800bfba:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <_dtoa_r+0xbd8>)
 800bfbc:	f7ff ba8e 	b.w	800b4dc <_dtoa_r+0xdc>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dcae      	bgt.n	800bf24 <_dtoa_r+0xb24>
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	f73f aea8 	bgt.w	800bd1e <_dtoa_r+0x91e>
 800bfce:	e7a9      	b.n	800bf24 <_dtoa_r+0xb24>
 800bfd0:	0800e568 	.word	0x0800e568
 800bfd4:	0800e368 	.word	0x0800e368
 800bfd8:	0800e4e9 	.word	0x0800e4e9

0800bfdc <__sflush_r>:
 800bfdc:	898a      	ldrh	r2, [r1, #12]
 800bfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	0710      	lsls	r0, r2, #28
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	d458      	bmi.n	800c09c <__sflush_r+0xc0>
 800bfea:	684b      	ldr	r3, [r1, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dc05      	bgt.n	800bffc <__sflush_r+0x20>
 800bff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dc02      	bgt.n	800bffc <__sflush_r+0x20>
 800bff6:	2000      	movs	r0, #0
 800bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bffe:	2e00      	cmp	r6, #0
 800c000:	d0f9      	beq.n	800bff6 <__sflush_r+0x1a>
 800c002:	2300      	movs	r3, #0
 800c004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c008:	682f      	ldr	r7, [r5, #0]
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	d032      	beq.n	800c074 <__sflush_r+0x98>
 800c00e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	075a      	lsls	r2, r3, #29
 800c014:	d505      	bpl.n	800c022 <__sflush_r+0x46>
 800c016:	6863      	ldr	r3, [r4, #4]
 800c018:	1ac0      	subs	r0, r0, r3
 800c01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c01c:	b10b      	cbz	r3, 800c022 <__sflush_r+0x46>
 800c01e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c020:	1ac0      	subs	r0, r0, r3
 800c022:	2300      	movs	r3, #0
 800c024:	4602      	mov	r2, r0
 800c026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c028:	6a21      	ldr	r1, [r4, #32]
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b0      	blx	r6
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	d106      	bne.n	800c042 <__sflush_r+0x66>
 800c034:	6829      	ldr	r1, [r5, #0]
 800c036:	291d      	cmp	r1, #29
 800c038:	d82c      	bhi.n	800c094 <__sflush_r+0xb8>
 800c03a:	4a2a      	ldr	r2, [pc, #168]	; (800c0e4 <__sflush_r+0x108>)
 800c03c:	40ca      	lsrs	r2, r1
 800c03e:	07d6      	lsls	r6, r2, #31
 800c040:	d528      	bpl.n	800c094 <__sflush_r+0xb8>
 800c042:	2200      	movs	r2, #0
 800c044:	6062      	str	r2, [r4, #4]
 800c046:	04d9      	lsls	r1, r3, #19
 800c048:	6922      	ldr	r2, [r4, #16]
 800c04a:	6022      	str	r2, [r4, #0]
 800c04c:	d504      	bpl.n	800c058 <__sflush_r+0x7c>
 800c04e:	1c42      	adds	r2, r0, #1
 800c050:	d101      	bne.n	800c056 <__sflush_r+0x7a>
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	b903      	cbnz	r3, 800c058 <__sflush_r+0x7c>
 800c056:	6560      	str	r0, [r4, #84]	; 0x54
 800c058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c05a:	602f      	str	r7, [r5, #0]
 800c05c:	2900      	cmp	r1, #0
 800c05e:	d0ca      	beq.n	800bff6 <__sflush_r+0x1a>
 800c060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c064:	4299      	cmp	r1, r3
 800c066:	d002      	beq.n	800c06e <__sflush_r+0x92>
 800c068:	4628      	mov	r0, r5
 800c06a:	f001 fa5d 	bl	800d528 <_free_r>
 800c06e:	2000      	movs	r0, #0
 800c070:	6360      	str	r0, [r4, #52]	; 0x34
 800c072:	e7c1      	b.n	800bff8 <__sflush_r+0x1c>
 800c074:	6a21      	ldr	r1, [r4, #32]
 800c076:	2301      	movs	r3, #1
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	1c41      	adds	r1, r0, #1
 800c07e:	d1c7      	bne.n	800c010 <__sflush_r+0x34>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0c4      	beq.n	800c010 <__sflush_r+0x34>
 800c086:	2b1d      	cmp	r3, #29
 800c088:	d001      	beq.n	800c08e <__sflush_r+0xb2>
 800c08a:	2b16      	cmp	r3, #22
 800c08c:	d101      	bne.n	800c092 <__sflush_r+0xb6>
 800c08e:	602f      	str	r7, [r5, #0]
 800c090:	e7b1      	b.n	800bff6 <__sflush_r+0x1a>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	e7ad      	b.n	800bff8 <__sflush_r+0x1c>
 800c09c:	690f      	ldr	r7, [r1, #16]
 800c09e:	2f00      	cmp	r7, #0
 800c0a0:	d0a9      	beq.n	800bff6 <__sflush_r+0x1a>
 800c0a2:	0793      	lsls	r3, r2, #30
 800c0a4:	680e      	ldr	r6, [r1, #0]
 800c0a6:	bf08      	it	eq
 800c0a8:	694b      	ldreq	r3, [r1, #20]
 800c0aa:	600f      	str	r7, [r1, #0]
 800c0ac:	bf18      	it	ne
 800c0ae:	2300      	movne	r3, #0
 800c0b0:	eba6 0807 	sub.w	r8, r6, r7
 800c0b4:	608b      	str	r3, [r1, #8]
 800c0b6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ba:	dd9c      	ble.n	800bff6 <__sflush_r+0x1a>
 800c0bc:	6a21      	ldr	r1, [r4, #32]
 800c0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0c0:	4643      	mov	r3, r8
 800c0c2:	463a      	mov	r2, r7
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b0      	blx	r6
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	dc06      	bgt.n	800c0da <__sflush_r+0xfe>
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d2:	81a3      	strh	r3, [r4, #12]
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	e78e      	b.n	800bff8 <__sflush_r+0x1c>
 800c0da:	4407      	add	r7, r0
 800c0dc:	eba8 0800 	sub.w	r8, r8, r0
 800c0e0:	e7e9      	b.n	800c0b6 <__sflush_r+0xda>
 800c0e2:	bf00      	nop
 800c0e4:	20400001 	.word	0x20400001

0800c0e8 <_fflush_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	690b      	ldr	r3, [r1, #16]
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	b913      	cbnz	r3, 800c0f8 <_fflush_r+0x10>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	b118      	cbz	r0, 800c102 <_fflush_r+0x1a>
 800c0fa:	6983      	ldr	r3, [r0, #24]
 800c0fc:	b90b      	cbnz	r3, 800c102 <_fflush_r+0x1a>
 800c0fe:	f000 f887 	bl	800c210 <__sinit>
 800c102:	4b14      	ldr	r3, [pc, #80]	; (800c154 <_fflush_r+0x6c>)
 800c104:	429c      	cmp	r4, r3
 800c106:	d11b      	bne.n	800c140 <_fflush_r+0x58>
 800c108:	686c      	ldr	r4, [r5, #4]
 800c10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0ef      	beq.n	800c0f2 <_fflush_r+0xa>
 800c112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c114:	07d0      	lsls	r0, r2, #31
 800c116:	d404      	bmi.n	800c122 <_fflush_r+0x3a>
 800c118:	0599      	lsls	r1, r3, #22
 800c11a:	d402      	bmi.n	800c122 <_fflush_r+0x3a>
 800c11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c11e:	f000 fc88 	bl	800ca32 <__retarget_lock_acquire_recursive>
 800c122:	4628      	mov	r0, r5
 800c124:	4621      	mov	r1, r4
 800c126:	f7ff ff59 	bl	800bfdc <__sflush_r>
 800c12a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c12c:	07da      	lsls	r2, r3, #31
 800c12e:	4605      	mov	r5, r0
 800c130:	d4e0      	bmi.n	800c0f4 <_fflush_r+0xc>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	059b      	lsls	r3, r3, #22
 800c136:	d4dd      	bmi.n	800c0f4 <_fflush_r+0xc>
 800c138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c13a:	f000 fc7b 	bl	800ca34 <__retarget_lock_release_recursive>
 800c13e:	e7d9      	b.n	800c0f4 <_fflush_r+0xc>
 800c140:	4b05      	ldr	r3, [pc, #20]	; (800c158 <_fflush_r+0x70>)
 800c142:	429c      	cmp	r4, r3
 800c144:	d101      	bne.n	800c14a <_fflush_r+0x62>
 800c146:	68ac      	ldr	r4, [r5, #8]
 800c148:	e7df      	b.n	800c10a <_fflush_r+0x22>
 800c14a:	4b04      	ldr	r3, [pc, #16]	; (800c15c <_fflush_r+0x74>)
 800c14c:	429c      	cmp	r4, r3
 800c14e:	bf08      	it	eq
 800c150:	68ec      	ldreq	r4, [r5, #12]
 800c152:	e7da      	b.n	800c10a <_fflush_r+0x22>
 800c154:	0800e59c 	.word	0x0800e59c
 800c158:	0800e5bc 	.word	0x0800e5bc
 800c15c:	0800e57c 	.word	0x0800e57c

0800c160 <std>:
 800c160:	2300      	movs	r3, #0
 800c162:	b510      	push	{r4, lr}
 800c164:	4604      	mov	r4, r0
 800c166:	e9c0 3300 	strd	r3, r3, [r0]
 800c16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c16e:	6083      	str	r3, [r0, #8]
 800c170:	8181      	strh	r1, [r0, #12]
 800c172:	6643      	str	r3, [r0, #100]	; 0x64
 800c174:	81c2      	strh	r2, [r0, #14]
 800c176:	6183      	str	r3, [r0, #24]
 800c178:	4619      	mov	r1, r3
 800c17a:	2208      	movs	r2, #8
 800c17c:	305c      	adds	r0, #92	; 0x5c
 800c17e:	f7fd f993 	bl	80094a8 <memset>
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <std+0x38>)
 800c184:	6263      	str	r3, [r4, #36]	; 0x24
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <std+0x3c>)
 800c188:	62a3      	str	r3, [r4, #40]	; 0x28
 800c18a:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <std+0x40>)
 800c18c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c18e:	4b05      	ldr	r3, [pc, #20]	; (800c1a4 <std+0x44>)
 800c190:	6224      	str	r4, [r4, #32]
 800c192:	6323      	str	r3, [r4, #48]	; 0x30
 800c194:	bd10      	pop	{r4, pc}
 800c196:	bf00      	nop
 800c198:	0800a315 	.word	0x0800a315
 800c19c:	0800a337 	.word	0x0800a337
 800c1a0:	0800a36f 	.word	0x0800a36f
 800c1a4:	0800a393 	.word	0x0800a393

0800c1a8 <_cleanup_r>:
 800c1a8:	4901      	ldr	r1, [pc, #4]	; (800c1b0 <_cleanup_r+0x8>)
 800c1aa:	f000 b8af 	b.w	800c30c <_fwalk_reent>
 800c1ae:	bf00      	nop
 800c1b0:	0800c0e9 	.word	0x0800c0e9

0800c1b4 <__sfmoreglue>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	2268      	movs	r2, #104	; 0x68
 800c1b8:	1e4d      	subs	r5, r1, #1
 800c1ba:	4355      	muls	r5, r2
 800c1bc:	460e      	mov	r6, r1
 800c1be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1c2:	f001 fa1d 	bl	800d600 <_malloc_r>
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	b140      	cbz	r0, 800c1dc <__sfmoreglue+0x28>
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c1d0:	300c      	adds	r0, #12
 800c1d2:	60a0      	str	r0, [r4, #8]
 800c1d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1d8:	f7fd f966 	bl	80094a8 <memset>
 800c1dc:	4620      	mov	r0, r4
 800c1de:	bd70      	pop	{r4, r5, r6, pc}

0800c1e0 <__sfp_lock_acquire>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__sfp_lock_acquire+0x8>)
 800c1e2:	f000 bc26 	b.w	800ca32 <__retarget_lock_acquire_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	2000088d 	.word	0x2000088d

0800c1ec <__sfp_lock_release>:
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <__sfp_lock_release+0x8>)
 800c1ee:	f000 bc21 	b.w	800ca34 <__retarget_lock_release_recursive>
 800c1f2:	bf00      	nop
 800c1f4:	2000088d 	.word	0x2000088d

0800c1f8 <__sinit_lock_acquire>:
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__sinit_lock_acquire+0x8>)
 800c1fa:	f000 bc1a 	b.w	800ca32 <__retarget_lock_acquire_recursive>
 800c1fe:	bf00      	nop
 800c200:	2000088e 	.word	0x2000088e

0800c204 <__sinit_lock_release>:
 800c204:	4801      	ldr	r0, [pc, #4]	; (800c20c <__sinit_lock_release+0x8>)
 800c206:	f000 bc15 	b.w	800ca34 <__retarget_lock_release_recursive>
 800c20a:	bf00      	nop
 800c20c:	2000088e 	.word	0x2000088e

0800c210 <__sinit>:
 800c210:	b510      	push	{r4, lr}
 800c212:	4604      	mov	r4, r0
 800c214:	f7ff fff0 	bl	800c1f8 <__sinit_lock_acquire>
 800c218:	69a3      	ldr	r3, [r4, #24]
 800c21a:	b11b      	cbz	r3, 800c224 <__sinit+0x14>
 800c21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c220:	f7ff bff0 	b.w	800c204 <__sinit_lock_release>
 800c224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c228:	6523      	str	r3, [r4, #80]	; 0x50
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <__sinit+0x68>)
 800c22c:	4a13      	ldr	r2, [pc, #76]	; (800c27c <__sinit+0x6c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	62a2      	str	r2, [r4, #40]	; 0x28
 800c232:	42a3      	cmp	r3, r4
 800c234:	bf04      	itt	eq
 800c236:	2301      	moveq	r3, #1
 800c238:	61a3      	streq	r3, [r4, #24]
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f820 	bl	800c280 <__sfp>
 800c240:	6060      	str	r0, [r4, #4]
 800c242:	4620      	mov	r0, r4
 800c244:	f000 f81c 	bl	800c280 <__sfp>
 800c248:	60a0      	str	r0, [r4, #8]
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 f818 	bl	800c280 <__sfp>
 800c250:	2200      	movs	r2, #0
 800c252:	60e0      	str	r0, [r4, #12]
 800c254:	2104      	movs	r1, #4
 800c256:	6860      	ldr	r0, [r4, #4]
 800c258:	f7ff ff82 	bl	800c160 <std>
 800c25c:	68a0      	ldr	r0, [r4, #8]
 800c25e:	2201      	movs	r2, #1
 800c260:	2109      	movs	r1, #9
 800c262:	f7ff ff7d 	bl	800c160 <std>
 800c266:	68e0      	ldr	r0, [r4, #12]
 800c268:	2202      	movs	r2, #2
 800c26a:	2112      	movs	r1, #18
 800c26c:	f7ff ff78 	bl	800c160 <std>
 800c270:	2301      	movs	r3, #1
 800c272:	61a3      	str	r3, [r4, #24]
 800c274:	e7d2      	b.n	800c21c <__sinit+0xc>
 800c276:	bf00      	nop
 800c278:	0800e354 	.word	0x0800e354
 800c27c:	0800c1a9 	.word	0x0800c1a9

0800c280 <__sfp>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	4607      	mov	r7, r0
 800c284:	f7ff ffac 	bl	800c1e0 <__sfp_lock_acquire>
 800c288:	4b1e      	ldr	r3, [pc, #120]	; (800c304 <__sfp+0x84>)
 800c28a:	681e      	ldr	r6, [r3, #0]
 800c28c:	69b3      	ldr	r3, [r6, #24]
 800c28e:	b913      	cbnz	r3, 800c296 <__sfp+0x16>
 800c290:	4630      	mov	r0, r6
 800c292:	f7ff ffbd 	bl	800c210 <__sinit>
 800c296:	3648      	adds	r6, #72	; 0x48
 800c298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	d503      	bpl.n	800c2a8 <__sfp+0x28>
 800c2a0:	6833      	ldr	r3, [r6, #0]
 800c2a2:	b30b      	cbz	r3, 800c2e8 <__sfp+0x68>
 800c2a4:	6836      	ldr	r6, [r6, #0]
 800c2a6:	e7f7      	b.n	800c298 <__sfp+0x18>
 800c2a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2ac:	b9d5      	cbnz	r5, 800c2e4 <__sfp+0x64>
 800c2ae:	4b16      	ldr	r3, [pc, #88]	; (800c308 <__sfp+0x88>)
 800c2b0:	60e3      	str	r3, [r4, #12]
 800c2b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c2b8:	f000 fbba 	bl	800ca30 <__retarget_lock_init_recursive>
 800c2bc:	f7ff ff96 	bl	800c1ec <__sfp_lock_release>
 800c2c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2c8:	6025      	str	r5, [r4, #0]
 800c2ca:	61a5      	str	r5, [r4, #24]
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2d4:	f7fd f8e8 	bl	80094a8 <memset>
 800c2d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e4:	3468      	adds	r4, #104	; 0x68
 800c2e6:	e7d9      	b.n	800c29c <__sfp+0x1c>
 800c2e8:	2104      	movs	r1, #4
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	f7ff ff62 	bl	800c1b4 <__sfmoreglue>
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	6030      	str	r0, [r6, #0]
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d1d5      	bne.n	800c2a4 <__sfp+0x24>
 800c2f8:	f7ff ff78 	bl	800c1ec <__sfp_lock_release>
 800c2fc:	230c      	movs	r3, #12
 800c2fe:	603b      	str	r3, [r7, #0]
 800c300:	e7ee      	b.n	800c2e0 <__sfp+0x60>
 800c302:	bf00      	nop
 800c304:	0800e354 	.word	0x0800e354
 800c308:	ffff0001 	.word	0xffff0001

0800c30c <_fwalk_reent>:
 800c30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c310:	4606      	mov	r6, r0
 800c312:	4688      	mov	r8, r1
 800c314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c318:	2700      	movs	r7, #0
 800c31a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c31e:	f1b9 0901 	subs.w	r9, r9, #1
 800c322:	d505      	bpl.n	800c330 <_fwalk_reent+0x24>
 800c324:	6824      	ldr	r4, [r4, #0]
 800c326:	2c00      	cmp	r4, #0
 800c328:	d1f7      	bne.n	800c31a <_fwalk_reent+0xe>
 800c32a:	4638      	mov	r0, r7
 800c32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	2b01      	cmp	r3, #1
 800c334:	d907      	bls.n	800c346 <_fwalk_reent+0x3a>
 800c336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c33a:	3301      	adds	r3, #1
 800c33c:	d003      	beq.n	800c346 <_fwalk_reent+0x3a>
 800c33e:	4629      	mov	r1, r5
 800c340:	4630      	mov	r0, r6
 800c342:	47c0      	blx	r8
 800c344:	4307      	orrs	r7, r0
 800c346:	3568      	adds	r5, #104	; 0x68
 800c348:	e7e9      	b.n	800c31e <_fwalk_reent+0x12>

0800c34a <rshift>:
 800c34a:	6903      	ldr	r3, [r0, #16]
 800c34c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c354:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c358:	f100 0414 	add.w	r4, r0, #20
 800c35c:	dd45      	ble.n	800c3ea <rshift+0xa0>
 800c35e:	f011 011f 	ands.w	r1, r1, #31
 800c362:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c366:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c36a:	d10c      	bne.n	800c386 <rshift+0x3c>
 800c36c:	f100 0710 	add.w	r7, r0, #16
 800c370:	4629      	mov	r1, r5
 800c372:	42b1      	cmp	r1, r6
 800c374:	d334      	bcc.n	800c3e0 <rshift+0x96>
 800c376:	1a9b      	subs	r3, r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	1eea      	subs	r2, r5, #3
 800c37c:	4296      	cmp	r6, r2
 800c37e:	bf38      	it	cc
 800c380:	2300      	movcc	r3, #0
 800c382:	4423      	add	r3, r4
 800c384:	e015      	b.n	800c3b2 <rshift+0x68>
 800c386:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c38a:	f1c1 0820 	rsb	r8, r1, #32
 800c38e:	40cf      	lsrs	r7, r1
 800c390:	f105 0e04 	add.w	lr, r5, #4
 800c394:	46a1      	mov	r9, r4
 800c396:	4576      	cmp	r6, lr
 800c398:	46f4      	mov	ip, lr
 800c39a:	d815      	bhi.n	800c3c8 <rshift+0x7e>
 800c39c:	1a9a      	subs	r2, r3, r2
 800c39e:	0092      	lsls	r2, r2, #2
 800c3a0:	3a04      	subs	r2, #4
 800c3a2:	3501      	adds	r5, #1
 800c3a4:	42ae      	cmp	r6, r5
 800c3a6:	bf38      	it	cc
 800c3a8:	2200      	movcc	r2, #0
 800c3aa:	18a3      	adds	r3, r4, r2
 800c3ac:	50a7      	str	r7, [r4, r2]
 800c3ae:	b107      	cbz	r7, 800c3b2 <rshift+0x68>
 800c3b0:	3304      	adds	r3, #4
 800c3b2:	1b1a      	subs	r2, r3, r4
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3ba:	bf08      	it	eq
 800c3bc:	2300      	moveq	r3, #0
 800c3be:	6102      	str	r2, [r0, #16]
 800c3c0:	bf08      	it	eq
 800c3c2:	6143      	streq	r3, [r0, #20]
 800c3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3c8:	f8dc c000 	ldr.w	ip, [ip]
 800c3cc:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3d0:	ea4c 0707 	orr.w	r7, ip, r7
 800c3d4:	f849 7b04 	str.w	r7, [r9], #4
 800c3d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3dc:	40cf      	lsrs	r7, r1
 800c3de:	e7da      	b.n	800c396 <rshift+0x4c>
 800c3e0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3e4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3e8:	e7c3      	b.n	800c372 <rshift+0x28>
 800c3ea:	4623      	mov	r3, r4
 800c3ec:	e7e1      	b.n	800c3b2 <rshift+0x68>

0800c3ee <__hexdig_fun>:
 800c3ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3f2:	2b09      	cmp	r3, #9
 800c3f4:	d802      	bhi.n	800c3fc <__hexdig_fun+0xe>
 800c3f6:	3820      	subs	r0, #32
 800c3f8:	b2c0      	uxtb	r0, r0
 800c3fa:	4770      	bx	lr
 800c3fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c400:	2b05      	cmp	r3, #5
 800c402:	d801      	bhi.n	800c408 <__hexdig_fun+0x1a>
 800c404:	3847      	subs	r0, #71	; 0x47
 800c406:	e7f7      	b.n	800c3f8 <__hexdig_fun+0xa>
 800c408:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c40c:	2b05      	cmp	r3, #5
 800c40e:	d801      	bhi.n	800c414 <__hexdig_fun+0x26>
 800c410:	3827      	subs	r0, #39	; 0x27
 800c412:	e7f1      	b.n	800c3f8 <__hexdig_fun+0xa>
 800c414:	2000      	movs	r0, #0
 800c416:	4770      	bx	lr

0800c418 <__gethex>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	ed2d 8b02 	vpush	{d8}
 800c420:	b089      	sub	sp, #36	; 0x24
 800c422:	ee08 0a10 	vmov	s16, r0
 800c426:	9304      	str	r3, [sp, #16]
 800c428:	4bb4      	ldr	r3, [pc, #720]	; (800c6fc <__gethex+0x2e4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	468b      	mov	fp, r1
 800c432:	4690      	mov	r8, r2
 800c434:	f7f3 fecc 	bl	80001d0 <strlen>
 800c438:	9b01      	ldr	r3, [sp, #4]
 800c43a:	f8db 2000 	ldr.w	r2, [fp]
 800c43e:	4403      	add	r3, r0
 800c440:	4682      	mov	sl, r0
 800c442:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c446:	9305      	str	r3, [sp, #20]
 800c448:	1c93      	adds	r3, r2, #2
 800c44a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c44e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c452:	32fe      	adds	r2, #254	; 0xfe
 800c454:	18d1      	adds	r1, r2, r3
 800c456:	461f      	mov	r7, r3
 800c458:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c45c:	9100      	str	r1, [sp, #0]
 800c45e:	2830      	cmp	r0, #48	; 0x30
 800c460:	d0f8      	beq.n	800c454 <__gethex+0x3c>
 800c462:	f7ff ffc4 	bl	800c3ee <__hexdig_fun>
 800c466:	4604      	mov	r4, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d13a      	bne.n	800c4e2 <__gethex+0xca>
 800c46c:	9901      	ldr	r1, [sp, #4]
 800c46e:	4652      	mov	r2, sl
 800c470:	4638      	mov	r0, r7
 800c472:	f7fd ff92 	bl	800a39a <strncmp>
 800c476:	4605      	mov	r5, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d168      	bne.n	800c54e <__gethex+0x136>
 800c47c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c480:	eb07 060a 	add.w	r6, r7, sl
 800c484:	f7ff ffb3 	bl	800c3ee <__hexdig_fun>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d062      	beq.n	800c552 <__gethex+0x13a>
 800c48c:	4633      	mov	r3, r6
 800c48e:	7818      	ldrb	r0, [r3, #0]
 800c490:	2830      	cmp	r0, #48	; 0x30
 800c492:	461f      	mov	r7, r3
 800c494:	f103 0301 	add.w	r3, r3, #1
 800c498:	d0f9      	beq.n	800c48e <__gethex+0x76>
 800c49a:	f7ff ffa8 	bl	800c3ee <__hexdig_fun>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	fab0 f480 	clz	r4, r0
 800c4a4:	0964      	lsrs	r4, r4, #5
 800c4a6:	4635      	mov	r5, r6
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	463a      	mov	r2, r7
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	3201      	adds	r2, #1
 800c4b0:	7830      	ldrb	r0, [r6, #0]
 800c4b2:	f7ff ff9c 	bl	800c3ee <__hexdig_fun>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d1f8      	bne.n	800c4ac <__gethex+0x94>
 800c4ba:	9901      	ldr	r1, [sp, #4]
 800c4bc:	4652      	mov	r2, sl
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7fd ff6b 	bl	800a39a <strncmp>
 800c4c4:	b980      	cbnz	r0, 800c4e8 <__gethex+0xd0>
 800c4c6:	b94d      	cbnz	r5, 800c4dc <__gethex+0xc4>
 800c4c8:	eb06 050a 	add.w	r5, r6, sl
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	4616      	mov	r6, r2
 800c4d0:	3201      	adds	r2, #1
 800c4d2:	7830      	ldrb	r0, [r6, #0]
 800c4d4:	f7ff ff8b 	bl	800c3ee <__hexdig_fun>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d1f8      	bne.n	800c4ce <__gethex+0xb6>
 800c4dc:	1bad      	subs	r5, r5, r6
 800c4de:	00ad      	lsls	r5, r5, #2
 800c4e0:	e004      	b.n	800c4ec <__gethex+0xd4>
 800c4e2:	2400      	movs	r4, #0
 800c4e4:	4625      	mov	r5, r4
 800c4e6:	e7e0      	b.n	800c4aa <__gethex+0x92>
 800c4e8:	2d00      	cmp	r5, #0
 800c4ea:	d1f7      	bne.n	800c4dc <__gethex+0xc4>
 800c4ec:	7833      	ldrb	r3, [r6, #0]
 800c4ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4f2:	2b50      	cmp	r3, #80	; 0x50
 800c4f4:	d13b      	bne.n	800c56e <__gethex+0x156>
 800c4f6:	7873      	ldrb	r3, [r6, #1]
 800c4f8:	2b2b      	cmp	r3, #43	; 0x2b
 800c4fa:	d02c      	beq.n	800c556 <__gethex+0x13e>
 800c4fc:	2b2d      	cmp	r3, #45	; 0x2d
 800c4fe:	d02e      	beq.n	800c55e <__gethex+0x146>
 800c500:	1c71      	adds	r1, r6, #1
 800c502:	f04f 0900 	mov.w	r9, #0
 800c506:	7808      	ldrb	r0, [r1, #0]
 800c508:	f7ff ff71 	bl	800c3ee <__hexdig_fun>
 800c50c:	1e43      	subs	r3, r0, #1
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b18      	cmp	r3, #24
 800c512:	d82c      	bhi.n	800c56e <__gethex+0x156>
 800c514:	f1a0 0210 	sub.w	r2, r0, #16
 800c518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c51c:	f7ff ff67 	bl	800c3ee <__hexdig_fun>
 800c520:	1e43      	subs	r3, r0, #1
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b18      	cmp	r3, #24
 800c526:	d91d      	bls.n	800c564 <__gethex+0x14c>
 800c528:	f1b9 0f00 	cmp.w	r9, #0
 800c52c:	d000      	beq.n	800c530 <__gethex+0x118>
 800c52e:	4252      	negs	r2, r2
 800c530:	4415      	add	r5, r2
 800c532:	f8cb 1000 	str.w	r1, [fp]
 800c536:	b1e4      	cbz	r4, 800c572 <__gethex+0x15a>
 800c538:	9b00      	ldr	r3, [sp, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	bf14      	ite	ne
 800c53e:	2700      	movne	r7, #0
 800c540:	2706      	moveq	r7, #6
 800c542:	4638      	mov	r0, r7
 800c544:	b009      	add	sp, #36	; 0x24
 800c546:	ecbd 8b02 	vpop	{d8}
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	463e      	mov	r6, r7
 800c550:	4625      	mov	r5, r4
 800c552:	2401      	movs	r4, #1
 800c554:	e7ca      	b.n	800c4ec <__gethex+0xd4>
 800c556:	f04f 0900 	mov.w	r9, #0
 800c55a:	1cb1      	adds	r1, r6, #2
 800c55c:	e7d3      	b.n	800c506 <__gethex+0xee>
 800c55e:	f04f 0901 	mov.w	r9, #1
 800c562:	e7fa      	b.n	800c55a <__gethex+0x142>
 800c564:	230a      	movs	r3, #10
 800c566:	fb03 0202 	mla	r2, r3, r2, r0
 800c56a:	3a10      	subs	r2, #16
 800c56c:	e7d4      	b.n	800c518 <__gethex+0x100>
 800c56e:	4631      	mov	r1, r6
 800c570:	e7df      	b.n	800c532 <__gethex+0x11a>
 800c572:	1bf3      	subs	r3, r6, r7
 800c574:	3b01      	subs	r3, #1
 800c576:	4621      	mov	r1, r4
 800c578:	2b07      	cmp	r3, #7
 800c57a:	dc0b      	bgt.n	800c594 <__gethex+0x17c>
 800c57c:	ee18 0a10 	vmov	r0, s16
 800c580:	f000 fafa 	bl	800cb78 <_Balloc>
 800c584:	4604      	mov	r4, r0
 800c586:	b940      	cbnz	r0, 800c59a <__gethex+0x182>
 800c588:	4b5d      	ldr	r3, [pc, #372]	; (800c700 <__gethex+0x2e8>)
 800c58a:	4602      	mov	r2, r0
 800c58c:	21de      	movs	r1, #222	; 0xde
 800c58e:	485d      	ldr	r0, [pc, #372]	; (800c704 <__gethex+0x2ec>)
 800c590:	f001 fb98 	bl	800dcc4 <__assert_func>
 800c594:	3101      	adds	r1, #1
 800c596:	105b      	asrs	r3, r3, #1
 800c598:	e7ee      	b.n	800c578 <__gethex+0x160>
 800c59a:	f100 0914 	add.w	r9, r0, #20
 800c59e:	f04f 0b00 	mov.w	fp, #0
 800c5a2:	f1ca 0301 	rsb	r3, sl, #1
 800c5a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5aa:	f8cd b000 	str.w	fp, [sp]
 800c5ae:	9306      	str	r3, [sp, #24]
 800c5b0:	42b7      	cmp	r7, r6
 800c5b2:	d340      	bcc.n	800c636 <__gethex+0x21e>
 800c5b4:	9802      	ldr	r0, [sp, #8]
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	f840 3b04 	str.w	r3, [r0], #4
 800c5bc:	eba0 0009 	sub.w	r0, r0, r9
 800c5c0:	1080      	asrs	r0, r0, #2
 800c5c2:	0146      	lsls	r6, r0, #5
 800c5c4:	6120      	str	r0, [r4, #16]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fbc8 	bl	800cd5c <__hi0bits>
 800c5cc:	1a30      	subs	r0, r6, r0
 800c5ce:	f8d8 6000 	ldr.w	r6, [r8]
 800c5d2:	42b0      	cmp	r0, r6
 800c5d4:	dd63      	ble.n	800c69e <__gethex+0x286>
 800c5d6:	1b87      	subs	r7, r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 ff6c 	bl	800d4b8 <__any_on>
 800c5e0:	4682      	mov	sl, r0
 800c5e2:	b1a8      	cbz	r0, 800c610 <__gethex+0x1f8>
 800c5e4:	1e7b      	subs	r3, r7, #1
 800c5e6:	1159      	asrs	r1, r3, #5
 800c5e8:	f003 021f 	and.w	r2, r3, #31
 800c5ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5f0:	f04f 0a01 	mov.w	sl, #1
 800c5f4:	fa0a f202 	lsl.w	r2, sl, r2
 800c5f8:	420a      	tst	r2, r1
 800c5fa:	d009      	beq.n	800c610 <__gethex+0x1f8>
 800c5fc:	4553      	cmp	r3, sl
 800c5fe:	dd05      	ble.n	800c60c <__gethex+0x1f4>
 800c600:	1eb9      	subs	r1, r7, #2
 800c602:	4620      	mov	r0, r4
 800c604:	f000 ff58 	bl	800d4b8 <__any_on>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d145      	bne.n	800c698 <__gethex+0x280>
 800c60c:	f04f 0a02 	mov.w	sl, #2
 800c610:	4639      	mov	r1, r7
 800c612:	4620      	mov	r0, r4
 800c614:	f7ff fe99 	bl	800c34a <rshift>
 800c618:	443d      	add	r5, r7
 800c61a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c61e:	42ab      	cmp	r3, r5
 800c620:	da4c      	bge.n	800c6bc <__gethex+0x2a4>
 800c622:	ee18 0a10 	vmov	r0, s16
 800c626:	4621      	mov	r1, r4
 800c628:	f000 fae6 	bl	800cbf8 <_Bfree>
 800c62c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c62e:	2300      	movs	r3, #0
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	27a3      	movs	r7, #163	; 0xa3
 800c634:	e785      	b.n	800c542 <__gethex+0x12a>
 800c636:	1e73      	subs	r3, r6, #1
 800c638:	9a05      	ldr	r2, [sp, #20]
 800c63a:	9303      	str	r3, [sp, #12]
 800c63c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c640:	4293      	cmp	r3, r2
 800c642:	d019      	beq.n	800c678 <__gethex+0x260>
 800c644:	f1bb 0f20 	cmp.w	fp, #32
 800c648:	d107      	bne.n	800c65a <__gethex+0x242>
 800c64a:	9b02      	ldr	r3, [sp, #8]
 800c64c:	9a00      	ldr	r2, [sp, #0]
 800c64e:	f843 2b04 	str.w	r2, [r3], #4
 800c652:	9302      	str	r3, [sp, #8]
 800c654:	2300      	movs	r3, #0
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	469b      	mov	fp, r3
 800c65a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c65e:	f7ff fec6 	bl	800c3ee <__hexdig_fun>
 800c662:	9b00      	ldr	r3, [sp, #0]
 800c664:	f000 000f 	and.w	r0, r0, #15
 800c668:	fa00 f00b 	lsl.w	r0, r0, fp
 800c66c:	4303      	orrs	r3, r0
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	f10b 0b04 	add.w	fp, fp, #4
 800c674:	9b03      	ldr	r3, [sp, #12]
 800c676:	e00d      	b.n	800c694 <__gethex+0x27c>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	9a06      	ldr	r2, [sp, #24]
 800c67c:	4413      	add	r3, r2
 800c67e:	42bb      	cmp	r3, r7
 800c680:	d3e0      	bcc.n	800c644 <__gethex+0x22c>
 800c682:	4618      	mov	r0, r3
 800c684:	9901      	ldr	r1, [sp, #4]
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	4652      	mov	r2, sl
 800c68a:	f7fd fe86 	bl	800a39a <strncmp>
 800c68e:	9b07      	ldr	r3, [sp, #28]
 800c690:	2800      	cmp	r0, #0
 800c692:	d1d7      	bne.n	800c644 <__gethex+0x22c>
 800c694:	461e      	mov	r6, r3
 800c696:	e78b      	b.n	800c5b0 <__gethex+0x198>
 800c698:	f04f 0a03 	mov.w	sl, #3
 800c69c:	e7b8      	b.n	800c610 <__gethex+0x1f8>
 800c69e:	da0a      	bge.n	800c6b6 <__gethex+0x29e>
 800c6a0:	1a37      	subs	r7, r6, r0
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	ee18 0a10 	vmov	r0, s16
 800c6a8:	463a      	mov	r2, r7
 800c6aa:	f000 fcc1 	bl	800d030 <__lshift>
 800c6ae:	1bed      	subs	r5, r5, r7
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	f100 0914 	add.w	r9, r0, #20
 800c6b6:	f04f 0a00 	mov.w	sl, #0
 800c6ba:	e7ae      	b.n	800c61a <__gethex+0x202>
 800c6bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c6c0:	42a8      	cmp	r0, r5
 800c6c2:	dd72      	ble.n	800c7aa <__gethex+0x392>
 800c6c4:	1b45      	subs	r5, r0, r5
 800c6c6:	42ae      	cmp	r6, r5
 800c6c8:	dc36      	bgt.n	800c738 <__gethex+0x320>
 800c6ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d02a      	beq.n	800c728 <__gethex+0x310>
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d02c      	beq.n	800c730 <__gethex+0x318>
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d11c      	bne.n	800c714 <__gethex+0x2fc>
 800c6da:	42ae      	cmp	r6, r5
 800c6dc:	d11a      	bne.n	800c714 <__gethex+0x2fc>
 800c6de:	2e01      	cmp	r6, #1
 800c6e0:	d112      	bne.n	800c708 <__gethex+0x2f0>
 800c6e2:	9a04      	ldr	r2, [sp, #16]
 800c6e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	6123      	str	r3, [r4, #16]
 800c6ee:	f8c9 3000 	str.w	r3, [r9]
 800c6f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6f4:	2762      	movs	r7, #98	; 0x62
 800c6f6:	601c      	str	r4, [r3, #0]
 800c6f8:	e723      	b.n	800c542 <__gethex+0x12a>
 800c6fa:	bf00      	nop
 800c6fc:	0800e644 	.word	0x0800e644
 800c700:	0800e568 	.word	0x0800e568
 800c704:	0800e5dc 	.word	0x0800e5dc
 800c708:	1e71      	subs	r1, r6, #1
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fed4 	bl	800d4b8 <__any_on>
 800c710:	2800      	cmp	r0, #0
 800c712:	d1e6      	bne.n	800c6e2 <__gethex+0x2ca>
 800c714:	ee18 0a10 	vmov	r0, s16
 800c718:	4621      	mov	r1, r4
 800c71a:	f000 fa6d 	bl	800cbf8 <_Bfree>
 800c71e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c720:	2300      	movs	r3, #0
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	2750      	movs	r7, #80	; 0x50
 800c726:	e70c      	b.n	800c542 <__gethex+0x12a>
 800c728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f2      	bne.n	800c714 <__gethex+0x2fc>
 800c72e:	e7d8      	b.n	800c6e2 <__gethex+0x2ca>
 800c730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d5      	bne.n	800c6e2 <__gethex+0x2ca>
 800c736:	e7ed      	b.n	800c714 <__gethex+0x2fc>
 800c738:	1e6f      	subs	r7, r5, #1
 800c73a:	f1ba 0f00 	cmp.w	sl, #0
 800c73e:	d131      	bne.n	800c7a4 <__gethex+0x38c>
 800c740:	b127      	cbz	r7, 800c74c <__gethex+0x334>
 800c742:	4639      	mov	r1, r7
 800c744:	4620      	mov	r0, r4
 800c746:	f000 feb7 	bl	800d4b8 <__any_on>
 800c74a:	4682      	mov	sl, r0
 800c74c:	117b      	asrs	r3, r7, #5
 800c74e:	2101      	movs	r1, #1
 800c750:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c754:	f007 071f 	and.w	r7, r7, #31
 800c758:	fa01 f707 	lsl.w	r7, r1, r7
 800c75c:	421f      	tst	r7, r3
 800c75e:	4629      	mov	r1, r5
 800c760:	4620      	mov	r0, r4
 800c762:	bf18      	it	ne
 800c764:	f04a 0a02 	orrne.w	sl, sl, #2
 800c768:	1b76      	subs	r6, r6, r5
 800c76a:	f7ff fdee 	bl	800c34a <rshift>
 800c76e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c772:	2702      	movs	r7, #2
 800c774:	f1ba 0f00 	cmp.w	sl, #0
 800c778:	d048      	beq.n	800c80c <__gethex+0x3f4>
 800c77a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d015      	beq.n	800c7ae <__gethex+0x396>
 800c782:	2b03      	cmp	r3, #3
 800c784:	d017      	beq.n	800c7b6 <__gethex+0x39e>
 800c786:	2b01      	cmp	r3, #1
 800c788:	d109      	bne.n	800c79e <__gethex+0x386>
 800c78a:	f01a 0f02 	tst.w	sl, #2
 800c78e:	d006      	beq.n	800c79e <__gethex+0x386>
 800c790:	f8d9 0000 	ldr.w	r0, [r9]
 800c794:	ea4a 0a00 	orr.w	sl, sl, r0
 800c798:	f01a 0f01 	tst.w	sl, #1
 800c79c:	d10e      	bne.n	800c7bc <__gethex+0x3a4>
 800c79e:	f047 0710 	orr.w	r7, r7, #16
 800c7a2:	e033      	b.n	800c80c <__gethex+0x3f4>
 800c7a4:	f04f 0a01 	mov.w	sl, #1
 800c7a8:	e7d0      	b.n	800c74c <__gethex+0x334>
 800c7aa:	2701      	movs	r7, #1
 800c7ac:	e7e2      	b.n	800c774 <__gethex+0x35c>
 800c7ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7b0:	f1c3 0301 	rsb	r3, r3, #1
 800c7b4:	9315      	str	r3, [sp, #84]	; 0x54
 800c7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0f0      	beq.n	800c79e <__gethex+0x386>
 800c7bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7c0:	f104 0314 	add.w	r3, r4, #20
 800c7c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c7c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c7cc:	f04f 0c00 	mov.w	ip, #0
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7da:	d01c      	beq.n	800c816 <__gethex+0x3fe>
 800c7dc:	3201      	adds	r2, #1
 800c7de:	6002      	str	r2, [r0, #0]
 800c7e0:	2f02      	cmp	r7, #2
 800c7e2:	f104 0314 	add.w	r3, r4, #20
 800c7e6:	d13f      	bne.n	800c868 <__gethex+0x450>
 800c7e8:	f8d8 2000 	ldr.w	r2, [r8]
 800c7ec:	3a01      	subs	r2, #1
 800c7ee:	42b2      	cmp	r2, r6
 800c7f0:	d10a      	bne.n	800c808 <__gethex+0x3f0>
 800c7f2:	1171      	asrs	r1, r6, #5
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7fa:	f006 061f 	and.w	r6, r6, #31
 800c7fe:	fa02 f606 	lsl.w	r6, r2, r6
 800c802:	421e      	tst	r6, r3
 800c804:	bf18      	it	ne
 800c806:	4617      	movne	r7, r2
 800c808:	f047 0720 	orr.w	r7, r7, #32
 800c80c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c80e:	601c      	str	r4, [r3, #0]
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	601d      	str	r5, [r3, #0]
 800c814:	e695      	b.n	800c542 <__gethex+0x12a>
 800c816:	4299      	cmp	r1, r3
 800c818:	f843 cc04 	str.w	ip, [r3, #-4]
 800c81c:	d8d8      	bhi.n	800c7d0 <__gethex+0x3b8>
 800c81e:	68a3      	ldr	r3, [r4, #8]
 800c820:	459b      	cmp	fp, r3
 800c822:	db19      	blt.n	800c858 <__gethex+0x440>
 800c824:	6861      	ldr	r1, [r4, #4]
 800c826:	ee18 0a10 	vmov	r0, s16
 800c82a:	3101      	adds	r1, #1
 800c82c:	f000 f9a4 	bl	800cb78 <_Balloc>
 800c830:	4681      	mov	r9, r0
 800c832:	b918      	cbnz	r0, 800c83c <__gethex+0x424>
 800c834:	4b1a      	ldr	r3, [pc, #104]	; (800c8a0 <__gethex+0x488>)
 800c836:	4602      	mov	r2, r0
 800c838:	2184      	movs	r1, #132	; 0x84
 800c83a:	e6a8      	b.n	800c58e <__gethex+0x176>
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	3202      	adds	r2, #2
 800c840:	f104 010c 	add.w	r1, r4, #12
 800c844:	0092      	lsls	r2, r2, #2
 800c846:	300c      	adds	r0, #12
 800c848:	f000 f988 	bl	800cb5c <memcpy>
 800c84c:	4621      	mov	r1, r4
 800c84e:	ee18 0a10 	vmov	r0, s16
 800c852:	f000 f9d1 	bl	800cbf8 <_Bfree>
 800c856:	464c      	mov	r4, r9
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c860:	6122      	str	r2, [r4, #16]
 800c862:	2201      	movs	r2, #1
 800c864:	615a      	str	r2, [r3, #20]
 800c866:	e7bb      	b.n	800c7e0 <__gethex+0x3c8>
 800c868:	6922      	ldr	r2, [r4, #16]
 800c86a:	455a      	cmp	r2, fp
 800c86c:	dd0b      	ble.n	800c886 <__gethex+0x46e>
 800c86e:	2101      	movs	r1, #1
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff fd6a 	bl	800c34a <rshift>
 800c876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c87a:	3501      	adds	r5, #1
 800c87c:	42ab      	cmp	r3, r5
 800c87e:	f6ff aed0 	blt.w	800c622 <__gethex+0x20a>
 800c882:	2701      	movs	r7, #1
 800c884:	e7c0      	b.n	800c808 <__gethex+0x3f0>
 800c886:	f016 061f 	ands.w	r6, r6, #31
 800c88a:	d0fa      	beq.n	800c882 <__gethex+0x46a>
 800c88c:	4453      	add	r3, sl
 800c88e:	f1c6 0620 	rsb	r6, r6, #32
 800c892:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c896:	f000 fa61 	bl	800cd5c <__hi0bits>
 800c89a:	42b0      	cmp	r0, r6
 800c89c:	dbe7      	blt.n	800c86e <__gethex+0x456>
 800c89e:	e7f0      	b.n	800c882 <__gethex+0x46a>
 800c8a0:	0800e568 	.word	0x0800e568

0800c8a4 <L_shift>:
 800c8a4:	f1c2 0208 	rsb	r2, r2, #8
 800c8a8:	0092      	lsls	r2, r2, #2
 800c8aa:	b570      	push	{r4, r5, r6, lr}
 800c8ac:	f1c2 0620 	rsb	r6, r2, #32
 800c8b0:	6843      	ldr	r3, [r0, #4]
 800c8b2:	6804      	ldr	r4, [r0, #0]
 800c8b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c8b8:	432c      	orrs	r4, r5
 800c8ba:	40d3      	lsrs	r3, r2
 800c8bc:	6004      	str	r4, [r0, #0]
 800c8be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8c2:	4288      	cmp	r0, r1
 800c8c4:	d3f4      	bcc.n	800c8b0 <L_shift+0xc>
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}

0800c8c8 <__match>:
 800c8c8:	b530      	push	{r4, r5, lr}
 800c8ca:	6803      	ldr	r3, [r0, #0]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8d2:	b914      	cbnz	r4, 800c8da <__match+0x12>
 800c8d4:	6003      	str	r3, [r0, #0]
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	bd30      	pop	{r4, r5, pc}
 800c8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8e2:	2d19      	cmp	r5, #25
 800c8e4:	bf98      	it	ls
 800c8e6:	3220      	addls	r2, #32
 800c8e8:	42a2      	cmp	r2, r4
 800c8ea:	d0f0      	beq.n	800c8ce <__match+0x6>
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	e7f3      	b.n	800c8d8 <__match+0x10>

0800c8f0 <__hexnan>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	680b      	ldr	r3, [r1, #0]
 800c8f6:	115e      	asrs	r6, r3, #5
 800c8f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8fc:	f013 031f 	ands.w	r3, r3, #31
 800c900:	b087      	sub	sp, #28
 800c902:	bf18      	it	ne
 800c904:	3604      	addne	r6, #4
 800c906:	2500      	movs	r5, #0
 800c908:	1f37      	subs	r7, r6, #4
 800c90a:	4690      	mov	r8, r2
 800c90c:	6802      	ldr	r2, [r0, #0]
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	4682      	mov	sl, r0
 800c912:	f846 5c04 	str.w	r5, [r6, #-4]
 800c916:	46b9      	mov	r9, r7
 800c918:	463c      	mov	r4, r7
 800c91a:	9502      	str	r5, [sp, #8]
 800c91c:	46ab      	mov	fp, r5
 800c91e:	7851      	ldrb	r1, [r2, #1]
 800c920:	1c53      	adds	r3, r2, #1
 800c922:	9303      	str	r3, [sp, #12]
 800c924:	b341      	cbz	r1, 800c978 <__hexnan+0x88>
 800c926:	4608      	mov	r0, r1
 800c928:	9205      	str	r2, [sp, #20]
 800c92a:	9104      	str	r1, [sp, #16]
 800c92c:	f7ff fd5f 	bl	800c3ee <__hexdig_fun>
 800c930:	2800      	cmp	r0, #0
 800c932:	d14f      	bne.n	800c9d4 <__hexnan+0xe4>
 800c934:	9904      	ldr	r1, [sp, #16]
 800c936:	9a05      	ldr	r2, [sp, #20]
 800c938:	2920      	cmp	r1, #32
 800c93a:	d818      	bhi.n	800c96e <__hexnan+0x7e>
 800c93c:	9b02      	ldr	r3, [sp, #8]
 800c93e:	459b      	cmp	fp, r3
 800c940:	dd13      	ble.n	800c96a <__hexnan+0x7a>
 800c942:	454c      	cmp	r4, r9
 800c944:	d206      	bcs.n	800c954 <__hexnan+0x64>
 800c946:	2d07      	cmp	r5, #7
 800c948:	dc04      	bgt.n	800c954 <__hexnan+0x64>
 800c94a:	462a      	mov	r2, r5
 800c94c:	4649      	mov	r1, r9
 800c94e:	4620      	mov	r0, r4
 800c950:	f7ff ffa8 	bl	800c8a4 <L_shift>
 800c954:	4544      	cmp	r4, r8
 800c956:	d950      	bls.n	800c9fa <__hexnan+0x10a>
 800c958:	2300      	movs	r3, #0
 800c95a:	f1a4 0904 	sub.w	r9, r4, #4
 800c95e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c962:	f8cd b008 	str.w	fp, [sp, #8]
 800c966:	464c      	mov	r4, r9
 800c968:	461d      	mov	r5, r3
 800c96a:	9a03      	ldr	r2, [sp, #12]
 800c96c:	e7d7      	b.n	800c91e <__hexnan+0x2e>
 800c96e:	2929      	cmp	r1, #41	; 0x29
 800c970:	d156      	bne.n	800ca20 <__hexnan+0x130>
 800c972:	3202      	adds	r2, #2
 800c974:	f8ca 2000 	str.w	r2, [sl]
 800c978:	f1bb 0f00 	cmp.w	fp, #0
 800c97c:	d050      	beq.n	800ca20 <__hexnan+0x130>
 800c97e:	454c      	cmp	r4, r9
 800c980:	d206      	bcs.n	800c990 <__hexnan+0xa0>
 800c982:	2d07      	cmp	r5, #7
 800c984:	dc04      	bgt.n	800c990 <__hexnan+0xa0>
 800c986:	462a      	mov	r2, r5
 800c988:	4649      	mov	r1, r9
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7ff ff8a 	bl	800c8a4 <L_shift>
 800c990:	4544      	cmp	r4, r8
 800c992:	d934      	bls.n	800c9fe <__hexnan+0x10e>
 800c994:	f1a8 0204 	sub.w	r2, r8, #4
 800c998:	4623      	mov	r3, r4
 800c99a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c99e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9a2:	429f      	cmp	r7, r3
 800c9a4:	d2f9      	bcs.n	800c99a <__hexnan+0xaa>
 800c9a6:	1b3b      	subs	r3, r7, r4
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	3401      	adds	r4, #1
 800c9b0:	3e03      	subs	r6, #3
 800c9b2:	42b4      	cmp	r4, r6
 800c9b4:	bf88      	it	hi
 800c9b6:	2304      	movhi	r3, #4
 800c9b8:	4443      	add	r3, r8
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f843 2b04 	str.w	r2, [r3], #4
 800c9c0:	429f      	cmp	r7, r3
 800c9c2:	d2fb      	bcs.n	800c9bc <__hexnan+0xcc>
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	b91b      	cbnz	r3, 800c9d0 <__hexnan+0xe0>
 800c9c8:	4547      	cmp	r7, r8
 800c9ca:	d127      	bne.n	800ca1c <__hexnan+0x12c>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	603b      	str	r3, [r7, #0]
 800c9d0:	2005      	movs	r0, #5
 800c9d2:	e026      	b.n	800ca22 <__hexnan+0x132>
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	2d08      	cmp	r5, #8
 800c9d8:	f10b 0b01 	add.w	fp, fp, #1
 800c9dc:	dd06      	ble.n	800c9ec <__hexnan+0xfc>
 800c9de:	4544      	cmp	r4, r8
 800c9e0:	d9c3      	bls.n	800c96a <__hexnan+0x7a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9e8:	2501      	movs	r5, #1
 800c9ea:	3c04      	subs	r4, #4
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	f000 000f 	and.w	r0, r0, #15
 800c9f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c9f6:	6022      	str	r2, [r4, #0]
 800c9f8:	e7b7      	b.n	800c96a <__hexnan+0x7a>
 800c9fa:	2508      	movs	r5, #8
 800c9fc:	e7b5      	b.n	800c96a <__hexnan+0x7a>
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d0df      	beq.n	800c9c4 <__hexnan+0xd4>
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295
 800ca08:	f1c3 0320 	rsb	r3, r3, #32
 800ca0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca14:	401a      	ands	r2, r3
 800ca16:	f846 2c04 	str.w	r2, [r6, #-4]
 800ca1a:	e7d3      	b.n	800c9c4 <__hexnan+0xd4>
 800ca1c:	3f04      	subs	r7, #4
 800ca1e:	e7d1      	b.n	800c9c4 <__hexnan+0xd4>
 800ca20:	2004      	movs	r0, #4
 800ca22:	b007      	add	sp, #28
 800ca24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca28 <_localeconv_r>:
 800ca28:	4800      	ldr	r0, [pc, #0]	; (800ca2c <_localeconv_r+0x4>)
 800ca2a:	4770      	bx	lr
 800ca2c:	20000170 	.word	0x20000170

0800ca30 <__retarget_lock_init_recursive>:
 800ca30:	4770      	bx	lr

0800ca32 <__retarget_lock_acquire_recursive>:
 800ca32:	4770      	bx	lr

0800ca34 <__retarget_lock_release_recursive>:
 800ca34:	4770      	bx	lr
	...

0800ca38 <_lseek_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4d07      	ldr	r5, [pc, #28]	; (800ca58 <_lseek_r+0x20>)
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	4608      	mov	r0, r1
 800ca40:	4611      	mov	r1, r2
 800ca42:	2200      	movs	r2, #0
 800ca44:	602a      	str	r2, [r5, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	f7f6 f878 	bl	8002b3c <_lseek>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	d102      	bne.n	800ca56 <_lseek_r+0x1e>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	b103      	cbz	r3, 800ca56 <_lseek_r+0x1e>
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	bd38      	pop	{r3, r4, r5, pc}
 800ca58:	20000898 	.word	0x20000898

0800ca5c <__swhatbuf_r>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	460e      	mov	r6, r1
 800ca60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca64:	2900      	cmp	r1, #0
 800ca66:	b096      	sub	sp, #88	; 0x58
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	da08      	bge.n	800ca80 <__swhatbuf_r+0x24>
 800ca6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	061a      	lsls	r2, r3, #24
 800ca78:	d410      	bmi.n	800ca9c <__swhatbuf_r+0x40>
 800ca7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca7e:	e00e      	b.n	800ca9e <__swhatbuf_r+0x42>
 800ca80:	466a      	mov	r2, sp
 800ca82:	f001 f94f 	bl	800dd24 <_fstat_r>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	dbf1      	blt.n	800ca6e <__swhatbuf_r+0x12>
 800ca8a:	9a01      	ldr	r2, [sp, #4]
 800ca8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca94:	425a      	negs	r2, r3
 800ca96:	415a      	adcs	r2, r3
 800ca98:	602a      	str	r2, [r5, #0]
 800ca9a:	e7ee      	b.n	800ca7a <__swhatbuf_r+0x1e>
 800ca9c:	2340      	movs	r3, #64	; 0x40
 800ca9e:	2000      	movs	r0, #0
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	b016      	add	sp, #88	; 0x58
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800caa8 <__smakebuf_r>:
 800caa8:	898b      	ldrh	r3, [r1, #12]
 800caaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caac:	079d      	lsls	r5, r3, #30
 800caae:	4606      	mov	r6, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	d507      	bpl.n	800cac4 <__smakebuf_r+0x1c>
 800cab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	2301      	movs	r3, #1
 800cabe:	6163      	str	r3, [r4, #20]
 800cac0:	b002      	add	sp, #8
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	ab01      	add	r3, sp, #4
 800cac6:	466a      	mov	r2, sp
 800cac8:	f7ff ffc8 	bl	800ca5c <__swhatbuf_r>
 800cacc:	9900      	ldr	r1, [sp, #0]
 800cace:	4605      	mov	r5, r0
 800cad0:	4630      	mov	r0, r6
 800cad2:	f000 fd95 	bl	800d600 <_malloc_r>
 800cad6:	b948      	cbnz	r0, 800caec <__smakebuf_r+0x44>
 800cad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d4ef      	bmi.n	800cac0 <__smakebuf_r+0x18>
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	e7e3      	b.n	800cab4 <__smakebuf_r+0xc>
 800caec:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <__smakebuf_r+0x7c>)
 800caee:	62b3      	str	r3, [r6, #40]	; 0x28
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	6020      	str	r0, [r4, #0]
 800caf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	9b00      	ldr	r3, [sp, #0]
 800cafc:	6163      	str	r3, [r4, #20]
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	6120      	str	r0, [r4, #16]
 800cb02:	b15b      	cbz	r3, 800cb1c <__smakebuf_r+0x74>
 800cb04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f001 f91d 	bl	800dd48 <_isatty_r>
 800cb0e:	b128      	cbz	r0, 800cb1c <__smakebuf_r+0x74>
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	f043 0301 	orr.w	r3, r3, #1
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	89a0      	ldrh	r0, [r4, #12]
 800cb1e:	4305      	orrs	r5, r0
 800cb20:	81a5      	strh	r5, [r4, #12]
 800cb22:	e7cd      	b.n	800cac0 <__smakebuf_r+0x18>
 800cb24:	0800c1a9 	.word	0x0800c1a9

0800cb28 <malloc>:
 800cb28:	4b02      	ldr	r3, [pc, #8]	; (800cb34 <malloc+0xc>)
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	6818      	ldr	r0, [r3, #0]
 800cb2e:	f000 bd67 	b.w	800d600 <_malloc_r>
 800cb32:	bf00      	nop
 800cb34:	20000018 	.word	0x20000018

0800cb38 <__ascii_mbtowc>:
 800cb38:	b082      	sub	sp, #8
 800cb3a:	b901      	cbnz	r1, 800cb3e <__ascii_mbtowc+0x6>
 800cb3c:	a901      	add	r1, sp, #4
 800cb3e:	b142      	cbz	r2, 800cb52 <__ascii_mbtowc+0x1a>
 800cb40:	b14b      	cbz	r3, 800cb56 <__ascii_mbtowc+0x1e>
 800cb42:	7813      	ldrb	r3, [r2, #0]
 800cb44:	600b      	str	r3, [r1, #0]
 800cb46:	7812      	ldrb	r2, [r2, #0]
 800cb48:	1e10      	subs	r0, r2, #0
 800cb4a:	bf18      	it	ne
 800cb4c:	2001      	movne	r0, #1
 800cb4e:	b002      	add	sp, #8
 800cb50:	4770      	bx	lr
 800cb52:	4610      	mov	r0, r2
 800cb54:	e7fb      	b.n	800cb4e <__ascii_mbtowc+0x16>
 800cb56:	f06f 0001 	mvn.w	r0, #1
 800cb5a:	e7f8      	b.n	800cb4e <__ascii_mbtowc+0x16>

0800cb5c <memcpy>:
 800cb5c:	440a      	add	r2, r1
 800cb5e:	4291      	cmp	r1, r2
 800cb60:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb64:	d100      	bne.n	800cb68 <memcpy+0xc>
 800cb66:	4770      	bx	lr
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb72:	4291      	cmp	r1, r2
 800cb74:	d1f9      	bne.n	800cb6a <memcpy+0xe>
 800cb76:	bd10      	pop	{r4, pc}

0800cb78 <_Balloc>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	b976      	cbnz	r6, 800cba0 <_Balloc+0x28>
 800cb82:	2010      	movs	r0, #16
 800cb84:	f7ff ffd0 	bl	800cb28 <malloc>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb8c:	b920      	cbnz	r0, 800cb98 <_Balloc+0x20>
 800cb8e:	4b18      	ldr	r3, [pc, #96]	; (800cbf0 <_Balloc+0x78>)
 800cb90:	4818      	ldr	r0, [pc, #96]	; (800cbf4 <_Balloc+0x7c>)
 800cb92:	2166      	movs	r1, #102	; 0x66
 800cb94:	f001 f896 	bl	800dcc4 <__assert_func>
 800cb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb9c:	6006      	str	r6, [r0, #0]
 800cb9e:	60c6      	str	r6, [r0, #12]
 800cba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cba2:	68f3      	ldr	r3, [r6, #12]
 800cba4:	b183      	cbz	r3, 800cbc8 <_Balloc+0x50>
 800cba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbae:	b9b8      	cbnz	r0, 800cbe0 <_Balloc+0x68>
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbb6:	1d72      	adds	r2, r6, #5
 800cbb8:	0092      	lsls	r2, r2, #2
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f000 fc9d 	bl	800d4fa <_calloc_r>
 800cbc0:	b160      	cbz	r0, 800cbdc <_Balloc+0x64>
 800cbc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbc6:	e00e      	b.n	800cbe6 <_Balloc+0x6e>
 800cbc8:	2221      	movs	r2, #33	; 0x21
 800cbca:	2104      	movs	r1, #4
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fc94 	bl	800d4fa <_calloc_r>
 800cbd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbd4:	60f0      	str	r0, [r6, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e4      	bne.n	800cba6 <_Balloc+0x2e>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	6802      	ldr	r2, [r0, #0]
 800cbe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbec:	e7f7      	b.n	800cbde <_Balloc+0x66>
 800cbee:	bf00      	nop
 800cbf0:	0800e4f6 	.word	0x0800e4f6
 800cbf4:	0800e658 	.word	0x0800e658

0800cbf8 <_Bfree>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	b976      	cbnz	r6, 800cc20 <_Bfree+0x28>
 800cc02:	2010      	movs	r0, #16
 800cc04:	f7ff ff90 	bl	800cb28 <malloc>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6268      	str	r0, [r5, #36]	; 0x24
 800cc0c:	b920      	cbnz	r0, 800cc18 <_Bfree+0x20>
 800cc0e:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <_Bfree+0x3c>)
 800cc10:	4809      	ldr	r0, [pc, #36]	; (800cc38 <_Bfree+0x40>)
 800cc12:	218a      	movs	r1, #138	; 0x8a
 800cc14:	f001 f856 	bl	800dcc4 <__assert_func>
 800cc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc1c:	6006      	str	r6, [r0, #0]
 800cc1e:	60c6      	str	r6, [r0, #12]
 800cc20:	b13c      	cbz	r4, 800cc32 <_Bfree+0x3a>
 800cc22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc24:	6862      	ldr	r2, [r4, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc2c:	6021      	str	r1, [r4, #0]
 800cc2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	0800e4f6 	.word	0x0800e4f6
 800cc38:	0800e658 	.word	0x0800e658

0800cc3c <__multadd>:
 800cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc40:	690d      	ldr	r5, [r1, #16]
 800cc42:	4607      	mov	r7, r0
 800cc44:	460c      	mov	r4, r1
 800cc46:	461e      	mov	r6, r3
 800cc48:	f101 0c14 	add.w	ip, r1, #20
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc52:	b299      	uxth	r1, r3
 800cc54:	fb02 6101 	mla	r1, r2, r1, r6
 800cc58:	0c1e      	lsrs	r6, r3, #16
 800cc5a:	0c0b      	lsrs	r3, r1, #16
 800cc5c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc60:	b289      	uxth	r1, r1
 800cc62:	3001      	adds	r0, #1
 800cc64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc68:	4285      	cmp	r5, r0
 800cc6a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc72:	dcec      	bgt.n	800cc4e <__multadd+0x12>
 800cc74:	b30e      	cbz	r6, 800ccba <__multadd+0x7e>
 800cc76:	68a3      	ldr	r3, [r4, #8]
 800cc78:	42ab      	cmp	r3, r5
 800cc7a:	dc19      	bgt.n	800ccb0 <__multadd+0x74>
 800cc7c:	6861      	ldr	r1, [r4, #4]
 800cc7e:	4638      	mov	r0, r7
 800cc80:	3101      	adds	r1, #1
 800cc82:	f7ff ff79 	bl	800cb78 <_Balloc>
 800cc86:	4680      	mov	r8, r0
 800cc88:	b928      	cbnz	r0, 800cc96 <__multadd+0x5a>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	4b0c      	ldr	r3, [pc, #48]	; (800ccc0 <__multadd+0x84>)
 800cc8e:	480d      	ldr	r0, [pc, #52]	; (800ccc4 <__multadd+0x88>)
 800cc90:	21b5      	movs	r1, #181	; 0xb5
 800cc92:	f001 f817 	bl	800dcc4 <__assert_func>
 800cc96:	6922      	ldr	r2, [r4, #16]
 800cc98:	3202      	adds	r2, #2
 800cc9a:	f104 010c 	add.w	r1, r4, #12
 800cc9e:	0092      	lsls	r2, r2, #2
 800cca0:	300c      	adds	r0, #12
 800cca2:	f7ff ff5b 	bl	800cb5c <memcpy>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff ffa5 	bl	800cbf8 <_Bfree>
 800ccae:	4644      	mov	r4, r8
 800ccb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	615e      	str	r6, [r3, #20]
 800ccb8:	6125      	str	r5, [r4, #16]
 800ccba:	4620      	mov	r0, r4
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	0800e568 	.word	0x0800e568
 800ccc4:	0800e658 	.word	0x0800e658

0800ccc8 <__s2b>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	4615      	mov	r5, r2
 800ccd0:	461f      	mov	r7, r3
 800ccd2:	2209      	movs	r2, #9
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccdc:	2100      	movs	r1, #0
 800ccde:	2201      	movs	r2, #1
 800cce0:	429a      	cmp	r2, r3
 800cce2:	db09      	blt.n	800ccf8 <__s2b+0x30>
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7ff ff47 	bl	800cb78 <_Balloc>
 800ccea:	b940      	cbnz	r0, 800ccfe <__s2b+0x36>
 800ccec:	4602      	mov	r2, r0
 800ccee:	4b19      	ldr	r3, [pc, #100]	; (800cd54 <__s2b+0x8c>)
 800ccf0:	4819      	ldr	r0, [pc, #100]	; (800cd58 <__s2b+0x90>)
 800ccf2:	21ce      	movs	r1, #206	; 0xce
 800ccf4:	f000 ffe6 	bl	800dcc4 <__assert_func>
 800ccf8:	0052      	lsls	r2, r2, #1
 800ccfa:	3101      	adds	r1, #1
 800ccfc:	e7f0      	b.n	800cce0 <__s2b+0x18>
 800ccfe:	9b08      	ldr	r3, [sp, #32]
 800cd00:	6143      	str	r3, [r0, #20]
 800cd02:	2d09      	cmp	r5, #9
 800cd04:	f04f 0301 	mov.w	r3, #1
 800cd08:	6103      	str	r3, [r0, #16]
 800cd0a:	dd16      	ble.n	800cd3a <__s2b+0x72>
 800cd0c:	f104 0909 	add.w	r9, r4, #9
 800cd10:	46c8      	mov	r8, r9
 800cd12:	442c      	add	r4, r5
 800cd14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd18:	4601      	mov	r1, r0
 800cd1a:	3b30      	subs	r3, #48	; 0x30
 800cd1c:	220a      	movs	r2, #10
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7ff ff8c 	bl	800cc3c <__multadd>
 800cd24:	45a0      	cmp	r8, r4
 800cd26:	d1f5      	bne.n	800cd14 <__s2b+0x4c>
 800cd28:	f1a5 0408 	sub.w	r4, r5, #8
 800cd2c:	444c      	add	r4, r9
 800cd2e:	1b2d      	subs	r5, r5, r4
 800cd30:	1963      	adds	r3, r4, r5
 800cd32:	42bb      	cmp	r3, r7
 800cd34:	db04      	blt.n	800cd40 <__s2b+0x78>
 800cd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3a:	340a      	adds	r4, #10
 800cd3c:	2509      	movs	r5, #9
 800cd3e:	e7f6      	b.n	800cd2e <__s2b+0x66>
 800cd40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd44:	4601      	mov	r1, r0
 800cd46:	3b30      	subs	r3, #48	; 0x30
 800cd48:	220a      	movs	r2, #10
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ff76 	bl	800cc3c <__multadd>
 800cd50:	e7ee      	b.n	800cd30 <__s2b+0x68>
 800cd52:	bf00      	nop
 800cd54:	0800e568 	.word	0x0800e568
 800cd58:	0800e658 	.word	0x0800e658

0800cd5c <__hi0bits>:
 800cd5c:	0c03      	lsrs	r3, r0, #16
 800cd5e:	041b      	lsls	r3, r3, #16
 800cd60:	b9d3      	cbnz	r3, 800cd98 <__hi0bits+0x3c>
 800cd62:	0400      	lsls	r0, r0, #16
 800cd64:	2310      	movs	r3, #16
 800cd66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd6a:	bf04      	itt	eq
 800cd6c:	0200      	lsleq	r0, r0, #8
 800cd6e:	3308      	addeq	r3, #8
 800cd70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd74:	bf04      	itt	eq
 800cd76:	0100      	lsleq	r0, r0, #4
 800cd78:	3304      	addeq	r3, #4
 800cd7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd7e:	bf04      	itt	eq
 800cd80:	0080      	lsleq	r0, r0, #2
 800cd82:	3302      	addeq	r3, #2
 800cd84:	2800      	cmp	r0, #0
 800cd86:	db05      	blt.n	800cd94 <__hi0bits+0x38>
 800cd88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd8c:	f103 0301 	add.w	r3, r3, #1
 800cd90:	bf08      	it	eq
 800cd92:	2320      	moveq	r3, #32
 800cd94:	4618      	mov	r0, r3
 800cd96:	4770      	bx	lr
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e7e4      	b.n	800cd66 <__hi0bits+0xa>

0800cd9c <__lo0bits>:
 800cd9c:	6803      	ldr	r3, [r0, #0]
 800cd9e:	f013 0207 	ands.w	r2, r3, #7
 800cda2:	4601      	mov	r1, r0
 800cda4:	d00b      	beq.n	800cdbe <__lo0bits+0x22>
 800cda6:	07da      	lsls	r2, r3, #31
 800cda8:	d423      	bmi.n	800cdf2 <__lo0bits+0x56>
 800cdaa:	0798      	lsls	r0, r3, #30
 800cdac:	bf49      	itett	mi
 800cdae:	085b      	lsrmi	r3, r3, #1
 800cdb0:	089b      	lsrpl	r3, r3, #2
 800cdb2:	2001      	movmi	r0, #1
 800cdb4:	600b      	strmi	r3, [r1, #0]
 800cdb6:	bf5c      	itt	pl
 800cdb8:	600b      	strpl	r3, [r1, #0]
 800cdba:	2002      	movpl	r0, #2
 800cdbc:	4770      	bx	lr
 800cdbe:	b298      	uxth	r0, r3
 800cdc0:	b9a8      	cbnz	r0, 800cdee <__lo0bits+0x52>
 800cdc2:	0c1b      	lsrs	r3, r3, #16
 800cdc4:	2010      	movs	r0, #16
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	b90a      	cbnz	r2, 800cdce <__lo0bits+0x32>
 800cdca:	3008      	adds	r0, #8
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	071a      	lsls	r2, r3, #28
 800cdd0:	bf04      	itt	eq
 800cdd2:	091b      	lsreq	r3, r3, #4
 800cdd4:	3004      	addeq	r0, #4
 800cdd6:	079a      	lsls	r2, r3, #30
 800cdd8:	bf04      	itt	eq
 800cdda:	089b      	lsreq	r3, r3, #2
 800cddc:	3002      	addeq	r0, #2
 800cdde:	07da      	lsls	r2, r3, #31
 800cde0:	d403      	bmi.n	800cdea <__lo0bits+0x4e>
 800cde2:	085b      	lsrs	r3, r3, #1
 800cde4:	f100 0001 	add.w	r0, r0, #1
 800cde8:	d005      	beq.n	800cdf6 <__lo0bits+0x5a>
 800cdea:	600b      	str	r3, [r1, #0]
 800cdec:	4770      	bx	lr
 800cdee:	4610      	mov	r0, r2
 800cdf0:	e7e9      	b.n	800cdc6 <__lo0bits+0x2a>
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	4770      	bx	lr
 800cdf6:	2020      	movs	r0, #32
 800cdf8:	4770      	bx	lr
	...

0800cdfc <__i2b>:
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	460c      	mov	r4, r1
 800ce00:	2101      	movs	r1, #1
 800ce02:	f7ff feb9 	bl	800cb78 <_Balloc>
 800ce06:	4602      	mov	r2, r0
 800ce08:	b928      	cbnz	r0, 800ce16 <__i2b+0x1a>
 800ce0a:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <__i2b+0x24>)
 800ce0c:	4805      	ldr	r0, [pc, #20]	; (800ce24 <__i2b+0x28>)
 800ce0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce12:	f000 ff57 	bl	800dcc4 <__assert_func>
 800ce16:	2301      	movs	r3, #1
 800ce18:	6144      	str	r4, [r0, #20]
 800ce1a:	6103      	str	r3, [r0, #16]
 800ce1c:	bd10      	pop	{r4, pc}
 800ce1e:	bf00      	nop
 800ce20:	0800e568 	.word	0x0800e568
 800ce24:	0800e658 	.word	0x0800e658

0800ce28 <__multiply>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	4691      	mov	r9, r2
 800ce2e:	690a      	ldr	r2, [r1, #16]
 800ce30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	bfb8      	it	lt
 800ce38:	460b      	movlt	r3, r1
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	bfbc      	itt	lt
 800ce3e:	464c      	movlt	r4, r9
 800ce40:	4699      	movlt	r9, r3
 800ce42:	6927      	ldr	r7, [r4, #16]
 800ce44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce48:	68a3      	ldr	r3, [r4, #8]
 800ce4a:	6861      	ldr	r1, [r4, #4]
 800ce4c:	eb07 060a 	add.w	r6, r7, sl
 800ce50:	42b3      	cmp	r3, r6
 800ce52:	b085      	sub	sp, #20
 800ce54:	bfb8      	it	lt
 800ce56:	3101      	addlt	r1, #1
 800ce58:	f7ff fe8e 	bl	800cb78 <_Balloc>
 800ce5c:	b930      	cbnz	r0, 800ce6c <__multiply+0x44>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	4b44      	ldr	r3, [pc, #272]	; (800cf74 <__multiply+0x14c>)
 800ce62:	4845      	ldr	r0, [pc, #276]	; (800cf78 <__multiply+0x150>)
 800ce64:	f240 115d 	movw	r1, #349	; 0x15d
 800ce68:	f000 ff2c 	bl	800dcc4 <__assert_func>
 800ce6c:	f100 0514 	add.w	r5, r0, #20
 800ce70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce74:	462b      	mov	r3, r5
 800ce76:	2200      	movs	r2, #0
 800ce78:	4543      	cmp	r3, r8
 800ce7a:	d321      	bcc.n	800cec0 <__multiply+0x98>
 800ce7c:	f104 0314 	add.w	r3, r4, #20
 800ce80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce84:	f109 0314 	add.w	r3, r9, #20
 800ce88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce8c:	9202      	str	r2, [sp, #8]
 800ce8e:	1b3a      	subs	r2, r7, r4
 800ce90:	3a15      	subs	r2, #21
 800ce92:	f022 0203 	bic.w	r2, r2, #3
 800ce96:	3204      	adds	r2, #4
 800ce98:	f104 0115 	add.w	r1, r4, #21
 800ce9c:	428f      	cmp	r7, r1
 800ce9e:	bf38      	it	cc
 800cea0:	2204      	movcc	r2, #4
 800cea2:	9201      	str	r2, [sp, #4]
 800cea4:	9a02      	ldr	r2, [sp, #8]
 800cea6:	9303      	str	r3, [sp, #12]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d80c      	bhi.n	800cec6 <__multiply+0x9e>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	dd03      	ble.n	800ceb8 <__multiply+0x90>
 800ceb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d05a      	beq.n	800cf6e <__multiply+0x146>
 800ceb8:	6106      	str	r6, [r0, #16]
 800ceba:	b005      	add	sp, #20
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	f843 2b04 	str.w	r2, [r3], #4
 800cec4:	e7d8      	b.n	800ce78 <__multiply+0x50>
 800cec6:	f8b3 a000 	ldrh.w	sl, [r3]
 800ceca:	f1ba 0f00 	cmp.w	sl, #0
 800cece:	d024      	beq.n	800cf1a <__multiply+0xf2>
 800ced0:	f104 0e14 	add.w	lr, r4, #20
 800ced4:	46a9      	mov	r9, r5
 800ced6:	f04f 0c00 	mov.w	ip, #0
 800ceda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cede:	f8d9 1000 	ldr.w	r1, [r9]
 800cee2:	fa1f fb82 	uxth.w	fp, r2
 800cee6:	b289      	uxth	r1, r1
 800cee8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ceec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cef0:	f8d9 2000 	ldr.w	r2, [r9]
 800cef4:	4461      	add	r1, ip
 800cef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cefa:	fb0a c20b 	mla	r2, sl, fp, ip
 800cefe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf02:	b289      	uxth	r1, r1
 800cf04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf08:	4577      	cmp	r7, lr
 800cf0a:	f849 1b04 	str.w	r1, [r9], #4
 800cf0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf12:	d8e2      	bhi.n	800ceda <__multiply+0xb2>
 800cf14:	9a01      	ldr	r2, [sp, #4]
 800cf16:	f845 c002 	str.w	ip, [r5, r2]
 800cf1a:	9a03      	ldr	r2, [sp, #12]
 800cf1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf20:	3304      	adds	r3, #4
 800cf22:	f1b9 0f00 	cmp.w	r9, #0
 800cf26:	d020      	beq.n	800cf6a <__multiply+0x142>
 800cf28:	6829      	ldr	r1, [r5, #0]
 800cf2a:	f104 0c14 	add.w	ip, r4, #20
 800cf2e:	46ae      	mov	lr, r5
 800cf30:	f04f 0a00 	mov.w	sl, #0
 800cf34:	f8bc b000 	ldrh.w	fp, [ip]
 800cf38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf3c:	fb09 220b 	mla	r2, r9, fp, r2
 800cf40:	4492      	add	sl, r2
 800cf42:	b289      	uxth	r1, r1
 800cf44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf48:	f84e 1b04 	str.w	r1, [lr], #4
 800cf4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf50:	f8be 1000 	ldrh.w	r1, [lr]
 800cf54:	0c12      	lsrs	r2, r2, #16
 800cf56:	fb09 1102 	mla	r1, r9, r2, r1
 800cf5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf5e:	4567      	cmp	r7, ip
 800cf60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf64:	d8e6      	bhi.n	800cf34 <__multiply+0x10c>
 800cf66:	9a01      	ldr	r2, [sp, #4]
 800cf68:	50a9      	str	r1, [r5, r2]
 800cf6a:	3504      	adds	r5, #4
 800cf6c:	e79a      	b.n	800cea4 <__multiply+0x7c>
 800cf6e:	3e01      	subs	r6, #1
 800cf70:	e79c      	b.n	800ceac <__multiply+0x84>
 800cf72:	bf00      	nop
 800cf74:	0800e568 	.word	0x0800e568
 800cf78:	0800e658 	.word	0x0800e658

0800cf7c <__pow5mult>:
 800cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf80:	4615      	mov	r5, r2
 800cf82:	f012 0203 	ands.w	r2, r2, #3
 800cf86:	4606      	mov	r6, r0
 800cf88:	460f      	mov	r7, r1
 800cf8a:	d007      	beq.n	800cf9c <__pow5mult+0x20>
 800cf8c:	4c25      	ldr	r4, [pc, #148]	; (800d024 <__pow5mult+0xa8>)
 800cf8e:	3a01      	subs	r2, #1
 800cf90:	2300      	movs	r3, #0
 800cf92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf96:	f7ff fe51 	bl	800cc3c <__multadd>
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	10ad      	asrs	r5, r5, #2
 800cf9e:	d03d      	beq.n	800d01c <__pow5mult+0xa0>
 800cfa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cfa2:	b97c      	cbnz	r4, 800cfc4 <__pow5mult+0x48>
 800cfa4:	2010      	movs	r0, #16
 800cfa6:	f7ff fdbf 	bl	800cb28 <malloc>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	6270      	str	r0, [r6, #36]	; 0x24
 800cfae:	b928      	cbnz	r0, 800cfbc <__pow5mult+0x40>
 800cfb0:	4b1d      	ldr	r3, [pc, #116]	; (800d028 <__pow5mult+0xac>)
 800cfb2:	481e      	ldr	r0, [pc, #120]	; (800d02c <__pow5mult+0xb0>)
 800cfb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cfb8:	f000 fe84 	bl	800dcc4 <__assert_func>
 800cfbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfc0:	6004      	str	r4, [r0, #0]
 800cfc2:	60c4      	str	r4, [r0, #12]
 800cfc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfcc:	b94c      	cbnz	r4, 800cfe2 <__pow5mult+0x66>
 800cfce:	f240 2171 	movw	r1, #625	; 0x271
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7ff ff12 	bl	800cdfc <__i2b>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfde:	4604      	mov	r4, r0
 800cfe0:	6003      	str	r3, [r0, #0]
 800cfe2:	f04f 0900 	mov.w	r9, #0
 800cfe6:	07eb      	lsls	r3, r5, #31
 800cfe8:	d50a      	bpl.n	800d000 <__pow5mult+0x84>
 800cfea:	4639      	mov	r1, r7
 800cfec:	4622      	mov	r2, r4
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7ff ff1a 	bl	800ce28 <__multiply>
 800cff4:	4639      	mov	r1, r7
 800cff6:	4680      	mov	r8, r0
 800cff8:	4630      	mov	r0, r6
 800cffa:	f7ff fdfd 	bl	800cbf8 <_Bfree>
 800cffe:	4647      	mov	r7, r8
 800d000:	106d      	asrs	r5, r5, #1
 800d002:	d00b      	beq.n	800d01c <__pow5mult+0xa0>
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	b938      	cbnz	r0, 800d018 <__pow5mult+0x9c>
 800d008:	4622      	mov	r2, r4
 800d00a:	4621      	mov	r1, r4
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff ff0b 	bl	800ce28 <__multiply>
 800d012:	6020      	str	r0, [r4, #0]
 800d014:	f8c0 9000 	str.w	r9, [r0]
 800d018:	4604      	mov	r4, r0
 800d01a:	e7e4      	b.n	800cfe6 <__pow5mult+0x6a>
 800d01c:	4638      	mov	r0, r7
 800d01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d022:	bf00      	nop
 800d024:	0800e7a8 	.word	0x0800e7a8
 800d028:	0800e4f6 	.word	0x0800e4f6
 800d02c:	0800e658 	.word	0x0800e658

0800d030 <__lshift>:
 800d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	460c      	mov	r4, r1
 800d036:	6849      	ldr	r1, [r1, #4]
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	4607      	mov	r7, r0
 800d042:	4691      	mov	r9, r2
 800d044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d048:	f108 0601 	add.w	r6, r8, #1
 800d04c:	42b3      	cmp	r3, r6
 800d04e:	db0b      	blt.n	800d068 <__lshift+0x38>
 800d050:	4638      	mov	r0, r7
 800d052:	f7ff fd91 	bl	800cb78 <_Balloc>
 800d056:	4605      	mov	r5, r0
 800d058:	b948      	cbnz	r0, 800d06e <__lshift+0x3e>
 800d05a:	4602      	mov	r2, r0
 800d05c:	4b2a      	ldr	r3, [pc, #168]	; (800d108 <__lshift+0xd8>)
 800d05e:	482b      	ldr	r0, [pc, #172]	; (800d10c <__lshift+0xdc>)
 800d060:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d064:	f000 fe2e 	bl	800dcc4 <__assert_func>
 800d068:	3101      	adds	r1, #1
 800d06a:	005b      	lsls	r3, r3, #1
 800d06c:	e7ee      	b.n	800d04c <__lshift+0x1c>
 800d06e:	2300      	movs	r3, #0
 800d070:	f100 0114 	add.w	r1, r0, #20
 800d074:	f100 0210 	add.w	r2, r0, #16
 800d078:	4618      	mov	r0, r3
 800d07a:	4553      	cmp	r3, sl
 800d07c:	db37      	blt.n	800d0ee <__lshift+0xbe>
 800d07e:	6920      	ldr	r0, [r4, #16]
 800d080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d084:	f104 0314 	add.w	r3, r4, #20
 800d088:	f019 091f 	ands.w	r9, r9, #31
 800d08c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d090:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d094:	d02f      	beq.n	800d0f6 <__lshift+0xc6>
 800d096:	f1c9 0e20 	rsb	lr, r9, #32
 800d09a:	468a      	mov	sl, r1
 800d09c:	f04f 0c00 	mov.w	ip, #0
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	fa02 f209 	lsl.w	r2, r2, r9
 800d0a6:	ea42 020c 	orr.w	r2, r2, ip
 800d0aa:	f84a 2b04 	str.w	r2, [sl], #4
 800d0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b2:	4298      	cmp	r0, r3
 800d0b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0b8:	d8f2      	bhi.n	800d0a0 <__lshift+0x70>
 800d0ba:	1b03      	subs	r3, r0, r4
 800d0bc:	3b15      	subs	r3, #21
 800d0be:	f023 0303 	bic.w	r3, r3, #3
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	f104 0215 	add.w	r2, r4, #21
 800d0c8:	4290      	cmp	r0, r2
 800d0ca:	bf38      	it	cc
 800d0cc:	2304      	movcc	r3, #4
 800d0ce:	f841 c003 	str.w	ip, [r1, r3]
 800d0d2:	f1bc 0f00 	cmp.w	ip, #0
 800d0d6:	d001      	beq.n	800d0dc <__lshift+0xac>
 800d0d8:	f108 0602 	add.w	r6, r8, #2
 800d0dc:	3e01      	subs	r6, #1
 800d0de:	4638      	mov	r0, r7
 800d0e0:	612e      	str	r6, [r5, #16]
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	f7ff fd88 	bl	800cbf8 <_Bfree>
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	e7c1      	b.n	800d07a <__lshift+0x4a>
 800d0f6:	3904      	subs	r1, #4
 800d0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d100:	4298      	cmp	r0, r3
 800d102:	d8f9      	bhi.n	800d0f8 <__lshift+0xc8>
 800d104:	e7ea      	b.n	800d0dc <__lshift+0xac>
 800d106:	bf00      	nop
 800d108:	0800e568 	.word	0x0800e568
 800d10c:	0800e658 	.word	0x0800e658

0800d110 <__mcmp>:
 800d110:	b530      	push	{r4, r5, lr}
 800d112:	6902      	ldr	r2, [r0, #16]
 800d114:	690c      	ldr	r4, [r1, #16]
 800d116:	1b12      	subs	r2, r2, r4
 800d118:	d10e      	bne.n	800d138 <__mcmp+0x28>
 800d11a:	f100 0314 	add.w	r3, r0, #20
 800d11e:	3114      	adds	r1, #20
 800d120:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d124:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d128:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d12c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d130:	42a5      	cmp	r5, r4
 800d132:	d003      	beq.n	800d13c <__mcmp+0x2c>
 800d134:	d305      	bcc.n	800d142 <__mcmp+0x32>
 800d136:	2201      	movs	r2, #1
 800d138:	4610      	mov	r0, r2
 800d13a:	bd30      	pop	{r4, r5, pc}
 800d13c:	4283      	cmp	r3, r0
 800d13e:	d3f3      	bcc.n	800d128 <__mcmp+0x18>
 800d140:	e7fa      	b.n	800d138 <__mcmp+0x28>
 800d142:	f04f 32ff 	mov.w	r2, #4294967295
 800d146:	e7f7      	b.n	800d138 <__mcmp+0x28>

0800d148 <__mdiff>:
 800d148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	460c      	mov	r4, r1
 800d14e:	4606      	mov	r6, r0
 800d150:	4611      	mov	r1, r2
 800d152:	4620      	mov	r0, r4
 800d154:	4690      	mov	r8, r2
 800d156:	f7ff ffdb 	bl	800d110 <__mcmp>
 800d15a:	1e05      	subs	r5, r0, #0
 800d15c:	d110      	bne.n	800d180 <__mdiff+0x38>
 800d15e:	4629      	mov	r1, r5
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff fd09 	bl	800cb78 <_Balloc>
 800d166:	b930      	cbnz	r0, 800d176 <__mdiff+0x2e>
 800d168:	4b3a      	ldr	r3, [pc, #232]	; (800d254 <__mdiff+0x10c>)
 800d16a:	4602      	mov	r2, r0
 800d16c:	f240 2132 	movw	r1, #562	; 0x232
 800d170:	4839      	ldr	r0, [pc, #228]	; (800d258 <__mdiff+0x110>)
 800d172:	f000 fda7 	bl	800dcc4 <__assert_func>
 800d176:	2301      	movs	r3, #1
 800d178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d17c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d180:	bfa4      	itt	ge
 800d182:	4643      	movge	r3, r8
 800d184:	46a0      	movge	r8, r4
 800d186:	4630      	mov	r0, r6
 800d188:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d18c:	bfa6      	itte	ge
 800d18e:	461c      	movge	r4, r3
 800d190:	2500      	movge	r5, #0
 800d192:	2501      	movlt	r5, #1
 800d194:	f7ff fcf0 	bl	800cb78 <_Balloc>
 800d198:	b920      	cbnz	r0, 800d1a4 <__mdiff+0x5c>
 800d19a:	4b2e      	ldr	r3, [pc, #184]	; (800d254 <__mdiff+0x10c>)
 800d19c:	4602      	mov	r2, r0
 800d19e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d1a2:	e7e5      	b.n	800d170 <__mdiff+0x28>
 800d1a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1a8:	6926      	ldr	r6, [r4, #16]
 800d1aa:	60c5      	str	r5, [r0, #12]
 800d1ac:	f104 0914 	add.w	r9, r4, #20
 800d1b0:	f108 0514 	add.w	r5, r8, #20
 800d1b4:	f100 0e14 	add.w	lr, r0, #20
 800d1b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d1bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1c0:	f108 0210 	add.w	r2, r8, #16
 800d1c4:	46f2      	mov	sl, lr
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d1d0:	fa1f f883 	uxth.w	r8, r3
 800d1d4:	fa11 f18b 	uxtah	r1, r1, fp
 800d1d8:	0c1b      	lsrs	r3, r3, #16
 800d1da:	eba1 0808 	sub.w	r8, r1, r8
 800d1de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d1e6:	fa1f f888 	uxth.w	r8, r8
 800d1ea:	1419      	asrs	r1, r3, #16
 800d1ec:	454e      	cmp	r6, r9
 800d1ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d1f2:	f84a 3b04 	str.w	r3, [sl], #4
 800d1f6:	d8e7      	bhi.n	800d1c8 <__mdiff+0x80>
 800d1f8:	1b33      	subs	r3, r6, r4
 800d1fa:	3b15      	subs	r3, #21
 800d1fc:	f023 0303 	bic.w	r3, r3, #3
 800d200:	3304      	adds	r3, #4
 800d202:	3415      	adds	r4, #21
 800d204:	42a6      	cmp	r6, r4
 800d206:	bf38      	it	cc
 800d208:	2304      	movcc	r3, #4
 800d20a:	441d      	add	r5, r3
 800d20c:	4473      	add	r3, lr
 800d20e:	469e      	mov	lr, r3
 800d210:	462e      	mov	r6, r5
 800d212:	4566      	cmp	r6, ip
 800d214:	d30e      	bcc.n	800d234 <__mdiff+0xec>
 800d216:	f10c 0203 	add.w	r2, ip, #3
 800d21a:	1b52      	subs	r2, r2, r5
 800d21c:	f022 0203 	bic.w	r2, r2, #3
 800d220:	3d03      	subs	r5, #3
 800d222:	45ac      	cmp	ip, r5
 800d224:	bf38      	it	cc
 800d226:	2200      	movcc	r2, #0
 800d228:	441a      	add	r2, r3
 800d22a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d22e:	b17b      	cbz	r3, 800d250 <__mdiff+0x108>
 800d230:	6107      	str	r7, [r0, #16]
 800d232:	e7a3      	b.n	800d17c <__mdiff+0x34>
 800d234:	f856 8b04 	ldr.w	r8, [r6], #4
 800d238:	fa11 f288 	uxtah	r2, r1, r8
 800d23c:	1414      	asrs	r4, r2, #16
 800d23e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d242:	b292      	uxth	r2, r2
 800d244:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d248:	f84e 2b04 	str.w	r2, [lr], #4
 800d24c:	1421      	asrs	r1, r4, #16
 800d24e:	e7e0      	b.n	800d212 <__mdiff+0xca>
 800d250:	3f01      	subs	r7, #1
 800d252:	e7ea      	b.n	800d22a <__mdiff+0xe2>
 800d254:	0800e568 	.word	0x0800e568
 800d258:	0800e658 	.word	0x0800e658

0800d25c <__ulp>:
 800d25c:	b082      	sub	sp, #8
 800d25e:	ed8d 0b00 	vstr	d0, [sp]
 800d262:	9b01      	ldr	r3, [sp, #4]
 800d264:	4912      	ldr	r1, [pc, #72]	; (800d2b0 <__ulp+0x54>)
 800d266:	4019      	ands	r1, r3
 800d268:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d26c:	2900      	cmp	r1, #0
 800d26e:	dd05      	ble.n	800d27c <__ulp+0x20>
 800d270:	2200      	movs	r2, #0
 800d272:	460b      	mov	r3, r1
 800d274:	ec43 2b10 	vmov	d0, r2, r3
 800d278:	b002      	add	sp, #8
 800d27a:	4770      	bx	lr
 800d27c:	4249      	negs	r1, r1
 800d27e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d282:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d286:	f04f 0200 	mov.w	r2, #0
 800d28a:	f04f 0300 	mov.w	r3, #0
 800d28e:	da04      	bge.n	800d29a <__ulp+0x3e>
 800d290:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d294:	fa41 f300 	asr.w	r3, r1, r0
 800d298:	e7ec      	b.n	800d274 <__ulp+0x18>
 800d29a:	f1a0 0114 	sub.w	r1, r0, #20
 800d29e:	291e      	cmp	r1, #30
 800d2a0:	bfda      	itte	le
 800d2a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d2a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800d2aa:	2101      	movgt	r1, #1
 800d2ac:	460a      	mov	r2, r1
 800d2ae:	e7e1      	b.n	800d274 <__ulp+0x18>
 800d2b0:	7ff00000 	.word	0x7ff00000

0800d2b4 <__b2d>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	6905      	ldr	r5, [r0, #16]
 800d2b8:	f100 0714 	add.w	r7, r0, #20
 800d2bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d2c0:	1f2e      	subs	r6, r5, #4
 800d2c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7ff fd48 	bl	800cd5c <__hi0bits>
 800d2cc:	f1c0 0320 	rsb	r3, r0, #32
 800d2d0:	280a      	cmp	r0, #10
 800d2d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d350 <__b2d+0x9c>
 800d2d6:	600b      	str	r3, [r1, #0]
 800d2d8:	dc14      	bgt.n	800d304 <__b2d+0x50>
 800d2da:	f1c0 0e0b 	rsb	lr, r0, #11
 800d2de:	fa24 f10e 	lsr.w	r1, r4, lr
 800d2e2:	42b7      	cmp	r7, r6
 800d2e4:	ea41 030c 	orr.w	r3, r1, ip
 800d2e8:	bf34      	ite	cc
 800d2ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2ee:	2100      	movcs	r1, #0
 800d2f0:	3015      	adds	r0, #21
 800d2f2:	fa04 f000 	lsl.w	r0, r4, r0
 800d2f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d2fa:	ea40 0201 	orr.w	r2, r0, r1
 800d2fe:	ec43 2b10 	vmov	d0, r2, r3
 800d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d304:	42b7      	cmp	r7, r6
 800d306:	bf3a      	itte	cc
 800d308:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d30c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d310:	2100      	movcs	r1, #0
 800d312:	380b      	subs	r0, #11
 800d314:	d017      	beq.n	800d346 <__b2d+0x92>
 800d316:	f1c0 0c20 	rsb	ip, r0, #32
 800d31a:	fa04 f500 	lsl.w	r5, r4, r0
 800d31e:	42be      	cmp	r6, r7
 800d320:	fa21 f40c 	lsr.w	r4, r1, ip
 800d324:	ea45 0504 	orr.w	r5, r5, r4
 800d328:	bf8c      	ite	hi
 800d32a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d32e:	2400      	movls	r4, #0
 800d330:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d334:	fa01 f000 	lsl.w	r0, r1, r0
 800d338:	fa24 f40c 	lsr.w	r4, r4, ip
 800d33c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d340:	ea40 0204 	orr.w	r2, r0, r4
 800d344:	e7db      	b.n	800d2fe <__b2d+0x4a>
 800d346:	ea44 030c 	orr.w	r3, r4, ip
 800d34a:	460a      	mov	r2, r1
 800d34c:	e7d7      	b.n	800d2fe <__b2d+0x4a>
 800d34e:	bf00      	nop
 800d350:	3ff00000 	.word	0x3ff00000

0800d354 <__d2b>:
 800d354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d358:	4689      	mov	r9, r1
 800d35a:	2101      	movs	r1, #1
 800d35c:	ec57 6b10 	vmov	r6, r7, d0
 800d360:	4690      	mov	r8, r2
 800d362:	f7ff fc09 	bl	800cb78 <_Balloc>
 800d366:	4604      	mov	r4, r0
 800d368:	b930      	cbnz	r0, 800d378 <__d2b+0x24>
 800d36a:	4602      	mov	r2, r0
 800d36c:	4b25      	ldr	r3, [pc, #148]	; (800d404 <__d2b+0xb0>)
 800d36e:	4826      	ldr	r0, [pc, #152]	; (800d408 <__d2b+0xb4>)
 800d370:	f240 310a 	movw	r1, #778	; 0x30a
 800d374:	f000 fca6 	bl	800dcc4 <__assert_func>
 800d378:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d37c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d380:	bb35      	cbnz	r5, 800d3d0 <__d2b+0x7c>
 800d382:	2e00      	cmp	r6, #0
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	d028      	beq.n	800d3da <__d2b+0x86>
 800d388:	4668      	mov	r0, sp
 800d38a:	9600      	str	r6, [sp, #0]
 800d38c:	f7ff fd06 	bl	800cd9c <__lo0bits>
 800d390:	9900      	ldr	r1, [sp, #0]
 800d392:	b300      	cbz	r0, 800d3d6 <__d2b+0x82>
 800d394:	9a01      	ldr	r2, [sp, #4]
 800d396:	f1c0 0320 	rsb	r3, r0, #32
 800d39a:	fa02 f303 	lsl.w	r3, r2, r3
 800d39e:	430b      	orrs	r3, r1
 800d3a0:	40c2      	lsrs	r2, r0
 800d3a2:	6163      	str	r3, [r4, #20]
 800d3a4:	9201      	str	r2, [sp, #4]
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	61a3      	str	r3, [r4, #24]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bf14      	ite	ne
 800d3ae:	2202      	movne	r2, #2
 800d3b0:	2201      	moveq	r2, #1
 800d3b2:	6122      	str	r2, [r4, #16]
 800d3b4:	b1d5      	cbz	r5, 800d3ec <__d2b+0x98>
 800d3b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3ba:	4405      	add	r5, r0
 800d3bc:	f8c9 5000 	str.w	r5, [r9]
 800d3c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3c4:	f8c8 0000 	str.w	r0, [r8]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	b003      	add	sp, #12
 800d3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3d4:	e7d5      	b.n	800d382 <__d2b+0x2e>
 800d3d6:	6161      	str	r1, [r4, #20]
 800d3d8:	e7e5      	b.n	800d3a6 <__d2b+0x52>
 800d3da:	a801      	add	r0, sp, #4
 800d3dc:	f7ff fcde 	bl	800cd9c <__lo0bits>
 800d3e0:	9b01      	ldr	r3, [sp, #4]
 800d3e2:	6163      	str	r3, [r4, #20]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	6122      	str	r2, [r4, #16]
 800d3e8:	3020      	adds	r0, #32
 800d3ea:	e7e3      	b.n	800d3b4 <__d2b+0x60>
 800d3ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3f4:	f8c9 0000 	str.w	r0, [r9]
 800d3f8:	6918      	ldr	r0, [r3, #16]
 800d3fa:	f7ff fcaf 	bl	800cd5c <__hi0bits>
 800d3fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d402:	e7df      	b.n	800d3c4 <__d2b+0x70>
 800d404:	0800e568 	.word	0x0800e568
 800d408:	0800e658 	.word	0x0800e658

0800d40c <__ratio>:
 800d40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	4688      	mov	r8, r1
 800d412:	4669      	mov	r1, sp
 800d414:	4681      	mov	r9, r0
 800d416:	f7ff ff4d 	bl	800d2b4 <__b2d>
 800d41a:	a901      	add	r1, sp, #4
 800d41c:	4640      	mov	r0, r8
 800d41e:	ec55 4b10 	vmov	r4, r5, d0
 800d422:	f7ff ff47 	bl	800d2b4 <__b2d>
 800d426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d42a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d42e:	eba3 0c02 	sub.w	ip, r3, r2
 800d432:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d436:	1a9b      	subs	r3, r3, r2
 800d438:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d43c:	ec51 0b10 	vmov	r0, r1, d0
 800d440:	2b00      	cmp	r3, #0
 800d442:	bfd6      	itet	le
 800d444:	460a      	movle	r2, r1
 800d446:	462a      	movgt	r2, r5
 800d448:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d44c:	468b      	mov	fp, r1
 800d44e:	462f      	mov	r7, r5
 800d450:	bfd4      	ite	le
 800d452:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d45a:	4620      	mov	r0, r4
 800d45c:	ee10 2a10 	vmov	r2, s0
 800d460:	465b      	mov	r3, fp
 800d462:	4639      	mov	r1, r7
 800d464:	f7f3 f9f2 	bl	800084c <__aeabi_ddiv>
 800d468:	ec41 0b10 	vmov	d0, r0, r1
 800d46c:	b003      	add	sp, #12
 800d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d472 <__copybits>:
 800d472:	3901      	subs	r1, #1
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	1149      	asrs	r1, r1, #5
 800d478:	6914      	ldr	r4, [r2, #16]
 800d47a:	3101      	adds	r1, #1
 800d47c:	f102 0314 	add.w	r3, r2, #20
 800d480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d484:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d488:	1f05      	subs	r5, r0, #4
 800d48a:	42a3      	cmp	r3, r4
 800d48c:	d30c      	bcc.n	800d4a8 <__copybits+0x36>
 800d48e:	1aa3      	subs	r3, r4, r2
 800d490:	3b11      	subs	r3, #17
 800d492:	f023 0303 	bic.w	r3, r3, #3
 800d496:	3211      	adds	r2, #17
 800d498:	42a2      	cmp	r2, r4
 800d49a:	bf88      	it	hi
 800d49c:	2300      	movhi	r3, #0
 800d49e:	4418      	add	r0, r3
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4288      	cmp	r0, r1
 800d4a4:	d305      	bcc.n	800d4b2 <__copybits+0x40>
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d4ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4b0:	e7eb      	b.n	800d48a <__copybits+0x18>
 800d4b2:	f840 3b04 	str.w	r3, [r0], #4
 800d4b6:	e7f4      	b.n	800d4a2 <__copybits+0x30>

0800d4b8 <__any_on>:
 800d4b8:	f100 0214 	add.w	r2, r0, #20
 800d4bc:	6900      	ldr	r0, [r0, #16]
 800d4be:	114b      	asrs	r3, r1, #5
 800d4c0:	4298      	cmp	r0, r3
 800d4c2:	b510      	push	{r4, lr}
 800d4c4:	db11      	blt.n	800d4ea <__any_on+0x32>
 800d4c6:	dd0a      	ble.n	800d4de <__any_on+0x26>
 800d4c8:	f011 011f 	ands.w	r1, r1, #31
 800d4cc:	d007      	beq.n	800d4de <__any_on+0x26>
 800d4ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4d2:	fa24 f001 	lsr.w	r0, r4, r1
 800d4d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d4da:	428c      	cmp	r4, r1
 800d4dc:	d10b      	bne.n	800d4f6 <__any_on+0x3e>
 800d4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d803      	bhi.n	800d4ee <__any_on+0x36>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	bd10      	pop	{r4, pc}
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	e7f7      	b.n	800d4de <__any_on+0x26>
 800d4ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4f2:	2900      	cmp	r1, #0
 800d4f4:	d0f5      	beq.n	800d4e2 <__any_on+0x2a>
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	e7f6      	b.n	800d4e8 <__any_on+0x30>

0800d4fa <_calloc_r>:
 800d4fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4fc:	fba1 2402 	umull	r2, r4, r1, r2
 800d500:	b94c      	cbnz	r4, 800d516 <_calloc_r+0x1c>
 800d502:	4611      	mov	r1, r2
 800d504:	9201      	str	r2, [sp, #4]
 800d506:	f000 f87b 	bl	800d600 <_malloc_r>
 800d50a:	9a01      	ldr	r2, [sp, #4]
 800d50c:	4605      	mov	r5, r0
 800d50e:	b930      	cbnz	r0, 800d51e <_calloc_r+0x24>
 800d510:	4628      	mov	r0, r5
 800d512:	b003      	add	sp, #12
 800d514:	bd30      	pop	{r4, r5, pc}
 800d516:	220c      	movs	r2, #12
 800d518:	6002      	str	r2, [r0, #0]
 800d51a:	2500      	movs	r5, #0
 800d51c:	e7f8      	b.n	800d510 <_calloc_r+0x16>
 800d51e:	4621      	mov	r1, r4
 800d520:	f7fb ffc2 	bl	80094a8 <memset>
 800d524:	e7f4      	b.n	800d510 <_calloc_r+0x16>
	...

0800d528 <_free_r>:
 800d528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d52a:	2900      	cmp	r1, #0
 800d52c:	d044      	beq.n	800d5b8 <_free_r+0x90>
 800d52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d532:	9001      	str	r0, [sp, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f1a1 0404 	sub.w	r4, r1, #4
 800d53a:	bfb8      	it	lt
 800d53c:	18e4      	addlt	r4, r4, r3
 800d53e:	f000 fc2d 	bl	800dd9c <__malloc_lock>
 800d542:	4a1e      	ldr	r2, [pc, #120]	; (800d5bc <_free_r+0x94>)
 800d544:	9801      	ldr	r0, [sp, #4]
 800d546:	6813      	ldr	r3, [r2, #0]
 800d548:	b933      	cbnz	r3, 800d558 <_free_r+0x30>
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	6014      	str	r4, [r2, #0]
 800d54e:	b003      	add	sp, #12
 800d550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d554:	f000 bc28 	b.w	800dda8 <__malloc_unlock>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d908      	bls.n	800d56e <_free_r+0x46>
 800d55c:	6825      	ldr	r5, [r4, #0]
 800d55e:	1961      	adds	r1, r4, r5
 800d560:	428b      	cmp	r3, r1
 800d562:	bf01      	itttt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	1949      	addeq	r1, r1, r5
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	e7ed      	b.n	800d54a <_free_r+0x22>
 800d56e:	461a      	mov	r2, r3
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	b10b      	cbz	r3, 800d578 <_free_r+0x50>
 800d574:	42a3      	cmp	r3, r4
 800d576:	d9fa      	bls.n	800d56e <_free_r+0x46>
 800d578:	6811      	ldr	r1, [r2, #0]
 800d57a:	1855      	adds	r5, r2, r1
 800d57c:	42a5      	cmp	r5, r4
 800d57e:	d10b      	bne.n	800d598 <_free_r+0x70>
 800d580:	6824      	ldr	r4, [r4, #0]
 800d582:	4421      	add	r1, r4
 800d584:	1854      	adds	r4, r2, r1
 800d586:	42a3      	cmp	r3, r4
 800d588:	6011      	str	r1, [r2, #0]
 800d58a:	d1e0      	bne.n	800d54e <_free_r+0x26>
 800d58c:	681c      	ldr	r4, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	6053      	str	r3, [r2, #4]
 800d592:	4421      	add	r1, r4
 800d594:	6011      	str	r1, [r2, #0]
 800d596:	e7da      	b.n	800d54e <_free_r+0x26>
 800d598:	d902      	bls.n	800d5a0 <_free_r+0x78>
 800d59a:	230c      	movs	r3, #12
 800d59c:	6003      	str	r3, [r0, #0]
 800d59e:	e7d6      	b.n	800d54e <_free_r+0x26>
 800d5a0:	6825      	ldr	r5, [r4, #0]
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf04      	itt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	6063      	str	r3, [r4, #4]
 800d5ae:	bf04      	itt	eq
 800d5b0:	1949      	addeq	r1, r1, r5
 800d5b2:	6021      	streq	r1, [r4, #0]
 800d5b4:	6054      	str	r4, [r2, #4]
 800d5b6:	e7ca      	b.n	800d54e <_free_r+0x26>
 800d5b8:	b003      	add	sp, #12
 800d5ba:	bd30      	pop	{r4, r5, pc}
 800d5bc:	20000890 	.word	0x20000890

0800d5c0 <sbrk_aligned>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	4e0e      	ldr	r6, [pc, #56]	; (800d5fc <sbrk_aligned+0x3c>)
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	6831      	ldr	r1, [r6, #0]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	b911      	cbnz	r1, 800d5d2 <sbrk_aligned+0x12>
 800d5cc:	f000 fb5c 	bl	800dc88 <_sbrk_r>
 800d5d0:	6030      	str	r0, [r6, #0]
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 fb57 	bl	800dc88 <_sbrk_r>
 800d5da:	1c43      	adds	r3, r0, #1
 800d5dc:	d00a      	beq.n	800d5f4 <sbrk_aligned+0x34>
 800d5de:	1cc4      	adds	r4, r0, #3
 800d5e0:	f024 0403 	bic.w	r4, r4, #3
 800d5e4:	42a0      	cmp	r0, r4
 800d5e6:	d007      	beq.n	800d5f8 <sbrk_aligned+0x38>
 800d5e8:	1a21      	subs	r1, r4, r0
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f000 fb4c 	bl	800dc88 <_sbrk_r>
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	d101      	bne.n	800d5f8 <sbrk_aligned+0x38>
 800d5f4:	f04f 34ff 	mov.w	r4, #4294967295
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	20000894 	.word	0x20000894

0800d600 <_malloc_r>:
 800d600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d604:	1ccd      	adds	r5, r1, #3
 800d606:	f025 0503 	bic.w	r5, r5, #3
 800d60a:	3508      	adds	r5, #8
 800d60c:	2d0c      	cmp	r5, #12
 800d60e:	bf38      	it	cc
 800d610:	250c      	movcc	r5, #12
 800d612:	2d00      	cmp	r5, #0
 800d614:	4607      	mov	r7, r0
 800d616:	db01      	blt.n	800d61c <_malloc_r+0x1c>
 800d618:	42a9      	cmp	r1, r5
 800d61a:	d905      	bls.n	800d628 <_malloc_r+0x28>
 800d61c:	230c      	movs	r3, #12
 800d61e:	603b      	str	r3, [r7, #0]
 800d620:	2600      	movs	r6, #0
 800d622:	4630      	mov	r0, r6
 800d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d628:	4e2e      	ldr	r6, [pc, #184]	; (800d6e4 <_malloc_r+0xe4>)
 800d62a:	f000 fbb7 	bl	800dd9c <__malloc_lock>
 800d62e:	6833      	ldr	r3, [r6, #0]
 800d630:	461c      	mov	r4, r3
 800d632:	bb34      	cbnz	r4, 800d682 <_malloc_r+0x82>
 800d634:	4629      	mov	r1, r5
 800d636:	4638      	mov	r0, r7
 800d638:	f7ff ffc2 	bl	800d5c0 <sbrk_aligned>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	4604      	mov	r4, r0
 800d640:	d14d      	bne.n	800d6de <_malloc_r+0xde>
 800d642:	6834      	ldr	r4, [r6, #0]
 800d644:	4626      	mov	r6, r4
 800d646:	2e00      	cmp	r6, #0
 800d648:	d140      	bne.n	800d6cc <_malloc_r+0xcc>
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	4631      	mov	r1, r6
 800d64e:	4638      	mov	r0, r7
 800d650:	eb04 0803 	add.w	r8, r4, r3
 800d654:	f000 fb18 	bl	800dc88 <_sbrk_r>
 800d658:	4580      	cmp	r8, r0
 800d65a:	d13a      	bne.n	800d6d2 <_malloc_r+0xd2>
 800d65c:	6821      	ldr	r1, [r4, #0]
 800d65e:	3503      	adds	r5, #3
 800d660:	1a6d      	subs	r5, r5, r1
 800d662:	f025 0503 	bic.w	r5, r5, #3
 800d666:	3508      	adds	r5, #8
 800d668:	2d0c      	cmp	r5, #12
 800d66a:	bf38      	it	cc
 800d66c:	250c      	movcc	r5, #12
 800d66e:	4629      	mov	r1, r5
 800d670:	4638      	mov	r0, r7
 800d672:	f7ff ffa5 	bl	800d5c0 <sbrk_aligned>
 800d676:	3001      	adds	r0, #1
 800d678:	d02b      	beq.n	800d6d2 <_malloc_r+0xd2>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	442b      	add	r3, r5
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	e00e      	b.n	800d6a0 <_malloc_r+0xa0>
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	1b52      	subs	r2, r2, r5
 800d686:	d41e      	bmi.n	800d6c6 <_malloc_r+0xc6>
 800d688:	2a0b      	cmp	r2, #11
 800d68a:	d916      	bls.n	800d6ba <_malloc_r+0xba>
 800d68c:	1961      	adds	r1, r4, r5
 800d68e:	42a3      	cmp	r3, r4
 800d690:	6025      	str	r5, [r4, #0]
 800d692:	bf18      	it	ne
 800d694:	6059      	strne	r1, [r3, #4]
 800d696:	6863      	ldr	r3, [r4, #4]
 800d698:	bf08      	it	eq
 800d69a:	6031      	streq	r1, [r6, #0]
 800d69c:	5162      	str	r2, [r4, r5]
 800d69e:	604b      	str	r3, [r1, #4]
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f104 060b 	add.w	r6, r4, #11
 800d6a6:	f000 fb7f 	bl	800dda8 <__malloc_unlock>
 800d6aa:	f026 0607 	bic.w	r6, r6, #7
 800d6ae:	1d23      	adds	r3, r4, #4
 800d6b0:	1af2      	subs	r2, r6, r3
 800d6b2:	d0b6      	beq.n	800d622 <_malloc_r+0x22>
 800d6b4:	1b9b      	subs	r3, r3, r6
 800d6b6:	50a3      	str	r3, [r4, r2]
 800d6b8:	e7b3      	b.n	800d622 <_malloc_r+0x22>
 800d6ba:	6862      	ldr	r2, [r4, #4]
 800d6bc:	42a3      	cmp	r3, r4
 800d6be:	bf0c      	ite	eq
 800d6c0:	6032      	streq	r2, [r6, #0]
 800d6c2:	605a      	strne	r2, [r3, #4]
 800d6c4:	e7ec      	b.n	800d6a0 <_malloc_r+0xa0>
 800d6c6:	4623      	mov	r3, r4
 800d6c8:	6864      	ldr	r4, [r4, #4]
 800d6ca:	e7b2      	b.n	800d632 <_malloc_r+0x32>
 800d6cc:	4634      	mov	r4, r6
 800d6ce:	6876      	ldr	r6, [r6, #4]
 800d6d0:	e7b9      	b.n	800d646 <_malloc_r+0x46>
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	603b      	str	r3, [r7, #0]
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	f000 fb66 	bl	800dda8 <__malloc_unlock>
 800d6dc:	e7a1      	b.n	800d622 <_malloc_r+0x22>
 800d6de:	6025      	str	r5, [r4, #0]
 800d6e0:	e7de      	b.n	800d6a0 <_malloc_r+0xa0>
 800d6e2:	bf00      	nop
 800d6e4:	20000890 	.word	0x20000890

0800d6e8 <__ssputs_r>:
 800d6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ec:	688e      	ldr	r6, [r1, #8]
 800d6ee:	429e      	cmp	r6, r3
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	4690      	mov	r8, r2
 800d6f6:	461f      	mov	r7, r3
 800d6f8:	d838      	bhi.n	800d76c <__ssputs_r+0x84>
 800d6fa:	898a      	ldrh	r2, [r1, #12]
 800d6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d700:	d032      	beq.n	800d768 <__ssputs_r+0x80>
 800d702:	6825      	ldr	r5, [r4, #0]
 800d704:	6909      	ldr	r1, [r1, #16]
 800d706:	eba5 0901 	sub.w	r9, r5, r1
 800d70a:	6965      	ldr	r5, [r4, #20]
 800d70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d714:	3301      	adds	r3, #1
 800d716:	444b      	add	r3, r9
 800d718:	106d      	asrs	r5, r5, #1
 800d71a:	429d      	cmp	r5, r3
 800d71c:	bf38      	it	cc
 800d71e:	461d      	movcc	r5, r3
 800d720:	0553      	lsls	r3, r2, #21
 800d722:	d531      	bpl.n	800d788 <__ssputs_r+0xa0>
 800d724:	4629      	mov	r1, r5
 800d726:	f7ff ff6b 	bl	800d600 <_malloc_r>
 800d72a:	4606      	mov	r6, r0
 800d72c:	b950      	cbnz	r0, 800d744 <__ssputs_r+0x5c>
 800d72e:	230c      	movs	r3, #12
 800d730:	f8ca 3000 	str.w	r3, [sl]
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d73a:	81a3      	strh	r3, [r4, #12]
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d744:	6921      	ldr	r1, [r4, #16]
 800d746:	464a      	mov	r2, r9
 800d748:	f7ff fa08 	bl	800cb5c <memcpy>
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d756:	81a3      	strh	r3, [r4, #12]
 800d758:	6126      	str	r6, [r4, #16]
 800d75a:	6165      	str	r5, [r4, #20]
 800d75c:	444e      	add	r6, r9
 800d75e:	eba5 0509 	sub.w	r5, r5, r9
 800d762:	6026      	str	r6, [r4, #0]
 800d764:	60a5      	str	r5, [r4, #8]
 800d766:	463e      	mov	r6, r7
 800d768:	42be      	cmp	r6, r7
 800d76a:	d900      	bls.n	800d76e <__ssputs_r+0x86>
 800d76c:	463e      	mov	r6, r7
 800d76e:	6820      	ldr	r0, [r4, #0]
 800d770:	4632      	mov	r2, r6
 800d772:	4641      	mov	r1, r8
 800d774:	f000 faf8 	bl	800dd68 <memmove>
 800d778:	68a3      	ldr	r3, [r4, #8]
 800d77a:	1b9b      	subs	r3, r3, r6
 800d77c:	60a3      	str	r3, [r4, #8]
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	4433      	add	r3, r6
 800d782:	6023      	str	r3, [r4, #0]
 800d784:	2000      	movs	r0, #0
 800d786:	e7db      	b.n	800d740 <__ssputs_r+0x58>
 800d788:	462a      	mov	r2, r5
 800d78a:	f000 fb13 	bl	800ddb4 <_realloc_r>
 800d78e:	4606      	mov	r6, r0
 800d790:	2800      	cmp	r0, #0
 800d792:	d1e1      	bne.n	800d758 <__ssputs_r+0x70>
 800d794:	6921      	ldr	r1, [r4, #16]
 800d796:	4650      	mov	r0, sl
 800d798:	f7ff fec6 	bl	800d528 <_free_r>
 800d79c:	e7c7      	b.n	800d72e <__ssputs_r+0x46>
	...

0800d7a0 <_svfiprintf_r>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	4698      	mov	r8, r3
 800d7a6:	898b      	ldrh	r3, [r1, #12]
 800d7a8:	061b      	lsls	r3, r3, #24
 800d7aa:	b09d      	sub	sp, #116	; 0x74
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	460d      	mov	r5, r1
 800d7b0:	4614      	mov	r4, r2
 800d7b2:	d50e      	bpl.n	800d7d2 <_svfiprintf_r+0x32>
 800d7b4:	690b      	ldr	r3, [r1, #16]
 800d7b6:	b963      	cbnz	r3, 800d7d2 <_svfiprintf_r+0x32>
 800d7b8:	2140      	movs	r1, #64	; 0x40
 800d7ba:	f7ff ff21 	bl	800d600 <_malloc_r>
 800d7be:	6028      	str	r0, [r5, #0]
 800d7c0:	6128      	str	r0, [r5, #16]
 800d7c2:	b920      	cbnz	r0, 800d7ce <_svfiprintf_r+0x2e>
 800d7c4:	230c      	movs	r3, #12
 800d7c6:	603b      	str	r3, [r7, #0]
 800d7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7cc:	e0d1      	b.n	800d972 <_svfiprintf_r+0x1d2>
 800d7ce:	2340      	movs	r3, #64	; 0x40
 800d7d0:	616b      	str	r3, [r5, #20]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d6:	2320      	movs	r3, #32
 800d7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e0:	2330      	movs	r3, #48	; 0x30
 800d7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d98c <_svfiprintf_r+0x1ec>
 800d7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7ea:	f04f 0901 	mov.w	r9, #1
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	469a      	mov	sl, r3
 800d7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7f6:	b10a      	cbz	r2, 800d7fc <_svfiprintf_r+0x5c>
 800d7f8:	2a25      	cmp	r2, #37	; 0x25
 800d7fa:	d1f9      	bne.n	800d7f0 <_svfiprintf_r+0x50>
 800d7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d800:	d00b      	beq.n	800d81a <_svfiprintf_r+0x7a>
 800d802:	465b      	mov	r3, fp
 800d804:	4622      	mov	r2, r4
 800d806:	4629      	mov	r1, r5
 800d808:	4638      	mov	r0, r7
 800d80a:	f7ff ff6d 	bl	800d6e8 <__ssputs_r>
 800d80e:	3001      	adds	r0, #1
 800d810:	f000 80aa 	beq.w	800d968 <_svfiprintf_r+0x1c8>
 800d814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d816:	445a      	add	r2, fp
 800d818:	9209      	str	r2, [sp, #36]	; 0x24
 800d81a:	f89a 3000 	ldrb.w	r3, [sl]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 80a2 	beq.w	800d968 <_svfiprintf_r+0x1c8>
 800d824:	2300      	movs	r3, #0
 800d826:	f04f 32ff 	mov.w	r2, #4294967295
 800d82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d82e:	f10a 0a01 	add.w	sl, sl, #1
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	9307      	str	r3, [sp, #28]
 800d836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d83a:	931a      	str	r3, [sp, #104]	; 0x68
 800d83c:	4654      	mov	r4, sl
 800d83e:	2205      	movs	r2, #5
 800d840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d844:	4851      	ldr	r0, [pc, #324]	; (800d98c <_svfiprintf_r+0x1ec>)
 800d846:	f7f2 fccb 	bl	80001e0 <memchr>
 800d84a:	9a04      	ldr	r2, [sp, #16]
 800d84c:	b9d8      	cbnz	r0, 800d886 <_svfiprintf_r+0xe6>
 800d84e:	06d0      	lsls	r0, r2, #27
 800d850:	bf44      	itt	mi
 800d852:	2320      	movmi	r3, #32
 800d854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d858:	0711      	lsls	r1, r2, #28
 800d85a:	bf44      	itt	mi
 800d85c:	232b      	movmi	r3, #43	; 0x2b
 800d85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d862:	f89a 3000 	ldrb.w	r3, [sl]
 800d866:	2b2a      	cmp	r3, #42	; 0x2a
 800d868:	d015      	beq.n	800d896 <_svfiprintf_r+0xf6>
 800d86a:	9a07      	ldr	r2, [sp, #28]
 800d86c:	4654      	mov	r4, sl
 800d86e:	2000      	movs	r0, #0
 800d870:	f04f 0c0a 	mov.w	ip, #10
 800d874:	4621      	mov	r1, r4
 800d876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d87a:	3b30      	subs	r3, #48	; 0x30
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d94e      	bls.n	800d91e <_svfiprintf_r+0x17e>
 800d880:	b1b0      	cbz	r0, 800d8b0 <_svfiprintf_r+0x110>
 800d882:	9207      	str	r2, [sp, #28]
 800d884:	e014      	b.n	800d8b0 <_svfiprintf_r+0x110>
 800d886:	eba0 0308 	sub.w	r3, r0, r8
 800d88a:	fa09 f303 	lsl.w	r3, r9, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	46a2      	mov	sl, r4
 800d894:	e7d2      	b.n	800d83c <_svfiprintf_r+0x9c>
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	1d19      	adds	r1, r3, #4
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	9103      	str	r1, [sp, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bfbb      	ittet	lt
 800d8a2:	425b      	neglt	r3, r3
 800d8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8a8:	9307      	strge	r3, [sp, #28]
 800d8aa:	9307      	strlt	r3, [sp, #28]
 800d8ac:	bfb8      	it	lt
 800d8ae:	9204      	strlt	r2, [sp, #16]
 800d8b0:	7823      	ldrb	r3, [r4, #0]
 800d8b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8b4:	d10c      	bne.n	800d8d0 <_svfiprintf_r+0x130>
 800d8b6:	7863      	ldrb	r3, [r4, #1]
 800d8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ba:	d135      	bne.n	800d928 <_svfiprintf_r+0x188>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	1d1a      	adds	r2, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	9203      	str	r2, [sp, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfb8      	it	lt
 800d8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8cc:	3402      	adds	r4, #2
 800d8ce:	9305      	str	r3, [sp, #20]
 800d8d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d99c <_svfiprintf_r+0x1fc>
 800d8d4:	7821      	ldrb	r1, [r4, #0]
 800d8d6:	2203      	movs	r2, #3
 800d8d8:	4650      	mov	r0, sl
 800d8da:	f7f2 fc81 	bl	80001e0 <memchr>
 800d8de:	b140      	cbz	r0, 800d8f2 <_svfiprintf_r+0x152>
 800d8e0:	2340      	movs	r3, #64	; 0x40
 800d8e2:	eba0 000a 	sub.w	r0, r0, sl
 800d8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	4303      	orrs	r3, r0
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f6:	4826      	ldr	r0, [pc, #152]	; (800d990 <_svfiprintf_r+0x1f0>)
 800d8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8fc:	2206      	movs	r2, #6
 800d8fe:	f7f2 fc6f 	bl	80001e0 <memchr>
 800d902:	2800      	cmp	r0, #0
 800d904:	d038      	beq.n	800d978 <_svfiprintf_r+0x1d8>
 800d906:	4b23      	ldr	r3, [pc, #140]	; (800d994 <_svfiprintf_r+0x1f4>)
 800d908:	bb1b      	cbnz	r3, 800d952 <_svfiprintf_r+0x1b2>
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	3307      	adds	r3, #7
 800d90e:	f023 0307 	bic.w	r3, r3, #7
 800d912:	3308      	adds	r3, #8
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d918:	4433      	add	r3, r6
 800d91a:	9309      	str	r3, [sp, #36]	; 0x24
 800d91c:	e767      	b.n	800d7ee <_svfiprintf_r+0x4e>
 800d91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d922:	460c      	mov	r4, r1
 800d924:	2001      	movs	r0, #1
 800d926:	e7a5      	b.n	800d874 <_svfiprintf_r+0xd4>
 800d928:	2300      	movs	r3, #0
 800d92a:	3401      	adds	r4, #1
 800d92c:	9305      	str	r3, [sp, #20]
 800d92e:	4619      	mov	r1, r3
 800d930:	f04f 0c0a 	mov.w	ip, #10
 800d934:	4620      	mov	r0, r4
 800d936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d93a:	3a30      	subs	r2, #48	; 0x30
 800d93c:	2a09      	cmp	r2, #9
 800d93e:	d903      	bls.n	800d948 <_svfiprintf_r+0x1a8>
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0c5      	beq.n	800d8d0 <_svfiprintf_r+0x130>
 800d944:	9105      	str	r1, [sp, #20]
 800d946:	e7c3      	b.n	800d8d0 <_svfiprintf_r+0x130>
 800d948:	fb0c 2101 	mla	r1, ip, r1, r2
 800d94c:	4604      	mov	r4, r0
 800d94e:	2301      	movs	r3, #1
 800d950:	e7f0      	b.n	800d934 <_svfiprintf_r+0x194>
 800d952:	ab03      	add	r3, sp, #12
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	462a      	mov	r2, r5
 800d958:	4b0f      	ldr	r3, [pc, #60]	; (800d998 <_svfiprintf_r+0x1f8>)
 800d95a:	a904      	add	r1, sp, #16
 800d95c:	4638      	mov	r0, r7
 800d95e:	f7fb fe4b 	bl	80095f8 <_printf_float>
 800d962:	1c42      	adds	r2, r0, #1
 800d964:	4606      	mov	r6, r0
 800d966:	d1d6      	bne.n	800d916 <_svfiprintf_r+0x176>
 800d968:	89ab      	ldrh	r3, [r5, #12]
 800d96a:	065b      	lsls	r3, r3, #25
 800d96c:	f53f af2c 	bmi.w	800d7c8 <_svfiprintf_r+0x28>
 800d970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d972:	b01d      	add	sp, #116	; 0x74
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	ab03      	add	r3, sp, #12
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	462a      	mov	r2, r5
 800d97e:	4b06      	ldr	r3, [pc, #24]	; (800d998 <_svfiprintf_r+0x1f8>)
 800d980:	a904      	add	r1, sp, #16
 800d982:	4638      	mov	r0, r7
 800d984:	f7fc f8dc 	bl	8009b40 <_printf_i>
 800d988:	e7eb      	b.n	800d962 <_svfiprintf_r+0x1c2>
 800d98a:	bf00      	nop
 800d98c:	0800e7b4 	.word	0x0800e7b4
 800d990:	0800e7be 	.word	0x0800e7be
 800d994:	080095f9 	.word	0x080095f9
 800d998:	0800d6e9 	.word	0x0800d6e9
 800d99c:	0800e7ba 	.word	0x0800e7ba

0800d9a0 <__sfputc_r>:
 800d9a0:	6893      	ldr	r3, [r2, #8]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	b410      	push	{r4}
 800d9a8:	6093      	str	r3, [r2, #8]
 800d9aa:	da08      	bge.n	800d9be <__sfputc_r+0x1e>
 800d9ac:	6994      	ldr	r4, [r2, #24]
 800d9ae:	42a3      	cmp	r3, r4
 800d9b0:	db01      	blt.n	800d9b6 <__sfputc_r+0x16>
 800d9b2:	290a      	cmp	r1, #10
 800d9b4:	d103      	bne.n	800d9be <__sfputc_r+0x1e>
 800d9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ba:	f7fd bbb1 	b.w	800b120 <__swbuf_r>
 800d9be:	6813      	ldr	r3, [r2, #0]
 800d9c0:	1c58      	adds	r0, r3, #1
 800d9c2:	6010      	str	r0, [r2, #0]
 800d9c4:	7019      	strb	r1, [r3, #0]
 800d9c6:	4608      	mov	r0, r1
 800d9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <__sfputs_r>:
 800d9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	460f      	mov	r7, r1
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	18d5      	adds	r5, r2, r3
 800d9d8:	42ac      	cmp	r4, r5
 800d9da:	d101      	bne.n	800d9e0 <__sfputs_r+0x12>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e007      	b.n	800d9f0 <__sfputs_r+0x22>
 800d9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e4:	463a      	mov	r2, r7
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7ff ffda 	bl	800d9a0 <__sfputc_r>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d1f3      	bne.n	800d9d8 <__sfputs_r+0xa>
 800d9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9f4 <_vfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	b09d      	sub	sp, #116	; 0x74
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	4698      	mov	r8, r3
 800da00:	4606      	mov	r6, r0
 800da02:	b118      	cbz	r0, 800da0c <_vfiprintf_r+0x18>
 800da04:	6983      	ldr	r3, [r0, #24]
 800da06:	b90b      	cbnz	r3, 800da0c <_vfiprintf_r+0x18>
 800da08:	f7fe fc02 	bl	800c210 <__sinit>
 800da0c:	4b89      	ldr	r3, [pc, #548]	; (800dc34 <_vfiprintf_r+0x240>)
 800da0e:	429d      	cmp	r5, r3
 800da10:	d11b      	bne.n	800da4a <_vfiprintf_r+0x56>
 800da12:	6875      	ldr	r5, [r6, #4]
 800da14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da16:	07d9      	lsls	r1, r3, #31
 800da18:	d405      	bmi.n	800da26 <_vfiprintf_r+0x32>
 800da1a:	89ab      	ldrh	r3, [r5, #12]
 800da1c:	059a      	lsls	r2, r3, #22
 800da1e:	d402      	bmi.n	800da26 <_vfiprintf_r+0x32>
 800da20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da22:	f7ff f806 	bl	800ca32 <__retarget_lock_acquire_recursive>
 800da26:	89ab      	ldrh	r3, [r5, #12]
 800da28:	071b      	lsls	r3, r3, #28
 800da2a:	d501      	bpl.n	800da30 <_vfiprintf_r+0x3c>
 800da2c:	692b      	ldr	r3, [r5, #16]
 800da2e:	b9eb      	cbnz	r3, 800da6c <_vfiprintf_r+0x78>
 800da30:	4629      	mov	r1, r5
 800da32:	4630      	mov	r0, r6
 800da34:	f7fd fbd8 	bl	800b1e8 <__swsetup_r>
 800da38:	b1c0      	cbz	r0, 800da6c <_vfiprintf_r+0x78>
 800da3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da3c:	07dc      	lsls	r4, r3, #31
 800da3e:	d50e      	bpl.n	800da5e <_vfiprintf_r+0x6a>
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	b01d      	add	sp, #116	; 0x74
 800da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4a:	4b7b      	ldr	r3, [pc, #492]	; (800dc38 <_vfiprintf_r+0x244>)
 800da4c:	429d      	cmp	r5, r3
 800da4e:	d101      	bne.n	800da54 <_vfiprintf_r+0x60>
 800da50:	68b5      	ldr	r5, [r6, #8]
 800da52:	e7df      	b.n	800da14 <_vfiprintf_r+0x20>
 800da54:	4b79      	ldr	r3, [pc, #484]	; (800dc3c <_vfiprintf_r+0x248>)
 800da56:	429d      	cmp	r5, r3
 800da58:	bf08      	it	eq
 800da5a:	68f5      	ldreq	r5, [r6, #12]
 800da5c:	e7da      	b.n	800da14 <_vfiprintf_r+0x20>
 800da5e:	89ab      	ldrh	r3, [r5, #12]
 800da60:	0598      	lsls	r0, r3, #22
 800da62:	d4ed      	bmi.n	800da40 <_vfiprintf_r+0x4c>
 800da64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da66:	f7fe ffe5 	bl	800ca34 <__retarget_lock_release_recursive>
 800da6a:	e7e9      	b.n	800da40 <_vfiprintf_r+0x4c>
 800da6c:	2300      	movs	r3, #0
 800da6e:	9309      	str	r3, [sp, #36]	; 0x24
 800da70:	2320      	movs	r3, #32
 800da72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da76:	f8cd 800c 	str.w	r8, [sp, #12]
 800da7a:	2330      	movs	r3, #48	; 0x30
 800da7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc40 <_vfiprintf_r+0x24c>
 800da80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da84:	f04f 0901 	mov.w	r9, #1
 800da88:	4623      	mov	r3, r4
 800da8a:	469a      	mov	sl, r3
 800da8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da90:	b10a      	cbz	r2, 800da96 <_vfiprintf_r+0xa2>
 800da92:	2a25      	cmp	r2, #37	; 0x25
 800da94:	d1f9      	bne.n	800da8a <_vfiprintf_r+0x96>
 800da96:	ebba 0b04 	subs.w	fp, sl, r4
 800da9a:	d00b      	beq.n	800dab4 <_vfiprintf_r+0xc0>
 800da9c:	465b      	mov	r3, fp
 800da9e:	4622      	mov	r2, r4
 800daa0:	4629      	mov	r1, r5
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7ff ff93 	bl	800d9ce <__sfputs_r>
 800daa8:	3001      	adds	r0, #1
 800daaa:	f000 80aa 	beq.w	800dc02 <_vfiprintf_r+0x20e>
 800daae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dab0:	445a      	add	r2, fp
 800dab2:	9209      	str	r2, [sp, #36]	; 0x24
 800dab4:	f89a 3000 	ldrb.w	r3, [sl]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 80a2 	beq.w	800dc02 <_vfiprintf_r+0x20e>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f04f 32ff 	mov.w	r2, #4294967295
 800dac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dac8:	f10a 0a01 	add.w	sl, sl, #1
 800dacc:	9304      	str	r3, [sp, #16]
 800dace:	9307      	str	r3, [sp, #28]
 800dad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dad4:	931a      	str	r3, [sp, #104]	; 0x68
 800dad6:	4654      	mov	r4, sl
 800dad8:	2205      	movs	r2, #5
 800dada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dade:	4858      	ldr	r0, [pc, #352]	; (800dc40 <_vfiprintf_r+0x24c>)
 800dae0:	f7f2 fb7e 	bl	80001e0 <memchr>
 800dae4:	9a04      	ldr	r2, [sp, #16]
 800dae6:	b9d8      	cbnz	r0, 800db20 <_vfiprintf_r+0x12c>
 800dae8:	06d1      	lsls	r1, r2, #27
 800daea:	bf44      	itt	mi
 800daec:	2320      	movmi	r3, #32
 800daee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daf2:	0713      	lsls	r3, r2, #28
 800daf4:	bf44      	itt	mi
 800daf6:	232b      	movmi	r3, #43	; 0x2b
 800daf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dafc:	f89a 3000 	ldrb.w	r3, [sl]
 800db00:	2b2a      	cmp	r3, #42	; 0x2a
 800db02:	d015      	beq.n	800db30 <_vfiprintf_r+0x13c>
 800db04:	9a07      	ldr	r2, [sp, #28]
 800db06:	4654      	mov	r4, sl
 800db08:	2000      	movs	r0, #0
 800db0a:	f04f 0c0a 	mov.w	ip, #10
 800db0e:	4621      	mov	r1, r4
 800db10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db14:	3b30      	subs	r3, #48	; 0x30
 800db16:	2b09      	cmp	r3, #9
 800db18:	d94e      	bls.n	800dbb8 <_vfiprintf_r+0x1c4>
 800db1a:	b1b0      	cbz	r0, 800db4a <_vfiprintf_r+0x156>
 800db1c:	9207      	str	r2, [sp, #28]
 800db1e:	e014      	b.n	800db4a <_vfiprintf_r+0x156>
 800db20:	eba0 0308 	sub.w	r3, r0, r8
 800db24:	fa09 f303 	lsl.w	r3, r9, r3
 800db28:	4313      	orrs	r3, r2
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	46a2      	mov	sl, r4
 800db2e:	e7d2      	b.n	800dad6 <_vfiprintf_r+0xe2>
 800db30:	9b03      	ldr	r3, [sp, #12]
 800db32:	1d19      	adds	r1, r3, #4
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	9103      	str	r1, [sp, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bfbb      	ittet	lt
 800db3c:	425b      	neglt	r3, r3
 800db3e:	f042 0202 	orrlt.w	r2, r2, #2
 800db42:	9307      	strge	r3, [sp, #28]
 800db44:	9307      	strlt	r3, [sp, #28]
 800db46:	bfb8      	it	lt
 800db48:	9204      	strlt	r2, [sp, #16]
 800db4a:	7823      	ldrb	r3, [r4, #0]
 800db4c:	2b2e      	cmp	r3, #46	; 0x2e
 800db4e:	d10c      	bne.n	800db6a <_vfiprintf_r+0x176>
 800db50:	7863      	ldrb	r3, [r4, #1]
 800db52:	2b2a      	cmp	r3, #42	; 0x2a
 800db54:	d135      	bne.n	800dbc2 <_vfiprintf_r+0x1ce>
 800db56:	9b03      	ldr	r3, [sp, #12]
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	9203      	str	r2, [sp, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bfb8      	it	lt
 800db62:	f04f 33ff 	movlt.w	r3, #4294967295
 800db66:	3402      	adds	r4, #2
 800db68:	9305      	str	r3, [sp, #20]
 800db6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc50 <_vfiprintf_r+0x25c>
 800db6e:	7821      	ldrb	r1, [r4, #0]
 800db70:	2203      	movs	r2, #3
 800db72:	4650      	mov	r0, sl
 800db74:	f7f2 fb34 	bl	80001e0 <memchr>
 800db78:	b140      	cbz	r0, 800db8c <_vfiprintf_r+0x198>
 800db7a:	2340      	movs	r3, #64	; 0x40
 800db7c:	eba0 000a 	sub.w	r0, r0, sl
 800db80:	fa03 f000 	lsl.w	r0, r3, r0
 800db84:	9b04      	ldr	r3, [sp, #16]
 800db86:	4303      	orrs	r3, r0
 800db88:	3401      	adds	r4, #1
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db90:	482c      	ldr	r0, [pc, #176]	; (800dc44 <_vfiprintf_r+0x250>)
 800db92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db96:	2206      	movs	r2, #6
 800db98:	f7f2 fb22 	bl	80001e0 <memchr>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d03f      	beq.n	800dc20 <_vfiprintf_r+0x22c>
 800dba0:	4b29      	ldr	r3, [pc, #164]	; (800dc48 <_vfiprintf_r+0x254>)
 800dba2:	bb1b      	cbnz	r3, 800dbec <_vfiprintf_r+0x1f8>
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	3307      	adds	r3, #7
 800dba8:	f023 0307 	bic.w	r3, r3, #7
 800dbac:	3308      	adds	r3, #8
 800dbae:	9303      	str	r3, [sp, #12]
 800dbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb2:	443b      	add	r3, r7
 800dbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb6:	e767      	b.n	800da88 <_vfiprintf_r+0x94>
 800dbb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	e7a5      	b.n	800db0e <_vfiprintf_r+0x11a>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	3401      	adds	r4, #1
 800dbc6:	9305      	str	r3, [sp, #20]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	f04f 0c0a 	mov.w	ip, #10
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbd4:	3a30      	subs	r2, #48	; 0x30
 800dbd6:	2a09      	cmp	r2, #9
 800dbd8:	d903      	bls.n	800dbe2 <_vfiprintf_r+0x1ee>
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0c5      	beq.n	800db6a <_vfiprintf_r+0x176>
 800dbde:	9105      	str	r1, [sp, #20]
 800dbe0:	e7c3      	b.n	800db6a <_vfiprintf_r+0x176>
 800dbe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e7f0      	b.n	800dbce <_vfiprintf_r+0x1da>
 800dbec:	ab03      	add	r3, sp, #12
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	4b16      	ldr	r3, [pc, #88]	; (800dc4c <_vfiprintf_r+0x258>)
 800dbf4:	a904      	add	r1, sp, #16
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7fb fcfe 	bl	80095f8 <_printf_float>
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	1c78      	adds	r0, r7, #1
 800dc00:	d1d6      	bne.n	800dbb0 <_vfiprintf_r+0x1bc>
 800dc02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc04:	07d9      	lsls	r1, r3, #31
 800dc06:	d405      	bmi.n	800dc14 <_vfiprintf_r+0x220>
 800dc08:	89ab      	ldrh	r3, [r5, #12]
 800dc0a:	059a      	lsls	r2, r3, #22
 800dc0c:	d402      	bmi.n	800dc14 <_vfiprintf_r+0x220>
 800dc0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc10:	f7fe ff10 	bl	800ca34 <__retarget_lock_release_recursive>
 800dc14:	89ab      	ldrh	r3, [r5, #12]
 800dc16:	065b      	lsls	r3, r3, #25
 800dc18:	f53f af12 	bmi.w	800da40 <_vfiprintf_r+0x4c>
 800dc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc1e:	e711      	b.n	800da44 <_vfiprintf_r+0x50>
 800dc20:	ab03      	add	r3, sp, #12
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	462a      	mov	r2, r5
 800dc26:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <_vfiprintf_r+0x258>)
 800dc28:	a904      	add	r1, sp, #16
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7fb ff88 	bl	8009b40 <_printf_i>
 800dc30:	e7e4      	b.n	800dbfc <_vfiprintf_r+0x208>
 800dc32:	bf00      	nop
 800dc34:	0800e59c 	.word	0x0800e59c
 800dc38:	0800e5bc 	.word	0x0800e5bc
 800dc3c:	0800e57c 	.word	0x0800e57c
 800dc40:	0800e7b4 	.word	0x0800e7b4
 800dc44:	0800e7be 	.word	0x0800e7be
 800dc48:	080095f9 	.word	0x080095f9
 800dc4c:	0800d9cf 	.word	0x0800d9cf
 800dc50:	0800e7ba 	.word	0x0800e7ba

0800dc54 <_read_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d07      	ldr	r5, [pc, #28]	; (800dc74 <_read_r+0x20>)
 800dc58:	4604      	mov	r4, r0
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	2200      	movs	r2, #0
 800dc60:	602a      	str	r2, [r5, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	f7f4 ff0a 	bl	8002a7c <_read>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_read_r+0x1e>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_read_r+0x1e>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	20000898 	.word	0x20000898

0800dc78 <nan>:
 800dc78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc80 <nan+0x8>
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	00000000 	.word	0x00000000
 800dc84:	7ff80000 	.word	0x7ff80000

0800dc88 <_sbrk_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d06      	ldr	r5, [pc, #24]	; (800dca4 <_sbrk_r+0x1c>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	602b      	str	r3, [r5, #0]
 800dc94:	f7f4 ff60 	bl	8002b58 <_sbrk>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d102      	bne.n	800dca2 <_sbrk_r+0x1a>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b103      	cbz	r3, 800dca2 <_sbrk_r+0x1a>
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	20000898 	.word	0x20000898

0800dca8 <__ascii_wctomb>:
 800dca8:	b149      	cbz	r1, 800dcbe <__ascii_wctomb+0x16>
 800dcaa:	2aff      	cmp	r2, #255	; 0xff
 800dcac:	bf85      	ittet	hi
 800dcae:	238a      	movhi	r3, #138	; 0x8a
 800dcb0:	6003      	strhi	r3, [r0, #0]
 800dcb2:	700a      	strbls	r2, [r1, #0]
 800dcb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dcb8:	bf98      	it	ls
 800dcba:	2001      	movls	r0, #1
 800dcbc:	4770      	bx	lr
 800dcbe:	4608      	mov	r0, r1
 800dcc0:	4770      	bx	lr
	...

0800dcc4 <__assert_func>:
 800dcc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcc6:	4614      	mov	r4, r2
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4b09      	ldr	r3, [pc, #36]	; (800dcf0 <__assert_func+0x2c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4605      	mov	r5, r0
 800dcd0:	68d8      	ldr	r0, [r3, #12]
 800dcd2:	b14c      	cbz	r4, 800dce8 <__assert_func+0x24>
 800dcd4:	4b07      	ldr	r3, [pc, #28]	; (800dcf4 <__assert_func+0x30>)
 800dcd6:	9100      	str	r1, [sp, #0]
 800dcd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcdc:	4906      	ldr	r1, [pc, #24]	; (800dcf8 <__assert_func+0x34>)
 800dcde:	462b      	mov	r3, r5
 800dce0:	f000 f80e 	bl	800dd00 <fiprintf>
 800dce4:	f000 f895 	bl	800de12 <abort>
 800dce8:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <__assert_func+0x38>)
 800dcea:	461c      	mov	r4, r3
 800dcec:	e7f3      	b.n	800dcd6 <__assert_func+0x12>
 800dcee:	bf00      	nop
 800dcf0:	20000018 	.word	0x20000018
 800dcf4:	0800e7c5 	.word	0x0800e7c5
 800dcf8:	0800e7d2 	.word	0x0800e7d2
 800dcfc:	0800e800 	.word	0x0800e800

0800dd00 <fiprintf>:
 800dd00:	b40e      	push	{r1, r2, r3}
 800dd02:	b503      	push	{r0, r1, lr}
 800dd04:	4601      	mov	r1, r0
 800dd06:	ab03      	add	r3, sp, #12
 800dd08:	4805      	ldr	r0, [pc, #20]	; (800dd20 <fiprintf+0x20>)
 800dd0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0e:	6800      	ldr	r0, [r0, #0]
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	f7ff fe6f 	bl	800d9f4 <_vfiprintf_r>
 800dd16:	b002      	add	sp, #8
 800dd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd1c:	b003      	add	sp, #12
 800dd1e:	4770      	bx	lr
 800dd20:	20000018 	.word	0x20000018

0800dd24 <_fstat_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	; (800dd44 <_fstat_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f4 fee8 	bl	8002b06 <_fstat>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_fstat_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_fstat_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	20000898 	.word	0x20000898

0800dd48 <_isatty_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	; (800dd64 <_isatty_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f4 fee7 	bl	8002b26 <_isatty>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_isatty_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_isatty_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	20000898 	.word	0x20000898

0800dd68 <memmove>:
 800dd68:	4288      	cmp	r0, r1
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	eb01 0402 	add.w	r4, r1, r2
 800dd70:	d902      	bls.n	800dd78 <memmove+0x10>
 800dd72:	4284      	cmp	r4, r0
 800dd74:	4623      	mov	r3, r4
 800dd76:	d807      	bhi.n	800dd88 <memmove+0x20>
 800dd78:	1e43      	subs	r3, r0, #1
 800dd7a:	42a1      	cmp	r1, r4
 800dd7c:	d008      	beq.n	800dd90 <memmove+0x28>
 800dd7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd86:	e7f8      	b.n	800dd7a <memmove+0x12>
 800dd88:	4402      	add	r2, r0
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	428a      	cmp	r2, r1
 800dd8e:	d100      	bne.n	800dd92 <memmove+0x2a>
 800dd90:	bd10      	pop	{r4, pc}
 800dd92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd9a:	e7f7      	b.n	800dd8c <memmove+0x24>

0800dd9c <__malloc_lock>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <__malloc_lock+0x8>)
 800dd9e:	f7fe be48 	b.w	800ca32 <__retarget_lock_acquire_recursive>
 800dda2:	bf00      	nop
 800dda4:	2000088c 	.word	0x2000088c

0800dda8 <__malloc_unlock>:
 800dda8:	4801      	ldr	r0, [pc, #4]	; (800ddb0 <__malloc_unlock+0x8>)
 800ddaa:	f7fe be43 	b.w	800ca34 <__retarget_lock_release_recursive>
 800ddae:	bf00      	nop
 800ddb0:	2000088c 	.word	0x2000088c

0800ddb4 <_realloc_r>:
 800ddb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb8:	4680      	mov	r8, r0
 800ddba:	4614      	mov	r4, r2
 800ddbc:	460e      	mov	r6, r1
 800ddbe:	b921      	cbnz	r1, 800ddca <_realloc_r+0x16>
 800ddc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	f7ff bc1b 	b.w	800d600 <_malloc_r>
 800ddca:	b92a      	cbnz	r2, 800ddd8 <_realloc_r+0x24>
 800ddcc:	f7ff fbac 	bl	800d528 <_free_r>
 800ddd0:	4625      	mov	r5, r4
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd8:	f000 f822 	bl	800de20 <_malloc_usable_size_r>
 800dddc:	4284      	cmp	r4, r0
 800ddde:	4607      	mov	r7, r0
 800dde0:	d802      	bhi.n	800dde8 <_realloc_r+0x34>
 800dde2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dde6:	d812      	bhi.n	800de0e <_realloc_r+0x5a>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4640      	mov	r0, r8
 800ddec:	f7ff fc08 	bl	800d600 <_malloc_r>
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d0ed      	beq.n	800ddd2 <_realloc_r+0x1e>
 800ddf6:	42bc      	cmp	r4, r7
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	bf28      	it	cs
 800ddfe:	463a      	movcs	r2, r7
 800de00:	f7fe feac 	bl	800cb5c <memcpy>
 800de04:	4631      	mov	r1, r6
 800de06:	4640      	mov	r0, r8
 800de08:	f7ff fb8e 	bl	800d528 <_free_r>
 800de0c:	e7e1      	b.n	800ddd2 <_realloc_r+0x1e>
 800de0e:	4635      	mov	r5, r6
 800de10:	e7df      	b.n	800ddd2 <_realloc_r+0x1e>

0800de12 <abort>:
 800de12:	b508      	push	{r3, lr}
 800de14:	2006      	movs	r0, #6
 800de16:	f000 f833 	bl	800de80 <raise>
 800de1a:	2001      	movs	r0, #1
 800de1c:	f7f4 fe24 	bl	8002a68 <_exit>

0800de20 <_malloc_usable_size_r>:
 800de20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de24:	1f18      	subs	r0, r3, #4
 800de26:	2b00      	cmp	r3, #0
 800de28:	bfbc      	itt	lt
 800de2a:	580b      	ldrlt	r3, [r1, r0]
 800de2c:	18c0      	addlt	r0, r0, r3
 800de2e:	4770      	bx	lr

0800de30 <_raise_r>:
 800de30:	291f      	cmp	r1, #31
 800de32:	b538      	push	{r3, r4, r5, lr}
 800de34:	4604      	mov	r4, r0
 800de36:	460d      	mov	r5, r1
 800de38:	d904      	bls.n	800de44 <_raise_r+0x14>
 800de3a:	2316      	movs	r3, #22
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de46:	b112      	cbz	r2, 800de4e <_raise_r+0x1e>
 800de48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de4c:	b94b      	cbnz	r3, 800de62 <_raise_r+0x32>
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 f830 	bl	800deb4 <_getpid_r>
 800de54:	462a      	mov	r2, r5
 800de56:	4601      	mov	r1, r0
 800de58:	4620      	mov	r0, r4
 800de5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de5e:	f000 b817 	b.w	800de90 <_kill_r>
 800de62:	2b01      	cmp	r3, #1
 800de64:	d00a      	beq.n	800de7c <_raise_r+0x4c>
 800de66:	1c59      	adds	r1, r3, #1
 800de68:	d103      	bne.n	800de72 <_raise_r+0x42>
 800de6a:	2316      	movs	r3, #22
 800de6c:	6003      	str	r3, [r0, #0]
 800de6e:	2001      	movs	r0, #1
 800de70:	e7e7      	b.n	800de42 <_raise_r+0x12>
 800de72:	2400      	movs	r4, #0
 800de74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de78:	4628      	mov	r0, r5
 800de7a:	4798      	blx	r3
 800de7c:	2000      	movs	r0, #0
 800de7e:	e7e0      	b.n	800de42 <_raise_r+0x12>

0800de80 <raise>:
 800de80:	4b02      	ldr	r3, [pc, #8]	; (800de8c <raise+0xc>)
 800de82:	4601      	mov	r1, r0
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	f7ff bfd3 	b.w	800de30 <_raise_r>
 800de8a:	bf00      	nop
 800de8c:	20000018 	.word	0x20000018

0800de90 <_kill_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d07      	ldr	r5, [pc, #28]	; (800deb0 <_kill_r+0x20>)
 800de94:	2300      	movs	r3, #0
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	4611      	mov	r1, r2
 800de9c:	602b      	str	r3, [r5, #0]
 800de9e:	f7f4 fdd3 	bl	8002a48 <_kill>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d102      	bne.n	800deac <_kill_r+0x1c>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	b103      	cbz	r3, 800deac <_kill_r+0x1c>
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	20000898 	.word	0x20000898

0800deb4 <_getpid_r>:
 800deb4:	f7f4 bdc0 	b.w	8002a38 <_getpid>

0800deb8 <_init>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	bf00      	nop
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr

0800dec4 <_fini>:
 800dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec6:	bf00      	nop
 800dec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deca:	bc08      	pop	{r3}
 800decc:	469e      	mov	lr, r3
 800dece:	4770      	bx	lr
