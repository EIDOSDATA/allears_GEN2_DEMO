
allears_GEN2_64PIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800abc8  0800abc8  0001abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b494  0800b494  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b49c  0800b49c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001ec  0800b690  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000898  0800b690  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024060  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000450c  00000000  00000000  0004427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016633  00000000  00000000  00048788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0005edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a0  00000000  00000000  00060338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8af  00000000  00000000  00061ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000740e  00000000  00000000  0007d387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00084795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000847e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abb0 	.word	0x0800abb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800abb0 	.word	0x0800abb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ErrorCallback>:
	}
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	adc1_cur_state = ECHO_ADC1_ERROR;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	4a02      	ldr	r2, [pc, #8]	; (8001004 <HAL_ADC_ErrorCallback+0xc>)
 8000ffc:	7013      	strb	r3, [r2, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 8000ffe:	4a02      	ldr	r2, [pc, #8]	; (8001008 <HAL_ADC_ErrorCallback+0x10>)
 8001000:	7013      	strb	r3, [r2, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8001002:	4770      	bx	lr
 8001004:	20000000 	.word	0x20000000
 8001008:	20000001 	.word	0x20000001

0800100c <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 800100c:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800100e:	217f      	movs	r1, #127	; 0x7f
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <Echo_ADC1_Enable+0x14>)
 8001012:	f002 f808 	bl	8003026 <HAL_ADCEx_Calibration_Start>
 8001016:	b900      	cbnz	r0, 800101a <Echo_ADC1_Enable+0xe>
	{
		Error_Handler();
	}
}
 8001018:	bd08      	pop	{r3, pc}
		Error_Handler();
 800101a:	f000 fcc9 	bl	80019b0 <Error_Handler>
}
 800101e:	e7fb      	b.n	8001018 <Echo_ADC1_Enable+0xc>
 8001020:	200004a8 	.word	0x200004a8

08001024 <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8001024:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001026:	217f      	movs	r1, #127	; 0x7f
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <Echo_ADC2_Enable+0x14>)
 800102a:	f001 fffc 	bl	8003026 <HAL_ADCEx_Calibration_Start>
 800102e:	b900      	cbnz	r0, 8001032 <Echo_ADC2_Enable+0xe>
	{
		Error_Handler();
	}
}
 8001030:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001032:	f000 fcbd 	bl	80019b0 <Error_Handler>
}
 8001036:	e7fb      	b.n	8001030 <Echo_ADC2_Enable+0xc>
 8001038:	2000050c 	.word	0x2000050c

0800103c <Echo_Start_ADC1_Conv>:

/*
 * ADC START CONVERSION
 * */
void Echo_Start_ADC1_Conv()
{
 800103c:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 800103e:	220a      	movs	r2, #10
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <Echo_Start_ADC1_Conv+0x18>)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <Echo_Start_ADC1_Conv+0x1c>)
 8001044:	f001 fee2 	bl	8002e0c <HAL_ADC_Start_DMA>
 8001048:	b900      	cbnz	r0, 800104c <Echo_Start_ADC1_Conv+0x10>
	ADC1_CHK_CH_NUM * ECHO_ADC1_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
	}
}
 800104a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800104c:	f000 fcb0 	bl	80019b0 <Error_Handler>
}
 8001050:	e7fb      	b.n	800104a <Echo_Start_ADC1_Conv+0xe>
 8001052:	bf00      	nop
 8001054:	20000210 	.word	0x20000210
 8001058:	200004a8 	.word	0x200004a8

0800105c <HAL_ADC_ConvCpltCallback>:
{
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	4604      	mov	r4, r0
	if (hadc->Instance == hadc1.Instance)
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_ADC_ConvCpltCallback+0xac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d037      	beq.n	80010da <HAL_ADC_ConvCpltCallback+0x7e>
	if (hadc->Instance == hadc2.Instance)
 800106a:	6822      	ldr	r2, [r4, #0]
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <HAL_ADC_ConvCpltCallback+0xb0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d047      	beq.n	8001104 <HAL_ADC_ConvCpltCallback+0xa8>
}
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001078:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_ADC_ConvCpltCallback+0xb8>)
 800107e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 8001082:	3301      	adds	r3, #1
 8001084:	2b09      	cmp	r3, #9
 8001086:	ddf6      	ble.n	8001076 <HAL_ADC_ConvCpltCallback+0x1a>
		if (vpw_set_flag == true)
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_ADC_ConvCpltCallback+0xbc>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b313      	cbz	r3, 80010d4 <HAL_ADC_ConvCpltCallback+0x78>
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001090:	881e      	ldrh	r6, [r3, #0]
 8001092:	885d      	ldrh	r5, [r3, #2]
 8001094:	1b70      	subs	r0, r6, r5
 8001096:	f7ff fa45 	bl	8000524 <__aeabi_i2d>
 800109a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800109e:	2200      	movs	r2, #0
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_ADC_ConvCpltCallback+0xc0>)
 80010a2:	f7ff fd1b 	bl	8000adc <__aeabi_dcmplt>
 80010a6:	b1a8      	cbz	r0, 80010d4 <HAL_ADC_ConvCpltCallback+0x78>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_ADC_ConvCpltCallback+0xb8>)
 80010aa:	889f      	ldrh	r7, [r3, #4]
 80010ac:	1be8      	subs	r0, r5, r7
 80010ae:	f7ff fa39 	bl	8000524 <__aeabi_i2d>
 80010b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010b6:	2200      	movs	r2, #0
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_ADC_ConvCpltCallback+0xc0>)
 80010ba:	f7ff fd0f 	bl	8000adc <__aeabi_dcmplt>
 80010be:	b148      	cbz	r0, 80010d4 <HAL_ADC_ConvCpltCallback+0x78>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 80010c0:	1bb8      	subs	r0, r7, r6
 80010c2:	f7ff fa2f 	bl	8000524 <__aeabi_i2d>
 80010c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010ca:	2200      	movs	r2, #0
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_ConvCpltCallback+0xc0>)
 80010ce:	f7ff fd05 	bl	8000adc <__aeabi_dcmplt>
 80010d2:	b920      	cbnz	r0, 80010de <HAL_ADC_ConvCpltCallback+0x82>
		Echo_Start_ADC1_Conv();
 80010d4:	f7ff ffb2 	bl	800103c <Echo_Start_ADC1_Conv>
 80010d8:	e7c7      	b.n	800106a <HAL_ADC_ConvCpltCallback+0xe>
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 80010da:	2300      	movs	r3, #0
 80010dc:	e7d2      	b.n	8001084 <HAL_ADC_ConvCpltCallback+0x28>
				Echo_VPW_TP_OFF();
 80010de:	f000 f9ff 	bl	80014e0 <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_ADC_ConvCpltCallback+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e7f4      	b.n	80010d4 <HAL_ADC_ConvCpltCallback+0x78>
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_ADC_ConvCpltCallback+0xc4>)
 80010ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_ADC_ConvCpltCallback+0xc8>)
 80010f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 80010f6:	3301      	adds	r3, #1
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	ddf6      	ble.n	80010ea <HAL_ADC_ConvCpltCallback+0x8e>
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_ADC_ConvCpltCallback+0xcc>)
 80010fe:	2203      	movs	r2, #3
 8001100:	701a      	strb	r2, [r3, #0]
}
 8001102:	e7b7      	b.n	8001074 <HAL_ADC_ConvCpltCallback+0x18>
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 8001104:	2300      	movs	r3, #0
 8001106:	e7f7      	b.n	80010f8 <HAL_ADC_ConvCpltCallback+0x9c>
 8001108:	200004a8 	.word	0x200004a8
 800110c:	2000050c 	.word	0x2000050c
 8001110:	20000210 	.word	0x20000210
 8001114:	2000024c 	.word	0x2000024c
 8001118:	2000039a 	.word	0x2000039a
 800111c:	40340000 	.word	0x40340000
 8001120:	20000224 	.word	0x20000224
 8001124:	20000238 	.word	0x20000238
 8001128:	20000001 	.word	0x20000001

0800112c <Echo_Start_ADC2_Conv>:

void Echo_Start_ADC2_Conv()
{
 800112c:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC2_CONV_BUF,
 800112e:	220a      	movs	r2, #10
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <Echo_Start_ADC2_Conv+0x18>)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <Echo_Start_ADC2_Conv+0x1c>)
 8001134:	f001 fe6a 	bl	8002e0c <HAL_ADC_Start_DMA>
 8001138:	b900      	cbnz	r0, 800113c <Echo_Start_ADC2_Conv+0x10>
	ADC2_CHK_CH_NUM * ECHO_ADC2_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
	}
}
 800113a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800113c:	f000 fc38 	bl	80019b0 <Error_Handler>
}
 8001140:	e7fb      	b.n	800113a <Echo_Start_ADC2_Conv+0xe>
 8001142:	bf00      	nop
 8001144:	20000224 	.word	0x20000224
 8001148:	2000050c 	.word	0x2000050c

0800114c <Echo_Stop_ADC1_Conv>:

/*
 * ADC STOP CONVERSION
 * */
void Echo_Stop_ADC1_Conv()
{
 800114c:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <Echo_Stop_ADC1_Conv+0x14>)
 8001150:	f001 ff28 	bl	8002fa4 <HAL_ADC_Stop_DMA>
 8001154:	b900      	cbnz	r0, 8001158 <Echo_Stop_ADC1_Conv+0xc>
	{
		Error_Handler();
	}
}
 8001156:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001158:	f000 fc2a 	bl	80019b0 <Error_Handler>
}
 800115c:	e7fb      	b.n	8001156 <Echo_Stop_ADC1_Conv+0xa>
 800115e:	bf00      	nop
 8001160:	200004a8 	.word	0x200004a8

08001164 <Echo_Stop_ADC2_Conv>:

void Echo_Stop_ADC2_Conv()
{
 8001164:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <Echo_Stop_ADC2_Conv+0x14>)
 8001168:	f001 ff1c 	bl	8002fa4 <HAL_ADC_Stop_DMA>
 800116c:	b900      	cbnz	r0, 8001170 <Echo_Stop_ADC2_Conv+0xc>
	{
		Error_Handler();
	}
}
 800116e:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001170:	f000 fc1e 	bl	80019b0 <Error_Handler>
}
 8001174:	e7fb      	b.n	800116e <Echo_Stop_ADC2_Conv+0xa>
 8001176:	bf00      	nop
 8001178:	2000050c 	.word	0x2000050c

0800117c <Echo_Stepup_ADC1_AVG>:
 * */
float Echo_Stepup_ADC1_AVG()
{
	float adc1_avg = 0;

	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 800117c:	2300      	movs	r3, #0
	float adc1_avg = 0;
 800117e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011a8 <Echo_Stepup_ADC1_AVG+0x2c>
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001182:	e009      	b.n	8001198 <Echo_Stepup_ADC1_AVG+0x1c>
	{
		adc1_avg += setpup_adc[i];
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <Echo_Stepup_ADC1_AVG+0x30>)
 8001186:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800118a:	ee07 2a90 	vmov	s15, r2
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ee37 7a27 	vadd.f32	s14, s14, s15
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001196:	3301      	adds	r3, #1
 8001198:	2b09      	cmp	r3, #9
 800119a:	ddf3      	ble.n	8001184 <Echo_Stepup_ADC1_AVG+0x8>
	}
	return adc1_avg / ECHO_ADC1_RCV_SIZE;
}
 800119c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011a0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	2000024c 	.word	0x2000024c

080011b0 <Echo_ADC_Calc_Stepup_V>:

/*
 * VOLTAGE CALC FUNCTION
 * */
float Echo_ADC_Calc_Stepup_V(uint16_t in_adc_val, float r1, float r2)
{
 80011b0:	ee07 0a90 	vmov	s15, r0
	float f_adc_val;
	uint32_t vdda = 3300UL;
	float v_ref = (float) (vdda * 0.001);
	float v_out;

	f_adc_val = in_adc_val / 4095.f;
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011d8 <Echo_ADC_Calc_Stepup_V+0x28>
 80011bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80011c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011dc <Echo_ADC_Calc_Stepup_V+0x2c>
 80011c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80011cc:	ee80 7a20 	vdiv.f32	s14, s0, s1

	return v_out;
}
 80011d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	457ff000 	.word	0x457ff000
 80011dc:	40533333 	.word	0x40533333

080011e0 <Echo_Get_ADC1_State>:
/**********************/

echo_adc1_state_t Echo_Get_ADC1_State(void)
{
	return ECHO_ADC1_CUR_STATE;
}
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <Echo_Get_ADC1_State+0x8>)
 80011e2:	7818      	ldrb	r0, [r3, #0]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000208 	.word	0x20000208

080011ec <Echo_Set_ADC1_State>:
{
	return ECHO_ADC2_CUR_STATE;
}

void Echo_Set_ADC1_State(echo_adc1_state_t state)
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	4604      	mov	r4, r0
	switch (state)
 80011f0:	1e43      	subs	r3, r0, #1
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d806      	bhi.n	8001204 <Echo_Set_ADC1_State+0x18>
 80011f6:	e8df f003 	tbb	[pc, r3]
 80011fa:	0803      	.short	0x0803
 80011fc:	0b05      	.short	0x0b05
 80011fe:	0f          	.byte	0x0f
 80011ff:	00          	.byte	0x00
	{
	case ECHO_ADC1_STATE_INIT:
		break;
	case ECHO_ADC1_IDLE:
		Echo_Stop_ADC1_Conv();
 8001200:	f7ff ffa4 	bl	800114c <Echo_Stop_ADC1_Conv>
		Echo_Stop_ADC1_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC1_CUR_STATE = state;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <Echo_Set_ADC1_State+0x34>)
 8001206:	701c      	strb	r4, [r3, #0]
}
 8001208:	bd10      	pop	{r4, pc}
		Echo_Start_ADC1_Conv();
 800120a:	f7ff ff17 	bl	800103c <Echo_Start_ADC1_Conv>
		break;
 800120e:	e7f9      	b.n	8001204 <Echo_Set_ADC1_State+0x18>
		adc1_cur_state = ECHO_ADC1_RUN;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <Echo_Set_ADC1_State+0x38>)
 8001212:	2202      	movs	r2, #2
 8001214:	701a      	strb	r2, [r3, #0]
		break;
 8001216:	e7f5      	b.n	8001204 <Echo_Set_ADC1_State+0x18>
		Echo_Stop_ADC1_Conv();
 8001218:	f7ff ff98 	bl	800114c <Echo_Stop_ADC1_Conv>
		break;
 800121c:	e7f2      	b.n	8001204 <Echo_Set_ADC1_State+0x18>
 800121e:	bf00      	nop
 8001220:	20000208 	.word	0x20000208
 8001224:	20000000 	.word	0x20000000

08001228 <Echo_Set_ADC2_State>:

void Echo_Set_ADC2_State(echo_adc2_state_t state)
{
 8001228:	b510      	push	{r4, lr}
 800122a:	4604      	mov	r4, r0
	switch (state)
 800122c:	1e43      	subs	r3, r0, #1
 800122e:	2b04      	cmp	r3, #4
 8001230:	d806      	bhi.n	8001240 <Echo_Set_ADC2_State+0x18>
 8001232:	e8df f003 	tbb	[pc, r3]
 8001236:	0803      	.short	0x0803
 8001238:	0b05      	.short	0x0b05
 800123a:	0f          	.byte	0x0f
 800123b:	00          	.byte	0x00
	{
	case ECHO_ADC2_STATE_INIT:
		break;
	case ECHO_ADC2_IDLE:
		Echo_Stop_ADC2_Conv();
 800123c:	f7ff ff92 	bl	8001164 <Echo_Stop_ADC2_Conv>
		Echo_Stop_ADC2_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC2_CUR_STATE = state;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <Echo_Set_ADC2_State+0x34>)
 8001242:	701c      	strb	r4, [r3, #0]
}
 8001244:	bd10      	pop	{r4, pc}
		Echo_Start_ADC2_Conv();
 8001246:	f7ff ff71 	bl	800112c <Echo_Start_ADC2_Conv>
		break;
 800124a:	e7f9      	b.n	8001240 <Echo_Set_ADC2_State+0x18>
		Echo_Set_ADC2_State(ECHO_ADC2_RUN);
 800124c:	2002      	movs	r0, #2
 800124e:	f7ff ffeb 	bl	8001228 <Echo_Set_ADC2_State>
		break;
 8001252:	e7f5      	b.n	8001240 <Echo_Set_ADC2_State+0x18>
		Echo_Stop_ADC2_Conv();
 8001254:	f7ff ff86 	bl	8001164 <Echo_Stop_ADC2_Conv>
		break;
 8001258:	e7f2      	b.n	8001240 <Echo_Set_ADC2_State+0x18>
 800125a:	bf00      	nop
 800125c:	2000020c 	.word	0x2000020c

08001260 <Echo_ADC_State_Init>:
{
 8001260:	b508      	push	{r3, lr}
	ECHO_ADC1_CUR_STATE = echo_adc1_state_max;
 8001262:	2306      	movs	r3, #6
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <Echo_ADC_State_Init+0x24>)
 8001266:	7013      	strb	r3, [r2, #0]
	ECHO_ADC2_CUR_STATE = echo_adc2_state_max;
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <Echo_ADC_State_Init+0x28>)
 800126a:	7013      	strb	r3, [r2, #0]
	Echo_Set_ADC1_State(ECHO_ADC1_STATE_INIT);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ffbd 	bl	80011ec <Echo_Set_ADC1_State>
	Echo_Set_ADC2_State(ECHO_ADC2_STATE_INIT);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff ffd8 	bl	8001228 <Echo_Set_ADC2_State>
	Echo_ADC1_Enable();
 8001278:	f7ff fec8 	bl	800100c <Echo_ADC1_Enable>
	Echo_ADC2_Enable();
 800127c:	f7ff fed2 	bl	8001024 <Echo_ADC2_Enable>
}
 8001280:	bd08      	pop	{r3, pc}
 8001282:	bf00      	nop
 8001284:	20000208 	.word	0x20000208
 8001288:	2000020c 	.word	0x2000020c

0800128c <Echo_Flash_Read>:
	return HAL_OK;
}

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <Echo_Flash_Read+0x2c>)
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <Echo_Flash_Read+0x30>)
 8001290:	6810      	ldr	r0, [r2, #0]
 8001292:	6018      	str	r0, [r3, #0]
 8001294:	8892      	ldrh	r2, [r2, #4]
 8001296:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b93b      	cbnz	r3, 80012ac <Echo_Flash_Read+0x20>
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Echo_Flash_Read+0x2c>)
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	b933      	cbnz	r3, 80012b0 <Echo_Flash_Read+0x24>
			&& pwm_param.pulse_width == 0)
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <Echo_Flash_Read+0x2c>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	b12b      	cbz	r3, 80012b4 <Echo_Flash_Read+0x28>
	{
		return HAL_ERROR;
	}
	else
	{
		return HAL_OK;
 80012a8:	2000      	movs	r0, #0
 80012aa:	4770      	bx	lr
 80012ac:	2000      	movs	r0, #0
 80012ae:	4770      	bx	lr
 80012b0:	2000      	movs	r0, #0
 80012b2:	4770      	bx	lr
		return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
	}
}
 80012b6:	4770      	bx	lr
 80012b8:	20000394 	.word	0x20000394
 80012bc:	0801e000 	.word	0x0801e000

080012c0 <Echo_LED_CTRL>:
	ECHO_LED_ON = false;
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
 80012c0:	b508      	push	{r3, lr}
	if (colors == ECHO_LED_COLOR_NONE)
 80012c2:	b148      	cbz	r0, 80012d8 <Echo_LED_CTRL+0x18>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 80012c4:	f010 0f02 	tst.w	r0, #2
 80012c8:	d00d      	beq.n	80012e6 <Echo_LED_CTRL+0x26>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <Echo_LED_CTRL+0x34>)
 80012d2:	f002 fa53 	bl	800377c <HAL_GPIO_WritePin>
	Echo_LED_Blue_On();
	else
	Echo_LED_Blue_Off();
#endif
	}
}
 80012d6:	bd08      	pop	{r3, pc}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <Echo_LED_CTRL+0x34>)
 80012e0:	f002 fa4c 	bl	800377c <HAL_GPIO_WritePin>
}
 80012e4:	e7f7      	b.n	80012d6 <Echo_LED_CTRL+0x16>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ec:	4801      	ldr	r0, [pc, #4]	; (80012f4 <Echo_LED_CTRL+0x34>)
 80012ee:	f002 fa45 	bl	800377c <HAL_GPIO_WritePin>
}
 80012f2:	e7f0      	b.n	80012d6 <Echo_LED_CTRL+0x16>
 80012f4:	48000400 	.word	0x48000400

080012f8 <Echo_LED_Init>:

void Echo_LED_Init(void)
{
 80012f8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <Echo_LED_Init+0x18>)
 8001302:	f002 fa3b 	bl	800377c <HAL_GPIO_WritePin>
	Echo_LED_Off_All();
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <Echo_LED_Init+0x1c>)
 8001308:	2200      	movs	r2, #0
 800130a:	735a      	strb	r2, [r3, #13]
}
 800130c:	bd08      	pop	{r3, pc}
 800130e:	bf00      	nop
 8001310:	48000400 	.word	0x48000400
 8001314:	20000260 	.word	0x20000260

08001318 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 8001318:	b538      	push	{r3, r4, r5, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <Echo_LED_Enable+0x24>)
 800131c:	f005 fe4a 	bl	8006fb4 <puts>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001320:	4d07      	ldr	r5, [pc, #28]	; (8001340 <Echo_LED_Enable+0x28>)
 8001322:	2400      	movs	r4, #0
 8001324:	736c      	strb	r4, [r5, #13]
	ECHO_LED_ON = false;
 8001326:	702c      	strb	r4, [r5, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001328:	4622      	mov	r2, r4
 800132a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <Echo_LED_Enable+0x2c>)
 8001330:	f002 fa24 	bl	800377c <HAL_GPIO_WritePin>
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 8001334:	60ac      	str	r4, [r5, #8]
 8001336:	732c      	strb	r4, [r5, #12]
}
 8001338:	bd38      	pop	{r3, r4, r5, pc}
 800133a:	bf00      	nop
 800133c:	0800abc8 	.word	0x0800abc8
 8001340:	20000260 	.word	0x20000260
 8001344:	48000400 	.word	0x48000400

08001348 <Echo_Set_LED_State>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_Set_LED_State(echo_led_sate_t led_state)
{
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	4604      	mov	r4, r0
	echo_led_state_ind_t led_ind;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
 800134e:	481b      	ldr	r0, [pc, #108]	; (80013bc <Echo_Set_LED_State+0x74>)
 8001350:	f005 fe30 	bl	8006fb4 <puts>
#endif
	Echo_LED_Enable();
 8001354:	f7ff ffe0 	bl	8001318 <Echo_LED_Enable>

	if (ECHO_LED_IND_DISABLED() == true)
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <Echo_Set_LED_State+0x78>)
 800135a:	7b1b      	ldrb	r3, [r3, #12]
 800135c:	bb13      	cbnz	r3, 80013a4 <Echo_Set_LED_State+0x5c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
 800135e:	2c02      	cmp	r4, #2
 8001360:	d900      	bls.n	8001364 <Echo_Set_LED_State+0x1c>
		led_state = ECHO_LED_STATE_NONE;
 8001362:	2400      	movs	r4, #0

	if (led_state == ECHO_LED_CUR_STATE)
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <Echo_Set_LED_State+0x78>)
 8001366:	7b5b      	ldrb	r3, [r3, #13]
 8001368:	42a3      	cmp	r3, r4
 800136a:	d01b      	beq.n	80013a4 <Echo_Set_LED_State+0x5c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <Echo_Set_LED_State+0x7c>)
 800136e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001372:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8001376:	f813 6012 	ldrb.w	r6, [r3, r2, lsl #1]
 800137a:	f88d 6000 	strb.w	r6, [sp]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 800137e:	884d      	ldrh	r5, [r1, #2]
 8001380:	f8ad 5002 	strh.w	r5, [sp, #2]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);
 8001384:	888b      	ldrh	r3, [r1, #4]
 8001386:	f8ad 3004 	strh.w	r3, [sp, #4]

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ff98 	bl	80012c0 <Echo_LED_CTRL>

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 8001390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001394:	429d      	cmp	r5, r3
 8001396:	d107      	bne.n	80013a8 <Echo_Set_LED_State+0x60>
	{
		ECHO_LED_ON = false;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <Echo_Set_LED_State+0x78>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = 0;
 800139e:	605a      	str	r2, [r3, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <Echo_Set_LED_State+0x78>)
 80013a2:	735c      	strb	r4, [r3, #13]

}
 80013a4:	b002      	add	sp, #8
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 80013a8:	4630      	mov	r0, r6
 80013aa:	f7ff ff89 	bl	80012c0 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 80013ae:	4d04      	ldr	r5, [pc, #16]	; (80013c0 <Echo_Set_LED_State+0x78>)
 80013b0:	2301      	movs	r3, #1
 80013b2:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 80013b4:	f001 f864 	bl	8002480 <HAL_GetTick>
 80013b8:	6068      	str	r0, [r5, #4]
 80013ba:	e7f1      	b.n	80013a0 <Echo_Set_LED_State+0x58>
 80013bc:	0800abdc 	.word	0x0800abdc
 80013c0:	20000260 	.word	0x20000260
 80013c4:	0800abf4 	.word	0x0800abf4

080013c8 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80013c8:	b500      	push	{lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 80013ce:	280a      	cmp	r0, #10
 80013d0:	d00a      	beq.n	80013e8 <__io_putchar+0x20>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 80013d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d6:	2201      	movs	r2, #1
 80013d8:	a901      	add	r1, sp, #4
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <__io_putchar+0x30>)
 80013dc:	f004 fd47 	bl	8005e6e <HAL_UART_Transmit>
	return ch;
}
 80013e0:	9801      	ldr	r0, [sp, #4]
 80013e2:	b003      	add	sp, #12
 80013e4:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	2201      	movs	r2, #1
 80013ee:	4903      	ldr	r1, [pc, #12]	; (80013fc <__io_putchar+0x34>)
 80013f0:	4801      	ldr	r0, [pc, #4]	; (80013f8 <__io_putchar+0x30>)
 80013f2:	f004 fd3c 	bl	8005e6e <HAL_UART_Transmit>
 80013f6:	e7ec      	b.n	80013d2 <__io_putchar+0xa>
 80013f8:	200007f8 	.word	0x200007f8
 80013fc:	0800af84 	.word	0x0800af84

08001400 <Echo_Print_Manual>:

/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
 8001400:	b508      	push	{r3, lr}
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <Echo_Print_Manual+0xc>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	f005 fdd5 	bl	8006fb4 <puts>
}
 800140a:	bd08      	pop	{r3, pc}
 800140c:	20000004 	.word	0x20000004

08001410 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001410:	b500      	push	{lr}
 8001412:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 8001414:	2100      	movs	r1, #0
 8001416:	9100      	str	r1, [sp, #0]
 8001418:	2224      	movs	r2, #36	; 0x24
 800141a:	a801      	add	r0, sp, #4
 800141c:	f004 fec2 	bl	80061a4 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <Echo_Print_Version+0x28>)
 8001422:	4906      	ldr	r1, [pc, #24]	; (800143c <Echo_Print_Version+0x2c>)
 8001424:	4668      	mov	r0, sp
 8001426:	f005 fdd3 	bl	8006fd0 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 800142a:	4668      	mov	r0, sp
 800142c:	f005 fdc2 	bl	8006fb4 <puts>
}
 8001430:	b00b      	add	sp, #44	; 0x2c
 8001432:	f85d fb04 	ldr.w	pc, [sp], #4
 8001436:	bf00      	nop
 8001438:	0800ac08 	.word	0x0800ac08
 800143c:	0800ac14 	.word	0x0800ac14

08001440 <Echo_Shell_Init>:
	}
}
/**********************/

void Echo_Shell_Init(void)
{
 8001440:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 8001442:	4c05      	ldr	r4, [pc, #20]	; (8001458 <Echo_Shell_Init+0x18>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	2100      	movs	r1, #0
 800144a:	1c60      	adds	r0, r4, #1
 800144c:	f004 feaa 	bl	80061a4 <memset>
	SHELL_MSG_RCV_POS = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	7023      	strb	r3, [r4, #0]
}
 8001454:	bd10      	pop	{r4, pc}
 8001456:	bf00      	nop
 8001458:	20000270 	.word	0x20000270

0800145c <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b508      	push	{r3, lr}
 800145e:	ed2d 8b02 	vpush	{d8}
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 8001462:	6802      	ldr	r2, [r0, #0]
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001466:	429a      	cmp	r2, r3
 8001468:	d002      	beq.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x14>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 800146a:	ecbd 8b02 	vpop	{d8}
 800146e:	bd08      	pop	{r3, pc}
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 8001470:	f7ff feb6 	bl	80011e0 <Echo_Get_ADC1_State>
 8001474:	2803      	cmp	r0, #3
 8001476:	d1f8      	bne.n	800146a <HAL_TIM_PeriodElapsedCallback+0xe>
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 8001478:	f7ff fe80 	bl	800117c <Echo_Stepup_ADC1_AVG>
 800147c:	eeb0 8a40 	vmov.f32	s16, s0
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 8001480:	ee10 0a10 	vmov	r0, s0
 8001484:	f7ff f860 	bl	8000548 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800148e:	f005 fd0b 	bl	8006ea8 <iprintf>
			ECHO_SHELL_PRINT(
 8001492:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8001496:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80014d0 <HAL_TIM_PeriodElapsedCallback+0x74>
 800149a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80014d4 <HAL_TIM_PeriodElapsedCallback+0x78>
 800149e:	ee18 3a10 	vmov	r3, s16
 80014a2:	b298      	uxth	r0, r3
 80014a4:	f7ff fe84 	bl	80011b0 <Echo_ADC_Calc_Stepup_V>
 80014a8:	ee10 0a10 	vmov	r0, s0
 80014ac:	f7ff f84c 	bl	8000548 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014b6:	f005 fcf7 	bl	8006ea8 <iprintf>
			ECHO_SHELL_PRINT(("----------\r\n"));
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80014bc:	f005 fd7a 	bl	8006fb4 <puts>
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff fe93 	bl	80011ec <Echo_Set_ADC1_State>
}
 80014c6:	e7d0      	b.n	800146a <HAL_TIM_PeriodElapsedCallback+0xe>
 80014c8:	40014400 	.word	0x40014400
 80014cc:	0800aed8 	.word	0x0800aed8
 80014d0:	42dc0000 	.word	0x42dc0000
 80014d4:	45610000 	.word	0x45610000
 80014d8:	0800aee8 	.word	0x0800aee8
 80014dc:	0800af00 	.word	0x0800af00

080014e0 <Echo_VPW_TP_OFF>:
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
}

void Echo_VPW_TP_OFF(void)
{
 80014e0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f002 f946 	bl	800377c <HAL_GPIO_WritePin>
}
 80014f0:	bd08      	pop	{r3, pc}
	...

080014f4 <Echo_Pulse_Prm_Config>:
#ifdef ECHO_PULSE_DMA
/*
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_Prm_Config()
{
 80014f4:	b410      	push	{r4}
	/* HZ SETTING */
	TIM2->CNT = 0;
 80014f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014fa:	2300      	movs	r3, #0
 80014fc:	6243      	str	r3, [r0, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 80014fe:	4910      	ldr	r1, [pc, #64]	; (8001540 <Echo_Pulse_Prm_Config+0x4c>)
 8001500:	888a      	ldrh	r2, [r1, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <Echo_Pulse_Prm_Config+0x50>)
 8001504:	fb93 f3f2 	sdiv	r3, r3, r2
 8001508:	3b01      	subs	r3, #1
 800150a:	62c3      	str	r3, [r0, #44]	; 0x2c

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 800150c:	884a      	ldrh	r2, [r1, #2]
 800150e:	f102 030a 	add.w	r3, r2, #10
 8001512:	6383      	str	r3, [r0, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 8001514:	880b      	ldrh	r3, [r1, #0]
 8001516:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800151a:	f100 040a 	add.w	r4, r0, #10
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <Echo_Pulse_Prm_Config+0x54>)
 8001520:	600c      	str	r4, [r1, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 8001522:	4413      	add	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001526:	3205      	adds	r2, #5
 8001528:	4908      	ldr	r1, [pc, #32]	; (800154c <Echo_Pulse_Prm_Config+0x58>)
 800152a:	600a      	str	r2, [r1, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 800152c:	3305      	adds	r3, #5
 800152e:	604b      	str	r3, [r1, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 8001530:	3005      	adds	r0, #5
 8001532:	6088      	str	r0, [r1, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 8001534:	2305      	movs	r3, #5
 8001536:	60cb      	str	r3, [r1, #12]
}
 8001538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000394 	.word	0x20000394
 8001544:	000f4240 	.word	0x000f4240
 8001548:	2000037c 	.word	0x2000037c
 800154c:	20000384 	.word	0x20000384

08001550 <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 8001550:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001552:	2100      	movs	r1, #0
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <Echo_StepUP_Stop+0x14>)
 8001556:	f003 feb1 	bl	80052bc <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <Echo_StepUP_Stop+0x18>)
 800155c:	f003 f8c4 	bl	80046e8 <HAL_TIM_Base_Stop_IT>
}
 8001560:	bd08      	pop	{r3, pc}
 8001562:	bf00      	nop
 8001564:	20000690 	.word	0x20000690
 8001568:	200006dc 	.word	0x200006dc

0800156c <Echo_Stim_Stop>:
{
 800156c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 800156e:	4c0a      	ldr	r4, [pc, #40]	; (8001598 <Echo_Stim_Stop+0x2c>)
 8001570:	2104      	movs	r1, #4
 8001572:	4620      	mov	r0, r4
 8001574:	f003 fea2 	bl	80052bc <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8001578:	2100      	movs	r1, #0
 800157a:	4620      	mov	r0, r4
 800157c:	f003 fd78 	bl	8005070 <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 8001580:	210c      	movs	r1, #12
 8001582:	4620      	mov	r0, r4
 8001584:	f003 fd74 	bl	8005070 <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 8001588:	f7ff ffe2 	bl	8001550 <Echo_StepUP_Stop>
	Echo_Stop_ADC2_Conv();
 800158c:	f7ff fdea 	bl	8001164 <Echo_Stop_ADC2_Conv>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001590:	4620      	mov	r0, r4
 8001592:	f003 f8a9 	bl	80046e8 <HAL_TIM_Base_Stop_IT>
}
 8001596:	bd10      	pop	{r4, pc}
 8001598:	20000728 	.word	0x20000728

0800159c <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 800159c:	b508      	push	{r3, lr}
	TIM1->CCR1 = v_step_tv;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <Echo_StepUP_Start+0x1c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <Echo_StepUP_Start+0x20>)
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015a6:	2100      	movs	r1, #0
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <Echo_StepUP_Start+0x24>)
 80015aa:	f003 fdef 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <Echo_StepUP_Start+0x28>)
 80015b0:	f003 f864 	bl	800467c <HAL_TIM_Base_Start_IT>
}
 80015b4:	bd08      	pop	{r3, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	20000690 	.word	0x20000690
 80015c4:	200006dc 	.word	0x200006dc

080015c8 <Echo_Stim_Start>:
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig =
 80015cc:	2300      	movs	r3, #0
 80015ce:	9307      	str	r3, [sp, #28]
 80015d0:	9308      	str	r3, [sp, #32]
 80015d2:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC =
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	9303      	str	r3, [sp, #12]
 80015dc:	9304      	str	r3, [sp, #16]
 80015de:	9305      	str	r3, [sp, #20]
 80015e0:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 80015e2:	4841      	ldr	r0, [pc, #260]	; (80016e8 <Echo_Stim_Start+0x120>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 79;
 80015ea:	224f      	movs	r2, #79	; 0x4f
 80015ec:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 999;
 80015f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f4:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015fc:	f003 fa4e 	bl	8004a9c <HAL_TIM_OC_Init>
 8001600:	2800      	cmp	r0, #0
 8001602:	d15e      	bne.n	80016c2 <Echo_Stim_Start+0xfa>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001604:	4838      	ldr	r0, [pc, #224]	; (80016e8 <Echo_Stim_Start+0x120>)
 8001606:	f003 fa79 	bl	8004afc <HAL_TIM_PWM_Init>
 800160a:	2800      	cmp	r0, #0
 800160c:	d15c      	bne.n	80016c8 <Echo_Stim_Start+0x100>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800160e:	2320      	movs	r3, #32
 8001610:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001616:	a907      	add	r1, sp, #28
 8001618:	4833      	ldr	r0, [pc, #204]	; (80016e8 <Echo_Stim_Start+0x120>)
 800161a:	f003 fea5 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	2800      	cmp	r0, #0
 8001620:	d155      	bne.n	80016ce <Echo_Stim_Start+0x106>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001622:	2330      	movs	r3, #48	; 0x30
 8001624:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 5;
 8001626:	2305      	movs	r3, #5
 8001628:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2200      	movs	r2, #0
 800162c:	9202      	str	r2, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	9204      	str	r2, [sp, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	4669      	mov	r1, sp
 8001632:	482d      	ldr	r0, [pc, #180]	; (80016e8 <Echo_Stim_Start+0x120>)
 8001634:	f003 face 	bl	8004bd4 <HAL_TIM_OC_ConfigChannel>
 8001638:	2800      	cmp	r0, #0
 800163a:	d14b      	bne.n	80016d4 <Echo_Stim_Start+0x10c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1010;
 8001640:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001644:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001646:	2204      	movs	r2, #4
 8001648:	4669      	mov	r1, sp
 800164a:	4827      	ldr	r0, [pc, #156]	; (80016e8 <Echo_Stim_Start+0x120>)
 800164c:	f003 faff 	bl	8004c4e <HAL_TIM_PWM_ConfigChannel>
 8001650:	2800      	cmp	r0, #0
 8001652:	d142      	bne.n	80016da <Echo_Stim_Start+0x112>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001654:	4824      	ldr	r0, [pc, #144]	; (80016e8 <Echo_Stim_Start+0x120>)
 8001656:	6802      	ldr	r2, [r0, #0]
 8001658:	6993      	ldr	r3, [r2, #24]
 800165a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800165e:	6193      	str	r3, [r2, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001660:	2330      	movs	r3, #48	; 0x30
 8001662:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1040;
 8001664:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001668:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800166a:	220c      	movs	r2, #12
 800166c:	4669      	mov	r1, sp
 800166e:	f003 fab1 	bl	8004bd4 <HAL_TIM_OC_ConfigChannel>
 8001672:	2800      	cmp	r0, #0
 8001674:	d134      	bne.n	80016e0 <Echo_Stim_Start+0x118>
	HAL_TIM_MspPostInit(&htim2);
 8001676:	4c1c      	ldr	r4, [pc, #112]	; (80016e8 <Echo_Stim_Start+0x120>)
 8001678:	4620      	mov	r0, r4
 800167a:	f000 fcf9 	bl	8002070 <HAL_TIM_MspPostInit>
	Echo_Pulse_Prm_Config();
 800167e:	f7ff ff39 	bl	80014f4 <Echo_Pulse_Prm_Config>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 8001682:	2104      	movs	r1, #4
 8001684:	4620      	mov	r0, r4
 8001686:	f003 fd81 	bl	800518c <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 800168a:	2304      	movs	r3, #4
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <Echo_Stim_Start+0x124>)
 800168e:	2100      	movs	r1, #0
 8001690:	4620      	mov	r0, r4
 8001692:	f003 fb89 	bl	8004da8 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <Echo_Stim_Start+0x128>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f023 0306 	bic.w	r3, r3, #6
 80016a0:	6013      	str	r3, [r2, #0]
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 80016a2:	2302      	movs	r3, #2
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <Echo_Stim_Start+0x12c>)
 80016a6:	210c      	movs	r1, #12
 80016a8:	4620      	mov	r0, r4
 80016aa:	f003 fb7d 	bl	8004da8 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <Echo_Stim_Start+0x130>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f023 0306 	bic.w	r3, r3, #6
 80016b8:	6013      	str	r3, [r2, #0]
	Echo_StepUP_Start();
 80016ba:	f7ff ff6f 	bl	800159c <Echo_StepUP_Start>
}
 80016be:	b00a      	add	sp, #40	; 0x28
 80016c0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80016c2:	f000 f975 	bl	80019b0 <Error_Handler>
 80016c6:	e79d      	b.n	8001604 <Echo_Stim_Start+0x3c>
		Error_Handler();
 80016c8:	f000 f972 	bl	80019b0 <Error_Handler>
 80016cc:	e79f      	b.n	800160e <Echo_Stim_Start+0x46>
		Error_Handler();
 80016ce:	f000 f96f 	bl	80019b0 <Error_Handler>
 80016d2:	e7a6      	b.n	8001622 <Echo_Stim_Start+0x5a>
		Error_Handler();
 80016d4:	f000 f96c 	bl	80019b0 <Error_Handler>
 80016d8:	e7b0      	b.n	800163c <Echo_Stim_Start+0x74>
		Error_Handler();
 80016da:	f000 f969 	bl	80019b0 <Error_Handler>
 80016de:	e7b9      	b.n	8001654 <Echo_Stim_Start+0x8c>
		Error_Handler();
 80016e0:	f000 f966 	bl	80019b0 <Error_Handler>
 80016e4:	e7c7      	b.n	8001676 <Echo_Stim_Start+0xae>
 80016e6:	bf00      	nop
 80016e8:	20000728 	.word	0x20000728
 80016ec:	20000384 	.word	0x20000384
 80016f0:	20000600 	.word	0x20000600
 80016f4:	2000037c 	.word	0x2000037c
 80016f8:	20000648 	.word	0x20000648

080016fc <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 80016fc:	b500      	push	{lr}
 80016fe:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001700:	20c8      	movs	r0, #200	; 0xc8
 8001702:	f000 fec3 	bl	800248c <HAL_Delay>
	char res_msg[55] =
 8001706:	2100      	movs	r1, #0
 8001708:	9100      	str	r1, [sp, #0]
 800170a:	2233      	movs	r2, #51	; 0x33
 800170c:	a801      	add	r0, sp, #4
 800170e:	f004 fd49 	bl	80061a4 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001712:	f7ff fdbb 	bl	800128c <Echo_Flash_Read>
 8001716:	b150      	cbz	r0, 800172e <Echo_PCI_State_Init+0x32>
	{
		pwm_param.dead_time = 20;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <Echo_PCI_State_Init+0x68>)
 800171a:	2214      	movs	r2, #20
 800171c:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 800171e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001722:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8001724:	2264      	movs	r2, #100	; 0x64
 8001726:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <Echo_PCI_State_Init+0x6c>)
 800172a:	220a      	movs	r2, #10
 800172c:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 800172e:	f7ff fe6f 	bl	8001410 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001732:	f002 fd55 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <Echo_PCI_State_Init+0x70>)
 800173a:	4668      	mov	r0, sp
 800173c:	f005 fc48 	bl	8006fd0 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001740:	4668      	mov	r0, sp
 8001742:	f005 fc37 	bl	8006fb4 <puts>
	Echo_ADC_State_Init();
 8001746:	f7ff fd8b 	bl	8001260 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 800174a:	f7ff fe59 	bl	8001400 <Echo_Print_Manual>
	Echo_LED_Init();
 800174e:	f7ff fdd3 	bl	80012f8 <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8001752:	f000 f84d 	bl	80017f0 <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 8001756:	f7ff fe73 	bl	8001440 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 800175a:	f000 f853 	bl	8001804 <Echo_Uart2_INTERRUPT_ENA>
}
 800175e:	b00f      	add	sp, #60	; 0x3c
 8001760:	f85d fb04 	ldr.w	pc, [sp], #4
 8001764:	20000394 	.word	0x20000394
 8001768:	20000008 	.word	0x20000008
 800176c:	0800af0c 	.word	0x0800af0c

08001770 <Echo_Set_Sys_FSM_State>:
	 }
	 */
}

void Echo_Set_Sys_FSM_State(echo_sys_state_t state)
{
 8001770:	b510      	push	{r4, lr}
 8001772:	4604      	mov	r4, r0
	/*
	 if (ECHO_CUR_STATE == state || state >= echo_state_max)
	 return;
	 */

	switch (state)
 8001774:	2803      	cmp	r0, #3
 8001776:	d828      	bhi.n	80017ca <Echo_Set_Sys_FSM_State+0x5a>
 8001778:	e8df f000 	tbb	[pc, r0]
 800177c:	20140802 	.word	0x20140802
	{

	case ECHO_SYS_STATE_INIT:
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <Echo_Set_Sys_FSM_State+0x64>)
 8001782:	f005 fc17 	bl	8006fb4 <puts>
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
#endif
		break;

	}
	ECHO_CUR_SYS_STATE = state;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <Echo_Set_Sys_FSM_State+0x68>)
 8001788:	701c      	strb	r4, [r3, #0]
}
 800178a:	bd10      	pop	{r4, pc}
		Echo_Stim_Stop();
 800178c:	f7ff feee 	bl	800156c <Echo_Stim_Stop>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fdd9 	bl	8001348 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_IDLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <Echo_Set_Sys_FSM_State+0x6c>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <Echo_Set_Sys_FSM_State+0x70>)
 800179e:	f005 fc09 	bl	8006fb4 <puts>
		break;
 80017a2:	e7f0      	b.n	8001786 <Echo_Set_Sys_FSM_State+0x16>
		Echo_Stim_Start();
 80017a4:	f7ff ff10 	bl	80015c8 <Echo_Stim_Start>
		Echo_Set_LED_State(ECHO_LED_RUN);
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fdcd 	bl	8001348 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_RUN;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <Echo_Set_Sys_FSM_State+0x6c>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <Echo_Set_Sys_FSM_State+0x74>)
 80017b6:	f005 fbfd 	bl	8006fb4 <puts>
		break;
 80017ba:	e7e4      	b.n	8001786 <Echo_Set_Sys_FSM_State+0x16>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fdc3 	bl	8001348 <Echo_Set_LED_State>
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <Echo_Set_Sys_FSM_State+0x78>)
 80017c4:	f005 fbf6 	bl	8006fb4 <puts>
		break;
 80017c8:	e7dd      	b.n	8001786 <Echo_Set_Sys_FSM_State+0x16>
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
 80017ca:	4601      	mov	r1, r0
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <Echo_Set_Sys_FSM_State+0x7c>)
 80017ce:	f005 fb6b 	bl	8006ea8 <iprintf>
		break;
 80017d2:	e7d8      	b.n	8001786 <Echo_Set_Sys_FSM_State+0x16>
 80017d4:	0800af3c 	.word	0x0800af3c
 80017d8:	2000039c 	.word	0x2000039c
 80017dc:	20000000 	.word	0x20000000
 80017e0:	0800af50 	.word	0x0800af50
 80017e4:	0800af64 	.word	0x0800af64
 80017e8:	0800af74 	.word	0x0800af74
 80017ec:	0800af88 	.word	0x0800af88

080017f0 <Echo_Sys_FSM_State_Init>:
{
 80017f0:	b508      	push	{r3, lr}
	ECHO_CUR_SYS_STATE = echo_sys_state_max;
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <Echo_Sys_FSM_State_Init+0x10>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	701a      	strb	r2, [r3, #0]
	Echo_Set_Sys_FSM_State(ECHO_SYS_STATE_INIT);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ffb9 	bl	8001770 <Echo_Set_Sys_FSM_State>
}
 80017fe:	bd08      	pop	{r3, pc}
 8001800:	2000039c 	.word	0x2000039c

08001804 <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8001804:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <Echo_Uart2_INTERRUPT_ENA+0x20>)
 8001808:	2200      	movs	r2, #0
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	805a      	strh	r2, [r3, #2]
 800180e:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001810:	4c05      	ldr	r4, [pc, #20]	; (8001828 <Echo_Uart2_INTERRUPT_ENA+0x24>)
 8001812:	4620      	mov	r0, r4
 8001814:	f003 fe6e 	bl	80054f4 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	4904      	ldr	r1, [pc, #16]	; (800182c <Echo_Uart2_INTERRUPT_ENA+0x28>)
 800181c:	4620      	mov	r0, r4
 800181e:	f004 fc67 	bl	80060f0 <HAL_UART_Receive_IT>
}
 8001822:	bd10      	pop	{r4, pc}
 8001824:	200003a0 	.word	0x200003a0
 8001828:	200007f8 	.word	0x200007f8
 800182c:	2000039d 	.word	0x2000039d

08001830 <HAL_UART_RxCpltCallback>:

/*
 * 1. UART RX Interrupt
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001830:	b508      	push	{r3, lr}
	if (huart->Instance == USART1)
 8001832:	6803      	ldr	r3, [r0, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_UART_RxCpltCallback+0x44>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d003      	beq.n	8001842 <HAL_UART_RxCpltCallback+0x12>
	{
	}
	else if (huart->Instance == USART2)
 800183a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800183e:	4293      	cmp	r3, r2
 8001840:	d005      	beq.n	800184e <HAL_UART_RxCpltCallback+0x1e>
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001842:	2201      	movs	r2, #1
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <HAL_UART_RxCpltCallback+0x48>)
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <HAL_UART_RxCpltCallback+0x4c>)
 8001848:	f004 fc52 	bl	80060f0 <HAL_UART_Receive_IT>
}
 800184c:	bd08      	pop	{r3, pc}
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_UART_RxCpltCallback+0x48>)
 8001850:	7818      	ldrb	r0, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_UART_RxCpltCallback+0x50>)
 8001854:	8853      	ldrh	r3, [r2, #2]
 8001856:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001858:	4259      	negs	r1, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	b2c9      	uxtb	r1, r1
 800185e:	bf58      	it	pl
 8001860:	424b      	negpl	r3, r1
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001862:	b29b      	uxth	r3, r3
 8001864:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001866:	4413      	add	r3, r2
 8001868:	7198      	strb	r0, [r3, #6]
	echo_uart2_state.item_num++;
 800186a:	8893      	ldrh	r3, [r2, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	8093      	strh	r3, [r2, #4]
}
 8001870:	e7e7      	b.n	8001842 <HAL_UART_RxCpltCallback+0x12>
 8001872:	bf00      	nop
 8001874:	40013800 	.word	0x40013800
 8001878:	2000039d 	.word	0x2000039d
 800187c:	200007f8 	.word	0x200007f8
 8001880:	200003a0 	.word	0x200003a0

08001884 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct =
 8001888:	2400      	movs	r4, #0
 800188a:	9405      	str	r4, [sp, #20]
 800188c:	9406      	str	r4, [sp, #24]
 800188e:	9407      	str	r4, [sp, #28]
 8001890:	9408      	str	r4, [sp, #32]
 8001892:	9409      	str	r4, [sp, #36]	; 0x24
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_GPIO_Init+0xbc>)
 8001896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001898:	f042 0204 	orr.w	r2, r2, #4
 800189c:	64da      	str	r2, [r3, #76]	; 0x4c
 800189e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a0:	f002 0204 	and.w	r2, r2, #4
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80018c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c4:	f002 0201 	and.w	r2, r2, #1
 80018c8:	9203      	str	r2, [sp, #12]
 80018ca:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ce:	f042 0202 	orr.w	r2, r2, #2
 80018d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80018de:	4622      	mov	r2, r4
 80018e0:	f641 6130 	movw	r1, #7728	; 0x1e30
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f001 ff48 	bl	800377c <HAL_GPIO_WritePin>
	SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80018ec:	4d15      	ldr	r5, [pc, #84]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018ee:	4622      	mov	r2, r4
 80018f0:	f242 0133 	movw	r1, #8243	; 0x2033
 80018f4:	4628      	mov	r0, r5
 80018f6:	f001 ff41 	bl	800377c <HAL_GPIO_WritePin>
			QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin | BIPHASIC_SW_Pin
					| PEAK_DISCHG_SW_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : START_BTN_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin;
 80018fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fe:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001902:	2302      	movs	r3, #2
 8001904:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001906:	a905      	add	r1, sp, #20
 8001908:	480f      	ldr	r0, [pc, #60]	; (8001948 <MX_GPIO_Init+0xc4>)
 800190a:	f001 fe59 	bl	80035c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin DAC0_Pin DAC1_Pin
	 DAC2_Pin DAC3_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin
 800190e:	f641 6330 	movw	r3, #7728	; 0x1e30
 8001912:	9305      	str	r3, [sp, #20]
			| DAC2_Pin | DAC3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2601      	movs	r6, #1
 8001916:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	a905      	add	r1, sp, #20
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f001 fe4d 	bl	80035c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : QCC_CTRL0_Pin QCC_CTRL1_Pin LED_Pin BIPHASIC_SW_Pin
	 PEAK_DISCHG_SW_Pin */
	GPIO_InitStruct.Pin = QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin
 8001926:	f242 0333 	movw	r3, #8243	; 0x2033
 800192a:	9305      	str	r3, [sp, #20]
			| BIPHASIC_SW_Pin | PEAK_DISCHG_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	a905      	add	r1, sp, #20
 8001934:	4628      	mov	r0, r5
 8001936:	f001 fe43 	bl	80035c0 <HAL_GPIO_Init>

}
 800193a:	b00a      	add	sp, #40	; 0x28
 800193c:	bd70      	pop	{r4, r5, r6, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800

0800194c <MX_DMA_Init>:
{
 800194c:	b500      	push	{lr}
 800194e:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_DMA_Init+0x60>)
 8001952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	649a      	str	r2, [r3, #72]	; 0x48
 800195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2102      	movs	r1, #2
 8001968:	200b      	movs	r0, #11
 800196a:	f001 fc47 	bl	80031fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800196e:	200b      	movs	r0, #11
 8001970:	f001 fc7c 	bl	800326c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2102      	movs	r1, #2
 8001978:	200c      	movs	r0, #12
 800197a:	f001 fc3f 	bl	80031fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800197e:	200c      	movs	r0, #12
 8001980:	f001 fc74 	bl	800326c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	4611      	mov	r1, r2
 8001988:	200f      	movs	r0, #15
 800198a:	f001 fc37 	bl	80031fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800198e:	200f      	movs	r0, #15
 8001990:	f001 fc6c 	bl	800326c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	4611      	mov	r1, r2
 8001998:	2011      	movs	r0, #17
 800199a:	f001 fc2f 	bl	80031fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800199e:	2011      	movs	r0, #17
 80019a0:	f001 fc64 	bl	800326c <HAL_NVIC_EnableIRQ>
}
 80019a4:	b003      	add	sp, #12
 80019a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019b2:	e7fe      	b.n	80019b2 <Error_Handler+0x2>

080019b4 <MX_TIM1_Init>:
{
 80019b4:	b510      	push	{r4, lr}
 80019b6:	b096      	sub	sp, #88	; 0x58
	TIM_MasterConfigTypeDef sMasterConfig =
 80019b8:	2400      	movs	r4, #0
 80019ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80019bc:	9414      	str	r4, [sp, #80]	; 0x50
 80019be:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC =
 80019c0:	940c      	str	r4, [sp, #48]	; 0x30
 80019c2:	940d      	str	r4, [sp, #52]	; 0x34
 80019c4:	940e      	str	r4, [sp, #56]	; 0x38
 80019c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80019c8:	9410      	str	r4, [sp, #64]	; 0x40
 80019ca:	9411      	str	r4, [sp, #68]	; 0x44
 80019cc:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 80019ce:	222c      	movs	r2, #44	; 0x2c
 80019d0:	4621      	mov	r1, r4
 80019d2:	a801      	add	r0, sp, #4
 80019d4:	f004 fbe6 	bl	80061a4 <memset>
	htim1.Instance = TIM1;
 80019d8:	4825      	ldr	r0, [pc, #148]	; (8001a70 <MX_TIM1_Init+0xbc>)
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <MX_TIM1_Init+0xc0>)
 80019dc:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 80019de:	6044      	str	r4, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 9999;
 80019e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80019e6:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 80019ea:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f0:	f003 f884 	bl	8004afc <HAL_TIM_PWM_Init>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d132      	bne.n	8001a5e <MX_TIM1_Init+0xaa>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019fc:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a00:	a913      	add	r1, sp, #76	; 0x4c
 8001a02:	481b      	ldr	r0, [pc, #108]	; (8001a70 <MX_TIM1_Init+0xbc>)
 8001a04:	f003 fcb0 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d12a      	bne.n	8001a62 <MX_TIM1_Init+0xae>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2200      	movs	r2, #0
 8001a16:	920e      	str	r2, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a18:	920f      	str	r2, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1a:	9210      	str	r2, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a1c:	9211      	str	r2, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1e:	9212      	str	r2, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	a90c      	add	r1, sp, #48	; 0x30
 8001a22:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_TIM1_Init+0xbc>)
 8001a24:	f003 f913 	bl	8004c4e <HAL_TIM_PWM_ConfigChannel>
 8001a28:	b9e8      	cbnz	r0, 8001a66 <MX_TIM1_Init+0xb2>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2e:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a30:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001a32:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a34:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3a:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001a3c:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a3e:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a44:	9209      	str	r2, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001a46:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a48:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4a:	a901      	add	r1, sp, #4
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <MX_TIM1_Init+0xbc>)
 8001a4e:	f003 fcc3 	bl	80053d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a52:	b950      	cbnz	r0, 8001a6a <MX_TIM1_Init+0xb6>
	HAL_TIM_MspPostInit(&htim1);
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_TIM1_Init+0xbc>)
 8001a56:	f000 fb0b 	bl	8002070 <HAL_TIM_MspPostInit>
}
 8001a5a:	b016      	add	sp, #88	; 0x58
 8001a5c:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001a5e:	f7ff ffa7 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001a62:	f7ff ffa5 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001a66:	f7ff ffa3 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001a6a:	f7ff ffa1 	bl	80019b0 <Error_Handler>
 8001a6e:	bf00      	nop
 8001a70:	20000690 	.word	0x20000690
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <MX_TIM2_Init>:
{
 8001a78:	b500      	push	{lr}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig =
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9307      	str	r3, [sp, #28]
 8001a80:	9308      	str	r3, [sp, #32]
 8001a82:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC =
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	9303      	str	r3, [sp, #12]
 8001a8c:	9304      	str	r3, [sp, #16]
 8001a8e:	9305      	str	r3, [sp, #20]
 8001a90:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a98:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 79;
 8001a9a:	224f      	movs	r2, #79	; 0x4f
 8001a9c:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 999;
 8001aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa4:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001aac:	f002 fff6 	bl	8004a9c <HAL_TIM_OC_Init>
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d13b      	bne.n	8001b2c <MX_TIM2_Init+0xb4>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ab4:	4823      	ldr	r0, [pc, #140]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001ab6:	f003 f821 	bl	8004afc <HAL_TIM_PWM_Init>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d138      	bne.n	8001b30 <MX_TIM2_Init+0xb8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac6:	a907      	add	r1, sp, #28
 8001ac8:	481e      	ldr	r0, [pc, #120]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001aca:	f003 fc4d 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d130      	bne.n	8001b34 <MX_TIM2_Init+0xbc>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001ad2:	2330      	movs	r3, #48	; 0x30
 8001ad4:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 5;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ada:	2200      	movs	r2, #0
 8001adc:	9202      	str	r2, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ade:	9204      	str	r2, [sp, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae0:	4669      	mov	r1, sp
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001ae4:	f003 f876 	bl	8004bd4 <HAL_TIM_OC_ConfigChannel>
 8001ae8:	bb30      	cbnz	r0, 8001b38 <MX_TIM2_Init+0xc0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2360      	movs	r3, #96	; 0x60
 8001aec:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1010;
 8001aee:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001af2:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af4:	2204      	movs	r2, #4
 8001af6:	4669      	mov	r1, sp
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001afa:	f003 f8a8 	bl	8004c4e <HAL_TIM_PWM_ConfigChannel>
 8001afe:	b9e8      	cbnz	r0, 8001b3c <MX_TIM2_Init+0xc4>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001b02:	6802      	ldr	r2, [r0, #0]
 8001b04:	6993      	ldr	r3, [r2, #24]
 8001b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b0a:	6193      	str	r3, [r2, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001b0c:	2330      	movs	r3, #48	; 0x30
 8001b0e:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1040;
 8001b10:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001b14:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b16:	220c      	movs	r2, #12
 8001b18:	4669      	mov	r1, sp
 8001b1a:	f003 f85b 	bl	8004bd4 <HAL_TIM_OC_ConfigChannel>
 8001b1e:	b978      	cbnz	r0, 8001b40 <MX_TIM2_Init+0xc8>
	HAL_TIM_MspPostInit(&htim2);
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <MX_TIM2_Init+0xcc>)
 8001b22:	f000 faa5 	bl	8002070 <HAL_TIM_MspPostInit>
}
 8001b26:	b00b      	add	sp, #44	; 0x2c
 8001b28:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001b2c:	f7ff ff40 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001b30:	f7ff ff3e 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001b34:	f7ff ff3c 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001b38:	f7ff ff3a 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001b3c:	f7ff ff38 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001b40:	f7ff ff36 	bl	80019b0 <Error_Handler>
 8001b44:	20000728 	.word	0x20000728

08001b48 <MX_TIM16_Init>:
{
 8001b48:	b508      	push	{r3, lr}
	htim16.Instance = TIM16;
 8001b4a:	480a      	ldr	r0, [pc, #40]	; (8001b74 <MX_TIM16_Init+0x2c>)
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_TIM16_Init+0x30>)
 8001b4e:	6003      	str	r3, [r0, #0]
	htim16.Init.Prescaler = 79;
 8001b50:	234f      	movs	r3, #79	; 0x4f
 8001b52:	6043      	str	r3, [r0, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	2300      	movs	r3, #0
 8001b56:	6083      	str	r3, [r0, #8]
	htim16.Init.Period = 999;
 8001b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5c:	60c2      	str	r2, [r0, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	6103      	str	r3, [r0, #16]
	htim16.Init.RepetitionCounter = 0;
 8001b60:	6143      	str	r3, [r0, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b66:	f002 ff69 	bl	8004a3c <HAL_TIM_Base_Init>
 8001b6a:	b900      	cbnz	r0, 8001b6e <MX_TIM16_Init+0x26>
}
 8001b6c:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001b6e:	f7ff ff1f 	bl	80019b0 <Error_Handler>
 8001b72:	bf00      	nop
 8001b74:	200006dc 	.word	0x200006dc
 8001b78:	40014400 	.word	0x40014400

08001b7c <MX_USART2_UART_Init>:
{
 8001b7c:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x30>)
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART2_UART_Init+0x34>)
 8001b82:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8001b84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b88:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b8e:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b90:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b92:	220c      	movs	r2, #12
 8001b94:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9a:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9c:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9e:	f004 fa0a 	bl	8005fb6 <HAL_UART_Init>
 8001ba2:	b900      	cbnz	r0, 8001ba6 <MX_USART2_UART_Init+0x2a>
}
 8001ba4:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001ba6:	f7ff ff03 	bl	80019b0 <Error_Handler>
 8001baa:	bf00      	nop
 8001bac:	200007f8 	.word	0x200007f8
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_USART1_UART_Init>:
{
 8001bb4:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_USART1_UART_Init+0x30>)
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_USART1_UART_Init+0x34>)
 8001bba:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8001bbc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bc0:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc6:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bc8:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bca:	220c      	movs	r2, #12
 8001bcc:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd4:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd6:	f004 f9ee 	bl	8005fb6 <HAL_UART_Init>
 8001bda:	b900      	cbnz	r0, 8001bde <MX_USART1_UART_Init+0x2a>
}
 8001bdc:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001bde:	f7ff fee7 	bl	80019b0 <Error_Handler>
 8001be2:	bf00      	nop
 8001be4:	20000774 	.word	0x20000774
 8001be8:	40013800 	.word	0x40013800

08001bec <MX_ADC1_Init>:
{
 8001bec:	b500      	push	{lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
	ADC_MultiModeTypeDef multimode =
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9307      	str	r3, [sp, #28]
 8001bf4:	9308      	str	r3, [sp, #32]
 8001bf6:	9309      	str	r3, [sp, #36]	; 0x24
	ADC_ChannelConfTypeDef sConfig =
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	9303      	str	r3, [sp, #12]
 8001bfe:	9304      	str	r3, [sp, #16]
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	9306      	str	r3, [sp, #24]
	hadc1.Instance = ADC1;
 8001c04:	481c      	ldr	r0, [pc, #112]	; (8001c78 <MX_ADC1_Init+0x8c>)
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <MX_ADC1_Init+0x90>)
 8001c08:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c0a:	6043      	str	r3, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c0c:	6083      	str	r3, [r0, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0e:	60c3      	str	r3, [r0, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c10:	6103      	str	r3, [r0, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c12:	2208      	movs	r2, #8
 8001c14:	6142      	str	r2, [r0, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c16:	7603      	strb	r3, [r0, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	7642      	strb	r2, [r0, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001c1c:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c1e:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c22:	6283      	str	r3, [r0, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c24:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c26:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c2a:	6343      	str	r3, [r0, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001c2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c30:	f000 fc40 	bl	80024b4 <HAL_ADC_Init>
 8001c34:	b9c8      	cbnz	r0, 8001c6a <MX_ADC1_Init+0x7e>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	9307      	str	r3, [sp, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c3a:	a907      	add	r1, sp, #28
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <MX_ADC1_Init+0x8c>)
 8001c3e:	f001 fa3f 	bl	80030c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001c42:	b9a0      	cbnz	r0, 8001c6e <MX_ADC1_Init+0x82>
	sConfig.Channel = ADC_CHANNEL_11;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_ADC1_Init+0x94>)
 8001c46:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c48:	2306      	movs	r3, #6
 8001c4a:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	9303      	str	r3, [sp, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c50:	227f      	movs	r2, #127	; 0x7f
 8001c52:	9204      	str	r2, [sp, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c54:	9305      	str	r3, [sp, #20]
	sConfig.Offset = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5a:	a901      	add	r1, sp, #4
 8001c5c:	4806      	ldr	r0, [pc, #24]	; (8001c78 <MX_ADC1_Init+0x8c>)
 8001c5e:	f000 fd7b 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001c62:	b930      	cbnz	r0, 8001c72 <MX_ADC1_Init+0x86>
}
 8001c64:	b00b      	add	sp, #44	; 0x2c
 8001c66:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001c6a:	f7ff fea1 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001c6e:	f7ff fe9f 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001c72:	f7ff fe9d 	bl	80019b0 <Error_Handler>
 8001c76:	bf00      	nop
 8001c78:	200004a8 	.word	0x200004a8
 8001c7c:	50040000 	.word	0x50040000
 8001c80:	2e300800 	.word	0x2e300800

08001c84 <MX_ADC2_Init>:
{
 8001c84:	b500      	push	{lr}
 8001c86:	b087      	sub	sp, #28
	ADC_ChannelConfTypeDef sConfig =
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	9304      	str	r3, [sp, #16]
 8001c94:	9305      	str	r3, [sp, #20]
	hadc2.Instance = ADC2;
 8001c96:	481a      	ldr	r0, [pc, #104]	; (8001d00 <MX_ADC2_Init+0x7c>)
 8001c98:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <MX_ADC2_Init+0x80>)
 8001c9a:	6002      	str	r2, [r0, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c9c:	6043      	str	r3, [r0, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c9e:	6083      	str	r3, [r0, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca0:	60c3      	str	r3, [r0, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ca2:	6103      	str	r3, [r0, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	6142      	str	r2, [r0, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ca8:	7603      	strb	r3, [r0, #24]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001caa:	2201      	movs	r2, #1
 8001cac:	7642      	strb	r2, [r0, #25]
	hadc2.Init.NbrOfConversion = 1;
 8001cae:	61c2      	str	r2, [r0, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cb0:	f880 3020 	strb.w	r3, [r0, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001cb4:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8001cb8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cbe:	62c1      	str	r1, [r0, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001cc0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cc4:	6343      	str	r3, [r0, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8001cc6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cca:	f000 fbf3 	bl	80024b4 <HAL_ADC_Init>
 8001cce:	b990      	cbnz	r0, 8001cf6 <MX_ADC2_Init+0x72>
	sConfig.Channel = ADC_CHANNEL_12;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_ADC2_Init+0x84>)
 8001cd2:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	9302      	str	r3, [sp, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cdc:	227f      	movs	r2, #127	; 0x7f
 8001cde:	9203      	str	r2, [sp, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ce0:	9304      	str	r3, [sp, #16]
	sConfig.Offset = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ce6:	4669      	mov	r1, sp
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_ADC2_Init+0x7c>)
 8001cea:	f000 fd35 	bl	8002758 <HAL_ADC_ConfigChannel>
 8001cee:	b920      	cbnz	r0, 8001cfa <MX_ADC2_Init+0x76>
}
 8001cf0:	b007      	add	sp, #28
 8001cf2:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001cf6:	f7ff fe5b 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001cfa:	f7ff fe59 	bl	80019b0 <Error_Handler>
 8001cfe:	bf00      	nop
 8001d00:	2000050c 	.word	0x2000050c
 8001d04:	50040100 	.word	0x50040100
 8001d08:	32601000 	.word	0x32601000

08001d0c <SystemClock_Config>:
{
 8001d0c:	b500      	push	{lr}
 8001d0e:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001d10:	2244      	movs	r2, #68	; 0x44
 8001d12:	2100      	movs	r1, #0
 8001d14:	a805      	add	r0, sp, #20
 8001d16:	f004 fa45 	bl	80061a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	9303      	str	r3, [sp, #12]
 8001d24:	9304      	str	r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d2a:	f001 fd3d 	bl	80037a8 <HAL_PWREx_ControlVoltageScaling>
 8001d2e:	bb30      	cbnz	r0, 8001d7e <SystemClock_Config+0x72>
	HAL_PWR_EnableBkUpAccess();
 8001d30:	f001 fd2a 	bl	8003788 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <SystemClock_Config+0x80>)
 8001d36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d3a:	f023 0318 	bic.w	r3, r3, #24
 8001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001d42:	2314      	movs	r3, #20
 8001d44:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d46:	2301      	movs	r3, #1
 8001d48:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d4a:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d50:	2260      	movs	r2, #96	; 0x60
 8001d52:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d54:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	a805      	add	r0, sp, #20
 8001d58:	f001 fe10 	bl	800397c <HAL_RCC_OscConfig>
 8001d5c:	b988      	cbnz	r0, 8001d82 <SystemClock_Config+0x76>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d5e:	230f      	movs	r3, #15
 8001d60:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d62:	2100      	movs	r1, #0
 8001d64:	9101      	str	r1, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d68:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	9104      	str	r1, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d6c:	4668      	mov	r0, sp
 8001d6e:	f002 f973 	bl	8004058 <HAL_RCC_ClockConfig>
 8001d72:	b940      	cbnz	r0, 8001d86 <SystemClock_Config+0x7a>
	HAL_RCCEx_EnableMSIPLLMode();
 8001d74:	f002 fb78 	bl	8004468 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d78:	b017      	add	sp, #92	; 0x5c
 8001d7a:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001d7e:	f7ff fe17 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001d82:	f7ff fe15 	bl	80019b0 <Error_Handler>
		Error_Handler();
 8001d86:	f7ff fe13 	bl	80019b0 <Error_Handler>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <main>:
{
 8001d90:	b508      	push	{r3, lr}
	HAL_Init();
 8001d92:	f000 fb59 	bl	8002448 <HAL_Init>
	SystemClock_Config();
 8001d96:	f7ff ffb9 	bl	8001d0c <SystemClock_Config>
	MX_GPIO_Init();
 8001d9a:	f7ff fd73 	bl	8001884 <MX_GPIO_Init>
	MX_DMA_Init();
 8001d9e:	f7ff fdd5 	bl	800194c <MX_DMA_Init>
	MX_TIM1_Init();
 8001da2:	f7ff fe07 	bl	80019b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001da6:	f7ff fe67 	bl	8001a78 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001daa:	f7ff fecd 	bl	8001b48 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001dae:	f7ff fee5 	bl	8001b7c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001db2:	f7ff feff 	bl	8001bb4 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001db6:	f7ff ff19 	bl	8001bec <MX_ADC1_Init>
	MX_ADC2_Init();
 8001dba:	f7ff ff63 	bl	8001c84 <MX_ADC2_Init>
	Echo_PCI_State_Init();
 8001dbe:	f7ff fc9d 	bl	80016fc <Echo_PCI_State_Init>
	while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <main+0x32>

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_MspInit+0x2c>)
 8001dc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	661a      	str	r2, [r3, #96]	; 0x60
 8001dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dd2:	f002 0201 	and.w	r2, r2, #1
 8001dd6:	9200      	str	r2, [sp, #0]
 8001dd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ddc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de0:	659a      	str	r2, [r3, #88]	; 0x58
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dec:	b002      	add	sp, #8
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df4:	b530      	push	{r4, r5, lr}
 8001df6:	b08b      	sub	sp, #44	; 0x2c
 8001df8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9305      	str	r3, [sp, #20]
 8001dfe:	9306      	str	r3, [sp, #24]
 8001e00:	9307      	str	r3, [sp, #28]
 8001e02:	9308      	str	r3, [sp, #32]
 8001e04:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001e06:	6803      	ldr	r3, [r0, #0]
 8001e08:	4a42      	ldr	r2, [pc, #264]	; (8001f14 <HAL_ADC_MspInit+0x120>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001e0e:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_ADC_MspInit+0x124>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d040      	beq.n	8001e96 <HAL_ADC_MspInit+0xa2>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e14:	b00b      	add	sp, #44	; 0x2c
 8001e16:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 8001e18:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <HAL_ADC_MspInit+0x128>)
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d02a      	beq.n	8001e7a <HAL_ADC_MspInit+0x86>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <HAL_ADC_MspInit+0x12c>)
 8001e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VDDH_FEEDBACK_Pin;
 8001e38:	2340      	movs	r3, #64	; 0x40
 8001e3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e3c:	230b      	movs	r3, #11
 8001e3e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8001e40:	a905      	add	r1, sp, #20
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f001 fbbb 	bl	80035c0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001e4a:	4836      	ldr	r0, [pc, #216]	; (8001f24 <HAL_ADC_MspInit+0x130>)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_ADC_MspInit+0x134>)
 8001e4e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e54:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e56:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e60:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e66:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e68:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e6c:	f001 fa3a 	bl	80032e4 <HAL_DMA_Init>
 8001e70:	b970      	cbnz	r0, 8001e90 <HAL_ADC_MspInit+0x9c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_ADC_MspInit+0x130>)
 8001e74:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e76:	629c      	str	r4, [r3, #40]	; 0x28
 8001e78:	e7cc      	b.n	8001e14 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_ADC_MspInit+0x12c>)
 8001e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	9b01      	ldr	r3, [sp, #4]
 8001e8e:	e7c9      	b.n	8001e24 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 8001e90:	f7ff fd8e 	bl	80019b0 <Error_Handler>
 8001e94:	e7ed      	b.n	8001e72 <HAL_ADC_MspInit+0x7e>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_ADC_MspInit+0x128>)
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d029      	beq.n	8001ef6 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_ADC_MspInit+0x12c>)
 8001ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	9304      	str	r3, [sp, #16]
 8001eb4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PEAK_DETECTION_Pin;
 8001eb6:	2580      	movs	r5, #128	; 0x80
 8001eb8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001eba:	230b      	movs	r3, #11
 8001ebc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	a905      	add	r1, sp, #20
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f001 fb7c 	bl	80035c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <HAL_ADC_MspInit+0x138>)
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_ADC_MspInit+0x13c>)
 8001ecc:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed2:	6083      	str	r3, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed4:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ed6:	6105      	str	r5, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001edc:	6142      	str	r2, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	6182      	str	r2, [r0, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ee4:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001ee6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ee8:	f001 f9fc 	bl	80032e4 <HAL_DMA_Init>
 8001eec:	b970      	cbnz	r0, 8001f0c <HAL_ADC_MspInit+0x118>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_ADC_MspInit+0x138>)
 8001ef0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ef2:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001ef4:	e78e      	b.n	8001e14 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_ADC_MspInit+0x12c>)
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	9303      	str	r3, [sp, #12]
 8001f08:	9b03      	ldr	r3, [sp, #12]
 8001f0a:	e7ca      	b.n	8001ea2 <HAL_ADC_MspInit+0xae>
      Error_Handler();
 8001f0c:	f7ff fd50 	bl	80019b0 <Error_Handler>
 8001f10:	e7ed      	b.n	8001eee <HAL_ADC_MspInit+0xfa>
 8001f12:	bf00      	nop
 8001f14:	50040000 	.word	0x50040000
 8001f18:	50040100 	.word	0x50040100
 8001f1c:	2000087c 	.word	0x2000087c
 8001f20:	40021000 	.word	0x40021000
 8001f24:	20000570 	.word	0x20000570
 8001f28:	40020008 	.word	0x40020008
 8001f2c:	200005b8 	.word	0x200005b8
 8001f30:	4002001c 	.word	0x4002001c

08001f34 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001f34:	6802      	ldr	r2, [r0, #0]
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d000      	beq.n	8001f3e <HAL_TIM_PWM_MspInit+0xa>
 8001f3c:	4770      	bx	lr
{
 8001f3e:	b500      	push	{lr}
 8001f40:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f42:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4c:	661a      	str	r2, [r3, #96]	; 0x60
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	2019      	movs	r0, #25
 8001f5e:	f001 f94d 	bl	80031fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f62:	2019      	movs	r0, #25
 8001f64:	f001 f982 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f68:	b003      	add	sp, #12
 8001f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f6e:	bf00      	nop
 8001f70:	40012c00 	.word	0x40012c00

08001f74 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 8001f74:	6803      	ldr	r3, [r0, #0]
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d000      	beq.n	8001f7e <HAL_TIM_OC_MspInit+0xa>
 8001f7c:	4770      	bx	lr
{
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f84:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001f9a:	4821      	ldr	r0, [pc, #132]	; (8002020 <HAL_TIM_OC_MspInit+0xac>)
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_TIM_OC_MspInit+0xb0>)
 8001f9e:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb2:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb8:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001fc0:	f001 f990 	bl	80032e4 <HAL_DMA_Init>
 8001fc4:	bb30      	cbnz	r0, 8002014 <HAL_TIM_OC_MspInit+0xa0>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_TIM_OC_MspInit+0xac>)
 8001fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fca:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001fcc:	6323      	str	r3, [r4, #48]	; 0x30

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001fce:	4816      	ldr	r0, [pc, #88]	; (8002028 <HAL_TIM_OC_MspInit+0xb4>)
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_TIM_OC_MspInit+0xb8>)
 8001fd2:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe6:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fec:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001fee:	2220      	movs	r2, #32
 8001ff0:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ff2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001ff4:	f001 f976 	bl	80032e4 <HAL_DMA_Init>
 8001ff8:	b978      	cbnz	r0, 800201a <HAL_TIM_OC_MspInit+0xa6>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_TIM_OC_MspInit+0xb4>)
 8001ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8001ffe:	629c      	str	r4, [r3, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2102      	movs	r1, #2
 8002004:	201c      	movs	r0, #28
 8002006:	f001 f8f9 	bl	80031fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800200a:	201c      	movs	r0, #28
 800200c:	f001 f92e 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002010:	b002      	add	sp, #8
 8002012:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002014:	f7ff fccc 	bl	80019b0 <Error_Handler>
 8002018:	e7d5      	b.n	8001fc6 <HAL_TIM_OC_MspInit+0x52>
      Error_Handler();
 800201a:	f7ff fcc9 	bl	80019b0 <Error_Handler>
 800201e:	e7ec      	b.n	8001ffa <HAL_TIM_OC_MspInit+0x86>
 8002020:	20000648 	.word	0x20000648
 8002024:	40020080 	.word	0x40020080
 8002028:	20000600 	.word	0x20000600
 800202c:	40020058 	.word	0x40020058

08002030 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 8002030:	6802      	ldr	r2, [r0, #0]
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_TIM_Base_MspInit+0x3c>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d000      	beq.n	800203a <HAL_TIM_Base_MspInit+0xa>
 8002038:	4770      	bx	lr
{
 800203a:	b500      	push	{lr}
 800203c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800203e:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002048:	661a      	str	r2, [r3, #96]	; 0x60
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9b01      	ldr	r3, [sp, #4]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2102      	movs	r1, #2
 8002058:	2019      	movs	r0, #25
 800205a:	f001 f8cf 	bl	80031fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800205e:	2019      	movs	r0, #25
 8002060:	f001 f904 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002064:	b003      	add	sp, #12
 8002066:	f85d fb04 	ldr.w	pc, [sp], #4
 800206a:	bf00      	nop
 800206c:	40014400 	.word	0x40014400

08002070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002070:	b530      	push	{r4, r5, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	2300      	movs	r3, #0
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	9305      	str	r3, [sp, #20]
 800207c:	9306      	str	r3, [sp, #24]
 800207e:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_TIM_MspPostInit+0xac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d018      	beq.n	80020c0 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800208e:	b009      	add	sp, #36	; 0x24
 8002090:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_TIM_MspPostInit+0xb0>)
 8002094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	64da      	str	r2, [r3, #76]	; 0x4c
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 80020a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 80020b4:	a903      	add	r1, sp, #12
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f001 fa81 	bl	80035c0 <HAL_GPIO_Init>
 80020be:	e7e6      	b.n	800208e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80020c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80020cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ce:	f002 0201 	and.w	r2, r2, #1
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d8:	f042 0202 	orr.w	r2, r2, #2
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CURRENT_CTRL_Pin;
 80020e8:	f248 0302 	movw	r3, #32770	; 0x8002
 80020ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2502      	movs	r5, #2
 80020f0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f2:	2401      	movs	r4, #1
 80020f4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f001 fa60 	bl	80035c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8002110:	a903      	add	r1, sp, #12
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <HAL_TIM_MspPostInit+0xb4>)
 8002114:	f001 fa54 	bl	80035c0 <HAL_GPIO_Init>
}
 8002118:	e7b9      	b.n	800208e <HAL_TIM_MspPostInit+0x1e>
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b510      	push	{r4, lr}
 800212a:	b096      	sub	sp, #88	; 0x58
 800212c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	2100      	movs	r1, #0
 8002130:	9111      	str	r1, [sp, #68]	; 0x44
 8002132:	9112      	str	r1, [sp, #72]	; 0x48
 8002134:	9113      	str	r1, [sp, #76]	; 0x4c
 8002136:	9114      	str	r1, [sp, #80]	; 0x50
 8002138:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213a:	2234      	movs	r2, #52	; 0x34
 800213c:	a804      	add	r0, sp, #16
 800213e:	f004 f831 	bl	80061a4 <memset>
  if(huart->Instance==USART1)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4a37      	ldr	r2, [pc, #220]	; (8002224 <HAL_UART_MspInit+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800214a:	4a37      	ldr	r2, [pc, #220]	; (8002228 <HAL_UART_MspInit+0x100>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d034      	beq.n	80021ba <HAL_UART_MspInit+0x92>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002150:	b016      	add	sp, #88	; 0x58
 8002152:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002154:	2301      	movs	r3, #1
 8002156:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002158:	a804      	add	r0, sp, #16
 800215a:	f002 f86b 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 800215e:	bb48      	cbnz	r0, 80021b4 <HAL_UART_MspInit+0x8c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_UART_MspInit+0x104>)
 8002162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002168:	661a      	str	r2, [r3, #96]	; 0x60
 800216a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002170:	9200      	str	r2, [sp, #0]
 8002172:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002176:	f042 0202 	orr.w	r2, r2, #2
 800217a:	64da      	str	r2, [r3, #76]	; 0x4c
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2400      	movs	r4, #0
 8002190:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002196:	2307      	movs	r3, #7
 8002198:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	a911      	add	r1, sp, #68	; 0x44
 800219c:	4824      	ldr	r0, [pc, #144]	; (8002230 <HAL_UART_MspInit+0x108>)
 800219e:	f001 fa0f 	bl	80035c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021a2:	4622      	mov	r2, r4
 80021a4:	4621      	mov	r1, r4
 80021a6:	2025      	movs	r0, #37	; 0x25
 80021a8:	f001 f828 	bl	80031fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ac:	2025      	movs	r0, #37	; 0x25
 80021ae:	f001 f85d 	bl	800326c <HAL_NVIC_EnableIRQ>
 80021b2:	e7cd      	b.n	8002150 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80021b4:	f7ff fbfc 	bl	80019b0 <Error_Handler>
 80021b8:	e7d2      	b.n	8002160 <HAL_UART_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ba:	2302      	movs	r3, #2
 80021bc:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021be:	a804      	add	r0, sp, #16
 80021c0:	f002 f838 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	bb50      	cbnz	r0, 800221c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_UART_MspInit+0x104>)
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
 80021d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021d6:	9202      	str	r2, [sp, #8]
 80021d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ec:	230c      	movs	r3, #12
 80021ee:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2400      	movs	r4, #0
 80021f6:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fc:	2307      	movs	r3, #7
 80021fe:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	a911      	add	r1, sp, #68	; 0x44
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f001 f9db 	bl	80035c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800220a:	4622      	mov	r2, r4
 800220c:	4621      	mov	r1, r4
 800220e:	2026      	movs	r0, #38	; 0x26
 8002210:	f000 fff4 	bl	80031fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002214:	2026      	movs	r0, #38	; 0x26
 8002216:	f001 f829 	bl	800326c <HAL_NVIC_EnableIRQ>
}
 800221a:	e799      	b.n	8002150 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800221c:	f7ff fbc8 	bl	80019b0 <Error_Handler>
 8002220:	e7d1      	b.n	80021c6 <HAL_UART_MspInit+0x9e>
 8002222:	bf00      	nop
 8002224:	40013800 	.word	0x40013800
 8002228:	40004400 	.word	0x40004400
 800222c:	40021000 	.word	0x40021000
 8002230:	48000400 	.word	0x48000400

08002234 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler>

08002236 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler>

08002238 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler>

0800223a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler>

0800223c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler>

0800223e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 f90f 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224a:	bd08      	pop	{r3, pc}

0800224c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800224c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <DMA1_Channel1_IRQHandler+0xc>)
 8002250:	f001 f954 	bl	80034fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002254:	bd08      	pop	{r3, pc}
 8002256:	bf00      	nop
 8002258:	20000570 	.word	0x20000570

0800225c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800225c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Channel2_IRQHandler+0xc>)
 8002260:	f001 f94c 	bl	80034fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	200005b8 	.word	0x200005b8

0800226c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800226c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800226e:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Channel5_IRQHandler+0xc>)
 8002270:	f001 f944 	bl	80034fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002274:	bd08      	pop	{r3, pc}
 8002276:	bf00      	nop
 8002278:	20000600 	.word	0x20000600

0800227c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800227c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800227e:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA1_Channel7_IRQHandler+0xc>)
 8002280:	f001 f93c 	bl	80034fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002284:	bd08      	pop	{r3, pc}
 8002286:	bf00      	nop
 8002288:	20000648 	.word	0x20000648

0800228c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800228c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800228e:	4803      	ldr	r0, [pc, #12]	; (800229c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002290:	f002 fa9f 	bl	80047d2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002296:	f002 fa9c 	bl	80047d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800229a:	bd08      	pop	{r3, pc}
 800229c:	20000690 	.word	0x20000690
 80022a0:	200006dc 	.word	0x200006dc

080022a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a6:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM2_IRQHandler+0xc>)
 80022a8:	f002 fa93 	bl	80047d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ac:	bd08      	pop	{r3, pc}
 80022ae:	bf00      	nop
 80022b0:	20000728 	.word	0x20000728

080022b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022b6:	4802      	ldr	r0, [pc, #8]	; (80022c0 <USART1_IRQHandler+0xc>)
 80022b8:	f003 f998 	bl	80055ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022bc:	bd08      	pop	{r3, pc}
 80022be:	bf00      	nop
 80022c0:	20000774 	.word	0x20000774

080022c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c6:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART2_IRQHandler+0xc>)
 80022c8:	f003 f990 	bl	80055ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022cc:	bd08      	pop	{r3, pc}
 80022ce:	bf00      	nop
 80022d0:	200007f8 	.word	0x200007f8

080022d4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80022d4:	2001      	movs	r0, #1
 80022d6:	4770      	bx	lr

080022d8 <_kill>:

int _kill(int pid, int sig)
{
 80022d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80022da:	f003 ff39 	bl	8006150 <__errno>
 80022de:	2316      	movs	r3, #22
 80022e0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
 80022e6:	bd08      	pop	{r3, pc}

080022e8 <_exit>:

void _exit (int status)
{
 80022e8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80022ea:	f04f 31ff 	mov.w	r1, #4294967295
 80022ee:	f7ff fff3 	bl	80022d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f2:	e7fe      	b.n	80022f2 <_exit+0xa>

080022f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	460c      	mov	r4, r1
 80022f8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	2500      	movs	r5, #0
 80022fc:	e006      	b.n	800230c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80022fe:	f3af 8000 	nop.w
 8002302:	4621      	mov	r1, r4
 8002304:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800230a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	42b5      	cmp	r5, r6
 800230e:	dbf6      	blt.n	80022fe <_read+0xa>
	}

return len;
}
 8002310:	4630      	mov	r0, r6
 8002312:	bd70      	pop	{r4, r5, r6, pc}

08002314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	460c      	mov	r4, r1
 8002318:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2500      	movs	r5, #0
 800231c:	e004      	b.n	8002328 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800231e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002322:	f7ff f851 	bl	80013c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	3501      	adds	r5, #1
 8002328:	42b5      	cmp	r5, r6
 800232a:	dbf8      	blt.n	800231e <_write+0xa>
	}
	return len;
}
 800232c:	4630      	mov	r0, r6
 800232e:	bd70      	pop	{r4, r5, r6, pc}

08002330 <_close>:

int _close(int file)
{
	return -1;
}
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	4770      	bx	lr

08002336 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800233a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800233c:	2000      	movs	r0, #0
 800233e:	4770      	bx	lr

08002340 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002340:	2001      	movs	r0, #1
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002344:	2000      	movs	r0, #0
 8002346:	4770      	bx	lr

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b510      	push	{r4, lr}
 800234a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <_sbrk+0x38>)
 800234e:	490d      	ldr	r1, [pc, #52]	; (8002384 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <_sbrk+0x40>)
 8002352:	6800      	ldr	r0, [r0, #0]
 8002354:	b140      	cbz	r0, 8002368 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	480c      	ldr	r0, [pc, #48]	; (8002388 <_sbrk+0x40>)
 8002358:	6800      	ldr	r0, [r0, #0]
 800235a:	4403      	add	r3, r0
 800235c:	1a52      	subs	r2, r2, r1
 800235e:	4293      	cmp	r3, r2
 8002360:	d806      	bhi.n	8002370 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <_sbrk+0x40>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002366:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002368:	4807      	ldr	r0, [pc, #28]	; (8002388 <_sbrk+0x40>)
 800236a:	4c08      	ldr	r4, [pc, #32]	; (800238c <_sbrk+0x44>)
 800236c:	6004      	str	r4, [r0, #0]
 800236e:	e7f2      	b.n	8002356 <_sbrk+0xe>
    errno = ENOMEM;
 8002370:	f003 feee 	bl	8006150 <__errno>
 8002374:	230c      	movs	r3, #12
 8002376:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	e7f3      	b.n	8002366 <_sbrk+0x1e>
 800237e:	bf00      	nop
 8002380:	2000a000 	.word	0x2000a000
 8002384:	00000800 	.word	0x00000800
 8002388:	20000880 	.word	0x20000880
 800238c:	20000898 	.word	0x20000898

08002390 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <SystemInit+0x10>)
 8002392:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a8:	f7ff fff2 	bl	8002390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ae:	490d      	ldr	r1, [pc, #52]	; (80023e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <LoopForever+0xe>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80023c4:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <LoopForever+0x16>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f003 fec3 	bl	800615c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d6:	f7ff fcdb 	bl	8001d90 <main>

080023da <LoopForever>:

LoopForever:
    b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80023e8:	0800b4a4 	.word	0x0800b4a4
  ldr r2, =_sbss
 80023ec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80023f0:	20000898 	.word	0x20000898

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>
	...

080023f8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_InitTick+0x44>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b90b      	cbnz	r3, 8002402 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002400:	4770      	bx	lr
{
 8002402:	b510      	push	{r4, lr}
 8002404:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_InitTick+0x48>)
 8002410:	6810      	ldr	r0, [r2, #0]
 8002412:	fbb0 f0f3 	udiv	r0, r0, r3
 8002416:	f000 ff37 	bl	8003288 <HAL_SYSTICK_Config>
 800241a:	b968      	cbnz	r0, 8002438 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241c:	2c0f      	cmp	r4, #15
 800241e:	d901      	bls.n	8002424 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002420:	2001      	movs	r0, #1
 8002422:	e00a      	b.n	800243a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	4621      	mov	r1, r4
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f000 fee6 	bl	80031fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_InitTick+0x4c>)
 8002432:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002434:	2000      	movs	r0, #0
 8002436:	e000      	b.n	800243a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002438:	2001      	movs	r0, #1
}
 800243a:	bd10      	pop	{r4, pc}
 800243c:	20000010 	.word	0x20000010
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000014 	.word	0x20000014

08002448 <HAL_Init>:
{
 8002448:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244a:	2003      	movs	r0, #3
 800244c:	f000 fec4 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff ffd1 	bl	80023f8 <HAL_InitTick>
 8002456:	b110      	cbz	r0, 800245e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002458:	2401      	movs	r4, #1
}
 800245a:	4620      	mov	r0, r4
 800245c:	bd10      	pop	{r4, pc}
 800245e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002460:	f7ff fcb0 	bl	8001dc4 <HAL_MspInit>
 8002464:	e7f9      	b.n	800245a <HAL_Init+0x12>
	...

08002468 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_IncTick+0x10>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_IncTick+0x14>)
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	440b      	add	r3, r1
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000010 	.word	0x20000010
 800247c:	20000884 	.word	0x20000884

08002480 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002480:	4b01      	ldr	r3, [pc, #4]	; (8002488 <HAL_GetTick+0x8>)
 8002482:	6818      	ldr	r0, [r3, #0]
}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000884 	.word	0x20000884

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff fff6 	bl	8002480 <HAL_GetTick>
 8002494:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	f1b4 3fff 	cmp.w	r4, #4294967295
 800249a:	d002      	beq.n	80024a2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_Delay+0x24>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a2:	f7ff ffed 	bl	8002480 <HAL_GetTick>
 80024a6:	1b40      	subs	r0, r0, r5
 80024a8:	42a0      	cmp	r0, r4
 80024aa:	d3fa      	bcc.n	80024a2 <HAL_Delay+0x16>
  {
  }
}
 80024ac:	bd38      	pop	{r3, r4, r5, pc}
 80024ae:	bf00      	nop
 80024b0:	20000010 	.word	0x20000010

080024b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024bc:	2800      	cmp	r0, #0
 80024be:	f000 80e4 	beq.w	800268a <HAL_ADC_Init+0x1d6>
 80024c2:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024c6:	b313      	cbz	r3, 800250e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80024d0:	d005      	beq.n	80024de <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80024d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80024dc:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024de:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024e0:	6893      	ldr	r3, [r2, #8]
 80024e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024e6:	d11f      	bne.n	8002528 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80024e8:	6893      	ldr	r3, [r2, #8]
 80024ea:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f8:	4b65      	ldr	r3, [pc, #404]	; (8002690 <HAL_ADC_Init+0x1dc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_ADC_Init+0x1e0>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800250c:	e009      	b.n	8002522 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800250e:	f7ff fc71 	bl	8001df4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002512:	2300      	movs	r3, #0
 8002514:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002516:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800251a:	e7d5      	b.n	80024c8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800251c:	9b01      	ldr	r3, [sp, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f9      	bne.n	800251c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002528:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800252a:	6893      	ldr	r3, [r2, #8]
 800252c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002530:	f040 8082 	bne.w	8002638 <HAL_ADC_Init+0x184>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002534:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002544:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002546:	6893      	ldr	r3, [r2, #8]
 8002548:	f013 0304 	ands.w	r3, r3, #4
 800254c:	d000      	beq.n	8002550 <HAL_ADC_Init+0x9c>
 800254e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002550:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002552:	f011 0f10 	tst.w	r1, #16
 8002556:	f040 8091 	bne.w	800267c <HAL_ADC_Init+0x1c8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 808e 	bne.w	800267c <HAL_ADC_Init+0x1c8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002560:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002562:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800256c:	6893      	ldr	r3, [r2, #8]
 800256e:	f013 0f01 	tst.w	r3, #1
 8002572:	d114      	bne.n	800259e <HAL_ADC_Init+0xea>
 8002574:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_ADC_Init+0x1e4>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f013 0301 	ands.w	r3, r3, #1
 800257c:	d000      	beq.n	8002580 <HAL_ADC_Init+0xcc>
 800257e:	2301      	movs	r3, #1
 8002580:	4a46      	ldr	r2, [pc, #280]	; (800269c <HAL_ADC_Init+0x1e8>)
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	f012 0201 	ands.w	r2, r2, #1
 8002588:	d000      	beq.n	800258c <HAL_ADC_Init+0xd8>
 800258a:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	4313      	orrs	r3, r2
 800258e:	d106      	bne.n	800259e <HAL_ADC_Init+0xea>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002590:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002592:	4943      	ldr	r1, [pc, #268]	; (80026a0 <HAL_ADC_Init+0x1ec>)
 8002594:	688a      	ldr	r2, [r1, #8]
 8002596:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800259e:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 80025a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80025a6:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80025a8:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80025aa:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80025ac:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ae:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b6:	2a01      	cmp	r2, #1
 80025b8:	d040      	beq.n	800263c <HAL_ADC_Init+0x188>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025bc:	b122      	cbz	r2, 80025c8 <HAL_ADC_Init+0x114>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025be:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025c4:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c6:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025c8:	6821      	ldr	r1, [r4, #0]
 80025ca:	68cd      	ldr	r5, [r1, #12]
 80025cc:	4a35      	ldr	r2, [pc, #212]	; (80026a4 <HAL_ADC_Init+0x1f0>)
 80025ce:	402a      	ands	r2, r5
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d6:	688b      	ldr	r3, [r1, #8]
 80025d8:	f013 0304 	ands.w	r3, r3, #4
 80025dc:	d000      	beq.n	80025e0 <HAL_ADC_Init+0x12c>
 80025de:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025e0:	688a      	ldr	r2, [r1, #8]
 80025e2:	f012 0208 	ands.w	r2, r2, #8
 80025e6:	d000      	beq.n	80025ea <HAL_ADC_Init+0x136>
 80025e8:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ea:	b9b3      	cbnz	r3, 800261a <HAL_ADC_Init+0x166>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ec:	b9aa      	cbnz	r2, 800261a <HAL_ADC_Init+0x166>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ee:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80025f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f6:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025fa:	68cb      	ldr	r3, [r1, #12]
 80025fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	4313      	orrs	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002608:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800260c:	2b01      	cmp	r3, #1
 800260e:	d01a      	beq.n	8002646 <HAL_ADC_Init+0x192>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	6913      	ldr	r3, [r2, #16]
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800261a:	6923      	ldr	r3, [r4, #16]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d024      	beq.n	800266a <HAL_ADC_Init+0x1b6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002624:	f023 030f 	bic.w	r3, r3, #15
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800262c:	f023 0303 	bic.w	r3, r3, #3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6563      	str	r3, [r4, #84]	; 0x54
 8002636:	e026      	b.n	8002686 <HAL_ADC_Init+0x1d2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2000      	movs	r0, #0
 800263a:	e784      	b.n	8002546 <HAL_ADC_Init+0x92>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800263c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800263e:	3a01      	subs	r2, #1
 8002640:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002644:	e7b9      	b.n	80025ba <HAL_ADC_Init+0x106>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002646:	6821      	ldr	r1, [r4, #0]
 8002648:	690b      	ldr	r3, [r1, #16]
 800264a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002654:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002656:	432a      	orrs	r2, r5
 8002658:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800265a:	432a      	orrs	r2, r5
 800265c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800265e:	432a      	orrs	r2, r5
 8002660:	4313      	orrs	r3, r2
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	610b      	str	r3, [r1, #16]
 8002668:	e7d7      	b.n	800261a <HAL_ADC_Init+0x166>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800266a:	6821      	ldr	r1, [r4, #0]
 800266c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800266e:	f023 030f 	bic.w	r3, r3, #15
 8002672:	69e2      	ldr	r2, [r4, #28]
 8002674:	3a01      	subs	r2, #1
 8002676:	4313      	orrs	r3, r2
 8002678:	630b      	str	r3, [r1, #48]	; 0x30
 800267a:	e7d6      	b.n	800262a <HAL_ADC_Init+0x176>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002684:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002686:	b003      	add	sp, #12
 8002688:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
 800268c:	e7fb      	b.n	8002686 <HAL_ADC_Init+0x1d2>
 800268e:	bf00      	nop
 8002690:	2000000c 	.word	0x2000000c
 8002694:	053e2d63 	.word	0x053e2d63
 8002698:	50040000 	.word	0x50040000
 800269c:	50040100 	.word	0x50040100
 80026a0:	50040300 	.word	0x50040300
 80026a4:	fff0c007 	.word	0xfff0c007

080026a8 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026a8:	4770      	bx	lr

080026aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026aa:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80026ae:	f7ff fffb 	bl	80026a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026b2:	bd08      	pop	{r3, pc}

080026b4 <ADC_DMAConvCplt>:
{
 80026b4:	b508      	push	{r3, lr}
 80026b6:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80026bc:	f012 0f50 	tst.w	r2, #80	; 0x50
 80026c0:	d130      	bne.n	8002724 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c8:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f012 0f08 	tst.w	r2, #8
 80026d2:	d014      	beq.n	80026fe <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80026da:	d120      	bne.n	800271e <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80026e2:	d11c      	bne.n	800271e <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ea:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026f2:	d114      	bne.n	800271e <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6543      	str	r3, [r0, #84]	; 0x54
 80026fc:	e00f      	b.n	800271e <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f013 0f02 	tst.w	r3, #2
 8002704:	d10b      	bne.n	800271e <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002706:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800270e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002710:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002714:	d103      	bne.n	800271e <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002716:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800271e:	f7fe fc9d 	bl	800105c <HAL_ADC_ConvCpltCallback>
}
 8002722:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002724:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002726:	f012 0f10 	tst.w	r2, #16
 800272a:	d104      	bne.n	8002736 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800272c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800272e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002730:	4618      	mov	r0, r3
 8002732:	4790      	blx	r2
}
 8002734:	e7f5      	b.n	8002722 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8002736:	f7fe fc5f 	bl	8000ff8 <HAL_ADC_ErrorCallback>
 800273a:	e7f2      	b.n	8002722 <ADC_DMAConvCplt+0x6e>

0800273c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800273c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273e:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002740:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002746:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002748:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002750:	f7fe fc52 	bl	8000ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002754:	bd08      	pop	{r3, pc}
	...

08002758 <HAL_ADC_ConfigChannel>:
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2200      	movs	r2, #0
 800275e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002760:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002764:	2a01      	cmp	r2, #1
 8002766:	f000 8259 	beq.w	8002c1c <HAL_ADC_ConfigChannel+0x4c4>
 800276a:	4603      	mov	r3, r0
 800276c:	2201      	movs	r2, #1
 800276e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002772:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	f012 0f04 	tst.w	r2, #4
 800277a:	d009      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002784:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800278c:	b003      	add	sp, #12
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8002790:	684a      	ldr	r2, [r1, #4]
 8002792:	2a05      	cmp	r2, #5
 8002794:	d809      	bhi.n	80027aa <HAL_ADC_ConfigChannel+0x52>
      switch (sConfig->Rank)
 8002796:	3a02      	subs	r2, #2
 8002798:	2a03      	cmp	r2, #3
 800279a:	f200 809e 	bhi.w	80028da <HAL_ADC_ConfigChannel+0x182>
 800279e:	e8df f002 	tbb	[pc, r2]
 80027a2:	9202      	.short	0x9202
 80027a4:	9895      	.short	0x9895
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80027a6:	220c      	movs	r2, #12
 80027a8:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027aa:	681d      	ldr	r5, [r3, #0]
 80027ac:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027ae:	3530      	adds	r5, #48	; 0x30
 80027b0:	0a22      	lsrs	r2, r4, #8
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80027b8:	58a8      	ldr	r0, [r5, r2]
 80027ba:	f004 0e1f 	and.w	lr, r4, #31
 80027be:	241f      	movs	r4, #31
 80027c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80027c4:	ea20 0004 	bic.w	r0, r0, r4
 80027c8:	680c      	ldr	r4, [r1, #0]
 80027ca:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80027ce:	fa0c fc0e 	lsl.w	ip, ip, lr
 80027d2:	ea40 000c 	orr.w	r0, r0, ip
 80027d6:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d8:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027da:	68a2      	ldr	r2, [r4, #8]
 80027dc:	f012 0204 	ands.w	r2, r2, #4
 80027e0:	d000      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x8c>
 80027e2:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e4:	68a0      	ldr	r0, [r4, #8]
 80027e6:	f010 0008 	ands.w	r0, r0, #8
 80027ea:	d000      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x96>
 80027ec:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d135      	bne.n	800285e <HAL_ADC_ConfigChannel+0x106>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d133      	bne.n	800285e <HAL_ADC_ConfigChannel+0x106>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027f6:	6888      	ldr	r0, [r1, #8]
 80027f8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80027fc:	d070      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027fe:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002800:	3414      	adds	r4, #20
 8002802:	0e72      	lsrs	r2, r6, #25
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800280a:	58a5      	ldr	r5, [r4, r2]
 800280c:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 8002810:	2607      	movs	r6, #7
 8002812:	fa06 f60c 	lsl.w	r6, r6, ip
 8002816:	ea25 0506 	bic.w	r5, r5, r6
 800281a:	fa00 f00c 	lsl.w	r0, r0, ip
 800281e:	4328      	orrs	r0, r5
 8002820:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002822:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002824:	6942      	ldr	r2, [r0, #20]
 8002826:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800282a:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800282c:	694c      	ldr	r4, [r1, #20]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68c2      	ldr	r2, [r0, #12]
 8002832:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002836:	0052      	lsls	r2, r2, #1
 8002838:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800283c:	690d      	ldr	r5, [r1, #16]
 800283e:	2d04      	cmp	r5, #4
 8002840:	d063      	beq.n	800290a <HAL_ADC_ConfigChannel+0x1b2>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002842:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002844:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002846:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800284a:	4cad      	ldr	r4, [pc, #692]	; (8002b00 <HAL_ADC_ConfigChannel+0x3a8>)
 800284c:	403c      	ands	r4, r7
 800284e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002852:	4332      	orrs	r2, r6
 8002854:	4314      	orrs	r4, r2
 8002856:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800285a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285e:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002860:	6882      	ldr	r2, [r0, #8]
 8002862:	f012 0f01 	tst.w	r2, #1
 8002866:	d117      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x140>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002868:	680a      	ldr	r2, [r1, #0]
 800286a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800286c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8002870:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8002874:	ea24 040c 	bic.w	r4, r4, ip
 8002878:	f005 0c18 	and.w	ip, r5, #24
 800287c:	4da1      	ldr	r5, [pc, #644]	; (8002b04 <HAL_ADC_ConfigChannel+0x3ac>)
 800287e:	fa25 f50c 	lsr.w	r5, r5, ip
 8002882:	402a      	ands	r2, r5
 8002884:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002888:	4322      	orrs	r2, r4
 800288a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800288e:	68c8      	ldr	r0, [r1, #12]
 8002890:	4a9d      	ldr	r2, [pc, #628]	; (8002b08 <HAL_ADC_ConfigChannel+0x3b0>)
 8002892:	4290      	cmp	r0, r2
 8002894:	f000 80a1 	beq.w	80029da <HAL_ADC_ConfigChannel+0x282>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002898:	680a      	ldr	r2, [r1, #0]
 800289a:	499c      	ldr	r1, [pc, #624]	; (8002b0c <HAL_ADC_ConfigChannel+0x3b4>)
 800289c:	420a      	tst	r2, r1
 800289e:	f000 81b9 	beq.w	8002c14 <HAL_ADC_ConfigChannel+0x4bc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028a2:	499b      	ldr	r1, [pc, #620]	; (8002b10 <HAL_ADC_ConfigChannel+0x3b8>)
 80028a4:	6889      	ldr	r1, [r1, #8]
 80028a6:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028aa:	489a      	ldr	r0, [pc, #616]	; (8002b14 <HAL_ADC_ConfigChannel+0x3bc>)
 80028ac:	4282      	cmp	r2, r0
 80028ae:	f000 8163 	beq.w	8002b78 <HAL_ADC_ConfigChannel+0x420>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b2:	4899      	ldr	r0, [pc, #612]	; (8002b18 <HAL_ADC_ConfigChannel+0x3c0>)
 80028b4:	4282      	cmp	r2, r0
 80028b6:	f000 8186 	beq.w	8002bc6 <HAL_ADC_ConfigChannel+0x46e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ba:	4898      	ldr	r0, [pc, #608]	; (8002b1c <HAL_ADC_ConfigChannel+0x3c4>)
 80028bc:	4282      	cmp	r2, r0
 80028be:	f000 8196 	beq.w	8002bee <HAL_ADC_ConfigChannel+0x496>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2000      	movs	r0, #0
 80028c4:	e75f      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028c6:	2212      	movs	r2, #18
 80028c8:	604a      	str	r2, [r1, #4]
          break;
 80028ca:	e76e      	b.n	80027aa <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028cc:	2218      	movs	r2, #24
 80028ce:	604a      	str	r2, [r1, #4]
          break;
 80028d0:	e76b      	b.n	80027aa <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	604a      	str	r2, [r1, #4]
          break;
 80028d8:	e767      	b.n	80027aa <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028da:	2206      	movs	r2, #6
 80028dc:	604a      	str	r2, [r1, #4]
          break;
 80028de:	e764      	b.n	80027aa <HAL_ADC_ConfigChannel+0x52>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028e0:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028e2:	3414      	adds	r4, #20
 80028e4:	0e42      	lsrs	r2, r0, #25
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80028ec:	58a5      	ldr	r5, [r4, r2]
 80028ee:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80028f2:	2607      	movs	r6, #7
 80028f4:	fa06 f000 	lsl.w	r0, r6, r0
 80028f8:	ea25 0000 	bic.w	r0, r5, r0
 80028fc:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028fe:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002900:	6942      	ldr	r2, [r0, #20]
 8002902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002906:	6142      	str	r2, [r0, #20]
}
 8002908:	e790      	b.n	800282c <HAL_ADC_ConfigChannel+0xd4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800290a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800290c:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800290e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002912:	680a      	ldr	r2, [r1, #0]
 8002914:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002918:	bb85      	cbnz	r5, 800297c <HAL_ADC_ConfigChannel+0x224>
 800291a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800291e:	4294      	cmp	r4, r2
 8002920:	d034      	beq.n	800298c <HAL_ADC_ConfigChannel+0x234>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002926:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002928:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292c:	680a      	ldr	r2, [r1, #0]
 800292e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002932:	bb85      	cbnz	r5, 8002996 <HAL_ADC_ConfigChannel+0x23e>
 8002934:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002938:	4290      	cmp	r0, r2
 800293a:	d034      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x24e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800293c:	681c      	ldr	r4, [r3, #0]
 800293e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002940:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002942:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002946:	680a      	ldr	r2, [r1, #0]
 8002948:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800294c:	bb85      	cbnz	r5, 80029b0 <HAL_ADC_ConfigChannel+0x258>
 800294e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002952:	4290      	cmp	r0, r2
 8002954:	d034      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x268>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002956:	681c      	ldr	r4, [r3, #0]
 8002958:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800295a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800295c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002960:	680a      	ldr	r2, [r1, #0]
 8002962:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002966:	bb85      	cbnz	r5, 80029ca <HAL_ADC_ConfigChannel+0x272>
 8002968:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800296c:	4290      	cmp	r0, r2
 800296e:	f47f af76 	bne.w	800285e <HAL_ADC_ConfigChannel+0x106>
  MODIFY_REG(*preg,
 8002972:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002974:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002978:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 800297a:	e770      	b.n	800285e <HAL_ADC_ConfigChannel+0x106>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002980:	b112      	cbz	r2, 8002988 <HAL_ADC_ConfigChannel+0x230>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	e7ca      	b.n	800291e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002988:	2220      	movs	r2, #32
 800298a:	e7c8      	b.n	800291e <HAL_ADC_ConfigChannel+0x1c6>
  MODIFY_REG(*preg,
 800298c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800298e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002992:	6602      	str	r2, [r0, #96]	; 0x60
}
 8002994:	e7c5      	b.n	8002922 <HAL_ADC_ConfigChannel+0x1ca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800299a:	b112      	cbz	r2, 80029a2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	e7ca      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1e0>
    return 32U;
 80029a2:	2220      	movs	r2, #32
 80029a4:	e7c8      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 80029a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ac:	6662      	str	r2, [r4, #100]	; 0x64
}
 80029ae:	e7c5      	b.n	800293c <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80029b4:	b112      	cbz	r2, 80029bc <HAL_ADC_ConfigChannel+0x264>
  return __builtin_clz(value);
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	e7ca      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80029bc:	2220      	movs	r2, #32
 80029be:	e7c8      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1fa>
  MODIFY_REG(*preg,
 80029c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80029c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029c6:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80029c8:	e7c5      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80029ce:	b112      	cbz	r2, 80029d6 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	e7ca      	b.n	800296c <HAL_ADC_ConfigChannel+0x214>
    return 32U;
 80029d6:	2220      	movs	r2, #32
 80029d8:	e7c8      	b.n	800296c <HAL_ADC_ConfigChannel+0x214>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029da:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029dc:	680a      	ldr	r2, [r1, #0]
 80029de:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80029e2:	2d00      	cmp	r5, #0
 80029e4:	d138      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x300>
 80029e6:	0e90      	lsrs	r0, r2, #26
 80029e8:	3001      	adds	r0, #1
 80029ea:	f000 001f 	and.w	r0, r0, #31
 80029ee:	2809      	cmp	r0, #9
 80029f0:	bf8c      	ite	hi
 80029f2:	2000      	movhi	r0, #0
 80029f4:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d066      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x370>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029fa:	2d00      	cmp	r5, #0
 80029fc:	d13b      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x31e>
 80029fe:	0e90      	lsrs	r0, r2, #26
 8002a00:	3001      	adds	r0, #1
 8002a02:	0680      	lsls	r0, r0, #26
 8002a04:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002a08:	2d00      	cmp	r5, #0
 8002a0a:	d140      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x336>
 8002a0c:	0e96      	lsrs	r6, r2, #26
 8002a0e:	3601      	adds	r6, #1
 8002a10:	f006 071f 	and.w	r7, r6, #31
 8002a14:	2601      	movs	r6, #1
 8002a16:	40be      	lsls	r6, r7
 8002a18:	4330      	orrs	r0, r6
 8002a1a:	2d00      	cmp	r5, #0
 8002a1c:	d146      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x354>
 8002a1e:	0e92      	lsrs	r2, r2, #26
 8002a20:	3201      	adds	r2, #1
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a2a:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	4302      	orrs	r2, r0
 8002a2e:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a30:	f104 0614 	add.w	r6, r4, #20
 8002a34:	0e55      	lsrs	r5, r2, #25
 8002a36:	00ad      	lsls	r5, r5, #2
 8002a38:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002a3c:	5974      	ldr	r4, [r6, r5]
 8002a3e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002a42:	f04f 0c07 	mov.w	ip, #7
 8002a46:	fa0c fc02 	lsl.w	ip, ip, r2
 8002a4a:	ea24 0c0c 	bic.w	ip, r4, ip
 8002a4e:	4090      	lsls	r0, r2
 8002a50:	ea4c 0000 	orr.w	r0, ip, r0
 8002a54:	5170      	str	r0, [r6, r5]
}
 8002a56:	e71f      	b.n	8002898 <HAL_ADC_ConfigChannel+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a5c:	b148      	cbz	r0, 8002a72 <HAL_ADC_ConfigChannel+0x31a>
  return __builtin_clz(value);
 8002a5e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a62:	3001      	adds	r0, #1
 8002a64:	f000 001f 	and.w	r0, r0, #31
 8002a68:	2809      	cmp	r0, #9
 8002a6a:	bf8c      	ite	hi
 8002a6c:	2000      	movhi	r0, #0
 8002a6e:	2001      	movls	r0, #1
 8002a70:	e7c1      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a72:	2020      	movs	r0, #32
 8002a74:	e7f5      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x30a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002a7a:	b130      	cbz	r0, 8002a8a <HAL_ADC_ConfigChannel+0x332>
  return __builtin_clz(value);
 8002a7c:	fab0 f080 	clz	r0, r0
 8002a80:	3001      	adds	r0, #1
 8002a82:	0680      	lsls	r0, r0, #26
 8002a84:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002a88:	e7be      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002a8a:	2020      	movs	r0, #32
 8002a8c:	e7f8      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x328>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002a92:	b14e      	cbz	r6, 8002aa8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002a94:	fab6 f686 	clz	r6, r6
 8002a98:	3601      	adds	r6, #1
 8002a9a:	f006 061f 	and.w	r6, r6, #31
 8002a9e:	f04f 0c01 	mov.w	ip, #1
 8002aa2:	fa0c f606 	lsl.w	r6, ip, r6
 8002aa6:	e7b7      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8002aa8:	2620      	movs	r6, #32
 8002aaa:	e7f5      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002ab0:	b142      	cbz	r2, 8002ac4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	3201      	adds	r2, #1
 8002ab8:	f002 021f 	and.w	r2, r2, #31
 8002abc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ac0:	0512      	lsls	r2, r2, #20
 8002ac2:	e7b3      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x2d4>
    return 32U;
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	e7f6      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x35e>
 8002ac8:	bb55      	cbnz	r5, 8002b20 <HAL_ADC_ConfigChannel+0x3c8>
 8002aca:	0e90      	lsrs	r0, r2, #26
 8002acc:	3001      	adds	r0, #1
 8002ace:	0680      	lsls	r0, r0, #26
 8002ad0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002ad4:	bb85      	cbnz	r5, 8002b38 <HAL_ADC_ConfigChannel+0x3e0>
 8002ad6:	0e96      	lsrs	r6, r2, #26
 8002ad8:	3601      	adds	r6, #1
 8002ada:	f006 071f 	and.w	r7, r6, #31
 8002ade:	2601      	movs	r6, #1
 8002ae0:	40be      	lsls	r6, r7
 8002ae2:	4330      	orrs	r0, r6
 8002ae4:	bbbd      	cbnz	r5, 8002b56 <HAL_ADC_ConfigChannel+0x3fe>
 8002ae6:	0e92      	lsrs	r2, r2, #26
 8002ae8:	3201      	adds	r2, #1
 8002aea:	f002 021f 	and.w	r2, r2, #31
 8002aee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002af2:	3a1e      	subs	r2, #30
 8002af4:	0512      	lsls	r2, r2, #20
 8002af6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afa:	4302      	orrs	r2, r0
 8002afc:	e797      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x2d6>
 8002afe:	bf00      	nop
 8002b00:	03fff000 	.word	0x03fff000
 8002b04:	0007ffff 	.word	0x0007ffff
 8002b08:	407f0000 	.word	0x407f0000
 8002b0c:	80080000 	.word	0x80080000
 8002b10:	50040300 	.word	0x50040300
 8002b14:	c7520000 	.word	0xc7520000
 8002b18:	cb840000 	.word	0xcb840000
 8002b1c:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002b24:	b130      	cbz	r0, 8002b34 <HAL_ADC_ConfigChannel+0x3dc>
  return __builtin_clz(value);
 8002b26:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b2a:	3001      	adds	r0, #1
 8002b2c:	0680      	lsls	r0, r0, #26
 8002b2e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b32:	e7cf      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x37c>
    return 32U;
 8002b34:	2020      	movs	r0, #32
 8002b36:	e7f8      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002b3c:	b14e      	cbz	r6, 8002b52 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002b3e:	fab6 f686 	clz	r6, r6
 8002b42:	3601      	adds	r6, #1
 8002b44:	f006 061f 	and.w	r6, r6, #31
 8002b48:	f04f 0c01 	mov.w	ip, #1
 8002b4c:	fa0c f606 	lsl.w	r6, ip, r6
 8002b50:	e7c7      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x38a>
    return 32U;
 8002b52:	2620      	movs	r6, #32
 8002b54:	e7f5      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x3ea>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002b5a:	b15a      	cbz	r2, 8002b74 <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	3201      	adds	r2, #1
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b6a:	3a1e      	subs	r2, #30
 8002b6c:	0512      	lsls	r2, r2, #20
 8002b6e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b72:	e7c2      	b.n	8002afa <HAL_ADC_ConfigChannel+0x3a2>
    return 32U;
 8002b74:	2220      	movs	r2, #32
 8002b76:	e7f3      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x408>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b78:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002b7c:	f47f ae99 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x15a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <HAL_ADC_ConfigChannel+0x4c8>)
 8002b84:	4291      	cmp	r1, r2
 8002b86:	d001      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x434>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e5fc      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8c:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b90:	4824      	ldr	r0, [pc, #144]	; (8002c24 <HAL_ADC_ConfigChannel+0x4cc>)
 8002b92:	6881      	ldr	r1, [r0, #8]
 8002b94:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	6082      	str	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_ADC_ConfigChannel+0x4d0>)
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	0992      	lsrs	r2, r2, #6
 8002ba2:	4922      	ldr	r1, [pc, #136]	; (8002c2c <HAL_ADC_ConfigChannel+0x4d4>)
 8002ba4:	fba1 1202 	umull	r1, r2, r1, r2
 8002ba8:	0992      	lsrs	r2, r2, #6
 8002baa:	3201      	adds	r2, #1
 8002bac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x464>
            wait_loop_index--;
 8002bb6:	9a01      	ldr	r2, [sp, #4]
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002bbc:	9a01      	ldr	r2, [sp, #4]
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x45e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e5df      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bc6:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002bca:	f47f ae76 	bne.w	80028ba <HAL_ADC_ConfigChannel+0x162>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <HAL_ADC_ConfigChannel+0x4c8>)
 8002bd2:	4291      	cmp	r1, r2
 8002bd4:	d001      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x482>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e5d5      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bda:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 8002bde:	4811      	ldr	r0, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x4cc>)
 8002be0:	6881      	ldr	r1, [r0, #8]
 8002be2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002be6:	430a      	orrs	r2, r1
 8002be8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bea:	2000      	movs	r0, #0
}
 8002bec:	e5cb      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bee:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002bf2:	d111      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x4c0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_ADC_ConfigChannel+0x4c8>)
 8002bf8:	4291      	cmp	r1, r2
 8002bfa:	d001      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x4a8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	e5c2      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c00:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c04:	4807      	ldr	r0, [pc, #28]	; (8002c24 <HAL_ADC_ConfigChannel+0x4cc>)
 8002c06:	6881      	ldr	r1, [r0, #8]
 8002c08:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2000      	movs	r0, #0
}
 8002c12:	e5b8      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
 8002c14:	2000      	movs	r0, #0
 8002c16:	e5b6      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e5b4      	b.n	8002786 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	e5b5      	b.n	800278c <HAL_ADC_ConfigChannel+0x34>
 8002c20:	50040000 	.word	0x50040000
 8002c24:	50040300 	.word	0x50040300
 8002c28:	2000000c 	.word	0x2000000c
 8002c2c:	053e2d63 	.word	0x053e2d63

08002c30 <ADC_ConversionStop>:
{
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c34:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	f012 0204 	ands.w	r2, r2, #4
 8002c3c:	d000      	beq.n	8002c40 <ADC_ConversionStop+0x10>
 8002c3e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c40:	6898      	ldr	r0, [r3, #8]
 8002c42:	f010 0008 	ands.w	r0, r0, #8
 8002c46:	d000      	beq.n	8002c4a <ADC_ConversionStop+0x1a>
 8002c48:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c4a:	b90a      	cbnz	r2, 8002c50 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d06b      	beq.n	8002d28 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002c56:	d004      	beq.n	8002c62 <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c58:	8b20      	ldrh	r0, [r4, #24]
 8002c5a:	f240 1201 	movw	r2, #257	; 0x101
 8002c5e:	4290      	cmp	r0, r2
 8002c60:	d04e      	beq.n	8002d00 <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c62:	2902      	cmp	r1, #2
 8002c64:	d010      	beq.n	8002c88 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c66:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	f012 0f04 	tst.w	r2, #4
 8002c6e:	d00b      	beq.n	8002c88 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	f012 0f02 	tst.w	r2, #2
 8002c76:	d107      	bne.n	8002c88 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c7e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c82:	f042 0210 	orr.w	r2, r2, #16
 8002c86:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002c88:	2901      	cmp	r1, #1
 8002c8a:	d010      	beq.n	8002cae <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c8c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	f012 0f08 	tst.w	r2, #8
 8002c94:	d00b      	beq.n	8002cae <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	f012 0f02 	tst.w	r2, #2
 8002c9c:	d107      	bne.n	8002cae <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ca4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002cae:	2902      	cmp	r1, #2
 8002cb0:	d034      	beq.n	8002d1c <ADC_ConversionStop+0xec>
 8002cb2:	2903      	cmp	r1, #3
 8002cb4:	d134      	bne.n	8002d20 <ADC_ConversionStop+0xf0>
 8002cb6:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8002cb8:	f7ff fbe2 	bl	8002480 <HAL_GetTick>
 8002cbc:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	422b      	tst	r3, r5
 8002cc4:	d02e      	beq.n	8002d24 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002cc6:	f7ff fbdb 	bl	8002480 <HAL_GetTick>
 8002cca:	1b80      	subs	r0, r0, r6
 8002ccc:	2805      	cmp	r0, #5
 8002cce:	d9f6      	bls.n	8002cbe <ADC_ConversionStop+0x8e>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	422b      	tst	r3, r5
 8002cd6:	d0f2      	beq.n	8002cbe <ADC_ConversionStop+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e01c      	b.n	8002d26 <ADC_ConversionStop+0xf6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e012      	b.n	8002d26 <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d00:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d08:	d104      	bne.n	8002d14 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <ADC_ConversionStop+0xfc>)
 8002d0c:	428a      	cmp	r2, r1
 8002d0e:	d8ed      	bhi.n	8002cec <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 8002d10:	3201      	adds	r2, #1
 8002d12:	e7f6      	b.n	8002d02 <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d14:	2240      	movs	r2, #64	; 0x40
 8002d16:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d18:	2101      	movs	r1, #1
 8002d1a:	e7a4      	b.n	8002c66 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d1c:	2508      	movs	r5, #8
 8002d1e:	e7cb      	b.n	8002cb8 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d20:	2504      	movs	r5, #4
 8002d22:	e7c9      	b.n	8002cb8 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8002d24:	2000      	movs	r0, #0
}
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002d28:	2000      	movs	r0, #0
 8002d2a:	e7fc      	b.n	8002d26 <ADC_ConversionStop+0xf6>
 8002d2c:	a33fffff 	.word	0xa33fffff

08002d30 <ADC_Enable>:
{
 8002d30:	b530      	push	{r4, r5, lr}
 8002d32:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d38:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	f012 0f01 	tst.w	r2, #1
 8002d40:	d158      	bne.n	8002df4 <ADC_Enable+0xc4>
 8002d42:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <ADC_Enable+0xcc>)
 8002d48:	4211      	tst	r1, r2
 8002d4a:	d119      	bne.n	8002d80 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d52:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <ADC_Enable+0xd0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d60:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002d64:	d01c      	beq.n	8002da0 <ADC_Enable+0x70>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <ADC_Enable+0xd4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <ADC_Enable+0xd8>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	3301      	adds	r3, #1
 8002d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002d7e:	e00c      	b.n	8002d9a <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d80:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002d90:	2001      	movs	r0, #1
 8002d92:	e030      	b.n	8002df6 <ADC_Enable+0xc6>
        wait_loop_index--;
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();
 8002da0:	f7ff fb6e 	bl	8002480 <HAL_GetTick>
 8002da4:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f012 0f01 	tst.w	r2, #1
 8002dae:	d11f      	bne.n	8002df0 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	f012 0f01 	tst.w	r2, #1
 8002db6:	d107      	bne.n	8002dc8 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dbe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dc8:	f7ff fb5a 	bl	8002480 <HAL_GetTick>
 8002dcc:	1b43      	subs	r3, r0, r5
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d9e9      	bls.n	8002da6 <ADC_Enable+0x76>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f013 0f01 	tst.w	r3, #1
 8002dda:	d1e4      	bne.n	8002da6 <ADC_Enable+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dde:	f043 0310 	orr.w	r3, r3, #16
 8002de2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e002      	b.n	8002df6 <ADC_Enable+0xc6>
  return HAL_OK;
 8002df0:	2000      	movs	r0, #0
 8002df2:	e000      	b.n	8002df6 <ADC_Enable+0xc6>
 8002df4:	2000      	movs	r0, #0
}
 8002df6:	b003      	add	sp, #12
 8002df8:	bd30      	pop	{r4, r5, pc}
 8002dfa:	bf00      	nop
 8002dfc:	8000003f 	.word	0x8000003f
 8002e00:	50040300 	.word	0x50040300
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	053e2d63 	.word	0x053e2d63

08002e0c <HAL_ADC_Start_DMA>:
{
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_ADC_Start_DMA+0xf0>)
 8002e12:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e14:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e16:	6880      	ldr	r0, [r0, #8]
 8002e18:	f010 0f04 	tst.w	r0, #4
 8002e1c:	d169      	bne.n	8002ef2 <HAL_ADC_Start_DMA+0xe6>
 8002e1e:	460e      	mov	r6, r1
 8002e20:	4617      	mov	r7, r2
 8002e22:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8002e26:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d063      	beq.n	8002ef6 <HAL_ADC_Start_DMA+0xea>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e34:	b145      	cbz	r5, 8002e48 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e36:	2d05      	cmp	r5, #5
 8002e38:	d006      	beq.n	8002e48 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e3a:	2d09      	cmp	r5, #9
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
 8002e46:	e055      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff ff71 	bl	8002d30 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d14b      	bne.n	8002eea <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 8002e52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_ADC_Start_DMA+0xf4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d039      	beq.n	8002ede <HAL_ADC_Start_DMA+0xd2>
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d000      	beq.n	8002e72 <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e70:	b91d      	cbnz	r5, 8002e7a <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e78:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e7c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e80:	d030      	beq.n	8002ee4 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e84:	f023 0306 	bic.w	r3, r3, #6
 8002e88:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_ADC_Start_DMA+0xf8>)
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_ADC_Start_DMA+0xfc>)
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_ADC_Start_DMA+0x100>)
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	221c      	movs	r2, #28
 8002ea0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	6853      	ldr	r3, [r2, #4]
 8002eac:	f043 0310 	orr.w	r3, r3, #16
 8002eb0:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	68d3      	ldr	r3, [r2, #12]
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	3140      	adds	r1, #64	; 0x40
 8002ec4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ec6:	f000 fa91 	bl	80033ec <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eca:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002ecc:	6893      	ldr	r3, [r2, #8]
 8002ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6093      	str	r3, [r2, #8]
}
 8002edc:	e00a      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ede:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002ee2:	e7c3      	b.n	8002e6c <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ee8:	e7cf      	b.n	8002e8a <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 8002eea:	2300      	movs	r3, #0
 8002eec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002ef0:	e000      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 8002ef2:	2002      	movs	r0, #2
}
 8002ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002ef6:	2002      	movs	r0, #2
 8002ef8:	e7fc      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xe8>
 8002efa:	bf00      	nop
 8002efc:	50040300 	.word	0x50040300
 8002f00:	50040100 	.word	0x50040100
 8002f04:	080026b5 	.word	0x080026b5
 8002f08:	080026ab 	.word	0x080026ab
 8002f0c:	0800273d 	.word	0x0800273d

08002f10 <ADC_Disable>:
{
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f14:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f16:	6893      	ldr	r3, [r2, #8]
 8002f18:	f013 0302 	ands.w	r3, r3, #2
 8002f1c:	d000      	beq.n	8002f20 <ADC_Disable+0x10>
 8002f1e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f20:	6891      	ldr	r1, [r2, #8]
 8002f22:	f011 0f01 	tst.w	r1, #1
 8002f26:	d039      	beq.n	8002f9c <ADC_Disable+0x8c>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d139      	bne.n	8002fa0 <ADC_Disable+0x90>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f2c:	6893      	ldr	r3, [r2, #8]
 8002f2e:	f003 030d 	and.w	r3, r3, #13
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d009      	beq.n	8002f4a <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002f46:	2001      	movs	r0, #1
 8002f48:	e029      	b.n	8002f9e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002f4a:	6893      	ldr	r3, [r2, #8]
 8002f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002f60:	f7ff fa8e 	bl	8002480 <HAL_GetTick>
 8002f64:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f013 0f01 	tst.w	r3, #1
 8002f6e:	d013      	beq.n	8002f98 <ADC_Disable+0x88>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f70:	f7ff fa86 	bl	8002480 <HAL_GetTick>
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	2802      	cmp	r0, #2
 8002f78:	d9f5      	bls.n	8002f66 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f013 0f01 	tst.w	r3, #1
 8002f82:	d0f0      	beq.n	8002f66 <ADC_Disable+0x56>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f86:	f043 0310 	orr.w	r3, r3, #16
 8002f8a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
 8002f96:	e002      	b.n	8002f9e <ADC_Disable+0x8e>
  return HAL_OK;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e000      	b.n	8002f9e <ADC_Disable+0x8e>
 8002f9c:	2000      	movs	r0, #0
}
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e7fc      	b.n	8002f9e <ADC_Disable+0x8e>

08002fa4 <HAL_ADC_Stop_DMA>:
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002fa6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d039      	beq.n	8003022 <HAL_ADC_Stop_DMA+0x7e>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fb6:	2103      	movs	r1, #3
 8002fb8:	f7ff fe3a 	bl	8002c30 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	b9e8      	cbnz	r0, 8002ffc <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	68d3      	ldr	r3, [r2, #12]
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002fca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002fcc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d017      	beq.n	8003006 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	6853      	ldr	r3, [r2, #4]
 8002fda:	f023 0310 	bic.w	r3, r3, #16
 8002fde:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002fe0:	b9dd      	cbnz	r5, 800301a <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7ff ff94 	bl	8002f10 <ADC_Disable>
 8002fe8:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002fea:	b93d      	cbnz	r5, 8002ffc <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8002fec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003002:	4628      	mov	r0, r5
 8003004:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003006:	f000 fa2c 	bl	8003462 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 800300a:	4605      	mov	r5, r0
 800300c:	2800      	cmp	r0, #0
 800300e:	d0e2      	beq.n	8002fd6 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003010:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003016:	6563      	str	r3, [r4, #84]	; 0x54
 8003018:	e7dd      	b.n	8002fd6 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff ff78 	bl	8002f10 <ADC_Disable>
 8003020:	e7e3      	b.n	8002fea <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 8003022:	2502      	movs	r5, #2
 8003024:	e7ed      	b.n	8003002 <HAL_ADC_Stop_DMA+0x5e>

08003026 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003026:	b530      	push	{r4, r5, lr}
 8003028:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800302a:	2300      	movs	r3, #0
 800302c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800302e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d041      	beq.n	80030ba <HAL_ADCEx_Calibration_Start+0x94>
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
 800303a:	2301      	movs	r3, #1
 800303c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003040:	f7ff ff66 	bl	8002f10 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003044:	bb80      	cbnz	r0, 80030a8 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003048:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003056:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003058:	6893      	ldr	r3, [r2, #8]
 800305a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800305e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003062:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8003066:	432b      	orrs	r3, r5
 8003068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800306c:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800306e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db06      	blt.n	8003084 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003076:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003078:	f023 0303 	bic.w	r3, r3, #3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6563      	str	r3, [r4, #84]	; 0x54
 8003082:	e015      	b.n	80030b0 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800308a:	9b01      	ldr	r3, [sp, #4]
 800308c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003090:	d3ed      	bcc.n	800306e <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003092:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003094:	f023 0312 	bic.w	r3, r3, #18
 8003098:	f043 0310 	orr.w	r3, r3, #16
 800309c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800309e:	2300      	movs	r3, #0
 80030a0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80030a4:	2001      	movs	r0, #1
 80030a6:	e006      	b.n	80030b6 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030aa:	f043 0310 	orr.w	r3, r3, #16
 80030ae:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b0:	2300      	movs	r3, #0
 80030b2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80030b6:	b003      	add	sp, #12
 80030b8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80030ba:	2002      	movs	r0, #2
 80030bc:	e7fb      	b.n	80030b6 <HAL_ADCEx_Calibration_Start+0x90>
	...

080030c0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80030c4:	2a01      	cmp	r2, #1
 80030c6:	d07e      	beq.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x106>
{
 80030c8:	b410      	push	{r4}
 80030ca:	b09b      	sub	sp, #108	; 0x6c
 80030cc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80030ce:	2201      	movs	r2, #1
 80030d0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030d4:	2200      	movs	r2, #0
 80030d6:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030d8:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030da:	6800      	ldr	r0, [r0, #0]
 80030dc:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80030de:	4290      	cmp	r0, r2
 80030e0:	d038      	beq.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80030e2:	2200      	movs	r2, #0
 80030e4:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80030e6:	9a01      	ldr	r2, [sp, #4]
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d037      	beq.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	f012 0204 	ands.w	r2, r2, #4
 80030f2:	d000      	beq.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80030f4:	2201      	movs	r2, #1
 80030f6:	6880      	ldr	r0, [r0, #8]
 80030f8:	f010 0f04 	tst.w	r0, #4
 80030fc:	d153      	bne.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030fe:	2a00      	cmp	r2, #0
 8003100:	d151      	bne.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003102:	680a      	ldr	r2, [r1, #0]
 8003104:	2a00      	cmp	r2, #0
 8003106:	d032      	beq.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003108:	4c31      	ldr	r4, [pc, #196]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800310a:	68a2      	ldr	r2, [r4, #8]
 800310c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003110:	6848      	ldr	r0, [r1, #4]
 8003112:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8003116:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800311a:	4302      	orrs	r2, r0
 800311c:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800311e:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	f012 0201 	ands.w	r2, r2, #1
 8003126:	d000      	beq.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8003128:	2201      	movs	r2, #1
 800312a:	482a      	ldr	r0, [pc, #168]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 800312c:	6880      	ldr	r0, [r0, #8]
 800312e:	f010 0001 	ands.w	r0, r0, #1
 8003132:	d000      	beq.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003134:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003136:	4302      	orrs	r2, r0
 8003138:	d141      	bne.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800313a:	4c25      	ldr	r4, [pc, #148]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800313c:	68a2      	ldr	r2, [r4, #8]
 800313e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003142:	f022 020f 	bic.w	r2, r2, #15
 8003146:	6808      	ldr	r0, [r1, #0]
 8003148:	6889      	ldr	r1, [r1, #8]
 800314a:	4301      	orrs	r1, r0
 800314c:	430a      	orrs	r2, r1
 800314e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003150:	2000      	movs	r0, #0
 8003152:	e02d      	b.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003154:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003158:	9201      	str	r2, [sp, #4]
 800315a:	e7c4      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315e:	f042 0220 	orr.w	r2, r2, #32
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	e023      	b.n	80031b6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800316e:	4918      	ldr	r1, [pc, #96]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003170:	688a      	ldr	r2, [r1, #8]
 8003172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003176:	608a      	str	r2, [r1, #8]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	f012 0201 	ands.w	r2, r2, #1
 8003180:	d000      	beq.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8003182:	2201      	movs	r2, #1
 8003184:	4913      	ldr	r1, [pc, #76]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003186:	6889      	ldr	r1, [r1, #8]
 8003188:	f011 0101 	ands.w	r1, r1, #1
 800318c:	d000      	beq.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800318e:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003190:	430a      	orrs	r2, r1
 8003192:	d116      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003196:	688a      	ldr	r2, [r1, #8]
 8003198:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800319c:	f022 020f 	bic.w	r2, r2, #15
 80031a0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a2:	2000      	movs	r0, #0
 80031a4:	e004      	b.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031ae:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80031b6:	b01b      	add	sp, #108	; 0x6c
 80031b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031bc:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031be:	2000      	movs	r0, #0
 80031c0:	e7f6      	b.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e7f4      	b.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 80031c6:	2002      	movs	r0, #2
}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	50040000 	.word	0x50040000
 80031d0:	50040300 	.word	0x50040300
 80031d4:	50040100 	.word	0x50040100

080031d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	0200      	lsls	r0, r0, #8
 80031e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80031f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_NVIC_SetPriority+0x68>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003206:	f1c3 0c07 	rsb	ip, r3, #7
 800320a:	f1bc 0f04 	cmp.w	ip, #4
 800320e:	bf28      	it	cs
 8003210:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003214:	f103 0e04 	add.w	lr, r3, #4
 8003218:	f1be 0f06 	cmp.w	lr, #6
 800321c:	d918      	bls.n	8003250 <HAL_NVIC_SetPriority+0x54>
 800321e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 3eff 	mov.w	lr, #4294967295
 8003224:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003228:	ea21 010c 	bic.w	r1, r1, ip
 800322c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322e:	fa0e f303 	lsl.w	r3, lr, r3
 8003232:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003236:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003238:	2800      	cmp	r0, #0
 800323a:	db0b      	blt.n	8003254 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	0109      	lsls	r1, r1, #4
 800323e:	b2c9      	uxtb	r1, r1
 8003240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800324c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003250:	2300      	movs	r3, #0
 8003252:	e7e5      	b.n	8003220 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	f000 000f 	and.w	r0, r0, #15
 8003258:	0109      	lsls	r1, r1, #4
 800325a:	b2c9      	uxtb	r1, r1
 800325c:	4b02      	ldr	r3, [pc, #8]	; (8003268 <HAL_NVIC_SetPriority+0x6c>)
 800325e:	5419      	strb	r1, [r3, r0]
 8003260:	e7f4      	b.n	800324c <HAL_NVIC_SetPriority+0x50>
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00
 8003268:	e000ed14 	.word	0xe000ed14

0800326c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800326c:	2800      	cmp	r0, #0
 800326e:	db07      	blt.n	8003280 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003270:	f000 021f 	and.w	r2, r0, #31
 8003274:	0940      	lsrs	r0, r0, #5
 8003276:	2301      	movs	r3, #1
 8003278:	4093      	lsls	r3, r2
 800327a:	4a02      	ldr	r2, [pc, #8]	; (8003284 <HAL_NVIC_EnableIRQ+0x18>)
 800327c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003288:	3801      	subs	r0, #1
 800328a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800328e:	d20b      	bcs.n	80032a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003290:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003294:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <HAL_SYSTICK_Config+0x24>)
 8003298:	21f0      	movs	r1, #240	; 0xf0
 800329a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800329e:	2000      	movs	r0, #0
 80032a0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a2:	2207      	movs	r2, #7
 80032a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80032a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032b4:	f004 0c1c 	and.w	ip, r4, #28
 80032b8:	2401      	movs	r4, #1
 80032ba:	fa04 f40c 	lsl.w	r4, r4, ip
 80032be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80032c0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032c2:	6804      	ldr	r4, [r0, #0]
 80032c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c6:	6883      	ldr	r3, [r0, #8]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d005      	beq.n	80032d8 <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	60da      	str	r2, [r3, #12]
  }
}
 80032d4:	bc30      	pop	{r4, r5}
 80032d6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80032d8:	6803      	ldr	r3, [r0, #0]
 80032da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032dc:	6803      	ldr	r3, [r0, #0]
 80032de:	60d9      	str	r1, [r3, #12]
 80032e0:	e7f8      	b.n	80032d4 <DMA_SetConfig+0x24>
	...

080032e4 <HAL_DMA_Init>:
  if(hdma == NULL)
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d073      	beq.n	80033d0 <HAL_DMA_Init+0xec>
{
 80032e8:	b410      	push	{r4}
 80032ea:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_DMA_Init+0xf0>)
 80032f0:	4290      	cmp	r0, r2
 80032f2:	d84a      	bhi.n	800338a <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032f4:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_DMA_Init+0xf4>)
 80032f6:	4402      	add	r2, r0
 80032f8:	4938      	ldr	r1, [pc, #224]	; (80033dc <HAL_DMA_Init+0xf8>)
 80032fa:	fba1 1202 	umull	r1, r2, r1, r2
 80032fe:	0912      	lsrs	r2, r2, #4
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <HAL_DMA_Init+0xfc>)
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800330e:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003310:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003314:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68dc      	ldr	r4, [r3, #12]
 800331c:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331e:	691c      	ldr	r4, [r3, #16]
 8003320:	4322      	orrs	r2, r4
 8003322:	695c      	ldr	r4, [r3, #20]
 8003324:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	699c      	ldr	r4, [r3, #24]
 8003328:	4322      	orrs	r2, r4
 800332a:	69dc      	ldr	r4, [r3, #28]
 800332c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800332e:	6a1c      	ldr	r4, [r3, #32]
 8003330:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003332:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8003334:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800333c:	d01b      	beq.n	8003376 <HAL_DMA_Init+0x92>
    if (DMA1 == hdma->DmaBaseAddress)
 800333e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <HAL_DMA_Init+0xfc>)
 8003342:	4291      	cmp	r1, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Init+0xbc>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003346:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_DMA_Init+0xfc>)
 8003348:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 800334c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800334e:	f000 0c1c 	and.w	ip, r0, #28
 8003352:	200f      	movs	r0, #15
 8003354:	fa00 f00c 	lsl.w	r0, r0, ip
 8003358:	ea21 0100 	bic.w	r1, r1, r0
 800335c:	f8c2 14a8 	str.w	r1, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003360:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8003364:	6858      	ldr	r0, [r3, #4]
 8003366:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003368:	f004 0c1c 	and.w	ip, r4, #28
 800336c:	fa00 f00c 	lsl.w	r0, r0, ip
 8003370:	4301      	orrs	r1, r0
 8003372:	f8c2 14a8 	str.w	r1, [r2, #1192]	; 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003376:	2000      	movs	r0, #0
 8003378:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003380:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8003384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003388:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_DMA_Init+0x100>)
 800338c:	4402      	add	r2, r0
 800338e:	4913      	ldr	r1, [pc, #76]	; (80033dc <HAL_DMA_Init+0xf8>)
 8003390:	fba1 1202 	umull	r1, r2, r1, r2
 8003394:	0912      	lsrs	r2, r2, #4
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <HAL_DMA_Init+0x104>)
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
 800339e:	e7b3      	b.n	8003308 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033a0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80033a4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80033a6:	f000 0c1c 	and.w	ip, r0, #28
 80033aa:	200f      	movs	r0, #15
 80033ac:	fa00 f00c 	lsl.w	r0, r0, ip
 80033b0:	ea21 0100 	bic.w	r1, r1, r0
 80033b4:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033b8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80033bc:	6858      	ldr	r0, [r3, #4]
 80033be:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80033c0:	f004 0c1c 	and.w	ip, r4, #28
 80033c4:	fa00 f00c 	lsl.w	r0, r0, ip
 80033c8:	4301      	orrs	r1, r0
 80033ca:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
 80033ce:	e7d2      	b.n	8003376 <HAL_DMA_Init+0x92>
    return HAL_ERROR;
 80033d0:	2001      	movs	r0, #1
}
 80033d2:	4770      	bx	lr
 80033d4:	40020407 	.word	0x40020407
 80033d8:	bffdfff8 	.word	0xbffdfff8
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	40020000 	.word	0x40020000
 80033e4:	bffdfbf8 	.word	0xbffdfbf8
 80033e8:	40020400 	.word	0x40020400

080033ec <HAL_DMA_Start_IT>:
{
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80033f0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80033f4:	2801      	cmp	r0, #1
 80033f6:	d032      	beq.n	800345e <HAL_DMA_Start_IT+0x72>
 80033f8:	2001      	movs	r0, #1
 80033fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fe:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003402:	b2c0      	uxtb	r0, r0
 8003404:	2801      	cmp	r0, #1
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8003408:	2300      	movs	r3, #0
 800340a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800340e:	2002      	movs	r0, #2
}
 8003410:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003412:	2002      	movs	r0, #2
 8003414:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	2000      	movs	r0, #0
 800341a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	6828      	ldr	r0, [r5, #0]
 8003420:	f020 0001 	bic.w	r0, r0, #1
 8003424:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff ff42 	bl	80032b0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 800342c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800342e:	b15b      	cbz	r3, 8003448 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	f043 030e 	orr.w	r3, r3, #14
 8003438:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2000      	movs	r0, #0
 8003446:	e7e3      	b.n	8003410 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	f043 030a 	orr.w	r3, r3, #10
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	e7ed      	b.n	800343a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800345e:	2002      	movs	r0, #2
 8003460:	e7d6      	b.n	8003410 <HAL_DMA_Start_IT+0x24>

08003462 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d006      	beq.n	800347a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346c:	2304      	movs	r3, #4
 800346e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003470:	2300      	movs	r3, #0
 8003472:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003476:	2001      	movs	r0, #1
 8003478:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347a:	6802      	ldr	r2, [r0, #0]
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	f023 030e 	bic.w	r3, r3, #14
 8003482:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003484:	6802      	ldr	r2, [r0, #0]
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800348e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003490:	f003 031c 	and.w	r3, r3, #28
 8003494:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003496:	2201      	movs	r2, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800349e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034a2:	2300      	movs	r3, #0
 80034a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 80034a8:	4618      	mov	r0, r3
}
 80034aa:	4770      	bx	lr

080034ac <HAL_DMA_Abort_IT>:
{
 80034ac:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034ae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d003      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	2304      	movs	r3, #4
 80034ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
}
 80034be:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	6802      	ldr	r2, [r0, #0]
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f023 030e 	bic.w	r3, r3, #14
 80034c8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034ca:	6802      	ldr	r2, [r0, #0]
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034d6:	f003 031c 	and.w	r3, r3, #28
 80034da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80034dc:	2201      	movs	r2, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034e4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034e8:	2300      	movs	r3, #0
 80034ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80034ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034f0:	b113      	cbz	r3, 80034f8 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80034f2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2000      	movs	r0, #0
 80034f6:	e7e2      	b.n	80034be <HAL_DMA_Abort_IT+0x12>
 80034f8:	2000      	movs	r0, #0
 80034fa:	e7e0      	b.n	80034be <HAL_DMA_Abort_IT+0x12>

080034fc <HAL_DMA_IRQHandler>:
{
 80034fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003500:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003502:	6804      	ldr	r4, [r0, #0]
 8003504:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003506:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003508:	f003 031c 	and.w	r3, r3, #28
 800350c:	2204      	movs	r2, #4
 800350e:	409a      	lsls	r2, r3
 8003510:	420a      	tst	r2, r1
 8003512:	d015      	beq.n	8003540 <HAL_DMA_IRQHandler+0x44>
 8003514:	f015 0f04 	tst.w	r5, #4
 8003518:	d012      	beq.n	8003540 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f013 0f20 	tst.w	r3, #32
 8003520:	d103      	bne.n	800352a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800352a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800352c:	f003 021c 	and.w	r2, r3, #28
 8003530:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003532:	2304      	movs	r3, #4
 8003534:	4093      	lsls	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8003538:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800353a:	b103      	cbz	r3, 800353e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800353c:	4798      	blx	r3
}
 800353e:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003540:	2202      	movs	r2, #2
 8003542:	409a      	lsls	r2, r3
 8003544:	420a      	tst	r2, r1
 8003546:	d01c      	beq.n	8003582 <HAL_DMA_IRQHandler+0x86>
 8003548:	f015 0f02 	tst.w	r5, #2
 800354c:	d019      	beq.n	8003582 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	f013 0f20 	tst.w	r3, #32
 8003554:	d106      	bne.n	8003564 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	f023 030a 	bic.w	r3, r3, #10
 800355c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800355e:	2301      	movs	r3, #1
 8003560:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003564:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003566:	f003 021c 	and.w	r2, r3, #28
 800356a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800356c:	2302      	movs	r3, #2
 800356e:	4093      	lsls	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003572:	2300      	movs	r3, #0
 8003574:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003578:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0df      	beq.n	800353e <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800357e:	4798      	blx	r3
 8003580:	e7dd      	b.n	800353e <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003582:	2208      	movs	r2, #8
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	420b      	tst	r3, r1
 800358a:	d0d8      	beq.n	800353e <HAL_DMA_IRQHandler+0x42>
 800358c:	f015 0f08 	tst.w	r5, #8
 8003590:	d0d5      	beq.n	800353e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f023 030e 	bic.w	r3, r3, #14
 8003598:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800359a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800359c:	f003 031c 	and.w	r3, r3, #28
 80035a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035a2:	2201      	movs	r2, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035aa:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80035ac:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80035b0:	2300      	movs	r3, #0
 80035b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80035b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0c0      	beq.n	800353e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80035bc:	4798      	blx	r3
  return;
 80035be:	e7be      	b.n	800353e <HAL_DMA_IRQHandler+0x42>

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80035c4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	e062      	b.n	800368e <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ca:	005e      	lsls	r6, r3, #1
 80035cc:	2403      	movs	r4, #3
 80035ce:	40b4      	lsls	r4, r6
 80035d0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d4:	68cc      	ldr	r4, [r1, #12]
 80035d6:	40b4      	lsls	r4, r6
 80035d8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80035da:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035dc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035de:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e2:	684c      	ldr	r4, [r1, #4]
 80035e4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80035e8:	409c      	lsls	r4, r3
 80035ea:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80035ee:	6044      	str	r4, [r0, #4]
 80035f0:	e05e      	b.n	80036b0 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f2:	08dd      	lsrs	r5, r3, #3
 80035f4:	3508      	adds	r5, #8
 80035f6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035fa:	f003 0407 	and.w	r4, r3, #7
 80035fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003602:	240f      	movs	r4, #15
 8003604:	fa04 f40c 	lsl.w	r4, r4, ip
 8003608:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360c:	690c      	ldr	r4, [r1, #16]
 800360e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003612:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003616:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800361a:	e060      	b.n	80036de <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800361c:	2403      	movs	r4, #3
 800361e:	e000      	b.n	8003622 <HAL_GPIO_Init+0x62>
 8003620:	2400      	movs	r4, #0
 8003622:	fa04 f40e 	lsl.w	r4, r4, lr
 8003626:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003628:	f10c 0c02 	add.w	ip, ip, #2
 800362c:	4d4f      	ldr	r5, [pc, #316]	; (800376c <HAL_GPIO_Init+0x1ac>)
 800362e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003632:	4c4f      	ldr	r4, [pc, #316]	; (8003770 <HAL_GPIO_Init+0x1b0>)
 8003634:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003636:	43d4      	mvns	r4, r2
 8003638:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800363c:	684f      	ldr	r7, [r1, #4]
 800363e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003642:	d001      	beq.n	8003648 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003644:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003648:	4d49      	ldr	r5, [pc, #292]	; (8003770 <HAL_GPIO_Init+0x1b0>)
 800364a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800364c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800364e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003652:	684f      	ldr	r7, [r1, #4]
 8003654:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003658:	d001      	beq.n	800365e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800365a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800365e:	4d44      	ldr	r5, [pc, #272]	; (8003770 <HAL_GPIO_Init+0x1b0>)
 8003660:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003662:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003664:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003668:	684f      	ldr	r7, [r1, #4]
 800366a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800366e:	d001      	beq.n	8003674 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003670:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003674:	4d3e      	ldr	r5, [pc, #248]	; (8003770 <HAL_GPIO_Init+0x1b0>)
 8003676:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8003678:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800367a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800367c:	684e      	ldr	r6, [r1, #4]
 800367e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003682:	d001      	beq.n	8003688 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8003684:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8003688:	4a39      	ldr	r2, [pc, #228]	; (8003770 <HAL_GPIO_Init+0x1b0>)
 800368a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800368c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368e:	680a      	ldr	r2, [r1, #0]
 8003690:	fa32 f403 	lsrs.w	r4, r2, r3
 8003694:	d068      	beq.n	8003768 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003696:	f04f 0c01 	mov.w	ip, #1
 800369a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800369e:	ea1c 0202 	ands.w	r2, ip, r2
 80036a2:	d0f3      	beq.n	800368c <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a4:	684c      	ldr	r4, [r1, #4]
 80036a6:	f004 0403 	and.w	r4, r4, #3
 80036aa:	3c01      	subs	r4, #1
 80036ac:	2c01      	cmp	r4, #1
 80036ae:	d98b      	bls.n	80035c8 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b0:	684c      	ldr	r4, [r1, #4]
 80036b2:	f004 0403 	and.w	r4, r4, #3
 80036b6:	2c03      	cmp	r4, #3
 80036b8:	d00c      	beq.n	80036d4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80036ba:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036bc:	005d      	lsls	r5, r3, #1
 80036be:	f04f 0c03 	mov.w	ip, #3
 80036c2:	fa0c fc05 	lsl.w	ip, ip, r5
 80036c6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ca:	688c      	ldr	r4, [r1, #8]
 80036cc:	40ac      	lsls	r4, r5
 80036ce:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80036d2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d4:	684c      	ldr	r4, [r1, #4]
 80036d6:	f004 0403 	and.w	r4, r4, #3
 80036da:	2c02      	cmp	r4, #2
 80036dc:	d089      	beq.n	80035f2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80036de:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80036e4:	f04f 0c03 	mov.w	ip, #3
 80036e8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80036ec:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036f0:	684c      	ldr	r4, [r1, #4]
 80036f2:	f004 0403 	and.w	r4, r4, #3
 80036f6:	fa04 f40e 	lsl.w	r4, r4, lr
 80036fa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80036fe:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003700:	684c      	ldr	r4, [r1, #4]
 8003702:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003706:	d0c1      	beq.n	800368c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003708:	4c1a      	ldr	r4, [pc, #104]	; (8003774 <HAL_GPIO_Init+0x1b4>)
 800370a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800370c:	f045 0501 	orr.w	r5, r5, #1
 8003710:	6625      	str	r5, [r4, #96]	; 0x60
 8003712:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003714:	f004 0401 	and.w	r4, r4, #1
 8003718:	9401      	str	r4, [sp, #4]
 800371a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800371c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003720:	f10c 0502 	add.w	r5, ip, #2
 8003724:	4c11      	ldr	r4, [pc, #68]	; (800376c <HAL_GPIO_Init+0x1ac>)
 8003726:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800372a:	f003 0403 	and.w	r4, r3, #3
 800372e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003732:	240f      	movs	r4, #15
 8003734:	fa04 f40e 	lsl.w	r4, r4, lr
 8003738:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800373c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003740:	f43f af6e 	beq.w	8003620 <HAL_GPIO_Init+0x60>
 8003744:	4c0c      	ldr	r4, [pc, #48]	; (8003778 <HAL_GPIO_Init+0x1b8>)
 8003746:	42a0      	cmp	r0, r4
 8003748:	d00a      	beq.n	8003760 <HAL_GPIO_Init+0x1a0>
 800374a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800374e:	42a0      	cmp	r0, r4
 8003750:	d008      	beq.n	8003764 <HAL_GPIO_Init+0x1a4>
 8003752:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003756:	42a0      	cmp	r0, r4
 8003758:	f43f af60 	beq.w	800361c <HAL_GPIO_Init+0x5c>
 800375c:	2407      	movs	r4, #7
 800375e:	e760      	b.n	8003622 <HAL_GPIO_Init+0x62>
 8003760:	2401      	movs	r4, #1
 8003762:	e75e      	b.n	8003622 <HAL_GPIO_Init+0x62>
 8003764:	2402      	movs	r4, #2
 8003766:	e75c      	b.n	8003622 <HAL_GPIO_Init+0x62>
  }
}
 8003768:	b003      	add	sp, #12
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376c:	40010000 	.word	0x40010000
 8003770:	40010400 	.word	0x40010400
 8003774:	40021000 	.word	0x40021000
 8003778:	48000400 	.word	0x48000400

0800377c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800377c:	b10a      	cbz	r2, 8003782 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377e:	6181      	str	r1, [r0, #24]
 8003780:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003782:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003784:	4770      	bx	lr
	...

08003788 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_PWR_EnableBkUpAccess+0xc>)
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	4770      	bx	lr
 8003794:	40007000 	.word	0x40007000

08003798 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_PWREx_GetVoltageRange+0xc>)
 800379a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800379c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80037ac:	d00f      	beq.n	80037ce <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ae:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d034      	beq.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ca:	2000      	movs	r0, #0
 80037cc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037da:	d020      	beq.n	800381e <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2232      	movs	r2, #50	; 0x32
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fe:	e000      	b.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8003800:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003804:	6952      	ldr	r2, [r2, #20]
 8003806:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800380a:	d001      	beq.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x68>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f7      	bne.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003818:	d103      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800381a:	2000      	movs	r0, #0
 800381c:	4770      	bx	lr
 800381e:	2000      	movs	r0, #0
 8003820:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003822:	2003      	movs	r0, #3
 8003824:	4770      	bx	lr
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40007000 	.word	0x40007000
 8003830:	2000000c 	.word	0x2000000c
 8003834:	431bde83 	.word	0x431bde83

08003838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003838:	b530      	push	{r4, r5, lr}
 800383a:	b083      	sub	sp, #12
 800383c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003846:	d00b      	beq.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003848:	f7ff ffa6 	bl	8003798 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003850:	d017      	beq.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003852:	2c80      	cmp	r4, #128	; 0x80
 8003854:	d81f      	bhi.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003856:	d02d      	beq.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003858:	2c70      	cmp	r4, #112	; 0x70
 800385a:	d02d      	beq.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800385c:	2100      	movs	r1, #0
 800385e:	e01b      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4d17      	ldr	r5, [pc, #92]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003862:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	65ab      	str	r3, [r5, #88]	; 0x58
 800386a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7ff ff90 	bl	8003798 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003880:	e7e4      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003882:	2c80      	cmp	r4, #128	; 0x80
 8003884:	d903      	bls.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8003886:	2ca0      	cmp	r4, #160	; 0xa0
 8003888:	d903      	bls.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800388a:	2102      	movs	r1, #2
 800388c:	e004      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800388e:	2100      	movs	r1, #0
 8003890:	e002      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003892:	2101      	movs	r1, #1
 8003894:	e000      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003896:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	428b      	cmp	r3, r1
 80038ac:	d106      	bne.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80038ae:	2000      	movs	r0, #0
}
 80038b0:	b003      	add	sp, #12
 80038b2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b4:	2102      	movs	r1, #2
 80038b6:	e7ef      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2101      	movs	r1, #1
 80038ba:	e7ed      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80038bc:	2001      	movs	r0, #1
 80038be:	e7f7      	b.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40022000 	.word	0x40022000

080038c8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ca:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d2:	f013 030c 	ands.w	r3, r3, #12
 80038d6:	d00a      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x26>
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d006      	beq.n	80038ea <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d01f      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038e4:	2000      	movs	r0, #0
 80038e6:	4602      	mov	r2, r0
 80038e8:	e010      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ea:	2a01      	cmp	r2, #1
 80038ec:	d1f6      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	f012 0f08 	tst.w	r2, #8
 80038f6:	d10c      	bne.n	8003912 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f8:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038fa:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80038fe:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003904:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003908:	b143      	cbz	r3, 800391c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800390a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x64>
}
 8003910:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800391a:	e7f2      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800391c:	4610      	mov	r0, r2
 800391e:	e7f5      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003920:	4814      	ldr	r0, [pc, #80]	; (8003974 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003922:	2200      	movs	r2, #0
 8003924:	e7f2      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003926:	4814      	ldr	r0, [pc, #80]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003928:	2200      	movs	r2, #0
 800392a:	e7ef      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003934:	2b02      	cmp	r3, #2
 8003936:	d016      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x9e>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d100      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800393e:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003940:	68c8      	ldr	r0, [r1, #12]
 8003942:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003946:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003948:	68c8      	ldr	r0, [r1, #12]
 800394a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800394e:	fb02 f000 	mul.w	r0, r2, r0
 8003952:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003956:	68cb      	ldr	r3, [r1, #12]
 8003958:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800395c:	3301      	adds	r3, #1
 800395e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003960:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003964:	e7d4      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_RCC_GetSysClockFreq+0xac>)
 8003968:	e7e9      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x76>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	0800afb8 	.word	0x0800afb8
 8003974:	00f42400 	.word	0x00f42400
 8003978:	007a1200 	.word	0x007a1200

0800397c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800397c:	2800      	cmp	r0, #0
 800397e:	f000 8353 	beq.w	8004028 <HAL_RCC_OscConfig+0x6ac>
{
 8003982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003984:	b083      	sub	sp, #12
 8003986:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003988:	4b96      	ldr	r3, [pc, #600]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 800398a:	689d      	ldr	r5, [r3, #8]
 800398c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003990:	68de      	ldr	r6, [r3, #12]
 8003992:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003996:	6803      	ldr	r3, [r0, #0]
 8003998:	f013 0f10 	tst.w	r3, #16
 800399c:	d05a      	beq.n	8003a54 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800399e:	b1e5      	cbz	r5, 80039da <HAL_RCC_OscConfig+0x5e>
 80039a0:	2d0c      	cmp	r5, #12
 80039a2:	d018      	beq.n	80039d6 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039a4:	69e3      	ldr	r3, [r4, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80bb 	beq.w	8003b22 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80039ac:	4a8d      	ldr	r2, [pc, #564]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039b6:	f7fe fd63 	bl	8002480 <HAL_GetTick>
 80039ba:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039bc:	4b89      	ldr	r3, [pc, #548]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f013 0f02 	tst.w	r3, #2
 80039c4:	f040 809a 	bne.w	8003afc <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c8:	f7fe fd5a 	bl	8002480 <HAL_GetTick>
 80039cc:	1bc0      	subs	r0, r0, r7
 80039ce:	2802      	cmp	r0, #2
 80039d0:	d9f4      	bls.n	80039bc <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80039d2:	2003      	movs	r0, #3
 80039d4:	e335      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039d6:	2e01      	cmp	r6, #1
 80039d8:	d1e4      	bne.n	80039a4 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039da:	4b82      	ldr	r3, [pc, #520]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f013 0f02 	tst.w	r3, #2
 80039e2:	d003      	beq.n	80039ec <HAL_RCC_OscConfig+0x70>
 80039e4:	69e3      	ldr	r3, [r4, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8320 	beq.w	800402c <HAL_RCC_OscConfig+0x6b0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039ee:	4b7d      	ldr	r3, [pc, #500]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f013 0f08 	tst.w	r3, #8
 80039f6:	d05b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x134>
 80039f8:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a00:	4298      	cmp	r0, r3
 8003a02:	d85c      	bhi.n	8003abe <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a04:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a20:	6a21      	ldr	r1, [r4, #32]
 8003a22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a26:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	d060      	beq.n	8003aee <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2c:	f7ff ff4c 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003a30:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	40d8      	lsrs	r0, r3
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_OscConfig+0x270>)
 8003a44:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f7fe fcd5 	bl	80023f8 <HAL_InitTick>
        if(status != HAL_OK)
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	f040 82f7 	bne.w	8004042 <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f013 0f01 	tst.w	r3, #1
 8003a5a:	f000 8081 	beq.w	8003b60 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a5e:	2d08      	cmp	r5, #8
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
 8003a62:	2d0c      	cmp	r5, #12
 8003a64:	d071      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	f000 8098 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x224>
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	f000 809a 	beq.w	8003bac <HAL_RCC_OscConfig+0x230>
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a88:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8a:	6863      	ldr	r3, [r4, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 809a 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8003a92:	f7fe fcf5 	bl	8002480 <HAL_GetTick>
 8003a96:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a98:	4b52      	ldr	r3, [pc, #328]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aa0:	d15e      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fced 	bl	8002480 <HAL_GetTick>
 8003aa6:	1bc0      	subs	r0, r0, r7
 8003aa8:	2864      	cmp	r0, #100	; 0x64
 8003aaa:	d9f5      	bls.n	8003a98 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003aac:	2003      	movs	r0, #3
 8003aae:	e2c8      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abc:	e7a0      	b.n	8003a00 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003abe:	f7ff febb 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f040 82b4 	bne.w	8004030 <HAL_RCC_OscConfig+0x6b4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac8:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f042 0208 	orr.w	r2, r2, #8
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ad8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ae4:	6a21      	ldr	r1, [r4, #32]
 8003ae6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e79e      	b.n	8003a2c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003af0:	f7ff fea2 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d099      	beq.n	8003a2c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
 8003afa:	e2a2      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f042 0208 	orr.w	r2, r2, #8
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003b18:	6a21      	ldr	r1, [r4, #32]
 8003b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e798      	b.n	8003a54 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8003b22:	4a30      	ldr	r2, [pc, #192]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fca8 	bl	8002480 <HAL_GetTick>
 8003b30:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f013 0f02 	tst.w	r3, #2
 8003b3a:	d08b      	beq.n	8003a54 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fca0 	bl	8002480 <HAL_GetTick>
 8003b40:	1bc0      	subs	r0, r0, r7
 8003b42:	2802      	cmp	r0, #2
 8003b44:	d9f5      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8003b46:	2003      	movs	r0, #3
 8003b48:	e27b      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b4a:	2e03      	cmp	r6, #3
 8003b4c:	d18b      	bne.n	8003a66 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b56:	d003      	beq.n	8003b60 <HAL_RCC_OscConfig+0x1e4>
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 826a 	beq.w	8004034 <HAL_RCC_OscConfig+0x6b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f013 0f02 	tst.w	r3, #2
 8003b66:	d058      	beq.n	8003c1a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b68:	2d04      	cmp	r5, #4
 8003b6a:	d045      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x27c>
 8003b6c:	2d0c      	cmp	r5, #12
 8003b6e:	d041      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b70:	68e3      	ldr	r3, [r4, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8091 	beq.w	8003c9a <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b82:	f7fe fc7d 	bl	8002480 <HAL_GetTick>
 8003b86:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b90:	d17a      	bne.n	8003c88 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fe fc75 	bl	8002480 <HAL_GetTick>
 8003b96:	1b80      	subs	r0, r0, r6
 8003b98:	2802      	cmp	r0, #2
 8003b9a:	d9f5      	bls.n	8003b88 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	e250      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e76e      	b.n	8003a8a <HAL_RCC_OscConfig+0x10e>
 8003bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bb0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e761      	b.n	8003a8a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fc5b 	bl	8002480 <HAL_GetTick>
 8003bca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_OscConfig+0x268>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003bd4:	d0c4      	beq.n	8003b60 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fc53 	bl	8002480 <HAL_GetTick>
 8003bda:	1bc0      	subs	r0, r0, r7
 8003bdc:	2864      	cmp	r0, #100	; 0x64
 8003bde:	d9f5      	bls.n	8003bcc <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8003be0:	2003      	movs	r0, #3
 8003be2:	e22e      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800afa0 	.word	0x0800afa0
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	20000014 	.word	0x20000014
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bf4:	2e02      	cmp	r6, #2
 8003bf6:	d1bb      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf8:	4baf      	ldr	r3, [pc, #700]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_OscConfig+0x28e>
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8217 	beq.w	8004038 <HAL_RCC_OscConfig+0x6bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4aab      	ldr	r2, [pc, #684]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c0c:	6853      	ldr	r3, [r2, #4]
 8003c0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c12:	6921      	ldr	r1, [r4, #16]
 8003c14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c18:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f013 0f08 	tst.w	r3, #8
 8003c20:	d07d      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c22:	6963      	ldr	r3, [r4, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d063      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 8003c28:	4ba3      	ldr	r3, [pc, #652]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003c2e:	69a1      	ldr	r1, [r4, #24]
 8003c30:	f003 0210 	and.w	r2, r3, #16
 8003c34:	4291      	cmp	r1, r2
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003c38:	f003 0203 	and.w	r2, r3, #3
 8003c3c:	2a02      	cmp	r2, #2
 8003c3e:	f000 81fd 	beq.w	800403c <HAL_RCC_OscConfig+0x6c0>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003c42:	f013 0f01 	tst.w	r3, #1
 8003c46:	d13c      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003c48:	4a9b      	ldr	r2, [pc, #620]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c4a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003c4e:	f023 0310 	bic.w	r3, r3, #16
 8003c52:	69a1      	ldr	r1, [r4, #24]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4a97      	ldr	r2, [pc, #604]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c5c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003c68:	f7fe fc0a 	bl	8002480 <HAL_GetTick>
 8003c6c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6e:	4b92      	ldr	r3, [pc, #584]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	f013 0f02 	tst.w	r3, #2
 8003c78:	d151      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7a:	f7fe fc01 	bl	8002480 <HAL_GetTick>
 8003c7e:	1b80      	subs	r0, r0, r6
 8003c80:	2811      	cmp	r0, #17
 8003c82:	d9f4      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 8003c84:	2003      	movs	r0, #3
 8003c86:	e1dc      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4a8b      	ldr	r2, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c8a:	6853      	ldr	r3, [r2, #4]
 8003c8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c90:	6921      	ldr	r1, [r4, #16]
 8003c92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c96:	6053      	str	r3, [r2, #4]
 8003c98:	e7bf      	b.n	8003c1a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4a87      	ldr	r2, [pc, #540]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003c9c:	6813      	ldr	r3, [r2, #0]
 8003c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fbec 	bl	8002480 <HAL_GetTick>
 8003ca8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003caa:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003cb2:	d0b2      	beq.n	8003c1a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fbe4 	bl	8002480 <HAL_GetTick>
 8003cb8:	1b80      	subs	r0, r0, r6
 8003cba:	2802      	cmp	r0, #2
 8003cbc:	d9f5      	bls.n	8003caa <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8003cbe:	2003      	movs	r0, #3
 8003cc0:	e1bf      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_LSI_DISABLE();
 8003cc2:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003cc4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003cd0:	f7fe fbd6 	bl	8002480 <HAL_GetTick>
 8003cd4:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd6:	4b78      	ldr	r3, [pc, #480]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f013 0f02 	tst.w	r3, #2
 8003ce0:	d0b2      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fbcd 	bl	8002480 <HAL_GetTick>
 8003ce6:	1b80      	subs	r0, r0, r6
 8003ce8:	2811      	cmp	r0, #17
 8003cea:	d9f4      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8003cec:	2003      	movs	r0, #3
 8003cee:	e1a8      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_LSI_DISABLE();
 8003cf0:	4a71      	ldr	r2, [pc, #452]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003cf2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fbbf 	bl	8002480 <HAL_GetTick>
 8003d02:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	4b6c      	ldr	r3, [pc, #432]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0a:	f013 0f02 	tst.w	r3, #2
 8003d0e:	d006      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe fbb6 	bl	8002480 <HAL_GetTick>
 8003d14:	1b80      	subs	r0, r0, r6
 8003d16:	2811      	cmp	r0, #17
 8003d18:	d9f4      	bls.n	8003d04 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	e191      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f013 0f04 	tst.w	r3, #4
 8003d24:	f000 808d 	beq.w	8003e42 <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d28:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d30:	d12e      	bne.n	8003d90 <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b61      	ldr	r3, [pc, #388]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d46:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d48:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x540>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d50:	d020      	beq.n	8003d94 <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	f013 0f01 	tst.w	r3, #1
 8003d58:	d038      	beq.n	8003dcc <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d5a:	4957      	ldr	r1, [pc, #348]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003d5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	f013 0f04 	tst.w	r3, #4
 8003d74:	d022      	beq.n	8003dbc <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d7a:	f042 0204 	orr.w	r2, r2, #4
 8003d7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8003d8e:	e02a      	b.n	8003de6 <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 8003d90:	2600      	movs	r6, #0
 8003d92:	e7d9      	b.n	8003d48 <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4a49      	ldr	r2, [pc, #292]	; (8003ebc <HAL_RCC_OscConfig+0x540>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fb6f 	bl	8002480 <HAL_GetTick>
 8003da2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da4:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <HAL_RCC_OscConfig+0x540>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dac:	d1d1      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fb67 	bl	8002480 <HAL_GetTick>
 8003db2:	1bc0      	subs	r0, r0, r7
 8003db4:	2802      	cmp	r0, #2
 8003db6:	d9f5      	bls.n	8003da4 <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8003db8:	2003      	movs	r0, #3
 8003dba:	e142      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dbc:	4a3e      	ldr	r2, [pc, #248]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003dbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dca:	e00c      	b.n	8003de6 <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003dce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	b18b      	cbz	r3, 8003e0e <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 8003dea:	f7fe fb49 	bl	8002480 <HAL_GetTick>
 8003dee:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f013 0f02 	tst.w	r3, #2
 8003dfa:	d121      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fb40 	bl	8002480 <HAL_GetTick>
 8003e00:	1bc0      	subs	r0, r0, r7
 8003e02:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e06:	4298      	cmp	r0, r3
 8003e08:	d9f2      	bls.n	8003df0 <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 8003e0a:	2003      	movs	r0, #3
 8003e0c:	e119      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fb37 	bl	8002480 <HAL_GetTick>
 8003e12:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e14:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f013 0f02 	tst.w	r3, #2
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e20:	f7fe fb2e 	bl	8002480 <HAL_GetTick>
 8003e24:	1bc0      	subs	r0, r0, r7
 8003e26:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	d9f2      	bls.n	8003e14 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8003e2e:	2003      	movs	r0, #3
 8003e30:	e107      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003e32:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003e40:	b9e6      	cbnz	r6, 8003e7c <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f013 0f20 	tst.w	r3, #32
 8003e48:	d03a      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e4c:	b1e3      	cbz	r3, 8003e88 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e50:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003e5c:	f7fe fb10 	bl	8002480 <HAL_GetTick>
 8003e60:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e68:	f013 0f02 	tst.w	r3, #2
 8003e6c:	d128      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e6e:	f7fe fb07 	bl	8002480 <HAL_GetTick>
 8003e72:	1b80      	subs	r0, r0, r6
 8003e74:	2802      	cmp	r0, #2
 8003e76:	d9f4      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 8003e78:	2003      	movs	r0, #3
 8003e7a:	e0e2      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
 8003e86:	e7dc      	b.n	8003e42 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 8003e88:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e8a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003e96:	f7fe faf3 	bl	8002480 <HAL_GetTick>
 8003e9a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_OscConfig+0x53c>)
 8003e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea2:	f013 0f02 	tst.w	r3, #2
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea8:	f7fe faea 	bl	8002480 <HAL_GetTick>
 8003eac:	1b80      	subs	r0, r0, r6
 8003eae:	2802      	cmp	r0, #2
 8003eb0:	d9f4      	bls.n	8003e9c <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	e0c5      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80bc 	beq.w	8004040 <HAL_RCC_OscConfig+0x6c4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d017      	beq.n	8003efc <HAL_RCC_OscConfig+0x580>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ecc:	2d0c      	cmp	r5, #12
 8003ece:	f000 80bc 	beq.w	800404a <HAL_RCC_OscConfig+0x6ce>
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4a5f      	ldr	r2, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003edc:	f7fe fad0 	bl	8002480 <HAL_GetTick>
 8003ee0:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	4b5b      	ldr	r3, [pc, #364]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003eea:	f000 8094 	beq.w	8004016 <HAL_RCC_OscConfig+0x69a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fe fac7 	bl	8002480 <HAL_GetTick>
 8003ef2:	1b00      	subs	r0, r0, r4
 8003ef4:	2802      	cmp	r0, #2
 8003ef6:	d9f4      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x566>
            return HAL_TIMEOUT;
 8003ef8:	2003      	movs	r0, #3
 8003efa:	e0a2      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
      pll_config = RCC->PLLCFGR;
 8003efc:	4b54      	ldr	r3, [pc, #336]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003efe:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	f003 0103 	and.w	r1, r3, #3
 8003f04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f06:	4291      	cmp	r1, r2
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x5bc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0a:	2d0c      	cmp	r5, #12
 8003f0c:	f000 809b 	beq.w	8004046 <HAL_RCC_OscConfig+0x6ca>
            __HAL_RCC_PLL_DISABLE();
 8003f10:	4a4f      	ldr	r2, [pc, #316]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f18:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003f1a:	f7fe fab1 	bl	8002480 <HAL_GetTick>
 8003f1e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f28:	d02a      	beq.n	8003f80 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fe faa9 	bl	8002480 <HAL_GetTick>
 8003f2e:	1b40      	subs	r0, r0, r5
 8003f30:	2802      	cmp	r0, #2
 8003f32:	d9f5      	bls.n	8003f20 <HAL_RCC_OscConfig+0x5a4>
                return HAL_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	e084      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f3e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f40:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003f44:	d1e1      	bne.n	8003f0a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003f50:	d1db      	bne.n	8003f0a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f52:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003f56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f58:	0852      	lsrs	r2, r2, #1
 8003f5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003f60:	d1d3      	bne.n	8003f0a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f62:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003f66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f68:	0852      	lsrs	r2, r2, #1
 8003f6a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003f70:	d1cb      	bne.n	8003f0a <HAL_RCC_OscConfig+0x58e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f7a:	d032      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x666>
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e060      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f80:	4a33      	ldr	r2, [pc, #204]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003f82:	68d3      	ldr	r3, [r2, #12]
 8003f84:	4933      	ldr	r1, [pc, #204]	; (8004054 <HAL_RCC_OscConfig+0x6d8>)
 8003f86:	4019      	ands	r1, r3
 8003f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f8c:	3801      	subs	r0, #1
 8003f8e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003f92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003f98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003f9a:	0840      	lsrs	r0, r0, #1
 8003f9c:	3801      	subs	r0, #1
 8003f9e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003fa2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003fa4:	0840      	lsrs	r0, r0, #1
 8003fa6:	3801      	subs	r0, #1
 8003fa8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003fac:	430b      	orrs	r3, r1
 8003fae:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb8:	68d3      	ldr	r3, [r2, #12]
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003fc0:	f7fe fa5e 	bl	8002480 <HAL_GetTick>
 8003fc4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x662>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe fa56 	bl	8002480 <HAL_GetTick>
 8003fd4:	1b00      	subs	r0, r0, r4
 8003fd6:	2802      	cmp	r0, #2
 8003fd8:	d9f5      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x64a>
                return HAL_TIMEOUT;
 8003fda:	2003      	movs	r0, #3
 8003fdc:	e031      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e02f      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_PLL_ENABLE();
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ff2:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003ff4:	f7fe fa44 	bl	8002480 <HAL_GetTick>
 8003ff8:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x696>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fa3c 	bl	8002480 <HAL_GetTick>
 8004008:	1b03      	subs	r3, r0, r4
 800400a:	2b02      	cmp	r3, #2
 800400c:	d9f5      	bls.n	8003ffa <HAL_RCC_OscConfig+0x67e>
              return HAL_TIMEOUT;
 800400e:	2003      	movs	r0, #3
 8004010:	e017      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8004012:	2000      	movs	r0, #0
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x6d4>)
 8004018:	68d3      	ldr	r3, [r2, #12]
 800401a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004024:	2000      	movs	r0, #0
 8004026:	e00c      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
    return HAL_ERROR;
 8004028:	2001      	movs	r0, #1
}
 800402a:	4770      	bx	lr
        return HAL_ERROR;
 800402c:	2001      	movs	r0, #1
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
            return HAL_ERROR;
 8004030:	2001      	movs	r0, #1
 8004032:	e006      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
 8004036:	e004      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8004038:	2001      	movs	r0, #1
 800403a:	e002      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
          return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8004040:	2000      	movs	r0, #0
}
 8004042:	b003      	add	sp, #12
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004046:	2001      	movs	r0, #1
 8004048:	e7fb      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 800404a:	2001      	movs	r0, #1
 800404c:	e7f9      	b.n	8004042 <HAL_RCC_OscConfig+0x6c6>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	f99f808c 	.word	0xf99f808c

08004058 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004058:	2800      	cmp	r0, #0
 800405a:	f000 80af 	beq.w	80041bc <HAL_RCC_ClockConfig+0x164>
{
 800405e:	b570      	push	{r4, r5, r6, lr}
 8004060:	460d      	mov	r5, r1
 8004062:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x174>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	428b      	cmp	r3, r1
 800406e:	d20b      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004070:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_RCC_ClockConfig+0x174>)
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	430b      	orrs	r3, r1
 800407a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	428b      	cmp	r3, r1
 8004084:	f040 809c 	bne.w	80041c0 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	f013 0f02 	tst.w	r3, #2
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004090:	68a2      	ldr	r2, [r4, #8]
 8004092:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409a:	429a      	cmp	r2, r3
 800409c:	d905      	bls.n	80040aa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409e:	494c      	ldr	r1, [pc, #304]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 80040a0:	688b      	ldr	r3, [r1, #8]
 80040a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a6:	431a      	orrs	r2, r3
 80040a8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	f013 0f01 	tst.w	r3, #1
 80040b0:	d039      	beq.n	8004126 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d009      	beq.n	80040cc <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d026      	beq.n	800410a <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040bc:	bb63      	cbnz	r3, 8004118 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040be:	4a44      	ldr	r2, [pc, #272]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	f012 0f02 	tst.w	r2, #2
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80040c8:	2001      	movs	r0, #1
 80040ca:	e076      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80040d4:	d076      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	493e      	ldr	r1, [pc, #248]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 80040d8:	688a      	ldr	r2, [r1, #8]
 80040da:	f022 0203 	bic.w	r2, r2, #3
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80040e2:	f7fe f9cd 	bl	8002480 <HAL_GetTick>
 80040e6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e8:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	6862      	ldr	r2, [r4, #4]
 80040f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80040f6:	d016      	beq.n	8004126 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fe f9c2 	bl	8002480 <HAL_GetTick>
 80040fc:	1b80      	subs	r0, r0, r6
 80040fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004102:	4298      	cmp	r0, r3
 8004104:	d9f0      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8004106:	2003      	movs	r0, #3
 8004108:	e057      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	4a31      	ldr	r2, [pc, #196]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004112:	d1e0      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004114:	2001      	movs	r0, #1
 8004116:	e050      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004120:	d1d9      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004122:	2001      	movs	r0, #1
 8004124:	e049      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f013 0f02 	tst.w	r3, #2
 800412c:	d00c      	beq.n	8004148 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800412e:	68a2      	ldr	r2, [r4, #8]
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004138:	429a      	cmp	r2, r3
 800413a:	d205      	bcs.n	8004148 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4924      	ldr	r1, [pc, #144]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 800413e:	688b      	ldr	r3, [r1, #8]
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	431a      	orrs	r2, r3
 8004146:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x174>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	42ab      	cmp	r3, r5
 8004152:	d90a      	bls.n	800416a <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_RCC_ClockConfig+0x174>)
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	f023 0307 	bic.w	r3, r3, #7
 800415c:	432b      	orrs	r3, r5
 800415e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	42ab      	cmp	r3, r5
 8004168:	d12e      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f013 0f04 	tst.w	r3, #4
 8004170:	d006      	beq.n	8004180 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 8004174:	6893      	ldr	r3, [r2, #8]
 8004176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800417a:	68e1      	ldr	r1, [r4, #12]
 800417c:	430b      	orrs	r3, r1
 800417e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f013 0f08 	tst.w	r3, #8
 8004186:	d007      	beq.n	8004198 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004188:	4a11      	ldr	r2, [pc, #68]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 800418a:	6893      	ldr	r3, [r2, #8]
 800418c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004190:	6921      	ldr	r1, [r4, #16]
 8004192:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004196:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004198:	f7ff fb96 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_ClockConfig+0x178>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <HAL_RCC_ClockConfig+0x17c>)
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	40d8      	lsrs	r0, r3
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCC_ClockConfig+0x180>)
 80041b0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_RCC_ClockConfig+0x184>)
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f7fe f91f 	bl	80023f8 <HAL_InitTick>
}
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80041bc:	2001      	movs	r0, #1
}
 80041be:	4770      	bx	lr
      return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7fa      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 80041c4:	2001      	movs	r0, #1
 80041c6:	e7f8      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 80041c8:	2001      	movs	r0, #1
 80041ca:	e7f6      	b.n	80041ba <HAL_RCC_ClockConfig+0x162>
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800afa0 	.word	0x0800afa0
 80041d8:	2000000c 	.word	0x2000000c
 80041dc:	20000014 	.word	0x20000014

080041e0 <HAL_RCC_GetHCLKFreq>:
}
 80041e0:	4b01      	ldr	r3, [pc, #4]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c

080041ec <HAL_RCC_GetPCLK1Freq>:
{
 80041ec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041ee:	f7ff fff7 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	f003 031f 	and.w	r3, r3, #31
}
 8004202:	40d8      	lsrs	r0, r3
 8004204:	bd08      	pop	{r3, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	0800afb0 	.word	0x0800afb0

08004210 <HAL_RCC_GetPCLK2Freq>:
{
 8004210:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004212:	f7ff ffe5 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
 8004222:	f003 031f 	and.w	r3, r3, #31
}
 8004226:	40d8      	lsrs	r0, r3
 8004228:	bd08      	pop	{r3, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	0800afb0 	.word	0x0800afb0

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b083      	sub	sp, #12
 8004238:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004240:	d069      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004242:	4b87      	ldr	r3, [pc, #540]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800424a:	d11e      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	4b84      	ldr	r3, [pc, #528]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800424e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004250:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004254:	659a      	str	r2, [r3, #88]	; 0x58
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004260:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004262:	4a80      	ldr	r2, [pc, #512]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004264:	6813      	ldr	r3, [r2, #0]
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800426c:	f7fe f908 	bl	8002480 <HAL_GetTick>
 8004270:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004272:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f413 7f80 	tst.w	r3, #256	; 0x100
 800427a:	d108      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fe f900 	bl	8002480 <HAL_GetTick>
 8004280:	1b40      	subs	r0, r0, r5
 8004282:	2802      	cmp	r0, #2
 8004284:	d9f5      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8004286:	2503      	movs	r5, #3
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800428a:	2600      	movs	r6, #0
 800428c:	e7e9      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800428e:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8004290:	bb45      	cbnz	r5, 80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004292:	4b73      	ldr	r3, [pc, #460]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004298:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800429c:	d015      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x96>
 800429e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d012      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a4:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80042b2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80042b6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80042be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80042c2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ca:	f013 0f01 	tst.w	r3, #1
 80042ce:	d110      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 80042d0:	b945      	cbnz	r5, 80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d2:	4a63      	ldr	r2, [pc, #396]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042de:	430b      	orrs	r3, r1
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e4:	b1c6      	cbz	r6, 8004318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4a5e      	ldr	r2, [pc, #376]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80042ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	e012      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80042f2:	f7fe f8c5 	bl	8002480 <HAL_GetTick>
 80042f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f013 0f02 	tst.w	r3, #2
 8004302:	d1e5      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fe f8bc 	bl	8002480 <HAL_GetTick>
 8004308:	1bc0      	subs	r0, r0, r7
 800430a:	f241 3388 	movw	r3, #5000	; 0x1388
 800430e:	4298      	cmp	r0, r3
 8004310:	d9f2      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8004312:	2503      	movs	r5, #3
 8004314:	e7dc      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004316:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	f013 0f01 	tst.w	r3, #1
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004320:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004322:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	6861      	ldr	r1, [r4, #4]
 800432c:	430b      	orrs	r3, r1
 800432e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	f013 0f02 	tst.w	r3, #2
 8004338:	d008      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800433a:	4a49      	ldr	r2, [pc, #292]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800433c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004340:	f023 030c 	bic.w	r3, r3, #12
 8004344:	68a1      	ldr	r1, [r4, #8]
 8004346:	430b      	orrs	r3, r1
 8004348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	f013 0f04 	tst.w	r3, #4
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004354:	4a42      	ldr	r2, [pc, #264]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800435a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800435e:	68e1      	ldr	r1, [r4, #12]
 8004360:	430b      	orrs	r3, r1
 8004362:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	f013 0f20 	tst.w	r3, #32
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004370:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004378:	6921      	ldr	r1, [r4, #16]
 800437a:	430b      	orrs	r3, r1
 800437c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004388:	4a35      	ldr	r2, [pc, #212]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800438a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800438e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004392:	6a21      	ldr	r1, [r4, #32]
 8004394:	430b      	orrs	r3, r1
 8004396:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a2:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043c6:	6961      	ldr	r1, [r4, #20]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043d4:	d008      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043e0:	69a1      	ldr	r1, [r4, #24]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043ee:	d008      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043fa:	69e1      	ldr	r1, [r4, #28]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004408:	d00c      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800440c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004410:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004414:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004416:	430b      	orrs	r3, r1
 8004418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800441c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800441e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004422:	d013      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800442a:	d00c      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442c:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004432:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004436:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004438:	430b      	orrs	r3, r1
 800443a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800443e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004444:	d007      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8004446:	4628      	mov	r0, r5
 8004448:	b003      	add	sp, #12
 800444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	68d3      	ldr	r3, [r2, #12]
 800444e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004452:	60d3      	str	r3, [r2, #12]
 8004454:	e7e6      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004456:	68d3      	ldr	r3, [r2, #12]
 8004458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445c:	60d3      	str	r3, [r2, #12]
 800445e:	e7f2      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000

08004468 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004468:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6013      	str	r3, [r2, #0]
}
 8004472:	4770      	bx	lr
 8004474:	40021000 	.word	0x40021000

08004478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	6a03      	ldr	r3, [r0, #32]
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800448c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	680c      	ldr	r4, [r1, #0]
 8004492:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004494:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004498:	688c      	ldr	r4, [r1, #8]
 800449a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	4c15      	ldr	r4, [pc, #84]	; (80044f4 <TIM_OC1_SetConfig+0x7c>)
 800449e:	42a0      	cmp	r0, r4
 80044a0:	d007      	beq.n	80044b2 <TIM_OC1_SetConfig+0x3a>
 80044a2:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80044a6:	42a0      	cmp	r0, r4
 80044a8:	d003      	beq.n	80044b2 <TIM_OC1_SetConfig+0x3a>
 80044aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044ae:	42a0      	cmp	r0, r4
 80044b0:	d105      	bne.n	80044be <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b6:	68cc      	ldr	r4, [r1, #12]
 80044b8:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ba:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <TIM_OC1_SetConfig+0x7c>)
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d007      	beq.n	80044d4 <TIM_OC1_SetConfig+0x5c>
 80044c4:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d003      	beq.n	80044d4 <TIM_OC1_SetConfig+0x5c>
 80044cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044d0:	42a0      	cmp	r0, r4
 80044d2:	d107      	bne.n	80044e4 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044d4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d8:	694c      	ldr	r4, [r1, #20]
 80044da:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044de:	698d      	ldr	r5, [r1, #24]
 80044e0:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e8:	684a      	ldr	r2, [r1, #4]
 80044ea:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ec:	6203      	str	r3, [r0, #32]
}
 80044ee:	bc30      	pop	{r4, r5}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00

080044f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fa:	6a03      	ldr	r3, [r0, #32]
 80044fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004500:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004508:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800450c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004510:	680d      	ldr	r5, [r1, #0]
 8004512:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004518:	688d      	ldr	r5, [r1, #8]
 800451a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	4d12      	ldr	r5, [pc, #72]	; (8004568 <TIM_OC3_SetConfig+0x70>)
 8004520:	42a8      	cmp	r0, r5
 8004522:	d019      	beq.n	8004558 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	4d10      	ldr	r5, [pc, #64]	; (8004568 <TIM_OC3_SetConfig+0x70>)
 8004526:	42a8      	cmp	r0, r5
 8004528:	d007      	beq.n	800453a <TIM_OC3_SetConfig+0x42>
 800452a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800452e:	42a8      	cmp	r0, r5
 8004530:	d003      	beq.n	800453a <TIM_OC3_SetConfig+0x42>
 8004532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004536:	42a8      	cmp	r0, r5
 8004538:	d107      	bne.n	800454a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800453a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800453e:	694d      	ldr	r5, [r1, #20]
 8004540:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004544:	698d      	ldr	r5, [r1, #24]
 8004546:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800454c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800454e:	684a      	ldr	r2, [r1, #4]
 8004550:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004552:	6203      	str	r3, [r0, #32]
}
 8004554:	bc30      	pop	{r4, r5}
 8004556:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800455c:	68cd      	ldr	r5, [r1, #12]
 800455e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004566:	e7dd      	b.n	8004524 <TIM_OC3_SetConfig+0x2c>
 8004568:	40012c00 	.word	0x40012c00

0800456c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	6a03      	ldr	r3, [r0, #32]
 8004570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004574:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800457c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004580:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	680d      	ldr	r5, [r1, #0]
 8004586:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800458a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800458e:	688d      	ldr	r5, [r1, #8]
 8004590:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <TIM_OC4_SetConfig+0x58>)
 8004596:	42a8      	cmp	r0, r5
 8004598:	d007      	beq.n	80045aa <TIM_OC4_SetConfig+0x3e>
 800459a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800459e:	42a8      	cmp	r0, r5
 80045a0:	d003      	beq.n	80045aa <TIM_OC4_SetConfig+0x3e>
 80045a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045a6:	42a8      	cmp	r0, r5
 80045a8:	d104      	bne.n	80045b4 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045aa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045ae:	694d      	ldr	r5, [r1, #20]
 80045b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b8:	684b      	ldr	r3, [r1, #4]
 80045ba:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	6202      	str	r2, [r0, #32]
}
 80045be:	bc30      	pop	{r4, r5}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00

080045c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045ca:	6a03      	ldr	r3, [r0, #32]
 80045cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045d6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	680d      	ldr	r5, [r1, #0]
 80045e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045e8:	688d      	ldr	r5, [r1, #8]
 80045ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	4d0b      	ldr	r5, [pc, #44]	; (800461c <TIM_OC5_SetConfig+0x54>)
 80045f0:	42a8      	cmp	r0, r5
 80045f2:	d007      	beq.n	8004604 <TIM_OC5_SetConfig+0x3c>
 80045f4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80045f8:	42a8      	cmp	r0, r5
 80045fa:	d003      	beq.n	8004604 <TIM_OC5_SetConfig+0x3c>
 80045fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004600:	42a8      	cmp	r0, r5
 8004602:	d104      	bne.n	800460e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004604:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004608:	694d      	ldr	r5, [r1, #20]
 800460a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004610:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004612:	684a      	ldr	r2, [r1, #4]
 8004614:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	6203      	str	r3, [r0, #32]
}
 8004618:	bc30      	pop	{r4, r5}
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00

08004620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004622:	6a03      	ldr	r3, [r0, #32]
 8004624:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004628:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800462e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004638:	680d      	ldr	r5, [r1, #0]
 800463a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800463e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004642:	688d      	ldr	r5, [r1, #8]
 8004644:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	4d0b      	ldr	r5, [pc, #44]	; (8004678 <TIM_OC6_SetConfig+0x58>)
 800464a:	42a8      	cmp	r0, r5
 800464c:	d007      	beq.n	800465e <TIM_OC6_SetConfig+0x3e>
 800464e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004652:	42a8      	cmp	r0, r5
 8004654:	d003      	beq.n	800465e <TIM_OC6_SetConfig+0x3e>
 8004656:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800465a:	42a8      	cmp	r0, r5
 800465c:	d104      	bne.n	8004668 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800465e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004662:	694d      	ldr	r5, [r1, #20]
 8004664:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800466a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800466c:	684b      	ldr	r3, [r1, #4]
 800466e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	6202      	str	r2, [r0, #32]
}
 8004672:	bc30      	pop	{r4, r5}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40012c00 	.word	0x40012c00

0800467c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800467c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d126      	bne.n	80046d4 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8004686:	2302      	movs	r3, #2
 8004688:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800468c:	6802      	ldr	r2, [r0, #0]
 800468e:	68d3      	ldr	r3, [r2, #12]
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	6803      	ldr	r3, [r0, #0]
 8004698:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <HAL_TIM_Base_Start_IT+0x64>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x3c>
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d009      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x3c>
 80046a4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d005      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046b4:	2000      	movs	r0, #0
 80046b6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <HAL_TIM_Base_Start_IT+0x68>)
 80046bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	2a06      	cmp	r2, #6
 80046c0:	d00a      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x5c>
 80046c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046c6:	d009      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046d0:	2000      	movs	r0, #0
 80046d2:	4770      	bx	lr
    return HAL_ERROR;
 80046d4:	2001      	movs	r0, #1
 80046d6:	4770      	bx	lr
  return HAL_OK;
 80046d8:	2000      	movs	r0, #0
 80046da:	4770      	bx	lr
 80046dc:	2000      	movs	r0, #0
}
 80046de:	4770      	bx	lr
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	00010007 	.word	0x00010007

080046e8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046e8:	6802      	ldr	r2, [r0, #0]
 80046ea:	68d3      	ldr	r3, [r2, #12]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	6a19      	ldr	r1, [r3, #32]
 80046f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80046fa:	4211      	tst	r1, r2
 80046fc:	d108      	bne.n	8004710 <HAL_TIM_Base_Stop_IT+0x28>
 80046fe:	6a19      	ldr	r1, [r3, #32]
 8004700:	f240 4244 	movw	r2, #1092	; 0x444
 8004704:	4211      	tst	r1, r2
 8004706:	d103      	bne.n	8004710 <HAL_TIM_Base_Stop_IT+0x28>
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004710:	2301      	movs	r3, #1
 8004712:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004716:	2000      	movs	r0, #0
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_IC_CaptureCallback>:
}
 800471c:	4770      	bx	lr

0800471e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800471e:	4770      	bx	lr

08004720 <TIM_DMADelayPulseCplt>:
{
 8004720:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004722:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004726:	4283      	cmp	r3, r0
 8004728:	d00e      	beq.n	8004748 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800472a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800472c:	4283      	cmp	r3, r0
 800472e:	d014      	beq.n	800475a <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004732:	4283      	cmp	r3, r0
 8004734:	d01a      	beq.n	800476c <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004736:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004738:	4283      	cmp	r3, r0
 800473a:	d020      	beq.n	800477e <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff ffee 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	2300      	movs	r3, #0
 8004744:	7723      	strb	r3, [r4, #28]
}
 8004746:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004748:	2301      	movs	r3, #1
 800474a:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800474c:	69c3      	ldr	r3, [r0, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f4      	bne.n	800473c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004752:	2301      	movs	r3, #1
 8004754:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004758:	e7f0      	b.n	800473c <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475a:	2302      	movs	r3, #2
 800475c:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800475e:	69c3      	ldr	r3, [r0, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1eb      	bne.n	800473c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	2301      	movs	r3, #1
 8004766:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800476a:	e7e7      	b.n	800473c <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476c:	2304      	movs	r3, #4
 800476e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004770:	69c3      	ldr	r3, [r0, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e2      	bne.n	800473c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	2301      	movs	r3, #1
 8004778:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800477c:	e7de      	b.n	800473c <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	2308      	movs	r3, #8
 8004780:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004782:	69c3      	ldr	r3, [r0, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1d9      	bne.n	800473c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	2301      	movs	r3, #1
 800478a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800478e:	e7d5      	b.n	800473c <TIM_DMADelayPulseCplt+0x1c>

08004790 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8004790:	4770      	bx	lr

08004792 <TIM_DMADelayPulseHalfCplt>:
{
 8004792:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004794:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004798:	4283      	cmp	r3, r0
 800479a:	d00b      	beq.n	80047b4 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800479c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800479e:	4283      	cmp	r3, r0
 80047a0:	d010      	beq.n	80047c4 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047a4:	4283      	cmp	r3, r0
 80047a6:	d010      	beq.n	80047ca <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047aa:	4283      	cmp	r3, r0
 80047ac:	d104      	bne.n	80047b8 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ae:	2308      	movs	r3, #8
 80047b0:	7723      	strb	r3, [r4, #28]
 80047b2:	e001      	b.n	80047b8 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b4:	2301      	movs	r3, #1
 80047b6:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ffe9 	bl	8004790 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	2300      	movs	r3, #0
 80047c0:	7723      	strb	r3, [r4, #28]
}
 80047c2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c4:	2302      	movs	r3, #2
 80047c6:	7723      	strb	r3, [r4, #28]
 80047c8:	e7f6      	b.n	80047b8 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ca:	2304      	movs	r3, #4
 80047cc:	7723      	strb	r3, [r4, #28]
 80047ce:	e7f3      	b.n	80047b8 <TIM_DMADelayPulseHalfCplt+0x26>

080047d0 <HAL_TIM_TriggerCallback>:
}
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_IRQHandler>:
{
 80047d2:	b510      	push	{r4, lr}
 80047d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d6:	6803      	ldr	r3, [r0, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	f012 0f02 	tst.w	r2, #2
 80047de:	d011      	beq.n	8004804 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	f012 0f02 	tst.w	r2, #2
 80047e6:	d00d      	beq.n	8004804 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e8:	f06f 0202 	mvn.w	r2, #2
 80047ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f2:	6803      	ldr	r3, [r0, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f013 0f03 	tst.w	r3, #3
 80047fa:	d079      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80047fc:	f7ff ff8e 	bl	800471c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	2300      	movs	r3, #0
 8004802:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	f012 0f04 	tst.w	r2, #4
 800480c:	d012      	beq.n	8004834 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	f012 0f04 	tst.w	r2, #4
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004816:	f06f 0204 	mvn.w	r2, #4
 800481a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800481c:	2302      	movs	r3, #2
 800481e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004828:	d068      	beq.n	80048fc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff ff76 	bl	800471c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	2300      	movs	r3, #0
 8004832:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	f012 0f08 	tst.w	r2, #8
 800483c:	d012      	beq.n	8004864 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	f012 0f08 	tst.w	r2, #8
 8004844:	d00e      	beq.n	8004864 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004846:	f06f 0208 	mvn.w	r2, #8
 800484a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484c:	2304      	movs	r3, #4
 800484e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f013 0f03 	tst.w	r3, #3
 8004858:	d057      	beq.n	800490a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff ff5e 	bl	800471c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004860:	2300      	movs	r3, #0
 8004862:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	f012 0f10 	tst.w	r2, #16
 800486c:	d012      	beq.n	8004894 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	f012 0f10 	tst.w	r2, #16
 8004874:	d00e      	beq.n	8004894 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004876:	f06f 0210 	mvn.w	r2, #16
 800487a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487c:	2308      	movs	r3, #8
 800487e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004888:	d046      	beq.n	8004918 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff ff46 	bl	800471c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004890:	2300      	movs	r3, #0
 8004892:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	f012 0f01 	tst.w	r2, #1
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	f012 0f01 	tst.w	r2, #1
 80048a4:	d13f      	bne.n	8004926 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80048b6:	d13d      	bne.n	8004934 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80048c8:	d13b      	bne.n	8004942 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048d2:	d003      	beq.n	80048dc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048da:	d139      	bne.n	8004950 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	f012 0f20 	tst.w	r2, #32
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	f012 0f20 	tst.w	r2, #32
 80048ec:	d137      	bne.n	800495e <HAL_TIM_IRQHandler+0x18c>
}
 80048ee:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f0:	f7ff ff13 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff ff12 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
 80048fa:	e781      	b.n	8004800 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7ff ff0c 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff ff0b 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
 8004908:	e792      	b.n	8004830 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	4620      	mov	r0, r4
 800490c:	f7ff ff05 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff ff04 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
 8004916:	e7a3      	b.n	8004860 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff fefe 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff fefd 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
 8004924:	e7b4      	b.n	8004890 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004926:	f06f 0201 	mvn.w	r2, #1
 800492a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800492c:	4620      	mov	r0, r4
 800492e:	f7fc fd95 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
 8004932:	e7b8      	b.n	80048a6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004938:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fd91 	bl	8005462 <HAL_TIMEx_BreakCallback>
 8004940:	e7ba      	b.n	80048b8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004946:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fd8b 	bl	8005464 <HAL_TIMEx_Break2Callback>
 800494e:	e7bc      	b.n	80048ca <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004954:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff ff3a 	bl	80047d0 <HAL_TIM_TriggerCallback>
 800495c:	e7be      	b.n	80048dc <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495e:	f06f 0220 	mvn.w	r2, #32
 8004962:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004964:	4620      	mov	r0, r4
 8004966:	f000 fd7b 	bl	8005460 <HAL_TIMEx_CommutCallback>
}
 800496a:	e7c0      	b.n	80048ee <HAL_TIM_IRQHandler+0x11c>

0800496c <HAL_TIM_ErrorCallback>:
}
 800496c:	4770      	bx	lr

0800496e <TIM_DMAError>:
{
 800496e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004970:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004974:	4283      	cmp	r3, r0
 8004976:	d00c      	beq.n	8004992 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800497a:	4283      	cmp	r3, r0
 800497c:	d013      	beq.n	80049a6 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800497e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004980:	4283      	cmp	r3, r0
 8004982:	d016      	beq.n	80049b2 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004984:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004986:	4283      	cmp	r3, r0
 8004988:	d019      	beq.n	80049be <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 800498a:	2301      	movs	r3, #1
 800498c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004990:	e003      	b.n	800499a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004992:	2301      	movs	r3, #1
 8004994:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff ffe6 	bl	800496c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a0:	2300      	movs	r3, #0
 80049a2:	7723      	strb	r3, [r4, #28]
}
 80049a4:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a6:	2302      	movs	r3, #2
 80049a8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	2301      	movs	r3, #1
 80049ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049b0:	e7f3      	b.n	800499a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b2:	2304      	movs	r3, #4
 80049b4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	2301      	movs	r3, #1
 80049b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049bc:	e7ed      	b.n	800499a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	2308      	movs	r3, #8
 80049c0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	2301      	movs	r3, #1
 80049c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80049c8:	e7e7      	b.n	800499a <TIM_DMAError+0x2c>
	...

080049cc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80049cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_Base_SetConfig+0x6c>)
 80049d0:	4290      	cmp	r0, r2
 80049d2:	d002      	beq.n	80049da <TIM_Base_SetConfig+0xe>
 80049d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049d8:	d103      	bne.n	80049e2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049de:	684a      	ldr	r2, [r1, #4]
 80049e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <TIM_Base_SetConfig+0x6c>)
 80049e4:	4290      	cmp	r0, r2
 80049e6:	d00a      	beq.n	80049fe <TIM_Base_SetConfig+0x32>
 80049e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049ec:	d007      	beq.n	80049fe <TIM_Base_SetConfig+0x32>
 80049ee:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80049f2:	4290      	cmp	r0, r2
 80049f4:	d003      	beq.n	80049fe <TIM_Base_SetConfig+0x32>
 80049f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049fa:	4290      	cmp	r0, r2
 80049fc:	d103      	bne.n	8004a06 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	68ca      	ldr	r2, [r1, #12]
 8004a04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0a:	694a      	ldr	r2, [r1, #20]
 8004a0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	688b      	ldr	r3, [r1, #8]
 8004a12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <TIM_Base_SetConfig+0x6c>)
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d007      	beq.n	8004a2e <TIM_Base_SetConfig+0x62>
 8004a1e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004a22:	4298      	cmp	r0, r3
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0x62>
 8004a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a2a:	4298      	cmp	r0, r3
 8004a2c:	d101      	bne.n	8004a32 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2e:	690b      	ldr	r3, [r1, #16]
 8004a30:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004a32:	2301      	movs	r3, #1
 8004a34:	6143      	str	r3, [r0, #20]
}
 8004a36:	4770      	bx	lr
 8004a38:	40012c00 	.word	0x40012c00

08004a3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004a3c:	b360      	cbz	r0, 8004a98 <HAL_TIM_Base_Init+0x5c>
{
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a46:	b313      	cbz	r3, 8004a8e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	4621      	mov	r1, r4
 8004a50:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a54:	f7ff ffba 	bl	80049cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004a82:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004a86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
}
 8004a8c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a92:	f7fd facd 	bl	8002030 <HAL_TIM_Base_MspInit>
 8004a96:	e7d7      	b.n	8004a48 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004a9c:	b360      	cbz	r0, 8004af8 <HAL_TIM_OC_Init+0x5c>
{
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004aa6:	b313      	cbz	r3, 8004aee <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004aae:	4621      	mov	r1, r4
 8004ab0:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ab4:	f7ff ff8a 	bl	80049cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004ac2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ac6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004aca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004ace:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ade:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004ae2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004aee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004af2:	f7fd fa3f 	bl	8001f74 <HAL_TIM_OC_MspInit>
 8004af6:	e7d7      	b.n	8004aa8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8004af8:	2001      	movs	r0, #1
}
 8004afa:	4770      	bx	lr

08004afc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004afc:	b360      	cbz	r0, 8004b58 <HAL_TIM_PWM_Init+0x5c>
{
 8004afe:	b510      	push	{r4, lr}
 8004b00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b06:	b313      	cbz	r3, 8004b4e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0e:	4621      	mov	r1, r4
 8004b10:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b14:	f7ff ff5a 	bl	80049cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b42:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b4a:	2000      	movs	r0, #0
}
 8004b4c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004b52:	f7fd f9ef 	bl	8001f34 <HAL_TIM_PWM_MspInit>
 8004b56:	e7d7      	b.n	8004b08 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
}
 8004b5a:	4770      	bx	lr

08004b5c <TIM_OC2_SetConfig>:
{
 8004b5c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	6a03      	ldr	r3, [r0, #32]
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b66:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b6c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	680d      	ldr	r5, [r1, #0]
 8004b76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004b7a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b7e:	688d      	ldr	r5, [r1, #8]
 8004b80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b84:	4d12      	ldr	r5, [pc, #72]	; (8004bd0 <TIM_OC2_SetConfig+0x74>)
 8004b86:	42a8      	cmp	r0, r5
 8004b88:	d019      	beq.n	8004bbe <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	4d11      	ldr	r5, [pc, #68]	; (8004bd0 <TIM_OC2_SetConfig+0x74>)
 8004b8c:	42a8      	cmp	r0, r5
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x44>
 8004b90:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004b94:	42a8      	cmp	r0, r5
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x44>
 8004b98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b9c:	42a8      	cmp	r0, r5
 8004b9e:	d107      	bne.n	8004bb0 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba4:	694d      	ldr	r5, [r1, #20]
 8004ba6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004baa:	698d      	ldr	r5, [r1, #24]
 8004bac:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004bb0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bb2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb4:	684a      	ldr	r2, [r1, #4]
 8004bb6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004bb8:	6203      	str	r3, [r0, #32]
}
 8004bba:	bc30      	pop	{r4, r5}
 8004bbc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc2:	68cd      	ldr	r5, [r1, #12]
 8004bc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bcc:	e7dd      	b.n	8004b8a <TIM_OC2_SetConfig+0x2e>
 8004bce:	bf00      	nop
 8004bd0:	40012c00 	.word	0x40012c00

08004bd4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004bd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d036      	beq.n	8004c4a <HAL_TIM_OC_ConfigChannel+0x76>
{
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004be0:	2301      	movs	r3, #1
 8004be2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004be6:	2a14      	cmp	r2, #20
 8004be8:	d82a      	bhi.n	8004c40 <HAL_TIM_OC_ConfigChannel+0x6c>
 8004bea:	e8df f002 	tbb	[pc, r2]
 8004bee:	290b      	.short	0x290b
 8004bf0:	29102929 	.word	0x29102929
 8004bf4:	29152929 	.word	0x29152929
 8004bf8:	291a2929 	.word	0x291a2929
 8004bfc:	291f2929 	.word	0x291f2929
 8004c00:	2929      	.short	0x2929
 8004c02:	24          	.byte	0x24
 8004c03:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c04:	6800      	ldr	r0, [r0, #0]
 8004c06:	f7ff fc37 	bl	8004478 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2000      	movs	r0, #0
      break;
 8004c0c:	e019      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	f7ff ffa4 	bl	8004b5c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2000      	movs	r0, #0
      break;
 8004c16:	e014      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c18:	6800      	ldr	r0, [r0, #0]
 8004c1a:	f7ff fc6d 	bl	80044f8 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2000      	movs	r0, #0
      break;
 8004c20:	e00f      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	f7ff fca2 	bl	800456c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2000      	movs	r0, #0
      break;
 8004c2a:	e00a      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f7ff fccb 	bl	80045c8 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2000      	movs	r0, #0
      break;
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	f7ff fcf2 	bl	8004620 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2000      	movs	r0, #0
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8004c40:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c48:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004c4a:	2002      	movs	r0, #2
}
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_PWM_ConfigChannel>:
{
 8004c4e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004c50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f000 8095 	beq.w	8004d84 <HAL_TIM_PWM_ConfigChannel+0x136>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004c64:	2a14      	cmp	r2, #20
 8004c66:	f200 8088 	bhi.w	8004d7a <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004c6a:	e8df f002 	tbb	[pc, r2]
 8004c6e:	860b      	.short	0x860b
 8004c70:	861f8686 	.word	0x861f8686
 8004c74:	86348686 	.word	0x86348686
 8004c78:	86488686 	.word	0x86488686
 8004c7c:	865d8686 	.word	0x865d8686
 8004c80:	8686      	.short	0x8686
 8004c82:	71          	.byte	0x71
 8004c83:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	6800      	ldr	r0, [r0, #0]
 8004c86:	f7ff fbf7 	bl	8004478 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	6993      	ldr	r3, [r2, #24]
 8004c8e:	f043 0308 	orr.w	r3, r3, #8
 8004c92:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	6993      	ldr	r3, [r2, #24]
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	6993      	ldr	r3, [r2, #24]
 8004ca2:	6929      	ldr	r1, [r5, #16]
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca8:	2000      	movs	r0, #0
      break;
 8004caa:	e067      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f7ff ff55 	bl	8004b5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	6993      	ldr	r3, [r2, #24]
 8004cb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	6993      	ldr	r3, [r2, #24]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	6993      	ldr	r3, [r2, #24]
 8004cca:	6929      	ldr	r1, [r5, #16]
 8004ccc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cd0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd2:	2000      	movs	r0, #0
      break;
 8004cd4:	e052      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	f7ff fc0e 	bl	80044f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	69d3      	ldr	r3, [r2, #28]
 8004ce0:	f043 0308 	orr.w	r3, r3, #8
 8004ce4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	69d3      	ldr	r3, [r2, #28]
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	69d3      	ldr	r3, [r2, #28]
 8004cf4:	6929      	ldr	r1, [r5, #16]
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2000      	movs	r0, #0
      break;
 8004cfc:	e03e      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfe:	6800      	ldr	r0, [r0, #0]
 8004d00:	f7ff fc34 	bl	800456c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	69d3      	ldr	r3, [r2, #28]
 8004d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	69d3      	ldr	r3, [r2, #28]
 8004d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	69d3      	ldr	r3, [r2, #28]
 8004d1c:	6929      	ldr	r1, [r5, #16]
 8004d1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d22:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2000      	movs	r0, #0
      break;
 8004d26:	e029      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d28:	6800      	ldr	r0, [r0, #0]
 8004d2a:	f7ff fc4d 	bl	80045c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d32:	f043 0308 	orr.w	r3, r3, #8
 8004d36:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d46:	6929      	ldr	r1, [r5, #16]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004d4c:	2000      	movs	r0, #0
      break;
 8004d4e:	e015      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d50:	6800      	ldr	r0, [r0, #0]
 8004d52:	f7ff fc65 	bl	8004620 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d5e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d6e:	6929      	ldr	r1, [r5, #16]
 8004d70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d74:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2000      	movs	r0, #0
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004d7a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004d84:	2002      	movs	r0, #2
 8004d86:	e7fc      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x134>

08004d88 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d88:	f001 011f 	and.w	r1, r1, #31
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d92:	6a03      	ldr	r3, [r0, #32]
 8004d94:	ea23 030c 	bic.w	r3, r3, ip
 8004d98:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d9a:	6a03      	ldr	r3, [r0, #32]
 8004d9c:	fa02 f101 	lsl.w	r1, r2, r1
 8004da0:	430b      	orrs	r3, r1
 8004da2:	6203      	str	r3, [r0, #32]
}
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIM_OC_Start_DMA>:
{
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004dae:	460d      	mov	r5, r1
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d132      	bne.n	8004e1a <HAL_TIM_OC_Start_DMA+0x72>
 8004db4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004db8:	b2c0      	uxtb	r0, r0
 8004dba:	2802      	cmp	r0, #2
 8004dbc:	bf14      	ite	ne
 8004dbe:	2000      	movne	r0, #0
 8004dc0:	2001      	moveq	r0, #1
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f040 8134 	bne.w	8005030 <HAL_TIM_OC_Start_DMA+0x288>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	d156      	bne.n	8004e7a <HAL_TIM_OC_Start_DMA+0xd2>
 8004dcc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	2a01      	cmp	r2, #1
 8004dd4:	bf14      	ite	ne
 8004dd6:	2200      	movne	r2, #0
 8004dd8:	2201      	moveq	r2, #1
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	f000 812a 	beq.w	8005034 <HAL_TIM_OC_Start_DMA+0x28c>
    if ((pData == NULL) || (Length == 0U))
 8004de0:	2e00      	cmp	r6, #0
 8004de2:	f000 8129 	beq.w	8005038 <HAL_TIM_OC_Start_DMA+0x290>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8128 	beq.w	800503c <HAL_TIM_OC_Start_DMA+0x294>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	d174      	bne.n	8004eda <HAL_TIM_OC_Start_DMA+0x132>
 8004df0:	2202      	movs	r2, #2
 8004df2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 8004df6:	2d0c      	cmp	r5, #12
 8004df8:	f200 8122 	bhi.w	8005040 <HAL_TIM_OC_Start_DMA+0x298>
 8004dfc:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004e00:	01200089 	.word	0x01200089
 8004e04:	01200120 	.word	0x01200120
 8004e08:	012000c6 	.word	0x012000c6
 8004e0c:	01200120 	.word	0x01200120
 8004e10:	012000dd 	.word	0x012000dd
 8004e14:	01200120 	.word	0x01200120
 8004e18:	00f4      	.short	0x00f4
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004e1a:	2904      	cmp	r1, #4
 8004e1c:	d00d      	beq.n	8004e3a <HAL_TIM_OC_Start_DMA+0x92>
 8004e1e:	2908      	cmp	r1, #8
 8004e20:	d013      	beq.n	8004e4a <HAL_TIM_OC_Start_DMA+0xa2>
 8004e22:	290c      	cmp	r1, #12
 8004e24:	d019      	beq.n	8004e5a <HAL_TIM_OC_Start_DMA+0xb2>
 8004e26:	2910      	cmp	r1, #16
 8004e28:	d01f      	beq.n	8004e6a <HAL_TIM_OC_Start_DMA+0xc2>
 8004e2a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8004e2e:	b2c0      	uxtb	r0, r0
 8004e30:	2802      	cmp	r0, #2
 8004e32:	bf14      	ite	ne
 8004e34:	2000      	movne	r0, #0
 8004e36:	2001      	moveq	r0, #1
 8004e38:	e7c3      	b.n	8004dc2 <HAL_TIM_OC_Start_DMA+0x1a>
 8004e3a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004e3e:	b2c0      	uxtb	r0, r0
 8004e40:	2802      	cmp	r0, #2
 8004e42:	bf14      	ite	ne
 8004e44:	2000      	movne	r0, #0
 8004e46:	2001      	moveq	r0, #1
 8004e48:	e7bb      	b.n	8004dc2 <HAL_TIM_OC_Start_DMA+0x1a>
 8004e4a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8004e4e:	b2c0      	uxtb	r0, r0
 8004e50:	2802      	cmp	r0, #2
 8004e52:	bf14      	ite	ne
 8004e54:	2000      	movne	r0, #0
 8004e56:	2001      	moveq	r0, #1
 8004e58:	e7b3      	b.n	8004dc2 <HAL_TIM_OC_Start_DMA+0x1a>
 8004e5a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004e5e:	b2c0      	uxtb	r0, r0
 8004e60:	2802      	cmp	r0, #2
 8004e62:	bf14      	ite	ne
 8004e64:	2000      	movne	r0, #0
 8004e66:	2001      	moveq	r0, #1
 8004e68:	e7ab      	b.n	8004dc2 <HAL_TIM_OC_Start_DMA+0x1a>
 8004e6a:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004e6e:	b2c0      	uxtb	r0, r0
 8004e70:	2802      	cmp	r0, #2
 8004e72:	bf14      	ite	ne
 8004e74:	2000      	movne	r0, #0
 8004e76:	2001      	moveq	r0, #1
 8004e78:	e7a3      	b.n	8004dc2 <HAL_TIM_OC_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004e7a:	2d04      	cmp	r5, #4
 8004e7c:	d00d      	beq.n	8004e9a <HAL_TIM_OC_Start_DMA+0xf2>
 8004e7e:	2d08      	cmp	r5, #8
 8004e80:	d013      	beq.n	8004eaa <HAL_TIM_OC_Start_DMA+0x102>
 8004e82:	2d0c      	cmp	r5, #12
 8004e84:	d019      	beq.n	8004eba <HAL_TIM_OC_Start_DMA+0x112>
 8004e86:	2d10      	cmp	r5, #16
 8004e88:	d01f      	beq.n	8004eca <HAL_TIM_OC_Start_DMA+0x122>
 8004e8a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	2a01      	cmp	r2, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2200      	movne	r2, #0
 8004e96:	2201      	moveq	r2, #1
 8004e98:	e79f      	b.n	8004dda <HAL_TIM_OC_Start_DMA+0x32>
 8004e9a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	2a01      	cmp	r2, #1
 8004ea2:	bf14      	ite	ne
 8004ea4:	2200      	movne	r2, #0
 8004ea6:	2201      	moveq	r2, #1
 8004ea8:	e797      	b.n	8004dda <HAL_TIM_OC_Start_DMA+0x32>
 8004eaa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	2a01      	cmp	r2, #1
 8004eb2:	bf14      	ite	ne
 8004eb4:	2200      	movne	r2, #0
 8004eb6:	2201      	moveq	r2, #1
 8004eb8:	e78f      	b.n	8004dda <HAL_TIM_OC_Start_DMA+0x32>
 8004eba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	2a01      	cmp	r2, #1
 8004ec2:	bf14      	ite	ne
 8004ec4:	2200      	movne	r2, #0
 8004ec6:	2201      	moveq	r2, #1
 8004ec8:	e787      	b.n	8004dda <HAL_TIM_OC_Start_DMA+0x32>
 8004eca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	2a01      	cmp	r2, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2200      	movne	r2, #0
 8004ed6:	2201      	moveq	r2, #1
 8004ed8:	e77f      	b.n	8004dda <HAL_TIM_OC_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eda:	2d04      	cmp	r5, #4
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIM_OC_Start_DMA+0x14a>
 8004ede:	2d08      	cmp	r5, #8
 8004ee0:	d00b      	beq.n	8004efa <HAL_TIM_OC_Start_DMA+0x152>
 8004ee2:	2d0c      	cmp	r5, #12
 8004ee4:	d00d      	beq.n	8004f02 <HAL_TIM_OC_Start_DMA+0x15a>
 8004ee6:	2d10      	cmp	r5, #16
 8004ee8:	d00f      	beq.n	8004f0a <HAL_TIM_OC_Start_DMA+0x162>
 8004eea:	2202      	movs	r2, #2
 8004eec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ef0:	e781      	b.n	8004df6 <HAL_TIM_OC_Start_DMA+0x4e>
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8004ef8:	e77d      	b.n	8004df6 <HAL_TIM_OC_Start_DMA+0x4e>
 8004efa:	2202      	movs	r2, #2
 8004efc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004f00:	e779      	b.n	8004df6 <HAL_TIM_OC_Start_DMA+0x4e>
 8004f02:	2202      	movs	r2, #2
 8004f04:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8004f08:	e775      	b.n	8004df6 <HAL_TIM_OC_Start_DMA+0x4e>
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004f10:	e771      	b.n	8004df6 <HAL_TIM_OC_Start_DMA+0x4e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f14:	4951      	ldr	r1, [pc, #324]	; (800505c <HAL_TIM_OC_Start_DMA+0x2b4>)
 8004f16:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f1a:	4951      	ldr	r1, [pc, #324]	; (8005060 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8004f1c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f20:	4950      	ldr	r1, [pc, #320]	; (8005064 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8004f22:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	3234      	adds	r2, #52	; 0x34
 8004f28:	4631      	mov	r1, r6
 8004f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004f2c:	f7fe fa5e 	bl	80033ec <HAL_DMA_Start_IT>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	f040 8087 	bne.w	8005044 <HAL_TIM_OC_Start_DMA+0x29c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	68d3      	ldr	r3, [r2, #12]
 8004f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f3e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f40:	2201      	movs	r2, #1
 8004f42:	4629      	mov	r1, r5
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	f7ff ff1f 	bl	8004d88 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	4a46      	ldr	r2, [pc, #280]	; (8005068 <HAL_TIM_OC_Start_DMA+0x2c0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_OC_Start_DMA+0x1ba>
 8004f52:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_OC_Start_DMA+0x1ba>
 8004f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d103      	bne.n	8004f6a <HAL_TIM_OC_Start_DMA+0x1c2>
      __HAL_TIM_MOE_ENABLE(htim);
 8004f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	; (8005068 <HAL_TIM_OC_Start_DMA+0x2c0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d050      	beq.n	8005014 <HAL_TIM_OC_Start_DMA+0x26c>
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d04d      	beq.n	8005014 <HAL_TIM_OC_Start_DMA+0x26c>
 8004f78:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d049      	beq.n	8005014 <HAL_TIM_OC_Start_DMA+0x26c>
      __HAL_TIM_ENABLE(htim);
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e054      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f8e:	4933      	ldr	r1, [pc, #204]	; (800505c <HAL_TIM_OC_Start_DMA+0x2b4>)
 8004f90:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f94:	4932      	ldr	r1, [pc, #200]	; (8005060 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8004f96:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f9a:	4932      	ldr	r1, [pc, #200]	; (8005064 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8004f9c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	3238      	adds	r2, #56	; 0x38
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004fa6:	f7fe fa21 	bl	80033ec <HAL_DMA_Start_IT>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d14c      	bne.n	8005048 <HAL_TIM_OC_Start_DMA+0x2a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	68d3      	ldr	r3, [r2, #12]
 8004fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004fb8:	e7c2      	b.n	8004f40 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fbc:	4927      	ldr	r1, [pc, #156]	; (800505c <HAL_TIM_OC_Start_DMA+0x2b4>)
 8004fbe:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fc2:	4927      	ldr	r1, [pc, #156]	; (8005060 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8004fc4:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004fc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fc8:	4926      	ldr	r1, [pc, #152]	; (8005064 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8004fca:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	323c      	adds	r2, #60	; 0x3c
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fd4:	f7fe fa0a 	bl	80033ec <HAL_DMA_Start_IT>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d137      	bne.n	800504c <HAL_TIM_OC_Start_DMA+0x2a4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	68d3      	ldr	r3, [r2, #12]
 8004fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fe4:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004fe6:	e7ab      	b.n	8004f40 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fe8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fea:	491c      	ldr	r1, [pc, #112]	; (800505c <HAL_TIM_OC_Start_DMA+0x2b4>)
 8004fec:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ff0:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8004ff2:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ff4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ff6:	491b      	ldr	r1, [pc, #108]	; (8005064 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8004ff8:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	3240      	adds	r2, #64	; 0x40
 8004ffe:	4631      	mov	r1, r6
 8005000:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005002:	f7fe f9f3 	bl	80033ec <HAL_DMA_Start_IT>
 8005006:	bb18      	cbnz	r0, 8005050 <HAL_TIM_OC_Start_DMA+0x2a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	68d3      	ldr	r3, [r2, #12]
 800500c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005010:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005012:	e795      	b.n	8004f40 <HAL_TIM_OC_Start_DMA+0x198>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005014:	6899      	ldr	r1, [r3, #8]
 8005016:	4a15      	ldr	r2, [pc, #84]	; (800506c <HAL_TIM_OC_Start_DMA+0x2c4>)
 8005018:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501a:	2a06      	cmp	r2, #6
 800501c:	d01a      	beq.n	8005054 <HAL_TIM_OC_Start_DMA+0x2ac>
 800501e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005022:	d019      	beq.n	8005058 <HAL_TIM_OC_Start_DMA+0x2b0>
        __HAL_TIM_ENABLE(htim);
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	2000      	movs	r0, #0
 800502e:	e002      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
    return HAL_BUSY;
 8005030:	2002      	movs	r0, #2
 8005032:	e000      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
}
 8005036:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e7fc      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
 800503c:	2001      	movs	r0, #1
 800503e:	e7fa      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
  switch (Channel)
 8005040:	2001      	movs	r0, #1
 8005042:	e7f8      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005044:	2001      	movs	r0, #1
 8005046:	e7f6      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005048:	2001      	movs	r0, #1
 800504a:	e7f4      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 800504c:	2001      	movs	r0, #1
 800504e:	e7f2      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
 8005052:	e7f0      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
 8005054:	2000      	movs	r0, #0
 8005056:	e7ee      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
 8005058:	2000      	movs	r0, #0
 800505a:	e7ec      	b.n	8005036 <HAL_TIM_OC_Start_DMA+0x28e>
 800505c:	08004721 	.word	0x08004721
 8005060:	08004793 	.word	0x08004793
 8005064:	0800496f 	.word	0x0800496f
 8005068:	40012c00 	.word	0x40012c00
 800506c:	00010007 	.word	0x00010007

08005070 <HAL_TIM_OC_Stop_DMA>:
{
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	460d      	mov	r5, r1
  switch (Channel)
 8005076:	290c      	cmp	r1, #12
 8005078:	f200 8083 	bhi.w	8005182 <HAL_TIM_OC_Stop_DMA+0x112>
 800507c:	e8df f001 	tbb	[pc, r1]
 8005080:	81818107 	.word	0x81818107
 8005084:	81818136 	.word	0x81818136
 8005088:	8181813f 	.word	0x8181813f
 800508c:	48          	.byte	0x48
 800508d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800508e:	6802      	ldr	r2, [r0, #0]
 8005090:	68d3      	ldr	r3, [r2, #12]
 8005092:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005096:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005098:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800509a:	f7fe fa07 	bl	80034ac <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800509e:	2200      	movs	r2, #0
 80050a0:	4629      	mov	r1, r5
 80050a2:	6820      	ldr	r0, [r4, #0]
 80050a4:	f7ff fe70 	bl	8004d88 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	4a37      	ldr	r2, [pc, #220]	; (8005188 <HAL_TIM_OC_Stop_DMA+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d038      	beq.n	8005122 <HAL_TIM_OC_Stop_DMA+0xb2>
 80050b0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d034      	beq.n	8005122 <HAL_TIM_OC_Stop_DMA+0xb2>
 80050b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050bc:	4293      	cmp	r3, r2
 80050be:	d030      	beq.n	8005122 <HAL_TIM_OC_Stop_DMA+0xb2>
    __HAL_TIM_DISABLE(htim);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	6a19      	ldr	r1, [r3, #32]
 80050c4:	f241 1211 	movw	r2, #4369	; 0x1111
 80050c8:	4211      	tst	r1, r2
 80050ca:	d108      	bne.n	80050de <HAL_TIM_OC_Stop_DMA+0x6e>
 80050cc:	6a19      	ldr	r1, [r3, #32]
 80050ce:	f240 4244 	movw	r2, #1092	; 0x444
 80050d2:	4211      	tst	r1, r2
 80050d4:	d103      	bne.n	80050de <HAL_TIM_OC_Stop_DMA+0x6e>
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	2d00      	cmp	r5, #0
 80050e0:	d12e      	bne.n	8005140 <HAL_TIM_OC_Stop_DMA+0xd0>
 80050e2:	2301      	movs	r3, #1
 80050e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050e8:	2000      	movs	r0, #0
 80050ea:	e04b      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80050ec:	6802      	ldr	r2, [r0, #0]
 80050ee:	68d3      	ldr	r3, [r2, #12]
 80050f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80050f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050f8:	f7fe f9d8 	bl	80034ac <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80050fc:	e7cf      	b.n	800509e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80050fe:	6802      	ldr	r2, [r0, #0]
 8005100:	68d3      	ldr	r3, [r2, #12]
 8005102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005106:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005108:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800510a:	f7fe f9cf 	bl	80034ac <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800510e:	e7c6      	b.n	800509e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005110:	6802      	ldr	r2, [r0, #0]
 8005112:	68d3      	ldr	r3, [r2, #12]
 8005114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005118:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800511a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800511c:	f7fe f9c6 	bl	80034ac <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8005120:	e7bd      	b.n	800509e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_MOE_DISABLE(htim);
 8005122:	6a19      	ldr	r1, [r3, #32]
 8005124:	f241 1211 	movw	r2, #4369	; 0x1111
 8005128:	4211      	tst	r1, r2
 800512a:	d1c9      	bne.n	80050c0 <HAL_TIM_OC_Stop_DMA+0x50>
 800512c:	6a19      	ldr	r1, [r3, #32]
 800512e:	f240 4244 	movw	r2, #1092	; 0x444
 8005132:	4211      	tst	r1, r2
 8005134:	d1c4      	bne.n	80050c0 <HAL_TIM_OC_Stop_DMA+0x50>
 8005136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
 800513e:	e7bf      	b.n	80050c0 <HAL_TIM_OC_Stop_DMA+0x50>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	2d04      	cmp	r5, #4
 8005142:	d00a      	beq.n	800515a <HAL_TIM_OC_Stop_DMA+0xea>
 8005144:	2d08      	cmp	r5, #8
 8005146:	d00d      	beq.n	8005164 <HAL_TIM_OC_Stop_DMA+0xf4>
 8005148:	2d0c      	cmp	r5, #12
 800514a:	d010      	beq.n	800516e <HAL_TIM_OC_Stop_DMA+0xfe>
 800514c:	2d10      	cmp	r5, #16
 800514e:	d013      	beq.n	8005178 <HAL_TIM_OC_Stop_DMA+0x108>
 8005150:	2301      	movs	r3, #1
 8005152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005156:	2000      	movs	r0, #0
 8005158:	e014      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
 800515a:	2301      	movs	r3, #1
 800515c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005160:	2000      	movs	r0, #0
 8005162:	e00f      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
 8005164:	2301      	movs	r3, #1
 8005166:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800516a:	2000      	movs	r0, #0
 800516c:	e00a      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
 800516e:	2301      	movs	r3, #1
 8005170:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005174:	2000      	movs	r0, #0
 8005176:	e005      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
 8005178:	2301      	movs	r3, #1
 800517a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800517e:	2000      	movs	r0, #0
 8005180:	e000      	b.n	8005184 <HAL_TIM_OC_Stop_DMA+0x114>
  switch (Channel)
 8005182:	2001      	movs	r0, #1
}
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00

0800518c <HAL_TIM_PWM_Start>:
{
 800518c:	b510      	push	{r4, lr}
 800518e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005190:	4608      	mov	r0, r1
 8005192:	2900      	cmp	r1, #0
 8005194:	d132      	bne.n	80051fc <HAL_TIM_PWM_Start+0x70>
 8005196:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	bf18      	it	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d17f      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x11a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d153      	bne.n	8005252 <HAL_TIM_PWM_Start+0xc6>
 80051aa:	2302      	movs	r3, #2
 80051ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b0:	2201      	movs	r2, #1
 80051b2:	4601      	mov	r1, r0
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	f7ff fde7 	bl	8004d88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	4a3d      	ldr	r2, [pc, #244]	; (80052b4 <HAL_TIM_PWM_Start+0x128>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x46>
 80051c2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x46>
 80051ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d103      	bne.n	80051da <HAL_TIM_PWM_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 80051d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	4a35      	ldr	r2, [pc, #212]	; (80052b4 <HAL_TIM_PWM_Start+0x128>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d053      	beq.n	800528a <HAL_TIM_PWM_Start+0xfe>
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d050      	beq.n	800528a <HAL_TIM_PWM_Start+0xfe>
 80051e8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04c      	beq.n	800528a <HAL_TIM_PWM_Start+0xfe>
    __HAL_TIM_ENABLE(htim);
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80051f8:	2000      	movs	r0, #0
 80051fa:	e055      	b.n	80052a8 <HAL_TIM_PWM_Start+0x11c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051fc:	2904      	cmp	r1, #4
 80051fe:	d00c      	beq.n	800521a <HAL_TIM_PWM_Start+0x8e>
 8005200:	2908      	cmp	r1, #8
 8005202:	d011      	beq.n	8005228 <HAL_TIM_PWM_Start+0x9c>
 8005204:	290c      	cmp	r1, #12
 8005206:	d016      	beq.n	8005236 <HAL_TIM_PWM_Start+0xaa>
 8005208:	2910      	cmp	r1, #16
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_PWM_Start+0xb8>
 800520c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	bf18      	it	ne
 8005216:	2301      	movne	r3, #1
 8005218:	e7c3      	b.n	80051a2 <HAL_TIM_PWM_Start+0x16>
 800521a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	bf18      	it	ne
 8005224:	2301      	movne	r3, #1
 8005226:	e7bc      	b.n	80051a2 <HAL_TIM_PWM_Start+0x16>
 8005228:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800522c:	b2db      	uxtb	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	bf18      	it	ne
 8005232:	2301      	movne	r3, #1
 8005234:	e7b5      	b.n	80051a2 <HAL_TIM_PWM_Start+0x16>
 8005236:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	bf18      	it	ne
 8005240:	2301      	movne	r3, #1
 8005242:	e7ae      	b.n	80051a2 <HAL_TIM_PWM_Start+0x16>
 8005244:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005248:	b2db      	uxtb	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	bf18      	it	ne
 800524e:	2301      	movne	r3, #1
 8005250:	e7a7      	b.n	80051a2 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	2804      	cmp	r0, #4
 8005254:	d009      	beq.n	800526a <HAL_TIM_PWM_Start+0xde>
 8005256:	2808      	cmp	r0, #8
 8005258:	d00b      	beq.n	8005272 <HAL_TIM_PWM_Start+0xe6>
 800525a:	280c      	cmp	r0, #12
 800525c:	d00d      	beq.n	800527a <HAL_TIM_PWM_Start+0xee>
 800525e:	2810      	cmp	r0, #16
 8005260:	d00f      	beq.n	8005282 <HAL_TIM_PWM_Start+0xf6>
 8005262:	2302      	movs	r3, #2
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	e7a2      	b.n	80051b0 <HAL_TIM_PWM_Start+0x24>
 800526a:	2302      	movs	r3, #2
 800526c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005270:	e79e      	b.n	80051b0 <HAL_TIM_PWM_Start+0x24>
 8005272:	2302      	movs	r3, #2
 8005274:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005278:	e79a      	b.n	80051b0 <HAL_TIM_PWM_Start+0x24>
 800527a:	2302      	movs	r3, #2
 800527c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005280:	e796      	b.n	80051b0 <HAL_TIM_PWM_Start+0x24>
 8005282:	2302      	movs	r3, #2
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005288:	e792      	b.n	80051b0 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_TIM_PWM_Start+0x12c>)
 800528e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	2a06      	cmp	r2, #6
 8005292:	d00a      	beq.n	80052aa <HAL_TIM_PWM_Start+0x11e>
 8005294:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005298:	d009      	beq.n	80052ae <HAL_TIM_PWM_Start+0x122>
      __HAL_TIM_ENABLE(htim);
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80052a2:	2000      	movs	r0, #0
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_PWM_Start+0x11c>
    return HAL_ERROR;
 80052a6:	2001      	movs	r0, #1
}
 80052a8:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80052aa:	2000      	movs	r0, #0
 80052ac:	e7fc      	b.n	80052a8 <HAL_TIM_PWM_Start+0x11c>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e7fa      	b.n	80052a8 <HAL_TIM_PWM_Start+0x11c>
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_PWM_Stop>:
{
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052c2:	2200      	movs	r2, #0
 80052c4:	6800      	ldr	r0, [r0, #0]
 80052c6:	f7ff fd5f 	bl	8004d88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	4a25      	ldr	r2, [pc, #148]	; (8005364 <HAL_TIM_PWM_Stop+0xa8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01c      	beq.n	800530c <HAL_TIM_PWM_Stop+0x50>
 80052d2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d018      	beq.n	800530c <HAL_TIM_PWM_Stop+0x50>
 80052da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052de:	4293      	cmp	r3, r2
 80052e0:	d014      	beq.n	800530c <HAL_TIM_PWM_Stop+0x50>
  __HAL_TIM_DISABLE(htim);
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	6a19      	ldr	r1, [r3, #32]
 80052e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80052ea:	4211      	tst	r1, r2
 80052ec:	d108      	bne.n	8005300 <HAL_TIM_PWM_Stop+0x44>
 80052ee:	6a19      	ldr	r1, [r3, #32]
 80052f0:	f240 4244 	movw	r2, #1092	; 0x444
 80052f4:	4211      	tst	r1, r2
 80052f6:	d103      	bne.n	8005300 <HAL_TIM_PWM_Stop+0x44>
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	b99d      	cbnz	r5, 800532a <HAL_TIM_PWM_Stop+0x6e>
 8005302:	2301      	movs	r3, #1
 8005304:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005308:	2000      	movs	r0, #0
 800530a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 800530c:	6a19      	ldr	r1, [r3, #32]
 800530e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005312:	4211      	tst	r1, r2
 8005314:	d1e5      	bne.n	80052e2 <HAL_TIM_PWM_Stop+0x26>
 8005316:	6a19      	ldr	r1, [r3, #32]
 8005318:	f240 4244 	movw	r2, #1092	; 0x444
 800531c:	4211      	tst	r1, r2
 800531e:	d1e0      	bne.n	80052e2 <HAL_TIM_PWM_Stop+0x26>
 8005320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
 8005328:	e7db      	b.n	80052e2 <HAL_TIM_PWM_Stop+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	2d04      	cmp	r5, #4
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Stop+0x86>
 800532e:	2d08      	cmp	r5, #8
 8005330:	d00b      	beq.n	800534a <HAL_TIM_PWM_Stop+0x8e>
 8005332:	2d0c      	cmp	r5, #12
 8005334:	d00d      	beq.n	8005352 <HAL_TIM_PWM_Stop+0x96>
 8005336:	2d10      	cmp	r5, #16
 8005338:	d00f      	beq.n	800535a <HAL_TIM_PWM_Stop+0x9e>
 800533a:	2301      	movs	r3, #1
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	e7e2      	b.n	8005308 <HAL_TIM_PWM_Stop+0x4c>
 8005342:	2301      	movs	r3, #1
 8005344:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005348:	e7de      	b.n	8005308 <HAL_TIM_PWM_Stop+0x4c>
 800534a:	2301      	movs	r3, #1
 800534c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005350:	e7da      	b.n	8005308 <HAL_TIM_PWM_Stop+0x4c>
 8005352:	2301      	movs	r3, #1
 8005354:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005358:	e7d6      	b.n	8005308 <HAL_TIM_PWM_Stop+0x4c>
 800535a:	2301      	movs	r3, #1
 800535c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005360:	e7d2      	b.n	8005308 <HAL_TIM_PWM_Stop+0x4c>
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005368:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d02f      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8005370:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005372:	2301      	movs	r3, #1
 8005374:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537e:	6802      	ldr	r2, [r0, #0]
 8005380:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005382:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005384:	4d13      	ldr	r5, [pc, #76]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005386:	42aa      	cmp	r2, r5
 8005388:	d01d      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800538e:	680d      	ldr	r5, [r1, #0]
 8005390:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005394:	6803      	ldr	r3, [r0, #0]
 8005396:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d006      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d003      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80053a2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d104      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ae:	688a      	ldr	r2, [r1, #8]
 80053b0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ba:	2300      	movs	r3, #0
 80053bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80053c0:	4618      	mov	r0, r3
}
 80053c2:	bc30      	pop	{r4, r5}
 80053c4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ca:	684d      	ldr	r5, [r1, #4]
 80053cc:	432b      	orrs	r3, r5
 80053ce:	e7dc      	b.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80053d0:	2002      	movs	r0, #2
}
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00

080053d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d03b      	beq.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80053e0:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80053e2:	2301      	movs	r3, #1
 80053e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053e8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ee:	688a      	ldr	r2, [r1, #8]
 80053f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f6:	684a      	ldr	r2, [r1, #4]
 80053f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fe:	680a      	ldr	r2, [r1, #0]
 8005400:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005406:	690a      	ldr	r2, [r1, #16]
 8005408:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800540a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540e:	694a      	ldr	r2, [r1, #20]
 8005410:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005416:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005418:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800541a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800541e:	698a      	ldr	r2, [r1, #24]
 8005420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005424:	6802      	ldr	r2, [r0, #0]
 8005426:	4c0d      	ldr	r4, [pc, #52]	; (800545c <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8005428:	42a2      	cmp	r2, r4
 800542a:	d007      	beq.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800542c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800542e:	2300      	movs	r3, #0
 8005430:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005434:	4618      	mov	r0, r3
}
 8005436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800543c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005440:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005442:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544a:	69cc      	ldr	r4, [r1, #28]
 800544c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800544e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005452:	6a09      	ldr	r1, [r1, #32]
 8005454:	430b      	orrs	r3, r1
 8005456:	e7e9      	b.n	800542c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8005458:	2002      	movs	r0, #2
}
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00

08005460 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005460:	4770      	bx	lr

08005462 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005464:	4770      	bx	lr

08005466 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005466:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	e852 3f00 	ldrex	r3, [r2]
 800546c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	e842 3100 	strex	r1, r3, [r2]
 8005474:	2900      	cmp	r1, #0
 8005476:	d1f6      	bne.n	8005466 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	f102 0308 	add.w	r3, r2, #8
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	3208      	adds	r2, #8
 8005488:	e842 3100 	strex	r1, r3, [r2]
 800548c:	2900      	cmp	r1, #0
 800548e:	d1f3      	bne.n	8005478 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005492:	2b01      	cmp	r3, #1
 8005494:	d005      	beq.n	80054a2 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005496:	2320      	movs	r3, #32
 8005498:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	2300      	movs	r3, #0
 800549c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800549e:	6643      	str	r3, [r0, #100]	; 0x64
}
 80054a0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	e852 3f00 	ldrex	r3, [r2]
 80054a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	e842 3100 	strex	r1, r3, [r2]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d1f6      	bne.n	80054a2 <UART_EndRxTransfer+0x3c>
 80054b4:	e7ef      	b.n	8005496 <UART_EndRxTransfer+0x30>

080054b6 <HAL_UART_TxCpltCallback>:
}
 80054b6:	4770      	bx	lr

080054b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	e852 3f00 	ldrex	r3, [r2]
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	e842 3100 	strex	r1, r3, [r2]
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d1f6      	bne.n	80054ba <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054cc:	2320      	movs	r3, #32
 80054ce:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d4:	f7ff ffef 	bl	80054b6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d8:	bd08      	pop	{r3, pc}

080054da <HAL_UART_ErrorCallback>:
}
 80054da:	4770      	bx	lr

080054dc <UART_DMAAbortOnError>:
{
 80054dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054de:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054e6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80054ea:	f7ff fff6 	bl	80054da <HAL_UART_ErrorCallback>
}
 80054ee:	bd08      	pop	{r3, pc}

080054f0 <HAL_UART_AbortReceiveCpltCallback>:
}
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_UART_AbortReceive_IT>:
{
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	e852 3f00 	ldrex	r3, [r2]
 80054fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	e842 3100 	strex	r1, r3, [r2]
 8005506:	2900      	cmp	r1, #0
 8005508:	d1f6      	bne.n	80054f8 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	f102 0308 	add.w	r3, r2, #8
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	3208      	adds	r2, #8
 800551a:	e842 3100 	strex	r1, r3, [r2]
 800551e:	2900      	cmp	r1, #0
 8005520:	d1f3      	bne.n	800550a <HAL_UART_AbortReceive_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005522:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005524:	2b01      	cmp	r3, #1
 8005526:	d01d      	beq.n	8005564 <HAL_UART_AbortReceive_IT+0x70>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005530:	d036      	beq.n	80055a0 <HAL_UART_AbortReceive_IT+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	f102 0308 	add.w	r3, r2, #8
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	3208      	adds	r2, #8
 8005542:	e842 3100 	strex	r1, r3, [r2]
 8005546:	2900      	cmp	r1, #0
 8005548:	d1f3      	bne.n	8005532 <HAL_UART_AbortReceive_IT+0x3e>
    if (huart->hdmarx != NULL)
 800554a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800554c:	b1a3      	cbz	r3, 8005578 <HAL_UART_AbortReceive_IT+0x84>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_UART_AbortReceive_IT+0xc8>)
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005552:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005554:	f7fd ffaa 	bl	80034ac <HAL_DMA_Abort_IT>
 8005558:	2800      	cmp	r0, #0
 800555a:	d02d      	beq.n	80055b8 <HAL_UART_AbortReceive_IT+0xc4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800555c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800555e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005560:	4798      	blx	r3
 8005562:	e029      	b.n	80055b8 <HAL_UART_AbortReceive_IT+0xc4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005564:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	e852 3f00 	ldrex	r3, [r2]
 800556a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	e842 3100 	strex	r1, r3, [r2]
 8005572:	2900      	cmp	r1, #0
 8005574:	d1f6      	bne.n	8005564 <HAL_UART_AbortReceive_IT+0x70>
 8005576:	e7d7      	b.n	8005528 <HAL_UART_AbortReceive_IT+0x34>
      huart->RxXferCount = 0U;
 8005578:	2200      	movs	r2, #0
 800557a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 800557e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	210f      	movs	r1, #15
 8005584:	6219      	str	r1, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005586:	6821      	ldr	r1, [r4, #0]
 8005588:	8b0b      	ldrh	r3, [r1, #24]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f043 0308 	orr.w	r3, r3, #8
 8005590:	830b      	strh	r3, [r1, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8005592:	2320      	movs	r3, #32
 8005594:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005596:	6622      	str	r2, [r4, #96]	; 0x60
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff ffa9 	bl	80054f0 <HAL_UART_AbortReceiveCpltCallback>
 800559e:	e00b      	b.n	80055b8 <HAL_UART_AbortReceive_IT+0xc4>
    huart->RxXferCount = 0U;
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 80055a6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80055a8:	210f      	movs	r1, #15
 80055aa:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 80055ac:	2320      	movs	r3, #32
 80055ae:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff9c 	bl	80054f0 <HAL_UART_AbortReceiveCpltCallback>
}
 80055b8:	2000      	movs	r0, #0
 80055ba:	bd10      	pop	{r4, pc}
 80055bc:	080055c1 	.word	0x080055c1

080055c0 <UART_DMARxOnlyAbortCallback>:
{
 80055c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	210f      	movs	r1, #15
 80055ce:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055d0:	6801      	ldr	r1, [r0, #0]
 80055d2:	8b0b      	ldrh	r3, [r1, #24]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f043 0308 	orr.w	r3, r3, #8
 80055da:	830b      	strh	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 80055dc:	2320      	movs	r3, #32
 80055de:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_UART_AbortReceiveCpltCallback(huart);
 80055e2:	f7ff ff85 	bl	80054f0 <HAL_UART_AbortReceiveCpltCallback>
}
 80055e6:	bd08      	pop	{r3, pc}

080055e8 <HAL_UARTEx_RxEventCallback>:
}
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_UART_IRQHandler>:
{
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055f0:	6801      	ldr	r1, [r0, #0]
 80055f2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055f8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80055fc:	401a      	ands	r2, r3
 80055fe:	d105      	bne.n	800560c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005600:	f013 0f20 	tst.w	r3, #32
 8005604:	d002      	beq.n	800560c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005606:	f010 0f20 	tst.w	r0, #32
 800560a:	d120      	bne.n	800564e <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 800560c:	b12a      	cbz	r2, 800561a <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800560e:	f015 0201 	ands.w	r2, r5, #1
 8005612:	d122      	bne.n	800565a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005614:	4eac      	ldr	r6, [pc, #688]	; (80058c8 <HAL_UART_IRQHandler+0x2dc>)
 8005616:	4230      	tst	r0, r6
 8005618:	d11f      	bne.n	800565a <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800561c:	2a01      	cmp	r2, #1
 800561e:	f000 80ab 	beq.w	8005778 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005622:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005626:	d003      	beq.n	8005630 <HAL_UART_IRQHandler+0x44>
 8005628:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800562c:	f040 8139 	bne.w	80058a2 <HAL_UART_IRQHandler+0x2b6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005630:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005636:	f010 0f80 	tst.w	r0, #128	; 0x80
 800563a:	f040 8139 	bne.w	80058b0 <HAL_UART_IRQHandler+0x2c4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800563e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005642:	d003      	beq.n	800564c <HAL_UART_IRQHandler+0x60>
 8005644:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005648:	f040 8139 	bne.w	80058be <HAL_UART_IRQHandler+0x2d2>
}
 800564c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800564e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0fb      	beq.n	800564c <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8005654:	4620      	mov	r0, r4
 8005656:	4798      	blx	r3
      return;
 8005658:	e7f8      	b.n	800564c <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800565a:	f013 0f01 	tst.w	r3, #1
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0x88>
 8005660:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005664:	d006      	beq.n	8005674 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005666:	2501      	movs	r5, #1
 8005668:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800566a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800566e:	4329      	orrs	r1, r5
 8005670:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005674:	f013 0f02 	tst.w	r3, #2
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0xa2>
 800567a:	b142      	cbz	r2, 800568e <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800567c:	6821      	ldr	r1, [r4, #0]
 800567e:	2502      	movs	r5, #2
 8005680:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005682:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005686:	f041 0104 	orr.w	r1, r1, #4
 800568a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800568e:	f013 0f04 	tst.w	r3, #4
 8005692:	d009      	beq.n	80056a8 <HAL_UART_IRQHandler+0xbc>
 8005694:	b142      	cbz	r2, 80056a8 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005696:	6821      	ldr	r1, [r4, #0]
 8005698:	2504      	movs	r5, #4
 800569a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80056a0:	f041 0102 	orr.w	r1, r1, #2
 80056a4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056a8:	f013 0f08 	tst.w	r3, #8
 80056ac:	d00b      	beq.n	80056c6 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ae:	f010 0f20 	tst.w	r0, #32
 80056b2:	d100      	bne.n	80056b6 <HAL_UART_IRQHandler+0xca>
 80056b4:	b13a      	cbz	r2, 80056c6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	2108      	movs	r1, #8
 80056ba:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056bc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80056c0:	430a      	orrs	r2, r1
 80056c2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056c6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80056ca:	d00c      	beq.n	80056e6 <HAL_UART_IRQHandler+0xfa>
 80056cc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80056d0:	d009      	beq.n	80056e6 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056d8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056da:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80056de:	f042 0220 	orr.w	r2, r2, #32
 80056e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d0ae      	beq.n	800564c <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056ee:	f013 0f20 	tst.w	r3, #32
 80056f2:	d006      	beq.n	8005702 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056f4:	f010 0f20 	tst.w	r0, #32
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 80056fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056fc:	b10b      	cbz	r3, 8005702 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 80056fe:	4620      	mov	r0, r4
 8005700:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005702:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800570e:	d102      	bne.n	8005716 <HAL_UART_IRQHandler+0x12a>
 8005710:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005714:	d029      	beq.n	800576a <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fea5 	bl	8005466 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005724:	d01d      	beq.n	8005762 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f102 0308 	add.w	r3, r2, #8
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	3208      	adds	r2, #8
 8005736:	e842 3100 	strex	r1, r3, [r2]
 800573a:	2900      	cmp	r1, #0
 800573c:	d1f3      	bne.n	8005726 <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 800573e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005740:	b15b      	cbz	r3, 800575a <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005742:	4a62      	ldr	r2, [pc, #392]	; (80058cc <HAL_UART_IRQHandler+0x2e0>)
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005746:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005748:	f7fd feb0 	bl	80034ac <HAL_DMA_Abort_IT>
 800574c:	2800      	cmp	r0, #0
 800574e:	f43f af7d 	beq.w	800564c <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005752:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005754:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005756:	4798      	blx	r3
 8005758:	e778      	b.n	800564c <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 800575a:	4620      	mov	r0, r4
 800575c:	f7ff febd 	bl	80054da <HAL_UART_ErrorCallback>
 8005760:	e774      	b.n	800564c <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff feb9 	bl	80054da <HAL_UART_ErrorCallback>
 8005768:	e770      	b.n	800564c <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 800576a:	4620      	mov	r0, r4
 800576c:	f7ff feb5 	bl	80054da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	2300      	movs	r3, #0
 8005772:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 8005776:	e769      	b.n	800564c <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005778:	f013 0f10 	tst.w	r3, #16
 800577c:	f43f af51 	beq.w	8005622 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005780:	f010 0f10 	tst.w	r0, #16
 8005784:	f43f af4d 	beq.w	8005622 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005788:	2310      	movs	r3, #16
 800578a:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005794:	d04e      	beq.n	8005834 <HAL_UART_IRQHandler+0x248>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005796:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f43f af54 	beq.w	800564c <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057a4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80057a8:	4299      	cmp	r1, r3
 80057aa:	f67f af4f 	bls.w	800564c <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 80057ae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f013 0f20 	tst.w	r3, #32
 80057ba:	d130      	bne.n	800581e <HAL_UART_IRQHandler+0x232>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	e852 3f00 	ldrex	r3, [r2]
 80057c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	e842 3100 	strex	r1, r3, [r2]
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d1f6      	bne.n	80057bc <HAL_UART_IRQHandler+0x1d0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	f102 0308 	add.w	r3, r2, #8
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	3208      	adds	r2, #8
 80057de:	e842 3100 	strex	r1, r3, [r2]
 80057e2:	2900      	cmp	r1, #0
 80057e4:	d1f3      	bne.n	80057ce <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	f102 0308 	add.w	r3, r2, #8
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	3208      	adds	r2, #8
 80057f6:	e842 3100 	strex	r1, r3, [r2]
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d1f3      	bne.n	80057e6 <HAL_UART_IRQHandler+0x1fa>
          huart->RxState = HAL_UART_STATE_READY;
 80057fe:	2320      	movs	r3, #32
 8005800:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	2300      	movs	r3, #0
 8005804:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	e852 3f00 	ldrex	r3, [r2]
 800580c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	e842 3100 	strex	r1, r3, [r2]
 8005814:	2900      	cmp	r1, #0
 8005816:	d1f6      	bne.n	8005806 <HAL_UART_IRQHandler+0x21a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005818:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800581a:	f7fd fe22 	bl	8003462 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005822:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005826:	b29b      	uxth	r3, r3
 8005828:	1ac9      	subs	r1, r1, r3
 800582a:	b289      	uxth	r1, r1
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff fedb 	bl	80055e8 <HAL_UARTEx_RxEventCallback>
      return;
 8005832:	e70b      	b.n	800564c <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005834:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005838:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800583c:	b29b      	uxth	r3, r3
 800583e:	1ac9      	subs	r1, r1, r3
 8005840:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005842:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	f43f aeff 	beq.w	800564c <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 800584e:	2900      	cmp	r1, #0
 8005850:	f43f aefc 	beq.w	800564c <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005854:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	e852 3f00 	ldrex	r3, [r2]
 800585a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	e842 3000 	strex	r0, r3, [r2]
 8005862:	2800      	cmp	r0, #0
 8005864:	d1f6      	bne.n	8005854 <HAL_UART_IRQHandler+0x268>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	f102 0308 	add.w	r3, r2, #8
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	3208      	adds	r2, #8
 8005876:	e842 3000 	strex	r0, r3, [r2]
 800587a:	2800      	cmp	r0, #0
 800587c:	d1f3      	bne.n	8005866 <HAL_UART_IRQHandler+0x27a>
        huart->RxState = HAL_UART_STATE_READY;
 800587e:	2320      	movs	r3, #32
 8005880:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005882:	2300      	movs	r3, #0
 8005884:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005886:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	e852 3f00 	ldrex	r3, [r2]
 800588e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	e842 3000 	strex	r0, r3, [r2]
 8005896:	2800      	cmp	r0, #0
 8005898:	d1f6      	bne.n	8005888 <HAL_UART_IRQHandler+0x29c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff fea4 	bl	80055e8 <HAL_UARTEx_RxEventCallback>
      return;
 80058a0:	e6d4      	b.n	800564c <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058a6:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fc4f 	bl	800614c <HAL_UARTEx_WakeupCallback>
    return;
 80058ae:	e6cd      	b.n	800564c <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 80058b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f43f aeca 	beq.w	800564c <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 80058b8:	4620      	mov	r0, r4
 80058ba:	4798      	blx	r3
    return;
 80058bc:	e6c6      	b.n	800564c <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff fdfa 	bl	80054b8 <UART_EndTransmit_IT>
    return;
 80058c4:	e6c2      	b.n	800564c <HAL_UART_IRQHandler+0x60>
 80058c6:	bf00      	nop
 80058c8:	04000120 	.word	0x04000120
 80058cc:	080054dd 	.word	0x080054dd

080058d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058d0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80058d2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80058d8:	2a22      	cmp	r2, #34	; 0x22
 80058da:	d006      	beq.n	80058ea <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058dc:	6802      	ldr	r2, [r0, #0]
 80058de:	8b13      	ldrh	r3, [r2, #24]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f043 0308 	orr.w	r3, r3, #8
 80058e6:	8313      	strh	r3, [r2, #24]
  }
}
 80058e8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ea:	6802      	ldr	r2, [r0, #0]
 80058ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80058f2:	400b      	ands	r3, r1
 80058f4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80058f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80058f8:	3301      	adds	r3, #1
 80058fa:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80058fc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800590a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e9      	bne.n	80058e8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005914:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	e852 3f00 	ldrex	r3, [r2]
 800591a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	e842 3100 	strex	r1, r3, [r2]
 8005922:	2900      	cmp	r1, #0
 8005924:	d1f6      	bne.n	8005914 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	f102 0308 	add.w	r3, r2, #8
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	3208      	adds	r2, #8
 8005936:	e842 3100 	strex	r1, r3, [r2]
 800593a:	2900      	cmp	r1, #0
 800593c:	d1f3      	bne.n	8005926 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800593e:	2320      	movs	r3, #32
 8005940:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005946:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005948:	2b01      	cmp	r3, #1
 800594a:	d116      	bne.n	800597a <UART_RxISR_8BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	2300      	movs	r3, #0
 800594e:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	e852 3f00 	ldrex	r3, [r2]
 8005956:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	e842 3100 	strex	r1, r3, [r2]
 800595e:	2900      	cmp	r1, #0
 8005960:	d1f6      	bne.n	8005950 <UART_RxISR_8BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005962:	6803      	ldr	r3, [r0, #0]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	f012 0f10 	tst.w	r2, #16
 800596a:	d001      	beq.n	8005970 <UART_RxISR_8BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596c:	2210      	movs	r2, #16
 800596e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005970:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8005974:	f7ff fe38 	bl	80055e8 <HAL_UARTEx_RxEventCallback>
 8005978:	e7b6      	b.n	80058e8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800597a:	f7fb ff59 	bl	8001830 <HAL_UART_RxCpltCallback>
 800597e:	e7b3      	b.n	80058e8 <UART_RxISR_8BIT+0x18>

08005980 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005980:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005982:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005986:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005988:	2a22      	cmp	r2, #34	; 0x22
 800598a:	d006      	beq.n	800599a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800598c:	6802      	ldr	r2, [r0, #0]
 800598e:	8b13      	ldrh	r3, [r2, #24]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f043 0308 	orr.w	r3, r3, #8
 8005996:	8313      	strh	r3, [r2, #24]
  }
}
 8005998:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800599a:	6802      	ldr	r2, [r0, #0]
 800599c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800599e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80059a0:	400b      	ands	r3, r1
 80059a2:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80059a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80059a6:	3302      	adds	r3, #2
 80059a8:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80059aa:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80059b8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1ea      	bne.n	8005998 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	e852 3f00 	ldrex	r3, [r2]
 80059c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	e842 3100 	strex	r1, r3, [r2]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d1f6      	bne.n	80059c2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	f102 0308 	add.w	r3, r2, #8
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	3208      	adds	r2, #8
 80059e4:	e842 3100 	strex	r1, r3, [r2]
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d1f3      	bne.n	80059d4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80059ec:	2320      	movs	r3, #32
 80059ee:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d116      	bne.n	8005a28 <UART_RxISR_16BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	2300      	movs	r3, #0
 80059fc:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	e852 3f00 	ldrex	r3, [r2]
 8005a04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	e842 3100 	strex	r1, r3, [r2]
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	d1f6      	bne.n	80059fe <UART_RxISR_16BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a10:	6803      	ldr	r3, [r0, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	f012 0f10 	tst.w	r2, #16
 8005a18:	d001      	beq.n	8005a1e <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8005a22:	f7ff fde1 	bl	80055e8 <HAL_UARTEx_RxEventCallback>
 8005a26:	e7b7      	b.n	8005998 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005a28:	f7fb ff02 	bl	8001830 <HAL_UART_RxCpltCallback>
 8005a2c:	e7b4      	b.n	8005998 <UART_RxISR_16BIT+0x18>
	...

08005a30 <UART_SetConfig>:
{
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a34:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a36:	6883      	ldr	r3, [r0, #8]
 8005a38:	6902      	ldr	r2, [r0, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	6942      	ldr	r2, [r0, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	69c2      	ldr	r2, [r0, #28]
 8005a42:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	4a95      	ldr	r2, [pc, #596]	; (8005c9c <UART_SetConfig+0x26c>)
 8005a48:	4002      	ands	r2, r0
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	6853      	ldr	r3, [r2, #4]
 8005a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a56:	68e1      	ldr	r1, [r4, #12]
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a5c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	4b8f      	ldr	r3, [pc, #572]	; (8005ca0 <UART_SetConfig+0x270>)
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005a66:	6a23      	ldr	r3, [r4, #32]
 8005a68:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a6a:	6893      	ldr	r3, [r2, #8]
 8005a6c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	4a8b      	ldr	r2, [pc, #556]	; (8005ca4 <UART_SetConfig+0x274>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01f      	beq.n	8005abc <UART_SetConfig+0x8c>
 8005a7c:	4a8a      	ldr	r2, [pc, #552]	; (8005ca8 <UART_SetConfig+0x278>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d030      	beq.n	8005ae4 <UART_SetConfig+0xb4>
 8005a82:	4a8a      	ldr	r2, [pc, #552]	; (8005cac <UART_SetConfig+0x27c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d046      	beq.n	8005b16 <UART_SetConfig+0xe6>
 8005a88:	4a85      	ldr	r2, [pc, #532]	; (8005ca0 <UART_SetConfig+0x270>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d055      	beq.n	8005b3a <UART_SetConfig+0x10a>
 8005a8e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a90:	4983      	ldr	r1, [pc, #524]	; (8005ca0 <UART_SetConfig+0x270>)
 8005a92:	428b      	cmp	r3, r1
 8005a94:	d07a      	beq.n	8005b8c <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a96:	69e0      	ldr	r0, [r4, #28]
 8005a98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005a9c:	f000 80a6 	beq.w	8005bec <UART_SetConfig+0x1bc>
    switch (clocksource)
 8005aa0:	2a08      	cmp	r2, #8
 8005aa2:	f200 810f 	bhi.w	8005cc4 <UART_SetConfig+0x294>
 8005aa6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005aaa:	00ce      	.short	0x00ce
 8005aac:	00cc00e5 	.word	0x00cc00e5
 8005ab0:	00e8010d 	.word	0x00e8010d
 8005ab4:	010d010d 	.word	0x010d010d
 8005ab8:	00eb010d 	.word	0x00eb010d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005ac0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ac4:	f002 0203 	and.w	r2, r2, #3
 8005ac8:	2a03      	cmp	r2, #3
 8005aca:	d809      	bhi.n	8005ae0 <UART_SetConfig+0xb0>
 8005acc:	e8df f002 	tbb	[pc, r2]
 8005ad0:	064a0402 	.word	0x064a0402
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	e7db      	b.n	8005a90 <UART_SetConfig+0x60>
 8005ad8:	2204      	movs	r2, #4
 8005ada:	e7d9      	b.n	8005a90 <UART_SetConfig+0x60>
 8005adc:	2208      	movs	r2, #8
 8005ade:	e7d7      	b.n	8005a90 <UART_SetConfig+0x60>
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	e7d5      	b.n	8005a90 <UART_SetConfig+0x60>
 8005ae4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005ae8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005aec:	f002 020c 	and.w	r2, r2, #12
 8005af0:	2a0c      	cmp	r2, #12
 8005af2:	d80e      	bhi.n	8005b12 <UART_SetConfig+0xe2>
 8005af4:	e8df f002 	tbb	[pc, r2]
 8005af8:	0d0d0d07 	.word	0x0d0d0d07
 8005afc:	0d0d0d09 	.word	0x0d0d0d09
 8005b00:	0d0d0d38 	.word	0x0d0d0d38
 8005b04:	0b          	.byte	0x0b
 8005b05:	00          	.byte	0x00
 8005b06:	2200      	movs	r2, #0
 8005b08:	e7c2      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	e7c0      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b0e:	2208      	movs	r2, #8
 8005b10:	e7be      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b12:	2210      	movs	r2, #16
 8005b14:	e7bc      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b16:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005b1a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005b1e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005b22:	2a20      	cmp	r2, #32
 8005b24:	d022      	beq.n	8005b6c <UART_SetConfig+0x13c>
 8005b26:	d804      	bhi.n	8005b32 <UART_SetConfig+0x102>
 8005b28:	b312      	cbz	r2, 8005b70 <UART_SetConfig+0x140>
 8005b2a:	2a10      	cmp	r2, #16
 8005b2c:	d122      	bne.n	8005b74 <UART_SetConfig+0x144>
 8005b2e:	2204      	movs	r2, #4
 8005b30:	e7ae      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b32:	2a30      	cmp	r2, #48	; 0x30
 8005b34:	d120      	bne.n	8005b78 <UART_SetConfig+0x148>
 8005b36:	2208      	movs	r2, #8
 8005b38:	e7aa      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b3a:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005b3e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005b42:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005b46:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005b4a:	d017      	beq.n	8005b7c <UART_SetConfig+0x14c>
 8005b4c:	d805      	bhi.n	8005b5a <UART_SetConfig+0x12a>
 8005b4e:	b1ba      	cbz	r2, 8005b80 <UART_SetConfig+0x150>
 8005b50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005b54:	d116      	bne.n	8005b84 <UART_SetConfig+0x154>
 8005b56:	2204      	movs	r2, #4
 8005b58:	e79a      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b5a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005b5e:	d113      	bne.n	8005b88 <UART_SetConfig+0x158>
 8005b60:	2208      	movs	r2, #8
 8005b62:	e795      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b64:	2202      	movs	r2, #2
 8005b66:	e793      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b68:	2202      	movs	r2, #2
 8005b6a:	e791      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	e78f      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b70:	2200      	movs	r2, #0
 8005b72:	e78d      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b74:	2210      	movs	r2, #16
 8005b76:	e78b      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b78:	2210      	movs	r2, #16
 8005b7a:	e789      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	e787      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b80:	2200      	movs	r2, #0
 8005b82:	e785      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b84:	2210      	movs	r2, #16
 8005b86:	e783      	b.n	8005a90 <UART_SetConfig+0x60>
 8005b88:	2210      	movs	r2, #16
 8005b8a:	e781      	b.n	8005a90 <UART_SetConfig+0x60>
    switch (clocksource)
 8005b8c:	2a08      	cmp	r2, #8
 8005b8e:	d87a      	bhi.n	8005c86 <UART_SetConfig+0x256>
 8005b90:	e8df f002 	tbb	[pc, r2]
 8005b94:	792a7908 	.word	0x792a7908
 8005b98:	79797927 	.word	0x79797927
 8005b9c:	05          	.byte	0x05
 8005b9d:	00          	.byte	0x00
 8005b9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ba2:	e003      	b.n	8005bac <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba4:	f7fe fb22 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d06e      	beq.n	8005c8a <UART_SetConfig+0x25a>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	d86b      	bhi.n	8005c8e <UART_SetConfig+0x25e>
 8005bb6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005bba:	d86a      	bhi.n	8005c92 <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bbc:	0e01      	lsrs	r1, r0, #24
 8005bbe:	0200      	lsls	r0, r0, #8
 8005bc0:	0853      	lsrs	r3, r2, #1
 8005bc2:	18c0      	adds	r0, r0, r3
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	f141 0100 	adc.w	r1, r1, #0
 8005bcc:	f7fb f85c 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <UART_SetConfig+0x280>)
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d85d      	bhi.n	8005c96 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	60d8      	str	r0, [r3, #12]
 8005bde:	2000      	movs	r0, #0
 8005be0:	e044      	b.n	8005c6c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005be2:	f7fd fe71 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005be6:	e7df      	b.n	8005ba8 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8005be8:	4832      	ldr	r0, [pc, #200]	; (8005cb4 <UART_SetConfig+0x284>)
 8005bea:	e7df      	b.n	8005bac <UART_SetConfig+0x17c>
    switch (clocksource)
 8005bec:	2a08      	cmp	r2, #8
 8005bee:	d863      	bhi.n	8005cb8 <UART_SetConfig+0x288>
 8005bf0:	e8df f002 	tbb	[pc, r2]
 8005bf4:	62052107 	.word	0x62052107
 8005bf8:	62626224 	.word	0x62626224
 8005bfc:	0b          	.byte	0x0b
 8005bfd:	00          	.byte	0x00
 8005bfe:	482d      	ldr	r0, [pc, #180]	; (8005cb4 <UART_SetConfig+0x284>)
 8005c00:	e003      	b.n	8005c0a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c02:	f7fe faf3 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d058      	beq.n	8005cbc <UART_SetConfig+0x28c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	0853      	lsrs	r3, r2, #1
 8005c0e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005c12:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c16:	f1a0 0210 	sub.w	r2, r0, #16
 8005c1a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d84e      	bhi.n	8005cc0 <UART_SetConfig+0x290>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c22:	b283      	uxth	r3, r0
 8005c24:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c28:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005c2c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	60d8      	str	r0, [r3, #12]
 8005c32:	2000      	movs	r0, #0
 8005c34:	e01a      	b.n	8005c6c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c36:	f7fe faeb 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c3a:	e7e4      	b.n	8005c06 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3c:	f7fd fe44 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005c40:	e7e1      	b.n	8005c06 <UART_SetConfig+0x1d6>
    switch (clocksource)
 8005c42:	481c      	ldr	r0, [pc, #112]	; (8005cb4 <UART_SetConfig+0x284>)
 8005c44:	e003      	b.n	8005c4e <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c46:	f7fe fad1 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d03c      	beq.n	8005cc8 <UART_SetConfig+0x298>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005c54:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c58:	f1a0 0210 	sub.w	r2, r0, #16
 8005c5c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d833      	bhi.n	8005ccc <UART_SetConfig+0x29c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	b280      	uxth	r0, r0
 8005c68:	60d8      	str	r0, [r3, #12]
 8005c6a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005c70:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005c72:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c74:	f7fe facc 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c78:	e7e7      	b.n	8005c4a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fd fe25 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005c7e:	e7e4      	b.n	8005c4a <UART_SetConfig+0x21a>
        pclk = (uint32_t) LSE_VALUE;
 8005c80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c84:	e7e3      	b.n	8005c4e <UART_SetConfig+0x21e>
    switch (clocksource)
 8005c86:	2001      	movs	r0, #1
 8005c88:	e7f0      	b.n	8005c6c <UART_SetConfig+0x23c>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e7ee      	b.n	8005c6c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7ec      	b.n	8005c6c <UART_SetConfig+0x23c>
 8005c92:	2001      	movs	r0, #1
 8005c94:	e7ea      	b.n	8005c6c <UART_SetConfig+0x23c>
          ret = HAL_ERROR;
 8005c96:	2001      	movs	r0, #1
 8005c98:	e7e8      	b.n	8005c6c <UART_SetConfig+0x23c>
 8005c9a:	bf00      	nop
 8005c9c:	efff69f3 	.word	0xefff69f3
 8005ca0:	40008000 	.word	0x40008000
 8005ca4:	40013800 	.word	0x40013800
 8005ca8:	40004400 	.word	0x40004400
 8005cac:	40004800 	.word	0x40004800
 8005cb0:	000ffcff 	.word	0x000ffcff
 8005cb4:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e7d7      	b.n	8005c6c <UART_SetConfig+0x23c>
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e7d5      	b.n	8005c6c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	e7d3      	b.n	8005c6c <UART_SetConfig+0x23c>
    switch (clocksource)
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	e7d1      	b.n	8005c6c <UART_SetConfig+0x23c>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7cf      	b.n	8005c6c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8005ccc:	2001      	movs	r0, #1
 8005cce:	e7cd      	b.n	8005c6c <UART_SetConfig+0x23c>

08005cd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cd2:	f013 0f01 	tst.w	r3, #1
 8005cd6:	d006      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	6853      	ldr	r3, [r2, #4]
 8005cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ce0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ce6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ce8:	f013 0f02 	tst.w	r3, #2
 8005cec:	d006      	beq.n	8005cfc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cee:	6802      	ldr	r2, [r0, #0]
 8005cf0:	6853      	ldr	r3, [r2, #4]
 8005cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cfe:	f013 0f04 	tst.w	r3, #4
 8005d02:	d006      	beq.n	8005d12 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d04:	6802      	ldr	r2, [r0, #0]
 8005d06:	6853      	ldr	r3, [r2, #4]
 8005d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d14:	f013 0f08 	tst.w	r3, #8
 8005d18:	d006      	beq.n	8005d28 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d1a:	6802      	ldr	r2, [r0, #0]
 8005d1c:	6853      	ldr	r3, [r2, #4]
 8005d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d22:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d2a:	f013 0f10 	tst.w	r3, #16
 8005d2e:	d006      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d30:	6802      	ldr	r2, [r0, #0]
 8005d32:	6893      	ldr	r3, [r2, #8]
 8005d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d38:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d40:	f013 0f20 	tst.w	r3, #32
 8005d44:	d006      	beq.n	8005d54 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d46:	6802      	ldr	r2, [r0, #0]
 8005d48:	6893      	ldr	r3, [r2, #8]
 8005d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d4e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d5c:	6802      	ldr	r2, [r0, #0]
 8005d5e:	6853      	ldr	r3, [r2, #4]
 8005d60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d64:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005d66:	430b      	orrs	r3, r1
 8005d68:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d70:	d00b      	beq.n	8005d8a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d78:	d006      	beq.n	8005d88 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7a:	6802      	ldr	r2, [r0, #0]
 8005d7c:	6853      	ldr	r3, [r2, #4]
 8005d7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005d82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6053      	str	r3, [r2, #4]
}
 8005d88:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d8a:	6802      	ldr	r2, [r0, #0]
 8005d8c:	6853      	ldr	r3, [r2, #4]
 8005d8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d92:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6053      	str	r3, [r2, #4]
 8005d98:	e7eb      	b.n	8005d72 <UART_AdvFeatureConfig+0xa2>

08005d9a <UART_WaitOnFlagUntilTimeout>:
{
 8005d9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9e:	4605      	mov	r5, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	4616      	mov	r6, r2
 8005da4:	4699      	mov	r9, r3
 8005da6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005daa:	682c      	ldr	r4, [r5, #0]
 8005dac:	69e4      	ldr	r4, [r4, #28]
 8005dae:	ea37 0304 	bics.w	r3, r7, r4
 8005db2:	bf0c      	ite	eq
 8005db4:	f04f 0c01 	moveq.w	ip, #1
 8005db8:	f04f 0c00 	movne.w	ip, #0
 8005dbc:	45b4      	cmp	ip, r6
 8005dbe:	d153      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8005dc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005dc4:	d0f1      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc6:	f7fc fb5b 	bl	8002480 <HAL_GetTick>
 8005dca:	eba0 0009 	sub.w	r0, r0, r9
 8005dce:	4540      	cmp	r0, r8
 8005dd0:	d82d      	bhi.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x94>
 8005dd2:	f1b8 0f00 	cmp.w	r8, #0
 8005dd6:	d02a      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	f012 0f04 	tst.w	r2, #4
 8005de0:	d0e3      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005de8:	d0df      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dee:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	e852 3f00 	ldrex	r3, [r2]
 8005df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	e842 3100 	strex	r1, r3, [r2]
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	d1f6      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e02:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	f102 0308 	add.w	r3, r2, #8
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	3208      	adds	r2, #8
 8005e12:	e842 3100 	strex	r1, r3, [r2]
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d1f3      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e20:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8005e24:	2300      	movs	r3, #0
 8005e26:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 8005e2a:	2003      	movs	r0, #3
 8005e2c:	e01d      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e2e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	e852 3f00 	ldrex	r3, [r2]
 8005e34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	e842 3100 	strex	r1, r3, [r2]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d1f6      	bne.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	f102 0308 	add.w	r3, r2, #8
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	3208      	adds	r2, #8
 8005e50:	e842 3100 	strex	r1, r3, [r2]
 8005e54:	2900      	cmp	r1, #0
 8005e56:	d1f3      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005e58:	2320      	movs	r3, #32
 8005e5a:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8005e64:	2003      	movs	r0, #3
 8005e66:	e000      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd0>
  return HAL_OK;
 8005e68:	2000      	movs	r0, #0
}
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005e6e <HAL_UART_Transmit>:
{
 8005e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e76:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d156      	bne.n	8005f2a <HAL_UART_Transmit+0xbc>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005e82:	2900      	cmp	r1, #0
 8005e84:	d055      	beq.n	8005f32 <HAL_UART_Transmit+0xc4>
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	d055      	beq.n	8005f36 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005e8a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d053      	beq.n	8005f3a <HAL_UART_Transmit+0xcc>
 8005e92:	2301      	movs	r3, #1
 8005e94:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9e:	2321      	movs	r3, #33	; 0x21
 8005ea0:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005ea2:	f7fc faed 	bl	8002480 <HAL_GetTick>
 8005ea6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005ea8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eac:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68a3      	ldr	r3, [r4, #8]
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	d005      	beq.n	8005ec4 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8005eb8:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005ec2:	e014      	b.n	8005eee <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b113      	cbz	r3, 8005ece <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8005ec8:	f04f 0800 	mov.w	r8, #0
 8005ecc:	e7f6      	b.n	8005ebc <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8005ece:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	e7f3      	b.n	8005ebc <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed4:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005ee0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	b292      	uxth	r2, r2
 8005eea:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005eee:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	b173      	cbz	r3, 8005f14 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	9600      	str	r6, [sp, #0]
 8005ef8:	463b      	mov	r3, r7
 8005efa:	2200      	movs	r2, #0
 8005efc:	2180      	movs	r1, #128	; 0x80
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff ff4b 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005f04:	b9d8      	cbnz	r0, 8005f3e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	d0e4      	beq.n	8005ed4 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f12:	e7e5      	b.n	8005ee0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f14:	9600      	str	r6, [sp, #0]
 8005f16:	463b      	mov	r3, r7
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2140      	movs	r1, #64	; 0x40
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff ff3c 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005f22:	b970      	cbnz	r0, 8005f42 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8005f24:	2320      	movs	r3, #32
 8005f26:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005f28:	e000      	b.n	8005f2c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8005f2a:	2002      	movs	r0, #2
}
 8005f2c:	b002      	add	sp, #8
 8005f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005f32:	2001      	movs	r0, #1
 8005f34:	e7fa      	b.n	8005f2c <HAL_UART_Transmit+0xbe>
 8005f36:	2001      	movs	r0, #1
 8005f38:	e7f8      	b.n	8005f2c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8005f3a:	2002      	movs	r0, #2
 8005f3c:	e7f6      	b.n	8005f2c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8005f3e:	2003      	movs	r0, #3
 8005f40:	e7f4      	b.n	8005f2c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8005f42:	2003      	movs	r0, #3
 8005f44:	e7f2      	b.n	8005f2c <HAL_UART_Transmit+0xbe>

08005f46 <UART_CheckIdleState>:
{
 8005f46:	b530      	push	{r4, r5, lr}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005f52:	f7fc fa95 	bl	8002480 <HAL_GetTick>
 8005f56:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	f012 0f08 	tst.w	r2, #8
 8005f60:	d10d      	bne.n	8005f7e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f013 0f04 	tst.w	r3, #4
 8005f6a:	d116      	bne.n	8005f9a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f70:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	2000      	movs	r0, #0
 8005f74:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005f76:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8005f7a:	b003      	add	sp, #12
 8005f7c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	4603      	mov	r3, r0
 8005f86:	2200      	movs	r2, #0
 8005f88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff ff04 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0e5      	beq.n	8005f62 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005f96:	2003      	movs	r0, #3
 8005f98:	e7ef      	b.n	8005f7a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff fef6 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0dc      	beq.n	8005f6c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005fb2:	2003      	movs	r0, #3
 8005fb4:	e7e1      	b.n	8005f7a <UART_CheckIdleState+0x34>

08005fb6 <HAL_UART_Init>:
  if (huart == NULL)
 8005fb6:	b368      	cbz	r0, 8006014 <HAL_UART_Init+0x5e>
{
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fbc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005fbe:	b303      	cbz	r3, 8006002 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	2324      	movs	r3, #36	; 0x24
 8005fc2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff fd2e 	bl	8005a30 <UART_SetConfig>
 8005fd4:	2801      	cmp	r0, #1
 8005fd6:	d013      	beq.n	8006000 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fda:	b9bb      	cbnz	r3, 800600c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fdc:	6822      	ldr	r2, [r4, #0]
 8005fde:	6853      	ldr	r3, [r2, #4]
 8005fe0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005fe4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	6893      	ldr	r3, [r2, #8]
 8005fea:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005fee:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff ffa3 	bl	8005f46 <UART_CheckIdleState>
}
 8006000:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006002:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006006:	f7fc f88f 	bl	8002128 <HAL_UART_MspInit>
 800600a:	e7d9      	b.n	8005fc0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800600c:	4620      	mov	r0, r4
 800600e:	f7ff fe5f 	bl	8005cd0 <UART_AdvFeatureConfig>
 8006012:	e7e3      	b.n	8005fdc <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8006014:	2001      	movs	r0, #1
}
 8006016:	4770      	bx	lr

08006018 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 8006018:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 800601a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800601e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8006026:	6883      	ldr	r3, [r0, #8]
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602c:	d006      	beq.n	800603c <UART_Start_Receive_IT+0x24>
 800602e:	b9a3      	cbnz	r3, 800605a <UART_Start_Receive_IT+0x42>
 8006030:	6903      	ldr	r3, [r0, #16]
 8006032:	b973      	cbnz	r3, 8006052 <UART_Start_Receive_IT+0x3a>
 8006034:	23ff      	movs	r3, #255	; 0xff
 8006036:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800603a:	e014      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
 800603c:	6903      	ldr	r3, [r0, #16]
 800603e:	b923      	cbnz	r3, 800604a <UART_Start_Receive_IT+0x32>
 8006040:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006044:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006048:	e00d      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
 800604a:	23ff      	movs	r3, #255	; 0xff
 800604c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006050:	e009      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
 8006052:	237f      	movs	r3, #127	; 0x7f
 8006054:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006058:	e005      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
 800605a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800605e:	d029      	beq.n	80060b4 <UART_Start_Receive_IT+0x9c>
 8006060:	2300      	movs	r3, #0
 8006062:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800606c:	2322      	movs	r3, #34	; 0x22
 800606e:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	f102 0308 	add.w	r3, r2, #8
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	3208      	adds	r2, #8
 8006080:	e842 3100 	strex	r1, r3, [r2]
 8006084:	2900      	cmp	r1, #0
 8006086:	d1f3      	bne.n	8006070 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006088:	6883      	ldr	r3, [r0, #8]
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	d01b      	beq.n	80060c8 <UART_Start_Receive_IT+0xb0>
    huart->RxISR = UART_RxISR_8BIT;
 8006090:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <UART_Start_Receive_IT+0xd0>)
 8006092:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8006094:	2300      	movs	r3, #0
 8006096:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800609a:	6903      	ldr	r3, [r0, #16]
 800609c:	b1d3      	cbz	r3, 80060d4 <UART_Start_Receive_IT+0xbc>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800609e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	e852 3f00 	ldrex	r3, [r2]
 80060a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	e842 3100 	strex	r1, r3, [r2]
 80060ac:	2900      	cmp	r1, #0
 80060ae:	d1f6      	bne.n	800609e <UART_Start_Receive_IT+0x86>
}
 80060b0:	2000      	movs	r0, #0
 80060b2:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80060b4:	6903      	ldr	r3, [r0, #16]
 80060b6:	b91b      	cbnz	r3, 80060c0 <UART_Start_Receive_IT+0xa8>
 80060b8:	237f      	movs	r3, #127	; 0x7f
 80060ba:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80060be:	e7d2      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
 80060c0:	233f      	movs	r3, #63	; 0x3f
 80060c2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80060c6:	e7ce      	b.n	8006066 <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	6903      	ldr	r3, [r0, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e0      	bne.n	8006090 <UART_Start_Receive_IT+0x78>
    huart->RxISR = UART_RxISR_16BIT;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <UART_Start_Receive_IT+0xd4>)
 80060d0:	6643      	str	r3, [r0, #100]	; 0x64
 80060d2:	e7df      	b.n	8006094 <UART_Start_Receive_IT+0x7c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80060d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	e852 3f00 	ldrex	r3, [r2]
 80060da:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	e842 3100 	strex	r1, r3, [r2]
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d1f6      	bne.n	80060d4 <UART_Start_Receive_IT+0xbc>
 80060e6:	e7e3      	b.n	80060b0 <UART_Start_Receive_IT+0x98>
 80060e8:	080058d1 	.word	0x080058d1
 80060ec:	08005981 	.word	0x08005981

080060f0 <HAL_UART_Receive_IT>:
{
 80060f0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80060f2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d11e      	bne.n	8006136 <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 80060f8:	b1f9      	cbz	r1, 800613a <HAL_UART_Receive_IT+0x4a>
 80060fa:	b302      	cbz	r2, 800613e <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 80060fc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006100:	2b01      	cmp	r3, #1
 8006102:	d01e      	beq.n	8006142 <HAL_UART_Receive_IT+0x52>
 8006104:	2301      	movs	r3, #1
 8006106:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	2300      	movs	r3, #0
 800610c:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <HAL_UART_Receive_IT+0x58>)
 8006112:	42a3      	cmp	r3, r4
 8006114:	d00c      	beq.n	8006130 <HAL_UART_Receive_IT+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800611c:	d008      	beq.n	8006130 <HAL_UART_Receive_IT+0x40>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800611e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	e854 3f00 	ldrex	r3, [r4]
 8006124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	e844 3500 	strex	r5, r3, [r4]
 800612c:	2d00      	cmp	r5, #0
 800612e:	d1f6      	bne.n	800611e <HAL_UART_Receive_IT+0x2e>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006130:	f7ff ff72 	bl	8006018 <UART_Start_Receive_IT>
 8006134:	e000      	b.n	8006138 <HAL_UART_Receive_IT+0x48>
    return HAL_BUSY;
 8006136:	2002      	movs	r0, #2
}
 8006138:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800613a:	2001      	movs	r0, #1
 800613c:	e7fc      	b.n	8006138 <HAL_UART_Receive_IT+0x48>
 800613e:	2001      	movs	r0, #1
 8006140:	e7fa      	b.n	8006138 <HAL_UART_Receive_IT+0x48>
    __HAL_LOCK(huart);
 8006142:	2002      	movs	r0, #2
 8006144:	e7f8      	b.n	8006138 <HAL_UART_Receive_IT+0x48>
 8006146:	bf00      	nop
 8006148:	40008000 	.word	0x40008000

0800614c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800614c:	4770      	bx	lr
	...

08006150 <__errno>:
 8006150:	4b01      	ldr	r3, [pc, #4]	; (8006158 <__errno+0x8>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000018 	.word	0x20000018

0800615c <__libc_init_array>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4d0d      	ldr	r5, [pc, #52]	; (8006194 <__libc_init_array+0x38>)
 8006160:	4c0d      	ldr	r4, [pc, #52]	; (8006198 <__libc_init_array+0x3c>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	2600      	movs	r6, #0
 8006168:	42a6      	cmp	r6, r4
 800616a:	d109      	bne.n	8006180 <__libc_init_array+0x24>
 800616c:	4d0b      	ldr	r5, [pc, #44]	; (800619c <__libc_init_array+0x40>)
 800616e:	4c0c      	ldr	r4, [pc, #48]	; (80061a0 <__libc_init_array+0x44>)
 8006170:	f004 fd1e 	bl	800abb0 <_init>
 8006174:	1b64      	subs	r4, r4, r5
 8006176:	10a4      	asrs	r4, r4, #2
 8006178:	2600      	movs	r6, #0
 800617a:	42a6      	cmp	r6, r4
 800617c:	d105      	bne.n	800618a <__libc_init_array+0x2e>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	f855 3b04 	ldr.w	r3, [r5], #4
 8006184:	4798      	blx	r3
 8006186:	3601      	adds	r6, #1
 8006188:	e7ee      	b.n	8006168 <__libc_init_array+0xc>
 800618a:	f855 3b04 	ldr.w	r3, [r5], #4
 800618e:	4798      	blx	r3
 8006190:	3601      	adds	r6, #1
 8006192:	e7f2      	b.n	800617a <__libc_init_array+0x1e>
 8006194:	0800b49c 	.word	0x0800b49c
 8006198:	0800b49c 	.word	0x0800b49c
 800619c:	0800b49c 	.word	0x0800b49c
 80061a0:	0800b4a0 	.word	0x0800b4a0

080061a4 <memset>:
 80061a4:	4402      	add	r2, r0
 80061a6:	4603      	mov	r3, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d100      	bne.n	80061ae <memset+0xa>
 80061ac:	4770      	bx	lr
 80061ae:	f803 1b01 	strb.w	r1, [r3], #1
 80061b2:	e7f9      	b.n	80061a8 <memset+0x4>

080061b4 <__cvt>:
 80061b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	ec55 4b10 	vmov	r4, r5, d0
 80061bc:	2d00      	cmp	r5, #0
 80061be:	460e      	mov	r6, r1
 80061c0:	4619      	mov	r1, r3
 80061c2:	462b      	mov	r3, r5
 80061c4:	bfbb      	ittet	lt
 80061c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061ca:	461d      	movlt	r5, r3
 80061cc:	2300      	movge	r3, #0
 80061ce:	232d      	movlt	r3, #45	; 0x2d
 80061d0:	700b      	strb	r3, [r1, #0]
 80061d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061d8:	4691      	mov	r9, r2
 80061da:	f023 0820 	bic.w	r8, r3, #32
 80061de:	bfbc      	itt	lt
 80061e0:	4622      	movlt	r2, r4
 80061e2:	4614      	movlt	r4, r2
 80061e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061e8:	d005      	beq.n	80061f6 <__cvt+0x42>
 80061ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ee:	d100      	bne.n	80061f2 <__cvt+0x3e>
 80061f0:	3601      	adds	r6, #1
 80061f2:	2102      	movs	r1, #2
 80061f4:	e000      	b.n	80061f8 <__cvt+0x44>
 80061f6:	2103      	movs	r1, #3
 80061f8:	ab03      	add	r3, sp, #12
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	ab02      	add	r3, sp, #8
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	ec45 4b10 	vmov	d0, r4, r5
 8006204:	4653      	mov	r3, sl
 8006206:	4632      	mov	r2, r6
 8006208:	f001 ff76 	bl	80080f8 <_dtoa_r>
 800620c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006210:	4607      	mov	r7, r0
 8006212:	d102      	bne.n	800621a <__cvt+0x66>
 8006214:	f019 0f01 	tst.w	r9, #1
 8006218:	d022      	beq.n	8006260 <__cvt+0xac>
 800621a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800621e:	eb07 0906 	add.w	r9, r7, r6
 8006222:	d110      	bne.n	8006246 <__cvt+0x92>
 8006224:	783b      	ldrb	r3, [r7, #0]
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d10a      	bne.n	8006240 <__cvt+0x8c>
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8006236:	b918      	cbnz	r0, 8006240 <__cvt+0x8c>
 8006238:	f1c6 0601 	rsb	r6, r6, #1
 800623c:	f8ca 6000 	str.w	r6, [sl]
 8006240:	f8da 3000 	ldr.w	r3, [sl]
 8006244:	4499      	add	r9, r3
 8006246:	2200      	movs	r2, #0
 8006248:	2300      	movs	r3, #0
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006252:	b108      	cbz	r0, 8006258 <__cvt+0xa4>
 8006254:	f8cd 900c 	str.w	r9, [sp, #12]
 8006258:	2230      	movs	r2, #48	; 0x30
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	454b      	cmp	r3, r9
 800625e:	d307      	bcc.n	8006270 <__cvt+0xbc>
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006264:	1bdb      	subs	r3, r3, r7
 8006266:	4638      	mov	r0, r7
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	b004      	add	sp, #16
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	9103      	str	r1, [sp, #12]
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e7f0      	b.n	800625a <__cvt+0xa6>

08006278 <__exponent>:
 8006278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627a:	4603      	mov	r3, r0
 800627c:	2900      	cmp	r1, #0
 800627e:	bfb8      	it	lt
 8006280:	4249      	neglt	r1, r1
 8006282:	f803 2b02 	strb.w	r2, [r3], #2
 8006286:	bfb4      	ite	lt
 8006288:	222d      	movlt	r2, #45	; 0x2d
 800628a:	222b      	movge	r2, #43	; 0x2b
 800628c:	2909      	cmp	r1, #9
 800628e:	7042      	strb	r2, [r0, #1]
 8006290:	dd2a      	ble.n	80062e8 <__exponent+0x70>
 8006292:	f10d 0407 	add.w	r4, sp, #7
 8006296:	46a4      	mov	ip, r4
 8006298:	270a      	movs	r7, #10
 800629a:	46a6      	mov	lr, r4
 800629c:	460a      	mov	r2, r1
 800629e:	fb91 f6f7 	sdiv	r6, r1, r7
 80062a2:	fb07 1516 	mls	r5, r7, r6, r1
 80062a6:	3530      	adds	r5, #48	; 0x30
 80062a8:	2a63      	cmp	r2, #99	; 0x63
 80062aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062b2:	4631      	mov	r1, r6
 80062b4:	dcf1      	bgt.n	800629a <__exponent+0x22>
 80062b6:	3130      	adds	r1, #48	; 0x30
 80062b8:	f1ae 0502 	sub.w	r5, lr, #2
 80062bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062c0:	1c44      	adds	r4, r0, #1
 80062c2:	4629      	mov	r1, r5
 80062c4:	4561      	cmp	r1, ip
 80062c6:	d30a      	bcc.n	80062de <__exponent+0x66>
 80062c8:	f10d 0209 	add.w	r2, sp, #9
 80062cc:	eba2 020e 	sub.w	r2, r2, lr
 80062d0:	4565      	cmp	r5, ip
 80062d2:	bf88      	it	hi
 80062d4:	2200      	movhi	r2, #0
 80062d6:	4413      	add	r3, r2
 80062d8:	1a18      	subs	r0, r3, r0
 80062da:	b003      	add	sp, #12
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062e6:	e7ed      	b.n	80062c4 <__exponent+0x4c>
 80062e8:	2330      	movs	r3, #48	; 0x30
 80062ea:	3130      	adds	r1, #48	; 0x30
 80062ec:	7083      	strb	r3, [r0, #2]
 80062ee:	70c1      	strb	r1, [r0, #3]
 80062f0:	1d03      	adds	r3, r0, #4
 80062f2:	e7f1      	b.n	80062d8 <__exponent+0x60>

080062f4 <_printf_float>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	ed2d 8b02 	vpush	{d8}
 80062fc:	b08d      	sub	sp, #52	; 0x34
 80062fe:	460c      	mov	r4, r1
 8006300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006304:	4616      	mov	r6, r2
 8006306:	461f      	mov	r7, r3
 8006308:	4605      	mov	r5, r0
 800630a:	f003 fa09 	bl	8009720 <_localeconv_r>
 800630e:	f8d0 a000 	ldr.w	sl, [r0]
 8006312:	4650      	mov	r0, sl
 8006314:	f7f9 ff5c 	bl	80001d0 <strlen>
 8006318:	2300      	movs	r3, #0
 800631a:	930a      	str	r3, [sp, #40]	; 0x28
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	f8d8 3000 	ldr.w	r3, [r8]
 8006324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006328:	3307      	adds	r3, #7
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	f103 0208 	add.w	r2, r3, #8
 8006332:	f8c8 2000 	str.w	r2, [r8]
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800633e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	f8cd 8018 	str.w	r8, [sp, #24]
 800634c:	ee08 0a10 	vmov	s16, r0
 8006350:	4b9f      	ldr	r3, [pc, #636]	; (80065d0 <_printf_float+0x2dc>)
 8006352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	f7fa fbe7 	bl	8000b2c <__aeabi_dcmpun>
 800635e:	bb88      	cbnz	r0, 80063c4 <_printf_float+0xd0>
 8006360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006364:	4b9a      	ldr	r3, [pc, #616]	; (80065d0 <_printf_float+0x2dc>)
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	f7fa fbc1 	bl	8000af0 <__aeabi_dcmple>
 800636e:	bb48      	cbnz	r0, 80063c4 <_printf_float+0xd0>
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4640      	mov	r0, r8
 8006376:	4649      	mov	r1, r9
 8006378:	f7fa fbb0 	bl	8000adc <__aeabi_dcmplt>
 800637c:	b110      	cbz	r0, 8006384 <_printf_float+0x90>
 800637e:	232d      	movs	r3, #45	; 0x2d
 8006380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006384:	4b93      	ldr	r3, [pc, #588]	; (80065d4 <_printf_float+0x2e0>)
 8006386:	4894      	ldr	r0, [pc, #592]	; (80065d8 <_printf_float+0x2e4>)
 8006388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800638c:	bf94      	ite	ls
 800638e:	4698      	movls	r8, r3
 8006390:	4680      	movhi	r8, r0
 8006392:	2303      	movs	r3, #3
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	9b05      	ldr	r3, [sp, #20]
 8006398:	f023 0204 	bic.w	r2, r3, #4
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	f04f 0900 	mov.w	r9, #0
 80063a2:	9700      	str	r7, [sp, #0]
 80063a4:	4633      	mov	r3, r6
 80063a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063a8:	4621      	mov	r1, r4
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 f9d8 	bl	8006760 <_printf_common>
 80063b0:	3001      	adds	r0, #1
 80063b2:	f040 8090 	bne.w	80064d6 <_printf_float+0x1e2>
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	b00d      	add	sp, #52	; 0x34
 80063bc:	ecbd 8b02 	vpop	{d8}
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7fa fbae 	bl	8000b2c <__aeabi_dcmpun>
 80063d0:	b140      	cbz	r0, 80063e4 <_printf_float+0xf0>
 80063d2:	464b      	mov	r3, r9
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bfbc      	itt	lt
 80063d8:	232d      	movlt	r3, #45	; 0x2d
 80063da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063de:	487f      	ldr	r0, [pc, #508]	; (80065dc <_printf_float+0x2e8>)
 80063e0:	4b7f      	ldr	r3, [pc, #508]	; (80065e0 <_printf_float+0x2ec>)
 80063e2:	e7d1      	b.n	8006388 <_printf_float+0x94>
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063ea:	9206      	str	r2, [sp, #24]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	d13f      	bne.n	8006470 <_printf_float+0x17c>
 80063f0:	2306      	movs	r3, #6
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	9b05      	ldr	r3, [sp, #20]
 80063f6:	6861      	ldr	r1, [r4, #4]
 80063f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063fc:	2300      	movs	r3, #0
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	ab0a      	add	r3, sp, #40	; 0x28
 8006402:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006406:	ab09      	add	r3, sp, #36	; 0x24
 8006408:	ec49 8b10 	vmov	d0, r8, r9
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6022      	str	r2, [r4, #0]
 8006410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006414:	4628      	mov	r0, r5
 8006416:	f7ff fecd 	bl	80061b4 <__cvt>
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641e:	2b47      	cmp	r3, #71	; 0x47
 8006420:	4680      	mov	r8, r0
 8006422:	d108      	bne.n	8006436 <_printf_float+0x142>
 8006424:	1cc8      	adds	r0, r1, #3
 8006426:	db02      	blt.n	800642e <_printf_float+0x13a>
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	4299      	cmp	r1, r3
 800642c:	dd41      	ble.n	80064b2 <_printf_float+0x1be>
 800642e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006432:	fa5f fb8b 	uxtb.w	fp, fp
 8006436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800643a:	d820      	bhi.n	800647e <_printf_float+0x18a>
 800643c:	3901      	subs	r1, #1
 800643e:	465a      	mov	r2, fp
 8006440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006444:	9109      	str	r1, [sp, #36]	; 0x24
 8006446:	f7ff ff17 	bl	8006278 <__exponent>
 800644a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800644c:	1813      	adds	r3, r2, r0
 800644e:	2a01      	cmp	r2, #1
 8006450:	4681      	mov	r9, r0
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	dc02      	bgt.n	800645c <_printf_float+0x168>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	07d2      	lsls	r2, r2, #31
 800645a:	d501      	bpl.n	8006460 <_printf_float+0x16c>
 800645c:	3301      	adds	r3, #1
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006464:	2b00      	cmp	r3, #0
 8006466:	d09c      	beq.n	80063a2 <_printf_float+0xae>
 8006468:	232d      	movs	r3, #45	; 0x2d
 800646a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646e:	e798      	b.n	80063a2 <_printf_float+0xae>
 8006470:	9a06      	ldr	r2, [sp, #24]
 8006472:	2a47      	cmp	r2, #71	; 0x47
 8006474:	d1be      	bne.n	80063f4 <_printf_float+0x100>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1bc      	bne.n	80063f4 <_printf_float+0x100>
 800647a:	2301      	movs	r3, #1
 800647c:	e7b9      	b.n	80063f2 <_printf_float+0xfe>
 800647e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006482:	d118      	bne.n	80064b6 <_printf_float+0x1c2>
 8006484:	2900      	cmp	r1, #0
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	dd0b      	ble.n	80064a2 <_printf_float+0x1ae>
 800648a:	6121      	str	r1, [r4, #16]
 800648c:	b913      	cbnz	r3, 8006494 <_printf_float+0x1a0>
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	07d0      	lsls	r0, r2, #31
 8006492:	d502      	bpl.n	800649a <_printf_float+0x1a6>
 8006494:	3301      	adds	r3, #1
 8006496:	440b      	add	r3, r1
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	65a1      	str	r1, [r4, #88]	; 0x58
 800649c:	f04f 0900 	mov.w	r9, #0
 80064a0:	e7de      	b.n	8006460 <_printf_float+0x16c>
 80064a2:	b913      	cbnz	r3, 80064aa <_printf_float+0x1b6>
 80064a4:	6822      	ldr	r2, [r4, #0]
 80064a6:	07d2      	lsls	r2, r2, #31
 80064a8:	d501      	bpl.n	80064ae <_printf_float+0x1ba>
 80064aa:	3302      	adds	r3, #2
 80064ac:	e7f4      	b.n	8006498 <_printf_float+0x1a4>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e7f2      	b.n	8006498 <_printf_float+0x1a4>
 80064b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	4299      	cmp	r1, r3
 80064ba:	db05      	blt.n	80064c8 <_printf_float+0x1d4>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	6121      	str	r1, [r4, #16]
 80064c0:	07d8      	lsls	r0, r3, #31
 80064c2:	d5ea      	bpl.n	800649a <_printf_float+0x1a6>
 80064c4:	1c4b      	adds	r3, r1, #1
 80064c6:	e7e7      	b.n	8006498 <_printf_float+0x1a4>
 80064c8:	2900      	cmp	r1, #0
 80064ca:	bfd4      	ite	le
 80064cc:	f1c1 0202 	rsble	r2, r1, #2
 80064d0:	2201      	movgt	r2, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	e7e0      	b.n	8006498 <_printf_float+0x1a4>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	055a      	lsls	r2, r3, #21
 80064da:	d407      	bmi.n	80064ec <_printf_float+0x1f8>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	4642      	mov	r2, r8
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	d12c      	bne.n	8006544 <_printf_float+0x250>
 80064ea:	e764      	b.n	80063b6 <_printf_float+0xc2>
 80064ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064f0:	f240 80e0 	bls.w	80066b4 <_printf_float+0x3c0>
 80064f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064f8:	2200      	movs	r2, #0
 80064fa:	2300      	movs	r3, #0
 80064fc:	f7fa fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006500:	2800      	cmp	r0, #0
 8006502:	d034      	beq.n	800656e <_printf_float+0x27a>
 8006504:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <_printf_float+0x2f0>)
 8006506:	2301      	movs	r3, #1
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f af51 	beq.w	80063b6 <_printf_float+0xc2>
 8006514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006518:	429a      	cmp	r2, r3
 800651a:	db02      	blt.n	8006522 <_printf_float+0x22e>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07d8      	lsls	r0, r3, #31
 8006520:	d510      	bpl.n	8006544 <_printf_float+0x250>
 8006522:	ee18 3a10 	vmov	r3, s16
 8006526:	4652      	mov	r2, sl
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af41 	beq.w	80063b6 <_printf_float+0xc2>
 8006534:	f04f 0800 	mov.w	r8, #0
 8006538:	f104 091a 	add.w	r9, r4, #26
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	4543      	cmp	r3, r8
 8006542:	dc09      	bgt.n	8006558 <_printf_float+0x264>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	079b      	lsls	r3, r3, #30
 8006548:	f100 8105 	bmi.w	8006756 <_printf_float+0x462>
 800654c:	68e0      	ldr	r0, [r4, #12]
 800654e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006550:	4298      	cmp	r0, r3
 8006552:	bfb8      	it	lt
 8006554:	4618      	movlt	r0, r3
 8006556:	e730      	b.n	80063ba <_printf_float+0xc6>
 8006558:	2301      	movs	r3, #1
 800655a:	464a      	mov	r2, r9
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f af27 	beq.w	80063b6 <_printf_float+0xc2>
 8006568:	f108 0801 	add.w	r8, r8, #1
 800656c:	e7e6      	b.n	800653c <_printf_float+0x248>
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	dc39      	bgt.n	80065e8 <_printf_float+0x2f4>
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <_printf_float+0x2f0>)
 8006576:	2301      	movs	r3, #1
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	f43f af19 	beq.w	80063b6 <_printf_float+0xc2>
 8006584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006588:	4313      	orrs	r3, r2
 800658a:	d102      	bne.n	8006592 <_printf_float+0x29e>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07d9      	lsls	r1, r3, #31
 8006590:	d5d8      	bpl.n	8006544 <_printf_float+0x250>
 8006592:	ee18 3a10 	vmov	r3, s16
 8006596:	4652      	mov	r2, sl
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f af09 	beq.w	80063b6 <_printf_float+0xc2>
 80065a4:	f04f 0900 	mov.w	r9, #0
 80065a8:	f104 0a1a 	add.w	sl, r4, #26
 80065ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ae:	425b      	negs	r3, r3
 80065b0:	454b      	cmp	r3, r9
 80065b2:	dc01      	bgt.n	80065b8 <_printf_float+0x2c4>
 80065b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b6:	e792      	b.n	80064de <_printf_float+0x1ea>
 80065b8:	2301      	movs	r3, #1
 80065ba:	4652      	mov	r2, sl
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	f43f aef7 	beq.w	80063b6 <_printf_float+0xc2>
 80065c8:	f109 0901 	add.w	r9, r9, #1
 80065cc:	e7ee      	b.n	80065ac <_printf_float+0x2b8>
 80065ce:	bf00      	nop
 80065d0:	7fefffff 	.word	0x7fefffff
 80065d4:	0800afec 	.word	0x0800afec
 80065d8:	0800aff0 	.word	0x0800aff0
 80065dc:	0800aff8 	.word	0x0800aff8
 80065e0:	0800aff4 	.word	0x0800aff4
 80065e4:	0800affc 	.word	0x0800affc
 80065e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065ec:	429a      	cmp	r2, r3
 80065ee:	bfa8      	it	ge
 80065f0:	461a      	movge	r2, r3
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	4691      	mov	r9, r2
 80065f6:	dc37      	bgt.n	8006668 <_printf_float+0x374>
 80065f8:	f04f 0b00 	mov.w	fp, #0
 80065fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006600:	f104 021a 	add.w	r2, r4, #26
 8006604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	eba3 0309 	sub.w	r3, r3, r9
 800660c:	455b      	cmp	r3, fp
 800660e:	dc33      	bgt.n	8006678 <_printf_float+0x384>
 8006610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006614:	429a      	cmp	r2, r3
 8006616:	db3b      	blt.n	8006690 <_printf_float+0x39c>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07da      	lsls	r2, r3, #31
 800661c:	d438      	bmi.n	8006690 <_printf_float+0x39c>
 800661e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006620:	9a05      	ldr	r2, [sp, #20]
 8006622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006624:	1a9a      	subs	r2, r3, r2
 8006626:	eba3 0901 	sub.w	r9, r3, r1
 800662a:	4591      	cmp	r9, r2
 800662c:	bfa8      	it	ge
 800662e:	4691      	movge	r9, r2
 8006630:	f1b9 0f00 	cmp.w	r9, #0
 8006634:	dc35      	bgt.n	80066a2 <_printf_float+0x3ae>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800663e:	f104 0a1a 	add.w	sl, r4, #26
 8006642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	eba3 0309 	sub.w	r3, r3, r9
 800664c:	4543      	cmp	r3, r8
 800664e:	f77f af79 	ble.w	8006544 <_printf_float+0x250>
 8006652:	2301      	movs	r3, #1
 8006654:	4652      	mov	r2, sl
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f aeaa 	beq.w	80063b6 <_printf_float+0xc2>
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	e7ec      	b.n	8006642 <_printf_float+0x34e>
 8006668:	4613      	mov	r3, r2
 800666a:	4631      	mov	r1, r6
 800666c:	4642      	mov	r2, r8
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	d1c0      	bne.n	80065f8 <_printf_float+0x304>
 8006676:	e69e      	b.n	80063b6 <_printf_float+0xc2>
 8006678:	2301      	movs	r3, #1
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	9205      	str	r2, [sp, #20]
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f ae97 	beq.w	80063b6 <_printf_float+0xc2>
 8006688:	9a05      	ldr	r2, [sp, #20]
 800668a:	f10b 0b01 	add.w	fp, fp, #1
 800668e:	e7b9      	b.n	8006604 <_printf_float+0x310>
 8006690:	ee18 3a10 	vmov	r3, s16
 8006694:	4652      	mov	r2, sl
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d1be      	bne.n	800661e <_printf_float+0x32a>
 80066a0:	e689      	b.n	80063b6 <_printf_float+0xc2>
 80066a2:	9a05      	ldr	r2, [sp, #20]
 80066a4:	464b      	mov	r3, r9
 80066a6:	4442      	add	r2, r8
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	d1c1      	bne.n	8006636 <_printf_float+0x342>
 80066b2:	e680      	b.n	80063b6 <_printf_float+0xc2>
 80066b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b6:	2a01      	cmp	r2, #1
 80066b8:	dc01      	bgt.n	80066be <_printf_float+0x3ca>
 80066ba:	07db      	lsls	r3, r3, #31
 80066bc:	d538      	bpl.n	8006730 <_printf_float+0x43c>
 80066be:	2301      	movs	r3, #1
 80066c0:	4642      	mov	r2, r8
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f ae74 	beq.w	80063b6 <_printf_float+0xc2>
 80066ce:	ee18 3a10 	vmov	r3, s16
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f ae6b 	beq.w	80063b6 <_printf_float+0xc2>
 80066e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066e4:	2200      	movs	r2, #0
 80066e6:	2300      	movs	r3, #0
 80066e8:	f7fa f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ec:	b9d8      	cbnz	r0, 8006726 <_printf_float+0x432>
 80066ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f0:	f108 0201 	add.w	r2, r8, #1
 80066f4:	3b01      	subs	r3, #1
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	d10e      	bne.n	800671e <_printf_float+0x42a>
 8006700:	e659      	b.n	80063b6 <_printf_float+0xc2>
 8006702:	2301      	movs	r3, #1
 8006704:	4652      	mov	r2, sl
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae52 	beq.w	80063b6 <_printf_float+0xc2>
 8006712:	f108 0801 	add.w	r8, r8, #1
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	3b01      	subs	r3, #1
 800671a:	4543      	cmp	r3, r8
 800671c:	dcf1      	bgt.n	8006702 <_printf_float+0x40e>
 800671e:	464b      	mov	r3, r9
 8006720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006724:	e6dc      	b.n	80064e0 <_printf_float+0x1ec>
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	f104 0a1a 	add.w	sl, r4, #26
 800672e:	e7f2      	b.n	8006716 <_printf_float+0x422>
 8006730:	2301      	movs	r3, #1
 8006732:	4642      	mov	r2, r8
 8006734:	e7df      	b.n	80066f6 <_printf_float+0x402>
 8006736:	2301      	movs	r3, #1
 8006738:	464a      	mov	r2, r9
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f ae38 	beq.w	80063b6 <_printf_float+0xc2>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800674e:	1a5b      	subs	r3, r3, r1
 8006750:	4543      	cmp	r3, r8
 8006752:	dcf0      	bgt.n	8006736 <_printf_float+0x442>
 8006754:	e6fa      	b.n	800654c <_printf_float+0x258>
 8006756:	f04f 0800 	mov.w	r8, #0
 800675a:	f104 0919 	add.w	r9, r4, #25
 800675e:	e7f4      	b.n	800674a <_printf_float+0x456>

08006760 <_printf_common>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4616      	mov	r6, r2
 8006766:	4699      	mov	r9, r3
 8006768:	688a      	ldr	r2, [r1, #8]
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	bfb8      	it	lt
 8006774:	4613      	movlt	r3, r2
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b10a      	cbz	r2, 8006786 <_printf_common+0x26>
 8006782:	3301      	adds	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0699      	lsls	r1, r3, #26
 800678a:	bf42      	ittt	mi
 800678c:	6833      	ldrmi	r3, [r6, #0]
 800678e:	3302      	addmi	r3, #2
 8006790:	6033      	strmi	r3, [r6, #0]
 8006792:	6825      	ldr	r5, [r4, #0]
 8006794:	f015 0506 	ands.w	r5, r5, #6
 8006798:	d106      	bne.n	80067a8 <_printf_common+0x48>
 800679a:	f104 0a19 	add.w	sl, r4, #25
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	6832      	ldr	r2, [r6, #0]
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dc26      	bgt.n	80067f6 <_printf_common+0x96>
 80067a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067ac:	1e13      	subs	r3, r2, #0
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	0692      	lsls	r2, r2, #26
 80067b6:	d42b      	bmi.n	8006810 <_printf_common+0xb0>
 80067b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d01e      	beq.n	8006804 <_printf_common+0xa4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	68e5      	ldr	r5, [r4, #12]
 80067ca:	6832      	ldr	r2, [r6, #0]
 80067cc:	f003 0306 	and.w	r3, r3, #6
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	bf08      	it	eq
 80067d4:	1aad      	subeq	r5, r5, r2
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	6922      	ldr	r2, [r4, #16]
 80067da:	bf0c      	ite	eq
 80067dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e0:	2500      	movne	r5, #0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfc4      	itt	gt
 80067e6:	1a9b      	subgt	r3, r3, r2
 80067e8:	18ed      	addgt	r5, r5, r3
 80067ea:	2600      	movs	r6, #0
 80067ec:	341a      	adds	r4, #26
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	d11a      	bne.n	8006828 <_printf_common+0xc8>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e008      	b.n	8006808 <_printf_common+0xa8>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	4649      	mov	r1, r9
 80067fc:	4638      	mov	r0, r7
 80067fe:	47c0      	blx	r8
 8006800:	3001      	adds	r0, #1
 8006802:	d103      	bne.n	800680c <_printf_common+0xac>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	3501      	adds	r5, #1
 800680e:	e7c6      	b.n	800679e <_printf_common+0x3e>
 8006810:	18e1      	adds	r1, r4, r3
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	2030      	movs	r0, #48	; 0x30
 8006816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800681a:	4422      	add	r2, r4
 800681c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006824:	3302      	adds	r3, #2
 8006826:	e7c7      	b.n	80067b8 <_printf_common+0x58>
 8006828:	2301      	movs	r3, #1
 800682a:	4622      	mov	r2, r4
 800682c:	4649      	mov	r1, r9
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d0e6      	beq.n	8006804 <_printf_common+0xa4>
 8006836:	3601      	adds	r6, #1
 8006838:	e7d9      	b.n	80067ee <_printf_common+0x8e>
	...

0800683c <_printf_i>:
 800683c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	7e0f      	ldrb	r7, [r1, #24]
 8006842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006844:	2f78      	cmp	r7, #120	; 0x78
 8006846:	4691      	mov	r9, r2
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	469a      	mov	sl, r3
 800684e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006852:	d807      	bhi.n	8006864 <_printf_i+0x28>
 8006854:	2f62      	cmp	r7, #98	; 0x62
 8006856:	d80a      	bhi.n	800686e <_printf_i+0x32>
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 80d8 	beq.w	8006a0e <_printf_i+0x1d2>
 800685e:	2f58      	cmp	r7, #88	; 0x58
 8006860:	f000 80a3 	beq.w	80069aa <_printf_i+0x16e>
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800686c:	e03a      	b.n	80068e4 <_printf_i+0xa8>
 800686e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006872:	2b15      	cmp	r3, #21
 8006874:	d8f6      	bhi.n	8006864 <_printf_i+0x28>
 8006876:	a101      	add	r1, pc, #4	; (adr r1, 800687c <_printf_i+0x40>)
 8006878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068e9 	.word	0x080068e9
 8006884:	08006865 	.word	0x08006865
 8006888:	08006865 	.word	0x08006865
 800688c:	08006865 	.word	0x08006865
 8006890:	08006865 	.word	0x08006865
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006865 	.word	0x08006865
 800689c:	08006865 	.word	0x08006865
 80068a0:	08006865 	.word	0x08006865
 80068a4:	08006865 	.word	0x08006865
 80068a8:	080069f5 	.word	0x080069f5
 80068ac:	08006919 	.word	0x08006919
 80068b0:	080069d7 	.word	0x080069d7
 80068b4:	08006865 	.word	0x08006865
 80068b8:	08006865 	.word	0x08006865
 80068bc:	08006a17 	.word	0x08006a17
 80068c0:	08006865 	.word	0x08006865
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006865 	.word	0x08006865
 80068cc:	08006865 	.word	0x08006865
 80068d0:	080069df 	.word	0x080069df
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	602a      	str	r2, [r5, #0]
 80068dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0a3      	b.n	8006a30 <_printf_i+0x1f4>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	6829      	ldr	r1, [r5, #0]
 80068ec:	0606      	lsls	r6, r0, #24
 80068ee:	f101 0304 	add.w	r3, r1, #4
 80068f2:	d50a      	bpl.n	800690a <_printf_i+0xce>
 80068f4:	680e      	ldr	r6, [r1, #0]
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	da03      	bge.n	8006904 <_printf_i+0xc8>
 80068fc:	232d      	movs	r3, #45	; 0x2d
 80068fe:	4276      	negs	r6, r6
 8006900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006904:	485e      	ldr	r0, [pc, #376]	; (8006a80 <_printf_i+0x244>)
 8006906:	230a      	movs	r3, #10
 8006908:	e019      	b.n	800693e <_printf_i+0x102>
 800690a:	680e      	ldr	r6, [r1, #0]
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006912:	bf18      	it	ne
 8006914:	b236      	sxthne	r6, r6
 8006916:	e7ef      	b.n	80068f8 <_printf_i+0xbc>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	6820      	ldr	r0, [r4, #0]
 800691c:	1d19      	adds	r1, r3, #4
 800691e:	6029      	str	r1, [r5, #0]
 8006920:	0601      	lsls	r1, r0, #24
 8006922:	d501      	bpl.n	8006928 <_printf_i+0xec>
 8006924:	681e      	ldr	r6, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0xf2>
 8006928:	0646      	lsls	r6, r0, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0xe8>
 800692c:	881e      	ldrh	r6, [r3, #0]
 800692e:	4854      	ldr	r0, [pc, #336]	; (8006a80 <_printf_i+0x244>)
 8006930:	2f6f      	cmp	r7, #111	; 0x6f
 8006932:	bf0c      	ite	eq
 8006934:	2308      	moveq	r3, #8
 8006936:	230a      	movne	r3, #10
 8006938:	2100      	movs	r1, #0
 800693a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800693e:	6865      	ldr	r5, [r4, #4]
 8006940:	60a5      	str	r5, [r4, #8]
 8006942:	2d00      	cmp	r5, #0
 8006944:	bfa2      	ittt	ge
 8006946:	6821      	ldrge	r1, [r4, #0]
 8006948:	f021 0104 	bicge.w	r1, r1, #4
 800694c:	6021      	strge	r1, [r4, #0]
 800694e:	b90e      	cbnz	r6, 8006954 <_printf_i+0x118>
 8006950:	2d00      	cmp	r5, #0
 8006952:	d04d      	beq.n	80069f0 <_printf_i+0x1b4>
 8006954:	4615      	mov	r5, r2
 8006956:	fbb6 f1f3 	udiv	r1, r6, r3
 800695a:	fb03 6711 	mls	r7, r3, r1, r6
 800695e:	5dc7      	ldrb	r7, [r0, r7]
 8006960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006964:	4637      	mov	r7, r6
 8006966:	42bb      	cmp	r3, r7
 8006968:	460e      	mov	r6, r1
 800696a:	d9f4      	bls.n	8006956 <_printf_i+0x11a>
 800696c:	2b08      	cmp	r3, #8
 800696e:	d10b      	bne.n	8006988 <_printf_i+0x14c>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07de      	lsls	r6, r3, #31
 8006974:	d508      	bpl.n	8006988 <_printf_i+0x14c>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	4299      	cmp	r1, r3
 800697c:	bfde      	ittt	le
 800697e:	2330      	movle	r3, #48	; 0x30
 8006980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006988:	1b52      	subs	r2, r2, r5
 800698a:	6122      	str	r2, [r4, #16]
 800698c:	f8cd a000 	str.w	sl, [sp]
 8006990:	464b      	mov	r3, r9
 8006992:	aa03      	add	r2, sp, #12
 8006994:	4621      	mov	r1, r4
 8006996:	4640      	mov	r0, r8
 8006998:	f7ff fee2 	bl	8006760 <_printf_common>
 800699c:	3001      	adds	r0, #1
 800699e:	d14c      	bne.n	8006a3a <_printf_i+0x1fe>
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295
 80069a4:	b004      	add	sp, #16
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	4835      	ldr	r0, [pc, #212]	; (8006a80 <_printf_i+0x244>)
 80069ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80069b8:	6029      	str	r1, [r5, #0]
 80069ba:	061d      	lsls	r5, r3, #24
 80069bc:	d514      	bpl.n	80069e8 <_printf_i+0x1ac>
 80069be:	07df      	lsls	r7, r3, #31
 80069c0:	bf44      	itt	mi
 80069c2:	f043 0320 	orrmi.w	r3, r3, #32
 80069c6:	6023      	strmi	r3, [r4, #0]
 80069c8:	b91e      	cbnz	r6, 80069d2 <_printf_i+0x196>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	f023 0320 	bic.w	r3, r3, #32
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	2310      	movs	r3, #16
 80069d4:	e7b0      	b.n	8006938 <_printf_i+0xfc>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f043 0320 	orr.w	r3, r3, #32
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	2378      	movs	r3, #120	; 0x78
 80069e0:	4828      	ldr	r0, [pc, #160]	; (8006a84 <_printf_i+0x248>)
 80069e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069e6:	e7e3      	b.n	80069b0 <_printf_i+0x174>
 80069e8:	0659      	lsls	r1, r3, #25
 80069ea:	bf48      	it	mi
 80069ec:	b2b6      	uxthmi	r6, r6
 80069ee:	e7e6      	b.n	80069be <_printf_i+0x182>
 80069f0:	4615      	mov	r5, r2
 80069f2:	e7bb      	b.n	800696c <_printf_i+0x130>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	6826      	ldr	r6, [r4, #0]
 80069f8:	6961      	ldr	r1, [r4, #20]
 80069fa:	1d18      	adds	r0, r3, #4
 80069fc:	6028      	str	r0, [r5, #0]
 80069fe:	0635      	lsls	r5, r6, #24
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	d501      	bpl.n	8006a08 <_printf_i+0x1cc>
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0x1d2>
 8006a08:	0670      	lsls	r0, r6, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0x1c8>
 8006a0c:	8019      	strh	r1, [r3, #0]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	4615      	mov	r5, r2
 8006a14:	e7ba      	b.n	800698c <_printf_i+0x150>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	681d      	ldr	r5, [r3, #0]
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	2100      	movs	r1, #0
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7f9 fbdc 	bl	80001e0 <memchr>
 8006a28:	b108      	cbz	r0, 8006a2e <_printf_i+0x1f2>
 8006a2a:	1b40      	subs	r0, r0, r5
 8006a2c:	6060      	str	r0, [r4, #4]
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	2300      	movs	r3, #0
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a38:	e7a8      	b.n	800698c <_printf_i+0x150>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	462a      	mov	r2, r5
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	47d0      	blx	sl
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0ab      	beq.n	80069a0 <_printf_i+0x164>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	079b      	lsls	r3, r3, #30
 8006a4c:	d413      	bmi.n	8006a76 <_printf_i+0x23a>
 8006a4e:	68e0      	ldr	r0, [r4, #12]
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	4298      	cmp	r0, r3
 8006a54:	bfb8      	it	lt
 8006a56:	4618      	movlt	r0, r3
 8006a58:	e7a4      	b.n	80069a4 <_printf_i+0x168>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4640      	mov	r0, r8
 8006a62:	47d0      	blx	sl
 8006a64:	3001      	adds	r0, #1
 8006a66:	d09b      	beq.n	80069a0 <_printf_i+0x164>
 8006a68:	3501      	adds	r5, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	9903      	ldr	r1, [sp, #12]
 8006a6e:	1a5b      	subs	r3, r3, r1
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dcf2      	bgt.n	8006a5a <_printf_i+0x21e>
 8006a74:	e7eb      	b.n	8006a4e <_printf_i+0x212>
 8006a76:	2500      	movs	r5, #0
 8006a78:	f104 0619 	add.w	r6, r4, #25
 8006a7c:	e7f5      	b.n	8006a6a <_printf_i+0x22e>
 8006a7e:	bf00      	nop
 8006a80:	0800affe 	.word	0x0800affe
 8006a84:	0800b00f 	.word	0x0800b00f

08006a88 <_scanf_float>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	4617      	mov	r7, r2
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	688b      	ldr	r3, [r1, #8]
 8006a94:	1e5a      	subs	r2, r3, #1
 8006a96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a9a:	bf83      	ittte	hi
 8006a9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006aa0:	195b      	addhi	r3, r3, r5
 8006aa2:	9302      	strhi	r3, [sp, #8]
 8006aa4:	2300      	movls	r3, #0
 8006aa6:	bf86      	itte	hi
 8006aa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006aac:	608b      	strhi	r3, [r1, #8]
 8006aae:	9302      	strls	r3, [sp, #8]
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	468b      	mov	fp, r1
 8006ab4:	2500      	movs	r5, #0
 8006ab6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006aba:	f84b 3b1c 	str.w	r3, [fp], #28
 8006abe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	465e      	mov	r6, fp
 8006ac8:	46aa      	mov	sl, r5
 8006aca:	46a9      	mov	r9, r5
 8006acc:	9501      	str	r5, [sp, #4]
 8006ace:	68a2      	ldr	r2, [r4, #8]
 8006ad0:	b152      	cbz	r2, 8006ae8 <_scanf_float+0x60>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ad8:	d864      	bhi.n	8006ba4 <_scanf_float+0x11c>
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d83c      	bhi.n	8006b58 <_scanf_float+0xd0>
 8006ade:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ae2:	b2c8      	uxtb	r0, r1
 8006ae4:	280e      	cmp	r0, #14
 8006ae6:	d93a      	bls.n	8006b5e <_scanf_float+0xd6>
 8006ae8:	f1b9 0f00 	cmp.w	r9, #0
 8006aec:	d003      	beq.n	8006af6 <_scanf_float+0x6e>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006afa:	f1ba 0f01 	cmp.w	sl, #1
 8006afe:	f200 8113 	bhi.w	8006d28 <_scanf_float+0x2a0>
 8006b02:	455e      	cmp	r6, fp
 8006b04:	f200 8105 	bhi.w	8006d12 <_scanf_float+0x28a>
 8006b08:	2501      	movs	r5, #1
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	b007      	add	sp, #28
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b16:	2a0d      	cmp	r2, #13
 8006b18:	d8e6      	bhi.n	8006ae8 <_scanf_float+0x60>
 8006b1a:	a101      	add	r1, pc, #4	; (adr r1, 8006b20 <_scanf_float+0x98>)
 8006b1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b20:	08006c5f 	.word	0x08006c5f
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006ae9 	.word	0x08006ae9
 8006b30:	08006cbf 	.word	0x08006cbf
 8006b34:	08006c97 	.word	0x08006c97
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c6d 	.word	0x08006c6d
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006ae9 	.word	0x08006ae9
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c25 	.word	0x08006c25
 8006b58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b5c:	e7db      	b.n	8006b16 <_scanf_float+0x8e>
 8006b5e:	290e      	cmp	r1, #14
 8006b60:	d8c2      	bhi.n	8006ae8 <_scanf_float+0x60>
 8006b62:	a001      	add	r0, pc, #4	; (adr r0, 8006b68 <_scanf_float+0xe0>)
 8006b64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b68:	08006c17 	.word	0x08006c17
 8006b6c:	08006ae9 	.word	0x08006ae9
 8006b70:	08006c17 	.word	0x08006c17
 8006b74:	08006cab 	.word	0x08006cab
 8006b78:	08006ae9 	.word	0x08006ae9
 8006b7c:	08006bc5 	.word	0x08006bc5
 8006b80:	08006c01 	.word	0x08006c01
 8006b84:	08006c01 	.word	0x08006c01
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006c01 	.word	0x08006c01
 8006b90:	08006c01 	.word	0x08006c01
 8006b94:	08006c01 	.word	0x08006c01
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ba6:	d809      	bhi.n	8006bbc <_scanf_float+0x134>
 8006ba8:	2b60      	cmp	r3, #96	; 0x60
 8006baa:	d8b2      	bhi.n	8006b12 <_scanf_float+0x8a>
 8006bac:	2b54      	cmp	r3, #84	; 0x54
 8006bae:	d077      	beq.n	8006ca0 <_scanf_float+0x218>
 8006bb0:	2b59      	cmp	r3, #89	; 0x59
 8006bb2:	d199      	bne.n	8006ae8 <_scanf_float+0x60>
 8006bb4:	2d07      	cmp	r5, #7
 8006bb6:	d197      	bne.n	8006ae8 <_scanf_float+0x60>
 8006bb8:	2508      	movs	r5, #8
 8006bba:	e029      	b.n	8006c10 <_scanf_float+0x188>
 8006bbc:	2b74      	cmp	r3, #116	; 0x74
 8006bbe:	d06f      	beq.n	8006ca0 <_scanf_float+0x218>
 8006bc0:	2b79      	cmp	r3, #121	; 0x79
 8006bc2:	e7f6      	b.n	8006bb2 <_scanf_float+0x12a>
 8006bc4:	6821      	ldr	r1, [r4, #0]
 8006bc6:	05c8      	lsls	r0, r1, #23
 8006bc8:	d51a      	bpl.n	8006c00 <_scanf_float+0x178>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bd0:	6021      	str	r1, [r4, #0]
 8006bd2:	f109 0901 	add.w	r9, r9, #1
 8006bd6:	b11b      	cbz	r3, 8006be0 <_scanf_float+0x158>
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	3201      	adds	r2, #1
 8006bdc:	9302      	str	r3, [sp, #8]
 8006bde:	60a2      	str	r2, [r4, #8]
 8006be0:	68a3      	ldr	r3, [r4, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	f340 8084 	ble.w	8006d00 <_scanf_float+0x278>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	e766      	b.n	8006ace <_scanf_float+0x46>
 8006c00:	eb1a 0f05 	cmn.w	sl, r5
 8006c04:	f47f af70 	bne.w	8006ae8 <_scanf_float+0x60>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	f806 3b01 	strb.w	r3, [r6], #1
 8006c14:	e7e4      	b.n	8006be0 <_scanf_float+0x158>
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	0610      	lsls	r0, r2, #24
 8006c1a:	f57f af65 	bpl.w	8006ae8 <_scanf_float+0x60>
 8006c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c22:	e7f4      	b.n	8006c0e <_scanf_float+0x186>
 8006c24:	f1ba 0f00 	cmp.w	sl, #0
 8006c28:	d10e      	bne.n	8006c48 <_scanf_float+0x1c0>
 8006c2a:	f1b9 0f00 	cmp.w	r9, #0
 8006c2e:	d10e      	bne.n	8006c4e <_scanf_float+0x1c6>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c3a:	d108      	bne.n	8006c4e <_scanf_float+0x1c6>
 8006c3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c40:	6022      	str	r2, [r4, #0]
 8006c42:	f04f 0a01 	mov.w	sl, #1
 8006c46:	e7e3      	b.n	8006c10 <_scanf_float+0x188>
 8006c48:	f1ba 0f02 	cmp.w	sl, #2
 8006c4c:	d055      	beq.n	8006cfa <_scanf_float+0x272>
 8006c4e:	2d01      	cmp	r5, #1
 8006c50:	d002      	beq.n	8006c58 <_scanf_float+0x1d0>
 8006c52:	2d04      	cmp	r5, #4
 8006c54:	f47f af48 	bne.w	8006ae8 <_scanf_float+0x60>
 8006c58:	3501      	adds	r5, #1
 8006c5a:	b2ed      	uxtb	r5, r5
 8006c5c:	e7d8      	b.n	8006c10 <_scanf_float+0x188>
 8006c5e:	f1ba 0f01 	cmp.w	sl, #1
 8006c62:	f47f af41 	bne.w	8006ae8 <_scanf_float+0x60>
 8006c66:	f04f 0a02 	mov.w	sl, #2
 8006c6a:	e7d1      	b.n	8006c10 <_scanf_float+0x188>
 8006c6c:	b97d      	cbnz	r5, 8006c8e <_scanf_float+0x206>
 8006c6e:	f1b9 0f00 	cmp.w	r9, #0
 8006c72:	f47f af3c 	bne.w	8006aee <_scanf_float+0x66>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c80:	f47f af39 	bne.w	8006af6 <_scanf_float+0x6e>
 8006c84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	2501      	movs	r5, #1
 8006c8c:	e7c0      	b.n	8006c10 <_scanf_float+0x188>
 8006c8e:	2d03      	cmp	r5, #3
 8006c90:	d0e2      	beq.n	8006c58 <_scanf_float+0x1d0>
 8006c92:	2d05      	cmp	r5, #5
 8006c94:	e7de      	b.n	8006c54 <_scanf_float+0x1cc>
 8006c96:	2d02      	cmp	r5, #2
 8006c98:	f47f af26 	bne.w	8006ae8 <_scanf_float+0x60>
 8006c9c:	2503      	movs	r5, #3
 8006c9e:	e7b7      	b.n	8006c10 <_scanf_float+0x188>
 8006ca0:	2d06      	cmp	r5, #6
 8006ca2:	f47f af21 	bne.w	8006ae8 <_scanf_float+0x60>
 8006ca6:	2507      	movs	r5, #7
 8006ca8:	e7b2      	b.n	8006c10 <_scanf_float+0x188>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	0591      	lsls	r1, r2, #22
 8006cae:	f57f af1b 	bpl.w	8006ae8 <_scanf_float+0x60>
 8006cb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cbc:	e7a8      	b.n	8006c10 <_scanf_float+0x188>
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cc8:	d006      	beq.n	8006cd8 <_scanf_float+0x250>
 8006cca:	0550      	lsls	r0, r2, #21
 8006ccc:	f57f af0c 	bpl.w	8006ae8 <_scanf_float+0x60>
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	f43f af0f 	beq.w	8006af6 <_scanf_float+0x6e>
 8006cd8:	0591      	lsls	r1, r2, #22
 8006cda:	bf58      	it	pl
 8006cdc:	9901      	ldrpl	r1, [sp, #4]
 8006cde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ce2:	bf58      	it	pl
 8006ce4:	eba9 0101 	subpl.w	r1, r9, r1
 8006ce8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cec:	bf58      	it	pl
 8006cee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	f04f 0900 	mov.w	r9, #0
 8006cf8:	e78a      	b.n	8006c10 <_scanf_float+0x188>
 8006cfa:	f04f 0a03 	mov.w	sl, #3
 8006cfe:	e787      	b.n	8006c10 <_scanf_float+0x188>
 8006d00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d04:	4639      	mov	r1, r7
 8006d06:	4640      	mov	r0, r8
 8006d08:	4798      	blx	r3
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f aedf 	beq.w	8006ace <_scanf_float+0x46>
 8006d10:	e6ea      	b.n	8006ae8 <_scanf_float+0x60>
 8006d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4798      	blx	r3
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	e6ec      	b.n	8006b02 <_scanf_float+0x7a>
 8006d28:	1e6b      	subs	r3, r5, #1
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d825      	bhi.n	8006d7a <_scanf_float+0x2f2>
 8006d2e:	2d02      	cmp	r5, #2
 8006d30:	d836      	bhi.n	8006da0 <_scanf_float+0x318>
 8006d32:	455e      	cmp	r6, fp
 8006d34:	f67f aee8 	bls.w	8006b08 <_scanf_float+0x80>
 8006d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d40:	463a      	mov	r2, r7
 8006d42:	4640      	mov	r0, r8
 8006d44:	4798      	blx	r3
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	e7f1      	b.n	8006d32 <_scanf_float+0x2aa>
 8006d4e:	9802      	ldr	r0, [sp, #8]
 8006d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4798      	blx	r3
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d6a:	fa5f fa8a 	uxtb.w	sl, sl
 8006d6e:	f1ba 0f02 	cmp.w	sl, #2
 8006d72:	d1ec      	bne.n	8006d4e <_scanf_float+0x2c6>
 8006d74:	3d03      	subs	r5, #3
 8006d76:	b2ed      	uxtb	r5, r5
 8006d78:	1b76      	subs	r6, r6, r5
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	05da      	lsls	r2, r3, #23
 8006d7e:	d52f      	bpl.n	8006de0 <_scanf_float+0x358>
 8006d80:	055b      	lsls	r3, r3, #21
 8006d82:	d510      	bpl.n	8006da6 <_scanf_float+0x31e>
 8006d84:	455e      	cmp	r6, fp
 8006d86:	f67f aebf 	bls.w	8006b08 <_scanf_float+0x80>
 8006d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d92:	463a      	mov	r2, r7
 8006d94:	4640      	mov	r0, r8
 8006d96:	4798      	blx	r3
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	e7f1      	b.n	8006d84 <_scanf_float+0x2fc>
 8006da0:	46aa      	mov	sl, r5
 8006da2:	9602      	str	r6, [sp, #8]
 8006da4:	e7df      	b.n	8006d66 <_scanf_float+0x2de>
 8006da6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	2965      	cmp	r1, #101	; 0x65
 8006dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8006db2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	d00c      	beq.n	8006dd4 <_scanf_float+0x34c>
 8006dba:	2945      	cmp	r1, #69	; 0x45
 8006dbc:	d00a      	beq.n	8006dd4 <_scanf_float+0x34c>
 8006dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4798      	blx	r3
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	1eb5      	subs	r5, r6, #2
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dd8:	463a      	mov	r2, r7
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4798      	blx	r3
 8006dde:	462e      	mov	r6, r5
 8006de0:	6825      	ldr	r5, [r4, #0]
 8006de2:	f015 0510 	ands.w	r5, r5, #16
 8006de6:	d159      	bne.n	8006e9c <_scanf_float+0x414>
 8006de8:	7035      	strb	r5, [r6, #0]
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df4:	d11b      	bne.n	8006e2e <_scanf_float+0x3a6>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	454b      	cmp	r3, r9
 8006dfa:	eba3 0209 	sub.w	r2, r3, r9
 8006dfe:	d123      	bne.n	8006e48 <_scanf_float+0x3c0>
 8006e00:	2200      	movs	r2, #0
 8006e02:	4659      	mov	r1, fp
 8006e04:	4640      	mov	r0, r8
 8006e06:	f000 ff7d 	bl	8007d04 <_strtod_r>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	f012 0f02 	tst.w	r2, #2
 8006e12:	ec57 6b10 	vmov	r6, r7, d0
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	d021      	beq.n	8006e5e <_scanf_float+0x3d6>
 8006e1a:	9903      	ldr	r1, [sp, #12]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	600a      	str	r2, [r1, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	e9c3 6700 	strd	r6, r7, [r3]
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	60e3      	str	r3, [r4, #12]
 8006e2c:	e66d      	b.n	8006b0a <_scanf_float+0x82>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0e5      	beq.n	8006e00 <_scanf_float+0x378>
 8006e34:	9905      	ldr	r1, [sp, #20]
 8006e36:	230a      	movs	r3, #10
 8006e38:	462a      	mov	r2, r5
 8006e3a:	3101      	adds	r1, #1
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	f000 ffe9 	bl	8007e14 <_strtol_r>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	9e05      	ldr	r6, [sp, #20]
 8006e46:	1ac2      	subs	r2, r0, r3
 8006e48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e4c:	429e      	cmp	r6, r3
 8006e4e:	bf28      	it	cs
 8006e50:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e54:	4912      	ldr	r1, [pc, #72]	; (8006ea0 <_scanf_float+0x418>)
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f8ba 	bl	8006fd0 <siprintf>
 8006e5c:	e7d0      	b.n	8006e00 <_scanf_float+0x378>
 8006e5e:	9903      	ldr	r1, [sp, #12]
 8006e60:	f012 0f04 	tst.w	r2, #4
 8006e64:	f103 0204 	add.w	r2, r3, #4
 8006e68:	600a      	str	r2, [r1, #0]
 8006e6a:	d1d9      	bne.n	8006e20 <_scanf_float+0x398>
 8006e6c:	f8d3 8000 	ldr.w	r8, [r3]
 8006e70:	ee10 2a10 	vmov	r2, s0
 8006e74:	ee10 0a10 	vmov	r0, s0
 8006e78:	463b      	mov	r3, r7
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fe56 	bl	8000b2c <__aeabi_dcmpun>
 8006e80:	b128      	cbz	r0, 8006e8e <_scanf_float+0x406>
 8006e82:	4808      	ldr	r0, [pc, #32]	; (8006ea4 <_scanf_float+0x41c>)
 8006e84:	f000 f89e 	bl	8006fc4 <nanf>
 8006e88:	ed88 0a00 	vstr	s0, [r8]
 8006e8c:	e7cb      	b.n	8006e26 <_scanf_float+0x39e>
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 fea9 	bl	8000be8 <__aeabi_d2f>
 8006e96:	f8c8 0000 	str.w	r0, [r8]
 8006e9a:	e7c4      	b.n	8006e26 <_scanf_float+0x39e>
 8006e9c:	2500      	movs	r5, #0
 8006e9e:	e634      	b.n	8006b0a <_scanf_float+0x82>
 8006ea0:	0800b020 	.word	0x0800b020
 8006ea4:	0800b490 	.word	0x0800b490

08006ea8 <iprintf>:
 8006ea8:	b40f      	push	{r0, r1, r2, r3}
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <iprintf+0x2c>)
 8006eac:	b513      	push	{r0, r1, r4, lr}
 8006eae:	681c      	ldr	r4, [r3, #0]
 8006eb0:	b124      	cbz	r4, 8006ebc <iprintf+0x14>
 8006eb2:	69a3      	ldr	r3, [r4, #24]
 8006eb4:	b913      	cbnz	r3, 8006ebc <iprintf+0x14>
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f002 f826 	bl	8008f08 <__sinit>
 8006ebc:	ab05      	add	r3, sp, #20
 8006ebe:	9a04      	ldr	r2, [sp, #16]
 8006ec0:	68a1      	ldr	r1, [r4, #8]
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f003 fc11 	bl	800a6ec <_vfiprintf_r>
 8006eca:	b002      	add	sp, #8
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	b004      	add	sp, #16
 8006ed2:	4770      	bx	lr
 8006ed4:	20000018 	.word	0x20000018

08006ed8 <_puts_r>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	460e      	mov	r6, r1
 8006edc:	4605      	mov	r5, r0
 8006ede:	b118      	cbz	r0, 8006ee8 <_puts_r+0x10>
 8006ee0:	6983      	ldr	r3, [r0, #24]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <_puts_r+0x10>
 8006ee4:	f002 f810 	bl	8008f08 <__sinit>
 8006ee8:	69ab      	ldr	r3, [r5, #24]
 8006eea:	68ac      	ldr	r4, [r5, #8]
 8006eec:	b913      	cbnz	r3, 8006ef4 <_puts_r+0x1c>
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f002 f80a 	bl	8008f08 <__sinit>
 8006ef4:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <_puts_r+0xd0>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d120      	bne.n	8006f3c <_puts_r+0x64>
 8006efa:	686c      	ldr	r4, [r5, #4]
 8006efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efe:	07db      	lsls	r3, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_puts_r+0x36>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	0598      	lsls	r0, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_puts_r+0x36>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f002 fc0e 	bl	800972a <__retarget_lock_acquire_recursive>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	0719      	lsls	r1, r3, #28
 8006f12:	d51d      	bpl.n	8006f50 <_puts_r+0x78>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	b1db      	cbz	r3, 8006f50 <_puts_r+0x78>
 8006f18:	3e01      	subs	r6, #1
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f20:	3b01      	subs	r3, #1
 8006f22:	60a3      	str	r3, [r4, #8]
 8006f24:	bb39      	cbnz	r1, 8006f76 <_puts_r+0x9e>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da38      	bge.n	8006f9c <_puts_r+0xc4>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	210a      	movs	r1, #10
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 ff72 	bl	8007e18 <__swbuf_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d011      	beq.n	8006f5c <_puts_r+0x84>
 8006f38:	250a      	movs	r5, #10
 8006f3a:	e011      	b.n	8006f60 <_puts_r+0x88>
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <_puts_r+0xd4>)
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	d101      	bne.n	8006f46 <_puts_r+0x6e>
 8006f42:	68ac      	ldr	r4, [r5, #8]
 8006f44:	e7da      	b.n	8006efc <_puts_r+0x24>
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <_puts_r+0xd8>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	bf08      	it	eq
 8006f4c:	68ec      	ldreq	r4, [r5, #12]
 8006f4e:	e7d5      	b.n	8006efc <_puts_r+0x24>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 ffc4 	bl	8007ee0 <__swsetup_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0dd      	beq.n	8006f18 <_puts_r+0x40>
 8006f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f62:	07da      	lsls	r2, r3, #31
 8006f64:	d405      	bmi.n	8006f72 <_puts_r+0x9a>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	059b      	lsls	r3, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_puts_r+0x9a>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6e:	f002 fbdd 	bl	800972c <__retarget_lock_release_recursive>
 8006f72:	4628      	mov	r0, r5
 8006f74:	bd70      	pop	{r4, r5, r6, pc}
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da04      	bge.n	8006f84 <_puts_r+0xac>
 8006f7a:	69a2      	ldr	r2, [r4, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	dc06      	bgt.n	8006f8e <_puts_r+0xb6>
 8006f80:	290a      	cmp	r1, #10
 8006f82:	d004      	beq.n	8006f8e <_puts_r+0xb6>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	6022      	str	r2, [r4, #0]
 8006f8a:	7019      	strb	r1, [r3, #0]
 8006f8c:	e7c5      	b.n	8006f1a <_puts_r+0x42>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 ff41 	bl	8007e18 <__swbuf_r>
 8006f96:	3001      	adds	r0, #1
 8006f98:	d1bf      	bne.n	8006f1a <_puts_r+0x42>
 8006f9a:	e7df      	b.n	8006f5c <_puts_r+0x84>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	250a      	movs	r5, #10
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	701d      	strb	r5, [r3, #0]
 8006fa6:	e7db      	b.n	8006f60 <_puts_r+0x88>
 8006fa8:	0800b22c 	.word	0x0800b22c
 8006fac:	0800b24c 	.word	0x0800b24c
 8006fb0:	0800b20c 	.word	0x0800b20c

08006fb4 <puts>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <puts+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bf8d 	b.w	8006ed8 <_puts_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000018 	.word	0x20000018

08006fc4 <nanf>:
 8006fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fcc <nanf+0x8>
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	7fc00000 	.word	0x7fc00000

08006fd0 <siprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b500      	push	{lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fe0:	4809      	ldr	r0, [pc, #36]	; (8007008 <siprintf+0x38>)
 8006fe2:	9107      	str	r1, [sp, #28]
 8006fe4:	9104      	str	r1, [sp, #16]
 8006fe6:	4909      	ldr	r1, [pc, #36]	; (800700c <siprintf+0x3c>)
 8006fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	a902      	add	r1, sp, #8
 8006ff4:	f003 fa50 	bl	800a498 <_svfiprintf_r>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	b01c      	add	sp, #112	; 0x70
 8007000:	f85d eb04 	ldr.w	lr, [sp], #4
 8007004:	b003      	add	sp, #12
 8007006:	4770      	bx	lr
 8007008:	20000018 	.word	0x20000018
 800700c:	ffff0208 	.word	0xffff0208

08007010 <__sread>:
 8007010:	b510      	push	{r4, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f003 fc98 	bl	800a94c <_read_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	bfab      	itete	ge
 8007020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007022:	89a3      	ldrhlt	r3, [r4, #12]
 8007024:	181b      	addge	r3, r3, r0
 8007026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800702a:	bfac      	ite	ge
 800702c:	6563      	strge	r3, [r4, #84]	; 0x54
 800702e:	81a3      	strhlt	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__swrite>:
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	461f      	mov	r7, r3
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	05db      	lsls	r3, r3, #23
 800703c:	4605      	mov	r5, r0
 800703e:	460c      	mov	r4, r1
 8007040:	4616      	mov	r6, r2
 8007042:	d505      	bpl.n	8007050 <__swrite+0x1e>
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	2302      	movs	r3, #2
 800704a:	2200      	movs	r2, #0
 800704c:	f002 fb70 	bl	8009730 <_lseek_r>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	4628      	mov	r0, r5
 8007062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	f000 bf29 	b.w	8007ebc <_write_r>

0800706a <__sseek>:
 800706a:	b510      	push	{r4, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007072:	f002 fb5d 	bl	8009730 <_lseek_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	bf15      	itete	ne
 800707c:	6560      	strne	r0, [r4, #84]	; 0x54
 800707e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strheq	r3, [r4, #12]
 8007088:	bf18      	it	ne
 800708a:	81a3      	strhne	r3, [r4, #12]
 800708c:	bd10      	pop	{r4, pc}

0800708e <__sclose>:
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 bf93 	b.w	8007fbc <_close_r>

08007096 <strncmp>:
 8007096:	b510      	push	{r4, lr}
 8007098:	b17a      	cbz	r2, 80070ba <strncmp+0x24>
 800709a:	4603      	mov	r3, r0
 800709c:	3901      	subs	r1, #1
 800709e:	1884      	adds	r4, r0, r2
 80070a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070a8:	4290      	cmp	r0, r2
 80070aa:	d101      	bne.n	80070b0 <strncmp+0x1a>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d101      	bne.n	80070b4 <strncmp+0x1e>
 80070b0:	1a80      	subs	r0, r0, r2
 80070b2:	bd10      	pop	{r4, pc}
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1f3      	bne.n	80070a0 <strncmp+0xa>
 80070b8:	e7fa      	b.n	80070b0 <strncmp+0x1a>
 80070ba:	4610      	mov	r0, r2
 80070bc:	e7f9      	b.n	80070b2 <strncmp+0x1c>

080070be <sulp>:
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	ec45 4b10 	vmov	d0, r4, r5
 80070c8:	4616      	mov	r6, r2
 80070ca:	f002 ff43 	bl	8009f54 <__ulp>
 80070ce:	ec51 0b10 	vmov	r0, r1, d0
 80070d2:	b17e      	cbz	r6, 80070f4 <sulp+0x36>
 80070d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dd09      	ble.n	80070f4 <sulp+0x36>
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070e6:	2400      	movs	r4, #0
 80070e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070ec:	4622      	mov	r2, r4
 80070ee:	462b      	mov	r3, r5
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070f8 <_strtod_l>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b02 	vpush	{d8}
 8007100:	b09d      	sub	sp, #116	; 0x74
 8007102:	461f      	mov	r7, r3
 8007104:	2300      	movs	r3, #0
 8007106:	9318      	str	r3, [sp, #96]	; 0x60
 8007108:	4ba2      	ldr	r3, [pc, #648]	; (8007394 <_strtod_l+0x29c>)
 800710a:	9213      	str	r2, [sp, #76]	; 0x4c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	4604      	mov	r4, r0
 8007112:	4618      	mov	r0, r3
 8007114:	4688      	mov	r8, r1
 8007116:	f7f9 f85b 	bl	80001d0 <strlen>
 800711a:	f04f 0a00 	mov.w	sl, #0
 800711e:	4605      	mov	r5, r0
 8007120:	f04f 0b00 	mov.w	fp, #0
 8007124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	2a2b      	cmp	r2, #43	; 0x2b
 800712e:	d04e      	beq.n	80071ce <_strtod_l+0xd6>
 8007130:	d83b      	bhi.n	80071aa <_strtod_l+0xb2>
 8007132:	2a0d      	cmp	r2, #13
 8007134:	d834      	bhi.n	80071a0 <_strtod_l+0xa8>
 8007136:	2a08      	cmp	r2, #8
 8007138:	d834      	bhi.n	80071a4 <_strtod_l+0xac>
 800713a:	2a00      	cmp	r2, #0
 800713c:	d03e      	beq.n	80071bc <_strtod_l+0xc4>
 800713e:	2300      	movs	r3, #0
 8007140:	930a      	str	r3, [sp, #40]	; 0x28
 8007142:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007144:	7833      	ldrb	r3, [r6, #0]
 8007146:	2b30      	cmp	r3, #48	; 0x30
 8007148:	f040 80b0 	bne.w	80072ac <_strtod_l+0x1b4>
 800714c:	7873      	ldrb	r3, [r6, #1]
 800714e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007152:	2b58      	cmp	r3, #88	; 0x58
 8007154:	d168      	bne.n	8007228 <_strtod_l+0x130>
 8007156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	ab18      	add	r3, sp, #96	; 0x60
 800715c:	9702      	str	r7, [sp, #8]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4a8d      	ldr	r2, [pc, #564]	; (8007398 <_strtod_l+0x2a0>)
 8007162:	ab19      	add	r3, sp, #100	; 0x64
 8007164:	a917      	add	r1, sp, #92	; 0x5c
 8007166:	4620      	mov	r0, r4
 8007168:	f001 ffd2 	bl	8009110 <__gethex>
 800716c:	f010 0707 	ands.w	r7, r0, #7
 8007170:	4605      	mov	r5, r0
 8007172:	d005      	beq.n	8007180 <_strtod_l+0x88>
 8007174:	2f06      	cmp	r7, #6
 8007176:	d12c      	bne.n	80071d2 <_strtod_l+0xda>
 8007178:	3601      	adds	r6, #1
 800717a:	2300      	movs	r3, #0
 800717c:	9617      	str	r6, [sp, #92]	; 0x5c
 800717e:	930a      	str	r3, [sp, #40]	; 0x28
 8007180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 8590 	bne.w	8007ca8 <_strtod_l+0xbb0>
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	b1eb      	cbz	r3, 80071c8 <_strtod_l+0xd0>
 800718c:	4652      	mov	r2, sl
 800718e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007192:	ec43 2b10 	vmov	d0, r2, r3
 8007196:	b01d      	add	sp, #116	; 0x74
 8007198:	ecbd 8b02 	vpop	{d8}
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	2a20      	cmp	r2, #32
 80071a2:	d1cc      	bne.n	800713e <_strtod_l+0x46>
 80071a4:	3301      	adds	r3, #1
 80071a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071a8:	e7be      	b.n	8007128 <_strtod_l+0x30>
 80071aa:	2a2d      	cmp	r2, #45	; 0x2d
 80071ac:	d1c7      	bne.n	800713e <_strtod_l+0x46>
 80071ae:	2201      	movs	r2, #1
 80071b0:	920a      	str	r2, [sp, #40]	; 0x28
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1c2      	bne.n	8007142 <_strtod_l+0x4a>
 80071bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 856e 	bne.w	8007ca4 <_strtod_l+0xbac>
 80071c8:	4652      	mov	r2, sl
 80071ca:	465b      	mov	r3, fp
 80071cc:	e7e1      	b.n	8007192 <_strtod_l+0x9a>
 80071ce:	2200      	movs	r2, #0
 80071d0:	e7ee      	b.n	80071b0 <_strtod_l+0xb8>
 80071d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071d4:	b13a      	cbz	r2, 80071e6 <_strtod_l+0xee>
 80071d6:	2135      	movs	r1, #53	; 0x35
 80071d8:	a81a      	add	r0, sp, #104	; 0x68
 80071da:	f002 ffc6 	bl	800a16a <__copybits>
 80071de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071e0:	4620      	mov	r0, r4
 80071e2:	f002 fb85 	bl	80098f0 <_Bfree>
 80071e6:	3f01      	subs	r7, #1
 80071e8:	2f04      	cmp	r7, #4
 80071ea:	d806      	bhi.n	80071fa <_strtod_l+0x102>
 80071ec:	e8df f007 	tbb	[pc, r7]
 80071f0:	1714030a 	.word	0x1714030a
 80071f4:	0a          	.byte	0x0a
 80071f5:	00          	.byte	0x00
 80071f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071fa:	0728      	lsls	r0, r5, #28
 80071fc:	d5c0      	bpl.n	8007180 <_strtod_l+0x88>
 80071fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007202:	e7bd      	b.n	8007180 <_strtod_l+0x88>
 8007204:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800720a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800720e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007212:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007216:	e7f0      	b.n	80071fa <_strtod_l+0x102>
 8007218:	f8df b180 	ldr.w	fp, [pc, #384]	; 800739c <_strtod_l+0x2a4>
 800721c:	e7ed      	b.n	80071fa <_strtod_l+0x102>
 800721e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007222:	f04f 3aff 	mov.w	sl, #4294967295
 8007226:	e7e8      	b.n	80071fa <_strtod_l+0x102>
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	9217      	str	r2, [sp, #92]	; 0x5c
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b30      	cmp	r3, #48	; 0x30
 8007232:	d0f9      	beq.n	8007228 <_strtod_l+0x130>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0a3      	beq.n	8007180 <_strtod_l+0x88>
 8007238:	2301      	movs	r3, #1
 800723a:	f04f 0900 	mov.w	r9, #0
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	f8cd 901c 	str.w	r9, [sp, #28]
 8007248:	464f      	mov	r7, r9
 800724a:	220a      	movs	r2, #10
 800724c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800724e:	7806      	ldrb	r6, [r0, #0]
 8007250:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007254:	b2d9      	uxtb	r1, r3
 8007256:	2909      	cmp	r1, #9
 8007258:	d92a      	bls.n	80072b0 <_strtod_l+0x1b8>
 800725a:	9905      	ldr	r1, [sp, #20]
 800725c:	462a      	mov	r2, r5
 800725e:	f7ff ff1a 	bl	8007096 <strncmp>
 8007262:	b398      	cbz	r0, 80072cc <_strtod_l+0x1d4>
 8007264:	2000      	movs	r0, #0
 8007266:	4632      	mov	r2, r6
 8007268:	463d      	mov	r5, r7
 800726a:	9005      	str	r0, [sp, #20]
 800726c:	4603      	mov	r3, r0
 800726e:	2a65      	cmp	r2, #101	; 0x65
 8007270:	d001      	beq.n	8007276 <_strtod_l+0x17e>
 8007272:	2a45      	cmp	r2, #69	; 0x45
 8007274:	d118      	bne.n	80072a8 <_strtod_l+0x1b0>
 8007276:	b91d      	cbnz	r5, 8007280 <_strtod_l+0x188>
 8007278:	9a04      	ldr	r2, [sp, #16]
 800727a:	4302      	orrs	r2, r0
 800727c:	d09e      	beq.n	80071bc <_strtod_l+0xc4>
 800727e:	2500      	movs	r5, #0
 8007280:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007284:	f108 0201 	add.w	r2, r8, #1
 8007288:	9217      	str	r2, [sp, #92]	; 0x5c
 800728a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800728e:	2a2b      	cmp	r2, #43	; 0x2b
 8007290:	d075      	beq.n	800737e <_strtod_l+0x286>
 8007292:	2a2d      	cmp	r2, #45	; 0x2d
 8007294:	d07b      	beq.n	800738e <_strtod_l+0x296>
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800729e:	2909      	cmp	r1, #9
 80072a0:	f240 8082 	bls.w	80073a8 <_strtod_l+0x2b0>
 80072a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072a8:	2600      	movs	r6, #0
 80072aa:	e09d      	b.n	80073e8 <_strtod_l+0x2f0>
 80072ac:	2300      	movs	r3, #0
 80072ae:	e7c4      	b.n	800723a <_strtod_l+0x142>
 80072b0:	2f08      	cmp	r7, #8
 80072b2:	bfd8      	it	le
 80072b4:	9907      	ldrle	r1, [sp, #28]
 80072b6:	f100 0001 	add.w	r0, r0, #1
 80072ba:	bfda      	itte	le
 80072bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80072c0:	9307      	strle	r3, [sp, #28]
 80072c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072c6:	3701      	adds	r7, #1
 80072c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072ca:	e7bf      	b.n	800724c <_strtod_l+0x154>
 80072cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ce:	195a      	adds	r2, r3, r5
 80072d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d2:	5d5a      	ldrb	r2, [r3, r5]
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	d037      	beq.n	8007348 <_strtod_l+0x250>
 80072d8:	9005      	str	r0, [sp, #20]
 80072da:	463d      	mov	r5, r7
 80072dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072e0:	2b09      	cmp	r3, #9
 80072e2:	d912      	bls.n	800730a <_strtod_l+0x212>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e7c2      	b.n	800726e <_strtod_l+0x176>
 80072e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ee:	785a      	ldrb	r2, [r3, #1]
 80072f0:	3001      	adds	r0, #1
 80072f2:	2a30      	cmp	r2, #48	; 0x30
 80072f4:	d0f8      	beq.n	80072e8 <_strtod_l+0x1f0>
 80072f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	f200 84d9 	bhi.w	8007cb2 <_strtod_l+0xbba>
 8007300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007302:	9005      	str	r0, [sp, #20]
 8007304:	2000      	movs	r0, #0
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	4605      	mov	r5, r0
 800730a:	3a30      	subs	r2, #48	; 0x30
 800730c:	f100 0301 	add.w	r3, r0, #1
 8007310:	d014      	beq.n	800733c <_strtod_l+0x244>
 8007312:	9905      	ldr	r1, [sp, #20]
 8007314:	4419      	add	r1, r3
 8007316:	9105      	str	r1, [sp, #20]
 8007318:	462b      	mov	r3, r5
 800731a:	eb00 0e05 	add.w	lr, r0, r5
 800731e:	210a      	movs	r1, #10
 8007320:	4573      	cmp	r3, lr
 8007322:	d113      	bne.n	800734c <_strtod_l+0x254>
 8007324:	182b      	adds	r3, r5, r0
 8007326:	2b08      	cmp	r3, #8
 8007328:	f105 0501 	add.w	r5, r5, #1
 800732c:	4405      	add	r5, r0
 800732e:	dc1c      	bgt.n	800736a <_strtod_l+0x272>
 8007330:	9907      	ldr	r1, [sp, #28]
 8007332:	230a      	movs	r3, #10
 8007334:	fb03 2301 	mla	r3, r3, r1, r2
 8007338:	9307      	str	r3, [sp, #28]
 800733a:	2300      	movs	r3, #0
 800733c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800733e:	1c51      	adds	r1, r2, #1
 8007340:	9117      	str	r1, [sp, #92]	; 0x5c
 8007342:	7852      	ldrb	r2, [r2, #1]
 8007344:	4618      	mov	r0, r3
 8007346:	e7c9      	b.n	80072dc <_strtod_l+0x1e4>
 8007348:	4638      	mov	r0, r7
 800734a:	e7d2      	b.n	80072f2 <_strtod_l+0x1fa>
 800734c:	2b08      	cmp	r3, #8
 800734e:	dc04      	bgt.n	800735a <_strtod_l+0x262>
 8007350:	9e07      	ldr	r6, [sp, #28]
 8007352:	434e      	muls	r6, r1
 8007354:	9607      	str	r6, [sp, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	e7e2      	b.n	8007320 <_strtod_l+0x228>
 800735a:	f103 0c01 	add.w	ip, r3, #1
 800735e:	f1bc 0f10 	cmp.w	ip, #16
 8007362:	bfd8      	it	le
 8007364:	fb01 f909 	mulle.w	r9, r1, r9
 8007368:	e7f5      	b.n	8007356 <_strtod_l+0x25e>
 800736a:	2d10      	cmp	r5, #16
 800736c:	bfdc      	itt	le
 800736e:	230a      	movle	r3, #10
 8007370:	fb03 2909 	mlale	r9, r3, r9, r2
 8007374:	e7e1      	b.n	800733a <_strtod_l+0x242>
 8007376:	2300      	movs	r3, #0
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	2301      	movs	r3, #1
 800737c:	e77c      	b.n	8007278 <_strtod_l+0x180>
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	f108 0202 	add.w	r2, r8, #2
 8007386:	9217      	str	r2, [sp, #92]	; 0x5c
 8007388:	f898 2002 	ldrb.w	r2, [r8, #2]
 800738c:	e785      	b.n	800729a <_strtod_l+0x1a2>
 800738e:	f04f 0c01 	mov.w	ip, #1
 8007392:	e7f6      	b.n	8007382 <_strtod_l+0x28a>
 8007394:	0800b2d4 	.word	0x0800b2d4
 8007398:	0800b028 	.word	0x0800b028
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	2a30      	cmp	r2, #48	; 0x30
 80073aa:	d0f9      	beq.n	80073a0 <_strtod_l+0x2a8>
 80073ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073b0:	2908      	cmp	r1, #8
 80073b2:	f63f af79 	bhi.w	80072a8 <_strtod_l+0x1b0>
 80073b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073bc:	9206      	str	r2, [sp, #24]
 80073be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073c0:	1c51      	adds	r1, r2, #1
 80073c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80073c4:	7852      	ldrb	r2, [r2, #1]
 80073c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073ca:	2e09      	cmp	r6, #9
 80073cc:	d937      	bls.n	800743e <_strtod_l+0x346>
 80073ce:	9e06      	ldr	r6, [sp, #24]
 80073d0:	1b89      	subs	r1, r1, r6
 80073d2:	2908      	cmp	r1, #8
 80073d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073d8:	dc02      	bgt.n	80073e0 <_strtod_l+0x2e8>
 80073da:	4576      	cmp	r6, lr
 80073dc:	bfa8      	it	ge
 80073de:	4676      	movge	r6, lr
 80073e0:	f1bc 0f00 	cmp.w	ip, #0
 80073e4:	d000      	beq.n	80073e8 <_strtod_l+0x2f0>
 80073e6:	4276      	negs	r6, r6
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	d14d      	bne.n	8007488 <_strtod_l+0x390>
 80073ec:	9904      	ldr	r1, [sp, #16]
 80073ee:	4301      	orrs	r1, r0
 80073f0:	f47f aec6 	bne.w	8007180 <_strtod_l+0x88>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f47f aee1 	bne.w	80071bc <_strtod_l+0xc4>
 80073fa:	2a69      	cmp	r2, #105	; 0x69
 80073fc:	d027      	beq.n	800744e <_strtod_l+0x356>
 80073fe:	dc24      	bgt.n	800744a <_strtod_l+0x352>
 8007400:	2a49      	cmp	r2, #73	; 0x49
 8007402:	d024      	beq.n	800744e <_strtod_l+0x356>
 8007404:	2a4e      	cmp	r2, #78	; 0x4e
 8007406:	f47f aed9 	bne.w	80071bc <_strtod_l+0xc4>
 800740a:	499f      	ldr	r1, [pc, #636]	; (8007688 <_strtod_l+0x590>)
 800740c:	a817      	add	r0, sp, #92	; 0x5c
 800740e:	f002 f8d7 	bl	80095c0 <__match>
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f aed2 	beq.w	80071bc <_strtod_l+0xc4>
 8007418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b28      	cmp	r3, #40	; 0x28
 800741e:	d12d      	bne.n	800747c <_strtod_l+0x384>
 8007420:	499a      	ldr	r1, [pc, #616]	; (800768c <_strtod_l+0x594>)
 8007422:	aa1a      	add	r2, sp, #104	; 0x68
 8007424:	a817      	add	r0, sp, #92	; 0x5c
 8007426:	f002 f8df 	bl	80095e8 <__hexnan>
 800742a:	2805      	cmp	r0, #5
 800742c:	d126      	bne.n	800747c <_strtod_l+0x384>
 800742e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007430:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007434:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007438:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800743c:	e6a0      	b.n	8007180 <_strtod_l+0x88>
 800743e:	210a      	movs	r1, #10
 8007440:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007444:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007448:	e7b9      	b.n	80073be <_strtod_l+0x2c6>
 800744a:	2a6e      	cmp	r2, #110	; 0x6e
 800744c:	e7db      	b.n	8007406 <_strtod_l+0x30e>
 800744e:	4990      	ldr	r1, [pc, #576]	; (8007690 <_strtod_l+0x598>)
 8007450:	a817      	add	r0, sp, #92	; 0x5c
 8007452:	f002 f8b5 	bl	80095c0 <__match>
 8007456:	2800      	cmp	r0, #0
 8007458:	f43f aeb0 	beq.w	80071bc <_strtod_l+0xc4>
 800745c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800745e:	498d      	ldr	r1, [pc, #564]	; (8007694 <_strtod_l+0x59c>)
 8007460:	3b01      	subs	r3, #1
 8007462:	a817      	add	r0, sp, #92	; 0x5c
 8007464:	9317      	str	r3, [sp, #92]	; 0x5c
 8007466:	f002 f8ab 	bl	80095c0 <__match>
 800746a:	b910      	cbnz	r0, 8007472 <_strtod_l+0x37a>
 800746c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800746e:	3301      	adds	r3, #1
 8007470:	9317      	str	r3, [sp, #92]	; 0x5c
 8007472:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076a4 <_strtod_l+0x5ac>
 8007476:	f04f 0a00 	mov.w	sl, #0
 800747a:	e681      	b.n	8007180 <_strtod_l+0x88>
 800747c:	4886      	ldr	r0, [pc, #536]	; (8007698 <_strtod_l+0x5a0>)
 800747e:	f003 fa77 	bl	800a970 <nan>
 8007482:	ec5b ab10 	vmov	sl, fp, d0
 8007486:	e67b      	b.n	8007180 <_strtod_l+0x88>
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	9807      	ldr	r0, [sp, #28]
 800748c:	1af3      	subs	r3, r6, r3
 800748e:	2f00      	cmp	r7, #0
 8007490:	bf08      	it	eq
 8007492:	462f      	moveq	r7, r5
 8007494:	2d10      	cmp	r5, #16
 8007496:	9306      	str	r3, [sp, #24]
 8007498:	46a8      	mov	r8, r5
 800749a:	bfa8      	it	ge
 800749c:	f04f 0810 	movge.w	r8, #16
 80074a0:	f7f9 f830 	bl	8000504 <__aeabi_ui2d>
 80074a4:	2d09      	cmp	r5, #9
 80074a6:	4682      	mov	sl, r0
 80074a8:	468b      	mov	fp, r1
 80074aa:	dd13      	ble.n	80074d4 <_strtod_l+0x3dc>
 80074ac:	4b7b      	ldr	r3, [pc, #492]	; (800769c <_strtod_l+0x5a4>)
 80074ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074b6:	f7f9 f89f 	bl	80005f8 <__aeabi_dmul>
 80074ba:	4682      	mov	sl, r0
 80074bc:	4648      	mov	r0, r9
 80074be:	468b      	mov	fp, r1
 80074c0:	f7f9 f820 	bl	8000504 <__aeabi_ui2d>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4650      	mov	r0, sl
 80074ca:	4659      	mov	r1, fp
 80074cc:	f7f8 fede 	bl	800028c <__adddf3>
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	2d0f      	cmp	r5, #15
 80074d6:	dc38      	bgt.n	800754a <_strtod_l+0x452>
 80074d8:	9b06      	ldr	r3, [sp, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f43f ae50 	beq.w	8007180 <_strtod_l+0x88>
 80074e0:	dd24      	ble.n	800752c <_strtod_l+0x434>
 80074e2:	2b16      	cmp	r3, #22
 80074e4:	dc0b      	bgt.n	80074fe <_strtod_l+0x406>
 80074e6:	496d      	ldr	r1, [pc, #436]	; (800769c <_strtod_l+0x5a4>)
 80074e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	4652      	mov	r2, sl
 80074f2:	465b      	mov	r3, fp
 80074f4:	f7f9 f880 	bl	80005f8 <__aeabi_dmul>
 80074f8:	4682      	mov	sl, r0
 80074fa:	468b      	mov	fp, r1
 80074fc:	e640      	b.n	8007180 <_strtod_l+0x88>
 80074fe:	9a06      	ldr	r2, [sp, #24]
 8007500:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007504:	4293      	cmp	r3, r2
 8007506:	db20      	blt.n	800754a <_strtod_l+0x452>
 8007508:	4c64      	ldr	r4, [pc, #400]	; (800769c <_strtod_l+0x5a4>)
 800750a:	f1c5 050f 	rsb	r5, r5, #15
 800750e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800751a:	f7f9 f86d 	bl	80005f8 <__aeabi_dmul>
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	1b5d      	subs	r5, r3, r5
 8007522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800752a:	e7e3      	b.n	80074f4 <_strtod_l+0x3fc>
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	3316      	adds	r3, #22
 8007530:	db0b      	blt.n	800754a <_strtod_l+0x452>
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	1b9e      	subs	r6, r3, r6
 8007536:	4b59      	ldr	r3, [pc, #356]	; (800769c <_strtod_l+0x5a4>)
 8007538:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800753c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007540:	4650      	mov	r0, sl
 8007542:	4659      	mov	r1, fp
 8007544:	f7f9 f982 	bl	800084c <__aeabi_ddiv>
 8007548:	e7d6      	b.n	80074f8 <_strtod_l+0x400>
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	eba5 0808 	sub.w	r8, r5, r8
 8007550:	4498      	add	r8, r3
 8007552:	f1b8 0f00 	cmp.w	r8, #0
 8007556:	dd74      	ble.n	8007642 <_strtod_l+0x54a>
 8007558:	f018 030f 	ands.w	r3, r8, #15
 800755c:	d00a      	beq.n	8007574 <_strtod_l+0x47c>
 800755e:	494f      	ldr	r1, [pc, #316]	; (800769c <_strtod_l+0x5a4>)
 8007560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007564:	4652      	mov	r2, sl
 8007566:	465b      	mov	r3, fp
 8007568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756c:	f7f9 f844 	bl	80005f8 <__aeabi_dmul>
 8007570:	4682      	mov	sl, r0
 8007572:	468b      	mov	fp, r1
 8007574:	f038 080f 	bics.w	r8, r8, #15
 8007578:	d04f      	beq.n	800761a <_strtod_l+0x522>
 800757a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800757e:	dd22      	ble.n	80075c6 <_strtod_l+0x4ce>
 8007580:	2500      	movs	r5, #0
 8007582:	462e      	mov	r6, r5
 8007584:	9507      	str	r5, [sp, #28]
 8007586:	9505      	str	r5, [sp, #20]
 8007588:	2322      	movs	r3, #34	; 0x22
 800758a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076a4 <_strtod_l+0x5ac>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	f04f 0a00 	mov.w	sl, #0
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f adf2 	beq.w	8007180 <_strtod_l+0x88>
 800759c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800759e:	4620      	mov	r0, r4
 80075a0:	f002 f9a6 	bl	80098f0 <_Bfree>
 80075a4:	9905      	ldr	r1, [sp, #20]
 80075a6:	4620      	mov	r0, r4
 80075a8:	f002 f9a2 	bl	80098f0 <_Bfree>
 80075ac:	4631      	mov	r1, r6
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 f99e 	bl	80098f0 <_Bfree>
 80075b4:	9907      	ldr	r1, [sp, #28]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f002 f99a 	bl	80098f0 <_Bfree>
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f002 f996 	bl	80098f0 <_Bfree>
 80075c4:	e5dc      	b.n	8007180 <_strtod_l+0x88>
 80075c6:	4b36      	ldr	r3, [pc, #216]	; (80076a0 <_strtod_l+0x5a8>)
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	2300      	movs	r3, #0
 80075cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075d0:	4650      	mov	r0, sl
 80075d2:	4659      	mov	r1, fp
 80075d4:	4699      	mov	r9, r3
 80075d6:	f1b8 0f01 	cmp.w	r8, #1
 80075da:	dc21      	bgt.n	8007620 <_strtod_l+0x528>
 80075dc:	b10b      	cbz	r3, 80075e2 <_strtod_l+0x4ea>
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <_strtod_l+0x5a8>)
 80075e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075ec:	4652      	mov	r2, sl
 80075ee:	465b      	mov	r3, fp
 80075f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075f4:	f7f9 f800 	bl	80005f8 <__aeabi_dmul>
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <_strtod_l+0x5ac>)
 80075fa:	460a      	mov	r2, r1
 80075fc:	400b      	ands	r3, r1
 80075fe:	492a      	ldr	r1, [pc, #168]	; (80076a8 <_strtod_l+0x5b0>)
 8007600:	428b      	cmp	r3, r1
 8007602:	4682      	mov	sl, r0
 8007604:	d8bc      	bhi.n	8007580 <_strtod_l+0x488>
 8007606:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800760a:	428b      	cmp	r3, r1
 800760c:	bf86      	itte	hi
 800760e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076ac <_strtod_l+0x5b4>
 8007612:	f04f 3aff 	movhi.w	sl, #4294967295
 8007616:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800761a:	2300      	movs	r3, #0
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	e084      	b.n	800772a <_strtod_l+0x632>
 8007620:	f018 0f01 	tst.w	r8, #1
 8007624:	d005      	beq.n	8007632 <_strtod_l+0x53a>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 ffe4 	bl	80005f8 <__aeabi_dmul>
 8007630:	2301      	movs	r3, #1
 8007632:	9a04      	ldr	r2, [sp, #16]
 8007634:	3208      	adds	r2, #8
 8007636:	f109 0901 	add.w	r9, r9, #1
 800763a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800763e:	9204      	str	r2, [sp, #16]
 8007640:	e7c9      	b.n	80075d6 <_strtod_l+0x4de>
 8007642:	d0ea      	beq.n	800761a <_strtod_l+0x522>
 8007644:	f1c8 0800 	rsb	r8, r8, #0
 8007648:	f018 020f 	ands.w	r2, r8, #15
 800764c:	d00a      	beq.n	8007664 <_strtod_l+0x56c>
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <_strtod_l+0x5a4>)
 8007650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f9 f8f6 	bl	800084c <__aeabi_ddiv>
 8007660:	4682      	mov	sl, r0
 8007662:	468b      	mov	fp, r1
 8007664:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007668:	d0d7      	beq.n	800761a <_strtod_l+0x522>
 800766a:	f1b8 0f1f 	cmp.w	r8, #31
 800766e:	dd1f      	ble.n	80076b0 <_strtod_l+0x5b8>
 8007670:	2500      	movs	r5, #0
 8007672:	462e      	mov	r6, r5
 8007674:	9507      	str	r5, [sp, #28]
 8007676:	9505      	str	r5, [sp, #20]
 8007678:	2322      	movs	r3, #34	; 0x22
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	f04f 0b00 	mov.w	fp, #0
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	e786      	b.n	8007594 <_strtod_l+0x49c>
 8007686:	bf00      	nop
 8007688:	0800aff9 	.word	0x0800aff9
 800768c:	0800b03c 	.word	0x0800b03c
 8007690:	0800aff1 	.word	0x0800aff1
 8007694:	0800b17c 	.word	0x0800b17c
 8007698:	0800b490 	.word	0x0800b490
 800769c:	0800b370 	.word	0x0800b370
 80076a0:	0800b348 	.word	0x0800b348
 80076a4:	7ff00000 	.word	0x7ff00000
 80076a8:	7ca00000 	.word	0x7ca00000
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	f018 0310 	ands.w	r3, r8, #16
 80076b4:	bf18      	it	ne
 80076b6:	236a      	movne	r3, #106	; 0x6a
 80076b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a68 <_strtod_l+0x970>
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	4650      	mov	r0, sl
 80076c0:	4659      	mov	r1, fp
 80076c2:	2300      	movs	r3, #0
 80076c4:	f018 0f01 	tst.w	r8, #1
 80076c8:	d004      	beq.n	80076d4 <_strtod_l+0x5dc>
 80076ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	2301      	movs	r3, #1
 80076d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076d8:	f109 0908 	add.w	r9, r9, #8
 80076dc:	d1f2      	bne.n	80076c4 <_strtod_l+0x5cc>
 80076de:	b10b      	cbz	r3, 80076e4 <_strtod_l+0x5ec>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	b1c3      	cbz	r3, 800771a <_strtod_l+0x622>
 80076e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	4659      	mov	r1, fp
 80076f4:	dd11      	ble.n	800771a <_strtod_l+0x622>
 80076f6:	2b1f      	cmp	r3, #31
 80076f8:	f340 8124 	ble.w	8007944 <_strtod_l+0x84c>
 80076fc:	2b34      	cmp	r3, #52	; 0x34
 80076fe:	bfde      	ittt	le
 8007700:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007704:	f04f 33ff 	movle.w	r3, #4294967295
 8007708:	fa03 f202 	lslle.w	r2, r3, r2
 800770c:	f04f 0a00 	mov.w	sl, #0
 8007710:	bfcc      	ite	gt
 8007712:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007716:	ea02 0b01 	andle.w	fp, r2, r1
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4650      	mov	r0, sl
 8007720:	4659      	mov	r1, fp
 8007722:	f7f9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007726:	2800      	cmp	r0, #0
 8007728:	d1a2      	bne.n	8007670 <_strtod_l+0x578>
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	9908      	ldr	r1, [sp, #32]
 8007730:	462b      	mov	r3, r5
 8007732:	463a      	mov	r2, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f002 f943 	bl	80099c0 <__s2b>
 800773a:	9007      	str	r0, [sp, #28]
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f af1f 	beq.w	8007580 <_strtod_l+0x488>
 8007742:	9b05      	ldr	r3, [sp, #20]
 8007744:	1b9e      	subs	r6, r3, r6
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfb4      	ite	lt
 800774c:	4633      	movlt	r3, r6
 800774e:	2300      	movge	r3, #0
 8007750:	930c      	str	r3, [sp, #48]	; 0x30
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	2500      	movs	r5, #0
 8007756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800775a:	9312      	str	r3, [sp, #72]	; 0x48
 800775c:	462e      	mov	r6, r5
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	4620      	mov	r0, r4
 8007762:	6859      	ldr	r1, [r3, #4]
 8007764:	f002 f884 	bl	8009870 <_Balloc>
 8007768:	9005      	str	r0, [sp, #20]
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f af0c 	beq.w	8007588 <_strtod_l+0x490>
 8007770:	9b07      	ldr	r3, [sp, #28]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	3202      	adds	r2, #2
 8007776:	f103 010c 	add.w	r1, r3, #12
 800777a:	0092      	lsls	r2, r2, #2
 800777c:	300c      	adds	r0, #12
 800777e:	f002 f869 	bl	8009854 <memcpy>
 8007782:	ec4b ab10 	vmov	d0, sl, fp
 8007786:	aa1a      	add	r2, sp, #104	; 0x68
 8007788:	a919      	add	r1, sp, #100	; 0x64
 800778a:	4620      	mov	r0, r4
 800778c:	f002 fc5e 	bl	800a04c <__d2b>
 8007790:	ec4b ab18 	vmov	d8, sl, fp
 8007794:	9018      	str	r0, [sp, #96]	; 0x60
 8007796:	2800      	cmp	r0, #0
 8007798:	f43f aef6 	beq.w	8007588 <_strtod_l+0x490>
 800779c:	2101      	movs	r1, #1
 800779e:	4620      	mov	r0, r4
 80077a0:	f002 f9a8 	bl	8009af4 <__i2b>
 80077a4:	4606      	mov	r6, r0
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aeee 	beq.w	8007588 <_strtod_l+0x490>
 80077ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077ae:	9904      	ldr	r1, [sp, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfab      	itete	ge
 80077b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077be:	bfac      	ite	ge
 80077c0:	eb03 0902 	addge.w	r9, r3, r2
 80077c4:	1ad7      	sublt	r7, r2, r3
 80077c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077c8:	eba3 0801 	sub.w	r8, r3, r1
 80077cc:	4490      	add	r8, r2
 80077ce:	4ba1      	ldr	r3, [pc, #644]	; (8007a54 <_strtod_l+0x95c>)
 80077d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077d4:	4598      	cmp	r8, r3
 80077d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077da:	f280 80c7 	bge.w	800796c <_strtod_l+0x874>
 80077de:	eba3 0308 	sub.w	r3, r3, r8
 80077e2:	2b1f      	cmp	r3, #31
 80077e4:	eba2 0203 	sub.w	r2, r2, r3
 80077e8:	f04f 0101 	mov.w	r1, #1
 80077ec:	f300 80b1 	bgt.w	8007952 <_strtod_l+0x85a>
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	930d      	str	r3, [sp, #52]	; 0x34
 80077f6:	2300      	movs	r3, #0
 80077f8:	9308      	str	r3, [sp, #32]
 80077fa:	eb09 0802 	add.w	r8, r9, r2
 80077fe:	9b04      	ldr	r3, [sp, #16]
 8007800:	45c1      	cmp	r9, r8
 8007802:	4417      	add	r7, r2
 8007804:	441f      	add	r7, r3
 8007806:	464b      	mov	r3, r9
 8007808:	bfa8      	it	ge
 800780a:	4643      	movge	r3, r8
 800780c:	42bb      	cmp	r3, r7
 800780e:	bfa8      	it	ge
 8007810:	463b      	movge	r3, r7
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfc2      	ittt	gt
 8007816:	eba8 0803 	subgt.w	r8, r8, r3
 800781a:	1aff      	subgt	r7, r7, r3
 800781c:	eba9 0903 	subgt.w	r9, r9, r3
 8007820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd17      	ble.n	8007856 <_strtod_l+0x75e>
 8007826:	4631      	mov	r1, r6
 8007828:	461a      	mov	r2, r3
 800782a:	4620      	mov	r0, r4
 800782c:	f002 fa22 	bl	8009c74 <__pow5mult>
 8007830:	4606      	mov	r6, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f aea8 	beq.w	8007588 <_strtod_l+0x490>
 8007838:	4601      	mov	r1, r0
 800783a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800783c:	4620      	mov	r0, r4
 800783e:	f002 f96f 	bl	8009b20 <__multiply>
 8007842:	900b      	str	r0, [sp, #44]	; 0x2c
 8007844:	2800      	cmp	r0, #0
 8007846:	f43f ae9f 	beq.w	8007588 <_strtod_l+0x490>
 800784a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800784c:	4620      	mov	r0, r4
 800784e:	f002 f84f 	bl	80098f0 <_Bfree>
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	9318      	str	r3, [sp, #96]	; 0x60
 8007856:	f1b8 0f00 	cmp.w	r8, #0
 800785a:	f300 808c 	bgt.w	8007976 <_strtod_l+0x87e>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	dd08      	ble.n	8007876 <_strtod_l+0x77e>
 8007864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007866:	9905      	ldr	r1, [sp, #20]
 8007868:	4620      	mov	r0, r4
 800786a:	f002 fa03 	bl	8009c74 <__pow5mult>
 800786e:	9005      	str	r0, [sp, #20]
 8007870:	2800      	cmp	r0, #0
 8007872:	f43f ae89 	beq.w	8007588 <_strtod_l+0x490>
 8007876:	2f00      	cmp	r7, #0
 8007878:	dd08      	ble.n	800788c <_strtod_l+0x794>
 800787a:	9905      	ldr	r1, [sp, #20]
 800787c:	463a      	mov	r2, r7
 800787e:	4620      	mov	r0, r4
 8007880:	f002 fa52 	bl	8009d28 <__lshift>
 8007884:	9005      	str	r0, [sp, #20]
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f ae7e 	beq.w	8007588 <_strtod_l+0x490>
 800788c:	f1b9 0f00 	cmp.w	r9, #0
 8007890:	dd08      	ble.n	80078a4 <_strtod_l+0x7ac>
 8007892:	4631      	mov	r1, r6
 8007894:	464a      	mov	r2, r9
 8007896:	4620      	mov	r0, r4
 8007898:	f002 fa46 	bl	8009d28 <__lshift>
 800789c:	4606      	mov	r6, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f ae72 	beq.w	8007588 <_strtod_l+0x490>
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078a8:	4620      	mov	r0, r4
 80078aa:	f002 fac9 	bl	8009e40 <__mdiff>
 80078ae:	4605      	mov	r5, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f43f ae69 	beq.w	8007588 <_strtod_l+0x490>
 80078b6:	68c3      	ldr	r3, [r0, #12]
 80078b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ba:	2300      	movs	r3, #0
 80078bc:	60c3      	str	r3, [r0, #12]
 80078be:	4631      	mov	r1, r6
 80078c0:	f002 faa2 	bl	8009e08 <__mcmp>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	da60      	bge.n	800798a <_strtod_l+0x892>
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	ea53 030a 	orrs.w	r3, r3, sl
 80078ce:	f040 8082 	bne.w	80079d6 <_strtod_l+0x8de>
 80078d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d17d      	bne.n	80079d6 <_strtod_l+0x8de>
 80078da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078de:	0d1b      	lsrs	r3, r3, #20
 80078e0:	051b      	lsls	r3, r3, #20
 80078e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078e6:	d976      	bls.n	80079d6 <_strtod_l+0x8de>
 80078e8:	696b      	ldr	r3, [r5, #20]
 80078ea:	b913      	cbnz	r3, 80078f2 <_strtod_l+0x7fa>
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	dd71      	ble.n	80079d6 <_strtod_l+0x8de>
 80078f2:	4629      	mov	r1, r5
 80078f4:	2201      	movs	r2, #1
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 fa16 	bl	8009d28 <__lshift>
 80078fc:	4631      	mov	r1, r6
 80078fe:	4605      	mov	r5, r0
 8007900:	f002 fa82 	bl	8009e08 <__mcmp>
 8007904:	2800      	cmp	r0, #0
 8007906:	dd66      	ble.n	80079d6 <_strtod_l+0x8de>
 8007908:	9904      	ldr	r1, [sp, #16]
 800790a:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <_strtod_l+0x960>)
 800790c:	465b      	mov	r3, fp
 800790e:	2900      	cmp	r1, #0
 8007910:	f000 8081 	beq.w	8007a16 <_strtod_l+0x91e>
 8007914:	ea02 010b 	and.w	r1, r2, fp
 8007918:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800791c:	dc7b      	bgt.n	8007a16 <_strtod_l+0x91e>
 800791e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007922:	f77f aea9 	ble.w	8007678 <_strtod_l+0x580>
 8007926:	4b4d      	ldr	r3, [pc, #308]	; (8007a5c <_strtod_l+0x964>)
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	460b      	mov	r3, r1
 8007934:	4303      	orrs	r3, r0
 8007936:	bf08      	it	eq
 8007938:	2322      	moveq	r3, #34	; 0x22
 800793a:	4682      	mov	sl, r0
 800793c:	468b      	mov	fp, r1
 800793e:	bf08      	it	eq
 8007940:	6023      	streq	r3, [r4, #0]
 8007942:	e62b      	b.n	800759c <_strtod_l+0x4a4>
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	ea03 0a0a 	and.w	sl, r3, sl
 8007950:	e6e3      	b.n	800771a <_strtod_l+0x622>
 8007952:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007956:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800795a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800795e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007962:	fa01 f308 	lsl.w	r3, r1, r8
 8007966:	9308      	str	r3, [sp, #32]
 8007968:	910d      	str	r1, [sp, #52]	; 0x34
 800796a:	e746      	b.n	80077fa <_strtod_l+0x702>
 800796c:	2300      	movs	r3, #0
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	2301      	movs	r3, #1
 8007972:	930d      	str	r3, [sp, #52]	; 0x34
 8007974:	e741      	b.n	80077fa <_strtod_l+0x702>
 8007976:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007978:	4642      	mov	r2, r8
 800797a:	4620      	mov	r0, r4
 800797c:	f002 f9d4 	bl	8009d28 <__lshift>
 8007980:	9018      	str	r0, [sp, #96]	; 0x60
 8007982:	2800      	cmp	r0, #0
 8007984:	f47f af6b 	bne.w	800785e <_strtod_l+0x766>
 8007988:	e5fe      	b.n	8007588 <_strtod_l+0x490>
 800798a:	465f      	mov	r7, fp
 800798c:	d16e      	bne.n	8007a6c <_strtod_l+0x974>
 800798e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007994:	b342      	cbz	r2, 80079e8 <_strtod_l+0x8f0>
 8007996:	4a32      	ldr	r2, [pc, #200]	; (8007a60 <_strtod_l+0x968>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d128      	bne.n	80079ee <_strtod_l+0x8f6>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4651      	mov	r1, sl
 80079a0:	b1eb      	cbz	r3, 80079de <_strtod_l+0x8e6>
 80079a2:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <_strtod_l+0x960>)
 80079a4:	403b      	ands	r3, r7
 80079a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	d819      	bhi.n	80079e4 <_strtod_l+0x8ec>
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	4299      	cmp	r1, r3
 80079bc:	d117      	bne.n	80079ee <_strtod_l+0x8f6>
 80079be:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <_strtod_l+0x96c>)
 80079c0:	429f      	cmp	r7, r3
 80079c2:	d102      	bne.n	80079ca <_strtod_l+0x8d2>
 80079c4:	3101      	adds	r1, #1
 80079c6:	f43f addf 	beq.w	8007588 <_strtod_l+0x490>
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <_strtod_l+0x960>)
 80079cc:	403b      	ands	r3, r7
 80079ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079d2:	f04f 0a00 	mov.w	sl, #0
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1a4      	bne.n	8007926 <_strtod_l+0x82e>
 80079dc:	e5de      	b.n	800759c <_strtod_l+0x4a4>
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	e7ea      	b.n	80079ba <_strtod_l+0x8c2>
 80079e4:	4613      	mov	r3, r2
 80079e6:	e7e8      	b.n	80079ba <_strtod_l+0x8c2>
 80079e8:	ea53 030a 	orrs.w	r3, r3, sl
 80079ec:	d08c      	beq.n	8007908 <_strtod_l+0x810>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	b1db      	cbz	r3, 8007a2a <_strtod_l+0x932>
 80079f2:	423b      	tst	r3, r7
 80079f4:	d0ef      	beq.n	80079d6 <_strtod_l+0x8de>
 80079f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f8:	9a04      	ldr	r2, [sp, #16]
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	b1c3      	cbz	r3, 8007a32 <_strtod_l+0x93a>
 8007a00:	f7ff fb5d 	bl	80070be <sulp>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	ec51 0b18 	vmov	r0, r1, d8
 8007a0c:	f7f8 fc3e 	bl	800028c <__adddf3>
 8007a10:	4682      	mov	sl, r0
 8007a12:	468b      	mov	fp, r1
 8007a14:	e7df      	b.n	80079d6 <_strtod_l+0x8de>
 8007a16:	4013      	ands	r3, r2
 8007a18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a24:	f04f 3aff 	mov.w	sl, #4294967295
 8007a28:	e7d5      	b.n	80079d6 <_strtod_l+0x8de>
 8007a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2c:	ea13 0f0a 	tst.w	r3, sl
 8007a30:	e7e0      	b.n	80079f4 <_strtod_l+0x8fc>
 8007a32:	f7ff fb44 	bl	80070be <sulp>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	ec51 0b18 	vmov	r0, r1, d8
 8007a3e:	f7f8 fc23 	bl	8000288 <__aeabi_dsub>
 8007a42:	2200      	movs	r2, #0
 8007a44:	2300      	movs	r3, #0
 8007a46:	4682      	mov	sl, r0
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f7f9 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0c1      	beq.n	80079d6 <_strtod_l+0x8de>
 8007a52:	e611      	b.n	8007678 <_strtod_l+0x580>
 8007a54:	fffffc02 	.word	0xfffffc02
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	39500000 	.word	0x39500000
 8007a60:	000fffff 	.word	0x000fffff
 8007a64:	7fefffff 	.word	0x7fefffff
 8007a68:	0800b050 	.word	0x0800b050
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f002 fb48 	bl	800a104 <__ratio>
 8007a74:	ec59 8b10 	vmov	r8, r9, d0
 8007a78:	ee10 0a10 	vmov	r0, s0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f834 	bl	8000af0 <__aeabi_dcmple>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d07a      	beq.n	8007b82 <_strtod_l+0xa8a>
 8007a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04a      	beq.n	8007b28 <_strtod_l+0xa30>
 8007a92:	4b95      	ldr	r3, [pc, #596]	; (8007ce8 <_strtod_l+0xbf0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ce8 <_strtod_l+0xbf0>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	4b92      	ldr	r3, [pc, #584]	; (8007cec <_strtod_l+0xbf4>)
 8007aa4:	403b      	ands	r3, r7
 8007aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aaa:	4b91      	ldr	r3, [pc, #580]	; (8007cf0 <_strtod_l+0xbf8>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	f040 80b0 	bne.w	8007c12 <_strtod_l+0xb1a>
 8007ab2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ab6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aba:	ec4b ab10 	vmov	d0, sl, fp
 8007abe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ac2:	f002 fa47 	bl	8009f54 <__ulp>
 8007ac6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007aca:	ec53 2b10 	vmov	r2, r3, d0
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	f7f8 fbd9 	bl	800028c <__adddf3>
 8007ada:	460b      	mov	r3, r1
 8007adc:	4983      	ldr	r1, [pc, #524]	; (8007cec <_strtod_l+0xbf4>)
 8007ade:	4a85      	ldr	r2, [pc, #532]	; (8007cf4 <_strtod_l+0xbfc>)
 8007ae0:	4019      	ands	r1, r3
 8007ae2:	4291      	cmp	r1, r2
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	d960      	bls.n	8007baa <_strtod_l+0xab2>
 8007ae8:	ee18 3a90 	vmov	r3, s17
 8007aec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d104      	bne.n	8007afe <_strtod_l+0xa06>
 8007af4:	ee18 3a10 	vmov	r3, s16
 8007af8:	3301      	adds	r3, #1
 8007afa:	f43f ad45 	beq.w	8007588 <_strtod_l+0x490>
 8007afe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d00 <_strtod_l+0xc08>
 8007b02:	f04f 3aff 	mov.w	sl, #4294967295
 8007b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 fef1 	bl	80098f0 <_Bfree>
 8007b0e:	9905      	ldr	r1, [sp, #20]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f001 feed 	bl	80098f0 <_Bfree>
 8007b16:	4631      	mov	r1, r6
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 fee9 	bl	80098f0 <_Bfree>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fee5 	bl	80098f0 <_Bfree>
 8007b26:	e61a      	b.n	800775e <_strtod_l+0x666>
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	d11b      	bne.n	8007b66 <_strtod_l+0xa6e>
 8007b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b32:	b9f3      	cbnz	r3, 8007b72 <_strtod_l+0xa7a>
 8007b34:	4b6c      	ldr	r3, [pc, #432]	; (8007ce8 <_strtod_l+0xbf0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 ffce 	bl	8000adc <__aeabi_dcmplt>
 8007b40:	b9d0      	cbnz	r0, 8007b78 <_strtod_l+0xa80>
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <_strtod_l+0xc00>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fd55 	bl	80005f8 <__aeabi_dmul>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	4689      	mov	r9, r1
 8007b52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b5a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b64:	e79d      	b.n	8007aa2 <_strtod_l+0x9aa>
 8007b66:	f1ba 0f01 	cmp.w	sl, #1
 8007b6a:	d102      	bne.n	8007b72 <_strtod_l+0xa7a>
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	f43f ad83 	beq.w	8007678 <_strtod_l+0x580>
 8007b72:	4b62      	ldr	r3, [pc, #392]	; (8007cfc <_strtod_l+0xc04>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	e78e      	b.n	8007a96 <_strtod_l+0x99e>
 8007b78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007cf8 <_strtod_l+0xc00>
 8007b7c:	f04f 0800 	mov.w	r8, #0
 8007b80:	e7e7      	b.n	8007b52 <_strtod_l+0xa5a>
 8007b82:	4b5d      	ldr	r3, [pc, #372]	; (8007cf8 <_strtod_l+0xc00>)
 8007b84:	4640      	mov	r0, r8
 8007b86:	4649      	mov	r1, r9
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	b933      	cbnz	r3, 8007ba4 <_strtod_l+0xaac>
 8007b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b9a:	900e      	str	r0, [sp, #56]	; 0x38
 8007b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ba2:	e7dd      	b.n	8007b60 <_strtod_l+0xa68>
 8007ba4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ba8:	e7f9      	b.n	8007b9e <_strtod_l+0xaa6>
 8007baa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1a8      	bne.n	8007b06 <_strtod_l+0xa0e>
 8007bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bba:	0d1b      	lsrs	r3, r3, #20
 8007bbc:	051b      	lsls	r3, r3, #20
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d1a1      	bne.n	8007b06 <_strtod_l+0xa0e>
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f9 f877 	bl	8000cb8 <__aeabi_d2lz>
 8007bca:	f7f8 fce7 	bl	800059c <__aeabi_l2d>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007be0:	ea43 030a 	orr.w	r3, r3, sl
 8007be4:	4313      	orrs	r3, r2
 8007be6:	4680      	mov	r8, r0
 8007be8:	4689      	mov	r9, r1
 8007bea:	d055      	beq.n	8007c98 <_strtod_l+0xba0>
 8007bec:	a336      	add	r3, pc, #216	; (adr r3, 8007cc8 <_strtod_l+0xbd0>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 ff73 	bl	8000adc <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f47f acd0 	bne.w	800759c <_strtod_l+0x4a4>
 8007bfc:	a334      	add	r3, pc, #208	; (adr r3, 8007cd0 <_strtod_l+0xbd8>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	f7f8 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f43f af7b 	beq.w	8007b06 <_strtod_l+0xa0e>
 8007c10:	e4c4      	b.n	800759c <_strtod_l+0x4a4>
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	b333      	cbz	r3, 8007c64 <_strtod_l+0xb6c>
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c1c:	d822      	bhi.n	8007c64 <_strtod_l+0xb6c>
 8007c1e:	a32e      	add	r3, pc, #184	; (adr r3, 8007cd8 <_strtod_l+0xbe0>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4640      	mov	r0, r8
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f8 ff62 	bl	8000af0 <__aeabi_dcmple>
 8007c2c:	b1a0      	cbz	r0, 8007c58 <_strtod_l+0xb60>
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	f7f8 ffb9 	bl	8000ba8 <__aeabi_d2uiz>
 8007c36:	2801      	cmp	r0, #1
 8007c38:	bf38      	it	cc
 8007c3a:	2001      	movcc	r0, #1
 8007c3c:	f7f8 fc62 	bl	8000504 <__aeabi_ui2d>
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	bb23      	cbnz	r3, 8007c92 <_strtod_l+0xb9a>
 8007c48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c4e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c68:	eeb0 0a48 	vmov.f32	s0, s16
 8007c6c:	eef0 0a68 	vmov.f32	s1, s17
 8007c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c74:	f002 f96e 	bl	8009f54 <__ulp>
 8007c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c7c:	ec53 2b10 	vmov	r2, r3, d0
 8007c80:	f7f8 fcba 	bl	80005f8 <__aeabi_dmul>
 8007c84:	ec53 2b18 	vmov	r2, r3, d8
 8007c88:	f7f8 fb00 	bl	800028c <__adddf3>
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	468b      	mov	fp, r1
 8007c90:	e78d      	b.n	8007bae <_strtod_l+0xab6>
 8007c92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c96:	e7db      	b.n	8007c50 <_strtod_l+0xb58>
 8007c98:	a311      	add	r3, pc, #68	; (adr r3, 8007ce0 <_strtod_l+0xbe8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 ff1d 	bl	8000adc <__aeabi_dcmplt>
 8007ca2:	e7b2      	b.n	8007c0a <_strtod_l+0xb12>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	f7ff ba6b 	b.w	8007188 <_strtod_l+0x90>
 8007cb2:	2a65      	cmp	r2, #101	; 0x65
 8007cb4:	f43f ab5f 	beq.w	8007376 <_strtod_l+0x27e>
 8007cb8:	2a45      	cmp	r2, #69	; 0x45
 8007cba:	f43f ab5c 	beq.w	8007376 <_strtod_l+0x27e>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f7ff bb94 	b.w	80073ec <_strtod_l+0x2f4>
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fdfffff 	.word	0x3fdfffff
 8007cd0:	35afe535 	.word	0x35afe535
 8007cd4:	3fe00000 	.word	0x3fe00000
 8007cd8:	ffc00000 	.word	0xffc00000
 8007cdc:	41dfffff 	.word	0x41dfffff
 8007ce0:	94a03595 	.word	0x94a03595
 8007ce4:	3fcfffff 	.word	0x3fcfffff
 8007ce8:	3ff00000 	.word	0x3ff00000
 8007cec:	7ff00000 	.word	0x7ff00000
 8007cf0:	7fe00000 	.word	0x7fe00000
 8007cf4:	7c9fffff 	.word	0x7c9fffff
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	7fefffff 	.word	0x7fefffff

08007d04 <_strtod_r>:
 8007d04:	4b01      	ldr	r3, [pc, #4]	; (8007d0c <_strtod_r+0x8>)
 8007d06:	f7ff b9f7 	b.w	80070f8 <_strtod_l>
 8007d0a:	bf00      	nop
 8007d0c:	20000080 	.word	0x20000080

08007d10 <_strtol_l.constprop.0>:
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d16:	d001      	beq.n	8007d1c <_strtol_l.constprop.0+0xc>
 8007d18:	2b24      	cmp	r3, #36	; 0x24
 8007d1a:	d906      	bls.n	8007d2a <_strtol_l.constprop.0+0x1a>
 8007d1c:	f7fe fa18 	bl	8006150 <__errno>
 8007d20:	2316      	movs	r3, #22
 8007d22:	6003      	str	r3, [r0, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e10 <_strtol_l.constprop.0+0x100>
 8007d2e:	460d      	mov	r5, r1
 8007d30:	462e      	mov	r6, r5
 8007d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d36:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d3a:	f017 0708 	ands.w	r7, r7, #8
 8007d3e:	d1f7      	bne.n	8007d30 <_strtol_l.constprop.0+0x20>
 8007d40:	2c2d      	cmp	r4, #45	; 0x2d
 8007d42:	d132      	bne.n	8007daa <_strtol_l.constprop.0+0x9a>
 8007d44:	782c      	ldrb	r4, [r5, #0]
 8007d46:	2701      	movs	r7, #1
 8007d48:	1cb5      	adds	r5, r6, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d05b      	beq.n	8007e06 <_strtol_l.constprop.0+0xf6>
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d109      	bne.n	8007d66 <_strtol_l.constprop.0+0x56>
 8007d52:	2c30      	cmp	r4, #48	; 0x30
 8007d54:	d107      	bne.n	8007d66 <_strtol_l.constprop.0+0x56>
 8007d56:	782c      	ldrb	r4, [r5, #0]
 8007d58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d5c:	2c58      	cmp	r4, #88	; 0x58
 8007d5e:	d14d      	bne.n	8007dfc <_strtol_l.constprop.0+0xec>
 8007d60:	786c      	ldrb	r4, [r5, #1]
 8007d62:	2310      	movs	r3, #16
 8007d64:	3502      	adds	r5, #2
 8007d66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d6e:	f04f 0c00 	mov.w	ip, #0
 8007d72:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d76:	4666      	mov	r6, ip
 8007d78:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d80:	f1be 0f09 	cmp.w	lr, #9
 8007d84:	d816      	bhi.n	8007db4 <_strtol_l.constprop.0+0xa4>
 8007d86:	4674      	mov	r4, lr
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	dd24      	ble.n	8007dd6 <_strtol_l.constprop.0+0xc6>
 8007d8c:	f1bc 0f00 	cmp.w	ip, #0
 8007d90:	db1e      	blt.n	8007dd0 <_strtol_l.constprop.0+0xc0>
 8007d92:	45b1      	cmp	r9, r6
 8007d94:	d31c      	bcc.n	8007dd0 <_strtol_l.constprop.0+0xc0>
 8007d96:	d101      	bne.n	8007d9c <_strtol_l.constprop.0+0x8c>
 8007d98:	45a2      	cmp	sl, r4
 8007d9a:	db19      	blt.n	8007dd0 <_strtol_l.constprop.0+0xc0>
 8007d9c:	fb06 4603 	mla	r6, r6, r3, r4
 8007da0:	f04f 0c01 	mov.w	ip, #1
 8007da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da8:	e7e8      	b.n	8007d7c <_strtol_l.constprop.0+0x6c>
 8007daa:	2c2b      	cmp	r4, #43	; 0x2b
 8007dac:	bf04      	itt	eq
 8007dae:	782c      	ldrbeq	r4, [r5, #0]
 8007db0:	1cb5      	addeq	r5, r6, #2
 8007db2:	e7ca      	b.n	8007d4a <_strtol_l.constprop.0+0x3a>
 8007db4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007db8:	f1be 0f19 	cmp.w	lr, #25
 8007dbc:	d801      	bhi.n	8007dc2 <_strtol_l.constprop.0+0xb2>
 8007dbe:	3c37      	subs	r4, #55	; 0x37
 8007dc0:	e7e2      	b.n	8007d88 <_strtol_l.constprop.0+0x78>
 8007dc2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dc6:	f1be 0f19 	cmp.w	lr, #25
 8007dca:	d804      	bhi.n	8007dd6 <_strtol_l.constprop.0+0xc6>
 8007dcc:	3c57      	subs	r4, #87	; 0x57
 8007dce:	e7db      	b.n	8007d88 <_strtol_l.constprop.0+0x78>
 8007dd0:	f04f 3cff 	mov.w	ip, #4294967295
 8007dd4:	e7e6      	b.n	8007da4 <_strtol_l.constprop.0+0x94>
 8007dd6:	f1bc 0f00 	cmp.w	ip, #0
 8007dda:	da05      	bge.n	8007de8 <_strtol_l.constprop.0+0xd8>
 8007ddc:	2322      	movs	r3, #34	; 0x22
 8007dde:	6003      	str	r3, [r0, #0]
 8007de0:	4646      	mov	r6, r8
 8007de2:	b942      	cbnz	r2, 8007df6 <_strtol_l.constprop.0+0xe6>
 8007de4:	4630      	mov	r0, r6
 8007de6:	e79e      	b.n	8007d26 <_strtol_l.constprop.0+0x16>
 8007de8:	b107      	cbz	r7, 8007dec <_strtol_l.constprop.0+0xdc>
 8007dea:	4276      	negs	r6, r6
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d0f9      	beq.n	8007de4 <_strtol_l.constprop.0+0xd4>
 8007df0:	f1bc 0f00 	cmp.w	ip, #0
 8007df4:	d000      	beq.n	8007df8 <_strtol_l.constprop.0+0xe8>
 8007df6:	1e69      	subs	r1, r5, #1
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	e7f3      	b.n	8007de4 <_strtol_l.constprop.0+0xd4>
 8007dfc:	2430      	movs	r4, #48	; 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1b1      	bne.n	8007d66 <_strtol_l.constprop.0+0x56>
 8007e02:	2308      	movs	r3, #8
 8007e04:	e7af      	b.n	8007d66 <_strtol_l.constprop.0+0x56>
 8007e06:	2c30      	cmp	r4, #48	; 0x30
 8007e08:	d0a5      	beq.n	8007d56 <_strtol_l.constprop.0+0x46>
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	e7ab      	b.n	8007d66 <_strtol_l.constprop.0+0x56>
 8007e0e:	bf00      	nop
 8007e10:	0800b079 	.word	0x0800b079

08007e14 <_strtol_r>:
 8007e14:	f7ff bf7c 	b.w	8007d10 <_strtol_l.constprop.0>

08007e18 <__swbuf_r>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	460e      	mov	r6, r1
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	4605      	mov	r5, r0
 8007e20:	b118      	cbz	r0, 8007e2a <__swbuf_r+0x12>
 8007e22:	6983      	ldr	r3, [r0, #24]
 8007e24:	b90b      	cbnz	r3, 8007e2a <__swbuf_r+0x12>
 8007e26:	f001 f86f 	bl	8008f08 <__sinit>
 8007e2a:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <__swbuf_r+0x98>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d12b      	bne.n	8007e88 <__swbuf_r+0x70>
 8007e30:	686c      	ldr	r4, [r5, #4]
 8007e32:	69a3      	ldr	r3, [r4, #24]
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	071a      	lsls	r2, r3, #28
 8007e3a:	d52f      	bpl.n	8007e9c <__swbuf_r+0x84>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	b36b      	cbz	r3, 8007e9c <__swbuf_r+0x84>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	1ac0      	subs	r0, r0, r3
 8007e46:	6963      	ldr	r3, [r4, #20]
 8007e48:	b2f6      	uxtb	r6, r6
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	dc04      	bgt.n	8007e5a <__swbuf_r+0x42>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 ffc4 	bl	8008de0 <_fflush_r>
 8007e58:	bb30      	cbnz	r0, 8007ea8 <__swbuf_r+0x90>
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60a3      	str	r3, [r4, #8]
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	6022      	str	r2, [r4, #0]
 8007e66:	701e      	strb	r6, [r3, #0]
 8007e68:	6963      	ldr	r3, [r4, #20]
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	4283      	cmp	r3, r0
 8007e6e:	d004      	beq.n	8007e7a <__swbuf_r+0x62>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d506      	bpl.n	8007e84 <__swbuf_r+0x6c>
 8007e76:	2e0a      	cmp	r6, #10
 8007e78:	d104      	bne.n	8007e84 <__swbuf_r+0x6c>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 ffaf 	bl	8008de0 <_fflush_r>
 8007e82:	b988      	cbnz	r0, 8007ea8 <__swbuf_r+0x90>
 8007e84:	4638      	mov	r0, r7
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <__swbuf_r+0x9c>)
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	d101      	bne.n	8007e92 <__swbuf_r+0x7a>
 8007e8e:	68ac      	ldr	r4, [r5, #8]
 8007e90:	e7cf      	b.n	8007e32 <__swbuf_r+0x1a>
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <__swbuf_r+0xa0>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	bf08      	it	eq
 8007e98:	68ec      	ldreq	r4, [r5, #12]
 8007e9a:	e7ca      	b.n	8007e32 <__swbuf_r+0x1a>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f81e 	bl	8007ee0 <__swsetup_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d0cb      	beq.n	8007e40 <__swbuf_r+0x28>
 8007ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8007eac:	e7ea      	b.n	8007e84 <__swbuf_r+0x6c>
 8007eae:	bf00      	nop
 8007eb0:	0800b22c 	.word	0x0800b22c
 8007eb4:	0800b24c 	.word	0x0800b24c
 8007eb8:	0800b20c 	.word	0x0800b20c

08007ebc <_write_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_write_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7fa fa22 	bl	8002314 <_write>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_write_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_write_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000894 	.word	0x20000894

08007ee0 <__swsetup_r>:
 8007ee0:	4b32      	ldr	r3, [pc, #200]	; (8007fac <__swsetup_r+0xcc>)
 8007ee2:	b570      	push	{r4, r5, r6, lr}
 8007ee4:	681d      	ldr	r5, [r3, #0]
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	b125      	cbz	r5, 8007ef6 <__swsetup_r+0x16>
 8007eec:	69ab      	ldr	r3, [r5, #24]
 8007eee:	b913      	cbnz	r3, 8007ef6 <__swsetup_r+0x16>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f001 f809 	bl	8008f08 <__sinit>
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <__swsetup_r+0xd0>)
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d10f      	bne.n	8007f1c <__swsetup_r+0x3c>
 8007efc:	686c      	ldr	r4, [r5, #4]
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f04:	0719      	lsls	r1, r3, #28
 8007f06:	d42c      	bmi.n	8007f62 <__swsetup_r+0x82>
 8007f08:	06dd      	lsls	r5, r3, #27
 8007f0a:	d411      	bmi.n	8007f30 <__swsetup_r+0x50>
 8007f0c:	2309      	movs	r3, #9
 8007f0e:	6033      	str	r3, [r6, #0]
 8007f10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	e03e      	b.n	8007f9a <__swsetup_r+0xba>
 8007f1c:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <__swsetup_r+0xd4>)
 8007f1e:	429c      	cmp	r4, r3
 8007f20:	d101      	bne.n	8007f26 <__swsetup_r+0x46>
 8007f22:	68ac      	ldr	r4, [r5, #8]
 8007f24:	e7eb      	b.n	8007efe <__swsetup_r+0x1e>
 8007f26:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <__swsetup_r+0xd8>)
 8007f28:	429c      	cmp	r4, r3
 8007f2a:	bf08      	it	eq
 8007f2c:	68ec      	ldreq	r4, [r5, #12]
 8007f2e:	e7e6      	b.n	8007efe <__swsetup_r+0x1e>
 8007f30:	0758      	lsls	r0, r3, #29
 8007f32:	d512      	bpl.n	8007f5a <__swsetup_r+0x7a>
 8007f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f36:	b141      	cbz	r1, 8007f4a <__swsetup_r+0x6a>
 8007f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f3c:	4299      	cmp	r1, r3
 8007f3e:	d002      	beq.n	8007f46 <__swsetup_r+0x66>
 8007f40:	4630      	mov	r0, r6
 8007f42:	f002 f96d 	bl	800a220 <_free_r>
 8007f46:	2300      	movs	r3, #0
 8007f48:	6363      	str	r3, [r4, #52]	; 0x34
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	2300      	movs	r3, #0
 8007f54:	6063      	str	r3, [r4, #4]
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f043 0308 	orr.w	r3, r3, #8
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	6923      	ldr	r3, [r4, #16]
 8007f64:	b94b      	cbnz	r3, 8007f7a <__swsetup_r+0x9a>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f70:	d003      	beq.n	8007f7a <__swsetup_r+0x9a>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4630      	mov	r0, r6
 8007f76:	f001 fc13 	bl	80097a0 <__smakebuf_r>
 8007f7a:	89a0      	ldrh	r0, [r4, #12]
 8007f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f80:	f010 0301 	ands.w	r3, r0, #1
 8007f84:	d00a      	beq.n	8007f9c <__swsetup_r+0xbc>
 8007f86:	2300      	movs	r3, #0
 8007f88:	60a3      	str	r3, [r4, #8]
 8007f8a:	6963      	ldr	r3, [r4, #20]
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	61a3      	str	r3, [r4, #24]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	b943      	cbnz	r3, 8007fa6 <__swsetup_r+0xc6>
 8007f94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f98:	d1ba      	bne.n	8007f10 <__swsetup_r+0x30>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	0781      	lsls	r1, r0, #30
 8007f9e:	bf58      	it	pl
 8007fa0:	6963      	ldrpl	r3, [r4, #20]
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	e7f4      	b.n	8007f90 <__swsetup_r+0xb0>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e7f7      	b.n	8007f9a <__swsetup_r+0xba>
 8007faa:	bf00      	nop
 8007fac:	20000018 	.word	0x20000018
 8007fb0:	0800b22c 	.word	0x0800b22c
 8007fb4:	0800b24c 	.word	0x0800b24c
 8007fb8:	0800b20c 	.word	0x0800b20c

08007fbc <_close_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_close_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f7fa f9b2 	bl	8002330 <_close>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_close_r+0x1a>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_close_r+0x1a>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000894 	.word	0x20000894

08007fdc <quorem>:
 8007fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	6903      	ldr	r3, [r0, #16]
 8007fe2:	690c      	ldr	r4, [r1, #16]
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f2c0 8081 	blt.w	80080ee <quorem+0x112>
 8007fec:	3c01      	subs	r4, #1
 8007fee:	f101 0814 	add.w	r8, r1, #20
 8007ff2:	f100 0514 	add.w	r5, r0, #20
 8007ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008004:	3301      	adds	r3, #1
 8008006:	429a      	cmp	r2, r3
 8008008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800800c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008010:	fbb2 f6f3 	udiv	r6, r2, r3
 8008014:	d331      	bcc.n	800807a <quorem+0x9e>
 8008016:	f04f 0e00 	mov.w	lr, #0
 800801a:	4640      	mov	r0, r8
 800801c:	46ac      	mov	ip, r5
 800801e:	46f2      	mov	sl, lr
 8008020:	f850 2b04 	ldr.w	r2, [r0], #4
 8008024:	b293      	uxth	r3, r2
 8008026:	fb06 e303 	mla	r3, r6, r3, lr
 800802a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800802e:	b29b      	uxth	r3, r3
 8008030:	ebaa 0303 	sub.w	r3, sl, r3
 8008034:	f8dc a000 	ldr.w	sl, [ip]
 8008038:	0c12      	lsrs	r2, r2, #16
 800803a:	fa13 f38a 	uxtah	r3, r3, sl
 800803e:	fb06 e202 	mla	r2, r6, r2, lr
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800804a:	b292      	uxth	r2, r2
 800804c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008054:	f8bd 3000 	ldrh.w	r3, [sp]
 8008058:	4581      	cmp	r9, r0
 800805a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800805e:	f84c 3b04 	str.w	r3, [ip], #4
 8008062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008066:	d2db      	bcs.n	8008020 <quorem+0x44>
 8008068:	f855 300b 	ldr.w	r3, [r5, fp]
 800806c:	b92b      	cbnz	r3, 800807a <quorem+0x9e>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	3b04      	subs	r3, #4
 8008072:	429d      	cmp	r5, r3
 8008074:	461a      	mov	r2, r3
 8008076:	d32e      	bcc.n	80080d6 <quorem+0xfa>
 8008078:	613c      	str	r4, [r7, #16]
 800807a:	4638      	mov	r0, r7
 800807c:	f001 fec4 	bl	8009e08 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	db24      	blt.n	80080ce <quorem+0xf2>
 8008084:	3601      	adds	r6, #1
 8008086:	4628      	mov	r0, r5
 8008088:	f04f 0c00 	mov.w	ip, #0
 800808c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008090:	f8d0 e000 	ldr.w	lr, [r0]
 8008094:	b293      	uxth	r3, r2
 8008096:	ebac 0303 	sub.w	r3, ip, r3
 800809a:	0c12      	lsrs	r2, r2, #16
 800809c:	fa13 f38e 	uxtah	r3, r3, lr
 80080a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ae:	45c1      	cmp	r9, r8
 80080b0:	f840 3b04 	str.w	r3, [r0], #4
 80080b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080b8:	d2e8      	bcs.n	800808c <quorem+0xb0>
 80080ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c2:	b922      	cbnz	r2, 80080ce <quorem+0xf2>
 80080c4:	3b04      	subs	r3, #4
 80080c6:	429d      	cmp	r5, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	d30a      	bcc.n	80080e2 <quorem+0x106>
 80080cc:	613c      	str	r4, [r7, #16]
 80080ce:	4630      	mov	r0, r6
 80080d0:	b003      	add	sp, #12
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	3b04      	subs	r3, #4
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1cc      	bne.n	8008078 <quorem+0x9c>
 80080de:	3c01      	subs	r4, #1
 80080e0:	e7c7      	b.n	8008072 <quorem+0x96>
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	d1f0      	bne.n	80080cc <quorem+0xf0>
 80080ea:	3c01      	subs	r4, #1
 80080ec:	e7eb      	b.n	80080c6 <quorem+0xea>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7ee      	b.n	80080d0 <quorem+0xf4>
 80080f2:	0000      	movs	r0, r0
 80080f4:	0000      	movs	r0, r0
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b04 	vpush	{d8-d9}
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	b093      	sub	sp, #76	; 0x4c
 8008106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800810c:	9106      	str	r1, [sp, #24]
 800810e:	ee10 aa10 	vmov	sl, s0
 8008112:	4604      	mov	r4, r0
 8008114:	9209      	str	r2, [sp, #36]	; 0x24
 8008116:	930c      	str	r3, [sp, #48]	; 0x30
 8008118:	46bb      	mov	fp, r7
 800811a:	b975      	cbnz	r5, 800813a <_dtoa_r+0x42>
 800811c:	2010      	movs	r0, #16
 800811e:	f001 fb7f 	bl	8009820 <malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	6260      	str	r0, [r4, #36]	; 0x24
 8008126:	b920      	cbnz	r0, 8008132 <_dtoa_r+0x3a>
 8008128:	4ba7      	ldr	r3, [pc, #668]	; (80083c8 <_dtoa_r+0x2d0>)
 800812a:	21ea      	movs	r1, #234	; 0xea
 800812c:	48a7      	ldr	r0, [pc, #668]	; (80083cc <_dtoa_r+0x2d4>)
 800812e:	f002 fc45 	bl	800a9bc <__assert_func>
 8008132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008136:	6005      	str	r5, [r0, #0]
 8008138:	60c5      	str	r5, [r0, #12]
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	b151      	cbz	r1, 8008156 <_dtoa_r+0x5e>
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	604a      	str	r2, [r1, #4]
 8008144:	2301      	movs	r3, #1
 8008146:	4093      	lsls	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	4620      	mov	r0, r4
 800814c:	f001 fbd0 	bl	80098f0 <_Bfree>
 8008150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	1e3b      	subs	r3, r7, #0
 8008158:	bfaa      	itet	ge
 800815a:	2300      	movge	r3, #0
 800815c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008160:	f8c8 3000 	strge.w	r3, [r8]
 8008164:	4b9a      	ldr	r3, [pc, #616]	; (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	f8c8 2000 	strlt.w	r2, [r8]
 800816e:	ea33 030b 	bics.w	r3, r3, fp
 8008172:	d11b      	bne.n	80081ac <_dtoa_r+0xb4>
 8008174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008176:	f242 730f 	movw	r3, #9999	; 0x270f
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008180:	4333      	orrs	r3, r6
 8008182:	f000 8592 	beq.w	8008caa <_dtoa_r+0xbb2>
 8008186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008188:	b963      	cbnz	r3, 80081a4 <_dtoa_r+0xac>
 800818a:	4b92      	ldr	r3, [pc, #584]	; (80083d4 <_dtoa_r+0x2dc>)
 800818c:	e022      	b.n	80081d4 <_dtoa_r+0xdc>
 800818e:	4b92      	ldr	r3, [pc, #584]	; (80083d8 <_dtoa_r+0x2e0>)
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	3308      	adds	r3, #8
 8008194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	9801      	ldr	r0, [sp, #4]
 800819a:	b013      	add	sp, #76	; 0x4c
 800819c:	ecbd 8b04 	vpop	{d8-d9}
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	4b8b      	ldr	r3, [pc, #556]	; (80083d4 <_dtoa_r+0x2dc>)
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	3303      	adds	r3, #3
 80081aa:	e7f3      	b.n	8008194 <_dtoa_r+0x9c>
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	f7f8 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b8:	ec4b ab19 	vmov	d9, sl, fp
 80081bc:	4680      	mov	r8, r0
 80081be:	b158      	cbz	r0, 80081d8 <_dtoa_r+0xe0>
 80081c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c2:	2301      	movs	r3, #1
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 856b 	beq.w	8008ca4 <_dtoa_r+0xbac>
 80081ce:	4883      	ldr	r0, [pc, #524]	; (80083dc <_dtoa_r+0x2e4>)
 80081d0:	6018      	str	r0, [r3, #0]
 80081d2:	1e43      	subs	r3, r0, #1
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	e7df      	b.n	8008198 <_dtoa_r+0xa0>
 80081d8:	ec4b ab10 	vmov	d0, sl, fp
 80081dc:	aa10      	add	r2, sp, #64	; 0x40
 80081de:	a911      	add	r1, sp, #68	; 0x44
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 ff33 	bl	800a04c <__d2b>
 80081e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081ea:	ee08 0a10 	vmov	s16, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	f000 8084 	beq.w	80082fc <_dtoa_r+0x204>
 80081f4:	ee19 3a90 	vmov	r3, s19
 80081f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008200:	4656      	mov	r6, sl
 8008202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800820a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800820e:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <_dtoa_r+0x2e8>)
 8008210:	2200      	movs	r2, #0
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f837 	bl	8000288 <__aeabi_dsub>
 800821a:	a365      	add	r3, pc, #404	; (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	a364      	add	r3, pc, #400	; (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f82f 	bl	800028c <__adddf3>
 800822e:	4606      	mov	r6, r0
 8008230:	4628      	mov	r0, r5
 8008232:	460f      	mov	r7, r1
 8008234:	f7f8 f976 	bl	8000524 <__aeabi_i2d>
 8008238:	a361      	add	r3, pc, #388	; (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9db 	bl	80005f8 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 f81f 	bl	800028c <__adddf3>
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	f7f8 fc81 	bl	8000b58 <__aeabi_d2iz>
 8008256:	2200      	movs	r2, #0
 8008258:	9000      	str	r0, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8008264:	b150      	cbz	r0, 800827c <_dtoa_r+0x184>
 8008266:	9800      	ldr	r0, [sp, #0]
 8008268:	f7f8 f95c 	bl	8000524 <__aeabi_i2d>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	f7f8 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008274:	b910      	cbnz	r0, 800827c <_dtoa_r+0x184>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	2b16      	cmp	r3, #22
 8008280:	d85a      	bhi.n	8008338 <_dtoa_r+0x240>
 8008282:	9a00      	ldr	r2, [sp, #0]
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <_dtoa_r+0x2ec>)
 8008286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	ec51 0b19 	vmov	r0, r1, d9
 8008292:	f7f8 fc23 	bl	8000adc <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d050      	beq.n	800833c <_dtoa_r+0x244>
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	1b5d      	subs	r5, r3, r5
 80082a8:	1e6b      	subs	r3, r5, #1
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	bf45      	ittet	mi
 80082ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80082b2:	9304      	strmi	r3, [sp, #16]
 80082b4:	2300      	movpl	r3, #0
 80082b6:	2300      	movmi	r3, #0
 80082b8:	bf4c      	ite	mi
 80082ba:	9305      	strmi	r3, [sp, #20]
 80082bc:	9304      	strpl	r3, [sp, #16]
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db3d      	blt.n	8008340 <_dtoa_r+0x248>
 80082c4:	9b05      	ldr	r3, [sp, #20]
 80082c6:	9a00      	ldr	r2, [sp, #0]
 80082c8:	920a      	str	r2, [sp, #40]	; 0x28
 80082ca:	4413      	add	r3, r2
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9307      	str	r3, [sp, #28]
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	f200 8089 	bhi.w	80083ec <_dtoa_r+0x2f4>
 80082da:	2b05      	cmp	r3, #5
 80082dc:	bfc4      	itt	gt
 80082de:	3b04      	subgt	r3, #4
 80082e0:	9306      	strgt	r3, [sp, #24]
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	f1a3 0302 	sub.w	r3, r3, #2
 80082e8:	bfcc      	ite	gt
 80082ea:	2500      	movgt	r5, #0
 80082ec:	2501      	movle	r5, #1
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f200 8087 	bhi.w	8008402 <_dtoa_r+0x30a>
 80082f4:	e8df f003 	tbb	[pc, r3]
 80082f8:	59383a2d 	.word	0x59383a2d
 80082fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008300:	441d      	add	r5, r3
 8008302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008306:	2b20      	cmp	r3, #32
 8008308:	bfc1      	itttt	gt
 800830a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800830e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008312:	fa0b f303 	lslgt.w	r3, fp, r3
 8008316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800831a:	bfda      	itte	le
 800831c:	f1c3 0320 	rsble	r3, r3, #32
 8008320:	fa06 f003 	lslle.w	r0, r6, r3
 8008324:	4318      	orrgt	r0, r3
 8008326:	f7f8 f8ed 	bl	8000504 <__aeabi_ui2d>
 800832a:	2301      	movs	r3, #1
 800832c:	4606      	mov	r6, r0
 800832e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008332:	3d01      	subs	r5, #1
 8008334:	930e      	str	r3, [sp, #56]	; 0x38
 8008336:	e76a      	b.n	800820e <_dtoa_r+0x116>
 8008338:	2301      	movs	r3, #1
 800833a:	e7b2      	b.n	80082a2 <_dtoa_r+0x1aa>
 800833c:	900b      	str	r0, [sp, #44]	; 0x2c
 800833e:	e7b1      	b.n	80082a4 <_dtoa_r+0x1ac>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	4253      	negs	r3, r2
 800834a:	9307      	str	r3, [sp, #28]
 800834c:	2300      	movs	r3, #0
 800834e:	930a      	str	r3, [sp, #40]	; 0x28
 8008350:	e7bf      	b.n	80082d2 <_dtoa_r+0x1da>
 8008352:	2300      	movs	r3, #0
 8008354:	9308      	str	r3, [sp, #32]
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc55      	bgt.n	8008408 <_dtoa_r+0x310>
 800835c:	2301      	movs	r3, #1
 800835e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008362:	461a      	mov	r2, r3
 8008364:	9209      	str	r2, [sp, #36]	; 0x24
 8008366:	e00c      	b.n	8008382 <_dtoa_r+0x28a>
 8008368:	2301      	movs	r3, #1
 800836a:	e7f3      	b.n	8008354 <_dtoa_r+0x25c>
 800836c:	2300      	movs	r3, #0
 800836e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	4413      	add	r3, r2
 8008376:	9302      	str	r3, [sp, #8]
 8008378:	3301      	adds	r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	bfb8      	it	lt
 8008380:	2301      	movlt	r3, #1
 8008382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008384:	2200      	movs	r2, #0
 8008386:	6042      	str	r2, [r0, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	f102 0614 	add.w	r6, r2, #20
 800838e:	429e      	cmp	r6, r3
 8008390:	6841      	ldr	r1, [r0, #4]
 8008392:	d93d      	bls.n	8008410 <_dtoa_r+0x318>
 8008394:	4620      	mov	r0, r4
 8008396:	f001 fa6b 	bl	8009870 <_Balloc>
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	2800      	cmp	r0, #0
 800839e:	d13b      	bne.n	8008418 <_dtoa_r+0x320>
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <_dtoa_r+0x2f0>)
 80083a2:	4602      	mov	r2, r0
 80083a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083a8:	e6c0      	b.n	800812c <_dtoa_r+0x34>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7df      	b.n	800836e <_dtoa_r+0x276>
 80083ae:	bf00      	nop
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800b186 	.word	0x0800b186
 80083cc:	0800b19d 	.word	0x0800b19d
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800b182 	.word	0x0800b182
 80083d8:	0800b179 	.word	0x0800b179
 80083dc:	0800affd 	.word	0x0800affd
 80083e0:	3ff80000 	.word	0x3ff80000
 80083e4:	0800b370 	.word	0x0800b370
 80083e8:	0800b1f8 	.word	0x0800b1f8
 80083ec:	2501      	movs	r5, #1
 80083ee:	2300      	movs	r3, #0
 80083f0:	9306      	str	r3, [sp, #24]
 80083f2:	9508      	str	r5, [sp, #32]
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2312      	movs	r3, #18
 8008400:	e7b0      	b.n	8008364 <_dtoa_r+0x26c>
 8008402:	2301      	movs	r3, #1
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	e7f5      	b.n	80083f4 <_dtoa_r+0x2fc>
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800840e:	e7b8      	b.n	8008382 <_dtoa_r+0x28a>
 8008410:	3101      	adds	r1, #1
 8008412:	6041      	str	r1, [r0, #4]
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	e7b8      	b.n	800838a <_dtoa_r+0x292>
 8008418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800841a:	9a01      	ldr	r2, [sp, #4]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	2b0e      	cmp	r3, #14
 8008422:	f200 809d 	bhi.w	8008560 <_dtoa_r+0x468>
 8008426:	2d00      	cmp	r5, #0
 8008428:	f000 809a 	beq.w	8008560 <_dtoa_r+0x468>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd32      	ble.n	8008498 <_dtoa_r+0x3a0>
 8008432:	4ab7      	ldr	r2, [pc, #732]	; (8008710 <_dtoa_r+0x618>)
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800843c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	05d8      	lsls	r0, r3, #23
 8008444:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008448:	d516      	bpl.n	8008478 <_dtoa_r+0x380>
 800844a:	4bb2      	ldr	r3, [pc, #712]	; (8008714 <_dtoa_r+0x61c>)
 800844c:	ec51 0b19 	vmov	r0, r1, d9
 8008450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008454:	f7f8 f9fa 	bl	800084c <__aeabi_ddiv>
 8008458:	f007 070f 	and.w	r7, r7, #15
 800845c:	4682      	mov	sl, r0
 800845e:	468b      	mov	fp, r1
 8008460:	2503      	movs	r5, #3
 8008462:	4eac      	ldr	r6, [pc, #688]	; (8008714 <_dtoa_r+0x61c>)
 8008464:	b957      	cbnz	r7, 800847c <_dtoa_r+0x384>
 8008466:	4642      	mov	r2, r8
 8008468:	464b      	mov	r3, r9
 800846a:	4650      	mov	r0, sl
 800846c:	4659      	mov	r1, fp
 800846e:	f7f8 f9ed 	bl	800084c <__aeabi_ddiv>
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	e028      	b.n	80084ca <_dtoa_r+0x3d2>
 8008478:	2502      	movs	r5, #2
 800847a:	e7f2      	b.n	8008462 <_dtoa_r+0x36a>
 800847c:	07f9      	lsls	r1, r7, #31
 800847e:	d508      	bpl.n	8008492 <_dtoa_r+0x39a>
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	3501      	adds	r5, #1
 800848e:	4680      	mov	r8, r0
 8008490:	4689      	mov	r9, r1
 8008492:	107f      	asrs	r7, r7, #1
 8008494:	3608      	adds	r6, #8
 8008496:	e7e5      	b.n	8008464 <_dtoa_r+0x36c>
 8008498:	f000 809b 	beq.w	80085d2 <_dtoa_r+0x4da>
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	4f9d      	ldr	r7, [pc, #628]	; (8008714 <_dtoa_r+0x61c>)
 80084a0:	425e      	negs	r6, r3
 80084a2:	4b9b      	ldr	r3, [pc, #620]	; (8008710 <_dtoa_r+0x618>)
 80084a4:	f006 020f 	and.w	r2, r6, #15
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	ec51 0b19 	vmov	r0, r1, d9
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	1136      	asrs	r6, r6, #4
 80084ba:	4682      	mov	sl, r0
 80084bc:	468b      	mov	fp, r1
 80084be:	2300      	movs	r3, #0
 80084c0:	2502      	movs	r5, #2
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d17a      	bne.n	80085bc <_dtoa_r+0x4c4>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1d3      	bne.n	8008472 <_dtoa_r+0x37a>
 80084ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8082 	beq.w	80085d6 <_dtoa_r+0x4de>
 80084d2:	4b91      	ldr	r3, [pc, #580]	; (8008718 <_dtoa_r+0x620>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	f7f8 faff 	bl	8000adc <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d079      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d076      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd36      	ble.n	800855c <_dtoa_r+0x464>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	1e5f      	subs	r7, r3, #1
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b88      	ldr	r3, [pc, #544]	; (800871c <_dtoa_r+0x624>)
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	9e02      	ldr	r6, [sp, #8]
 8008500:	4682      	mov	sl, r0
 8008502:	468b      	mov	fp, r1
 8008504:	3501      	adds	r5, #1
 8008506:	4628      	mov	r0, r5
 8008508:	f7f8 f80c 	bl	8000524 <__aeabi_i2d>
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	4b82      	ldr	r3, [pc, #520]	; (8008720 <_dtoa_r+0x628>)
 8008516:	2200      	movs	r2, #0
 8008518:	f7f7 feb8 	bl	800028c <__adddf3>
 800851c:	46d0      	mov	r8, sl
 800851e:	46d9      	mov	r9, fp
 8008520:	4682      	mov	sl, r0
 8008522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008526:	2e00      	cmp	r6, #0
 8008528:	d158      	bne.n	80085dc <_dtoa_r+0x4e4>
 800852a:	4b7e      	ldr	r3, [pc, #504]	; (8008724 <_dtoa_r+0x62c>)
 800852c:	2200      	movs	r2, #0
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f7 fea9 	bl	8000288 <__aeabi_dsub>
 8008536:	4652      	mov	r2, sl
 8008538:	465b      	mov	r3, fp
 800853a:	4680      	mov	r8, r0
 800853c:	4689      	mov	r9, r1
 800853e:	f7f8 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	f040 8295 	bne.w	8008a72 <_dtoa_r+0x97a>
 8008548:	4652      	mov	r2, sl
 800854a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f8 fac3 	bl	8000adc <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8289 	bne.w	8008a6e <_dtoa_r+0x976>
 800855c:	ec5b ab19 	vmov	sl, fp, d9
 8008560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008562:	2b00      	cmp	r3, #0
 8008564:	f2c0 8148 	blt.w	80087f8 <_dtoa_r+0x700>
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	2a0e      	cmp	r2, #14
 800856c:	f300 8144 	bgt.w	80087f8 <_dtoa_r+0x700>
 8008570:	4b67      	ldr	r3, [pc, #412]	; (8008710 <_dtoa_r+0x618>)
 8008572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	f280 80d5 	bge.w	800872c <_dtoa_r+0x634>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f300 80d1 	bgt.w	800872c <_dtoa_r+0x634>
 800858a:	f040 826f 	bne.w	8008a6c <_dtoa_r+0x974>
 800858e:	4b65      	ldr	r3, [pc, #404]	; (8008724 <_dtoa_r+0x62c>)
 8008590:	2200      	movs	r2, #0
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f8 fab1 	bl	8000b04 <__aeabi_dcmpge>
 80085a2:	9e03      	ldr	r6, [sp, #12]
 80085a4:	4637      	mov	r7, r6
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 8245 	bne.w	8008a36 <_dtoa_r+0x93e>
 80085ac:	9d01      	ldr	r5, [sp, #4]
 80085ae:	2331      	movs	r3, #49	; 0x31
 80085b0:	f805 3b01 	strb.w	r3, [r5], #1
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	e240      	b.n	8008a3e <_dtoa_r+0x946>
 80085bc:	07f2      	lsls	r2, r6, #31
 80085be:	d505      	bpl.n	80085cc <_dtoa_r+0x4d4>
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	f7f8 f818 	bl	80005f8 <__aeabi_dmul>
 80085c8:	3501      	adds	r5, #1
 80085ca:	2301      	movs	r3, #1
 80085cc:	1076      	asrs	r6, r6, #1
 80085ce:	3708      	adds	r7, #8
 80085d0:	e777      	b.n	80084c2 <_dtoa_r+0x3ca>
 80085d2:	2502      	movs	r5, #2
 80085d4:	e779      	b.n	80084ca <_dtoa_r+0x3d2>
 80085d6:	9f00      	ldr	r7, [sp, #0]
 80085d8:	9e03      	ldr	r6, [sp, #12]
 80085da:	e794      	b.n	8008506 <_dtoa_r+0x40e>
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <_dtoa_r+0x618>)
 80085e0:	4431      	add	r1, r6
 80085e2:	910d      	str	r1, [sp, #52]	; 0x34
 80085e4:	9908      	ldr	r1, [sp, #32]
 80085e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d043      	beq.n	800867a <_dtoa_r+0x582>
 80085f2:	494d      	ldr	r1, [pc, #308]	; (8008728 <_dtoa_r+0x630>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7f8 f929 	bl	800084c <__aeabi_ddiv>
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	f7f7 fe43 	bl	8000288 <__aeabi_dsub>
 8008602:	9d01      	ldr	r5, [sp, #4]
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	4649      	mov	r1, r9
 800860a:	4640      	mov	r0, r8
 800860c:	f7f8 faa4 	bl	8000b58 <__aeabi_d2iz>
 8008610:	4606      	mov	r6, r0
 8008612:	f7f7 ff87 	bl	8000524 <__aeabi_i2d>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fe33 	bl	8000288 <__aeabi_dsub>
 8008622:	3630      	adds	r6, #48	; 0x30
 8008624:	f805 6b01 	strb.w	r6, [r5], #1
 8008628:	4652      	mov	r2, sl
 800862a:	465b      	mov	r3, fp
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	f7f8 fa54 	bl	8000adc <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	d163      	bne.n	8008700 <_dtoa_r+0x608>
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	4936      	ldr	r1, [pc, #216]	; (8008718 <_dtoa_r+0x620>)
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 fe22 	bl	8000288 <__aeabi_dsub>
 8008644:	4652      	mov	r2, sl
 8008646:	465b      	mov	r3, fp
 8008648:	f7f8 fa48 	bl	8000adc <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 80b5 	bne.w	80087bc <_dtoa_r+0x6c4>
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	429d      	cmp	r5, r3
 8008656:	d081      	beq.n	800855c <_dtoa_r+0x464>
 8008658:	4b30      	ldr	r3, [pc, #192]	; (800871c <_dtoa_r+0x624>)
 800865a:	2200      	movs	r2, #0
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	4b2d      	ldr	r3, [pc, #180]	; (800871c <_dtoa_r+0x624>)
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	2200      	movs	r2, #0
 8008670:	f7f7 ffc2 	bl	80005f8 <__aeabi_dmul>
 8008674:	4680      	mov	r8, r0
 8008676:	4689      	mov	r9, r1
 8008678:	e7c6      	b.n	8008608 <_dtoa_r+0x510>
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	9d01      	ldr	r5, [sp, #4]
 8008686:	930f      	str	r3, [sp, #60]	; 0x3c
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	4649      	mov	r1, r9
 800868e:	4640      	mov	r0, r8
 8008690:	f7f8 fa62 	bl	8000b58 <__aeabi_d2iz>
 8008694:	4606      	mov	r6, r0
 8008696:	f7f7 ff45 	bl	8000524 <__aeabi_i2d>
 800869a:	3630      	adds	r6, #48	; 0x30
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f7 fdf0 	bl	8000288 <__aeabi_dsub>
 80086a8:	f805 6b01 	strb.w	r6, [r5], #1
 80086ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ae:	429d      	cmp	r5, r3
 80086b0:	4680      	mov	r8, r0
 80086b2:	4689      	mov	r9, r1
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	d124      	bne.n	8008704 <_dtoa_r+0x60c>
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <_dtoa_r+0x630>)
 80086bc:	4650      	mov	r0, sl
 80086be:	4659      	mov	r1, fp
 80086c0:	f7f7 fde4 	bl	800028c <__adddf3>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f8 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d173      	bne.n	80087bc <_dtoa_r+0x6c4>
 80086d4:	4652      	mov	r2, sl
 80086d6:	465b      	mov	r3, fp
 80086d8:	4913      	ldr	r1, [pc, #76]	; (8008728 <_dtoa_r+0x630>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f7 fdd4 	bl	8000288 <__aeabi_dsub>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f8 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f43f af35 	beq.w	800855c <_dtoa_r+0x464>
 80086f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086f4:	1e6b      	subs	r3, r5, #1
 80086f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d0f8      	beq.n	80086f2 <_dtoa_r+0x5fa>
 8008700:	9700      	str	r7, [sp, #0]
 8008702:	e049      	b.n	8008798 <_dtoa_r+0x6a0>
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <_dtoa_r+0x624>)
 8008706:	f7f7 ff77 	bl	80005f8 <__aeabi_dmul>
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	e7bd      	b.n	800868c <_dtoa_r+0x594>
 8008710:	0800b370 	.word	0x0800b370
 8008714:	0800b348 	.word	0x0800b348
 8008718:	3ff00000 	.word	0x3ff00000
 800871c:	40240000 	.word	0x40240000
 8008720:	401c0000 	.word	0x401c0000
 8008724:	40140000 	.word	0x40140000
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	9d01      	ldr	r5, [sp, #4]
 800872e:	4656      	mov	r6, sl
 8008730:	465f      	mov	r7, fp
 8008732:	4642      	mov	r2, r8
 8008734:	464b      	mov	r3, r9
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f8 f887 	bl	800084c <__aeabi_ddiv>
 800873e:	f7f8 fa0b 	bl	8000b58 <__aeabi_d2iz>
 8008742:	4682      	mov	sl, r0
 8008744:	f7f7 feee 	bl	8000524 <__aeabi_i2d>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f7f7 ff54 	bl	80005f8 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800875c:	f7f7 fd94 	bl	8000288 <__aeabi_dsub>
 8008760:	f805 6b01 	strb.w	r6, [r5], #1
 8008764:	9e01      	ldr	r6, [sp, #4]
 8008766:	9f03      	ldr	r7, [sp, #12]
 8008768:	1bae      	subs	r6, r5, r6
 800876a:	42b7      	cmp	r7, r6
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	d135      	bne.n	80087de <_dtoa_r+0x6e6>
 8008772:	f7f7 fd8b 	bl	800028c <__adddf3>
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	f7f8 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8008782:	b9d0      	cbnz	r0, 80087ba <_dtoa_r+0x6c2>
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008790:	b110      	cbz	r0, 8008798 <_dtoa_r+0x6a0>
 8008792:	f01a 0f01 	tst.w	sl, #1
 8008796:	d110      	bne.n	80087ba <_dtoa_r+0x6c2>
 8008798:	4620      	mov	r0, r4
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	f001 f8a7 	bl	80098f0 <_Bfree>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9800      	ldr	r0, [sp, #0]
 80087a6:	702b      	strb	r3, [r5, #0]
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	3001      	adds	r0, #1
 80087ac:	6018      	str	r0, [r3, #0]
 80087ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f43f acf1 	beq.w	8008198 <_dtoa_r+0xa0>
 80087b6:	601d      	str	r5, [r3, #0]
 80087b8:	e4ee      	b.n	8008198 <_dtoa_r+0xa0>
 80087ba:	9f00      	ldr	r7, [sp, #0]
 80087bc:	462b      	mov	r3, r5
 80087be:	461d      	mov	r5, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a39      	cmp	r2, #57	; 0x39
 80087c6:	d106      	bne.n	80087d6 <_dtoa_r+0x6de>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d1f7      	bne.n	80087be <_dtoa_r+0x6c6>
 80087ce:	9901      	ldr	r1, [sp, #4]
 80087d0:	2230      	movs	r2, #48	; 0x30
 80087d2:	3701      	adds	r7, #1
 80087d4:	700a      	strb	r2, [r1, #0]
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e790      	b.n	8008700 <_dtoa_r+0x608>
 80087de:	4ba6      	ldr	r3, [pc, #664]	; (8008a78 <_dtoa_r+0x980>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7f7 ff09 	bl	80005f8 <__aeabi_dmul>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	f7f8 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d09d      	beq.n	8008732 <_dtoa_r+0x63a>
 80087f6:	e7cf      	b.n	8008798 <_dtoa_r+0x6a0>
 80087f8:	9a08      	ldr	r2, [sp, #32]
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	f000 80d7 	beq.w	80089ae <_dtoa_r+0x8b6>
 8008800:	9a06      	ldr	r2, [sp, #24]
 8008802:	2a01      	cmp	r2, #1
 8008804:	f300 80ba 	bgt.w	800897c <_dtoa_r+0x884>
 8008808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80b2 	beq.w	8008974 <_dtoa_r+0x87c>
 8008810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008814:	9e07      	ldr	r6, [sp, #28]
 8008816:	9d04      	ldr	r5, [sp, #16]
 8008818:	9a04      	ldr	r2, [sp, #16]
 800881a:	441a      	add	r2, r3
 800881c:	9204      	str	r2, [sp, #16]
 800881e:	9a05      	ldr	r2, [sp, #20]
 8008820:	2101      	movs	r1, #1
 8008822:	441a      	add	r2, r3
 8008824:	4620      	mov	r0, r4
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	f001 f964 	bl	8009af4 <__i2b>
 800882c:	4607      	mov	r7, r0
 800882e:	2d00      	cmp	r5, #0
 8008830:	dd0c      	ble.n	800884c <_dtoa_r+0x754>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd09      	ble.n	800884c <_dtoa_r+0x754>
 8008838:	42ab      	cmp	r3, r5
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	bfa8      	it	ge
 800883e:	462b      	movge	r3, r5
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	9204      	str	r2, [sp, #16]
 8008844:	9a05      	ldr	r2, [sp, #20]
 8008846:	1aed      	subs	r5, r5, r3
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	9b07      	ldr	r3, [sp, #28]
 800884e:	b31b      	cbz	r3, 8008898 <_dtoa_r+0x7a0>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 80af 	beq.w	80089b6 <_dtoa_r+0x8be>
 8008858:	2e00      	cmp	r6, #0
 800885a:	dd13      	ble.n	8008884 <_dtoa_r+0x78c>
 800885c:	4639      	mov	r1, r7
 800885e:	4632      	mov	r2, r6
 8008860:	4620      	mov	r0, r4
 8008862:	f001 fa07 	bl	8009c74 <__pow5mult>
 8008866:	ee18 2a10 	vmov	r2, s16
 800886a:	4601      	mov	r1, r0
 800886c:	4607      	mov	r7, r0
 800886e:	4620      	mov	r0, r4
 8008870:	f001 f956 	bl	8009b20 <__multiply>
 8008874:	ee18 1a10 	vmov	r1, s16
 8008878:	4680      	mov	r8, r0
 800887a:	4620      	mov	r0, r4
 800887c:	f001 f838 	bl	80098f0 <_Bfree>
 8008880:	ee08 8a10 	vmov	s16, r8
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	1b9a      	subs	r2, r3, r6
 8008888:	d006      	beq.n	8008898 <_dtoa_r+0x7a0>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	4620      	mov	r0, r4
 8008890:	f001 f9f0 	bl	8009c74 <__pow5mult>
 8008894:	ee08 0a10 	vmov	s16, r0
 8008898:	2101      	movs	r1, #1
 800889a:	4620      	mov	r0, r4
 800889c:	f001 f92a 	bl	8009af4 <__i2b>
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	4606      	mov	r6, r0
 80088a6:	f340 8088 	ble.w	80089ba <_dtoa_r+0x8c2>
 80088aa:	461a      	mov	r2, r3
 80088ac:	4601      	mov	r1, r0
 80088ae:	4620      	mov	r0, r4
 80088b0:	f001 f9e0 	bl	8009c74 <__pow5mult>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	4606      	mov	r6, r0
 80088ba:	f340 8081 	ble.w	80089c0 <_dtoa_r+0x8c8>
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	6933      	ldr	r3, [r6, #16]
 80088c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088c8:	6918      	ldr	r0, [r3, #16]
 80088ca:	f001 f8c3 	bl	8009a54 <__hi0bits>
 80088ce:	f1c0 0020 	rsb	r0, r0, #32
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	4418      	add	r0, r3
 80088d6:	f010 001f 	ands.w	r0, r0, #31
 80088da:	f000 8092 	beq.w	8008a02 <_dtoa_r+0x90a>
 80088de:	f1c0 0320 	rsb	r3, r0, #32
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	f340 808a 	ble.w	80089fc <_dtoa_r+0x904>
 80088e8:	f1c0 001c 	rsb	r0, r0, #28
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4403      	add	r3, r0
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	4403      	add	r3, r0
 80088f6:	4405      	add	r5, r0
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd07      	ble.n	8008910 <_dtoa_r+0x818>
 8008900:	ee18 1a10 	vmov	r1, s16
 8008904:	461a      	mov	r2, r3
 8008906:	4620      	mov	r0, r4
 8008908:	f001 fa0e 	bl	8009d28 <__lshift>
 800890c:	ee08 0a10 	vmov	s16, r0
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x82a>
 8008916:	4631      	mov	r1, r6
 8008918:	461a      	mov	r2, r3
 800891a:	4620      	mov	r0, r4
 800891c:	f001 fa04 	bl	8009d28 <__lshift>
 8008920:	4606      	mov	r6, r0
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d06e      	beq.n	8008a06 <_dtoa_r+0x90e>
 8008928:	ee18 0a10 	vmov	r0, s16
 800892c:	4631      	mov	r1, r6
 800892e:	f001 fa6b 	bl	8009e08 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	da67      	bge.n	8008a06 <_dtoa_r+0x90e>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	ee18 1a10 	vmov	r1, s16
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	220a      	movs	r2, #10
 8008942:	2300      	movs	r3, #0
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fff5 	bl	8009934 <__multadd>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	ee08 0a10 	vmov	s16, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 81b1 	beq.w	8008cb8 <_dtoa_r+0xbc0>
 8008956:	2300      	movs	r3, #0
 8008958:	4639      	mov	r1, r7
 800895a:	220a      	movs	r2, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f000 ffe9 	bl	8009934 <__multadd>
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	4607      	mov	r7, r0
 8008968:	f300 808e 	bgt.w	8008a88 <_dtoa_r+0x990>
 800896c:	9b06      	ldr	r3, [sp, #24]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc51      	bgt.n	8008a16 <_dtoa_r+0x91e>
 8008972:	e089      	b.n	8008a88 <_dtoa_r+0x990>
 8008974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897a:	e74b      	b.n	8008814 <_dtoa_r+0x71c>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1e5e      	subs	r6, r3, #1
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	42b3      	cmp	r3, r6
 8008984:	bfbf      	itttt	lt
 8008986:	9b07      	ldrlt	r3, [sp, #28]
 8008988:	9607      	strlt	r6, [sp, #28]
 800898a:	1af2      	sublt	r2, r6, r3
 800898c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800898e:	bfb6      	itet	lt
 8008990:	189b      	addlt	r3, r3, r2
 8008992:	1b9e      	subge	r6, r3, r6
 8008994:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	bfb8      	it	lt
 800899a:	2600      	movlt	r6, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb7      	itett	lt
 80089a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089a8:	1a9d      	sublt	r5, r3, r2
 80089aa:	2300      	movlt	r3, #0
 80089ac:	e734      	b.n	8008818 <_dtoa_r+0x720>
 80089ae:	9e07      	ldr	r6, [sp, #28]
 80089b0:	9d04      	ldr	r5, [sp, #16]
 80089b2:	9f08      	ldr	r7, [sp, #32]
 80089b4:	e73b      	b.n	800882e <_dtoa_r+0x736>
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	e767      	b.n	800888a <_dtoa_r+0x792>
 80089ba:	9b06      	ldr	r3, [sp, #24]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	dc18      	bgt.n	80089f2 <_dtoa_r+0x8fa>
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d115      	bne.n	80089f2 <_dtoa_r+0x8fa>
 80089c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ca:	b993      	cbnz	r3, 80089f2 <_dtoa_r+0x8fa>
 80089cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	b183      	cbz	r3, 80089f8 <_dtoa_r+0x900>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	3301      	adds	r3, #1
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	f04f 0801 	mov.w	r8, #1
 80089e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f af6a 	bne.w	80088c2 <_dtoa_r+0x7ca>
 80089ee:	2001      	movs	r0, #1
 80089f0:	e76f      	b.n	80088d2 <_dtoa_r+0x7da>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	e7f6      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089f8:	4698      	mov	r8, r3
 80089fa:	e7f4      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089fc:	f43f af7d 	beq.w	80088fa <_dtoa_r+0x802>
 8008a00:	4618      	mov	r0, r3
 8008a02:	301c      	adds	r0, #28
 8008a04:	e772      	b.n	80088ec <_dtoa_r+0x7f4>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc37      	bgt.n	8008a7c <_dtoa_r+0x984>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dd34      	ble.n	8008a7c <_dtoa_r+0x984>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	b96b      	cbnz	r3, 8008a36 <_dtoa_r+0x93e>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 ff88 	bl	8009934 <__multadd>
 8008a24:	4601      	mov	r1, r0
 8008a26:	4606      	mov	r6, r0
 8008a28:	ee18 0a10 	vmov	r0, s16
 8008a2c:	f001 f9ec 	bl	8009e08 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f73f adbb 	bgt.w	80085ac <_dtoa_r+0x4b4>
 8008a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a38:	9d01      	ldr	r5, [sp, #4]
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	4631      	mov	r1, r6
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 ff53 	bl	80098f0 <_Bfree>
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	f43f aea4 	beq.w	8008798 <_dtoa_r+0x6a0>
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d005      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a56:	45b8      	cmp	r8, r7
 8008a58:	d003      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 ff47 	bl	80098f0 <_Bfree>
 8008a62:	4639      	mov	r1, r7
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 ff43 	bl	80098f0 <_Bfree>
 8008a6a:	e695      	b.n	8008798 <_dtoa_r+0x6a0>
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	4637      	mov	r7, r6
 8008a70:	e7e1      	b.n	8008a36 <_dtoa_r+0x93e>
 8008a72:	9700      	str	r7, [sp, #0]
 8008a74:	4637      	mov	r7, r6
 8008a76:	e599      	b.n	80085ac <_dtoa_r+0x4b4>
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80ca 	beq.w	8008c18 <_dtoa_r+0xb20>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	dd05      	ble.n	8008a98 <_dtoa_r+0x9a0>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 f949 	bl	8009d28 <__lshift>
 8008a96:	4607      	mov	r7, r0
 8008a98:	f1b8 0f00 	cmp.w	r8, #0
 8008a9c:	d05b      	beq.n	8008b56 <_dtoa_r+0xa5e>
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fee5 	bl	8009870 <_Balloc>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <_dtoa_r+0x9be>
 8008aaa:	4b87      	ldr	r3, [pc, #540]	; (8008cc8 <_dtoa_r+0xbd0>)
 8008aac:	4602      	mov	r2, r0
 8008aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ab2:	f7ff bb3b 	b.w	800812c <_dtoa_r+0x34>
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	3202      	adds	r2, #2
 8008aba:	0092      	lsls	r2, r2, #2
 8008abc:	f107 010c 	add.w	r1, r7, #12
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	f000 fec7 	bl	8009854 <memcpy>
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4620      	mov	r0, r4
 8008acc:	f001 f92c 	bl	8009d28 <__lshift>
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	f103 0901 	add.w	r9, r3, #1
 8008ad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	f00a 0301 	and.w	r3, sl, #1
 8008ae2:	46b8      	mov	r8, r7
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	4631      	mov	r1, r6
 8008aea:	ee18 0a10 	vmov	r0, s16
 8008aee:	f7ff fa75 	bl	8007fdc <quorem>
 8008af2:	4641      	mov	r1, r8
 8008af4:	9002      	str	r0, [sp, #8]
 8008af6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	f001 f983 	bl	8009e08 <__mcmp>
 8008b02:	463a      	mov	r2, r7
 8008b04:	9003      	str	r0, [sp, #12]
 8008b06:	4631      	mov	r1, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f001 f999 	bl	8009e40 <__mdiff>
 8008b0e:	68c2      	ldr	r2, [r0, #12]
 8008b10:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b14:	4605      	mov	r5, r0
 8008b16:	bb02      	cbnz	r2, 8008b5a <_dtoa_r+0xa62>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f001 f973 	bl	8009e08 <__mcmp>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	f000 fee1 	bl	80098f0 <_Bfree>
 8008b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b32:	ea43 0102 	orr.w	r1, r3, r2
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	464d      	mov	r5, r9
 8008b3c:	d10f      	bne.n	8008b5e <_dtoa_r+0xa66>
 8008b3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b42:	d02a      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dd02      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b50:	f88b a000 	strb.w	sl, [fp]
 8008b54:	e775      	b.n	8008a42 <_dtoa_r+0x94a>
 8008b56:	4638      	mov	r0, r7
 8008b58:	e7ba      	b.n	8008ad0 <_dtoa_r+0x9d8>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	e7e2      	b.n	8008b24 <_dtoa_r+0xa2c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db04      	blt.n	8008b6e <_dtoa_r+0xa76>
 8008b64:	9906      	ldr	r1, [sp, #24]
 8008b66:	430b      	orrs	r3, r1
 8008b68:	9904      	ldr	r1, [sp, #16]
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	d122      	bne.n	8008bb4 <_dtoa_r+0xabc>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	ddee      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b72:	ee18 1a10 	vmov	r1, s16
 8008b76:	2201      	movs	r2, #1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f001 f8d5 	bl	8009d28 <__lshift>
 8008b7e:	4631      	mov	r1, r6
 8008b80:	ee08 0a10 	vmov	s16, r0
 8008b84:	f001 f940 	bl	8009e08 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dc03      	bgt.n	8008b94 <_dtoa_r+0xa9c>
 8008b8c:	d1e0      	bne.n	8008b50 <_dtoa_r+0xa58>
 8008b8e:	f01a 0f01 	tst.w	sl, #1
 8008b92:	d0dd      	beq.n	8008b50 <_dtoa_r+0xa58>
 8008b94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b98:	d1d7      	bne.n	8008b4a <_dtoa_r+0xa52>
 8008b9a:	2339      	movs	r3, #57	; 0x39
 8008b9c:	f88b 3000 	strb.w	r3, [fp]
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	461d      	mov	r5, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008baa:	2a39      	cmp	r2, #57	; 0x39
 8008bac:	d071      	beq.n	8008c92 <_dtoa_r+0xb9a>
 8008bae:	3201      	adds	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e746      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	dd07      	ble.n	8008bc8 <_dtoa_r+0xad0>
 8008bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bbc:	d0ed      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008bbe:	f10a 0301 	add.w	r3, sl, #1
 8008bc2:	f88b 3000 	strb.w	r3, [fp]
 8008bc6:	e73c      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bc8:	9b05      	ldr	r3, [sp, #20]
 8008bca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bce:	4599      	cmp	r9, r3
 8008bd0:	d047      	beq.n	8008c62 <_dtoa_r+0xb6a>
 8008bd2:	ee18 1a10 	vmov	r1, s16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 feaa 	bl	8009934 <__multadd>
 8008be0:	45b8      	cmp	r8, r7
 8008be2:	ee08 0a10 	vmov	s16, r0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	f04f 020a 	mov.w	r2, #10
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	d106      	bne.n	8008c02 <_dtoa_r+0xb0a>
 8008bf4:	f000 fe9e 	bl	8009934 <__multadd>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	f109 0901 	add.w	r9, r9, #1
 8008c00:	e772      	b.n	8008ae8 <_dtoa_r+0x9f0>
 8008c02:	f000 fe97 	bl	8009934 <__multadd>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4680      	mov	r8, r0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 fe90 	bl	8009934 <__multadd>
 8008c14:	4607      	mov	r7, r0
 8008c16:	e7f1      	b.n	8008bfc <_dtoa_r+0xb04>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	9302      	str	r3, [sp, #8]
 8008c1c:	9d01      	ldr	r5, [sp, #4]
 8008c1e:	ee18 0a10 	vmov	r0, s16
 8008c22:	4631      	mov	r1, r6
 8008c24:	f7ff f9da 	bl	8007fdc <quorem>
 8008c28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c32:	1aea      	subs	r2, r5, r3
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	dd09      	ble.n	8008c4e <_dtoa_r+0xb56>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fe76 	bl	8009934 <__multadd>
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	e7e7      	b.n	8008c1e <_dtoa_r+0xb26>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfc8      	it	gt
 8008c54:	461d      	movgt	r5, r3
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	bfd8      	it	le
 8008c5a:	2501      	movle	r5, #1
 8008c5c:	441d      	add	r5, r3
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2201      	movs	r2, #1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 f85d 	bl	8009d28 <__lshift>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	f001 f8c8 	bl	8009e08 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc91      	bgt.n	8008ba0 <_dtoa_r+0xaa8>
 8008c7c:	d102      	bne.n	8008c84 <_dtoa_r+0xb8c>
 8008c7e:	f01a 0f01 	tst.w	sl, #1
 8008c82:	d18d      	bne.n	8008ba0 <_dtoa_r+0xaa8>
 8008c84:	462b      	mov	r3, r5
 8008c86:	461d      	mov	r5, r3
 8008c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8c:	2a30      	cmp	r2, #48	; 0x30
 8008c8e:	d0fa      	beq.n	8008c86 <_dtoa_r+0xb8e>
 8008c90:	e6d7      	b.n	8008a42 <_dtoa_r+0x94a>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d184      	bne.n	8008ba2 <_dtoa_r+0xaaa>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2331      	movs	r3, #49	; 0x31
 8008ca0:	7013      	strb	r3, [r2, #0]
 8008ca2:	e6ce      	b.n	8008a42 <_dtoa_r+0x94a>
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <_dtoa_r+0xbd4>)
 8008ca6:	f7ff ba95 	b.w	80081d4 <_dtoa_r+0xdc>
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aa6e 	bne.w	800818e <_dtoa_r+0x96>
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <_dtoa_r+0xbd8>)
 8008cb4:	f7ff ba8e 	b.w	80081d4 <_dtoa_r+0xdc>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dcae      	bgt.n	8008c1c <_dtoa_r+0xb24>
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f73f aea8 	bgt.w	8008a16 <_dtoa_r+0x91e>
 8008cc6:	e7a9      	b.n	8008c1c <_dtoa_r+0xb24>
 8008cc8:	0800b1f8 	.word	0x0800b1f8
 8008ccc:	0800affc 	.word	0x0800affc
 8008cd0:	0800b179 	.word	0x0800b179

08008cd4 <__sflush_r>:
 8008cd4:	898a      	ldrh	r2, [r1, #12]
 8008cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cda:	4605      	mov	r5, r0
 8008cdc:	0710      	lsls	r0, r2, #28
 8008cde:	460c      	mov	r4, r1
 8008ce0:	d458      	bmi.n	8008d94 <__sflush_r+0xc0>
 8008ce2:	684b      	ldr	r3, [r1, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dc05      	bgt.n	8008cf4 <__sflush_r+0x20>
 8008ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dc02      	bgt.n	8008cf4 <__sflush_r+0x20>
 8008cee:	2000      	movs	r0, #0
 8008cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	d0f9      	beq.n	8008cee <__sflush_r+0x1a>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d00:	682f      	ldr	r7, [r5, #0]
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	d032      	beq.n	8008d6c <__sflush_r+0x98>
 8008d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	075a      	lsls	r2, r3, #29
 8008d0c:	d505      	bpl.n	8008d1a <__sflush_r+0x46>
 8008d0e:	6863      	ldr	r3, [r4, #4]
 8008d10:	1ac0      	subs	r0, r0, r3
 8008d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d14:	b10b      	cbz	r3, 8008d1a <__sflush_r+0x46>
 8008d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d18:	1ac0      	subs	r0, r0, r3
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d20:	6a21      	ldr	r1, [r4, #32]
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b0      	blx	r6
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	d106      	bne.n	8008d3a <__sflush_r+0x66>
 8008d2c:	6829      	ldr	r1, [r5, #0]
 8008d2e:	291d      	cmp	r1, #29
 8008d30:	d82c      	bhi.n	8008d8c <__sflush_r+0xb8>
 8008d32:	4a2a      	ldr	r2, [pc, #168]	; (8008ddc <__sflush_r+0x108>)
 8008d34:	40ca      	lsrs	r2, r1
 8008d36:	07d6      	lsls	r6, r2, #31
 8008d38:	d528      	bpl.n	8008d8c <__sflush_r+0xb8>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	6062      	str	r2, [r4, #4]
 8008d3e:	04d9      	lsls	r1, r3, #19
 8008d40:	6922      	ldr	r2, [r4, #16]
 8008d42:	6022      	str	r2, [r4, #0]
 8008d44:	d504      	bpl.n	8008d50 <__sflush_r+0x7c>
 8008d46:	1c42      	adds	r2, r0, #1
 8008d48:	d101      	bne.n	8008d4e <__sflush_r+0x7a>
 8008d4a:	682b      	ldr	r3, [r5, #0]
 8008d4c:	b903      	cbnz	r3, 8008d50 <__sflush_r+0x7c>
 8008d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8008d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d52:	602f      	str	r7, [r5, #0]
 8008d54:	2900      	cmp	r1, #0
 8008d56:	d0ca      	beq.n	8008cee <__sflush_r+0x1a>
 8008d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	d002      	beq.n	8008d66 <__sflush_r+0x92>
 8008d60:	4628      	mov	r0, r5
 8008d62:	f001 fa5d 	bl	800a220 <_free_r>
 8008d66:	2000      	movs	r0, #0
 8008d68:	6360      	str	r0, [r4, #52]	; 0x34
 8008d6a:	e7c1      	b.n	8008cf0 <__sflush_r+0x1c>
 8008d6c:	6a21      	ldr	r1, [r4, #32]
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b0      	blx	r6
 8008d74:	1c41      	adds	r1, r0, #1
 8008d76:	d1c7      	bne.n	8008d08 <__sflush_r+0x34>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0c4      	beq.n	8008d08 <__sflush_r+0x34>
 8008d7e:	2b1d      	cmp	r3, #29
 8008d80:	d001      	beq.n	8008d86 <__sflush_r+0xb2>
 8008d82:	2b16      	cmp	r3, #22
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0xb6>
 8008d86:	602f      	str	r7, [r5, #0]
 8008d88:	e7b1      	b.n	8008cee <__sflush_r+0x1a>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	e7ad      	b.n	8008cf0 <__sflush_r+0x1c>
 8008d94:	690f      	ldr	r7, [r1, #16]
 8008d96:	2f00      	cmp	r7, #0
 8008d98:	d0a9      	beq.n	8008cee <__sflush_r+0x1a>
 8008d9a:	0793      	lsls	r3, r2, #30
 8008d9c:	680e      	ldr	r6, [r1, #0]
 8008d9e:	bf08      	it	eq
 8008da0:	694b      	ldreq	r3, [r1, #20]
 8008da2:	600f      	str	r7, [r1, #0]
 8008da4:	bf18      	it	ne
 8008da6:	2300      	movne	r3, #0
 8008da8:	eba6 0807 	sub.w	r8, r6, r7
 8008dac:	608b      	str	r3, [r1, #8]
 8008dae:	f1b8 0f00 	cmp.w	r8, #0
 8008db2:	dd9c      	ble.n	8008cee <__sflush_r+0x1a>
 8008db4:	6a21      	ldr	r1, [r4, #32]
 8008db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008db8:	4643      	mov	r3, r8
 8008dba:	463a      	mov	r2, r7
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b0      	blx	r6
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	dc06      	bgt.n	8008dd2 <__sflush_r+0xfe>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	e78e      	b.n	8008cf0 <__sflush_r+0x1c>
 8008dd2:	4407      	add	r7, r0
 8008dd4:	eba8 0800 	sub.w	r8, r8, r0
 8008dd8:	e7e9      	b.n	8008dae <__sflush_r+0xda>
 8008dda:	bf00      	nop
 8008ddc:	20400001 	.word	0x20400001

08008de0 <_fflush_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	690b      	ldr	r3, [r1, #16]
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	b913      	cbnz	r3, 8008df0 <_fflush_r+0x10>
 8008dea:	2500      	movs	r5, #0
 8008dec:	4628      	mov	r0, r5
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	b118      	cbz	r0, 8008dfa <_fflush_r+0x1a>
 8008df2:	6983      	ldr	r3, [r0, #24]
 8008df4:	b90b      	cbnz	r3, 8008dfa <_fflush_r+0x1a>
 8008df6:	f000 f887 	bl	8008f08 <__sinit>
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <_fflush_r+0x6c>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	d11b      	bne.n	8008e38 <_fflush_r+0x58>
 8008e00:	686c      	ldr	r4, [r5, #4]
 8008e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0ef      	beq.n	8008dea <_fflush_r+0xa>
 8008e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e0c:	07d0      	lsls	r0, r2, #31
 8008e0e:	d404      	bmi.n	8008e1a <_fflush_r+0x3a>
 8008e10:	0599      	lsls	r1, r3, #22
 8008e12:	d402      	bmi.n	8008e1a <_fflush_r+0x3a>
 8008e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e16:	f000 fc88 	bl	800972a <__retarget_lock_acquire_recursive>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f7ff ff59 	bl	8008cd4 <__sflush_r>
 8008e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e24:	07da      	lsls	r2, r3, #31
 8008e26:	4605      	mov	r5, r0
 8008e28:	d4e0      	bmi.n	8008dec <_fflush_r+0xc>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	059b      	lsls	r3, r3, #22
 8008e2e:	d4dd      	bmi.n	8008dec <_fflush_r+0xc>
 8008e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e32:	f000 fc7b 	bl	800972c <__retarget_lock_release_recursive>
 8008e36:	e7d9      	b.n	8008dec <_fflush_r+0xc>
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <_fflush_r+0x70>)
 8008e3a:	429c      	cmp	r4, r3
 8008e3c:	d101      	bne.n	8008e42 <_fflush_r+0x62>
 8008e3e:	68ac      	ldr	r4, [r5, #8]
 8008e40:	e7df      	b.n	8008e02 <_fflush_r+0x22>
 8008e42:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <_fflush_r+0x74>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	bf08      	it	eq
 8008e48:	68ec      	ldreq	r4, [r5, #12]
 8008e4a:	e7da      	b.n	8008e02 <_fflush_r+0x22>
 8008e4c:	0800b22c 	.word	0x0800b22c
 8008e50:	0800b24c 	.word	0x0800b24c
 8008e54:	0800b20c 	.word	0x0800b20c

08008e58 <std>:
 8008e58:	2300      	movs	r3, #0
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e66:	6083      	str	r3, [r0, #8]
 8008e68:	8181      	strh	r1, [r0, #12]
 8008e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e6c:	81c2      	strh	r2, [r0, #14]
 8008e6e:	6183      	str	r3, [r0, #24]
 8008e70:	4619      	mov	r1, r3
 8008e72:	2208      	movs	r2, #8
 8008e74:	305c      	adds	r0, #92	; 0x5c
 8008e76:	f7fd f995 	bl	80061a4 <memset>
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <std+0x38>)
 8008e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <std+0x3c>)
 8008e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <std+0x40>)
 8008e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e86:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <std+0x44>)
 8008e88:	6224      	str	r4, [r4, #32]
 8008e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	bf00      	nop
 8008e90:	08007011 	.word	0x08007011
 8008e94:	08007033 	.word	0x08007033
 8008e98:	0800706b 	.word	0x0800706b
 8008e9c:	0800708f 	.word	0x0800708f

08008ea0 <_cleanup_r>:
 8008ea0:	4901      	ldr	r1, [pc, #4]	; (8008ea8 <_cleanup_r+0x8>)
 8008ea2:	f000 b8af 	b.w	8009004 <_fwalk_reent>
 8008ea6:	bf00      	nop
 8008ea8:	08008de1 	.word	0x08008de1

08008eac <__sfmoreglue>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	2268      	movs	r2, #104	; 0x68
 8008eb0:	1e4d      	subs	r5, r1, #1
 8008eb2:	4355      	muls	r5, r2
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eba:	f001 fa1d 	bl	800a2f8 <_malloc_r>
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	b140      	cbz	r0, 8008ed4 <__sfmoreglue+0x28>
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ec8:	300c      	adds	r0, #12
 8008eca:	60a0      	str	r0, [r4, #8]
 8008ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ed0:	f7fd f968 	bl	80061a4 <memset>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}

08008ed8 <__sfp_lock_acquire>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__sfp_lock_acquire+0x8>)
 8008eda:	f000 bc26 	b.w	800972a <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	20000889 	.word	0x20000889

08008ee4 <__sfp_lock_release>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__sfp_lock_release+0x8>)
 8008ee6:	f000 bc21 	b.w	800972c <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	20000889 	.word	0x20000889

08008ef0 <__sinit_lock_acquire>:
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <__sinit_lock_acquire+0x8>)
 8008ef2:	f000 bc1a 	b.w	800972a <__retarget_lock_acquire_recursive>
 8008ef6:	bf00      	nop
 8008ef8:	2000088a 	.word	0x2000088a

08008efc <__sinit_lock_release>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__sinit_lock_release+0x8>)
 8008efe:	f000 bc15 	b.w	800972c <__retarget_lock_release_recursive>
 8008f02:	bf00      	nop
 8008f04:	2000088a 	.word	0x2000088a

08008f08 <__sinit>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	f7ff fff0 	bl	8008ef0 <__sinit_lock_acquire>
 8008f10:	69a3      	ldr	r3, [r4, #24]
 8008f12:	b11b      	cbz	r3, 8008f1c <__sinit+0x14>
 8008f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f18:	f7ff bff0 	b.w	8008efc <__sinit_lock_release>
 8008f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f20:	6523      	str	r3, [r4, #80]	; 0x50
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <__sinit+0x68>)
 8008f24:	4a13      	ldr	r2, [pc, #76]	; (8008f74 <__sinit+0x6c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	bf04      	itt	eq
 8008f2e:	2301      	moveq	r3, #1
 8008f30:	61a3      	streq	r3, [r4, #24]
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f820 	bl	8008f78 <__sfp>
 8008f38:	6060      	str	r0, [r4, #4]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 f81c 	bl	8008f78 <__sfp>
 8008f40:	60a0      	str	r0, [r4, #8]
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f818 	bl	8008f78 <__sfp>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	60e0      	str	r0, [r4, #12]
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	6860      	ldr	r0, [r4, #4]
 8008f50:	f7ff ff82 	bl	8008e58 <std>
 8008f54:	68a0      	ldr	r0, [r4, #8]
 8008f56:	2201      	movs	r2, #1
 8008f58:	2109      	movs	r1, #9
 8008f5a:	f7ff ff7d 	bl	8008e58 <std>
 8008f5e:	68e0      	ldr	r0, [r4, #12]
 8008f60:	2202      	movs	r2, #2
 8008f62:	2112      	movs	r1, #18
 8008f64:	f7ff ff78 	bl	8008e58 <std>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	61a3      	str	r3, [r4, #24]
 8008f6c:	e7d2      	b.n	8008f14 <__sinit+0xc>
 8008f6e:	bf00      	nop
 8008f70:	0800afe8 	.word	0x0800afe8
 8008f74:	08008ea1 	.word	0x08008ea1

08008f78 <__sfp>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	f7ff ffac 	bl	8008ed8 <__sfp_lock_acquire>
 8008f80:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <__sfp+0x84>)
 8008f82:	681e      	ldr	r6, [r3, #0]
 8008f84:	69b3      	ldr	r3, [r6, #24]
 8008f86:	b913      	cbnz	r3, 8008f8e <__sfp+0x16>
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff ffbd 	bl	8008f08 <__sinit>
 8008f8e:	3648      	adds	r6, #72	; 0x48
 8008f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	d503      	bpl.n	8008fa0 <__sfp+0x28>
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	b30b      	cbz	r3, 8008fe0 <__sfp+0x68>
 8008f9c:	6836      	ldr	r6, [r6, #0]
 8008f9e:	e7f7      	b.n	8008f90 <__sfp+0x18>
 8008fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fa4:	b9d5      	cbnz	r5, 8008fdc <__sfp+0x64>
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <__sfp+0x88>)
 8008fa8:	60e3      	str	r3, [r4, #12]
 8008faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fae:	6665      	str	r5, [r4, #100]	; 0x64
 8008fb0:	f000 fbba 	bl	8009728 <__retarget_lock_init_recursive>
 8008fb4:	f7ff ff96 	bl	8008ee4 <__sfp_lock_release>
 8008fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fc0:	6025      	str	r5, [r4, #0]
 8008fc2:	61a5      	str	r5, [r4, #24]
 8008fc4:	2208      	movs	r2, #8
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fcc:	f7fd f8ea 	bl	80061a4 <memset>
 8008fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fd8:	4620      	mov	r0, r4
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fdc:	3468      	adds	r4, #104	; 0x68
 8008fde:	e7d9      	b.n	8008f94 <__sfp+0x1c>
 8008fe0:	2104      	movs	r1, #4
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f7ff ff62 	bl	8008eac <__sfmoreglue>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	6030      	str	r0, [r6, #0]
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1d5      	bne.n	8008f9c <__sfp+0x24>
 8008ff0:	f7ff ff78 	bl	8008ee4 <__sfp_lock_release>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	e7ee      	b.n	8008fd8 <__sfp+0x60>
 8008ffa:	bf00      	nop
 8008ffc:	0800afe8 	.word	0x0800afe8
 8009000:	ffff0001 	.word	0xffff0001

08009004 <_fwalk_reent>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	4606      	mov	r6, r0
 800900a:	4688      	mov	r8, r1
 800900c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009010:	2700      	movs	r7, #0
 8009012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009016:	f1b9 0901 	subs.w	r9, r9, #1
 800901a:	d505      	bpl.n	8009028 <_fwalk_reent+0x24>
 800901c:	6824      	ldr	r4, [r4, #0]
 800901e:	2c00      	cmp	r4, #0
 8009020:	d1f7      	bne.n	8009012 <_fwalk_reent+0xe>
 8009022:	4638      	mov	r0, r7
 8009024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d907      	bls.n	800903e <_fwalk_reent+0x3a>
 800902e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009032:	3301      	adds	r3, #1
 8009034:	d003      	beq.n	800903e <_fwalk_reent+0x3a>
 8009036:	4629      	mov	r1, r5
 8009038:	4630      	mov	r0, r6
 800903a:	47c0      	blx	r8
 800903c:	4307      	orrs	r7, r0
 800903e:	3568      	adds	r5, #104	; 0x68
 8009040:	e7e9      	b.n	8009016 <_fwalk_reent+0x12>

08009042 <rshift>:
 8009042:	6903      	ldr	r3, [r0, #16]
 8009044:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800904c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009050:	f100 0414 	add.w	r4, r0, #20
 8009054:	dd45      	ble.n	80090e2 <rshift+0xa0>
 8009056:	f011 011f 	ands.w	r1, r1, #31
 800905a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800905e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009062:	d10c      	bne.n	800907e <rshift+0x3c>
 8009064:	f100 0710 	add.w	r7, r0, #16
 8009068:	4629      	mov	r1, r5
 800906a:	42b1      	cmp	r1, r6
 800906c:	d334      	bcc.n	80090d8 <rshift+0x96>
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	1eea      	subs	r2, r5, #3
 8009074:	4296      	cmp	r6, r2
 8009076:	bf38      	it	cc
 8009078:	2300      	movcc	r3, #0
 800907a:	4423      	add	r3, r4
 800907c:	e015      	b.n	80090aa <rshift+0x68>
 800907e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009082:	f1c1 0820 	rsb	r8, r1, #32
 8009086:	40cf      	lsrs	r7, r1
 8009088:	f105 0e04 	add.w	lr, r5, #4
 800908c:	46a1      	mov	r9, r4
 800908e:	4576      	cmp	r6, lr
 8009090:	46f4      	mov	ip, lr
 8009092:	d815      	bhi.n	80090c0 <rshift+0x7e>
 8009094:	1a9a      	subs	r2, r3, r2
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	3a04      	subs	r2, #4
 800909a:	3501      	adds	r5, #1
 800909c:	42ae      	cmp	r6, r5
 800909e:	bf38      	it	cc
 80090a0:	2200      	movcc	r2, #0
 80090a2:	18a3      	adds	r3, r4, r2
 80090a4:	50a7      	str	r7, [r4, r2]
 80090a6:	b107      	cbz	r7, 80090aa <rshift+0x68>
 80090a8:	3304      	adds	r3, #4
 80090aa:	1b1a      	subs	r2, r3, r4
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090b2:	bf08      	it	eq
 80090b4:	2300      	moveq	r3, #0
 80090b6:	6102      	str	r2, [r0, #16]
 80090b8:	bf08      	it	eq
 80090ba:	6143      	streq	r3, [r0, #20]
 80090bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090c0:	f8dc c000 	ldr.w	ip, [ip]
 80090c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80090c8:	ea4c 0707 	orr.w	r7, ip, r7
 80090cc:	f849 7b04 	str.w	r7, [r9], #4
 80090d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090d4:	40cf      	lsrs	r7, r1
 80090d6:	e7da      	b.n	800908e <rshift+0x4c>
 80090d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80090dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80090e0:	e7c3      	b.n	800906a <rshift+0x28>
 80090e2:	4623      	mov	r3, r4
 80090e4:	e7e1      	b.n	80090aa <rshift+0x68>

080090e6 <__hexdig_fun>:
 80090e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090ea:	2b09      	cmp	r3, #9
 80090ec:	d802      	bhi.n	80090f4 <__hexdig_fun+0xe>
 80090ee:	3820      	subs	r0, #32
 80090f0:	b2c0      	uxtb	r0, r0
 80090f2:	4770      	bx	lr
 80090f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090f8:	2b05      	cmp	r3, #5
 80090fa:	d801      	bhi.n	8009100 <__hexdig_fun+0x1a>
 80090fc:	3847      	subs	r0, #71	; 0x47
 80090fe:	e7f7      	b.n	80090f0 <__hexdig_fun+0xa>
 8009100:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009104:	2b05      	cmp	r3, #5
 8009106:	d801      	bhi.n	800910c <__hexdig_fun+0x26>
 8009108:	3827      	subs	r0, #39	; 0x27
 800910a:	e7f1      	b.n	80090f0 <__hexdig_fun+0xa>
 800910c:	2000      	movs	r0, #0
 800910e:	4770      	bx	lr

08009110 <__gethex>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	ed2d 8b02 	vpush	{d8}
 8009118:	b089      	sub	sp, #36	; 0x24
 800911a:	ee08 0a10 	vmov	s16, r0
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	4bb4      	ldr	r3, [pc, #720]	; (80093f4 <__gethex+0x2e4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	4618      	mov	r0, r3
 8009128:	468b      	mov	fp, r1
 800912a:	4690      	mov	r8, r2
 800912c:	f7f7 f850 	bl	80001d0 <strlen>
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	f8db 2000 	ldr.w	r2, [fp]
 8009136:	4403      	add	r3, r0
 8009138:	4682      	mov	sl, r0
 800913a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	1c93      	adds	r3, r2, #2
 8009142:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009146:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800914a:	32fe      	adds	r2, #254	; 0xfe
 800914c:	18d1      	adds	r1, r2, r3
 800914e:	461f      	mov	r7, r3
 8009150:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009154:	9100      	str	r1, [sp, #0]
 8009156:	2830      	cmp	r0, #48	; 0x30
 8009158:	d0f8      	beq.n	800914c <__gethex+0x3c>
 800915a:	f7ff ffc4 	bl	80090e6 <__hexdig_fun>
 800915e:	4604      	mov	r4, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d13a      	bne.n	80091da <__gethex+0xca>
 8009164:	9901      	ldr	r1, [sp, #4]
 8009166:	4652      	mov	r2, sl
 8009168:	4638      	mov	r0, r7
 800916a:	f7fd ff94 	bl	8007096 <strncmp>
 800916e:	4605      	mov	r5, r0
 8009170:	2800      	cmp	r0, #0
 8009172:	d168      	bne.n	8009246 <__gethex+0x136>
 8009174:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009178:	eb07 060a 	add.w	r6, r7, sl
 800917c:	f7ff ffb3 	bl	80090e6 <__hexdig_fun>
 8009180:	2800      	cmp	r0, #0
 8009182:	d062      	beq.n	800924a <__gethex+0x13a>
 8009184:	4633      	mov	r3, r6
 8009186:	7818      	ldrb	r0, [r3, #0]
 8009188:	2830      	cmp	r0, #48	; 0x30
 800918a:	461f      	mov	r7, r3
 800918c:	f103 0301 	add.w	r3, r3, #1
 8009190:	d0f9      	beq.n	8009186 <__gethex+0x76>
 8009192:	f7ff ffa8 	bl	80090e6 <__hexdig_fun>
 8009196:	2301      	movs	r3, #1
 8009198:	fab0 f480 	clz	r4, r0
 800919c:	0964      	lsrs	r4, r4, #5
 800919e:	4635      	mov	r5, r6
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	463a      	mov	r2, r7
 80091a4:	4616      	mov	r6, r2
 80091a6:	3201      	adds	r2, #1
 80091a8:	7830      	ldrb	r0, [r6, #0]
 80091aa:	f7ff ff9c 	bl	80090e6 <__hexdig_fun>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1f8      	bne.n	80091a4 <__gethex+0x94>
 80091b2:	9901      	ldr	r1, [sp, #4]
 80091b4:	4652      	mov	r2, sl
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7fd ff6d 	bl	8007096 <strncmp>
 80091bc:	b980      	cbnz	r0, 80091e0 <__gethex+0xd0>
 80091be:	b94d      	cbnz	r5, 80091d4 <__gethex+0xc4>
 80091c0:	eb06 050a 	add.w	r5, r6, sl
 80091c4:	462a      	mov	r2, r5
 80091c6:	4616      	mov	r6, r2
 80091c8:	3201      	adds	r2, #1
 80091ca:	7830      	ldrb	r0, [r6, #0]
 80091cc:	f7ff ff8b 	bl	80090e6 <__hexdig_fun>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1f8      	bne.n	80091c6 <__gethex+0xb6>
 80091d4:	1bad      	subs	r5, r5, r6
 80091d6:	00ad      	lsls	r5, r5, #2
 80091d8:	e004      	b.n	80091e4 <__gethex+0xd4>
 80091da:	2400      	movs	r4, #0
 80091dc:	4625      	mov	r5, r4
 80091de:	e7e0      	b.n	80091a2 <__gethex+0x92>
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	d1f7      	bne.n	80091d4 <__gethex+0xc4>
 80091e4:	7833      	ldrb	r3, [r6, #0]
 80091e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091ea:	2b50      	cmp	r3, #80	; 0x50
 80091ec:	d13b      	bne.n	8009266 <__gethex+0x156>
 80091ee:	7873      	ldrb	r3, [r6, #1]
 80091f0:	2b2b      	cmp	r3, #43	; 0x2b
 80091f2:	d02c      	beq.n	800924e <__gethex+0x13e>
 80091f4:	2b2d      	cmp	r3, #45	; 0x2d
 80091f6:	d02e      	beq.n	8009256 <__gethex+0x146>
 80091f8:	1c71      	adds	r1, r6, #1
 80091fa:	f04f 0900 	mov.w	r9, #0
 80091fe:	7808      	ldrb	r0, [r1, #0]
 8009200:	f7ff ff71 	bl	80090e6 <__hexdig_fun>
 8009204:	1e43      	subs	r3, r0, #1
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b18      	cmp	r3, #24
 800920a:	d82c      	bhi.n	8009266 <__gethex+0x156>
 800920c:	f1a0 0210 	sub.w	r2, r0, #16
 8009210:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009214:	f7ff ff67 	bl	80090e6 <__hexdig_fun>
 8009218:	1e43      	subs	r3, r0, #1
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b18      	cmp	r3, #24
 800921e:	d91d      	bls.n	800925c <__gethex+0x14c>
 8009220:	f1b9 0f00 	cmp.w	r9, #0
 8009224:	d000      	beq.n	8009228 <__gethex+0x118>
 8009226:	4252      	negs	r2, r2
 8009228:	4415      	add	r5, r2
 800922a:	f8cb 1000 	str.w	r1, [fp]
 800922e:	b1e4      	cbz	r4, 800926a <__gethex+0x15a>
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf14      	ite	ne
 8009236:	2700      	movne	r7, #0
 8009238:	2706      	moveq	r7, #6
 800923a:	4638      	mov	r0, r7
 800923c:	b009      	add	sp, #36	; 0x24
 800923e:	ecbd 8b02 	vpop	{d8}
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	463e      	mov	r6, r7
 8009248:	4625      	mov	r5, r4
 800924a:	2401      	movs	r4, #1
 800924c:	e7ca      	b.n	80091e4 <__gethex+0xd4>
 800924e:	f04f 0900 	mov.w	r9, #0
 8009252:	1cb1      	adds	r1, r6, #2
 8009254:	e7d3      	b.n	80091fe <__gethex+0xee>
 8009256:	f04f 0901 	mov.w	r9, #1
 800925a:	e7fa      	b.n	8009252 <__gethex+0x142>
 800925c:	230a      	movs	r3, #10
 800925e:	fb03 0202 	mla	r2, r3, r2, r0
 8009262:	3a10      	subs	r2, #16
 8009264:	e7d4      	b.n	8009210 <__gethex+0x100>
 8009266:	4631      	mov	r1, r6
 8009268:	e7df      	b.n	800922a <__gethex+0x11a>
 800926a:	1bf3      	subs	r3, r6, r7
 800926c:	3b01      	subs	r3, #1
 800926e:	4621      	mov	r1, r4
 8009270:	2b07      	cmp	r3, #7
 8009272:	dc0b      	bgt.n	800928c <__gethex+0x17c>
 8009274:	ee18 0a10 	vmov	r0, s16
 8009278:	f000 fafa 	bl	8009870 <_Balloc>
 800927c:	4604      	mov	r4, r0
 800927e:	b940      	cbnz	r0, 8009292 <__gethex+0x182>
 8009280:	4b5d      	ldr	r3, [pc, #372]	; (80093f8 <__gethex+0x2e8>)
 8009282:	4602      	mov	r2, r0
 8009284:	21de      	movs	r1, #222	; 0xde
 8009286:	485d      	ldr	r0, [pc, #372]	; (80093fc <__gethex+0x2ec>)
 8009288:	f001 fb98 	bl	800a9bc <__assert_func>
 800928c:	3101      	adds	r1, #1
 800928e:	105b      	asrs	r3, r3, #1
 8009290:	e7ee      	b.n	8009270 <__gethex+0x160>
 8009292:	f100 0914 	add.w	r9, r0, #20
 8009296:	f04f 0b00 	mov.w	fp, #0
 800929a:	f1ca 0301 	rsb	r3, sl, #1
 800929e:	f8cd 9008 	str.w	r9, [sp, #8]
 80092a2:	f8cd b000 	str.w	fp, [sp]
 80092a6:	9306      	str	r3, [sp, #24]
 80092a8:	42b7      	cmp	r7, r6
 80092aa:	d340      	bcc.n	800932e <__gethex+0x21e>
 80092ac:	9802      	ldr	r0, [sp, #8]
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	f840 3b04 	str.w	r3, [r0], #4
 80092b4:	eba0 0009 	sub.w	r0, r0, r9
 80092b8:	1080      	asrs	r0, r0, #2
 80092ba:	0146      	lsls	r6, r0, #5
 80092bc:	6120      	str	r0, [r4, #16]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fbc8 	bl	8009a54 <__hi0bits>
 80092c4:	1a30      	subs	r0, r6, r0
 80092c6:	f8d8 6000 	ldr.w	r6, [r8]
 80092ca:	42b0      	cmp	r0, r6
 80092cc:	dd63      	ble.n	8009396 <__gethex+0x286>
 80092ce:	1b87      	subs	r7, r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 ff6c 	bl	800a1b0 <__any_on>
 80092d8:	4682      	mov	sl, r0
 80092da:	b1a8      	cbz	r0, 8009308 <__gethex+0x1f8>
 80092dc:	1e7b      	subs	r3, r7, #1
 80092de:	1159      	asrs	r1, r3, #5
 80092e0:	f003 021f 	and.w	r2, r3, #31
 80092e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092e8:	f04f 0a01 	mov.w	sl, #1
 80092ec:	fa0a f202 	lsl.w	r2, sl, r2
 80092f0:	420a      	tst	r2, r1
 80092f2:	d009      	beq.n	8009308 <__gethex+0x1f8>
 80092f4:	4553      	cmp	r3, sl
 80092f6:	dd05      	ble.n	8009304 <__gethex+0x1f4>
 80092f8:	1eb9      	subs	r1, r7, #2
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 ff58 	bl	800a1b0 <__any_on>
 8009300:	2800      	cmp	r0, #0
 8009302:	d145      	bne.n	8009390 <__gethex+0x280>
 8009304:	f04f 0a02 	mov.w	sl, #2
 8009308:	4639      	mov	r1, r7
 800930a:	4620      	mov	r0, r4
 800930c:	f7ff fe99 	bl	8009042 <rshift>
 8009310:	443d      	add	r5, r7
 8009312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009316:	42ab      	cmp	r3, r5
 8009318:	da4c      	bge.n	80093b4 <__gethex+0x2a4>
 800931a:	ee18 0a10 	vmov	r0, s16
 800931e:	4621      	mov	r1, r4
 8009320:	f000 fae6 	bl	80098f0 <_Bfree>
 8009324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009326:	2300      	movs	r3, #0
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	27a3      	movs	r7, #163	; 0xa3
 800932c:	e785      	b.n	800923a <__gethex+0x12a>
 800932e:	1e73      	subs	r3, r6, #1
 8009330:	9a05      	ldr	r2, [sp, #20]
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009338:	4293      	cmp	r3, r2
 800933a:	d019      	beq.n	8009370 <__gethex+0x260>
 800933c:	f1bb 0f20 	cmp.w	fp, #32
 8009340:	d107      	bne.n	8009352 <__gethex+0x242>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	9a00      	ldr	r2, [sp, #0]
 8009346:	f843 2b04 	str.w	r2, [r3], #4
 800934a:	9302      	str	r3, [sp, #8]
 800934c:	2300      	movs	r3, #0
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	469b      	mov	fp, r3
 8009352:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009356:	f7ff fec6 	bl	80090e6 <__hexdig_fun>
 800935a:	9b00      	ldr	r3, [sp, #0]
 800935c:	f000 000f 	and.w	r0, r0, #15
 8009360:	fa00 f00b 	lsl.w	r0, r0, fp
 8009364:	4303      	orrs	r3, r0
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	f10b 0b04 	add.w	fp, fp, #4
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	e00d      	b.n	800938c <__gethex+0x27c>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	9a06      	ldr	r2, [sp, #24]
 8009374:	4413      	add	r3, r2
 8009376:	42bb      	cmp	r3, r7
 8009378:	d3e0      	bcc.n	800933c <__gethex+0x22c>
 800937a:	4618      	mov	r0, r3
 800937c:	9901      	ldr	r1, [sp, #4]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	4652      	mov	r2, sl
 8009382:	f7fd fe88 	bl	8007096 <strncmp>
 8009386:	9b07      	ldr	r3, [sp, #28]
 8009388:	2800      	cmp	r0, #0
 800938a:	d1d7      	bne.n	800933c <__gethex+0x22c>
 800938c:	461e      	mov	r6, r3
 800938e:	e78b      	b.n	80092a8 <__gethex+0x198>
 8009390:	f04f 0a03 	mov.w	sl, #3
 8009394:	e7b8      	b.n	8009308 <__gethex+0x1f8>
 8009396:	da0a      	bge.n	80093ae <__gethex+0x29e>
 8009398:	1a37      	subs	r7, r6, r0
 800939a:	4621      	mov	r1, r4
 800939c:	ee18 0a10 	vmov	r0, s16
 80093a0:	463a      	mov	r2, r7
 80093a2:	f000 fcc1 	bl	8009d28 <__lshift>
 80093a6:	1bed      	subs	r5, r5, r7
 80093a8:	4604      	mov	r4, r0
 80093aa:	f100 0914 	add.w	r9, r0, #20
 80093ae:	f04f 0a00 	mov.w	sl, #0
 80093b2:	e7ae      	b.n	8009312 <__gethex+0x202>
 80093b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80093b8:	42a8      	cmp	r0, r5
 80093ba:	dd72      	ble.n	80094a2 <__gethex+0x392>
 80093bc:	1b45      	subs	r5, r0, r5
 80093be:	42ae      	cmp	r6, r5
 80093c0:	dc36      	bgt.n	8009430 <__gethex+0x320>
 80093c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d02a      	beq.n	8009420 <__gethex+0x310>
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d02c      	beq.n	8009428 <__gethex+0x318>
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d11c      	bne.n	800940c <__gethex+0x2fc>
 80093d2:	42ae      	cmp	r6, r5
 80093d4:	d11a      	bne.n	800940c <__gethex+0x2fc>
 80093d6:	2e01      	cmp	r6, #1
 80093d8:	d112      	bne.n	8009400 <__gethex+0x2f0>
 80093da:	9a04      	ldr	r2, [sp, #16]
 80093dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	2301      	movs	r3, #1
 80093e4:	6123      	str	r3, [r4, #16]
 80093e6:	f8c9 3000 	str.w	r3, [r9]
 80093ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093ec:	2762      	movs	r7, #98	; 0x62
 80093ee:	601c      	str	r4, [r3, #0]
 80093f0:	e723      	b.n	800923a <__gethex+0x12a>
 80093f2:	bf00      	nop
 80093f4:	0800b2d4 	.word	0x0800b2d4
 80093f8:	0800b1f8 	.word	0x0800b1f8
 80093fc:	0800b26c 	.word	0x0800b26c
 8009400:	1e71      	subs	r1, r6, #1
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fed4 	bl	800a1b0 <__any_on>
 8009408:	2800      	cmp	r0, #0
 800940a:	d1e6      	bne.n	80093da <__gethex+0x2ca>
 800940c:	ee18 0a10 	vmov	r0, s16
 8009410:	4621      	mov	r1, r4
 8009412:	f000 fa6d 	bl	80098f0 <_Bfree>
 8009416:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009418:	2300      	movs	r3, #0
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	2750      	movs	r7, #80	; 0x50
 800941e:	e70c      	b.n	800923a <__gethex+0x12a>
 8009420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f2      	bne.n	800940c <__gethex+0x2fc>
 8009426:	e7d8      	b.n	80093da <__gethex+0x2ca>
 8009428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1d5      	bne.n	80093da <__gethex+0x2ca>
 800942e:	e7ed      	b.n	800940c <__gethex+0x2fc>
 8009430:	1e6f      	subs	r7, r5, #1
 8009432:	f1ba 0f00 	cmp.w	sl, #0
 8009436:	d131      	bne.n	800949c <__gethex+0x38c>
 8009438:	b127      	cbz	r7, 8009444 <__gethex+0x334>
 800943a:	4639      	mov	r1, r7
 800943c:	4620      	mov	r0, r4
 800943e:	f000 feb7 	bl	800a1b0 <__any_on>
 8009442:	4682      	mov	sl, r0
 8009444:	117b      	asrs	r3, r7, #5
 8009446:	2101      	movs	r1, #1
 8009448:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800944c:	f007 071f 	and.w	r7, r7, #31
 8009450:	fa01 f707 	lsl.w	r7, r1, r7
 8009454:	421f      	tst	r7, r3
 8009456:	4629      	mov	r1, r5
 8009458:	4620      	mov	r0, r4
 800945a:	bf18      	it	ne
 800945c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009460:	1b76      	subs	r6, r6, r5
 8009462:	f7ff fdee 	bl	8009042 <rshift>
 8009466:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800946a:	2702      	movs	r7, #2
 800946c:	f1ba 0f00 	cmp.w	sl, #0
 8009470:	d048      	beq.n	8009504 <__gethex+0x3f4>
 8009472:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009476:	2b02      	cmp	r3, #2
 8009478:	d015      	beq.n	80094a6 <__gethex+0x396>
 800947a:	2b03      	cmp	r3, #3
 800947c:	d017      	beq.n	80094ae <__gethex+0x39e>
 800947e:	2b01      	cmp	r3, #1
 8009480:	d109      	bne.n	8009496 <__gethex+0x386>
 8009482:	f01a 0f02 	tst.w	sl, #2
 8009486:	d006      	beq.n	8009496 <__gethex+0x386>
 8009488:	f8d9 0000 	ldr.w	r0, [r9]
 800948c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009490:	f01a 0f01 	tst.w	sl, #1
 8009494:	d10e      	bne.n	80094b4 <__gethex+0x3a4>
 8009496:	f047 0710 	orr.w	r7, r7, #16
 800949a:	e033      	b.n	8009504 <__gethex+0x3f4>
 800949c:	f04f 0a01 	mov.w	sl, #1
 80094a0:	e7d0      	b.n	8009444 <__gethex+0x334>
 80094a2:	2701      	movs	r7, #1
 80094a4:	e7e2      	b.n	800946c <__gethex+0x35c>
 80094a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a8:	f1c3 0301 	rsb	r3, r3, #1
 80094ac:	9315      	str	r3, [sp, #84]	; 0x54
 80094ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0f0      	beq.n	8009496 <__gethex+0x386>
 80094b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094b8:	f104 0314 	add.w	r3, r4, #20
 80094bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094c4:	f04f 0c00 	mov.w	ip, #0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094d2:	d01c      	beq.n	800950e <__gethex+0x3fe>
 80094d4:	3201      	adds	r2, #1
 80094d6:	6002      	str	r2, [r0, #0]
 80094d8:	2f02      	cmp	r7, #2
 80094da:	f104 0314 	add.w	r3, r4, #20
 80094de:	d13f      	bne.n	8009560 <__gethex+0x450>
 80094e0:	f8d8 2000 	ldr.w	r2, [r8]
 80094e4:	3a01      	subs	r2, #1
 80094e6:	42b2      	cmp	r2, r6
 80094e8:	d10a      	bne.n	8009500 <__gethex+0x3f0>
 80094ea:	1171      	asrs	r1, r6, #5
 80094ec:	2201      	movs	r2, #1
 80094ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094f2:	f006 061f 	and.w	r6, r6, #31
 80094f6:	fa02 f606 	lsl.w	r6, r2, r6
 80094fa:	421e      	tst	r6, r3
 80094fc:	bf18      	it	ne
 80094fe:	4617      	movne	r7, r2
 8009500:	f047 0720 	orr.w	r7, r7, #32
 8009504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009506:	601c      	str	r4, [r3, #0]
 8009508:	9b04      	ldr	r3, [sp, #16]
 800950a:	601d      	str	r5, [r3, #0]
 800950c:	e695      	b.n	800923a <__gethex+0x12a>
 800950e:	4299      	cmp	r1, r3
 8009510:	f843 cc04 	str.w	ip, [r3, #-4]
 8009514:	d8d8      	bhi.n	80094c8 <__gethex+0x3b8>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	459b      	cmp	fp, r3
 800951a:	db19      	blt.n	8009550 <__gethex+0x440>
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	ee18 0a10 	vmov	r0, s16
 8009522:	3101      	adds	r1, #1
 8009524:	f000 f9a4 	bl	8009870 <_Balloc>
 8009528:	4681      	mov	r9, r0
 800952a:	b918      	cbnz	r0, 8009534 <__gethex+0x424>
 800952c:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <__gethex+0x488>)
 800952e:	4602      	mov	r2, r0
 8009530:	2184      	movs	r1, #132	; 0x84
 8009532:	e6a8      	b.n	8009286 <__gethex+0x176>
 8009534:	6922      	ldr	r2, [r4, #16]
 8009536:	3202      	adds	r2, #2
 8009538:	f104 010c 	add.w	r1, r4, #12
 800953c:	0092      	lsls	r2, r2, #2
 800953e:	300c      	adds	r0, #12
 8009540:	f000 f988 	bl	8009854 <memcpy>
 8009544:	4621      	mov	r1, r4
 8009546:	ee18 0a10 	vmov	r0, s16
 800954a:	f000 f9d1 	bl	80098f0 <_Bfree>
 800954e:	464c      	mov	r4, r9
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009558:	6122      	str	r2, [r4, #16]
 800955a:	2201      	movs	r2, #1
 800955c:	615a      	str	r2, [r3, #20]
 800955e:	e7bb      	b.n	80094d8 <__gethex+0x3c8>
 8009560:	6922      	ldr	r2, [r4, #16]
 8009562:	455a      	cmp	r2, fp
 8009564:	dd0b      	ble.n	800957e <__gethex+0x46e>
 8009566:	2101      	movs	r1, #1
 8009568:	4620      	mov	r0, r4
 800956a:	f7ff fd6a 	bl	8009042 <rshift>
 800956e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009572:	3501      	adds	r5, #1
 8009574:	42ab      	cmp	r3, r5
 8009576:	f6ff aed0 	blt.w	800931a <__gethex+0x20a>
 800957a:	2701      	movs	r7, #1
 800957c:	e7c0      	b.n	8009500 <__gethex+0x3f0>
 800957e:	f016 061f 	ands.w	r6, r6, #31
 8009582:	d0fa      	beq.n	800957a <__gethex+0x46a>
 8009584:	4453      	add	r3, sl
 8009586:	f1c6 0620 	rsb	r6, r6, #32
 800958a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800958e:	f000 fa61 	bl	8009a54 <__hi0bits>
 8009592:	42b0      	cmp	r0, r6
 8009594:	dbe7      	blt.n	8009566 <__gethex+0x456>
 8009596:	e7f0      	b.n	800957a <__gethex+0x46a>
 8009598:	0800b1f8 	.word	0x0800b1f8

0800959c <L_shift>:
 800959c:	f1c2 0208 	rsb	r2, r2, #8
 80095a0:	0092      	lsls	r2, r2, #2
 80095a2:	b570      	push	{r4, r5, r6, lr}
 80095a4:	f1c2 0620 	rsb	r6, r2, #32
 80095a8:	6843      	ldr	r3, [r0, #4]
 80095aa:	6804      	ldr	r4, [r0, #0]
 80095ac:	fa03 f506 	lsl.w	r5, r3, r6
 80095b0:	432c      	orrs	r4, r5
 80095b2:	40d3      	lsrs	r3, r2
 80095b4:	6004      	str	r4, [r0, #0]
 80095b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80095ba:	4288      	cmp	r0, r1
 80095bc:	d3f4      	bcc.n	80095a8 <L_shift+0xc>
 80095be:	bd70      	pop	{r4, r5, r6, pc}

080095c0 <__match>:
 80095c0:	b530      	push	{r4, r5, lr}
 80095c2:	6803      	ldr	r3, [r0, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ca:	b914      	cbnz	r4, 80095d2 <__match+0x12>
 80095cc:	6003      	str	r3, [r0, #0]
 80095ce:	2001      	movs	r0, #1
 80095d0:	bd30      	pop	{r4, r5, pc}
 80095d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095da:	2d19      	cmp	r5, #25
 80095dc:	bf98      	it	ls
 80095de:	3220      	addls	r2, #32
 80095e0:	42a2      	cmp	r2, r4
 80095e2:	d0f0      	beq.n	80095c6 <__match+0x6>
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7f3      	b.n	80095d0 <__match+0x10>

080095e8 <__hexnan>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	680b      	ldr	r3, [r1, #0]
 80095ee:	115e      	asrs	r6, r3, #5
 80095f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095f4:	f013 031f 	ands.w	r3, r3, #31
 80095f8:	b087      	sub	sp, #28
 80095fa:	bf18      	it	ne
 80095fc:	3604      	addne	r6, #4
 80095fe:	2500      	movs	r5, #0
 8009600:	1f37      	subs	r7, r6, #4
 8009602:	4690      	mov	r8, r2
 8009604:	6802      	ldr	r2, [r0, #0]
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	4682      	mov	sl, r0
 800960a:	f846 5c04 	str.w	r5, [r6, #-4]
 800960e:	46b9      	mov	r9, r7
 8009610:	463c      	mov	r4, r7
 8009612:	9502      	str	r5, [sp, #8]
 8009614:	46ab      	mov	fp, r5
 8009616:	7851      	ldrb	r1, [r2, #1]
 8009618:	1c53      	adds	r3, r2, #1
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	b341      	cbz	r1, 8009670 <__hexnan+0x88>
 800961e:	4608      	mov	r0, r1
 8009620:	9205      	str	r2, [sp, #20]
 8009622:	9104      	str	r1, [sp, #16]
 8009624:	f7ff fd5f 	bl	80090e6 <__hexdig_fun>
 8009628:	2800      	cmp	r0, #0
 800962a:	d14f      	bne.n	80096cc <__hexnan+0xe4>
 800962c:	9904      	ldr	r1, [sp, #16]
 800962e:	9a05      	ldr	r2, [sp, #20]
 8009630:	2920      	cmp	r1, #32
 8009632:	d818      	bhi.n	8009666 <__hexnan+0x7e>
 8009634:	9b02      	ldr	r3, [sp, #8]
 8009636:	459b      	cmp	fp, r3
 8009638:	dd13      	ble.n	8009662 <__hexnan+0x7a>
 800963a:	454c      	cmp	r4, r9
 800963c:	d206      	bcs.n	800964c <__hexnan+0x64>
 800963e:	2d07      	cmp	r5, #7
 8009640:	dc04      	bgt.n	800964c <__hexnan+0x64>
 8009642:	462a      	mov	r2, r5
 8009644:	4649      	mov	r1, r9
 8009646:	4620      	mov	r0, r4
 8009648:	f7ff ffa8 	bl	800959c <L_shift>
 800964c:	4544      	cmp	r4, r8
 800964e:	d950      	bls.n	80096f2 <__hexnan+0x10a>
 8009650:	2300      	movs	r3, #0
 8009652:	f1a4 0904 	sub.w	r9, r4, #4
 8009656:	f844 3c04 	str.w	r3, [r4, #-4]
 800965a:	f8cd b008 	str.w	fp, [sp, #8]
 800965e:	464c      	mov	r4, r9
 8009660:	461d      	mov	r5, r3
 8009662:	9a03      	ldr	r2, [sp, #12]
 8009664:	e7d7      	b.n	8009616 <__hexnan+0x2e>
 8009666:	2929      	cmp	r1, #41	; 0x29
 8009668:	d156      	bne.n	8009718 <__hexnan+0x130>
 800966a:	3202      	adds	r2, #2
 800966c:	f8ca 2000 	str.w	r2, [sl]
 8009670:	f1bb 0f00 	cmp.w	fp, #0
 8009674:	d050      	beq.n	8009718 <__hexnan+0x130>
 8009676:	454c      	cmp	r4, r9
 8009678:	d206      	bcs.n	8009688 <__hexnan+0xa0>
 800967a:	2d07      	cmp	r5, #7
 800967c:	dc04      	bgt.n	8009688 <__hexnan+0xa0>
 800967e:	462a      	mov	r2, r5
 8009680:	4649      	mov	r1, r9
 8009682:	4620      	mov	r0, r4
 8009684:	f7ff ff8a 	bl	800959c <L_shift>
 8009688:	4544      	cmp	r4, r8
 800968a:	d934      	bls.n	80096f6 <__hexnan+0x10e>
 800968c:	f1a8 0204 	sub.w	r2, r8, #4
 8009690:	4623      	mov	r3, r4
 8009692:	f853 1b04 	ldr.w	r1, [r3], #4
 8009696:	f842 1f04 	str.w	r1, [r2, #4]!
 800969a:	429f      	cmp	r7, r3
 800969c:	d2f9      	bcs.n	8009692 <__hexnan+0xaa>
 800969e:	1b3b      	subs	r3, r7, r4
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	3304      	adds	r3, #4
 80096a6:	3401      	adds	r4, #1
 80096a8:	3e03      	subs	r6, #3
 80096aa:	42b4      	cmp	r4, r6
 80096ac:	bf88      	it	hi
 80096ae:	2304      	movhi	r3, #4
 80096b0:	4443      	add	r3, r8
 80096b2:	2200      	movs	r2, #0
 80096b4:	f843 2b04 	str.w	r2, [r3], #4
 80096b8:	429f      	cmp	r7, r3
 80096ba:	d2fb      	bcs.n	80096b4 <__hexnan+0xcc>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	b91b      	cbnz	r3, 80096c8 <__hexnan+0xe0>
 80096c0:	4547      	cmp	r7, r8
 80096c2:	d127      	bne.n	8009714 <__hexnan+0x12c>
 80096c4:	2301      	movs	r3, #1
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	2005      	movs	r0, #5
 80096ca:	e026      	b.n	800971a <__hexnan+0x132>
 80096cc:	3501      	adds	r5, #1
 80096ce:	2d08      	cmp	r5, #8
 80096d0:	f10b 0b01 	add.w	fp, fp, #1
 80096d4:	dd06      	ble.n	80096e4 <__hexnan+0xfc>
 80096d6:	4544      	cmp	r4, r8
 80096d8:	d9c3      	bls.n	8009662 <__hexnan+0x7a>
 80096da:	2300      	movs	r3, #0
 80096dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80096e0:	2501      	movs	r5, #1
 80096e2:	3c04      	subs	r4, #4
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	f000 000f 	and.w	r0, r0, #15
 80096ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	e7b7      	b.n	8009662 <__hexnan+0x7a>
 80096f2:	2508      	movs	r5, #8
 80096f4:	e7b5      	b.n	8009662 <__hexnan+0x7a>
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0df      	beq.n	80096bc <__hexnan+0xd4>
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	f1c3 0320 	rsb	r3, r3, #32
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
 8009708:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800970c:	401a      	ands	r2, r3
 800970e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009712:	e7d3      	b.n	80096bc <__hexnan+0xd4>
 8009714:	3f04      	subs	r7, #4
 8009716:	e7d1      	b.n	80096bc <__hexnan+0xd4>
 8009718:	2004      	movs	r0, #4
 800971a:	b007      	add	sp, #28
 800971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009720 <_localeconv_r>:
 8009720:	4800      	ldr	r0, [pc, #0]	; (8009724 <_localeconv_r+0x4>)
 8009722:	4770      	bx	lr
 8009724:	20000170 	.word	0x20000170

08009728 <__retarget_lock_init_recursive>:
 8009728:	4770      	bx	lr

0800972a <__retarget_lock_acquire_recursive>:
 800972a:	4770      	bx	lr

0800972c <__retarget_lock_release_recursive>:
 800972c:	4770      	bx	lr
	...

08009730 <_lseek_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	; (8009750 <_lseek_r+0x20>)
 8009734:	4604      	mov	r4, r0
 8009736:	4608      	mov	r0, r1
 8009738:	4611      	mov	r1, r2
 800973a:	2200      	movs	r2, #0
 800973c:	602a      	str	r2, [r5, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	f7f8 fe00 	bl	8002344 <_lseek>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_lseek_r+0x1e>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_lseek_r+0x1e>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	20000894 	.word	0x20000894

08009754 <__swhatbuf_r>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	460e      	mov	r6, r1
 8009758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975c:	2900      	cmp	r1, #0
 800975e:	b096      	sub	sp, #88	; 0x58
 8009760:	4614      	mov	r4, r2
 8009762:	461d      	mov	r5, r3
 8009764:	da08      	bge.n	8009778 <__swhatbuf_r+0x24>
 8009766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	061a      	lsls	r2, r3, #24
 8009770:	d410      	bmi.n	8009794 <__swhatbuf_r+0x40>
 8009772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009776:	e00e      	b.n	8009796 <__swhatbuf_r+0x42>
 8009778:	466a      	mov	r2, sp
 800977a:	f001 f94f 	bl	800aa1c <_fstat_r>
 800977e:	2800      	cmp	r0, #0
 8009780:	dbf1      	blt.n	8009766 <__swhatbuf_r+0x12>
 8009782:	9a01      	ldr	r2, [sp, #4]
 8009784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800978c:	425a      	negs	r2, r3
 800978e:	415a      	adcs	r2, r3
 8009790:	602a      	str	r2, [r5, #0]
 8009792:	e7ee      	b.n	8009772 <__swhatbuf_r+0x1e>
 8009794:	2340      	movs	r3, #64	; 0x40
 8009796:	2000      	movs	r0, #0
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	b016      	add	sp, #88	; 0x58
 800979c:	bd70      	pop	{r4, r5, r6, pc}
	...

080097a0 <__smakebuf_r>:
 80097a0:	898b      	ldrh	r3, [r1, #12]
 80097a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097a4:	079d      	lsls	r5, r3, #30
 80097a6:	4606      	mov	r6, r0
 80097a8:	460c      	mov	r4, r1
 80097aa:	d507      	bpl.n	80097bc <__smakebuf_r+0x1c>
 80097ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	2301      	movs	r3, #1
 80097b6:	6163      	str	r3, [r4, #20]
 80097b8:	b002      	add	sp, #8
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	ab01      	add	r3, sp, #4
 80097be:	466a      	mov	r2, sp
 80097c0:	f7ff ffc8 	bl	8009754 <__swhatbuf_r>
 80097c4:	9900      	ldr	r1, [sp, #0]
 80097c6:	4605      	mov	r5, r0
 80097c8:	4630      	mov	r0, r6
 80097ca:	f000 fd95 	bl	800a2f8 <_malloc_r>
 80097ce:	b948      	cbnz	r0, 80097e4 <__smakebuf_r+0x44>
 80097d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d4:	059a      	lsls	r2, r3, #22
 80097d6:	d4ef      	bmi.n	80097b8 <__smakebuf_r+0x18>
 80097d8:	f023 0303 	bic.w	r3, r3, #3
 80097dc:	f043 0302 	orr.w	r3, r3, #2
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	e7e3      	b.n	80097ac <__smakebuf_r+0xc>
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <__smakebuf_r+0x7c>)
 80097e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	6020      	str	r0, [r4, #0]
 80097ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	9b00      	ldr	r3, [sp, #0]
 80097f4:	6163      	str	r3, [r4, #20]
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	6120      	str	r0, [r4, #16]
 80097fa:	b15b      	cbz	r3, 8009814 <__smakebuf_r+0x74>
 80097fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009800:	4630      	mov	r0, r6
 8009802:	f001 f91d 	bl	800aa40 <_isatty_r>
 8009806:	b128      	cbz	r0, 8009814 <__smakebuf_r+0x74>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	f043 0301 	orr.w	r3, r3, #1
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	89a0      	ldrh	r0, [r4, #12]
 8009816:	4305      	orrs	r5, r0
 8009818:	81a5      	strh	r5, [r4, #12]
 800981a:	e7cd      	b.n	80097b8 <__smakebuf_r+0x18>
 800981c:	08008ea1 	.word	0x08008ea1

08009820 <malloc>:
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <malloc+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f000 bd67 	b.w	800a2f8 <_malloc_r>
 800982a:	bf00      	nop
 800982c:	20000018 	.word	0x20000018

08009830 <__ascii_mbtowc>:
 8009830:	b082      	sub	sp, #8
 8009832:	b901      	cbnz	r1, 8009836 <__ascii_mbtowc+0x6>
 8009834:	a901      	add	r1, sp, #4
 8009836:	b142      	cbz	r2, 800984a <__ascii_mbtowc+0x1a>
 8009838:	b14b      	cbz	r3, 800984e <__ascii_mbtowc+0x1e>
 800983a:	7813      	ldrb	r3, [r2, #0]
 800983c:	600b      	str	r3, [r1, #0]
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	1e10      	subs	r0, r2, #0
 8009842:	bf18      	it	ne
 8009844:	2001      	movne	r0, #1
 8009846:	b002      	add	sp, #8
 8009848:	4770      	bx	lr
 800984a:	4610      	mov	r0, r2
 800984c:	e7fb      	b.n	8009846 <__ascii_mbtowc+0x16>
 800984e:	f06f 0001 	mvn.w	r0, #1
 8009852:	e7f8      	b.n	8009846 <__ascii_mbtowc+0x16>

08009854 <memcpy>:
 8009854:	440a      	add	r2, r1
 8009856:	4291      	cmp	r1, r2
 8009858:	f100 33ff 	add.w	r3, r0, #4294967295
 800985c:	d100      	bne.n	8009860 <memcpy+0xc>
 800985e:	4770      	bx	lr
 8009860:	b510      	push	{r4, lr}
 8009862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986a:	4291      	cmp	r1, r2
 800986c:	d1f9      	bne.n	8009862 <memcpy+0xe>
 800986e:	bd10      	pop	{r4, pc}

08009870 <_Balloc>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009874:	4604      	mov	r4, r0
 8009876:	460d      	mov	r5, r1
 8009878:	b976      	cbnz	r6, 8009898 <_Balloc+0x28>
 800987a:	2010      	movs	r0, #16
 800987c:	f7ff ffd0 	bl	8009820 <malloc>
 8009880:	4602      	mov	r2, r0
 8009882:	6260      	str	r0, [r4, #36]	; 0x24
 8009884:	b920      	cbnz	r0, 8009890 <_Balloc+0x20>
 8009886:	4b18      	ldr	r3, [pc, #96]	; (80098e8 <_Balloc+0x78>)
 8009888:	4818      	ldr	r0, [pc, #96]	; (80098ec <_Balloc+0x7c>)
 800988a:	2166      	movs	r1, #102	; 0x66
 800988c:	f001 f896 	bl	800a9bc <__assert_func>
 8009890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009894:	6006      	str	r6, [r0, #0]
 8009896:	60c6      	str	r6, [r0, #12]
 8009898:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800989a:	68f3      	ldr	r3, [r6, #12]
 800989c:	b183      	cbz	r3, 80098c0 <_Balloc+0x50>
 800989e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098a6:	b9b8      	cbnz	r0, 80098d8 <_Balloc+0x68>
 80098a8:	2101      	movs	r1, #1
 80098aa:	fa01 f605 	lsl.w	r6, r1, r5
 80098ae:	1d72      	adds	r2, r6, #5
 80098b0:	0092      	lsls	r2, r2, #2
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fc9d 	bl	800a1f2 <_calloc_r>
 80098b8:	b160      	cbz	r0, 80098d4 <_Balloc+0x64>
 80098ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098be:	e00e      	b.n	80098de <_Balloc+0x6e>
 80098c0:	2221      	movs	r2, #33	; 0x21
 80098c2:	2104      	movs	r1, #4
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 fc94 	bl	800a1f2 <_calloc_r>
 80098ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098cc:	60f0      	str	r0, [r6, #12]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e4      	bne.n	800989e <_Balloc+0x2e>
 80098d4:	2000      	movs	r0, #0
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	6802      	ldr	r2, [r0, #0]
 80098da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098de:	2300      	movs	r3, #0
 80098e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098e4:	e7f7      	b.n	80098d6 <_Balloc+0x66>
 80098e6:	bf00      	nop
 80098e8:	0800b186 	.word	0x0800b186
 80098ec:	0800b2e8 	.word	0x0800b2e8

080098f0 <_Bfree>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b976      	cbnz	r6, 8009918 <_Bfree+0x28>
 80098fa:	2010      	movs	r0, #16
 80098fc:	f7ff ff90 	bl	8009820 <malloc>
 8009900:	4602      	mov	r2, r0
 8009902:	6268      	str	r0, [r5, #36]	; 0x24
 8009904:	b920      	cbnz	r0, 8009910 <_Bfree+0x20>
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <_Bfree+0x3c>)
 8009908:	4809      	ldr	r0, [pc, #36]	; (8009930 <_Bfree+0x40>)
 800990a:	218a      	movs	r1, #138	; 0x8a
 800990c:	f001 f856 	bl	800a9bc <__assert_func>
 8009910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009914:	6006      	str	r6, [r0, #0]
 8009916:	60c6      	str	r6, [r0, #12]
 8009918:	b13c      	cbz	r4, 800992a <_Bfree+0x3a>
 800991a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800991c:	6862      	ldr	r2, [r4, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009924:	6021      	str	r1, [r4, #0]
 8009926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	0800b186 	.word	0x0800b186
 8009930:	0800b2e8 	.word	0x0800b2e8

08009934 <__multadd>:
 8009934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009938:	690d      	ldr	r5, [r1, #16]
 800993a:	4607      	mov	r7, r0
 800993c:	460c      	mov	r4, r1
 800993e:	461e      	mov	r6, r3
 8009940:	f101 0c14 	add.w	ip, r1, #20
 8009944:	2000      	movs	r0, #0
 8009946:	f8dc 3000 	ldr.w	r3, [ip]
 800994a:	b299      	uxth	r1, r3
 800994c:	fb02 6101 	mla	r1, r2, r1, r6
 8009950:	0c1e      	lsrs	r6, r3, #16
 8009952:	0c0b      	lsrs	r3, r1, #16
 8009954:	fb02 3306 	mla	r3, r2, r6, r3
 8009958:	b289      	uxth	r1, r1
 800995a:	3001      	adds	r0, #1
 800995c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009960:	4285      	cmp	r5, r0
 8009962:	f84c 1b04 	str.w	r1, [ip], #4
 8009966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800996a:	dcec      	bgt.n	8009946 <__multadd+0x12>
 800996c:	b30e      	cbz	r6, 80099b2 <__multadd+0x7e>
 800996e:	68a3      	ldr	r3, [r4, #8]
 8009970:	42ab      	cmp	r3, r5
 8009972:	dc19      	bgt.n	80099a8 <__multadd+0x74>
 8009974:	6861      	ldr	r1, [r4, #4]
 8009976:	4638      	mov	r0, r7
 8009978:	3101      	adds	r1, #1
 800997a:	f7ff ff79 	bl	8009870 <_Balloc>
 800997e:	4680      	mov	r8, r0
 8009980:	b928      	cbnz	r0, 800998e <__multadd+0x5a>
 8009982:	4602      	mov	r2, r0
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <__multadd+0x84>)
 8009986:	480d      	ldr	r0, [pc, #52]	; (80099bc <__multadd+0x88>)
 8009988:	21b5      	movs	r1, #181	; 0xb5
 800998a:	f001 f817 	bl	800a9bc <__assert_func>
 800998e:	6922      	ldr	r2, [r4, #16]
 8009990:	3202      	adds	r2, #2
 8009992:	f104 010c 	add.w	r1, r4, #12
 8009996:	0092      	lsls	r2, r2, #2
 8009998:	300c      	adds	r0, #12
 800999a:	f7ff ff5b 	bl	8009854 <memcpy>
 800999e:	4621      	mov	r1, r4
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff ffa5 	bl	80098f0 <_Bfree>
 80099a6:	4644      	mov	r4, r8
 80099a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099ac:	3501      	adds	r5, #1
 80099ae:	615e      	str	r6, [r3, #20]
 80099b0:	6125      	str	r5, [r4, #16]
 80099b2:	4620      	mov	r0, r4
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	0800b1f8 	.word	0x0800b1f8
 80099bc:	0800b2e8 	.word	0x0800b2e8

080099c0 <__s2b>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	460c      	mov	r4, r1
 80099c6:	4615      	mov	r5, r2
 80099c8:	461f      	mov	r7, r3
 80099ca:	2209      	movs	r2, #9
 80099cc:	3308      	adds	r3, #8
 80099ce:	4606      	mov	r6, r0
 80099d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80099d4:	2100      	movs	r1, #0
 80099d6:	2201      	movs	r2, #1
 80099d8:	429a      	cmp	r2, r3
 80099da:	db09      	blt.n	80099f0 <__s2b+0x30>
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff ff47 	bl	8009870 <_Balloc>
 80099e2:	b940      	cbnz	r0, 80099f6 <__s2b+0x36>
 80099e4:	4602      	mov	r2, r0
 80099e6:	4b19      	ldr	r3, [pc, #100]	; (8009a4c <__s2b+0x8c>)
 80099e8:	4819      	ldr	r0, [pc, #100]	; (8009a50 <__s2b+0x90>)
 80099ea:	21ce      	movs	r1, #206	; 0xce
 80099ec:	f000 ffe6 	bl	800a9bc <__assert_func>
 80099f0:	0052      	lsls	r2, r2, #1
 80099f2:	3101      	adds	r1, #1
 80099f4:	e7f0      	b.n	80099d8 <__s2b+0x18>
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	6143      	str	r3, [r0, #20]
 80099fa:	2d09      	cmp	r5, #9
 80099fc:	f04f 0301 	mov.w	r3, #1
 8009a00:	6103      	str	r3, [r0, #16]
 8009a02:	dd16      	ble.n	8009a32 <__s2b+0x72>
 8009a04:	f104 0909 	add.w	r9, r4, #9
 8009a08:	46c8      	mov	r8, r9
 8009a0a:	442c      	add	r4, r5
 8009a0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a10:	4601      	mov	r1, r0
 8009a12:	3b30      	subs	r3, #48	; 0x30
 8009a14:	220a      	movs	r2, #10
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7ff ff8c 	bl	8009934 <__multadd>
 8009a1c:	45a0      	cmp	r8, r4
 8009a1e:	d1f5      	bne.n	8009a0c <__s2b+0x4c>
 8009a20:	f1a5 0408 	sub.w	r4, r5, #8
 8009a24:	444c      	add	r4, r9
 8009a26:	1b2d      	subs	r5, r5, r4
 8009a28:	1963      	adds	r3, r4, r5
 8009a2a:	42bb      	cmp	r3, r7
 8009a2c:	db04      	blt.n	8009a38 <__s2b+0x78>
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	340a      	adds	r4, #10
 8009a34:	2509      	movs	r5, #9
 8009a36:	e7f6      	b.n	8009a26 <__s2b+0x66>
 8009a38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	3b30      	subs	r3, #48	; 0x30
 8009a40:	220a      	movs	r2, #10
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff76 	bl	8009934 <__multadd>
 8009a48:	e7ee      	b.n	8009a28 <__s2b+0x68>
 8009a4a:	bf00      	nop
 8009a4c:	0800b1f8 	.word	0x0800b1f8
 8009a50:	0800b2e8 	.word	0x0800b2e8

08009a54 <__hi0bits>:
 8009a54:	0c03      	lsrs	r3, r0, #16
 8009a56:	041b      	lsls	r3, r3, #16
 8009a58:	b9d3      	cbnz	r3, 8009a90 <__hi0bits+0x3c>
 8009a5a:	0400      	lsls	r0, r0, #16
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a62:	bf04      	itt	eq
 8009a64:	0200      	lsleq	r0, r0, #8
 8009a66:	3308      	addeq	r3, #8
 8009a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a6c:	bf04      	itt	eq
 8009a6e:	0100      	lsleq	r0, r0, #4
 8009a70:	3304      	addeq	r3, #4
 8009a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a76:	bf04      	itt	eq
 8009a78:	0080      	lsleq	r0, r0, #2
 8009a7a:	3302      	addeq	r3, #2
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	db05      	blt.n	8009a8c <__hi0bits+0x38>
 8009a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a84:	f103 0301 	add.w	r3, r3, #1
 8009a88:	bf08      	it	eq
 8009a8a:	2320      	moveq	r3, #32
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	4770      	bx	lr
 8009a90:	2300      	movs	r3, #0
 8009a92:	e7e4      	b.n	8009a5e <__hi0bits+0xa>

08009a94 <__lo0bits>:
 8009a94:	6803      	ldr	r3, [r0, #0]
 8009a96:	f013 0207 	ands.w	r2, r3, #7
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	d00b      	beq.n	8009ab6 <__lo0bits+0x22>
 8009a9e:	07da      	lsls	r2, r3, #31
 8009aa0:	d423      	bmi.n	8009aea <__lo0bits+0x56>
 8009aa2:	0798      	lsls	r0, r3, #30
 8009aa4:	bf49      	itett	mi
 8009aa6:	085b      	lsrmi	r3, r3, #1
 8009aa8:	089b      	lsrpl	r3, r3, #2
 8009aaa:	2001      	movmi	r0, #1
 8009aac:	600b      	strmi	r3, [r1, #0]
 8009aae:	bf5c      	itt	pl
 8009ab0:	600b      	strpl	r3, [r1, #0]
 8009ab2:	2002      	movpl	r0, #2
 8009ab4:	4770      	bx	lr
 8009ab6:	b298      	uxth	r0, r3
 8009ab8:	b9a8      	cbnz	r0, 8009ae6 <__lo0bits+0x52>
 8009aba:	0c1b      	lsrs	r3, r3, #16
 8009abc:	2010      	movs	r0, #16
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	b90a      	cbnz	r2, 8009ac6 <__lo0bits+0x32>
 8009ac2:	3008      	adds	r0, #8
 8009ac4:	0a1b      	lsrs	r3, r3, #8
 8009ac6:	071a      	lsls	r2, r3, #28
 8009ac8:	bf04      	itt	eq
 8009aca:	091b      	lsreq	r3, r3, #4
 8009acc:	3004      	addeq	r0, #4
 8009ace:	079a      	lsls	r2, r3, #30
 8009ad0:	bf04      	itt	eq
 8009ad2:	089b      	lsreq	r3, r3, #2
 8009ad4:	3002      	addeq	r0, #2
 8009ad6:	07da      	lsls	r2, r3, #31
 8009ad8:	d403      	bmi.n	8009ae2 <__lo0bits+0x4e>
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	f100 0001 	add.w	r0, r0, #1
 8009ae0:	d005      	beq.n	8009aee <__lo0bits+0x5a>
 8009ae2:	600b      	str	r3, [r1, #0]
 8009ae4:	4770      	bx	lr
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	e7e9      	b.n	8009abe <__lo0bits+0x2a>
 8009aea:	2000      	movs	r0, #0
 8009aec:	4770      	bx	lr
 8009aee:	2020      	movs	r0, #32
 8009af0:	4770      	bx	lr
	...

08009af4 <__i2b>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	2101      	movs	r1, #1
 8009afa:	f7ff feb9 	bl	8009870 <_Balloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	b928      	cbnz	r0, 8009b0e <__i2b+0x1a>
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <__i2b+0x24>)
 8009b04:	4805      	ldr	r0, [pc, #20]	; (8009b1c <__i2b+0x28>)
 8009b06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b0a:	f000 ff57 	bl	800a9bc <__assert_func>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	6144      	str	r4, [r0, #20]
 8009b12:	6103      	str	r3, [r0, #16]
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	0800b1f8 	.word	0x0800b1f8
 8009b1c:	0800b2e8 	.word	0x0800b2e8

08009b20 <__multiply>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4691      	mov	r9, r2
 8009b26:	690a      	ldr	r2, [r1, #16]
 8009b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	bfb8      	it	lt
 8009b30:	460b      	movlt	r3, r1
 8009b32:	460c      	mov	r4, r1
 8009b34:	bfbc      	itt	lt
 8009b36:	464c      	movlt	r4, r9
 8009b38:	4699      	movlt	r9, r3
 8009b3a:	6927      	ldr	r7, [r4, #16]
 8009b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	6861      	ldr	r1, [r4, #4]
 8009b44:	eb07 060a 	add.w	r6, r7, sl
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	bfb8      	it	lt
 8009b4e:	3101      	addlt	r1, #1
 8009b50:	f7ff fe8e 	bl	8009870 <_Balloc>
 8009b54:	b930      	cbnz	r0, 8009b64 <__multiply+0x44>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b44      	ldr	r3, [pc, #272]	; (8009c6c <__multiply+0x14c>)
 8009b5a:	4845      	ldr	r0, [pc, #276]	; (8009c70 <__multiply+0x150>)
 8009b5c:	f240 115d 	movw	r1, #349	; 0x15d
 8009b60:	f000 ff2c 	bl	800a9bc <__assert_func>
 8009b64:	f100 0514 	add.w	r5, r0, #20
 8009b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4543      	cmp	r3, r8
 8009b72:	d321      	bcc.n	8009bb8 <__multiply+0x98>
 8009b74:	f104 0314 	add.w	r3, r4, #20
 8009b78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b7c:	f109 0314 	add.w	r3, r9, #20
 8009b80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b84:	9202      	str	r2, [sp, #8]
 8009b86:	1b3a      	subs	r2, r7, r4
 8009b88:	3a15      	subs	r2, #21
 8009b8a:	f022 0203 	bic.w	r2, r2, #3
 8009b8e:	3204      	adds	r2, #4
 8009b90:	f104 0115 	add.w	r1, r4, #21
 8009b94:	428f      	cmp	r7, r1
 8009b96:	bf38      	it	cc
 8009b98:	2204      	movcc	r2, #4
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	9a02      	ldr	r2, [sp, #8]
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d80c      	bhi.n	8009bbe <__multiply+0x9e>
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	dd03      	ble.n	8009bb0 <__multiply+0x90>
 8009ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05a      	beq.n	8009c66 <__multiply+0x146>
 8009bb0:	6106      	str	r6, [r0, #16]
 8009bb2:	b005      	add	sp, #20
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	f843 2b04 	str.w	r2, [r3], #4
 8009bbc:	e7d8      	b.n	8009b70 <__multiply+0x50>
 8009bbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	d024      	beq.n	8009c12 <__multiply+0xf2>
 8009bc8:	f104 0e14 	add.w	lr, r4, #20
 8009bcc:	46a9      	mov	r9, r5
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bd6:	f8d9 1000 	ldr.w	r1, [r9]
 8009bda:	fa1f fb82 	uxth.w	fp, r2
 8009bde:	b289      	uxth	r1, r1
 8009be0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009be4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009be8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bec:	4461      	add	r1, ip
 8009bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bfa:	b289      	uxth	r1, r1
 8009bfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c00:	4577      	cmp	r7, lr
 8009c02:	f849 1b04 	str.w	r1, [r9], #4
 8009c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c0a:	d8e2      	bhi.n	8009bd2 <__multiply+0xb2>
 8009c0c:	9a01      	ldr	r2, [sp, #4]
 8009c0e:	f845 c002 	str.w	ip, [r5, r2]
 8009c12:	9a03      	ldr	r2, [sp, #12]
 8009c14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	f1b9 0f00 	cmp.w	r9, #0
 8009c1e:	d020      	beq.n	8009c62 <__multiply+0x142>
 8009c20:	6829      	ldr	r1, [r5, #0]
 8009c22:	f104 0c14 	add.w	ip, r4, #20
 8009c26:	46ae      	mov	lr, r5
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c34:	fb09 220b 	mla	r2, r9, fp, r2
 8009c38:	4492      	add	sl, r2
 8009c3a:	b289      	uxth	r1, r1
 8009c3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c40:	f84e 1b04 	str.w	r1, [lr], #4
 8009c44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c48:	f8be 1000 	ldrh.w	r1, [lr]
 8009c4c:	0c12      	lsrs	r2, r2, #16
 8009c4e:	fb09 1102 	mla	r1, r9, r2, r1
 8009c52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c56:	4567      	cmp	r7, ip
 8009c58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c5c:	d8e6      	bhi.n	8009c2c <__multiply+0x10c>
 8009c5e:	9a01      	ldr	r2, [sp, #4]
 8009c60:	50a9      	str	r1, [r5, r2]
 8009c62:	3504      	adds	r5, #4
 8009c64:	e79a      	b.n	8009b9c <__multiply+0x7c>
 8009c66:	3e01      	subs	r6, #1
 8009c68:	e79c      	b.n	8009ba4 <__multiply+0x84>
 8009c6a:	bf00      	nop
 8009c6c:	0800b1f8 	.word	0x0800b1f8
 8009c70:	0800b2e8 	.word	0x0800b2e8

08009c74 <__pow5mult>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4615      	mov	r5, r2
 8009c7a:	f012 0203 	ands.w	r2, r2, #3
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	d007      	beq.n	8009c94 <__pow5mult+0x20>
 8009c84:	4c25      	ldr	r4, [pc, #148]	; (8009d1c <__pow5mult+0xa8>)
 8009c86:	3a01      	subs	r2, #1
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c8e:	f7ff fe51 	bl	8009934 <__multadd>
 8009c92:	4607      	mov	r7, r0
 8009c94:	10ad      	asrs	r5, r5, #2
 8009c96:	d03d      	beq.n	8009d14 <__pow5mult+0xa0>
 8009c98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c9a:	b97c      	cbnz	r4, 8009cbc <__pow5mult+0x48>
 8009c9c:	2010      	movs	r0, #16
 8009c9e:	f7ff fdbf 	bl	8009820 <malloc>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ca6:	b928      	cbnz	r0, 8009cb4 <__pow5mult+0x40>
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <__pow5mult+0xac>)
 8009caa:	481e      	ldr	r0, [pc, #120]	; (8009d24 <__pow5mult+0xb0>)
 8009cac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cb0:	f000 fe84 	bl	800a9bc <__assert_func>
 8009cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cb8:	6004      	str	r4, [r0, #0]
 8009cba:	60c4      	str	r4, [r0, #12]
 8009cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cc4:	b94c      	cbnz	r4, 8009cda <__pow5mult+0x66>
 8009cc6:	f240 2171 	movw	r1, #625	; 0x271
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ff12 	bl	8009af4 <__i2b>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	f04f 0900 	mov.w	r9, #0
 8009cde:	07eb      	lsls	r3, r5, #31
 8009ce0:	d50a      	bpl.n	8009cf8 <__pow5mult+0x84>
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff1a 	bl	8009b20 <__multiply>
 8009cec:	4639      	mov	r1, r7
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7ff fdfd 	bl	80098f0 <_Bfree>
 8009cf6:	4647      	mov	r7, r8
 8009cf8:	106d      	asrs	r5, r5, #1
 8009cfa:	d00b      	beq.n	8009d14 <__pow5mult+0xa0>
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	b938      	cbnz	r0, 8009d10 <__pow5mult+0x9c>
 8009d00:	4622      	mov	r2, r4
 8009d02:	4621      	mov	r1, r4
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff ff0b 	bl	8009b20 <__multiply>
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	f8c0 9000 	str.w	r9, [r0]
 8009d10:	4604      	mov	r4, r0
 8009d12:	e7e4      	b.n	8009cde <__pow5mult+0x6a>
 8009d14:	4638      	mov	r0, r7
 8009d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800b438 	.word	0x0800b438
 8009d20:	0800b186 	.word	0x0800b186
 8009d24:	0800b2e8 	.word	0x0800b2e8

08009d28 <__lshift>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	6849      	ldr	r1, [r1, #4]
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	4607      	mov	r7, r0
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d40:	f108 0601 	add.w	r6, r8, #1
 8009d44:	42b3      	cmp	r3, r6
 8009d46:	db0b      	blt.n	8009d60 <__lshift+0x38>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff fd91 	bl	8009870 <_Balloc>
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b948      	cbnz	r0, 8009d66 <__lshift+0x3e>
 8009d52:	4602      	mov	r2, r0
 8009d54:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <__lshift+0xd8>)
 8009d56:	482b      	ldr	r0, [pc, #172]	; (8009e04 <__lshift+0xdc>)
 8009d58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d5c:	f000 fe2e 	bl	800a9bc <__assert_func>
 8009d60:	3101      	adds	r1, #1
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	e7ee      	b.n	8009d44 <__lshift+0x1c>
 8009d66:	2300      	movs	r3, #0
 8009d68:	f100 0114 	add.w	r1, r0, #20
 8009d6c:	f100 0210 	add.w	r2, r0, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	4553      	cmp	r3, sl
 8009d74:	db37      	blt.n	8009de6 <__lshift+0xbe>
 8009d76:	6920      	ldr	r0, [r4, #16]
 8009d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d7c:	f104 0314 	add.w	r3, r4, #20
 8009d80:	f019 091f 	ands.w	r9, r9, #31
 8009d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d8c:	d02f      	beq.n	8009dee <__lshift+0xc6>
 8009d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d92:	468a      	mov	sl, r1
 8009d94:	f04f 0c00 	mov.w	ip, #0
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	fa02 f209 	lsl.w	r2, r2, r9
 8009d9e:	ea42 020c 	orr.w	r2, r2, ip
 8009da2:	f84a 2b04 	str.w	r2, [sl], #4
 8009da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009daa:	4298      	cmp	r0, r3
 8009dac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009db0:	d8f2      	bhi.n	8009d98 <__lshift+0x70>
 8009db2:	1b03      	subs	r3, r0, r4
 8009db4:	3b15      	subs	r3, #21
 8009db6:	f023 0303 	bic.w	r3, r3, #3
 8009dba:	3304      	adds	r3, #4
 8009dbc:	f104 0215 	add.w	r2, r4, #21
 8009dc0:	4290      	cmp	r0, r2
 8009dc2:	bf38      	it	cc
 8009dc4:	2304      	movcc	r3, #4
 8009dc6:	f841 c003 	str.w	ip, [r1, r3]
 8009dca:	f1bc 0f00 	cmp.w	ip, #0
 8009dce:	d001      	beq.n	8009dd4 <__lshift+0xac>
 8009dd0:	f108 0602 	add.w	r6, r8, #2
 8009dd4:	3e01      	subs	r6, #1
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	612e      	str	r6, [r5, #16]
 8009dda:	4621      	mov	r1, r4
 8009ddc:	f7ff fd88 	bl	80098f0 <_Bfree>
 8009de0:	4628      	mov	r0, r5
 8009de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dea:	3301      	adds	r3, #1
 8009dec:	e7c1      	b.n	8009d72 <__lshift+0x4a>
 8009dee:	3904      	subs	r1, #4
 8009df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009df8:	4298      	cmp	r0, r3
 8009dfa:	d8f9      	bhi.n	8009df0 <__lshift+0xc8>
 8009dfc:	e7ea      	b.n	8009dd4 <__lshift+0xac>
 8009dfe:	bf00      	nop
 8009e00:	0800b1f8 	.word	0x0800b1f8
 8009e04:	0800b2e8 	.word	0x0800b2e8

08009e08 <__mcmp>:
 8009e08:	b530      	push	{r4, r5, lr}
 8009e0a:	6902      	ldr	r2, [r0, #16]
 8009e0c:	690c      	ldr	r4, [r1, #16]
 8009e0e:	1b12      	subs	r2, r2, r4
 8009e10:	d10e      	bne.n	8009e30 <__mcmp+0x28>
 8009e12:	f100 0314 	add.w	r3, r0, #20
 8009e16:	3114      	adds	r1, #20
 8009e18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e28:	42a5      	cmp	r5, r4
 8009e2a:	d003      	beq.n	8009e34 <__mcmp+0x2c>
 8009e2c:	d305      	bcc.n	8009e3a <__mcmp+0x32>
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4610      	mov	r0, r2
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	4283      	cmp	r3, r0
 8009e36:	d3f3      	bcc.n	8009e20 <__mcmp+0x18>
 8009e38:	e7fa      	b.n	8009e30 <__mcmp+0x28>
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3e:	e7f7      	b.n	8009e30 <__mcmp+0x28>

08009e40 <__mdiff>:
 8009e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	460c      	mov	r4, r1
 8009e46:	4606      	mov	r6, r0
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4690      	mov	r8, r2
 8009e4e:	f7ff ffdb 	bl	8009e08 <__mcmp>
 8009e52:	1e05      	subs	r5, r0, #0
 8009e54:	d110      	bne.n	8009e78 <__mdiff+0x38>
 8009e56:	4629      	mov	r1, r5
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff fd09 	bl	8009870 <_Balloc>
 8009e5e:	b930      	cbnz	r0, 8009e6e <__mdiff+0x2e>
 8009e60:	4b3a      	ldr	r3, [pc, #232]	; (8009f4c <__mdiff+0x10c>)
 8009e62:	4602      	mov	r2, r0
 8009e64:	f240 2132 	movw	r1, #562	; 0x232
 8009e68:	4839      	ldr	r0, [pc, #228]	; (8009f50 <__mdiff+0x110>)
 8009e6a:	f000 fda7 	bl	800a9bc <__assert_func>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	bfa4      	itt	ge
 8009e7a:	4643      	movge	r3, r8
 8009e7c:	46a0      	movge	r8, r4
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e84:	bfa6      	itte	ge
 8009e86:	461c      	movge	r4, r3
 8009e88:	2500      	movge	r5, #0
 8009e8a:	2501      	movlt	r5, #1
 8009e8c:	f7ff fcf0 	bl	8009870 <_Balloc>
 8009e90:	b920      	cbnz	r0, 8009e9c <__mdiff+0x5c>
 8009e92:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <__mdiff+0x10c>)
 8009e94:	4602      	mov	r2, r0
 8009e96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e9a:	e7e5      	b.n	8009e68 <__mdiff+0x28>
 8009e9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ea0:	6926      	ldr	r6, [r4, #16]
 8009ea2:	60c5      	str	r5, [r0, #12]
 8009ea4:	f104 0914 	add.w	r9, r4, #20
 8009ea8:	f108 0514 	add.w	r5, r8, #20
 8009eac:	f100 0e14 	add.w	lr, r0, #20
 8009eb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009eb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009eb8:	f108 0210 	add.w	r2, r8, #16
 8009ebc:	46f2      	mov	sl, lr
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ec4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ec8:	fa1f f883 	uxth.w	r8, r3
 8009ecc:	fa11 f18b 	uxtah	r1, r1, fp
 8009ed0:	0c1b      	lsrs	r3, r3, #16
 8009ed2:	eba1 0808 	sub.w	r8, r1, r8
 8009ed6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009eda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ede:	fa1f f888 	uxth.w	r8, r8
 8009ee2:	1419      	asrs	r1, r3, #16
 8009ee4:	454e      	cmp	r6, r9
 8009ee6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eea:	f84a 3b04 	str.w	r3, [sl], #4
 8009eee:	d8e7      	bhi.n	8009ec0 <__mdiff+0x80>
 8009ef0:	1b33      	subs	r3, r6, r4
 8009ef2:	3b15      	subs	r3, #21
 8009ef4:	f023 0303 	bic.w	r3, r3, #3
 8009ef8:	3304      	adds	r3, #4
 8009efa:	3415      	adds	r4, #21
 8009efc:	42a6      	cmp	r6, r4
 8009efe:	bf38      	it	cc
 8009f00:	2304      	movcc	r3, #4
 8009f02:	441d      	add	r5, r3
 8009f04:	4473      	add	r3, lr
 8009f06:	469e      	mov	lr, r3
 8009f08:	462e      	mov	r6, r5
 8009f0a:	4566      	cmp	r6, ip
 8009f0c:	d30e      	bcc.n	8009f2c <__mdiff+0xec>
 8009f0e:	f10c 0203 	add.w	r2, ip, #3
 8009f12:	1b52      	subs	r2, r2, r5
 8009f14:	f022 0203 	bic.w	r2, r2, #3
 8009f18:	3d03      	subs	r5, #3
 8009f1a:	45ac      	cmp	ip, r5
 8009f1c:	bf38      	it	cc
 8009f1e:	2200      	movcc	r2, #0
 8009f20:	441a      	add	r2, r3
 8009f22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f26:	b17b      	cbz	r3, 8009f48 <__mdiff+0x108>
 8009f28:	6107      	str	r7, [r0, #16]
 8009f2a:	e7a3      	b.n	8009e74 <__mdiff+0x34>
 8009f2c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f30:	fa11 f288 	uxtah	r2, r1, r8
 8009f34:	1414      	asrs	r4, r2, #16
 8009f36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f3a:	b292      	uxth	r2, r2
 8009f3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f40:	f84e 2b04 	str.w	r2, [lr], #4
 8009f44:	1421      	asrs	r1, r4, #16
 8009f46:	e7e0      	b.n	8009f0a <__mdiff+0xca>
 8009f48:	3f01      	subs	r7, #1
 8009f4a:	e7ea      	b.n	8009f22 <__mdiff+0xe2>
 8009f4c:	0800b1f8 	.word	0x0800b1f8
 8009f50:	0800b2e8 	.word	0x0800b2e8

08009f54 <__ulp>:
 8009f54:	b082      	sub	sp, #8
 8009f56:	ed8d 0b00 	vstr	d0, [sp]
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	4912      	ldr	r1, [pc, #72]	; (8009fa8 <__ulp+0x54>)
 8009f5e:	4019      	ands	r1, r3
 8009f60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009f64:	2900      	cmp	r1, #0
 8009f66:	dd05      	ble.n	8009f74 <__ulp+0x20>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	ec43 2b10 	vmov	d0, r2, r3
 8009f70:	b002      	add	sp, #8
 8009f72:	4770      	bx	lr
 8009f74:	4249      	negs	r1, r1
 8009f76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009f7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	f04f 0300 	mov.w	r3, #0
 8009f86:	da04      	bge.n	8009f92 <__ulp+0x3e>
 8009f88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009f8c:	fa41 f300 	asr.w	r3, r1, r0
 8009f90:	e7ec      	b.n	8009f6c <__ulp+0x18>
 8009f92:	f1a0 0114 	sub.w	r1, r0, #20
 8009f96:	291e      	cmp	r1, #30
 8009f98:	bfda      	itte	le
 8009f9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009f9e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009fa2:	2101      	movgt	r1, #1
 8009fa4:	460a      	mov	r2, r1
 8009fa6:	e7e1      	b.n	8009f6c <__ulp+0x18>
 8009fa8:	7ff00000 	.word	0x7ff00000

08009fac <__b2d>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	6905      	ldr	r5, [r0, #16]
 8009fb0:	f100 0714 	add.w	r7, r0, #20
 8009fb4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fb8:	1f2e      	subs	r6, r5, #4
 8009fba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff fd48 	bl	8009a54 <__hi0bits>
 8009fc4:	f1c0 0320 	rsb	r3, r0, #32
 8009fc8:	280a      	cmp	r0, #10
 8009fca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a048 <__b2d+0x9c>
 8009fce:	600b      	str	r3, [r1, #0]
 8009fd0:	dc14      	bgt.n	8009ffc <__b2d+0x50>
 8009fd2:	f1c0 0e0b 	rsb	lr, r0, #11
 8009fd6:	fa24 f10e 	lsr.w	r1, r4, lr
 8009fda:	42b7      	cmp	r7, r6
 8009fdc:	ea41 030c 	orr.w	r3, r1, ip
 8009fe0:	bf34      	ite	cc
 8009fe2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009fe6:	2100      	movcs	r1, #0
 8009fe8:	3015      	adds	r0, #21
 8009fea:	fa04 f000 	lsl.w	r0, r4, r0
 8009fee:	fa21 f10e 	lsr.w	r1, r1, lr
 8009ff2:	ea40 0201 	orr.w	r2, r0, r1
 8009ff6:	ec43 2b10 	vmov	d0, r2, r3
 8009ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffc:	42b7      	cmp	r7, r6
 8009ffe:	bf3a      	itte	cc
 800a000:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a004:	f1a5 0608 	subcc.w	r6, r5, #8
 800a008:	2100      	movcs	r1, #0
 800a00a:	380b      	subs	r0, #11
 800a00c:	d017      	beq.n	800a03e <__b2d+0x92>
 800a00e:	f1c0 0c20 	rsb	ip, r0, #32
 800a012:	fa04 f500 	lsl.w	r5, r4, r0
 800a016:	42be      	cmp	r6, r7
 800a018:	fa21 f40c 	lsr.w	r4, r1, ip
 800a01c:	ea45 0504 	orr.w	r5, r5, r4
 800a020:	bf8c      	ite	hi
 800a022:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a026:	2400      	movls	r4, #0
 800a028:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a02c:	fa01 f000 	lsl.w	r0, r1, r0
 800a030:	fa24 f40c 	lsr.w	r4, r4, ip
 800a034:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a038:	ea40 0204 	orr.w	r2, r0, r4
 800a03c:	e7db      	b.n	8009ff6 <__b2d+0x4a>
 800a03e:	ea44 030c 	orr.w	r3, r4, ip
 800a042:	460a      	mov	r2, r1
 800a044:	e7d7      	b.n	8009ff6 <__b2d+0x4a>
 800a046:	bf00      	nop
 800a048:	3ff00000 	.word	0x3ff00000

0800a04c <__d2b>:
 800a04c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a050:	4689      	mov	r9, r1
 800a052:	2101      	movs	r1, #1
 800a054:	ec57 6b10 	vmov	r6, r7, d0
 800a058:	4690      	mov	r8, r2
 800a05a:	f7ff fc09 	bl	8009870 <_Balloc>
 800a05e:	4604      	mov	r4, r0
 800a060:	b930      	cbnz	r0, 800a070 <__d2b+0x24>
 800a062:	4602      	mov	r2, r0
 800a064:	4b25      	ldr	r3, [pc, #148]	; (800a0fc <__d2b+0xb0>)
 800a066:	4826      	ldr	r0, [pc, #152]	; (800a100 <__d2b+0xb4>)
 800a068:	f240 310a 	movw	r1, #778	; 0x30a
 800a06c:	f000 fca6 	bl	800a9bc <__assert_func>
 800a070:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a074:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a078:	bb35      	cbnz	r5, 800a0c8 <__d2b+0x7c>
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	d028      	beq.n	800a0d2 <__d2b+0x86>
 800a080:	4668      	mov	r0, sp
 800a082:	9600      	str	r6, [sp, #0]
 800a084:	f7ff fd06 	bl	8009a94 <__lo0bits>
 800a088:	9900      	ldr	r1, [sp, #0]
 800a08a:	b300      	cbz	r0, 800a0ce <__d2b+0x82>
 800a08c:	9a01      	ldr	r2, [sp, #4]
 800a08e:	f1c0 0320 	rsb	r3, r0, #32
 800a092:	fa02 f303 	lsl.w	r3, r2, r3
 800a096:	430b      	orrs	r3, r1
 800a098:	40c2      	lsrs	r2, r0
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	9201      	str	r2, [sp, #4]
 800a09e:	9b01      	ldr	r3, [sp, #4]
 800a0a0:	61a3      	str	r3, [r4, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bf14      	ite	ne
 800a0a6:	2202      	movne	r2, #2
 800a0a8:	2201      	moveq	r2, #1
 800a0aa:	6122      	str	r2, [r4, #16]
 800a0ac:	b1d5      	cbz	r5, 800a0e4 <__d2b+0x98>
 800a0ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0b2:	4405      	add	r5, r0
 800a0b4:	f8c9 5000 	str.w	r5, [r9]
 800a0b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0bc:	f8c8 0000 	str.w	r0, [r8]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0cc:	e7d5      	b.n	800a07a <__d2b+0x2e>
 800a0ce:	6161      	str	r1, [r4, #20]
 800a0d0:	e7e5      	b.n	800a09e <__d2b+0x52>
 800a0d2:	a801      	add	r0, sp, #4
 800a0d4:	f7ff fcde 	bl	8009a94 <__lo0bits>
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	6163      	str	r3, [r4, #20]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	6122      	str	r2, [r4, #16]
 800a0e0:	3020      	adds	r0, #32
 800a0e2:	e7e3      	b.n	800a0ac <__d2b+0x60>
 800a0e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ec:	f8c9 0000 	str.w	r0, [r9]
 800a0f0:	6918      	ldr	r0, [r3, #16]
 800a0f2:	f7ff fcaf 	bl	8009a54 <__hi0bits>
 800a0f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0fa:	e7df      	b.n	800a0bc <__d2b+0x70>
 800a0fc:	0800b1f8 	.word	0x0800b1f8
 800a100:	0800b2e8 	.word	0x0800b2e8

0800a104 <__ratio>:
 800a104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	4688      	mov	r8, r1
 800a10a:	4669      	mov	r1, sp
 800a10c:	4681      	mov	r9, r0
 800a10e:	f7ff ff4d 	bl	8009fac <__b2d>
 800a112:	a901      	add	r1, sp, #4
 800a114:	4640      	mov	r0, r8
 800a116:	ec55 4b10 	vmov	r4, r5, d0
 800a11a:	f7ff ff47 	bl	8009fac <__b2d>
 800a11e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a122:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a126:	eba3 0c02 	sub.w	ip, r3, r2
 800a12a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a134:	ec51 0b10 	vmov	r0, r1, d0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfd6      	itet	le
 800a13c:	460a      	movle	r2, r1
 800a13e:	462a      	movgt	r2, r5
 800a140:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a144:	468b      	mov	fp, r1
 800a146:	462f      	mov	r7, r5
 800a148:	bfd4      	ite	le
 800a14a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a14e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a152:	4620      	mov	r0, r4
 800a154:	ee10 2a10 	vmov	r2, s0
 800a158:	465b      	mov	r3, fp
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fb76 	bl	800084c <__aeabi_ddiv>
 800a160:	ec41 0b10 	vmov	d0, r0, r1
 800a164:	b003      	add	sp, #12
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a16a <__copybits>:
 800a16a:	3901      	subs	r1, #1
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	1149      	asrs	r1, r1, #5
 800a170:	6914      	ldr	r4, [r2, #16]
 800a172:	3101      	adds	r1, #1
 800a174:	f102 0314 	add.w	r3, r2, #20
 800a178:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a17c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a180:	1f05      	subs	r5, r0, #4
 800a182:	42a3      	cmp	r3, r4
 800a184:	d30c      	bcc.n	800a1a0 <__copybits+0x36>
 800a186:	1aa3      	subs	r3, r4, r2
 800a188:	3b11      	subs	r3, #17
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	3211      	adds	r2, #17
 800a190:	42a2      	cmp	r2, r4
 800a192:	bf88      	it	hi
 800a194:	2300      	movhi	r3, #0
 800a196:	4418      	add	r0, r3
 800a198:	2300      	movs	r3, #0
 800a19a:	4288      	cmp	r0, r1
 800a19c:	d305      	bcc.n	800a1aa <__copybits+0x40>
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1a8:	e7eb      	b.n	800a182 <__copybits+0x18>
 800a1aa:	f840 3b04 	str.w	r3, [r0], #4
 800a1ae:	e7f4      	b.n	800a19a <__copybits+0x30>

0800a1b0 <__any_on>:
 800a1b0:	f100 0214 	add.w	r2, r0, #20
 800a1b4:	6900      	ldr	r0, [r0, #16]
 800a1b6:	114b      	asrs	r3, r1, #5
 800a1b8:	4298      	cmp	r0, r3
 800a1ba:	b510      	push	{r4, lr}
 800a1bc:	db11      	blt.n	800a1e2 <__any_on+0x32>
 800a1be:	dd0a      	ble.n	800a1d6 <__any_on+0x26>
 800a1c0:	f011 011f 	ands.w	r1, r1, #31
 800a1c4:	d007      	beq.n	800a1d6 <__any_on+0x26>
 800a1c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1ca:	fa24 f001 	lsr.w	r0, r4, r1
 800a1ce:	fa00 f101 	lsl.w	r1, r0, r1
 800a1d2:	428c      	cmp	r4, r1
 800a1d4:	d10b      	bne.n	800a1ee <__any_on+0x3e>
 800a1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d803      	bhi.n	800a1e6 <__any_on+0x36>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	e7f7      	b.n	800a1d6 <__any_on+0x26>
 800a1e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	d0f5      	beq.n	800a1da <__any_on+0x2a>
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	e7f6      	b.n	800a1e0 <__any_on+0x30>

0800a1f2 <_calloc_r>:
 800a1f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1f4:	fba1 2402 	umull	r2, r4, r1, r2
 800a1f8:	b94c      	cbnz	r4, 800a20e <_calloc_r+0x1c>
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	9201      	str	r2, [sp, #4]
 800a1fe:	f000 f87b 	bl	800a2f8 <_malloc_r>
 800a202:	9a01      	ldr	r2, [sp, #4]
 800a204:	4605      	mov	r5, r0
 800a206:	b930      	cbnz	r0, 800a216 <_calloc_r+0x24>
 800a208:	4628      	mov	r0, r5
 800a20a:	b003      	add	sp, #12
 800a20c:	bd30      	pop	{r4, r5, pc}
 800a20e:	220c      	movs	r2, #12
 800a210:	6002      	str	r2, [r0, #0]
 800a212:	2500      	movs	r5, #0
 800a214:	e7f8      	b.n	800a208 <_calloc_r+0x16>
 800a216:	4621      	mov	r1, r4
 800a218:	f7fb ffc4 	bl	80061a4 <memset>
 800a21c:	e7f4      	b.n	800a208 <_calloc_r+0x16>
	...

0800a220 <_free_r>:
 800a220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a222:	2900      	cmp	r1, #0
 800a224:	d044      	beq.n	800a2b0 <_free_r+0x90>
 800a226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22a:	9001      	str	r0, [sp, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f1a1 0404 	sub.w	r4, r1, #4
 800a232:	bfb8      	it	lt
 800a234:	18e4      	addlt	r4, r4, r3
 800a236:	f000 fc2d 	bl	800aa94 <__malloc_lock>
 800a23a:	4a1e      	ldr	r2, [pc, #120]	; (800a2b4 <_free_r+0x94>)
 800a23c:	9801      	ldr	r0, [sp, #4]
 800a23e:	6813      	ldr	r3, [r2, #0]
 800a240:	b933      	cbnz	r3, 800a250 <_free_r+0x30>
 800a242:	6063      	str	r3, [r4, #4]
 800a244:	6014      	str	r4, [r2, #0]
 800a246:	b003      	add	sp, #12
 800a248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a24c:	f000 bc28 	b.w	800aaa0 <__malloc_unlock>
 800a250:	42a3      	cmp	r3, r4
 800a252:	d908      	bls.n	800a266 <_free_r+0x46>
 800a254:	6825      	ldr	r5, [r4, #0]
 800a256:	1961      	adds	r1, r4, r5
 800a258:	428b      	cmp	r3, r1
 800a25a:	bf01      	itttt	eq
 800a25c:	6819      	ldreq	r1, [r3, #0]
 800a25e:	685b      	ldreq	r3, [r3, #4]
 800a260:	1949      	addeq	r1, r1, r5
 800a262:	6021      	streq	r1, [r4, #0]
 800a264:	e7ed      	b.n	800a242 <_free_r+0x22>
 800a266:	461a      	mov	r2, r3
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b10b      	cbz	r3, 800a270 <_free_r+0x50>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d9fa      	bls.n	800a266 <_free_r+0x46>
 800a270:	6811      	ldr	r1, [r2, #0]
 800a272:	1855      	adds	r5, r2, r1
 800a274:	42a5      	cmp	r5, r4
 800a276:	d10b      	bne.n	800a290 <_free_r+0x70>
 800a278:	6824      	ldr	r4, [r4, #0]
 800a27a:	4421      	add	r1, r4
 800a27c:	1854      	adds	r4, r2, r1
 800a27e:	42a3      	cmp	r3, r4
 800a280:	6011      	str	r1, [r2, #0]
 800a282:	d1e0      	bne.n	800a246 <_free_r+0x26>
 800a284:	681c      	ldr	r4, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	4421      	add	r1, r4
 800a28c:	6011      	str	r1, [r2, #0]
 800a28e:	e7da      	b.n	800a246 <_free_r+0x26>
 800a290:	d902      	bls.n	800a298 <_free_r+0x78>
 800a292:	230c      	movs	r3, #12
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	e7d6      	b.n	800a246 <_free_r+0x26>
 800a298:	6825      	ldr	r5, [r4, #0]
 800a29a:	1961      	adds	r1, r4, r5
 800a29c:	428b      	cmp	r3, r1
 800a29e:	bf04      	itt	eq
 800a2a0:	6819      	ldreq	r1, [r3, #0]
 800a2a2:	685b      	ldreq	r3, [r3, #4]
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	bf04      	itt	eq
 800a2a8:	1949      	addeq	r1, r1, r5
 800a2aa:	6021      	streq	r1, [r4, #0]
 800a2ac:	6054      	str	r4, [r2, #4]
 800a2ae:	e7ca      	b.n	800a246 <_free_r+0x26>
 800a2b0:	b003      	add	sp, #12
 800a2b2:	bd30      	pop	{r4, r5, pc}
 800a2b4:	2000088c 	.word	0x2000088c

0800a2b8 <sbrk_aligned>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4e0e      	ldr	r6, [pc, #56]	; (800a2f4 <sbrk_aligned+0x3c>)
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6831      	ldr	r1, [r6, #0]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b911      	cbnz	r1, 800a2ca <sbrk_aligned+0x12>
 800a2c4:	f000 fb5c 	bl	800a980 <_sbrk_r>
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 fb57 	bl	800a980 <_sbrk_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d00a      	beq.n	800a2ec <sbrk_aligned+0x34>
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d007      	beq.n	800a2f0 <sbrk_aligned+0x38>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fb4c 	bl	800a980 <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d101      	bne.n	800a2f0 <sbrk_aligned+0x38>
 800a2ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	20000890 	.word	0x20000890

0800a2f8 <_malloc_r>:
 800a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fc:	1ccd      	adds	r5, r1, #3
 800a2fe:	f025 0503 	bic.w	r5, r5, #3
 800a302:	3508      	adds	r5, #8
 800a304:	2d0c      	cmp	r5, #12
 800a306:	bf38      	it	cc
 800a308:	250c      	movcc	r5, #12
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	4607      	mov	r7, r0
 800a30e:	db01      	blt.n	800a314 <_malloc_r+0x1c>
 800a310:	42a9      	cmp	r1, r5
 800a312:	d905      	bls.n	800a320 <_malloc_r+0x28>
 800a314:	230c      	movs	r3, #12
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	2600      	movs	r6, #0
 800a31a:	4630      	mov	r0, r6
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a320:	4e2e      	ldr	r6, [pc, #184]	; (800a3dc <_malloc_r+0xe4>)
 800a322:	f000 fbb7 	bl	800aa94 <__malloc_lock>
 800a326:	6833      	ldr	r3, [r6, #0]
 800a328:	461c      	mov	r4, r3
 800a32a:	bb34      	cbnz	r4, 800a37a <_malloc_r+0x82>
 800a32c:	4629      	mov	r1, r5
 800a32e:	4638      	mov	r0, r7
 800a330:	f7ff ffc2 	bl	800a2b8 <sbrk_aligned>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	4604      	mov	r4, r0
 800a338:	d14d      	bne.n	800a3d6 <_malloc_r+0xde>
 800a33a:	6834      	ldr	r4, [r6, #0]
 800a33c:	4626      	mov	r6, r4
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d140      	bne.n	800a3c4 <_malloc_r+0xcc>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	4631      	mov	r1, r6
 800a346:	4638      	mov	r0, r7
 800a348:	eb04 0803 	add.w	r8, r4, r3
 800a34c:	f000 fb18 	bl	800a980 <_sbrk_r>
 800a350:	4580      	cmp	r8, r0
 800a352:	d13a      	bne.n	800a3ca <_malloc_r+0xd2>
 800a354:	6821      	ldr	r1, [r4, #0]
 800a356:	3503      	adds	r5, #3
 800a358:	1a6d      	subs	r5, r5, r1
 800a35a:	f025 0503 	bic.w	r5, r5, #3
 800a35e:	3508      	adds	r5, #8
 800a360:	2d0c      	cmp	r5, #12
 800a362:	bf38      	it	cc
 800a364:	250c      	movcc	r5, #12
 800a366:	4629      	mov	r1, r5
 800a368:	4638      	mov	r0, r7
 800a36a:	f7ff ffa5 	bl	800a2b8 <sbrk_aligned>
 800a36e:	3001      	adds	r0, #1
 800a370:	d02b      	beq.n	800a3ca <_malloc_r+0xd2>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	442b      	add	r3, r5
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	e00e      	b.n	800a398 <_malloc_r+0xa0>
 800a37a:	6822      	ldr	r2, [r4, #0]
 800a37c:	1b52      	subs	r2, r2, r5
 800a37e:	d41e      	bmi.n	800a3be <_malloc_r+0xc6>
 800a380:	2a0b      	cmp	r2, #11
 800a382:	d916      	bls.n	800a3b2 <_malloc_r+0xba>
 800a384:	1961      	adds	r1, r4, r5
 800a386:	42a3      	cmp	r3, r4
 800a388:	6025      	str	r5, [r4, #0]
 800a38a:	bf18      	it	ne
 800a38c:	6059      	strne	r1, [r3, #4]
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	bf08      	it	eq
 800a392:	6031      	streq	r1, [r6, #0]
 800a394:	5162      	str	r2, [r4, r5]
 800a396:	604b      	str	r3, [r1, #4]
 800a398:	4638      	mov	r0, r7
 800a39a:	f104 060b 	add.w	r6, r4, #11
 800a39e:	f000 fb7f 	bl	800aaa0 <__malloc_unlock>
 800a3a2:	f026 0607 	bic.w	r6, r6, #7
 800a3a6:	1d23      	adds	r3, r4, #4
 800a3a8:	1af2      	subs	r2, r6, r3
 800a3aa:	d0b6      	beq.n	800a31a <_malloc_r+0x22>
 800a3ac:	1b9b      	subs	r3, r3, r6
 800a3ae:	50a3      	str	r3, [r4, r2]
 800a3b0:	e7b3      	b.n	800a31a <_malloc_r+0x22>
 800a3b2:	6862      	ldr	r2, [r4, #4]
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	bf0c      	ite	eq
 800a3b8:	6032      	streq	r2, [r6, #0]
 800a3ba:	605a      	strne	r2, [r3, #4]
 800a3bc:	e7ec      	b.n	800a398 <_malloc_r+0xa0>
 800a3be:	4623      	mov	r3, r4
 800a3c0:	6864      	ldr	r4, [r4, #4]
 800a3c2:	e7b2      	b.n	800a32a <_malloc_r+0x32>
 800a3c4:	4634      	mov	r4, r6
 800a3c6:	6876      	ldr	r6, [r6, #4]
 800a3c8:	e7b9      	b.n	800a33e <_malloc_r+0x46>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	603b      	str	r3, [r7, #0]
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f000 fb66 	bl	800aaa0 <__malloc_unlock>
 800a3d4:	e7a1      	b.n	800a31a <_malloc_r+0x22>
 800a3d6:	6025      	str	r5, [r4, #0]
 800a3d8:	e7de      	b.n	800a398 <_malloc_r+0xa0>
 800a3da:	bf00      	nop
 800a3dc:	2000088c 	.word	0x2000088c

0800a3e0 <__ssputs_r>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	688e      	ldr	r6, [r1, #8]
 800a3e6:	429e      	cmp	r6, r3
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4690      	mov	r8, r2
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	d838      	bhi.n	800a464 <__ssputs_r+0x84>
 800a3f2:	898a      	ldrh	r2, [r1, #12]
 800a3f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3f8:	d032      	beq.n	800a460 <__ssputs_r+0x80>
 800a3fa:	6825      	ldr	r5, [r4, #0]
 800a3fc:	6909      	ldr	r1, [r1, #16]
 800a3fe:	eba5 0901 	sub.w	r9, r5, r1
 800a402:	6965      	ldr	r5, [r4, #20]
 800a404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a40c:	3301      	adds	r3, #1
 800a40e:	444b      	add	r3, r9
 800a410:	106d      	asrs	r5, r5, #1
 800a412:	429d      	cmp	r5, r3
 800a414:	bf38      	it	cc
 800a416:	461d      	movcc	r5, r3
 800a418:	0553      	lsls	r3, r2, #21
 800a41a:	d531      	bpl.n	800a480 <__ssputs_r+0xa0>
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7ff ff6b 	bl	800a2f8 <_malloc_r>
 800a422:	4606      	mov	r6, r0
 800a424:	b950      	cbnz	r0, 800a43c <__ssputs_r+0x5c>
 800a426:	230c      	movs	r3, #12
 800a428:	f8ca 3000 	str.w	r3, [sl]
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a432:	81a3      	strh	r3, [r4, #12]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	464a      	mov	r2, r9
 800a440:	f7ff fa08 	bl	8009854 <memcpy>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a44a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	6126      	str	r6, [r4, #16]
 800a452:	6165      	str	r5, [r4, #20]
 800a454:	444e      	add	r6, r9
 800a456:	eba5 0509 	sub.w	r5, r5, r9
 800a45a:	6026      	str	r6, [r4, #0]
 800a45c:	60a5      	str	r5, [r4, #8]
 800a45e:	463e      	mov	r6, r7
 800a460:	42be      	cmp	r6, r7
 800a462:	d900      	bls.n	800a466 <__ssputs_r+0x86>
 800a464:	463e      	mov	r6, r7
 800a466:	6820      	ldr	r0, [r4, #0]
 800a468:	4632      	mov	r2, r6
 800a46a:	4641      	mov	r1, r8
 800a46c:	f000 faf8 	bl	800aa60 <memmove>
 800a470:	68a3      	ldr	r3, [r4, #8]
 800a472:	1b9b      	subs	r3, r3, r6
 800a474:	60a3      	str	r3, [r4, #8]
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	4433      	add	r3, r6
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7db      	b.n	800a438 <__ssputs_r+0x58>
 800a480:	462a      	mov	r2, r5
 800a482:	f000 fb13 	bl	800aaac <_realloc_r>
 800a486:	4606      	mov	r6, r0
 800a488:	2800      	cmp	r0, #0
 800a48a:	d1e1      	bne.n	800a450 <__ssputs_r+0x70>
 800a48c:	6921      	ldr	r1, [r4, #16]
 800a48e:	4650      	mov	r0, sl
 800a490:	f7ff fec6 	bl	800a220 <_free_r>
 800a494:	e7c7      	b.n	800a426 <__ssputs_r+0x46>
	...

0800a498 <_svfiprintf_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	4698      	mov	r8, r3
 800a49e:	898b      	ldrh	r3, [r1, #12]
 800a4a0:	061b      	lsls	r3, r3, #24
 800a4a2:	b09d      	sub	sp, #116	; 0x74
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	d50e      	bpl.n	800a4ca <_svfiprintf_r+0x32>
 800a4ac:	690b      	ldr	r3, [r1, #16]
 800a4ae:	b963      	cbnz	r3, 800a4ca <_svfiprintf_r+0x32>
 800a4b0:	2140      	movs	r1, #64	; 0x40
 800a4b2:	f7ff ff21 	bl	800a2f8 <_malloc_r>
 800a4b6:	6028      	str	r0, [r5, #0]
 800a4b8:	6128      	str	r0, [r5, #16]
 800a4ba:	b920      	cbnz	r0, 800a4c6 <_svfiprintf_r+0x2e>
 800a4bc:	230c      	movs	r3, #12
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	e0d1      	b.n	800a66a <_svfiprintf_r+0x1d2>
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	616b      	str	r3, [r5, #20]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ce:	2320      	movs	r3, #32
 800a4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4d8:	2330      	movs	r3, #48	; 0x30
 800a4da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a684 <_svfiprintf_r+0x1ec>
 800a4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e2:	f04f 0901 	mov.w	r9, #1
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	469a      	mov	sl, r3
 800a4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ee:	b10a      	cbz	r2, 800a4f4 <_svfiprintf_r+0x5c>
 800a4f0:	2a25      	cmp	r2, #37	; 0x25
 800a4f2:	d1f9      	bne.n	800a4e8 <_svfiprintf_r+0x50>
 800a4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4f8:	d00b      	beq.n	800a512 <_svfiprintf_r+0x7a>
 800a4fa:	465b      	mov	r3, fp
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ff6d 	bl	800a3e0 <__ssputs_r>
 800a506:	3001      	adds	r0, #1
 800a508:	f000 80aa 	beq.w	800a660 <_svfiprintf_r+0x1c8>
 800a50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a50e:	445a      	add	r2, fp
 800a510:	9209      	str	r2, [sp, #36]	; 0x24
 800a512:	f89a 3000 	ldrb.w	r3, [sl]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 80a2 	beq.w	800a660 <_svfiprintf_r+0x1c8>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a526:	f10a 0a01 	add.w	sl, sl, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	9307      	str	r3, [sp, #28]
 800a52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a532:	931a      	str	r3, [sp, #104]	; 0x68
 800a534:	4654      	mov	r4, sl
 800a536:	2205      	movs	r2, #5
 800a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53c:	4851      	ldr	r0, [pc, #324]	; (800a684 <_svfiprintf_r+0x1ec>)
 800a53e:	f7f5 fe4f 	bl	80001e0 <memchr>
 800a542:	9a04      	ldr	r2, [sp, #16]
 800a544:	b9d8      	cbnz	r0, 800a57e <_svfiprintf_r+0xe6>
 800a546:	06d0      	lsls	r0, r2, #27
 800a548:	bf44      	itt	mi
 800a54a:	2320      	movmi	r3, #32
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a550:	0711      	lsls	r1, r2, #28
 800a552:	bf44      	itt	mi
 800a554:	232b      	movmi	r3, #43	; 0x2b
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b2a      	cmp	r3, #42	; 0x2a
 800a560:	d015      	beq.n	800a58e <_svfiprintf_r+0xf6>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	4654      	mov	r4, sl
 800a566:	2000      	movs	r0, #0
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4621      	mov	r1, r4
 800a56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a572:	3b30      	subs	r3, #48	; 0x30
 800a574:	2b09      	cmp	r3, #9
 800a576:	d94e      	bls.n	800a616 <_svfiprintf_r+0x17e>
 800a578:	b1b0      	cbz	r0, 800a5a8 <_svfiprintf_r+0x110>
 800a57a:	9207      	str	r2, [sp, #28]
 800a57c:	e014      	b.n	800a5a8 <_svfiprintf_r+0x110>
 800a57e:	eba0 0308 	sub.w	r3, r0, r8
 800a582:	fa09 f303 	lsl.w	r3, r9, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	46a2      	mov	sl, r4
 800a58c:	e7d2      	b.n	800a534 <_svfiprintf_r+0x9c>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	1d19      	adds	r1, r3, #4
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfbb      	ittet	lt
 800a59a:	425b      	neglt	r3, r3
 800a59c:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a0:	9307      	strge	r3, [sp, #28]
 800a5a2:	9307      	strlt	r3, [sp, #28]
 800a5a4:	bfb8      	it	lt
 800a5a6:	9204      	strlt	r2, [sp, #16]
 800a5a8:	7823      	ldrb	r3, [r4, #0]
 800a5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ac:	d10c      	bne.n	800a5c8 <_svfiprintf_r+0x130>
 800a5ae:	7863      	ldrb	r3, [r4, #1]
 800a5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b2:	d135      	bne.n	800a620 <_svfiprintf_r+0x188>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	9203      	str	r2, [sp, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb8      	it	lt
 800a5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5c4:	3402      	adds	r4, #2
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a694 <_svfiprintf_r+0x1fc>
 800a5cc:	7821      	ldrb	r1, [r4, #0]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f7f5 fe05 	bl	80001e0 <memchr>
 800a5d6:	b140      	cbz	r0, 800a5ea <_svfiprintf_r+0x152>
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	eba0 000a 	sub.w	r0, r0, sl
 800a5de:	fa03 f000 	lsl.w	r0, r3, r0
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	4303      	orrs	r3, r0
 800a5e6:	3401      	adds	r4, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4826      	ldr	r0, [pc, #152]	; (800a688 <_svfiprintf_r+0x1f0>)
 800a5f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	f7f5 fdf3 	bl	80001e0 <memchr>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d038      	beq.n	800a670 <_svfiprintf_r+0x1d8>
 800a5fe:	4b23      	ldr	r3, [pc, #140]	; (800a68c <_svfiprintf_r+0x1f4>)
 800a600:	bb1b      	cbnz	r3, 800a64a <_svfiprintf_r+0x1b2>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	3307      	adds	r3, #7
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	3308      	adds	r3, #8
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a610:	4433      	add	r3, r6
 800a612:	9309      	str	r3, [sp, #36]	; 0x24
 800a614:	e767      	b.n	800a4e6 <_svfiprintf_r+0x4e>
 800a616:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61a:	460c      	mov	r4, r1
 800a61c:	2001      	movs	r0, #1
 800a61e:	e7a5      	b.n	800a56c <_svfiprintf_r+0xd4>
 800a620:	2300      	movs	r3, #0
 800a622:	3401      	adds	r4, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	4619      	mov	r1, r3
 800a628:	f04f 0c0a 	mov.w	ip, #10
 800a62c:	4620      	mov	r0, r4
 800a62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a632:	3a30      	subs	r2, #48	; 0x30
 800a634:	2a09      	cmp	r2, #9
 800a636:	d903      	bls.n	800a640 <_svfiprintf_r+0x1a8>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0c5      	beq.n	800a5c8 <_svfiprintf_r+0x130>
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	e7c3      	b.n	800a5c8 <_svfiprintf_r+0x130>
 800a640:	fb0c 2101 	mla	r1, ip, r1, r2
 800a644:	4604      	mov	r4, r0
 800a646:	2301      	movs	r3, #1
 800a648:	e7f0      	b.n	800a62c <_svfiprintf_r+0x194>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <_svfiprintf_r+0x1f8>)
 800a652:	a904      	add	r1, sp, #16
 800a654:	4638      	mov	r0, r7
 800a656:	f7fb fe4d 	bl	80062f4 <_printf_float>
 800a65a:	1c42      	adds	r2, r0, #1
 800a65c:	4606      	mov	r6, r0
 800a65e:	d1d6      	bne.n	800a60e <_svfiprintf_r+0x176>
 800a660:	89ab      	ldrh	r3, [r5, #12]
 800a662:	065b      	lsls	r3, r3, #25
 800a664:	f53f af2c 	bmi.w	800a4c0 <_svfiprintf_r+0x28>
 800a668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a66a:	b01d      	add	sp, #116	; 0x74
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	ab03      	add	r3, sp, #12
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	462a      	mov	r2, r5
 800a676:	4b06      	ldr	r3, [pc, #24]	; (800a690 <_svfiprintf_r+0x1f8>)
 800a678:	a904      	add	r1, sp, #16
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7fc f8de 	bl	800683c <_printf_i>
 800a680:	e7eb      	b.n	800a65a <_svfiprintf_r+0x1c2>
 800a682:	bf00      	nop
 800a684:	0800b444 	.word	0x0800b444
 800a688:	0800b44e 	.word	0x0800b44e
 800a68c:	080062f5 	.word	0x080062f5
 800a690:	0800a3e1 	.word	0x0800a3e1
 800a694:	0800b44a 	.word	0x0800b44a

0800a698 <__sfputc_r>:
 800a698:	6893      	ldr	r3, [r2, #8]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	b410      	push	{r4}
 800a6a0:	6093      	str	r3, [r2, #8]
 800a6a2:	da08      	bge.n	800a6b6 <__sfputc_r+0x1e>
 800a6a4:	6994      	ldr	r4, [r2, #24]
 800a6a6:	42a3      	cmp	r3, r4
 800a6a8:	db01      	blt.n	800a6ae <__sfputc_r+0x16>
 800a6aa:	290a      	cmp	r1, #10
 800a6ac:	d103      	bne.n	800a6b6 <__sfputc_r+0x1e>
 800a6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b2:	f7fd bbb1 	b.w	8007e18 <__swbuf_r>
 800a6b6:	6813      	ldr	r3, [r2, #0]
 800a6b8:	1c58      	adds	r0, r3, #1
 800a6ba:	6010      	str	r0, [r2, #0]
 800a6bc:	7019      	strb	r1, [r3, #0]
 800a6be:	4608      	mov	r0, r1
 800a6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <__sfputs_r>:
 800a6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460f      	mov	r7, r1
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	18d5      	adds	r5, r2, r3
 800a6d0:	42ac      	cmp	r4, r5
 800a6d2:	d101      	bne.n	800a6d8 <__sfputs_r+0x12>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e007      	b.n	800a6e8 <__sfputs_r+0x22>
 800a6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6dc:	463a      	mov	r2, r7
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ffda 	bl	800a698 <__sfputc_r>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d1f3      	bne.n	800a6d0 <__sfputs_r+0xa>
 800a6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6ec <_vfiprintf_r>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	460d      	mov	r5, r1
 800a6f2:	b09d      	sub	sp, #116	; 0x74
 800a6f4:	4614      	mov	r4, r2
 800a6f6:	4698      	mov	r8, r3
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	b118      	cbz	r0, 800a704 <_vfiprintf_r+0x18>
 800a6fc:	6983      	ldr	r3, [r0, #24]
 800a6fe:	b90b      	cbnz	r3, 800a704 <_vfiprintf_r+0x18>
 800a700:	f7fe fc02 	bl	8008f08 <__sinit>
 800a704:	4b89      	ldr	r3, [pc, #548]	; (800a92c <_vfiprintf_r+0x240>)
 800a706:	429d      	cmp	r5, r3
 800a708:	d11b      	bne.n	800a742 <_vfiprintf_r+0x56>
 800a70a:	6875      	ldr	r5, [r6, #4]
 800a70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a70e:	07d9      	lsls	r1, r3, #31
 800a710:	d405      	bmi.n	800a71e <_vfiprintf_r+0x32>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	059a      	lsls	r2, r3, #22
 800a716:	d402      	bmi.n	800a71e <_vfiprintf_r+0x32>
 800a718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a71a:	f7ff f806 	bl	800972a <__retarget_lock_acquire_recursive>
 800a71e:	89ab      	ldrh	r3, [r5, #12]
 800a720:	071b      	lsls	r3, r3, #28
 800a722:	d501      	bpl.n	800a728 <_vfiprintf_r+0x3c>
 800a724:	692b      	ldr	r3, [r5, #16]
 800a726:	b9eb      	cbnz	r3, 800a764 <_vfiprintf_r+0x78>
 800a728:	4629      	mov	r1, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7fd fbd8 	bl	8007ee0 <__swsetup_r>
 800a730:	b1c0      	cbz	r0, 800a764 <_vfiprintf_r+0x78>
 800a732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a734:	07dc      	lsls	r4, r3, #31
 800a736:	d50e      	bpl.n	800a756 <_vfiprintf_r+0x6a>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	b01d      	add	sp, #116	; 0x74
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a742:	4b7b      	ldr	r3, [pc, #492]	; (800a930 <_vfiprintf_r+0x244>)
 800a744:	429d      	cmp	r5, r3
 800a746:	d101      	bne.n	800a74c <_vfiprintf_r+0x60>
 800a748:	68b5      	ldr	r5, [r6, #8]
 800a74a:	e7df      	b.n	800a70c <_vfiprintf_r+0x20>
 800a74c:	4b79      	ldr	r3, [pc, #484]	; (800a934 <_vfiprintf_r+0x248>)
 800a74e:	429d      	cmp	r5, r3
 800a750:	bf08      	it	eq
 800a752:	68f5      	ldreq	r5, [r6, #12]
 800a754:	e7da      	b.n	800a70c <_vfiprintf_r+0x20>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	0598      	lsls	r0, r3, #22
 800a75a:	d4ed      	bmi.n	800a738 <_vfiprintf_r+0x4c>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7fe ffe5 	bl	800972c <__retarget_lock_release_recursive>
 800a762:	e7e9      	b.n	800a738 <_vfiprintf_r+0x4c>
 800a764:	2300      	movs	r3, #0
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	2320      	movs	r3, #32
 800a76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a772:	2330      	movs	r3, #48	; 0x30
 800a774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a938 <_vfiprintf_r+0x24c>
 800a778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a77c:	f04f 0901 	mov.w	r9, #1
 800a780:	4623      	mov	r3, r4
 800a782:	469a      	mov	sl, r3
 800a784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a788:	b10a      	cbz	r2, 800a78e <_vfiprintf_r+0xa2>
 800a78a:	2a25      	cmp	r2, #37	; 0x25
 800a78c:	d1f9      	bne.n	800a782 <_vfiprintf_r+0x96>
 800a78e:	ebba 0b04 	subs.w	fp, sl, r4
 800a792:	d00b      	beq.n	800a7ac <_vfiprintf_r+0xc0>
 800a794:	465b      	mov	r3, fp
 800a796:	4622      	mov	r2, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ff93 	bl	800a6c6 <__sfputs_r>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	f000 80aa 	beq.w	800a8fa <_vfiprintf_r+0x20e>
 800a7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a8:	445a      	add	r2, fp
 800a7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80a2 	beq.w	800a8fa <_vfiprintf_r+0x20e>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7c0:	f10a 0a01 	add.w	sl, sl, #1
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	9307      	str	r3, [sp, #28]
 800a7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ce:	4654      	mov	r4, sl
 800a7d0:	2205      	movs	r2, #5
 800a7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d6:	4858      	ldr	r0, [pc, #352]	; (800a938 <_vfiprintf_r+0x24c>)
 800a7d8:	f7f5 fd02 	bl	80001e0 <memchr>
 800a7dc:	9a04      	ldr	r2, [sp, #16]
 800a7de:	b9d8      	cbnz	r0, 800a818 <_vfiprintf_r+0x12c>
 800a7e0:	06d1      	lsls	r1, r2, #27
 800a7e2:	bf44      	itt	mi
 800a7e4:	2320      	movmi	r3, #32
 800a7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ea:	0713      	lsls	r3, r2, #28
 800a7ec:	bf44      	itt	mi
 800a7ee:	232b      	movmi	r3, #43	; 0x2b
 800a7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fa:	d015      	beq.n	800a828 <_vfiprintf_r+0x13c>
 800a7fc:	9a07      	ldr	r2, [sp, #28]
 800a7fe:	4654      	mov	r4, sl
 800a800:	2000      	movs	r0, #0
 800a802:	f04f 0c0a 	mov.w	ip, #10
 800a806:	4621      	mov	r1, r4
 800a808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a80c:	3b30      	subs	r3, #48	; 0x30
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d94e      	bls.n	800a8b0 <_vfiprintf_r+0x1c4>
 800a812:	b1b0      	cbz	r0, 800a842 <_vfiprintf_r+0x156>
 800a814:	9207      	str	r2, [sp, #28]
 800a816:	e014      	b.n	800a842 <_vfiprintf_r+0x156>
 800a818:	eba0 0308 	sub.w	r3, r0, r8
 800a81c:	fa09 f303 	lsl.w	r3, r9, r3
 800a820:	4313      	orrs	r3, r2
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	46a2      	mov	sl, r4
 800a826:	e7d2      	b.n	800a7ce <_vfiprintf_r+0xe2>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	1d19      	adds	r1, r3, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	9103      	str	r1, [sp, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	bfbb      	ittet	lt
 800a834:	425b      	neglt	r3, r3
 800a836:	f042 0202 	orrlt.w	r2, r2, #2
 800a83a:	9307      	strge	r3, [sp, #28]
 800a83c:	9307      	strlt	r3, [sp, #28]
 800a83e:	bfb8      	it	lt
 800a840:	9204      	strlt	r2, [sp, #16]
 800a842:	7823      	ldrb	r3, [r4, #0]
 800a844:	2b2e      	cmp	r3, #46	; 0x2e
 800a846:	d10c      	bne.n	800a862 <_vfiprintf_r+0x176>
 800a848:	7863      	ldrb	r3, [r4, #1]
 800a84a:	2b2a      	cmp	r3, #42	; 0x2a
 800a84c:	d135      	bne.n	800a8ba <_vfiprintf_r+0x1ce>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	1d1a      	adds	r2, r3, #4
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	9203      	str	r2, [sp, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfb8      	it	lt
 800a85a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a85e:	3402      	adds	r4, #2
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a948 <_vfiprintf_r+0x25c>
 800a866:	7821      	ldrb	r1, [r4, #0]
 800a868:	2203      	movs	r2, #3
 800a86a:	4650      	mov	r0, sl
 800a86c:	f7f5 fcb8 	bl	80001e0 <memchr>
 800a870:	b140      	cbz	r0, 800a884 <_vfiprintf_r+0x198>
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	eba0 000a 	sub.w	r0, r0, sl
 800a878:	fa03 f000 	lsl.w	r0, r3, r0
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	4303      	orrs	r3, r0
 800a880:	3401      	adds	r4, #1
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a888:	482c      	ldr	r0, [pc, #176]	; (800a93c <_vfiprintf_r+0x250>)
 800a88a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a88e:	2206      	movs	r2, #6
 800a890:	f7f5 fca6 	bl	80001e0 <memchr>
 800a894:	2800      	cmp	r0, #0
 800a896:	d03f      	beq.n	800a918 <_vfiprintf_r+0x22c>
 800a898:	4b29      	ldr	r3, [pc, #164]	; (800a940 <_vfiprintf_r+0x254>)
 800a89a:	bb1b      	cbnz	r3, 800a8e4 <_vfiprintf_r+0x1f8>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	3307      	adds	r3, #7
 800a8a0:	f023 0307 	bic.w	r3, r3, #7
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8aa:	443b      	add	r3, r7
 800a8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ae:	e767      	b.n	800a780 <_vfiprintf_r+0x94>
 800a8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e7a5      	b.n	800a806 <_vfiprintf_r+0x11a>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8cc:	3a30      	subs	r2, #48	; 0x30
 800a8ce:	2a09      	cmp	r2, #9
 800a8d0:	d903      	bls.n	800a8da <_vfiprintf_r+0x1ee>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0c5      	beq.n	800a862 <_vfiprintf_r+0x176>
 800a8d6:	9105      	str	r1, [sp, #20]
 800a8d8:	e7c3      	b.n	800a862 <_vfiprintf_r+0x176>
 800a8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8de:	4604      	mov	r4, r0
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e7f0      	b.n	800a8c6 <_vfiprintf_r+0x1da>
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4b16      	ldr	r3, [pc, #88]	; (800a944 <_vfiprintf_r+0x258>)
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7fb fd00 	bl	80062f4 <_printf_float>
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	1c78      	adds	r0, r7, #1
 800a8f8:	d1d6      	bne.n	800a8a8 <_vfiprintf_r+0x1bc>
 800a8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8fc:	07d9      	lsls	r1, r3, #31
 800a8fe:	d405      	bmi.n	800a90c <_vfiprintf_r+0x220>
 800a900:	89ab      	ldrh	r3, [r5, #12]
 800a902:	059a      	lsls	r2, r3, #22
 800a904:	d402      	bmi.n	800a90c <_vfiprintf_r+0x220>
 800a906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a908:	f7fe ff10 	bl	800972c <__retarget_lock_release_recursive>
 800a90c:	89ab      	ldrh	r3, [r5, #12]
 800a90e:	065b      	lsls	r3, r3, #25
 800a910:	f53f af12 	bmi.w	800a738 <_vfiprintf_r+0x4c>
 800a914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a916:	e711      	b.n	800a73c <_vfiprintf_r+0x50>
 800a918:	ab03      	add	r3, sp, #12
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	462a      	mov	r2, r5
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <_vfiprintf_r+0x258>)
 800a920:	a904      	add	r1, sp, #16
 800a922:	4630      	mov	r0, r6
 800a924:	f7fb ff8a 	bl	800683c <_printf_i>
 800a928:	e7e4      	b.n	800a8f4 <_vfiprintf_r+0x208>
 800a92a:	bf00      	nop
 800a92c:	0800b22c 	.word	0x0800b22c
 800a930:	0800b24c 	.word	0x0800b24c
 800a934:	0800b20c 	.word	0x0800b20c
 800a938:	0800b444 	.word	0x0800b444
 800a93c:	0800b44e 	.word	0x0800b44e
 800a940:	080062f5 	.word	0x080062f5
 800a944:	0800a6c7 	.word	0x0800a6c7
 800a948:	0800b44a 	.word	0x0800b44a

0800a94c <_read_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_read_r+0x20>)
 800a950:	4604      	mov	r4, r0
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f7 fcca 	bl	80022f4 <_read>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_read_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_read_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	20000894 	.word	0x20000894

0800a970 <nan>:
 800a970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a978 <nan+0x8>
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	00000000 	.word	0x00000000
 800a97c:	7ff80000 	.word	0x7ff80000

0800a980 <_sbrk_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d06      	ldr	r5, [pc, #24]	; (800a99c <_sbrk_r+0x1c>)
 800a984:	2300      	movs	r3, #0
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	f7f7 fcdc 	bl	8002348 <_sbrk>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_sbrk_r+0x1a>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_sbrk_r+0x1a>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20000894 	.word	0x20000894

0800a9a0 <__ascii_wctomb>:
 800a9a0:	b149      	cbz	r1, 800a9b6 <__ascii_wctomb+0x16>
 800a9a2:	2aff      	cmp	r2, #255	; 0xff
 800a9a4:	bf85      	ittet	hi
 800a9a6:	238a      	movhi	r3, #138	; 0x8a
 800a9a8:	6003      	strhi	r3, [r0, #0]
 800a9aa:	700a      	strbls	r2, [r1, #0]
 800a9ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9b0:	bf98      	it	ls
 800a9b2:	2001      	movls	r0, #1
 800a9b4:	4770      	bx	lr
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	4770      	bx	lr
	...

0800a9bc <__assert_func>:
 800a9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9be:	4614      	mov	r4, r2
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <__assert_func+0x2c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	68d8      	ldr	r0, [r3, #12]
 800a9ca:	b14c      	cbz	r4, 800a9e0 <__assert_func+0x24>
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <__assert_func+0x30>)
 800a9ce:	9100      	str	r1, [sp, #0]
 800a9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <__assert_func+0x34>)
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f000 f80e 	bl	800a9f8 <fiprintf>
 800a9dc:	f000 f895 	bl	800ab0a <abort>
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <__assert_func+0x38>)
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	e7f3      	b.n	800a9ce <__assert_func+0x12>
 800a9e6:	bf00      	nop
 800a9e8:	20000018 	.word	0x20000018
 800a9ec:	0800b455 	.word	0x0800b455
 800a9f0:	0800b462 	.word	0x0800b462
 800a9f4:	0800b490 	.word	0x0800b490

0800a9f8 <fiprintf>:
 800a9f8:	b40e      	push	{r1, r2, r3}
 800a9fa:	b503      	push	{r0, r1, lr}
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	ab03      	add	r3, sp, #12
 800aa00:	4805      	ldr	r0, [pc, #20]	; (800aa18 <fiprintf+0x20>)
 800aa02:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa06:	6800      	ldr	r0, [r0, #0]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	f7ff fe6f 	bl	800a6ec <_vfiprintf_r>
 800aa0e:	b002      	add	sp, #8
 800aa10:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa14:	b003      	add	sp, #12
 800aa16:	4770      	bx	lr
 800aa18:	20000018 	.word	0x20000018

0800aa1c <_fstat_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	; (800aa3c <_fstat_r+0x20>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7f7 fc84 	bl	8002336 <_fstat>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_fstat_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_fstat_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000894 	.word	0x20000894

0800aa40 <_isatty_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d06      	ldr	r5, [pc, #24]	; (800aa5c <_isatty_r+0x1c>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7f7 fc78 	bl	8002340 <_isatty>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_isatty_r+0x1a>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_isatty_r+0x1a>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000894 	.word	0x20000894

0800aa60 <memmove>:
 800aa60:	4288      	cmp	r0, r1
 800aa62:	b510      	push	{r4, lr}
 800aa64:	eb01 0402 	add.w	r4, r1, r2
 800aa68:	d902      	bls.n	800aa70 <memmove+0x10>
 800aa6a:	4284      	cmp	r4, r0
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	d807      	bhi.n	800aa80 <memmove+0x20>
 800aa70:	1e43      	subs	r3, r0, #1
 800aa72:	42a1      	cmp	r1, r4
 800aa74:	d008      	beq.n	800aa88 <memmove+0x28>
 800aa76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa7e:	e7f8      	b.n	800aa72 <memmove+0x12>
 800aa80:	4402      	add	r2, r0
 800aa82:	4601      	mov	r1, r0
 800aa84:	428a      	cmp	r2, r1
 800aa86:	d100      	bne.n	800aa8a <memmove+0x2a>
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa92:	e7f7      	b.n	800aa84 <memmove+0x24>

0800aa94 <__malloc_lock>:
 800aa94:	4801      	ldr	r0, [pc, #4]	; (800aa9c <__malloc_lock+0x8>)
 800aa96:	f7fe be48 	b.w	800972a <__retarget_lock_acquire_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	20000888 	.word	0x20000888

0800aaa0 <__malloc_unlock>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	; (800aaa8 <__malloc_unlock+0x8>)
 800aaa2:	f7fe be43 	b.w	800972c <__retarget_lock_release_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	20000888 	.word	0x20000888

0800aaac <_realloc_r>:
 800aaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab0:	4680      	mov	r8, r0
 800aab2:	4614      	mov	r4, r2
 800aab4:	460e      	mov	r6, r1
 800aab6:	b921      	cbnz	r1, 800aac2 <_realloc_r+0x16>
 800aab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	4611      	mov	r1, r2
 800aabe:	f7ff bc1b 	b.w	800a2f8 <_malloc_r>
 800aac2:	b92a      	cbnz	r2, 800aad0 <_realloc_r+0x24>
 800aac4:	f7ff fbac 	bl	800a220 <_free_r>
 800aac8:	4625      	mov	r5, r4
 800aaca:	4628      	mov	r0, r5
 800aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad0:	f000 f822 	bl	800ab18 <_malloc_usable_size_r>
 800aad4:	4284      	cmp	r4, r0
 800aad6:	4607      	mov	r7, r0
 800aad8:	d802      	bhi.n	800aae0 <_realloc_r+0x34>
 800aada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aade:	d812      	bhi.n	800ab06 <_realloc_r+0x5a>
 800aae0:	4621      	mov	r1, r4
 800aae2:	4640      	mov	r0, r8
 800aae4:	f7ff fc08 	bl	800a2f8 <_malloc_r>
 800aae8:	4605      	mov	r5, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d0ed      	beq.n	800aaca <_realloc_r+0x1e>
 800aaee:	42bc      	cmp	r4, r7
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	bf28      	it	cs
 800aaf6:	463a      	movcs	r2, r7
 800aaf8:	f7fe feac 	bl	8009854 <memcpy>
 800aafc:	4631      	mov	r1, r6
 800aafe:	4640      	mov	r0, r8
 800ab00:	f7ff fb8e 	bl	800a220 <_free_r>
 800ab04:	e7e1      	b.n	800aaca <_realloc_r+0x1e>
 800ab06:	4635      	mov	r5, r6
 800ab08:	e7df      	b.n	800aaca <_realloc_r+0x1e>

0800ab0a <abort>:
 800ab0a:	b508      	push	{r3, lr}
 800ab0c:	2006      	movs	r0, #6
 800ab0e:	f000 f833 	bl	800ab78 <raise>
 800ab12:	2001      	movs	r0, #1
 800ab14:	f7f7 fbe8 	bl	80022e8 <_exit>

0800ab18 <_malloc_usable_size_r>:
 800ab18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1c:	1f18      	subs	r0, r3, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfbc      	itt	lt
 800ab22:	580b      	ldrlt	r3, [r1, r0]
 800ab24:	18c0      	addlt	r0, r0, r3
 800ab26:	4770      	bx	lr

0800ab28 <_raise_r>:
 800ab28:	291f      	cmp	r1, #31
 800ab2a:	b538      	push	{r3, r4, r5, lr}
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	d904      	bls.n	800ab3c <_raise_r+0x14>
 800ab32:	2316      	movs	r3, #22
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab3e:	b112      	cbz	r2, 800ab46 <_raise_r+0x1e>
 800ab40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab44:	b94b      	cbnz	r3, 800ab5a <_raise_r+0x32>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f830 	bl	800abac <_getpid_r>
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4601      	mov	r1, r0
 800ab50:	4620      	mov	r0, r4
 800ab52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab56:	f000 b817 	b.w	800ab88 <_kill_r>
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d00a      	beq.n	800ab74 <_raise_r+0x4c>
 800ab5e:	1c59      	adds	r1, r3, #1
 800ab60:	d103      	bne.n	800ab6a <_raise_r+0x42>
 800ab62:	2316      	movs	r3, #22
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	2001      	movs	r0, #1
 800ab68:	e7e7      	b.n	800ab3a <_raise_r+0x12>
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab70:	4628      	mov	r0, r5
 800ab72:	4798      	blx	r3
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7e0      	b.n	800ab3a <_raise_r+0x12>

0800ab78 <raise>:
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <raise+0xc>)
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f7ff bfd3 	b.w	800ab28 <_raise_r>
 800ab82:	bf00      	nop
 800ab84:	20000018 	.word	0x20000018

0800ab88 <_kill_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d07      	ldr	r5, [pc, #28]	; (800aba8 <_kill_r+0x20>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	f7f7 fb9f 	bl	80022d8 <_kill>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d102      	bne.n	800aba4 <_kill_r+0x1c>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b103      	cbz	r3, 800aba4 <_kill_r+0x1c>
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	bd38      	pop	{r3, r4, r5, pc}
 800aba6:	bf00      	nop
 800aba8:	20000894 	.word	0x20000894

0800abac <_getpid_r>:
 800abac:	f7f7 bb92 	b.w	80022d4 <_getpid>

0800abb0 <_init>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	bf00      	nop
 800abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb6:	bc08      	pop	{r3}
 800abb8:	469e      	mov	lr, r3
 800abba:	4770      	bx	lr

0800abbc <_fini>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr
