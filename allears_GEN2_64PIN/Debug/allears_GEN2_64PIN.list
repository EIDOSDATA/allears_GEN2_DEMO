
allears_GEN2_64PIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  0800f7e8  0800f7e8  0001f7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102f4  080102f4  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  080102f4  080102f4  000202f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102fc  080102fc  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102fc  080102fc  000202fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010300  08010300  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08010304  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000214  08010518  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200009f4  08010518  000309f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccad  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004520  00000000  00000000  0004cef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00051418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00052cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002141d  00000000  00000000  000543c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7cb  00000000  00000000  000757dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2fc1  00000000  00000000  00093fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e90  00000000  00000000  00156fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7cc 	.word	0x0800f7cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800f7cc 	.word	0x0800f7cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ConvCpltCallback>:
echo_adc2_state_data_t echo_adc2_fsm_state;
echo_adc2_state_t adc2_cur_state = ECHO_ADC2_IDLE;

/* ADC CALLBACK FUNCTION */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_ADC_ConvCpltCallback+0x120>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d164      	bne.n	80010d8 <HAL_ADC_ConvCpltCallback+0xe0>
	{
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e00a      	b.n	800102a <HAL_ADC_ConvCpltCallback+0x32>
		{
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8001014:	4a41      	ldr	r2, [pc, #260]	; (800111c <HAL_ADC_ConvCpltCallback+0x124>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800101c:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC1_RCV_SIZE; index++)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b09      	cmp	r3, #9
 800102e:	ddf1      	ble.n	8001014 <HAL_ADC_ConvCpltCallback+0x1c>
		}

		if (vpw_set_flag == true)
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04c      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
		{
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_i2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4692      	mov	sl, r2
 8001052:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 800105c:	4650      	mov	r0, sl
 800105e:	4659      	mov	r1, fp
 8001060:	f7ff fd3c 	bl	8000adc <__aeabi_dcmplt>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800106c:	885b      	ldrh	r3, [r3, #2]
 800106e:	461a      	mov	r2, r3
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa54 	bl	8000524 <__aeabi_i2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4690      	mov	r8, r2
 8001082:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 800108c:	4640      	mov	r0, r8
 800108e:	4649      	mov	r1, r9
 8001090:	f7ff fd24 	bl	8000adc <__aeabi_dcmplt>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d01c      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_ConvCpltCallback+0x128>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_ConvCpltCallback+0x130>)
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff fd0c 	bl	8000adc <__aeabi_dcmplt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_ConvCpltCallback+0xdc>
			{
				Echo_VPW_TP_OFF();
 80010ca:	f000 ff2c 	bl	8001f26 <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_ADC_ConvCpltCallback+0x12c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
			}
		}
#if 0
		ADC1_CONV_OK = true;
#endif
		Echo_Start_ADC1_Conv();
 80010d4:	f000 f87e 	bl	80011d4 <Echo_Start_ADC1_Conv>
		//adc1_cur_state = ECHO_ADC1_CONV_OK; //Echo_Set_ADC1_State(ECHO_ADC1_CONV_OK);
	}

	if (hadc->Instance == hadc2.Instance)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_ConvCpltCallback+0x134>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d113      	bne.n	800110c <HAL_ADC_ConvCpltCallback+0x114>
	{
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	e00a      	b.n	8001100 <HAL_ADC_ConvCpltCallback+0x108>
		{
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_ADC_ConvCpltCallback+0x138>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_ADC_ConvCpltCallback+0x13c>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int index = 0; index < ECHO_ADC2_RCV_SIZE; index++)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b09      	cmp	r3, #9
 8001104:	ddf1      	ble.n	80010ea <HAL_ADC_ConvCpltCallback+0xf2>
		}
#if 0
		ADC2_CONV_OK = true;
#endif
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_ADC_ConvCpltCallback+0x140>)
 8001108:	2203      	movs	r2, #3
 800110a:	701a      	strb	r2, [r3, #0]
	}
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001116:	bf00      	nop
 8001118:	20000600 	.word	0x20000600
 800111c:	20000230 	.word	0x20000230
 8001120:	20000258 	.word	0x20000258
 8001124:	200003d1 	.word	0x200003d1
 8001128:	40340000 	.word	0x40340000
 800112c:	20000664 	.word	0x20000664
 8001130:	20000244 	.word	0x20000244
 8001134:	2000026c 	.word	0x2000026c
 8001138:	20000001 	.word	0x20000001

0800113c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	adc1_cur_state = ECHO_ADC1_ERROR;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_ADC_ErrorCallback+0x20>)
 8001146:	2205      	movs	r2, #5
 8001148:	701a      	strb	r2, [r3, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_ADC_ErrorCallback+0x24>)
 800114c:	2205      	movs	r2, #5
 800114e:	701a      	strb	r2, [r3, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000000 	.word	0x20000000
 8001160:	20000001 	.word	0x20000001

08001164 <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001168:	217f      	movs	r1, #127	; 0x7f
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <Echo_ADC1_Enable+0x1c>)
 800116c:	f003 fe6a 	bl	8004e44 <HAL_ADCEx_Calibration_Start>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <Echo_ADC1_Enable+0x16>
	{
		Error_Handler();
 8001176:	f001 fe1d 	bl	8002db4 <Error_Handler>
	}
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000600 	.word	0x20000600

08001184 <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001188:	217f      	movs	r1, #127	; 0x7f
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <Echo_ADC2_Enable+0x1c>)
 800118c:	f003 fe5a 	bl	8004e44 <HAL_ADCEx_Calibration_Start>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <Echo_ADC2_Enable+0x16>
	{
		Error_Handler();
 8001196:	f001 fe0d 	bl	8002db4 <Error_Handler>
	}
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000664 	.word	0x20000664

080011a4 <Echo_ADC_State_Init>:

/*
 * ADC INIT
 * */
void Echo_ADC_State_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	ECHO_ADC1_CUR_STATE = echo_adc1_state_max;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <Echo_ADC_State_Init+0x28>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	701a      	strb	r2, [r3, #0]
	ECHO_ADC2_CUR_STATE = echo_adc2_state_max;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <Echo_ADC_State_Init+0x2c>)
 80011b0:	2206      	movs	r2, #6
 80011b2:	701a      	strb	r2, [r3, #0]
	Echo_Set_ADC1_State(ECHO_ADC1_STATE_INIT);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f8e5 	bl	8001384 <Echo_Set_ADC1_State>
	Echo_Set_ADC2_State(ECHO_ADC2_STATE_INIT);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f914 	bl	80013e8 <Echo_Set_ADC2_State>
	Echo_ADC1_Enable();
 80011c0:	f7ff ffd0 	bl	8001164 <Echo_ADC1_Enable>
	Echo_ADC2_Enable();
 80011c4:	f7ff ffde 	bl	8001184 <Echo_ADC2_Enable>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000280 	.word	0x20000280
 80011d0:	20000284 	.word	0x20000284

080011d4 <Echo_Start_ADC1_Conv>:

/*
 * ADC START CONVERSION
 * */
void Echo_Start_ADC1_Conv()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 80011d8:	220a      	movs	r2, #10
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <Echo_Start_ADC1_Conv+0x1c>)
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <Echo_Start_ADC1_Conv+0x20>)
 80011de:	f002 fe8d 	bl	8003efc <HAL_ADC_Start_DMA>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <Echo_Start_ADC1_Conv+0x18>
	ADC1_CHK_CH_NUM * ECHO_ADC1_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
 80011e8:	f001 fde4 	bl	8002db4 <Error_Handler>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000230 	.word	0x20000230
 80011f4:	20000600 	.word	0x20000600

080011f8 <Echo_Start_ADC2_Conv>:

void Echo_Start_ADC2_Conv()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC2_CONV_BUF,
 80011fc:	220a      	movs	r2, #10
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <Echo_Start_ADC2_Conv+0x1c>)
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <Echo_Start_ADC2_Conv+0x20>)
 8001202:	f002 fe7b 	bl	8003efc <HAL_ADC_Start_DMA>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <Echo_Start_ADC2_Conv+0x18>
	ADC2_CHK_CH_NUM * ECHO_ADC2_RCV_SIZE) != HAL_OK)
	{
		Error_Handler();
 800120c:	f001 fdd2 	bl	8002db4 <Error_Handler>
	}
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000244 	.word	0x20000244
 8001218:	20000664 	.word	0x20000664

0800121c <Echo_Stop_ADC1_Conv>:

/*
 * ADC STOP CONVERSION
 * */
void Echo_Stop_ADC1_Conv()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <Echo_Stop_ADC1_Conv+0x18>)
 8001222:	f002 ff1f 	bl	8004064 <HAL_ADC_Stop_DMA>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <Echo_Stop_ADC1_Conv+0x14>
	{
		Error_Handler();
 800122c:	f001 fdc2 	bl	8002db4 <Error_Handler>
	}
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000600 	.word	0x20000600

08001238 <Echo_Stop_ADC2_Conv>:

void Echo_Stop_ADC2_Conv()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <Echo_Stop_ADC2_Conv+0x18>)
 800123e:	f002 ff11 	bl	8004064 <HAL_ADC_Stop_DMA>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <Echo_Stop_ADC2_Conv+0x14>
	{
		Error_Handler();
 8001248:	f001 fdb4 	bl	8002db4 <Error_Handler>
	}
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000664 	.word	0x20000664

08001254 <Echo_Stepup_ADC1_AVG>:

/*
 * STEPUP ADC AVG CALC
 * */
float Echo_Stepup_ADC1_AVG()
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	float adc1_avg = 0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	e010      	b.n	8001288 <Echo_Stepup_ADC1_AVG+0x34>
	{
		adc1_avg += setpup_adc[i];
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <Echo_Stepup_ADC1_AVG+0x58>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	ed97 7a01 	vldr	s14, [r7, #4]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b09      	cmp	r3, #9
 800128c:	ddeb      	ble.n	8001266 <Echo_Stepup_ADC1_AVG+0x12>
	}
	return adc1_avg / ECHO_ADC1_RCV_SIZE;
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129a:	eef0 7a66 	vmov.f32	s15, s13
}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000258 	.word	0x20000258

080012b0 <Echo_ADC_Calc_Stepup_V>:

/*
 * VOLTAGE CALC FUNCTION
 * */
float Echo_ADC_Calc_Stepup_V(uint16_t in_adc_val, float r1, float r2)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80012c0:	81fb      	strh	r3, [r7, #14]
	float f_adc_val;
	uint32_t vdda = 3300UL;
 80012c2:	f640 43e4 	movw	r3, #3300	; 0xce4
 80012c6:	61fb      	str	r3, [r7, #28]
	float v_ref = (float) (vdda * 0.001);
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f7ff f91b 	bl	8000504 <__aeabi_ui2d>
 80012ce:	a31b      	add	r3, pc, #108	; (adr r3, 800133c <Echo_ADC_Calc_Stepup_V+0x8c>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f990 	bl	80005f8 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc82 	bl	8000be8 <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
	float v_out;

	f_adc_val = in_adc_val / 4095.f;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001338 <Echo_ADC_Calc_Stepup_V+0x88>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80012fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001302:	edd7 7a05 	vldr	s15, [r7, #20]
 8001306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130a:	edd7 6a02 	vldr	s13, [r7, #8]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8001316:	edd7 6a01 	vldr	s13, [r7, #4]
 800131a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a04 	vstr	s15, [r7, #16]

	return v_out;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	457ff000 	.word	0x457ff000
 800133c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001340:	3f50624d 	.word	0x3f50624d

08001344 <Echo_ADC_Handle>:

/*
 * ADC STEPUP HANDLER
 * */
void Echo_ADC_Handle(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
		}
	}
#endif

	/* FSM ADC */
	if (ECHO_ADC1_CUR_STATE != adc1_cur_state)
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <Echo_ADC_Handle+0x20>)
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <Echo_ADC_Handle+0x24>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d004      	beq.n	800135e <Echo_ADC_Handle+0x1a>
	{
		Echo_Set_ADC1_State(adc1_cur_state);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <Echo_ADC_Handle+0x24>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f813 	bl	8001384 <Echo_Set_ADC1_State>
	}
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000280 	.word	0x20000280
 8001368:	20000000 	.word	0x20000000

0800136c <Echo_Get_ADC1_State>:
/**********************/

echo_adc1_state_t Echo_Get_ADC1_State(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return ECHO_ADC1_CUR_STATE;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <Echo_Get_ADC1_State+0x14>)
 8001372:	781b      	ldrb	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000280 	.word	0x20000280

08001384 <Echo_Set_ADC1_State>:
{
	return ECHO_ADC2_CUR_STATE;
}

void Echo_Set_ADC1_State(echo_adc1_state_t state)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d81c      	bhi.n	80013ce <Echo_Set_ADC1_State+0x4a>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <Echo_Set_ADC1_State+0x18>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013cf 	.word	0x080013cf
 80013a0:	080013b5 	.word	0x080013b5
 80013a4:	080013bb 	.word	0x080013bb
 80013a8:	080013cf 	.word	0x080013cf
 80013ac:	080013c1 	.word	0x080013c1
 80013b0:	080013c9 	.word	0x080013c9
	{
	case ECHO_ADC1_STATE_INIT:
		break;
	case ECHO_ADC1_IDLE:
		Echo_Stop_ADC1_Conv();
 80013b4:	f7ff ff32 	bl	800121c <Echo_Stop_ADC1_Conv>
		break;
 80013b8:	e00a      	b.n	80013d0 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_RUN:
		Echo_Start_ADC1_Conv();
 80013ba:	f7ff ff0b 	bl	80011d4 <Echo_Start_ADC1_Conv>
		break;
 80013be:	e007      	b.n	80013d0 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_CONV_OK:
		break;
	case ECHO_ADC1_PRINT_OK:
		adc1_cur_state = ECHO_ADC1_RUN;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <Echo_Set_ADC1_State+0x5c>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]
		break;
 80013c6:	e003      	b.n	80013d0 <Echo_Set_ADC1_State+0x4c>
	case ECHO_ADC1_ERROR:
		Echo_Stop_ADC1_Conv();
 80013c8:	f7ff ff28 	bl	800121c <Echo_Stop_ADC1_Conv>
		break;
 80013cc:	e000      	b.n	80013d0 <Echo_Set_ADC1_State+0x4c>
	default:
		break;
 80013ce:	bf00      	nop
	}
	ECHO_ADC1_CUR_STATE = state;
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <Echo_Set_ADC1_State+0x60>)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	7013      	strb	r3, [r2, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000280 	.word	0x20000280

080013e8 <Echo_Set_ADC2_State>:

void Echo_Set_ADC2_State(echo_adc2_state_t state)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d81c      	bhi.n	8001432 <Echo_Set_ADC2_State+0x4a>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <Echo_Set_ADC2_State+0x18>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001433 	.word	0x08001433
 8001404:	08001419 	.word	0x08001419
 8001408:	0800141f 	.word	0x0800141f
 800140c:	08001433 	.word	0x08001433
 8001410:	08001425 	.word	0x08001425
 8001414:	0800142d 	.word	0x0800142d
	{
	case ECHO_ADC2_STATE_INIT:
		break;
	case ECHO_ADC2_IDLE:
		Echo_Stop_ADC2_Conv();
 8001418:	f7ff ff0e 	bl	8001238 <Echo_Stop_ADC2_Conv>
		break;
 800141c:	e00a      	b.n	8001434 <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_RUN:
		Echo_Start_ADC2_Conv();
 800141e:	f7ff feeb 	bl	80011f8 <Echo_Start_ADC2_Conv>
		break;
 8001422:	e007      	b.n	8001434 <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_CONV_OK:
		break;
	case ECHO_ADC2_PRINT_OK:
		Echo_Set_ADC2_State(ECHO_ADC2_RUN);
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff ffdf 	bl	80013e8 <Echo_Set_ADC2_State>
		break;
 800142a:	e003      	b.n	8001434 <Echo_Set_ADC2_State+0x4c>
	case ECHO_ADC2_ERROR:
		Echo_Stop_ADC2_Conv();
 800142c:	f7ff ff04 	bl	8001238 <Echo_Stop_ADC2_Conv>
		break;
 8001430:	e000      	b.n	8001434 <Echo_Set_ADC2_State+0x4c>
	default:
		break;
 8001432:	bf00      	nop
	}
	ECHO_ADC2_CUR_STATE = state;
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <Echo_Set_ADC2_State+0x5c>)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	7013      	strb	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000284 	.word	0x20000284

08001448 <Echo_Btn_IsHandled>:
} echo_btn_state_data_t;

echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_IsHandled(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	return ECHO_BTN_STATE_HANDLED;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <Echo_Btn_IsHandled+0x14>)
 800144e:	789b      	ldrb	r3, [r3, #2]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000288 	.word	0x20000288

08001460 <Echo_Btn_Handled_Clear>:

void Echo_Btn_Handled_Clear(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	ECHO_BTN_STATE_HANDLED = false;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <Echo_Btn_Handled_Clear+0x14>)
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000288 	.word	0x20000288

08001478 <Echo_Btn_Handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_Handle(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
	bool pressed;
#ifdef DEBUG
	char res_msg[10] =
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	809a      	strh	r2, [r3, #4]
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	4827      	ldr	r0, [pc, #156]	; (8001530 <Echo_Btn_Handle+0xb8>)
 8001492:	f004 fd89 	bl	8005fa8 <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

	if (pressed != ECHO_BTN_STATE_PRESSED)
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d01a      	beq.n	80014e2 <Echo_Btn_Handle+0x6a>
	{
		ECHO_BTN_STATE_PRESSED = pressed;
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	7013      	strb	r3, [r2, #0]
#ifdef DEBUG
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4920      	ldr	r1, [pc, #128]	; (8001538 <Echo_Btn_Handle+0xc0>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f009 ff0f 	bl	800b2dc <siprintf>
		ECHO_SHELL_PRINT(("%s\n",res_msg));
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 fefd 	bl	800b2c0 <puts>
#endif

		if (ECHO_BTN_STATE_PRESSED == false)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d129      	bne.n	8001528 <Echo_Btn_Handle+0xb0>

		}
		else
		{
			/* BUTTON PRESSED, Send Signal >> echo_state.c */
			ECHO_BTN_STATE_HANDLED = true;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	709a      	strb	r2, [r3, #2]
			ECHO_BTN_STATE_HELD_TICK = 0;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
		else
		{
			/* Ignored */
		}
	}
}
 80014e0:	e022      	b.n	8001528 <Echo_Btn_Handle+0xb0>
	else if (ECHO_BTN_STATE_PRESSED == true)
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01e      	beq.n	8001528 <Echo_Btn_Handle+0xb0>
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <Echo_Btn_Handle+0xbc>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f2:	d10f      	bne.n	8001514 <Echo_Btn_Handle+0x9c>
			sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	490f      	ldr	r1, [pc, #60]	; (8001538 <Echo_Btn_Handle+0xc0>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f009 feee 	bl	800b2dc <siprintf>
			ECHO_SHELL_PRINT(("%s\n",res_msg));
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f009 fedc 	bl	800b2c0 <puts>
			ECHO_BTN_STATE_HELD_TICK++;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <Echo_Btn_Handle+0xbc>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	3301      	adds	r3, #1
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <Echo_Btn_Handle+0xbc>)
 8001510:	6053      	str	r3, [r2, #4]
}
 8001512:	e009      	b.n	8001528 <Echo_Btn_Handle+0xb0>
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <Echo_Btn_Handle+0xbc>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151c:	d204      	bcs.n	8001528 <Echo_Btn_Handle+0xb0>
			ECHO_BTN_STATE_HELD_TICK++;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <Echo_Btn_Handle+0xbc>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <Echo_Btn_Handle+0xbc>)
 8001526:	6053      	str	r3, [r2, #4]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	48000800 	.word	0x48000800
 8001534:	20000288 	.word	0x20000288
 8001538:	0800f7e8 	.word	0x0800f7e8

0800153c <GetPage>:

static uint32_t GetPage(uint32_t Address);
static uint32_t GetBank(uint32_t Address);

static uint32_t GetPage(uint32_t Addr)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <GetPage+0x74>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <GetPage+0x2a>
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <GetPage+0x74>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	029a      	lsls	r2, r3, #10
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <GetPage+0x78>)
 800155e:	4013      	ands	r3, r2
 8001560:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001564:	e000      	b.n	8001568 <GetPage+0x2c>
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <GetPage+0x7c>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4293      	cmp	r3, r2
 800156c:	d905      	bls.n	800157a <GetPage+0x3e>
	{
		/* Bank 1 */
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001574:	0adb      	lsrs	r3, r3, #11
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e013      	b.n	80015a2 <GetPage+0x66>
	}
	else
	{
		/* Bank 2 */
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <GetPage+0x74>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <GetPage+0x5c>
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <GetPage+0x74>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	029a      	lsls	r2, r3, #10
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <GetPage+0x78>)
 8001590:	4013      	ands	r3, r2
 8001592:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001596:	e000      	b.n	800159a <GetPage+0x5e>
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <GetPage+0x7c>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	60fb      	str	r3, [r7, #12]
	}

	return page;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	1fff75e0 	.word	0x1fff75e0
 80015b4:	03fffc00 	.word	0x03fffc00
 80015b8:	08020000 	.word	0x08020000

080015bc <GetBank>:

static uint32_t GetBank(uint32_t Addr)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	return FLASH_BANK_1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <Echo_Flash_Write>:

HAL_StatusTypeDef Echo_Flash_Write()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80015d8:	f004 f95e 	bl	8005898 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 80015dc:	482a      	ldr	r0, [pc, #168]	; (8001688 <Echo_Flash_Write+0xb4>)
 80015de:	f7ff ffad 	bl	800153c <GetPage>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a29      	ldr	r2, [pc, #164]	; (800168c <Echo_Flash_Write+0xb8>)
 80015e6:	6013      	str	r3, [r2, #0]
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80015e8:	4829      	ldr	r0, [pc, #164]	; (8001690 <Echo_Flash_Write+0xbc>)
 80015ea:	f7ff ffa7 	bl	800153c <GetPage>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b26      	ldr	r3, [pc, #152]	; (800168c <Echo_Flash_Write+0xb8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <Echo_Flash_Write+0xc0>)
 80015fa:	6013      	str	r3, [r2, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80015fc:	4822      	ldr	r0, [pc, #136]	; (8001688 <Echo_Flash_Write+0xb4>)
 80015fe:	f7ff ffdd 	bl	80015bc <GetBank>
 8001602:	4603      	mov	r3, r0
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <Echo_Flash_Write+0xc4>)
 8001606:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <Echo_Flash_Write+0xc8>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks = BankNumber;
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <Echo_Flash_Write+0xc4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a22      	ldr	r2, [pc, #136]	; (800169c <Echo_Flash_Write+0xc8>)
 8001614:	6053      	str	r3, [r2, #4]
	EraseInitStruct.Page = FirstPage;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <Echo_Flash_Write+0xb8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a20      	ldr	r2, [pc, #128]	; (800169c <Echo_Flash_Write+0xc8>)
 800161c:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <Echo_Flash_Write+0xc0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <Echo_Flash_Write+0xc8>)
 8001624:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001626:	491e      	ldr	r1, [pc, #120]	; (80016a0 <Echo_Flash_Write+0xcc>)
 8001628:	481c      	ldr	r0, [pc, #112]	; (800169c <Echo_Flash_Write+0xc8>)
 800162a:	f004 fa27 	bl	8005a7c <HAL_FLASHEx_Erase>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <Echo_Flash_Write+0x6a>
	{
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
 8001634:	f004 f962 	bl	80058fc <HAL_FLASH_GetError>
 8001638:	4603      	mov	r3, r0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	e022      	b.n	8001684 <Echo_Flash_Write+0xb0>
	}

	/* Program the user Flash area word by word*/
	Address = FLASH_USER_START_ADDR;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <Echo_Flash_Write+0xd0>)
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <Echo_Flash_Write+0xb4>)
 8001642:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 8001644:	e016      	b.n	8001674 <Echo_Flash_Write+0xa0>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <Echo_Flash_Write+0xd0>)
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <Echo_Flash_Write+0xd4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	2000      	movs	r0, #0
 8001654:	f004 f8b4 	bl	80057c0 <HAL_FLASH_Program>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <Echo_Flash_Write+0x96>
				== HAL_OK)
		{
			Address = Address + 4;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <Echo_Flash_Write+0xd0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3304      	adds	r3, #4
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <Echo_Flash_Write+0xd0>)
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e004      	b.n	8001674 <Echo_Flash_Write+0xa0>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 800166a:	f004 f947 	bl	80058fc <HAL_FLASH_GetError>
 800166e:	4603      	mov	r3, r0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e007      	b.n	8001684 <Echo_Flash_Write+0xb0>
	while (Address < FLASH_USER_END_ADDR)
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <Echo_Flash_Write+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <Echo_Flash_Write+0xbc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d3e3      	bcc.n	8001646 <Echo_Flash_Write+0x72>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 800167e:	f004 f92d 	bl	80058dc <HAL_FLASH_Lock>
	return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0801e000 	.word	0x0801e000
 800168c:	20000290 	.word	0x20000290
 8001690:	0801ffff 	.word	0x0801ffff
 8001694:	20000294 	.word	0x20000294
 8001698:	20000298 	.word	0x20000298
 800169c:	200002a4 	.word	0x200002a4
 80016a0:	200002a0 	.word	0x200002a0
 80016a4:	2000029c 	.word	0x2000029c
 80016a8:	20000008 	.word	0x20000008

080016ac <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <Echo_Flash_Read+0x38>)
 80016b2:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <Echo_Flash_Read+0x3c>)
 80016b4:	6810      	ldr	r0, [r2, #0]
 80016b6:	6018      	str	r0, [r3, #0]
 80016b8:	8892      	ldrh	r2, [r2, #4]
 80016ba:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <Echo_Flash_Read+0x38>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <Echo_Flash_Read+0x2c>
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <Echo_Flash_Read+0x38>)
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Echo_Flash_Read+0x2c>
			&& pwm_param.pulse_width == 0)
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <Echo_Flash_Read+0x38>)
 80016ce:	885b      	ldrh	r3, [r3, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <Echo_Flash_Read+0x2c>
	{
		return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <Echo_Flash_Read+0x2e>
	}
	else
	{
		return HAL_OK;
 80016d8:	2300      	movs	r3, #0
	}
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200003d4 	.word	0x200003d4
 80016e8:	0801e000 	.word	0x0801e000

080016ec <Echo_LED_Green_Off>:

/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f6:	4802      	ldr	r0, [pc, #8]	; (8001700 <Echo_LED_Green_Off+0x14>)
 80016f8:	f004 fc6e 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	48000400 	.word	0x48000400

08001704 <Echo_LED_Green_On>:

__STATIC_INLINE void Echo_LED_Green_On(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170e:	4802      	ldr	r0, [pc, #8]	; (8001718 <Echo_LED_Green_On+0x14>)
 8001710:	f004 fc62 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	48000400 	.word	0x48000400

0800171c <Echo_LED_Off_All>:

__STATIC_INLINE void Echo_LED_Off_All(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	4802      	ldr	r0, [pc, #8]	; (8001730 <Echo_LED_Off_All+0x14>)
 8001728:	f004 fc56 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	48000400 	.word	0x48000400

08001734 <Echo_LED_State_Reset>:

__STATIC_INLINE void Echo_LED_State_Reset(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <Echo_LED_State_Reset+0x18>)
 800173a:	2200      	movs	r2, #0
 800173c:	735a      	strb	r2, [r3, #13]
	ECHO_LED_ON = false;
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <Echo_LED_State_Reset+0x18>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	Echo_LED_Off_All();
 8001744:	f7ff ffea 	bl	800171c <Echo_LED_Off_All>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200002b4 	.word	0x200002b4

08001750 <Echo_LED_CTRL>:

static void Echo_LED_CTRL(echo_led_color_t colors)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	if (colors == ECHO_LED_COLOR_NONE)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <Echo_LED_CTRL+0x16>
	{
		Echo_LED_Off_All();
 8001760:	f7ff ffdc 	bl	800171c <Echo_LED_Off_All>
	Echo_LED_Blue_On();
	else
	Echo_LED_Blue_Off();
#endif
	}
}
 8001764:	e009      	b.n	800177a <Echo_LED_CTRL+0x2a>
		if (colors & ECHO_LED_GREEN)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <Echo_LED_CTRL+0x26>
			Echo_LED_Green_On();
 8001770:	f7ff ffc8 	bl	8001704 <Echo_LED_Green_On>
}
 8001774:	e001      	b.n	800177a <Echo_LED_CTRL+0x2a>
			Echo_LED_Green_Off();
 8001776:	f7ff ffb9 	bl	80016ec <Echo_LED_Green_Off>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <Echo_LED_Init>:

void Echo_LED_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	Echo_LED_Off_All();
 8001788:	f7ff ffc8 	bl	800171c <Echo_LED_Off_All>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <Echo_LED_Init+0x14>)
 800178e:	2200      	movs	r2, #0
 8001790:	735a      	strb	r2, [r3, #13]
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002b4 	.word	0x200002b4

0800179c <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <Echo_LED_Enable+0x20>)
 80017a2:	f009 fd8d 	bl	800b2c0 <puts>
#endif
	Echo_LED_State_Reset();
 80017a6:	f7ff ffc5 	bl	8001734 <Echo_LED_State_Reset>
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <Echo_LED_Enable+0x24>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <Echo_LED_Enable+0x24>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	731a      	strb	r2, [r3, #12]
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	0800f7f4 	.word	0x0800f7f4
 80017c0:	200002b4 	.word	0x200002b4

080017c4 <Echo_Set_LED_State>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_Set_LED_State(echo_led_sate_t led_state)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	echo_led_state_ind_t led_ind;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
 80017ce:	482a      	ldr	r0, [pc, #168]	; (8001878 <Echo_Set_LED_State+0xb4>)
 80017d0:	f009 fd76 	bl	800b2c0 <puts>
#endif
	Echo_LED_Enable();
 80017d4:	f7ff ffe2 	bl	800179c <Echo_LED_Enable>

	if (ECHO_LED_IND_DISABLED() == true)
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <Echo_Set_LED_State+0xb8>)
 80017da:	7b1b      	ldrb	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d145      	bne.n	800186c <Echo_Set_LED_State+0xa8>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <Echo_Set_LED_State+0x26>
		led_state = ECHO_LED_STATE_NONE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]

	if (led_state == ECHO_LED_CUR_STATE)
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <Echo_Set_LED_State+0xb8>)
 80017ec:	7b5b      	ldrb	r3, [r3, #13]
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d03d      	beq.n	8001870 <Echo_Set_LED_State+0xac>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 80017f4:	79fa      	ldrb	r2, [r7, #7]
 80017f6:	4922      	ldr	r1, [pc, #136]	; (8001880 <Echo_Set_LED_State+0xbc>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	723b      	strb	r3, [r7, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	491d      	ldr	r1, [pc, #116]	; (8001880 <Echo_Set_LED_State+0xbc>)
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	3302      	adds	r3, #2
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	817b      	strh	r3, [r7, #10]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	4918      	ldr	r1, [pc, #96]	; (8001880 <Echo_Set_LED_State+0xbc>)
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	81bb      	strh	r3, [r7, #12]

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff ff8e 	bl	8001750 <Echo_LED_CTRL>

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	4293      	cmp	r3, r2
 800183c:	d106      	bne.n	800184c <Echo_Set_LED_State+0x88>
	{
		ECHO_LED_ON = false;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <Echo_Set_LED_State+0xb8>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = 0;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <Echo_Set_LED_State+0xb8>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e00b      	b.n	8001864 <Echo_Set_LED_State+0xa0>
	}
	else
	{
		Echo_LED_CTRL(led_ind.led_colors);
 800184c:	7a3b      	ldrb	r3, [r7, #8]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff7e 	bl	8001750 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <Echo_Set_LED_State+0xb8>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800185a:	f001 ff99 	bl	8003790 <HAL_GetTick>
 800185e:	4603      	mov	r3, r0
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <Echo_Set_LED_State+0xb8>)
 8001862:	6053      	str	r3, [r2, #4]
	}

	ECHO_LED_CUR_STATE = led_state;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <Echo_Set_LED_State+0xb8>)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	7353      	strb	r3, [r2, #13]
 800186a:	e002      	b.n	8001872 <Echo_Set_LED_State+0xae>
		return;
 800186c:	bf00      	nop
 800186e:	e000      	b.n	8001872 <Echo_Set_LED_State+0xae>
		return;
 8001870:	bf00      	nop

}
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800f808 	.word	0x0800f808
 800187c:	200002b4 	.word	0x200002b4
 8001880:	0800fd38 	.word	0x0800fd38

08001884 <Echo_LED_Handle>:
		Echo_Set_LED_State(ECHO_LED_STATE_NONE);
		break;
	}
}
void Echo_LED_Handle(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <Echo_LED_Handle+0x124>)
 800188c:	7b5b      	ldrb	r3, [r3, #13]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8082 	beq.w	8001998 <Echo_LED_Handle+0x114>
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001896:	7b5b      	ldrb	r3, [r3, #13]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d902      	bls.n	80018a2 <Echo_LED_Handle+0x1e>
	{
		Echo_LED_State_Reset();
 800189c:	f7ff ff4a 	bl	8001734 <Echo_LED_State_Reset>
		return;
 80018a0:	e07f      	b.n	80019a2 <Echo_LED_Handle+0x11e>
	}

	/* Check timeout of LED indication */
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d108      	bne.n	80018c0 <Echo_LED_Handle+0x3c>
	{
#ifdef DEBUG
		ECHO_SHELL_PRINT(("LED IND Timeout\r\n"));
 80018ae:	483f      	ldr	r0, [pc, #252]	; (80019ac <Echo_LED_Handle+0x128>)
 80018b0:	f009 fd06 	bl	800b2c0 <puts>
#endif
		Echo_LED_State_Reset();
 80018b4:	f7ff ff3e 	bl	8001734 <Echo_LED_State_Reset>
		ECHO_LED_TIMED_OUT = true;
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	731a      	strb	r2, [r3, #12]
		return;
 80018be:	e070      	b.n	80019a2 <Echo_LED_Handle+0x11e>
	}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d867      	bhi.n	800199c <Echo_LED_Handle+0x118>
	{
		ECHO_LED_TIMEOUT_TICK++;
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018d4:	6093      	str	r3, [r2, #8]
	else
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018d8:	7b5b      	ldrb	r3, [r3, #13]
 80018da:	4619      	mov	r1, r3
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <Echo_LED_Handle+0x12c>)
 80018de:	460b      	mov	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	703b      	strb	r3, [r7, #0]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <Echo_LED_Handle+0x124>)
 80018ee:	7b5b      	ldrb	r3, [r3, #13]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <Echo_LED_Handle+0x12c>)
 80018f4:	460b      	mov	r3, r1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	3302      	adds	r3, #2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	807b      	strh	r3, [r7, #2]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001906:	7b5b      	ldrb	r3, [r3, #13]
 8001908:	4619      	mov	r1, r3
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <Echo_LED_Handle+0x12c>)
 800190c:	460b      	mov	r3, r1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	440b      	add	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	80bb      	strh	r3, [r7, #4]

	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001922:	4293      	cmp	r3, r2
 8001924:	d03c      	beq.n	80019a0 <Echo_LED_Handle+0x11c>
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d039      	beq.n	80019a0 <Echo_LED_Handle+0x11c>
	{
		return;
	}

	if (ECHO_LED_ON == false
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <Echo_LED_Handle+0x124>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f083 0301 	eor.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <Echo_LED_Handle+0xe2>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 800193a:	f001 ff29 	bl	8003790 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	4293      	cmp	r3, r2
 800194a:	d30c      	bcc.n	8001966 <Echo_LED_Handle+0xe2>
	{
		Echo_LED_CTRL(led_ind.led_colors);
 800194c:	783b      	ldrb	r3, [r7, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fefe 	bl	8001750 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800195a:	f001 ff19 	bl	8003790 <HAL_GetTick>
 800195e:	4603      	mov	r3, r0
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001962:	6053      	str	r3, [r2, #4]
 8001964:	e01d      	b.n	80019a2 <Echo_LED_Handle+0x11e>
	}
	else if (ECHO_LED_ON == true
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <Echo_LED_Handle+0x11e>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 800196e:	f001 ff0f 	bl	8003790 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	88ba      	ldrh	r2, [r7, #4]
 800197c:	4293      	cmp	r3, r2
 800197e:	d310      	bcc.n	80019a2 <Echo_LED_Handle+0x11e>
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fee5 	bl	8001750 <Echo_LED_CTRL>
		ECHO_LED_ON = false;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800198c:	f001 ff00 	bl	8003790 <HAL_GetTick>
 8001990:	4603      	mov	r3, r0
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <Echo_LED_Handle+0x124>)
 8001994:	6053      	str	r3, [r2, #4]
 8001996:	e004      	b.n	80019a2 <Echo_LED_Handle+0x11e>
		return;
 8001998:	bf00      	nop
 800199a:	e002      	b.n	80019a2 <Echo_LED_Handle+0x11e>
		return;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <Echo_LED_Handle+0x11e>
		return;
 80019a0:	bf00      	nop
	}
}
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002b4 	.word	0x200002b4
 80019ac:	0800f83c 	.word	0x0800f83c
 80019b0:	0800fd38 	.word	0x0800fd38

080019b4 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0a      	cmp	r3, #10
 80019c0:	d106      	bne.n	80019d0 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 80019c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c6:	2201      	movs	r2, #1
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__io_putchar+0x34>)
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <__io_putchar+0x38>)
 80019cc:	f007 f96a 	bl	8008ca4 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 80019d0:	1d39      	adds	r1, r7, #4
 80019d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d6:	2201      	movs	r2, #1
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <__io_putchar+0x38>)
 80019da:	f007 f963 	bl	8008ca4 <HAL_UART_Transmit>
	return ch;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	0800f850 	.word	0x0800f850
 80019ec:	20000950 	.word	0x20000950

080019f0 <Echo_ShellPrint_Char>:

	ECHO_SHELL_UART->TDR = st_rcv_byte;
}

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	if (len == 0)
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d014      	beq.n	8001a2c <Echo_ShellPrint_Char+0x3c>
		return;

	for (i = 0; i < len; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	81fb      	strh	r3, [r7, #14]
 8001a06:	e009      	b.n	8001a1c <Echo_ShellPrint_Char+0x2c>
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 fbd1 	bl	800b1b8 <putchar>
	for (i = 0; i < len; i++)
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	81fb      	strh	r3, [r7, #14]
 8001a1c:	89fa      	ldrh	r2, [r7, #14]
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3f1      	bcc.n	8001a08 <Echo_ShellPrint_Char+0x18>
	}

	ECHO_SHELL_PRINT(("\n"));
 8001a24:	200a      	movs	r0, #10
 8001a26:	f009 fbc7 	bl	800b1b8 <putchar>
 8001a2a:	e000      	b.n	8001a2e <Echo_ShellPrint_Char+0x3e>
		return;
 8001a2c:	bf00      	nop
}
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Echo_Print_Manual>:

/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <Echo_Print_Manual+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f009 fc3f 	bl	800b2c0 <puts>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000004 	.word	0x20000004

08001a4c <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
	char res_msg[40] =
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2224      	movs	r2, #36	; 0x24
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 fd11 	bl	800a484 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001a62:	463b      	mov	r3, r7
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <Echo_Print_Version+0x34>)
 8001a66:	4907      	ldr	r1, [pc, #28]	; (8001a84 <Echo_Print_Version+0x38>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f009 fc37 	bl	800b2dc <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 fc25 	bl	800b2c0 <puts>
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	0800fb08 	.word	0x0800fb08
 8001a84:	0800fb14 	.word	0x0800fb14

08001a88 <Echo_Shell_Input_Print>:

/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	if (echo_uart2_rcv_byte != 0)
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <Echo_Shell_Input_Print+0x24>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <Echo_Shell_Input_Print+0x1e>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 8001a94:	230a      	movs	r3, #10
 8001a96:	2201      	movs	r2, #1
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <Echo_Shell_Input_Print+0x24>)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <Echo_Shell_Input_Print+0x28>)
 8001a9c:	f007 f902 	bl	8008ca4 <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <Echo_Shell_Input_Print+0x24>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200005fe 	.word	0x200005fe
 8001ab0:	20000950 	.word	0x20000950

08001ab4 <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 8001ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abc:	2100      	movs	r1, #0
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <Echo_Shell_Init+0x1c>)
 8001ac0:	f008 fce0 	bl	800a484 <memset>
	SHELL_MSG_RCV_POS = 0;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <Echo_Shell_Init+0x20>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002c5 	.word	0x200002c5
 8001ad4:	200002c4 	.word	0x200002c4

08001ad8 <Echo_Shell_CMD_Handle>:

/*
 *  SHELL COMMAND EXE
 */
void Echo_Shell_CMD_Handle()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	static uint8_t st_byte;
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 8001adc:	e046      	b.n	8001b6c <Echo_Shell_CMD_Handle+0x94>
			&& SHELL_MSG_RCV_POS < SHELL_MSG_RCV_BUF_SIZE)
	{
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 8001ade:	f001 fe57 	bl	8003790 <HAL_GetTick>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001ae6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <Echo_Shell_CMD_Handle+0x108>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b23      	cmp	r3, #35	; 0x23
 8001af0:	d003      	beq.n	8001afa <Echo_Shell_CMD_Handle+0x22>
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d038      	beq.n	8001b6c <Echo_Shell_CMD_Handle+0x94>
		{
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <Echo_Shell_CMD_Handle+0x108>)
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b06:	440b      	add	r3, r1
 8001b08:	705a      	strb	r2, [r3, #1]
			SHELL_MSG_RCV_POS++;
 8001b0a:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b14:	701a      	strb	r2, [r3, #0]

			/* ENTER KEY CHECK */
			if (st_byte == 13)
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <Echo_Shell_CMD_Handle+0x108>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b0d      	cmp	r3, #13
 8001b1c:	d126      	bne.n	8001b6c <Echo_Shell_CMD_Handle+0x94>
			{
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4930      	ldr	r1, [pc, #192]	; (8001be4 <Echo_Shell_CMD_Handle+0x10c>)
 8001b22:	4831      	ldr	r0, [pc, #196]	; (8001be8 <Echo_Shell_CMD_Handle+0x110>)
 8001b24:	f009 fc73 	bl	800b40e <strncmp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <Echo_Shell_CMD_Handle+0x66>
						(const char*) "#set", 4) == 0
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001b2e:	2204      	movs	r2, #4
 8001b30:	492e      	ldr	r1, [pc, #184]	; (8001bec <Echo_Shell_CMD_Handle+0x114>)
 8001b32:	482d      	ldr	r0, [pc, #180]	; (8001be8 <Echo_Shell_CMD_Handle+0x110>)
 8001b34:	f009 fc6b 	bl	800b40e <strncmp>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d107      	bne.n	8001b4e <Echo_Shell_CMD_Handle+0x76>
								(const char*) "#get", 4) == 0)
				{
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
					SHELL_MSG_RCV_POS);
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4619      	mov	r1, r3
 8001b46:	4828      	ldr	r0, [pc, #160]	; (8001be8 <Echo_Shell_CMD_Handle+0x110>)
 8001b48:	f000 f8a2 	bl	8001c90 <Echo_ParameterCMD_Check>
 8001b4c:	e006      	b.n	8001b5c <Echo_Shell_CMD_Handle+0x84>
				}
				else
				{
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4619      	mov	r1, r3
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <Echo_Shell_CMD_Handle+0x110>)
 8001b58:	f000 f84c 	bl	8001bf4 <Echo_AdminCMD_Check>
				}
				Echo_Shell_Init();
 8001b5c:	f7ff ffaa 	bl	8001ab4 <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001b60:	f001 fe16 	bl	8003790 <HAL_GetTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 8001b6c:	481c      	ldr	r0, [pc, #112]	; (8001be0 <Echo_Shell_CMD_Handle+0x108>)
 8001b6e:	f000 fd33 	bl	80025d8 <Echo_Uart2_Get_RCV_Q>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1b2      	bne.n	8001ade <Echo_Shell_CMD_Handle+0x6>
			}
		}
	}

	if (SHELL_MSG_RCV_POS > 0)
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <Echo_Shell_CMD_Handle+0xd4>
	{
		/* Check flush timeout */
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 8001b80:	f001 fe06 	bl	8003790 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b92:	d90b      	bls.n	8001bac <Echo_Shell_CMD_Handle+0xd4>
				> ECHO_SHELL_MSG_RCV_FLUSH_TIMEOUT)
		{
#if 1
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <Echo_Shell_CMD_Handle+0x118>)
 8001b96:	f009 fb93 	bl	800b2c0 <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4811      	ldr	r0, [pc, #68]	; (8001be8 <Echo_Shell_CMD_Handle+0x110>)
 8001ba4:	f7ff ff24 	bl	80019f0 <Echo_ShellPrint_Char>
#endif
			Echo_Shell_Init();
 8001ba8:	f7ff ff84 	bl	8001ab4 <Echo_Shell_Init>
		}
	}
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001bac:	f000 fc0e 	bl	80023cc <Echo_Get_Sys_FSM_State>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d110      	bne.n	8001bd8 <Echo_Shell_CMD_Handle+0x100>
	{
		/* Check handshaking timeout */
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 8001bb6:	f001 fdeb 	bl	8003790 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d905      	bls.n	8001bd8 <Echo_Shell_CMD_Handle+0x100>
#if 0
			ECHO_SHELL_PRINT(("SHELL MSG: Handshaking timeout\n"));
			aulStimul_forceStop();
#endif
			/* Reset time */
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001bcc:	f001 fde0 	bl	8003790 <HAL_GetTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a02      	ldr	r2, [pc, #8]	; (8001bdc <Echo_Shell_CMD_Handle+0x104>)
 8001bd4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		}
	}
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200002c4 	.word	0x200002c4
 8001be0:	200003d0 	.word	0x200003d0
 8001be4:	0800fb2c 	.word	0x0800fb2c
 8001be8:	200002c5 	.word	0x200002c5
 8001bec:	0800fb34 	.word	0x0800fb34
 8001bf0:	0800fb3c 	.word	0x0800fb3c

08001bf4 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e012      	b.n	8001c2c <Echo_AdminCMD_Check+0x38>
	{
		if (strncmp((const char*) data,
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
				(const char*) admin_cmd_str_table[admin_cmd_cnt].str,
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <Echo_AdminCMD_Check+0x98>)
 8001c0a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
				admin_cmd_str_table[admin_cmd_cnt].len) == 0)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <Echo_AdminCMD_Check+0x98>)
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	791b      	ldrb	r3, [r3, #4]
		if (strncmp((const char*) data,
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f009 fbf7 	bl	800b40e <strncmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <Echo_AdminCMD_Check+0x40>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d9e9      	bls.n	8001c06 <Echo_AdminCMD_Check+0x12>
 8001c32:	e000      	b.n	8001c36 <Echo_AdminCMD_Check+0x42>
		{
			break;
 8001c34:	bf00      	nop
		}
	}
	switch (admin_cmd_cnt)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d821      	bhi.n	8001c80 <Echo_AdminCMD_Check+0x8c>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <Echo_AdminCMD_Check+0x50>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c5d 	.word	0x08001c5d
 8001c48:	08001c63 	.word	0x08001c63
 8001c4c:	08001c69 	.word	0x08001c69
 8001c50:	08001c6f 	.word	0x08001c6f
 8001c54:	08001c75 	.word	0x08001c75
 8001c58:	08001c7b 	.word	0x08001c7b
	{
	case START:
		Echo_Set_Sys_FSM_State_Start();
 8001c5c:	f000 fbc2 	bl	80023e4 <Echo_Set_Sys_FSM_State_Start>
		break;
 8001c60:	e00f      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	case STOP:
		Echo_Set_Sys_FSM_State_Stop();
 8001c62:	f000 fbcb 	bl	80023fc <Echo_Set_Sys_FSM_State_Stop>
		break;
 8001c66:	e00c      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	case SAVE:
		Echo_Flash_Write();
 8001c68:	f7ff fcb4 	bl	80015d4 <Echo_Flash_Write>
		break;
 8001c6c:	e009      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	case FACTORYRESET:
		Echo_Factory_Reset();
 8001c6e:	f000 f9e9 	bl	8002044 <Echo_Factory_Reset>
		break;
 8001c72:	e006      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	case HELP:
		Echo_Print_Manual();
 8001c74:	f7ff fede 	bl	8001a34 <Echo_Print_Manual>
		break;
 8001c78:	e003      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	case VERSION:
		Echo_Print_Version();
 8001c7a:	f7ff fee7 	bl	8001a4c <Echo_Print_Version>
		break;
 8001c7e:	e000      	b.n	8001c82 <Echo_AdminCMD_Check+0x8e>

	default:
		break;
 8001c80:	bf00      	nop
	}
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800fd4c 	.word	0x0800fd4c

08001c90 <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
	uint8_t param_cmd_cnt = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e012      	b.n	8001ccc <Echo_ParameterCMD_Check+0x3c>
	{
		if (strncmp((const char*) data,
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
				(const char*) parameter_cmd_str_table[param_cmd_cnt].str,
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <Echo_ParameterCMD_Check+0xc4>)
 8001caa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
				parameter_cmd_str_table[param_cmd_cnt].len) == 0)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <Echo_ParameterCMD_Check+0xc4>)
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	791b      	ldrb	r3, [r3, #4]
		if (strncmp((const char*) data,
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f009 fba7 	bl	800b40e <strncmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <Echo_ParameterCMD_Check+0x44>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d9e9      	bls.n	8001ca6 <Echo_ParameterCMD_Check+0x16>
 8001cd2:	e000      	b.n	8001cd6 <Echo_ParameterCMD_Check+0x46>
		{
			break;
 8001cd4:	bf00      	nop
		}
	}

	switch (param_cmd_cnt)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d836      	bhi.n	8001d4a <Echo_ParameterCMD_Check+0xba>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <Echo_ParameterCMD_Check+0x54>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001d09 	.word	0x08001d09
 8001ce8:	08001d15 	.word	0x08001d15
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001d31 	.word	0x08001d31
 8001cf4:	08001d3d 	.word	0x08001d3d
 8001cf8:	08001d3d 	.word	0x08001d3d
 8001cfc:	08001d3d 	.word	0x08001d3d
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d3d 	.word	0x08001d3d
	{
	case SET_DEADTIME:
		Echo_Set_DT(data, len);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f86b 	bl	8001de8 <Echo_Set_DT>
		break;
 8001d12:	e01b      	b.n	8001d4c <Echo_ParameterCMD_Check+0xbc>

	case SET_PULSEWIDTH:
		Echo_Set_PW(data, len);
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f885 	bl	8001e28 <Echo_Set_PW>
		break;
 8001d1e:	e015      	b.n	8001d4c <Echo_ParameterCMD_Check+0xbc>

	case SET_PERIOD:
		Echo_Set_Sys_FSM_State_Stop();
 8001d20:	f000 fb6c 	bl	80023fc <Echo_Set_Sys_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f895 	bl	8001e58 <Echo_Set_HZ>
		break;
 8001d2e:	e00d      	b.n	8001d4c <Echo_ParameterCMD_Check+0xbc>

	case SET_VOLTAGE_PW:
		Echo_Set_V_PW(data, len);
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8c9 	bl	8001ecc <Echo_Set_V_PW>
		break;
 8001d3a:	e007      	b.n	8001d4c <Echo_ParameterCMD_Check+0xbc>
	case GET_DEADTIME:
	case GET_PULSEWIDTH:
	case GET_FREQUENCY:
	case GET_VOLTAGE_PW:
	case GET_ALLPRM:
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f8fa 	bl	8001f3c <Echo_Get_Res_Data>
		break;
 8001d48:	e000      	b.n	8001d4c <Echo_ParameterCMD_Check+0xbc>

	default:
		break;
 8001d4a:	bf00      	nop
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	0800fd7c 	.word	0x0800fd7c

08001d58 <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12e      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		/* ADC1 FSM */
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 8001d6a:	f7ff faff 	bl	800136c <Echo_Get_ADC1_State>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d129      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x70>
		{
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 8001d74:	f7ff fa6e 	bl	8001254 <Echo_Stepup_ADC1_AVG>
 8001d78:	ed87 0a03 	vstr	s0, [r7, #12]
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7fe fbe3 	bl	8000548 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001d88:	f009 f9fe 	bl	800b188 <iprintf>
			ECHO_SHELL_PRINT(
 8001d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001dd8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8001d9e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001ddc <HAL_TIM_PeriodElapsedCallback+0x84>
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa84 	bl	80012b0 <Echo_ADC_Calc_Stepup_V>
 8001da8:	ee10 3a10 	vmov	r3, s0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbcb 	bl	8000548 <__aeabi_f2d>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001db8:	f009 f9e6 	bl	800b188 <iprintf>
					("STEPUP VOLTAGE : %f\n",Echo_ADC_Calc_Stepup_V(adc_avg_data, R1_Vstup, R2_Vstup)));
			ECHO_SHELL_PRINT(("----------\r\n"));
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001dbe:	f009 fa7f 	bl	800b2c0 <puts>
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f7ff fade 	bl	8001384 <Echo_Set_ADC1_State>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40014400 	.word	0x40014400
 8001dd4:	0800fb54 	.word	0x0800fb54
 8001dd8:	42dc0000 	.word	0x42dc0000
 8001ddc:	45610000 	.word	0x45610000
 8001de0:	0800fb64 	.word	0x0800fb64
 8001de4:	0800fb7c 	.word	0x0800fb7c

08001de8 <Echo_Set_DT>:

/* DATA PARSER */
char res_msg[256] =
{ '\0', };
void Echo_Set_DT(uint8_t *data, uint16_t len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <Echo_Set_DT+0x38>)
 8001df6:	490b      	ldr	r1, [pc, #44]	; (8001e24 <Echo_Set_DT+0x3c>)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f009 fa8f 	bl	800b31c <siscanf>
			&pwm_param.dead_time);
	/* ERROR CONTROL */
	if (pwm_param.dead_time < (GLICH_DEBOUNCING_TIME * 2))
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <Echo_Set_DT+0x38>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	d802      	bhi.n	8001e0c <Echo_Set_DT+0x24>
	{
		pwm_param.dead_time = GLICH_DEBOUNCING_TIME * 2;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <Echo_Set_DT+0x38>)
 8001e08:	220a      	movs	r2, #10
 8001e0a:	801a      	strh	r2, [r3, #0]
	}
	Echo_Pulse_Prm_Config();
 8001e0c:	f000 f932 	bl	8002074 <Echo_Pulse_Prm_Config>
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 f893 	bl	8001f3c <Echo_Get_Res_Data>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003d4 	.word	0x200003d4
 8001e24:	0800fbc8 	.word	0x0800fbc8

08001e28 <Echo_Set_PW>:
void Echo_Set_PW(uint8_t *data, uint16_t len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <Echo_Set_PW+0x28>)
 8001e36:	4907      	ldr	r1, [pc, #28]	; (8001e54 <Echo_Set_PW+0x2c>)
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f009 fa6f 	bl	800b31c <siscanf>
			&pwm_param.pulse_width);
	Echo_Pulse_Prm_Config();
 8001e3e:	f000 f919 	bl	8002074 <Echo_Pulse_Prm_Config>
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 f87a 	bl	8001f3c <Echo_Get_Res_Data>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200003d6 	.word	0x200003d6
 8001e54:	0800fbdc 	.word	0x0800fbdc

08001e58 <Echo_Set_HZ>:
void Echo_Set_HZ(uint8_t *data, uint16_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <Echo_Set_HZ+0x64>)
 8001e66:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <Echo_Set_HZ+0x68>)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f009 fa57 	bl	800b31c <siscanf>
			&pwm_param.pulse_freq);

	/* ERROR CONTROL */
	if (PULSE_FREQ_ARR <= (TOTAL_PULSE_WIDTH_TIME * 2))
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <Echo_Set_HZ+0x6c>)
 8001e70:	889b      	ldrh	r3, [r3, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <Echo_Set_HZ+0x70>)
 8001e76:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <Echo_Set_HZ+0x6c>)
 8001e7c:	885b      	ldrh	r3, [r3, #2]
 8001e7e:	3305      	adds	r3, #5
 8001e80:	4910      	ldr	r1, [pc, #64]	; (8001ec4 <Echo_Set_HZ+0x6c>)
 8001e82:	8809      	ldrh	r1, [r1, #0]
 8001e84:	440b      	add	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dc02      	bgt.n	8001e92 <Echo_Set_HZ+0x3a>
	{
		pwm_param.pulse_freq = 1;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <Echo_Set_HZ+0x6c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	809a      	strh	r2, [r3, #4]
	}

	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001e92:	f000 fa9b 	bl	80023cc <Echo_Get_Sys_FSM_State>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d106      	bne.n	8001eaa <Echo_Set_HZ+0x52>
	{
		Echo_Set_Sys_FSM_State_Stop();
 8001e9c:	f000 faae 	bl	80023fc <Echo_Set_Sys_FSM_State_Stop>
		Echo_Pulse_Prm_Config();
 8001ea0:	f000 f8e8 	bl	8002074 <Echo_Pulse_Prm_Config>
		Echo_Set_Sys_FSM_State_Start();
 8001ea4:	f000 fa9e 	bl	80023e4 <Echo_Set_Sys_FSM_State_Start>
 8001ea8:	e001      	b.n	8001eae <Echo_Set_HZ+0x56>
	}
	else
	{
		Echo_Pulse_Prm_Config();
 8001eaa:	f000 f8e3 	bl	8002074 <Echo_Pulse_Prm_Config>
	}

	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f000 f844 	bl	8001f3c <Echo_Get_Res_Data>

}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200003d8 	.word	0x200003d8
 8001ec0:	0800fbf0 	.word	0x0800fbf0
 8001ec4:	200003d4 	.word	0x200003d4
 8001ec8:	000f4240 	.word	0x000f4240

08001ecc <Echo_Set_V_PW>:
void Echo_Set_V_PW(uint8_t *data, uint16_t len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step_tv);
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <Echo_Set_V_PW+0x38>)
 8001eda:	490b      	ldr	r1, [pc, #44]	; (8001f08 <Echo_Set_V_PW+0x3c>)
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f009 fa1d 	bl	800b31c <siscanf>
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001ee2:	f000 fa73 	bl	80023cc <Echo_Get_Sys_FSM_State>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d102      	bne.n	8001ef2 <Echo_Set_V_PW+0x26>
	{
		HAL_TIM_Base_Start_IT(&htim16);
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <Echo_Set_V_PW+0x40>)
 8001eee:	f005 f953 	bl	8007198 <HAL_TIM_Base_Start_IT>
	}
	Echo_Pulse_V_PW_Config();
 8001ef2:	f000 f9e3 	bl	80022bc <Echo_Pulse_V_PW_Config>
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f000 f820 	bl	8001f3c <Echo_Get_Res_Data>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	0800fc04 	.word	0x0800fc04
 8001f0c:	200007f0 	.word	0x200007f0

08001f10 <Echo_VPW_SET_TP_ON>:

void Echo_VPW_SET_TP_ON(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f004 f85b 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <Echo_VPW_TP_OFF>:

void Echo_VPW_TP_OFF(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f004 f850 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
	char mes_head[11] =
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f8c3 2003 	str.w	r2, [r3, #3]
	{ '\0', };
	strcpy((char*) mes_head,
 8001f56:	79fb      	ldrb	r3, [r7, #7]
			(const char*) get_prm_cmd_str_table[select_msg].str);
 8001f58:	4a30      	ldr	r2, [pc, #192]	; (800201c <Echo_Get_Res_Data+0xe0>)
 8001f5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	strcpy((char*) mes_head,
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 fa4a 	bl	800b3fe <strcpy>

	switch (select_msg)
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d84c      	bhi.n	800200a <Echo_Get_Res_Data+0xce>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <Echo_Get_Res_Data+0x3c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f8d 	.word	0x08001f8d
 8001f7c:	08001f9f 	.word	0x08001f9f
 8001f80:	08001fb1 	.word	0x08001fb1
 8001f84:	08001fc3 	.word	0x08001fc3
 8001f88:	08001fdf 	.word	0x08001fdf
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
				pwm_param.dead_time);
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001f90:	f107 020c 	add.w	r2, r7, #12
 8001f94:	4923      	ldr	r1, [pc, #140]	; (8002024 <Echo_Get_Res_Data+0xe8>)
 8001f96:	4824      	ldr	r0, [pc, #144]	; (8002028 <Echo_Get_Res_Data+0xec>)
 8001f98:	f009 f9a0 	bl	800b2dc <siprintf>
		break;
 8001f9c:	e036      	b.n	800200c <Echo_Get_Res_Data+0xd0>
	case RESPONSE_PULSEWIDTH:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
				pwm_param.pulse_width);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001fa0:	885b      	ldrh	r3, [r3, #2]
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	491f      	ldr	r1, [pc, #124]	; (8002024 <Echo_Get_Res_Data+0xe8>)
 8001fa8:	481f      	ldr	r0, [pc, #124]	; (8002028 <Echo_Get_Res_Data+0xec>)
 8001faa:	f009 f997 	bl	800b2dc <siprintf>
		break;
 8001fae:	e02d      	b.n	800200c <Echo_Get_Res_Data+0xd0>
	case RESPONSE_FREQUENCY:
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
				pwm_param.pulse_freq);
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 8001fb4:	f107 020c 	add.w	r2, r7, #12
 8001fb8:	491c      	ldr	r1, [pc, #112]	; (800202c <Echo_Get_Res_Data+0xf0>)
 8001fba:	481b      	ldr	r0, [pc, #108]	; (8002028 <Echo_Get_Res_Data+0xec>)
 8001fbc:	f009 f98e 	bl	800b2dc <siprintf>
		break;
 8001fc0:	e024      	b.n	800200c <Echo_Get_Res_Data+0xd0>
	case RESPONSE_VOLTAGE_PW:
		sprintf((char*) res_msg, (const char*) "%s %d PW\r\n\r\n", mes_head,
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <Echo_Get_Res_Data+0xf4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f107 020c 	add.w	r2, r7, #12
 8001fca:	491a      	ldr	r1, [pc, #104]	; (8002034 <Echo_Get_Res_Data+0xf8>)
 8001fcc:	4816      	ldr	r0, [pc, #88]	; (8002028 <Echo_Get_Res_Data+0xec>)
 8001fce:	f009 f985 	bl	800b2dc <siprintf>
				v_step_tv);
		/*TEST CODE*/
		Echo_VPW_SET_TP_ON();
 8001fd2:	f7ff ff9d 	bl	8001f10 <Echo_VPW_SET_TP_ON>
		vpw_set_flag = true;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <Echo_Get_Res_Data+0xfc>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
		/*TEST CODE*/
		break;
 8001fdc:	e016      	b.n	800200c <Echo_Get_Res_Data+0xd0>
	case RESPONSE_ALLPRM:
		sprintf((char*) res_msg, (const char*) "%s\r\n"
				"DT: %d us\r\n"
				"PW: %d us\r\n"
				"HZ: %d Hz\r\n"
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 8001fe2:	461c      	mov	r4, r3
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001fe6:	885b      	ldrh	r3, [r3, #2]
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 8001fe8:	4619      	mov	r1, r3
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <Echo_Get_Res_Data+0xe4>)
 8001fec:	889b      	ldrh	r3, [r3, #4]
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <Echo_Get_Res_Data+0xf4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f107 020c 	add.w	r2, r7, #12
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	9001      	str	r0, [sp, #4]
 8001ffc:	9100      	str	r1, [sp, #0]
 8001ffe:	4623      	mov	r3, r4
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <Echo_Get_Res_Data+0x100>)
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <Echo_Get_Res_Data+0xec>)
 8002004:	f009 f96a 	bl	800b2dc <siprintf>
		break;
 8002008:	e000      	b.n	800200c <Echo_Get_Res_Data+0xd0>
	default:
		break;
 800200a:	bf00      	nop
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 800200c:	4906      	ldr	r1, [pc, #24]	; (8002028 <Echo_Get_Res_Data+0xec>)
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <Echo_Get_Res_Data+0x104>)
 8002010:	f009 f8ba 	bl	800b188 <iprintf>
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	0800fdc4 	.word	0x0800fdc4
 8002020:	200003d4 	.word	0x200003d4
 8002024:	0800fc18 	.word	0x0800fc18
 8002028:	200003f4 	.word	0x200003f4
 800202c:	0800fc28 	.word	0x0800fc28
 8002030:	2000000c 	.word	0x2000000c
 8002034:	0800fc38 	.word	0x0800fc38
 8002038:	200003d1 	.word	0x200003d1
 800203c:	0800fc48 	.word	0x0800fc48
 8002040:	0800fc7c 	.word	0x0800fc7c

08002044 <Echo_Factory_Reset>:

/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	pwm_param.dead_time = 20;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <Echo_Factory_Reset+0x28>)
 800204a:	2214      	movs	r2, #20
 800204c:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <Echo_Factory_Reset+0x28>)
 8002050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002054:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 100;
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <Echo_Factory_Reset+0x28>)
 8002058:	2264      	movs	r2, #100	; 0x64
 800205a:	809a      	strh	r2, [r3, #4]
	v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <Echo_Factory_Reset+0x2c>)
 800205e:	220a      	movs	r2, #10
 8002060:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 8002062:	f7ff fab7 	bl	80015d4 <Echo_Flash_Write>
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200003d4 	.word	0x200003d4
 8002070:	2000000c 	.word	0x2000000c

08002074 <Echo_Pulse_Prm_Config>:
#ifdef ECHO_PULSE_DMA
/*
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_Prm_Config()
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	/* HZ SETTING */
	TIM2->CNT = 0;
 8002078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	461a      	mov	r2, r3
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <Echo_Pulse_Prm_Config+0x9c>)
 8002088:	fb93 f3f2 	sdiv	r3, r3, r2
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 8002096:	885b      	ldrh	r3, [r3, #2]
 8002098:	f103 020a 	add.w	r2, r3, #10
 800209c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020a4:	885b      	ldrh	r3, [r3, #2]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	330a      	adds	r3, #10
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <Echo_Pulse_Prm_Config+0xa0>)
 80020b4:	601a      	str	r2, [r3, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020b8:	885b      	ldrh	r3, [r3, #2]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <Echo_Pulse_Prm_Config+0xa0>)
 80020c6:	605a      	str	r2, [r3, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020ca:	885b      	ldrh	r3, [r3, #2]
 80020cc:	3305      	adds	r3, #5
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <Echo_Pulse_Prm_Config+0xa4>)
 80020d2:	601a      	str	r2, [r3, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020d6:	885b      	ldrh	r3, [r3, #2]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	3305      	adds	r3, #5
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <Echo_Pulse_Prm_Config+0xa4>)
 80020e6:	605a      	str	r2, [r3, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020ea:	885b      	ldrh	r3, [r3, #2]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <Echo_Pulse_Prm_Config+0x98>)
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	3305      	adds	r3, #5
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <Echo_Pulse_Prm_Config+0xa4>)
 80020fa:	609a      	str	r2, [r3, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <Echo_Pulse_Prm_Config+0xa4>)
 80020fe:	2205      	movs	r2, #5
 8002100:	60da      	str	r2, [r3, #12]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200003d4 	.word	0x200003d4
 8002110:	000f4240 	.word	0x000f4240
 8002114:	200003dc 	.word	0x200003dc
 8002118:	200003e4 	.word	0x200003e4

0800211c <Echo_Stim_Stop>:

/*
 * Stimulation Start AND Stop
 */
void Echo_Stim_Stop()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 8002120:	2104      	movs	r1, #4
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <Echo_Stim_Stop+0x30>)
 8002124:	f005 fd28 	bl	8007b78 <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8002128:	2100      	movs	r1, #0
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <Echo_Stim_Stop+0x30>)
 800212c:	f005 fb06 	bl	800773c <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 8002130:	210c      	movs	r1, #12
 8002132:	4806      	ldr	r0, [pc, #24]	; (800214c <Echo_Stim_Stop+0x30>)
 8002134:	f005 fb02 	bl	800773c <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 8002138:	f000 f8d0 	bl	80022dc <Echo_StepUP_Stop>
	Echo_Stop_ADC2_Conv();
 800213c:	f7ff f87c 	bl	8001238 <Echo_Stop_ADC2_Conv>
	HAL_TIM_Base_Stop_IT(&htim2);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <Echo_Stim_Stop+0x30>)
 8002142:	f005 f87d 	bl	8007240 <HAL_TIM_Base_Stop_IT>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200007a4 	.word	0x200007a4

08002150 <Echo_Stim_Start>:

void Echo_Stim_Start()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0

#if 1
	TIM_MasterConfigTypeDef sMasterConfig =
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800217a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <Echo_Stim_Start+0x158>)
 800217e:	224f      	movs	r2, #79	; 0x4f
 8002180:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002188:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <Echo_Stim_Start+0x158>)
 800218a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002190:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800219c:	4842      	ldr	r0, [pc, #264]	; (80022a8 <Echo_Stim_Start+0x158>)
 800219e:	f005 f87e 	bl	800729e <HAL_TIM_OC_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <Echo_Stim_Start+0x5c>
	{
		Error_Handler();
 80021a8:	f000 fe04 	bl	8002db4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021ac:	483e      	ldr	r0, [pc, #248]	; (80022a8 <Echo_Stim_Start+0x158>)
 80021ae:	f005 fbad 	bl	800790c <HAL_TIM_PWM_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <Echo_Stim_Start+0x6c>
	{
		Error_Handler();
 80021b8:	f000 fdfc 	bl	8002db4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021bc:	2320      	movs	r3, #32
 80021be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4837      	ldr	r0, [pc, #220]	; (80022a8 <Echo_Stim_Start+0x158>)
 80021cc:	f006 fc20 	bl	8008a10 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <Echo_Stim_Start+0x8a>
	{
		Error_Handler();
 80021d6:	f000 fded 	bl	8002db4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021da:	2330      	movs	r3, #48	; 0x30
 80021dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 5;
 80021de:	2305      	movs	r3, #5
 80021e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	482d      	ldr	r0, [pc, #180]	; (80022a8 <Echo_Stim_Start+0x158>)
 80021f2:	f005 fe69 	bl	8007ec8 <HAL_TIM_OC_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <Echo_Stim_Start+0xb0>
	{
		Error_Handler();
 80021fc:	f000 fdda 	bl	8002db4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002200:	2360      	movs	r3, #96	; 0x60
 8002202:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1010;
 8002204:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8002208:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	2204      	movs	r2, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4825      	ldr	r0, [pc, #148]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002212:	f005 fed3 	bl	8007fbc <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <Echo_Stim_Start+0xd0>
	{
		Error_Handler();
 800221c:	f000 fdca 	bl	8002db4 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002230:	2330      	movs	r3, #48	; 0x30
 8002232:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1040;
 8002234:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002238:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	220c      	movs	r2, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4819      	ldr	r0, [pc, #100]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002242:	f005 fe41 	bl	8007ec8 <HAL_TIM_OC_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <Echo_Stim_Start+0x100>
	{
		Error_Handler();
 800224c:	f000 fdb2 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002250:	4815      	ldr	r0, [pc, #84]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002252:	f000 ff8b 	bl	800316c <HAL_TIM_MspPostInit>
#endif

	Echo_Pulse_Prm_Config();
 8002256:	f7ff ff0d 	bl	8002074 <Echo_Pulse_Prm_Config>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 800225a:	2104      	movs	r1, #4
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <Echo_Stim_Start+0x158>)
 800225e:	f005 fbad 	bl	80079bc <HAL_TIM_PWM_Start>

	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 8002262:	2304      	movs	r3, #4
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <Echo_Stim_Start+0x15c>)
 8002266:	2100      	movs	r1, #0
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <Echo_Stim_Start+0x158>)
 800226a:	f005 f86f 	bl	800734c <HAL_TIM_OC_Start_DMA>
			(uint32_t*) current_ctrl_proc_arr, 4); // PA5 TIM2 CH_1 CURRENT CONTROL
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <Echo_Stim_Start+0x160>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <Echo_Stim_Start+0x160>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0206 	bic.w	r2, r2, #6
 800227c:	601a      	str	r2, [r3, #0]

	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 800227e:	2302      	movs	r3, #2
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <Echo_Stim_Start+0x164>)
 8002282:	210c      	movs	r1, #12
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <Echo_Stim_Start+0x158>)
 8002286:	f005 f861 	bl	800734c <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <Echo_Stim_Start+0x168>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <Echo_Stim_Start+0x168>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0206 	bic.w	r2, r2, #6
 8002298:	601a      	str	r2, [r3, #0]

	Echo_StepUP_Start();
 800229a:	f000 f82f 	bl	80022fc <Echo_StepUP_Start>

#if NOT_USEAGE_TRGO
	Echo_Start_ADC2_Conv();
	HAL_TIM_Base_Start_IT(&htim2);
#endif
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200007a4 	.word	0x200007a4
 80022ac:	200003e4 	.word	0x200003e4
 80022b0:	20000884 	.word	0x20000884
 80022b4:	200003dc 	.word	0x200003dc
 80022b8:	2000083c 	.word	0x2000083c

080022bc <Echo_Pulse_V_PW_Config>:

/*
 * STEP UP PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_V_PW_Config()
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	TIM1->CCR1 = v_step_tv;
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <Echo_Pulse_V_PW_Config+0x18>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <Echo_Pulse_V_PW_Config+0x1c>)
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	2000000c 	.word	0x2000000c
 80022d8:	40012c00 	.word	0x40012c00

080022dc <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80022e0:	2100      	movs	r1, #0
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <Echo_StepUP_Stop+0x18>)
 80022e4:	f005 fc48 	bl	8007b78 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <Echo_StepUP_Stop+0x1c>)
 80022ea:	f004 ffa9 	bl	8007240 <HAL_TIM_Base_Stop_IT>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000758 	.word	0x20000758
 80022f8:	200007f0 	.word	0x200007f0

080022fc <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	TIM1->CCR1 = v_step_tv;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <Echo_StepUP_Start+0x20>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <Echo_StepUP_Start+0x24>)
 8002306:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002308:	2100      	movs	r1, #0
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <Echo_StepUP_Start+0x28>)
 800230c:	f005 fb56 	bl	80079bc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <Echo_StepUP_Start+0x2c>)
 8002312:	f004 ff41 	bl	8007198 <HAL_TIM_Base_Start_IT>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000000c 	.word	0x2000000c
 8002320:	40012c00 	.word	0x40012c00
 8002324:	20000758 	.word	0x20000758
 8002328:	200007f0 	.word	0x200007f0

0800232c <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	; 0x38
 8002330:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8002332:	20c8      	movs	r0, #200	; 0xc8
 8002334:	f001 fa38 	bl	80037a8 <HAL_Delay>
	char res_msg[55] =
 8002338:	2300      	movs	r3, #0
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2233      	movs	r2, #51	; 0x33
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f008 f89e 	bl	800a484 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8002348:	f7ff f9b0 	bl	80016ac <Echo_Flash_Read>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <Echo_PCI_State_Init+0x40>
	{
		pwm_param.dead_time = 20;
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <Echo_PCI_State_Init+0x7c>)
 8002354:	2214      	movs	r2, #20
 8002356:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <Echo_PCI_State_Init+0x7c>)
 800235a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800235e:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <Echo_PCI_State_Init+0x7c>)
 8002362:	2264      	movs	r2, #100	; 0x64
 8002364:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <Echo_PCI_State_Init+0x80>)
 8002368:	220a      	movs	r2, #10
 800236a:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 800236c:	f7ff fb6e 	bl	8001a4c <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8002370:	f004 fc9c 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	463b      	mov	r3, r7
 8002378:	490d      	ldr	r1, [pc, #52]	; (80023b0 <Echo_PCI_State_Init+0x84>)
 800237a:	4618      	mov	r0, r3
 800237c:	f008 ffae 	bl	800b2dc <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8002380:	463b      	mov	r3, r7
 8002382:	4618      	mov	r0, r3
 8002384:	f008 ff9c 	bl	800b2c0 <puts>
	Echo_ADC_State_Init();
 8002388:	f7fe ff0c 	bl	80011a4 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 800238c:	f7ff fb52 	bl	8001a34 <Echo_Print_Manual>
	Echo_LED_Init();
 8002390:	f7ff f9f8 	bl	8001784 <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8002394:	f000 f80e 	bl	80023b4 <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 8002398:	f7ff fb8c 	bl	8001ab4 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 800239c:	f000 f8dc 	bl	8002558 <Echo_Uart2_INTERRUPT_ENA>
}
 80023a0:	bf00      	nop
 80023a2:	3738      	adds	r7, #56	; 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200003d4 	.word	0x200003d4
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	0800fc84 	.word	0x0800fc84

080023b4 <Echo_Sys_FSM_State_Init>:
echo_sys_state_t cur_state = ECHO_SYS_STATE_IDLE;

extern echo_adc1_state_t adc1_cur_state;
/* while out code*/
void Echo_Sys_FSM_State_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	ECHO_CUR_SYS_STATE = echo_sys_state_max;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <Echo_Sys_FSM_State_Init+0x14>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	701a      	strb	r2, [r3, #0]
	//ECHO_BUTTON_STATE = Echo_Button_NoPressed();
	Echo_Set_Sys_FSM_State(ECHO_SYS_STATE_INIT);
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f852 	bl	8002468 <Echo_Set_Sys_FSM_State>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200004f4 	.word	0x200004f4

080023cc <Echo_Get_Sys_FSM_State>:

echo_sys_state_t Echo_Get_Sys_FSM_State(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	return ECHO_CUR_SYS_STATE;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <Echo_Get_Sys_FSM_State+0x14>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200004f4 	.word	0x200004f4

080023e4 <Echo_Set_Sys_FSM_State_Start>:

void Echo_Set_Sys_FSM_State_Start()
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	cur_state = ECHO_SYS_STATE_RUN;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <Echo_Set_Sys_FSM_State_Start+0x14>)
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20000010 	.word	0x20000010

080023fc <Echo_Set_Sys_FSM_State_Stop>:

void Echo_Set_Sys_FSM_State_Stop()
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	cur_state = ECHO_SYS_STATE_IDLE;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <Echo_Set_Sys_FSM_State_Stop+0x14>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000010 	.word	0x20000010

08002414 <Echo_Sys_FSM_State_Handle>:

void Echo_Sys_FSM_State_Handle(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	/* BUTTON PRESSED FLAG */
	if (Echo_Btn_IsHandled() == true)
 8002418:	f7ff f816 	bl	8001448 <Echo_Btn_IsHandled>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <Echo_Sys_FSM_State_Handle+0x2c>
	{
		if (cur_state == ECHO_SYS_STATE_IDLE)
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d103      	bne.n	8002432 <Echo_Sys_FSM_State_Handle+0x1e>
		{
			cur_state = ECHO_SYS_STATE_RUN;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e006      	b.n	8002440 <Echo_Sys_FSM_State_Handle+0x2c>
		}
		else if (cur_state == ECHO_SYS_STATE_RUN)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d102      	bne.n	8002440 <Echo_Sys_FSM_State_Handle+0x2c>
		{
			cur_state = ECHO_SYS_STATE_IDLE;
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (ECHO_CUR_SYS_STATE != cur_state)
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <Echo_Sys_FSM_State_Handle+0x50>)
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d006      	beq.n	800245a <Echo_Sys_FSM_State_Handle+0x46>
	{
		Echo_Set_Sys_FSM_State(cur_state);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <Echo_Sys_FSM_State_Handle+0x4c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f809 	bl	8002468 <Echo_Set_Sys_FSM_State>
		Echo_Btn_Handled_Clear();
 8002456:	f7ff f803 	bl	8001460 <Echo_Btn_Handled_Clear>
	 {
	 Echo_LED_Enable();
	 Echo_LED_State_Refresh();
	 }
	 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000010 	.word	0x20000010
 8002464:	200004f4 	.word	0x200004f4

08002468 <Echo_Set_Sys_FSM_State>:

void Echo_Set_Sys_FSM_State(echo_sys_state_t state)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	/*
	 if (ECHO_CUR_STATE == state || state >= echo_state_max)
	 return;
	 */

	switch (state)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d82e      	bhi.n	80024d6 <Echo_Set_Sys_FSM_State+0x6e>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <Echo_Set_Sys_FSM_State+0x18>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	08002499 	.word	0x08002499
 8002488:	080024b1 	.word	0x080024b1
 800248c:	080024c9 	.word	0x080024c9
	{

	case ECHO_SYS_STATE_INIT:
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8002490:	4817      	ldr	r0, [pc, #92]	; (80024f0 <Echo_Set_Sys_FSM_State+0x88>)
 8002492:	f008 ff15 	bl	800b2c0 <puts>
#endif
#endif
		break;
 8002496:	e024      	b.n	80024e2 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_SYS_STATE_IDLE:
		Echo_Stim_Stop();
 8002498:	f7ff fe40 	bl	800211c <Echo_Stim_Stop>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 800249c:	2001      	movs	r0, #1
 800249e:	f7ff f991 	bl	80017c4 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_IDLE;
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <Echo_Set_Sys_FSM_State+0x8c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <Echo_Set_Sys_FSM_State+0x90>)
 80024aa:	f008 ff09 	bl	800b2c0 <puts>
#endif
#endif
		break;
 80024ae:	e018      	b.n	80024e2 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_SYS_STATE_RUN:
		Echo_Stim_Start();
 80024b0:	f7ff fe4e 	bl	8002150 <Echo_Stim_Start>
		Echo_Set_LED_State(ECHO_LED_RUN);
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff f985 	bl	80017c4 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_RUN;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <Echo_Set_Sys_FSM_State+0x8c>)
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 80024c0:	480e      	ldr	r0, [pc, #56]	; (80024fc <Echo_Set_Sys_FSM_State+0x94>)
 80024c2:	f008 fefd 	bl	800b2c0 <puts>
#endif
#endif
		break;
 80024c6:	e00c      	b.n	80024e2 <Echo_Set_Sys_FSM_State+0x7a>

	case ECHO_sys_STATE_ERROR:
		Echo_Set_LED_State(ECHO_LED_IDLE);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff f97b 	bl	80017c4 <Echo_Set_LED_State>
		//Echo_ADC_StateSet(ECHO_ADC_IDLE);
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 80024ce:	480c      	ldr	r0, [pc, #48]	; (8002500 <Echo_Set_Sys_FSM_State+0x98>)
 80024d0:	f008 fef6 	bl	800b2c0 <puts>
#endif
#endif
		break;
 80024d4:	e005      	b.n	80024e2 <Echo_Set_Sys_FSM_State+0x7a>

	default:
		// Cannot be here
#ifdef DEBUG
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4619      	mov	r1, r3
 80024da:	480a      	ldr	r0, [pc, #40]	; (8002504 <Echo_Set_Sys_FSM_State+0x9c>)
 80024dc:	f008 fe54 	bl	800b188 <iprintf>
#endif
		break;
 80024e0:	bf00      	nop

	}
	ECHO_CUR_SYS_STATE = state;
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <Echo_Set_Sys_FSM_State+0xa0>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	7013      	strb	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	0800fcb4 	.word	0x0800fcb4
 80024f4:	20000000 	.word	0x20000000
 80024f8:	0800fcc8 	.word	0x0800fcc8
 80024fc:	0800fcdc 	.word	0x0800fcdc
 8002500:	0800fcec 	.word	0x0800fcec
 8002504:	0800fd00 	.word	0x0800fd00
 8002508:	200004f4 	.word	0x200004f4

0800250c <Echo_Uart2_RCV_Q_Put_INLINE>:

uint8_t echo_uart2_rcv_buf[ECHO_USART2_RCV_Q_SIZE];
uint8_t echo_uart2_rcv_byte = 0;

static __INLINE void Echo_Uart2_RCV_Q_Put_INLINE(uint8_t item)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 800251c:	425a      	negs	r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	bf58      	it	pl
 8002524:	4253      	negpl	r3, r2
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 800252a:	805a      	strh	r2, [r3, #2]

	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 800252e:	885b      	ldrh	r3, [r3, #2]
 8002530:	461a      	mov	r2, r3
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8002534:	4413      	add	r3, r2
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	719a      	strb	r2, [r3, #6]

	echo_uart2_state.item_num++;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <Echo_Uart2_RCV_Q_Put_INLINE+0x48>)
 8002544:	809a      	strh	r2, [r3, #4]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200004f8 	.word	0x200004f8

08002558 <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 8002564:	2200      	movs	r2, #0
 8002566:	805a      	strh	r2, [r3, #2]
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
 800256a:	2200      	movs	r2, #0
 800256c:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <Echo_Uart2_INTERRUPT_ENA+0x30>)
 8002570:	f006 fc82 	bl	8008e78 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8002574:	2201      	movs	r2, #1
 8002576:	4905      	ldr	r1, [pc, #20]	; (800258c <Echo_Uart2_INTERRUPT_ENA+0x34>)
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <Echo_Uart2_INTERRUPT_ENA+0x30>)
 800257a:	f006 fc27 	bl	8008dcc <HAL_UART_Receive_IT>
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200004f8 	.word	0x200004f8
 8002588:	20000950 	.word	0x20000950
 800258c:	200005fe 	.word	0x200005fe

08002590 <HAL_UART_RxCpltCallback>:

/*
 * 1. UART RX Interrupt
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_UART_RxCpltCallback+0x38>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_UART_RxCpltCallback+0x26>
	{
	}
	else if (huart->Instance == USART2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_UART_RxCpltCallback+0x3c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d104      	bne.n	80025b6 <HAL_UART_RxCpltCallback+0x26>
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_UART_RxCpltCallback+0x40>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ffab 	bl	800250c <Echo_Uart2_RCV_Q_Put_INLINE>
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 80025b6:	2201      	movs	r2, #1
 80025b8:	4905      	ldr	r1, [pc, #20]	; (80025d0 <HAL_UART_RxCpltCallback+0x40>)
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <HAL_UART_RxCpltCallback+0x44>)
 80025bc:	f006 fc06 	bl	8008dcc <HAL_UART_Receive_IT>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40004400 	.word	0x40004400
 80025d0:	200005fe 	.word	0x200005fe
 80025d4:	20000950 	.word	0x20000950

080025d8 <Echo_Uart2_Get_RCV_Q>:
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	bool data_valid;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
 80025e0:	4817      	ldr	r0, [pc, #92]	; (8002640 <Echo_Uart2_Get_RCV_Q+0x68>)
 80025e2:	f008 fe6d 	bl	800b2c0 <puts>
#endif
	data_valid = false;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]

	if (echo_uart2_state.item_num > 0)
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 80025ec:	889b      	ldrh	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <Echo_Uart2_Get_RCV_Q+0x5c>
	{
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 80025f8:	425a      	negs	r2, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	bf58      	it	pl
 8002600:	4253      	negpl	r3, r2
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 8002606:	801a      	strh	r2, [r3, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 8002610:	4413      	add	r3, r2
 8002612:	799a      	ldrb	r2, [r3, #6]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	701a      	strb	r2, [r3, #0]

		ECHO_USART2_MUTEX_LOCK
 8002618:	2026      	movs	r0, #38	; 0x26
 800261a:	f002 fe40 	bl	800529e <HAL_NVIC_DisableIRQ>
		;

		echo_uart2_state.item_num--;
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 8002620:	889b      	ldrh	r3, [r3, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <Echo_Uart2_Get_RCV_Q+0x6c>)
 8002628:	809a      	strh	r2, [r3, #4]

		ECHO_USART2_MUTEX_UNLOCK
 800262a:	2026      	movs	r0, #38	; 0x26
 800262c:	f002 fe29 	bl	8005282 <HAL_NVIC_EnableIRQ>
		;

		data_valid = true;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
	}
	return data_valid;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	0800fd18 	.word	0x0800fd18
 8002644:	200004f8 	.word	0x200004f8

08002648 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800264c:	f001 f830 	bl	80036b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002650:	f000 f830 	bl	80026b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002654:	f000 fb30 	bl	8002cb8 <MX_GPIO_Init>
	MX_DMA_Init();
 8002658:	f000 faf8 	bl	8002c4c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800265c:	f000 fac6 	bl	8002bec <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002660:	f000 f878 	bl	8002754 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002664:	f000 f8ec 	bl	8002840 <MX_ADC2_Init>
	MX_TIM1_Init();
 8002668:	f000 f950 	bl	800290c <MX_TIM1_Init>
	MX_TIM2_Init();
 800266c:	f000 f9de 	bl	8002a2c <MX_TIM2_Init>
	MX_TIM16_Init();
 8002670:	f000 fa66 	bl	8002b40 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8002674:	f000 fa8a 	bl	8002b8c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	static uint32_t schdule_tick = 0;
	Echo_PCI_State_Init();
 8002678:	f7ff fe58 	bl	800232c <Echo_PCI_State_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Echo_Shell_CMD_Handle();
 800267c:	f7ff fa2c 	bl	8001ad8 <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8002680:	f001 f886 	bl	8003790 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <main+0x68>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b04      	cmp	r3, #4
 800268e:	d9f5      	bls.n	800267c <main+0x34>
		{
			Echo_Sys_FSM_State_Handle();
 8002690:	f7ff fec0 	bl	8002414 <Echo_Sys_FSM_State_Handle>
			Echo_Btn_Handle();
 8002694:	f7fe fef0 	bl	8001478 <Echo_Btn_Handle>
			Echo_LED_Handle();
 8002698:	f7ff f8f4 	bl	8001884 <Echo_LED_Handle>
			Echo_ADC_Handle();
 800269c:	f7fe fe52 	bl	8001344 <Echo_ADC_Handle>
			Echo_Shell_Input_Print();
 80026a0:	f7ff f9f2 	bl	8001a88 <Echo_Shell_Input_Print>
			schdule_tick = HAL_GetTick();
 80026a4:	f001 f874 	bl	8003790 <HAL_GetTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a01      	ldr	r2, [pc, #4]	; (80026b0 <main+0x68>)
 80026ac:	6013      	str	r3, [r2, #0]
		Echo_Shell_CMD_Handle();
 80026ae:	e7e5      	b.n	800267c <main+0x34>
 80026b0:	200009d4 	.word	0x200009d4

080026b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b096      	sub	sp, #88	; 0x58
 80026b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	2244      	movs	r2, #68	; 0x44
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f007 fede 	bl	800a484 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80026c8:	463b      	mov	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026da:	f003 fca3 	bl	8006024 <HAL_PWREx_ControlVoltageScaling>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80026e4:	f000 fb66 	bl	8002db4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026e8:	2310      	movs	r3, #16
 80026ea:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026ec:	2301      	movs	r3, #1
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026f4:	2360      	movs	r3, #96	; 0x60
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f8:	2302      	movs	r3, #2
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80026fc:	2301      	movs	r3, #1
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002700:	2301      	movs	r3, #1
 8002702:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002704:	2328      	movs	r3, #40	; 0x28
 8002706:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002708:	2302      	movs	r3, #2
 800270a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800270c:	2302      	movs	r3, #2
 800270e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fcdb 	bl	80060d0 <HAL_RCC_OscConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8002720:	f000 fb48 	bl	8002db4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002724:	230f      	movs	r3, #15
 8002726:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002728:	2303      	movs	r3, #3
 800272a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002738:	463b      	mov	r3, r7
 800273a:	2104      	movs	r1, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f004 f929 	bl	8006994 <HAL_RCC_ClockConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002748:	f000 fb34 	bl	8002db4 <Error_Handler>
	}
}
 800274c:	bf00      	nop
 800274e:	3758      	adds	r7, #88	; 0x58
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode =
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <MX_ADC1_Init+0xe0>)
 8002778:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <MX_ADC1_Init+0xe4>)
 800277a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <MX_ADC1_Init+0xe0>)
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <MX_ADC1_Init+0xe0>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <MX_ADC1_Init+0xe0>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <MX_ADC1_Init+0xe0>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <MX_ADC1_Init+0xe0>)
 8002796:	2208      	movs	r2, #8
 8002798:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <MX_ADC1_Init+0xe0>)
 800279c:	2200      	movs	r2, #0
 800279e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027d8:	f001 fa40 	bl	8003c5c <HAL_ADC_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 80027e2:	f000 fae7 	bl	8002db4 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4810      	ldr	r0, [pc, #64]	; (8002834 <MX_ADC1_Init+0xe0>)
 80027f2:	f002 fb87 	bl	8004f04 <HAL_ADCEx_MultiModeConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 80027fc:	f000 fada 	bl	8002db4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_ADC1_Init+0xe8>)
 8002802:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002804:	2306      	movs	r3, #6
 8002806:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002808:	2304      	movs	r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800280c:	237f      	movs	r3, #127	; 0x7f
 800280e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002810:	2304      	movs	r3, #4
 8002812:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_ADC1_Init+0xe0>)
 800281e:	f001 fc8d 	bl	800413c <HAL_ADC_ConfigChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8002828:	f000 fac4 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000600 	.word	0x20000600
 8002838:	50040000 	.word	0x50040000
 800283c:	2e300800 	.word	0x2e300800

08002840 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8002846:	463b      	mov	r3, r7
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
 8002854:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <MX_ADC2_Init+0xc4>)
 800285a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <MX_ADC2_Init+0xc0>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <MX_ADC2_Init+0xc0>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002876:	2204      	movs	r2, #4
 8002878:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <MX_ADC2_Init+0xc0>)
 800287c:	2200      	movs	r2, #0
 800287e:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002882:	2201      	movs	r2, #1
 8002884:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002888:	2201      	movs	r2, #1
 800288a:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <MX_ADC2_Init+0xc0>)
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <MX_ADC2_Init+0xc0>)
 8002896:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_ADC2_Init+0xc0>)
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_ADC2_Init+0xc0>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_ADC2_Init+0xc0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <MX_ADC2_Init+0xc0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028ba:	4811      	ldr	r0, [pc, #68]	; (8002900 <MX_ADC2_Init+0xc0>)
 80028bc:	f001 f9ce 	bl	8003c5c <HAL_ADC_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_ADC2_Init+0x8a>
	{
		Error_Handler();
 80028c6:	f000 fa75 	bl	8002db4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_ADC2_Init+0xc8>)
 80028cc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80028ce:	2306      	movs	r3, #6
 80028d0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80028d2:	2304      	movs	r3, #4
 80028d4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028d6:	237f      	movs	r3, #127	; 0x7f
 80028d8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028da:	2304      	movs	r3, #4
 80028dc:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028e2:	463b      	mov	r3, r7
 80028e4:	4619      	mov	r1, r3
 80028e6:	4806      	ldr	r0, [pc, #24]	; (8002900 <MX_ADC2_Init+0xc0>)
 80028e8:	f001 fc28 	bl	800413c <HAL_ADC_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_ADC2_Init+0xb6>
	{
		Error_Handler();
 80028f2:	f000 fa5f 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000664 	.word	0x20000664
 8002904:	50040100 	.word	0x50040100
 8002908:	32601000 	.word	0x32601000

0800290c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b096      	sub	sp, #88	; 0x58
 8002910:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8002912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800291e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	222c      	movs	r2, #44	; 0x2c
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f007 fda3 	bl	800a484 <memset>
	{ 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002940:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <MX_TIM1_Init+0x11c>)
 8002942:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <MX_TIM1_Init+0x118>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002952:	f242 720f 	movw	r2, #9999	; 0x270f
 8002956:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <MX_TIM1_Init+0x118>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800296a:	482e      	ldr	r0, [pc, #184]	; (8002a24 <MX_TIM1_Init+0x118>)
 800296c:	f004 ffce 	bl	800790c <HAL_TIM_PWM_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8002976:	f000 fa1d 	bl	8002db4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800298a:	4619      	mov	r1, r3
 800298c:	4825      	ldr	r0, [pc, #148]	; (8002a24 <MX_TIM1_Init+0x118>)
 800298e:	f006 f83f 	bl	8008a10 <HAL_TIMEx_MasterConfigSynchronization>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8002998:	f000 fa0c 	bl	8002db4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800299c:	2360      	movs	r3, #96	; 0x60
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	4619      	mov	r1, r3
 80029c0:	4818      	ldr	r0, [pc, #96]	; (8002a24 <MX_TIM1_Init+0x118>)
 80029c2:	f005 fafb 	bl	8007fbc <HAL_TIM_PWM_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 80029cc:	f000 f9f2 	bl	8002db4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002a06:	f006 f869 	bl	8008adc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 8002a10:	f000 f9d0 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM1_Init+0x118>)
 8002a16:	f000 fba9 	bl	800316c <HAL_TIM_MspPostInit>

}
 8002a1a:	bf00      	nop
 8002a1c:	3758      	adds	r7, #88	; 0x58
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000758 	.word	0x20000758
 8002a28:	40012c00 	.word	0x40012c00

08002a2c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a56:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a5a:	224f      	movs	r2, #79	; 0x4f
 8002a5c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a6a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002a78:	4830      	ldr	r0, [pc, #192]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a7a:	f004 fc10 	bl	800729e <HAL_TIM_OC_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8002a84:	f000 f996 	bl	8002db4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a88:	482c      	ldr	r0, [pc, #176]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002a8a:	f004 ff3f 	bl	800790c <HAL_TIM_PWM_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 8002a94:	f000 f98e 	bl	8002db4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4825      	ldr	r0, [pc, #148]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002aa8:	f005 ffb2 	bl	8008a10 <HAL_TIMEx_MasterConfigSynchronization>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 8002ab2:	f000 f97f 	bl	8002db4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002ab6:	2330      	movs	r3, #48	; 0x30
 8002ab8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 5;
 8002aba:	2305      	movs	r3, #5
 8002abc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4619      	mov	r1, r3
 8002acc:	481b      	ldr	r0, [pc, #108]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002ace:	f005 f9fb 	bl	8007ec8 <HAL_TIM_OC_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM2_Init+0xb0>
	{
		Error_Handler();
 8002ad8:	f000 f96c 	bl	8002db4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002adc:	2360      	movs	r3, #96	; 0x60
 8002ade:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1010;
 8002ae0:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8002ae4:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4813      	ldr	r0, [pc, #76]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002aee:	f005 fa65 	bl	8007fbc <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM2_Init+0xd0>
	{
		Error_Handler();
 8002af8:	f000 f95c 	bl	8002db4 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002b0c:	2330      	movs	r3, #48	; 0x30
 8002b0e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1040;
 8002b10:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002b14:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b16:	463b      	mov	r3, r7
 8002b18:	220c      	movs	r2, #12
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4807      	ldr	r0, [pc, #28]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002b1e:	f005 f9d3 	bl	8007ec8 <HAL_TIM_OC_ConfigChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM2_Init+0x100>
	{
		Error_Handler();
 8002b28:	f000 f944 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <MX_TIM2_Init+0x110>)
 8002b2e:	f000 fb1d 	bl	800316c <HAL_TIM_MspPostInit>

}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200007a4 	.word	0x200007a4

08002b40 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <MX_TIM16_Init+0x48>)
 8002b48:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 79;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b4c:	224f      	movs	r2, #79	; 0x4f
 8002b4e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 999;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b5c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_TIM16_Init+0x44>)
 8002b72:	f004 fab9 	bl	80070e8 <HAL_TIM_Base_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM16_Init+0x40>
	{
		Error_Handler();
 8002b7c:	f000 f91a 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200007f0 	.word	0x200007f0
 8002b88:	40014400 	.word	0x40014400

08002b8c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <MX_USART1_UART_Init+0x5c>)
 8002b94:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b9c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_USART1_UART_Init+0x58>)
 8002bd0:	f006 f81a 	bl	8008c08 <HAL_UART_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002bda:	f000 f8eb 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200008cc 	.word	0x200008cc
 8002be8:	40013800 	.word	0x40013800

08002bec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <MX_USART2_UART_Init+0x5c>)
 8002bf4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bfc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c30:	f005 ffea 	bl	8008c08 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8002c3a:	f000 f8bb 	bl	8002db4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000950 	.word	0x20000950
 8002c48:	40004400 	.word	0x40004400

08002c4c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <MX_DMA_Init+0x68>)
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <MX_DMA_Init+0x68>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <MX_DMA_Init+0x68>)
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	200b      	movs	r0, #11
 8002c70:	f002 faeb 	bl	800524a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c74:	200b      	movs	r0, #11
 8002c76:	f002 fb04 	bl	8005282 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	200c      	movs	r0, #12
 8002c80:	f002 fae3 	bl	800524a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c84:	200c      	movs	r0, #12
 8002c86:	f002 fafc 	bl	8005282 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	200f      	movs	r0, #15
 8002c90:	f002 fadb 	bl	800524a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c94:	200f      	movs	r0, #15
 8002c96:	f002 faf4 	bl	8005282 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2011      	movs	r0, #17
 8002ca0:	f002 fad3 	bl	800524a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002ca4:	2011      	movs	r0, #17
 8002ca6:	f002 faec 	bl	8005282 <HAL_NVIC_EnableIRQ>

}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a35      	ldr	r2, [pc, #212]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <MX_GPIO_Init+0xf0>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f641 6130 	movw	r1, #7728	; 0x1e30
 8002d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d38:	f003 f94e 	bl	8005fd8 <HAL_GPIO_WritePin>
	SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f242 0133 	movw	r1, #8243	; 0x2033
 8002d42:	481a      	ldr	r0, [pc, #104]	; (8002dac <MX_GPIO_Init+0xf4>)
 8002d44:	f003 f948 	bl	8005fd8 <HAL_GPIO_WritePin>
			QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin | BIPHASIC_SW_Pin
					| PEAK_DISCHG_SW_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : START_BTN_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin;
 8002d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4814      	ldr	r0, [pc, #80]	; (8002db0 <MX_GPIO_Init+0xf8>)
 8002d5e:	f002 ffb1 	bl	8005cc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin DAC0_Pin DAC1_Pin
	 DAC2_Pin DAC3_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | DAC0_Pin | DAC1_Pin
 8002d62:	f641 6330 	movw	r3, #7728	; 0x1e30
 8002d66:	617b      	str	r3, [r7, #20]
			| DAC2_Pin | DAC3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7e:	f002 ffa1 	bl	8005cc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : QCC_CTRL0_Pin QCC_CTRL1_Pin LED_Pin BIPHASIC_SW_Pin
	 PEAK_DISCHG_SW_Pin */
	GPIO_InitStruct.Pin = QCC_CTRL0_Pin | QCC_CTRL1_Pin | LED_Pin
 8002d82:	f242 0333 	movw	r3, #8243	; 0x2033
 8002d86:	617b      	str	r3, [r7, #20]
			| BIPHASIC_SW_Pin | PEAK_DISCHG_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4804      	ldr	r0, [pc, #16]	; (8002dac <MX_GPIO_Init+0xf4>)
 8002d9c:	f002 ff92 	bl	8005cc4 <HAL_GPIO_Init>

}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	48000800 	.word	0x48000800

08002db4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db8:	b672      	cpsid	i
}
 8002dba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002dbc:	e7fe      	b.n	8002dbc <Error_Handler+0x8>
	...

08002dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_MspInit+0x44>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_MspInit+0x44>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x44>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_MspInit+0x44>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_MspInit+0x44>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_MspInit+0x44>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <HAL_ADC_MspInit+0x19c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d159      	bne.n	8002ede <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a5d      	ldr	r2, [pc, #372]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002e32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e34:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b55      	ldr	r3, [pc, #340]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e60:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VDDH_FEEDBACK_Pin;
 8002e6c:	2340      	movs	r3, #64	; 0x40
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e70:	230b      	movs	r3, #11
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e82:	f002 ff1f 	bl	8005cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002e88:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <HAL_ADC_MspInit+0x1ac>)
 8002e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e98:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eac:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ec0:	483b      	ldr	r0, [pc, #236]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ec2:	f002 fa07 	bl	80052d4 <HAL_DMA_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ecc:	f7ff ff72 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ed4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ed6:	4a36      	ldr	r2, [pc, #216]	; (8002fb0 <HAL_ADC_MspInit+0x1a8>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002edc:	e05d      	b.n	8002f9a <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_ADC_MspInit+0x1b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d158      	bne.n	8002f9a <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002ef0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_ADC_MspInit+0x1a0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10b      	bne.n	8002f12 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	4a25      	ldr	r2, [pc, #148]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_ADC_MspInit+0x1a4>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_Pin;
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f2e:	230b      	movs	r3, #11
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f40:	f002 fec0 	bl	8005cc4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f46:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_ADC_MspInit+0x1b8>)
 8002f48:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f70:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002f7e:	480f      	ldr	r0, [pc, #60]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f80:	f002 f9a8 	bl	80052d4 <HAL_DMA_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8002f8a:	f7ff ff13 	bl	8002db4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f92:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_ADC_MspInit+0x1b4>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002f9a:	bf00      	nop
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	50040000 	.word	0x50040000
 8002fa8:	200009d8 	.word	0x200009d8
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	200006c8 	.word	0x200006c8
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	50040100 	.word	0x50040100
 8002fbc:	20000710 	.word	0x20000710
 8002fc0:	4002001c 	.word	0x4002001c

08002fc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_TIM_PWM_MspInit+0x44>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d113      	bne.n	8002ffe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_TIM_PWM_MspInit+0x48>)
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fda:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_TIM_PWM_MspInit+0x48>)
 8002fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_TIM_PWM_MspInit+0x48>)
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	2019      	movs	r0, #25
 8002ff4:	f002 f929 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ff8:	2019      	movs	r0, #25
 8002ffa:	f002 f942 	bl	8005282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d16f      	bne.n	8003102 <HAL_TIM_OC_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_TIM_OC_MspInit+0xfc>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	4a39      	ldr	r2, [pc, #228]	; (800310c <HAL_TIM_OC_MspInit+0xfc>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6593      	str	r3, [r2, #88]	; 0x58
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <HAL_TIM_OC_MspInit+0xfc>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800303a:	4b35      	ldr	r3, [pc, #212]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 800303c:	4a35      	ldr	r2, [pc, #212]	; (8003114 <HAL_TIM_OC_MspInit+0x104>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8003040:	4b33      	ldr	r3, [pc, #204]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003042:	2204      	movs	r2, #4
 8003044:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 800305a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003066:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800306e:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003074:	4826      	ldr	r0, [pc, #152]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003076:	f002 f92d 	bl	80052d4 <HAL_DMA_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_TIM_OC_MspInit+0x74>
    {
      Error_Handler();
 8003080:	f7ff fe98 	bl	8002db4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_TIM_OC_MspInit+0x100>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_TIM_OC_MspInit+0x10c>)
 80030a0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030a4:	2204      	movs	r2, #4
 80030a6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030cc:	2220      	movs	r2, #32
 80030ce:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80030d6:	4810      	ldr	r0, [pc, #64]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030d8:	f002 f8fc 	bl	80052d4 <HAL_DMA_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_OC_MspInit+0xd6>
    {
      Error_Handler();
 80030e2:	f7ff fe67 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_TIM_OC_MspInit+0x108>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2102      	movs	r1, #2
 80030f6:	201c      	movs	r0, #28
 80030f8:	f002 f8a7 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030fc:	201c      	movs	r0, #28
 80030fe:	f002 f8c0 	bl	8005282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	2000083c 	.word	0x2000083c
 8003114:	40020080 	.word	0x40020080
 8003118:	20000884 	.word	0x20000884
 800311c:	40020058 	.word	0x40020058

08003120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_TIM_Base_MspInit+0x44>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d113      	bne.n	800315a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_TIM_Base_MspInit+0x48>)
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_TIM_Base_MspInit+0x48>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	6613      	str	r3, [r2, #96]	; 0x60
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_TIM_Base_MspInit+0x48>)
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2102      	movs	r1, #2
 800314e:	2019      	movs	r0, #25
 8003150:	f002 f87b 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003154:	2019      	movs	r0, #25
 8003156:	f002 f894 	bl	8005282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40014400 	.word	0x40014400
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_TIM_MspPostInit+0xe8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d11e      	bne.n	80031cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 80031a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f002 fd7d 	bl	8005cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031ca:	e03f      	b.n	800324c <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d13a      	bne.n	800324c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_TIM_MspPostInit+0xec>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CURRENT_CTRL_Pin;
 8003206:	f248 0302 	movw	r3, #32770	; 0x8002
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003226:	f002 fd4d 	bl	8005cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin;
 800322a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800322e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STIM_CATHODE_GPIO_Port, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_TIM_MspPostInit+0xf0>)
 8003248:	f002 fd3c 	bl	8005cc4 <HAL_GPIO_Init>
}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40021000 	.word	0x40021000
 800325c:	48000400 	.word	0x48000400

08003260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b098      	sub	sp, #96	; 0x60
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003278:	f107 0318 	add.w	r3, r7, #24
 800327c:	2234      	movs	r2, #52	; 0x34
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f007 f8ff 	bl	800a484 <memset>
  if(huart->Instance==USART1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <HAL_UART_MspInit+0x140>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d13e      	bne.n	800330e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003290:	2301      	movs	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003298:	f107 0318 	add.w	r3, r7, #24
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fd9d 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032a8:	f7ff fd84 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ac:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b6:	6613      	str	r3, [r2, #96]	; 0x60
 80032b8:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c4:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_UART_MspInit+0x144>)
 80032d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ec:	2307      	movs	r3, #7
 80032ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032f4:	4619      	mov	r1, r3
 80032f6:	482c      	ldr	r0, [pc, #176]	; (80033a8 <HAL_UART_MspInit+0x148>)
 80032f8:	f002 fce4 	bl	8005cc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	2025      	movs	r0, #37	; 0x25
 8003302:	f001 ffa2 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003306:	2025      	movs	r0, #37	; 0x25
 8003308:	f001 ffbb 	bl	8005282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800330c:	e043      	b.n	8003396 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a26      	ldr	r2, [pc, #152]	; (80033ac <HAL_UART_MspInit+0x14c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d13e      	bne.n	8003396 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003318:	2302      	movs	r3, #2
 800331a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003320:	f107 0318 	add.w	r3, r7, #24
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fd59 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003330:	f7ff fd40 	bl	8002db4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_UART_MspInit+0x144>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a1a      	ldr	r2, [pc, #104]	; (80033a4 <HAL_UART_MspInit+0x144>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_UART_MspInit+0x144>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_UART_MspInit+0x144>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_UART_MspInit+0x144>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_UART_MspInit+0x144>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003364:	230c      	movs	r3, #12
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003374:	2307      	movs	r3, #7
 8003376:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003378:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800337c:	4619      	mov	r1, r3
 800337e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003382:	f002 fc9f 	bl	8005cc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2026      	movs	r0, #38	; 0x26
 800338c:	f001 ff5d 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003390:	2026      	movs	r0, #38	; 0x26
 8003392:	f001 ff76 	bl	8005282 <HAL_NVIC_EnableIRQ>
}
 8003396:	bf00      	nop
 8003398:	3760      	adds	r7, #96	; 0x60
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40013800 	.word	0x40013800
 80033a4:	40021000 	.word	0x40021000
 80033a8:	48000400 	.word	0x48000400
 80033ac:	40004400 	.word	0x40004400

080033b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <NMI_Handler+0x4>

080033b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <HardFault_Handler+0x4>

080033bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <MemManage_Handler+0x4>

080033c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <BusFault_Handler+0x4>

080033c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <UsageFault_Handler+0x4>

080033ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033fc:	f000 f9b4 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}

08003404 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <DMA1_Channel1_IRQHandler+0x10>)
 800340a:	f002 f8fa 	bl	8005602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200006c8 	.word	0x200006c8

08003418 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <DMA1_Channel2_IRQHandler+0x10>)
 800341e:	f002 f8f0 	bl	8005602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000710 	.word	0x20000710

0800342c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <DMA1_Channel5_IRQHandler+0x10>)
 8003432:	f002 f8e6 	bl	8005602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000884 	.word	0x20000884

08003440 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <DMA1_Channel7_IRQHandler+0x10>)
 8003446:	f002 f8dc 	bl	8005602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000083c 	.word	0x2000083c

08003454 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800345a:	f004 fc15 	bl	8007c88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800345e:	4803      	ldr	r0, [pc, #12]	; (800346c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003460:	f004 fc12 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000758 	.word	0x20000758
 800346c:	200007f0 	.word	0x200007f0

08003470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <TIM2_IRQHandler+0x10>)
 8003476:	f004 fc07 	bl	8007c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200007a4 	.word	0x200007a4

08003484 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <USART1_IRQHandler+0x10>)
 800348a:	f005 fdbd 	bl	8009008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200008cc 	.word	0x200008cc

08003498 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <USART2_IRQHandler+0x10>)
 800349e:	f005 fdb3 	bl	8009008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000950 	.word	0x20000950

080034ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
	return 1;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_kill>:

int _kill(int pid, int sig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034c6:	f006 ffb3 	bl	800a430 <__errno>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2216      	movs	r2, #22
 80034ce:	601a      	str	r2, [r3, #0]
	return -1;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_exit>:

void _exit (int status)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffe7 	bl	80034bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80034ee:	e7fe      	b.n	80034ee <_exit+0x12>

080034f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e00a      	b.n	8003518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003502:	f3af 8000 	nop.w
 8003506:	4601      	mov	r1, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	60ba      	str	r2, [r7, #8]
 800350e:	b2ca      	uxtb	r2, r1
 8003510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	dbf0      	blt.n	8003502 <_read+0x12>
	}

return len;
 8003520:	687b      	ldr	r3, [r7, #4]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e009      	b.n	8003550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	60ba      	str	r2, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fa35 	bl	80019b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	dbf1      	blt.n	800353c <_write+0x12>
	}
	return len;
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_close>:

int _close(int file)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800358a:	605a      	str	r2, [r3, #4]
	return 0;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_isatty>:

int _isatty(int file)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
	return 1;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	return 0;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <_sbrk+0x5c>)
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <_sbrk+0x60>)
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <_sbrk+0x64>)
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <_sbrk+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ee:	4b10      	ldr	r3, [pc, #64]	; (8003630 <_sbrk+0x64>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035fc:	f006 ff18 	bl	800a430 <__errno>
 8003600:	4603      	mov	r3, r0
 8003602:	220c      	movs	r2, #12
 8003604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e009      	b.n	8003620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <_sbrk+0x64>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <_sbrk+0x64>)
 800361c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000a000 	.word	0x2000a000
 800362c:	00000800 	.word	0x00000800
 8003630:	200009dc 	.word	0x200009dc
 8003634:	200009f8 	.word	0x200009f8

08003638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <SystemInit+0x20>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <SystemInit+0x20>)
 8003644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800365c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003694 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003660:	f7ff ffea 	bl	8003638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003664:	480c      	ldr	r0, [pc, #48]	; (8003698 <LoopForever+0x6>)
  ldr r1, =_edata
 8003666:	490d      	ldr	r1, [pc, #52]	; (800369c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003668:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <LoopForever+0xe>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800366c:	e002      	b.n	8003674 <LoopCopyDataInit>

0800366e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003672:	3304      	adds	r3, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003678:	d3f9      	bcc.n	800366e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800367c:	4c0a      	ldr	r4, [pc, #40]	; (80036a8 <LoopForever+0x16>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003680:	e001      	b.n	8003686 <LoopFillZerobss>

08003682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003684:	3204      	adds	r2, #4

08003686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003688:	d3fb      	bcc.n	8003682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368a:	f006 fed7 	bl	800a43c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800368e:	f7fe ffdb 	bl	8002648 <main>

08003692 <LoopForever>:

LoopForever:
    b LoopForever
 8003692:	e7fe      	b.n	8003692 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003694:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800369c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80036a0:	08010304 	.word	0x08010304
  ldr r2, =_sbss
 80036a4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80036a8:	200009f4 	.word	0x200009f4

080036ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036ac:	e7fe      	b.n	80036ac <ADC1_2_IRQHandler>
	...

080036b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_Init+0x3c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_Init+0x3c>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c6:	2003      	movs	r0, #3
 80036c8:	f001 fdb4 	bl	8005234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036cc:	2000      	movs	r0, #0
 80036ce:	f000 f80f 	bl	80036f0 <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	e001      	b.n	80036e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036de:	f7ff fb6f 	bl	8002dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036e2:	79fb      	ldrb	r3, [r7, #7]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_InitTick+0x6c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003704:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_InitTick+0x70>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_InitTick+0x6c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003712:	fbb3 f3f1 	udiv	r3, r3, r1
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fdcd 	bl	80052ba <HAL_SYSTICK_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d809      	bhi.n	8003740 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f001 fd89 	bl	800524a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_InitTick+0x74>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e007      	b.n	8003750 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e004      	b.n	8003750 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e001      	b.n	8003750 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000001c 	.word	0x2000001c
 8003760:	20000014 	.word	0x20000014
 8003764:	20000018 	.word	0x20000018

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000001c 	.word	0x2000001c
 800378c:	200009e0 	.word	0x200009e0

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200009e0 	.word	0x200009e0

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_Delay+0x44>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	2000001c 	.word	0x2000001c

080037f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3360      	adds	r3, #96	; 0x60
 800386a:	461a      	mov	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <LL_ADC_SetOffset+0x44>)
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	03fff000 	.word	0x03fff000

080038a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3360      	adds	r3, #96	; 0x60
 80038ae:	461a      	mov	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3360      	adds	r3, #96	; 0x60
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	615a      	str	r2, [r3, #20]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800394e:	b480      	push	{r7}
 8003950:	b087      	sub	sp, #28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3330      	adds	r3, #48	; 0x30
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	4413      	add	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	211f      	movs	r1, #31
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	401a      	ands	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	f003 011f 	and.w	r1, r3, #31
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	431a      	orrs	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b087      	sub	sp, #28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3314      	adds	r3, #20
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	0e5b      	lsrs	r3, r3, #25
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	4413      	add	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0d1b      	lsrs	r3, r3, #20
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2107      	movs	r1, #7
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0d1b      	lsrs	r3, r3, #20
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	431a      	orrs	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a14:	43db      	mvns	r3, r3
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0318 	and.w	r3, r3, #24
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a20:	40d9      	lsrs	r1, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	400b      	ands	r3, r1
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	0007ffff 	.word	0x0007ffff

08003a44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 031f 	and.w	r3, r3, #31
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6093      	str	r3, [r2, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d101      	bne.n	8003a9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae8:	d101      	bne.n	8003aee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b38:	f043 0202 	orr.w	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_IsEnabled+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_IsEnabled+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d101      	bne.n	8003b8a <LL_ADC_IsDisableOngoing+0x18>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <LL_ADC_IsDisableOngoing+0x1a>
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d101      	bne.n	8003c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d101      	bne.n	8003c4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e131      	b.n	8003eda <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff f8bf 	bl	8002e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fef1 	bl	8003a84 <LL_ADC_IsDeepPowerDownEnabled>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fed7 	bl	8003a60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff ff0c 	bl	8003ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d115      	bne.n	8003cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fef0 	bl	8003aac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ccc:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_ADC_Init+0x288>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	4a85      	ldr	r2, [pc, #532]	; (8003ee8 <HAL_ADC_Init+0x28c>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ce0:	e002      	b.n	8003ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f9      	bne.n	8003ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff feee 	bl	8003ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff62 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 8003d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 80ca 	bne.w	8003ec8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80c6 	bne.w	8003ec8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d44:	f043 0202 	orr.w	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fefb 	bl	8003b4c <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d110      	bne.n	8003d7e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d5c:	4863      	ldr	r0, [pc, #396]	; (8003eec <HAL_ADC_Init+0x290>)
 8003d5e:	f7ff fef5 	bl	8003b4c <LL_ADC_IsEnabled>
 8003d62:	4604      	mov	r4, r0
 8003d64:	4862      	ldr	r0, [pc, #392]	; (8003ef0 <HAL_ADC_Init+0x294>)
 8003d66:	f7ff fef1 	bl	8003b4c <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4323      	orrs	r3, r4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	485e      	ldr	r0, [pc, #376]	; (8003ef4 <HAL_ADC_Init+0x298>)
 8003d7a:	f7ff fd39 	bl	80037f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7e5b      	ldrb	r3, [r3, #25]
 8003d82:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d88:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d8e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d94:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	3b01      	subs	r3, #1
 8003db2:	045b      	lsls	r3, r3, #17
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_ADC_Init+0x29c>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fefa 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 8003df4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff1b 	bl	8003c36 <LL_ADC_INJ_IsConversionOngoing>
 8003e00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d13d      	bne.n	8003e84 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13a      	bne.n	8003e84 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e1a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2a:	f023 0302 	bic.w	r3, r3, #2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d118      	bne.n	8003e74 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e64:	430a      	orrs	r2, r1
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	e007      	b.n	8003e84 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f023 010f 	bic.w	r1, r3, #15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	1e5a      	subs	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea4:	e007      	b.n	8003eb6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 020f 	bic.w	r2, r2, #15
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ec6:	e007      	b.n	8003ed8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f043 0210 	orr.w	r2, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000014 	.word	0x20000014
 8003ee8:	053e2d63 	.word	0x053e2d63
 8003eec:	50040000 	.word	0x50040000
 8003ef0:	50040100 	.word	0x50040100
 8003ef4:	50040300 	.word	0x50040300
 8003ef8:	fff0c007 	.word	0xfff0c007

08003efc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f08:	4850      	ldr	r0, [pc, #320]	; (800404c <HAL_ADC_Start_DMA+0x150>)
 8003f0a:	f7ff fd9b 	bl	8003a44 <LL_ADC_GetMultimode>
 8003f0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fe67 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 808e 	bne.w	800403e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_Start_DMA+0x34>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e089      	b.n	8004044 <HAL_ADC_Start_DMA+0x148>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d002      	beq.n	8003f4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	d172      	bne.n	8004030 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fdae 	bl	8004aac <ADC_Enable>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d165      	bne.n	8004026 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a37      	ldr	r2, [pc, #220]	; (8004050 <HAL_ADC_Start_DMA+0x154>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d002      	beq.n	8003f7e <HAL_ADC_Start_DMA+0x82>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	e000      	b.n	8003f80 <HAL_ADC_Start_DMA+0x84>
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_ADC_Start_DMA+0x158>)
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d002      	beq.n	8003f8e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	f023 0206 	bic.w	r2, r3, #6
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb2:	e002      	b.n	8003fba <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4a26      	ldr	r2, [pc, #152]	; (8004058 <HAL_ADC_Start_DMA+0x15c>)
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <HAL_ADC_Start_DMA+0x160>)
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4a24      	ldr	r2, [pc, #144]	; (8004060 <HAL_ADC_Start_DMA+0x164>)
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	221c      	movs	r2, #28
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0210 	orr.w	r2, r2, #16
 8003ff0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3340      	adds	r3, #64	; 0x40
 800400c:	4619      	mov	r1, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f001 fa17 	bl	8005444 <HAL_DMA_Start_IT>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fdba 	bl	8003b98 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004024:	e00d      	b.n	8004042 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800402e:	e008      	b.n	8004042 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800403c:	e001      	b.n	8004042 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	50040300 	.word	0x50040300
 8004050:	50040100 	.word	0x50040100
 8004054:	50040000 	.word	0x50040000
 8004058:	08004c77 	.word	0x08004c77
 800405c:	08004d4f 	.word	0x08004d4f
 8004060:	08004d6b 	.word	0x08004d6b

08004064 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_ADC_Stop_DMA+0x16>
 8004076:	2302      	movs	r3, #2
 8004078:	e051      	b.n	800411e <HAL_ADC_Stop_DMA+0xba>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004082:	2103      	movs	r1, #3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fc55 	bl	8004934 <ADC_ConversionStop>
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d13f      	bne.n	8004114 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d10f      	bne.n	80040d2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fa24 	bl	8005504 <HAL_DMA_Abort>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0210 	bic.w	r2, r2, #16
 80040e0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fd65 	bl	8004bb8 <ADC_Disable>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	e002      	b.n	80040fa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fd5f 	bl	8004bb8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b0b6      	sub	sp, #216	; 0xd8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x22>
 800415a:	2302      	movs	r3, #2
 800415c:	e3d5      	b.n	800490a <HAL_ADC_ConfigChannel+0x7ce>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fd3c 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 83ba 	bne.w	80048ec <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d824      	bhi.n	80041ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	3b02      	subs	r3, #2
 8004186:	2b03      	cmp	r3, #3
 8004188:	d81b      	bhi.n	80041c2 <HAL_ADC_ConfigChannel+0x86>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_ADC_ConfigChannel+0x54>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a9 	.word	0x080041a9
 8004198:	080041b1 	.word	0x080041b1
 800419c:	080041b9 	.word	0x080041b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	220c      	movs	r2, #12
 80041a4:	605a      	str	r2, [r3, #4]
          break;
 80041a6:	e011      	b.n	80041cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2212      	movs	r2, #18
 80041ac:	605a      	str	r2, [r3, #4]
          break;
 80041ae:	e00d      	b.n	80041cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2218      	movs	r2, #24
 80041b4:	605a      	str	r2, [r3, #4]
          break;
 80041b6:	e009      	b.n	80041cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041be:	605a      	str	r2, [r3, #4]
          break;
 80041c0:	e004      	b.n	80041cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2206      	movs	r2, #6
 80041c6:	605a      	str	r2, [r3, #4]
          break;
 80041c8:	e000      	b.n	80041cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80041ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	f7ff fbb8 	bl	800394e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fd00 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 80041e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fd20 	bl	8003c36 <LL_ADC_INJ_IsConversionOngoing>
 80041f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 81c1 	bne.w	8004586 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 81bc 	bne.w	8004586 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004216:	d10f      	bne.n	8004238 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	f7ff fbbf 	bl	80039a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fb66 	bl	8003902 <LL_ADC_SetSamplingTimeCommonConfig>
 8004236:	e00e      	b.n	8004256 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	461a      	mov	r2, r3
 8004246:	f7ff fbae 	bl	80039a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fb56 	bl	8003902 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d00a      	beq.n	800428e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6919      	ldr	r1, [r3, #16]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004288:	f7ff fae6 	bl	8003858 <LL_ADC_SetOffset>
 800428c:	e17b      	b.n	8004586 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fb03 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x17e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff faf8 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	0e9b      	lsrs	r3, r3, #26
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	e01e      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x1bc>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff faed 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e004      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80042ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1d4>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0e9b      	lsrs	r3, r3, #26
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	e018      	b.n	8004342 <HAL_ADC_ConfigChannel+0x206>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800432c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e004      	b.n	8004342 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800433c:	fab3 f383 	clz	r3, r3
 8004340:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004342:	429a      	cmp	r2, r3
 8004344:	d106      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fabc 	bl	80038cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff faa0 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x244>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fa95 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 8004376:	4603      	mov	r3, r0
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	e01e      	b.n	80043be <HAL_ADC_ConfigChannel+0x282>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fa8a 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80043ae:	2320      	movs	r3, #32
 80043b0:	e004      	b.n	80043bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80043b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x29a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	e018      	b.n	8004408 <HAL_ADC_ConfigChannel+0x2cc>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80043ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80043f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80043fa:	2320      	movs	r3, #32
 80043fc:	e004      	b.n	8004408 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80043fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004408:	429a      	cmp	r2, r3
 800440a:	d106      	bne.n	800441a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2200      	movs	r2, #0
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fa59 	bl	80038cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2102      	movs	r1, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fa3d 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x30a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fa32 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	e01e      	b.n	8004484 <HAL_ADC_ConfigChannel+0x348>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fa27 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800446c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004474:	2320      	movs	r3, #32
 8004476:	e004      	b.n	8004482 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <HAL_ADC_ConfigChannel+0x360>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	e016      	b.n	80044ca <HAL_ADC_ConfigChannel+0x38e>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e004      	b.n	80044ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80044c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d106      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f9f8 	bl	80038cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2103      	movs	r1, #3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f9dc 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x3cc>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2103      	movs	r1, #3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f9d1 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	e017      	b.n	8004538 <HAL_ADC_ConfigChannel+0x3fc>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2103      	movs	r1, #3
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f9c6 	bl	80038a0 <LL_ADC_GetOffsetChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004522:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800452a:	2320      	movs	r3, #32
 800452c:	e003      	b.n	8004536 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800452e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x414>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0e9b      	lsrs	r3, r3, #26
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	e011      	b.n	8004574 <HAL_ADC_ConfigChannel+0x438>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800455e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004560:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e003      	b.n	8004574 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	2103      	movs	r1, #3
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f9a3 	bl	80038cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fade 	bl	8003b4c <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 8140 	bne.w	8004818 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f7ff fa29 	bl	80039fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4a8f      	ldr	r2, [pc, #572]	; (80047ec <HAL_ADC_ConfigChannel+0x6b0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	f040 8131 	bne.w	8004818 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_ADC_ConfigChannel+0x4a2>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	bf94      	ite	ls
 80045d6:	2301      	movls	r3, #1
 80045d8:	2300      	movhi	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e019      	b.n	8004612 <HAL_ADC_ConfigChannel+0x4d6>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80045ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80045f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80045f6:	2320      	movs	r3, #32
 80045f8:	e003      	b.n	8004602 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80045fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2b09      	cmp	r3, #9
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004612:	2b00      	cmp	r3, #0
 8004614:	d079      	beq.n	800470a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461e:	2b00      	cmp	r3, #0
 8004620:	d107      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x4f6>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	0e9b      	lsrs	r3, r3, #26
 8004628:	3301      	adds	r3, #1
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004630:	e015      	b.n	800465e <HAL_ADC_ConfigChannel+0x522>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800464e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	069b      	lsls	r3, r3, #26
 800465a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_ADC_ConfigChannel+0x542>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	0e9b      	lsrs	r3, r3, #26
 8004670:	3301      	adds	r3, #1
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	e017      	b.n	80046ae <HAL_ADC_ConfigChannel+0x572>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800468c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e003      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	ea42 0103 	orr.w	r1, r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x598>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	051b      	lsls	r3, r3, #20
 80046d2:	e018      	b.n	8004706 <HAL_ADC_ConfigChannel+0x5ca>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e003      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80046f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	f003 021f 	and.w	r2, r3, #31
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004706:	430b      	orrs	r3, r1
 8004708:	e081      	b.n	800480e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x5ea>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	3301      	adds	r3, #1
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004724:	e015      	b.n	8004752 <HAL_ADC_ConfigChannel+0x616>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800473e:	2320      	movs	r3, #32
 8004740:	e003      	b.n	800474a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	fab3 f383 	clz	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	3301      	adds	r3, #1
 800474c:	069b      	lsls	r3, r3, #26
 800474e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x636>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	0e9b      	lsrs	r3, r3, #26
 8004764:	3301      	adds	r3, #1
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	e017      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x666>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	61fb      	str	r3, [r7, #28]
  return result;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800478a:	2320      	movs	r3, #32
 800478c:	e003      	b.n	8004796 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	fab3 f383 	clz	r3, r3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x692>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 021f 	and.w	r2, r3, #31
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	3b1e      	subs	r3, #30
 80047c6:	051b      	lsls	r3, r3, #20
 80047c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047cc:	e01e      	b.n	800480c <HAL_ADC_ConfigChannel+0x6d0>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	613b      	str	r3, [r7, #16]
  return result;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80047e6:	2320      	movs	r3, #32
 80047e8:	e006      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x6bc>
 80047ea:	bf00      	nop
 80047ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f003 021f 	and.w	r2, r3, #31
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	3b1e      	subs	r3, #30
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800480c:	430b      	orrs	r3, r1
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	4619      	mov	r1, r3
 8004814:	f7ff f8c7 	bl	80039a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_ADC_ConfigChannel+0x7d8>)
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d06c      	beq.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004824:	483c      	ldr	r0, [pc, #240]	; (8004918 <HAL_ADC_ConfigChannel+0x7dc>)
 8004826:	f7ff f809 	bl	800383c <LL_ADC_GetCommonPathInternalCh>
 800482a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <HAL_ADC_ConfigChannel+0x7e0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d127      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800483c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d121      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a35      	ldr	r2, [pc, #212]	; (8004920 <HAL_ADC_ConfigChannel+0x7e4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d157      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004856:	4619      	mov	r1, r3
 8004858:	482f      	ldr	r0, [pc, #188]	; (8004918 <HAL_ADC_ConfigChannel+0x7dc>)
 800485a:	f7fe ffdc 	bl	8003816 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_ADC_ConfigChannel+0x7e8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	4a30      	ldr	r2, [pc, #192]	; (8004928 <HAL_ADC_ConfigChannel+0x7ec>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004878:	e002      	b.n	8004880 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f9      	bne.n	800487a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004886:	e03a      	b.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <HAL_ADC_ConfigChannel+0x7f0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d113      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x77e>
 8004892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_ADC_ConfigChannel+0x7e4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d12a      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b0:	4619      	mov	r1, r3
 80048b2:	4819      	ldr	r0, [pc, #100]	; (8004918 <HAL_ADC_ConfigChannel+0x7dc>)
 80048b4:	f7fe ffaf 	bl	8003816 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b8:	e021      	b.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_ADC_ConfigChannel+0x7f4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d11c      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_ADC_ConfigChannel+0x7e4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e2:	4619      	mov	r1, r3
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <HAL_ADC_ConfigChannel+0x7dc>)
 80048e6:	f7fe ff96 	bl	8003816 <LL_ADC_SetCommonPathInternalCh>
 80048ea:	e008      	b.n	80048fe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004906:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800490a:	4618      	mov	r0, r3
 800490c:	37d8      	adds	r7, #216	; 0xd8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	80080000 	.word	0x80080000
 8004918:	50040300 	.word	0x50040300
 800491c:	c7520000 	.word	0xc7520000
 8004920:	50040000 	.word	0x50040000
 8004924:	20000014 	.word	0x20000014
 8004928:	053e2d63 	.word	0x053e2d63
 800492c:	cb840000 	.word	0xcb840000
 8004930:	80000001 	.word	0x80000001

08004934 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f94c 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 8004950:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff f96d 	bl	8003c36 <LL_ADC_INJ_IsConversionOngoing>
 800495c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8098 	beq.w	8004a9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02a      	beq.n	80049d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7e5b      	ldrb	r3, [r3, #25]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d126      	bne.n	80049d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	7e1b      	ldrb	r3, [r3, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d122      	bne.n	80049d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800498e:	e014      	b.n	80049ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4a45      	ldr	r2, [pc, #276]	; (8004aa8 <ADC_ConversionStop+0x174>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d90d      	bls.n	80049b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f043 0210 	orr.w	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e074      	b.n	8004a9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d1e3      	bne.n	8004990 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d014      	beq.n	8004a00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff f904 	bl	8003be8 <LL_ADC_REG_IsConversionOngoing>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff f8c1 	bl	8003b72 <LL_ADC_IsDisableOngoing>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff f8e0 	bl	8003bc0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d014      	beq.n	8004a30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f913 	bl	8003c36 <LL_ADC_INJ_IsConversionOngoing>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff f8a9 	bl	8003b72 <LL_ADC_IsDisableOngoing>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff f8ef 	bl	8003c0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d005      	beq.n	8004a42 <ADC_ConversionStop+0x10e>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d105      	bne.n	8004a48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	617b      	str	r3, [r7, #20]
        break;
 8004a40:	e005      	b.n	8004a4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004a42:	2308      	movs	r3, #8
 8004a44:	617b      	str	r3, [r7, #20]
        break;
 8004a46:	e002      	b.n	8004a4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	617b      	str	r3, [r7, #20]
        break;
 8004a4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a4e:	f7fe fe9f 	bl	8003790 <HAL_GetTick>
 8004a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a54:	e01b      	b.n	8004a8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a56:	f7fe fe9b 	bl	8003790 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d914      	bls.n	8004a8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f043 0210 	orr.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e007      	b.n	8004a9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1dc      	bne.n	8004a56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	a33fffff 	.word	0xa33fffff

08004aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f845 	bl	8003b4c <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d169      	bne.n	8004b9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <ADC_Enable+0xfc>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f043 0210 	orr.w	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e055      	b.n	8004b9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f800 	bl	8003afc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004afc:	482b      	ldr	r0, [pc, #172]	; (8004bac <ADC_Enable+0x100>)
 8004afe:	f7fe fe9d 	bl	800383c <LL_ADC_GetCommonPathInternalCh>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <ADC_Enable+0x104>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <ADC_Enable+0x108>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004b26:	e002      	b.n	8004b2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b34:	f7fe fe2c 	bl	8003790 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b3a:	e028      	b.n	8004b8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f803 	bl	8003b4c <LL_ADC_IsEnabled>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe ffd3 	bl	8003afc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b56:	f7fe fe1b 	bl	8003790 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d914      	bls.n	8004b8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d00d      	beq.n	8004b8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d1cf      	bne.n	8004b3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	8000003f 	.word	0x8000003f
 8004bac:	50040300 	.word	0x50040300
 8004bb0:	20000014 	.word	0x20000014
 8004bb4:	053e2d63 	.word	0x053e2d63

08004bb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe ffd4 	bl	8003b72 <LL_ADC_IsDisableOngoing>
 8004bca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe ffbb 	bl	8003b4c <LL_ADC_IsEnabled>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d047      	beq.n	8004c6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d144      	bne.n	8004c6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030d 	and.w	r3, r3, #13
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10c      	bne.n	8004c0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe ff95 	bl	8003b24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2203      	movs	r2, #3
 8004c00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c02:	f7fe fdc5 	bl	8003790 <HAL_GetTick>
 8004c06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c08:	e029      	b.n	8004c5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	f043 0210 	orr.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e023      	b.n	8004c6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c26:	f7fe fdb3 	bl	8003790 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d914      	bls.n	8004c5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f043 0210 	orr.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	f043 0201 	orr.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e007      	b.n	8004c6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1dc      	bne.n	8004c26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d14b      	bne.n	8004d28 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d021      	beq.n	8004cee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fe3a 	bl	8003928 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d032      	beq.n	8004d20 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d12b      	bne.n	8004d20 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11f      	bne.n	8004d20 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f043 0201 	orr.w	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
 8004cec:	e018      	b.n	8004d20 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f043 0201 	orr.w	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7fc f969 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d26:	e00e      	b.n	8004d46 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7fc fa01 	bl	800113c <HAL_ADC_ErrorCallback>
}
 8004d3a:	e004      	b.n	8004d46 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff f9e2 	bl	8004126 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fc f9d3 	bl	800113c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <LL_ADC_IsEnabled>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <LL_ADC_IsEnabled+0x18>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_ADC_IsEnabled+0x1a>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_ADC_StartCalibration>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_ADC_IsCalibrationOnGoing>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0a:	d101      	bne.n	8004e10 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_ADC_REG_IsConversionOngoing>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d101      	bne.n	8004e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADCEx_Calibration_Start+0x1c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e04d      	b.n	8004efc <HAL_ADCEx_Calibration_Start+0xb8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fea5 	bl	8004bb8 <ADC_Disable>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d136      	bne.n	8004ee6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e80:	f023 0302 	bic.w	r3, r3, #2
 8004e84:	f043 0202 	orr.w	r2, r3, #2
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff ff96 	bl	8004dc4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e98:	e014      	b.n	8004ec4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004ea6:	d30d      	bcc.n	8004ec4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f023 0312 	bic.w	r3, r3, #18
 8004eb0:	f043 0210 	orr.w	r2, r3, #16
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01b      	b.n	8004efc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff94 	bl	8004df6 <LL_ADC_IsCalibrationOnGoing>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e2      	bne.n	8004e9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	f043 0201 	orr.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ee4:	e005      	b.n	8004ef2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0210 	orr.w	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b09f      	sub	sp, #124	; 0x7c
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e089      	b.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a42      	ldr	r2, [pc, #264]	; (8005040 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d102      	bne.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f3c:	4b41      	ldr	r3, [pc, #260]	; (8005044 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	e001      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e068      	b.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff59 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004f6c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ff53 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d14a      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d147      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f84:	4b30      	ldr	r3, [pc, #192]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f86:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d027      	beq.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa2:	035b      	lsls	r3, r3, #13
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fac:	4824      	ldr	r0, [pc, #144]	; (8005040 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004fae:	f7ff fef6 	bl	8004d9e <LL_ADC_IsEnabled>
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4823      	ldr	r0, [pc, #140]	; (8005044 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fb6:	f7ff fef2 	bl	8004d9e <LL_ADC_IsEnabled>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4323      	orrs	r3, r4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d132      	bne.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fca:	f023 030f 	bic.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fde:	e023      	b.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fec:	4814      	ldr	r0, [pc, #80]	; (8005040 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004fee:	f7ff fed6 	bl	8004d9e <LL_ADC_IsEnabled>
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4813      	ldr	r0, [pc, #76]	; (8005044 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ff6:	f7ff fed2 	bl	8004d9e <LL_ADC_IsEnabled>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4323      	orrs	r3, r4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d112      	bne.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800500a:	f023 030f 	bic.w	r3, r3, #15
 800500e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005010:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005012:	e009      	b.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005026:	e000      	b.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005028:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005032:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005036:	4618      	mov	r0, r3
 8005038:	377c      	adds	r7, #124	; 0x7c
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}
 800503e:	bf00      	nop
 8005040:	50040000 	.word	0x50040000
 8005044:	50040100 	.word	0x50040100
 8005048:	50040300 	.word	0x50040300

0800504c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <__NVIC_SetPriorityGrouping+0x44>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005068:	4013      	ands	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <__NVIC_SetPriorityGrouping+0x44>)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	60d3      	str	r3, [r2, #12]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <__NVIC_GetPriorityGrouping+0x18>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	f003 0307 	and.w	r3, r3, #7
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	db0b      	blt.n	80050da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	4907      	ldr	r1, [pc, #28]	; (80050e8 <__NVIC_EnableIRQ+0x38>)
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2001      	movs	r0, #1
 80050d2:	fa00 f202 	lsl.w	r2, r0, r2
 80050d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000e100 	.word	0xe000e100

080050ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	db12      	blt.n	8005124 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	f003 021f 	and.w	r2, r3, #31
 8005104:	490a      	ldr	r1, [pc, #40]	; (8005130 <__NVIC_DisableIRQ+0x44>)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2001      	movs	r0, #1
 800510e:	fa00 f202 	lsl.w	r2, r0, r2
 8005112:	3320      	adds	r3, #32
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005118:	f3bf 8f4f 	dsb	sy
}
 800511c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800511e:	f3bf 8f6f 	isb	sy
}
 8005122:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000e100 	.word	0xe000e100

08005134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db0a      	blt.n	800515e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	490c      	ldr	r1, [pc, #48]	; (8005180 <__NVIC_SetPriority+0x4c>)
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	0112      	lsls	r2, r2, #4
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	440b      	add	r3, r1
 8005158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800515c:	e00a      	b.n	8005174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4908      	ldr	r1, [pc, #32]	; (8005184 <__NVIC_SetPriority+0x50>)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	3b04      	subs	r3, #4
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	440b      	add	r3, r1
 8005172:	761a      	strb	r2, [r3, #24]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000e100 	.word	0xe000e100
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	; 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f1c3 0307 	rsb	r3, r3, #7
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	bf28      	it	cs
 80051a6:	2304      	movcs	r3, #4
 80051a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3304      	adds	r3, #4
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d902      	bls.n	80051b8 <NVIC_EncodePriority+0x30>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3b03      	subs	r3, #3
 80051b6:	e000      	b.n	80051ba <NVIC_EncodePriority+0x32>
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43da      	mvns	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	401a      	ands	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d0:	f04f 31ff 	mov.w	r1, #4294967295
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	43d9      	mvns	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e0:	4313      	orrs	r3, r2
         );
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005200:	d301      	bcc.n	8005206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005202:	2301      	movs	r3, #1
 8005204:	e00f      	b.n	8005226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005206:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <SysTick_Config+0x40>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520e:	210f      	movs	r1, #15
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	f7ff ff8e 	bl	8005134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <SysTick_Config+0x40>)
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <SysTick_Config+0x40>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010

08005234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff05 	bl	800504c <__NVIC_SetPriorityGrouping>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	4603      	mov	r3, r0
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800525c:	f7ff ff1a 	bl	8005094 <__NVIC_GetPriorityGrouping>
 8005260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff8e 	bl	8005188 <NVIC_EncodePriority>
 800526c:	4602      	mov	r2, r0
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff5d 	bl	8005134 <__NVIC_SetPriority>
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800528c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ff0d 	bl	80050b0 <__NVIC_EnableIRQ>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff1d 	bl	80050ec <__NVIC_DisableIRQ>
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff94 	bl	80051f0 <SysTick_Config>
 80052c8:	4603      	mov	r3, r0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e098      	b.n	8005418 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b4d      	ldr	r3, [pc, #308]	; (8005424 <HAL_DMA_Init+0x150>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d80f      	bhi.n	8005312 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_DMA_Init+0x154>)
 80052fa:	4413      	add	r3, r2
 80052fc:	4a4b      	ldr	r2, [pc, #300]	; (800542c <HAL_DMA_Init+0x158>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	009a      	lsls	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a48      	ldr	r2, [pc, #288]	; (8005430 <HAL_DMA_Init+0x15c>)
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
 8005310:	e00e      	b.n	8005330 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	4b46      	ldr	r3, [pc, #280]	; (8005434 <HAL_DMA_Init+0x160>)
 800531a:	4413      	add	r3, r2
 800531c:	4a43      	ldr	r2, [pc, #268]	; (800542c <HAL_DMA_Init+0x158>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a42      	ldr	r2, [pc, #264]	; (8005438 <HAL_DMA_Init+0x164>)
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538a:	d039      	beq.n	8005400 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4a27      	ldr	r2, [pc, #156]	; (8005430 <HAL_DMA_Init+0x15c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d11a      	bne.n	80053cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <HAL_DMA_Init+0x168>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 031c 	and.w	r3, r3, #28
 80053a2:	210f      	movs	r1, #15
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	4924      	ldr	r1, [pc, #144]	; (800543c <HAL_DMA_Init+0x168>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <HAL_DMA_Init+0x168>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	f003 031c 	and.w	r3, r3, #28
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	491d      	ldr	r1, [pc, #116]	; (800543c <HAL_DMA_Init+0x168>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
 80053ca:	e019      	b.n	8005400 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_DMA_Init+0x16c>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	f003 031c 	and.w	r3, r3, #28
 80053d8:	210f      	movs	r1, #15
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	4917      	ldr	r1, [pc, #92]	; (8005440 <HAL_DMA_Init+0x16c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_DMA_Init+0x16c>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f003 031c 	and.w	r3, r3, #28
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	4911      	ldr	r1, [pc, #68]	; (8005440 <HAL_DMA_Init+0x16c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40020407 	.word	0x40020407
 8005428:	bffdfff8 	.word	0xbffdfff8
 800542c:	cccccccd 	.word	0xcccccccd
 8005430:	40020000 	.word	0x40020000
 8005434:	bffdfbf8 	.word	0xbffdfbf8
 8005438:	40020400 	.word	0x40020400
 800543c:	400200a8 	.word	0x400200a8
 8005440:	400204a8 	.word	0x400204a8

08005444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_DMA_Start_IT+0x20>
 8005460:	2302      	movs	r3, #2
 8005462:	e04b      	b.n	80054fc <HAL_DMA_Start_IT+0xb8>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d13a      	bne.n	80054ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f95f 	bl	8005760 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 020e 	orr.w	r2, r2, #14
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e00f      	b.n	80054dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 020a 	orr.w	r2, r2, #10
 80054da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e005      	b.n	80054fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d008      	beq.n	800552e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2204      	movs	r2, #4
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e022      	b.n	8005574 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 020e 	bic.w	r2, r2, #14
 800553c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f003 021c 	and.w	r2, r3, #28
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f202 	lsl.w	r2, r1, r2
 8005560:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d005      	beq.n	80055a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
 80055a2:	e029      	b.n	80055f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 020e 	bic.w	r2, r2, #14
 80055b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f003 021c 	and.w	r2, r3, #28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f202 	lsl.w	r2, r1, r2
 80055d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
    }
  }
  return status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f003 031c 	and.w	r3, r3, #28
 8005622:	2204      	movs	r2, #4
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d026      	beq.n	800567c <HAL_DMA_IRQHandler+0x7a>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d021      	beq.n	800567c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	f003 021c 	and.w	r2, r3, #28
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2104      	movs	r1, #4
 8005664:	fa01 f202 	lsl.w	r2, r1, r2
 8005668:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	2b00      	cmp	r3, #0
 8005670:	d071      	beq.n	8005756 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800567a:	e06c      	b.n	8005756 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	f003 031c 	and.w	r3, r3, #28
 8005684:	2202      	movs	r2, #2
 8005686:	409a      	lsls	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02e      	beq.n	80056ee <HAL_DMA_IRQHandler+0xec>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d029      	beq.n	80056ee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020a 	bic.w	r2, r2, #10
 80056b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f003 021c 	and.w	r2, r3, #28
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	2102      	movs	r1, #2
 80056ce:	fa01 f202 	lsl.w	r2, r1, r2
 80056d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d038      	beq.n	8005756 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80056ec:	e033      	b.n	8005756 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f003 031c 	and.w	r3, r3, #28
 80056f6:	2208      	movs	r2, #8
 80056f8:	409a      	lsls	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02a      	beq.n	8005758 <HAL_DMA_IRQHandler+0x156>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d025      	beq.n	8005758 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 020e 	bic.w	r2, r2, #14
 800571a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	f003 021c 	and.w	r2, r3, #28
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005756:	bf00      	nop
 8005758:	bf00      	nop
}
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f003 021c 	and.w	r2, r3, #28
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f202 	lsl.w	r2, r1, r2
 8005780:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b10      	cmp	r3, #16
 8005790:	d108      	bne.n	80057a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057a2:	e007      	b.n	80057b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057d2:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <HAL_FLASH_Program+0xd0>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_FLASH_Program+0x1e>
 80057da:	2302      	movs	r3, #2
 80057dc:	e053      	b.n	8005886 <HAL_FLASH_Program+0xc6>
 80057de:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <HAL_FLASH_Program+0xd0>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057e8:	f000 f894 	bl	8005914 <FLASH_WaitForLastOperation>
 80057ec:	4603      	mov	r3, r0
 80057ee:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d143      	bne.n	800587e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80057f6:	4b26      	ldr	r3, [pc, #152]	; (8005890 <HAL_FLASH_Program+0xd0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_FLASH_Program+0xd4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005808:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_FLASH_Program+0xd4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a21      	ldr	r2, [pc, #132]	; (8005894 <HAL_FLASH_Program+0xd4>)
 800580e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005812:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005814:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <HAL_FLASH_Program+0xd0>)
 8005816:	2202      	movs	r2, #2
 8005818:	771a      	strb	r2, [r3, #28]
 800581a:	e002      	b.n	8005822 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800581c:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <HAL_FLASH_Program+0xd0>)
 800581e:	2200      	movs	r2, #0
 8005820:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d107      	bne.n	8005838 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582c:	68b8      	ldr	r0, [r7, #8]
 800582e:	f000 f8c9 	bl	80059c4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005832:	2301      	movs	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e010      	b.n	800585a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d002      	beq.n	8005844 <HAL_FLASH_Program+0x84>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d10a      	bne.n	800585a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	68b8      	ldr	r0, [r7, #8]
 800584a:	f000 f8e1 	bl	8005a10 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d102      	bne.n	800585a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005854:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005858:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800585a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800585e:	f000 f859 	bl	8005914 <FLASH_WaitForLastOperation>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_FLASH_Program+0xd4>)
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	4907      	ldr	r1, [pc, #28]	; (8005894 <HAL_FLASH_Program+0xd4>)
 8005876:	4013      	ands	r3, r2
 8005878:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800587a:	f000 f9d9 	bl	8005c30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <HAL_FLASH_Program+0xd0>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]

  return status;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000020 	.word	0x20000020
 8005894:	40022000 	.word	0x40022000

08005898 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_FLASH_Unlock+0x38>)
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da0b      	bge.n	80058c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_FLASH_Unlock+0x38>)
 80058ac:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <HAL_FLASH_Unlock+0x3c>)
 80058ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_FLASH_Unlock+0x38>)
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <HAL_FLASH_Unlock+0x40>)
 80058b4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_FLASH_Unlock+0x38>)
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da01      	bge.n	80058c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80058c2:	79fb      	ldrb	r3, [r7, #7]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40022000 	.word	0x40022000
 80058d4:	45670123 	.word	0x45670123
 80058d8:	cdef89ab 	.word	0xcdef89ab

080058dc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_FLASH_Lock+0x1c>)
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <HAL_FLASH_Lock+0x1c>)
 80058e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40022000 	.word	0x40022000

080058fc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_FLASH_GetError+0x14>)
 8005902:	685b      	ldr	r3, [r3, #4]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000020 	.word	0x20000020

08005914 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800591c:	f7fd ff38 	bl	8003790 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005922:	e00d      	b.n	8005940 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d009      	beq.n	8005940 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800592c:	f7fd ff30 	bl	8003790 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d801      	bhi.n	8005940 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e036      	b.n	80059ae <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1eb      	bne.n	8005924 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <FLASH_WaitForLastOperation+0xa8>)
 8005952:	4013      	ands	r3, r2
 8005954:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <FLASH_WaitForLastOperation+0xac>)
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <FLASH_WaitForLastOperation+0xac>)
 8005966:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <FLASH_WaitForLastOperation+0x6e>
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800597c:	490e      	ldr	r1, [pc, #56]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	618b      	str	r3, [r1, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <FLASH_WaitForLastOperation+0x82>
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005994:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e009      	b.n	80059ae <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <FLASH_WaitForLastOperation+0xa4>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40022000 	.word	0x40022000
 80059bc:	0002c3fa 	.word	0x0002c3fa
 80059c0:	20000020 	.word	0x20000020

080059c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <FLASH_Program_DoubleWord+0x48>)
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4a0d      	ldr	r2, [pc, #52]	; (8005a0c <FLASH_Program_DoubleWord+0x48>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80059e2:	f3bf 8f6f 	isb	sy
}
 80059e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80059e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	000a      	movs	r2, r1
 80059f6:	2300      	movs	r3, #0
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	3104      	adds	r1, #4
 80059fc:	4613      	mov	r3, r2
 80059fe:	600b      	str	r3, [r1, #0]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40022000 	.word	0x40022000

08005a10 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a1a:	2340      	movs	r3, #64	; 0x40
 8005a1c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <FLASH_Program_Fast+0x68>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <FLASH_Program_Fast+0x68>)
 8005a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a38:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a3c:	b672      	cpsid	i
}
 8005a3e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3304      	adds	r3, #4
 8005a52:	617b      	str	r3, [r7, #20]
    row_index--;
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ef      	bne.n	8005a40 <FLASH_Program_Fast+0x30>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f383 8810 	msr	PRIMASK, r3
}
 8005a6a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005a6c:	bf00      	nop
 8005a6e:	3724      	adds	r7, #36	; 0x24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40022000 	.word	0x40022000

08005a7c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a86:	4b47      	ldr	r3, [pc, #284]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_FLASHEx_Erase+0x16>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e083      	b.n	8005b9a <HAL_FLASHEx_Erase+0x11e>
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a9c:	f7ff ff3a 	bl	8005914 <FLASH_WaitForLastOperation>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d173      	bne.n	8005b92 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005aaa:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005ab0:	4b3d      	ldr	r3, [pc, #244]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005abc:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ac8:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a36      	ldr	r2, [pc, #216]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005ad4:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	771a      	strb	r2, [r3, #28]
 8005ada:	e016      	b.n	8005b0a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005adc:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	771a      	strb	r2, [r3, #28]
 8005ae2:	e012      	b.n	8005b0a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005af0:	4b2d      	ldr	r3, [pc, #180]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005afa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005afc:	4b29      	ldr	r3, [pc, #164]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005afe:	2202      	movs	r2, #2
 8005b00:	771a      	strb	r2, [r3, #28]
 8005b02:	e002      	b.n	8005b0a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d111      	bne.n	8005b36 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f848 	bl	8005bac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b20:	f7ff fef8 	bl	8005914 <FLASH_WaitForLastOperation>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005b2e:	f023 0304 	bic.w	r3, r3, #4
 8005b32:	6153      	str	r3, [r2, #20]
 8005b34:	e02b      	b.n	8005b8e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	e01b      	b.n	8005b7e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68b8      	ldr	r0, [r7, #8]
 8005b4e:	f000 f84b 	bl	8005be8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b56:	f7ff fedd 	bl	8005914 <FLASH_WaitForLastOperation>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <HAL_FLASHEx_Erase+0x12c>)
 8005b64:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005b68:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
          break;
 8005b76:	e00a      	b.n	8005b8e <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3db      	bcc.n	8005b46 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005b8e:	f000 f84f 	bl	8005c30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <HAL_FLASHEx_Erase+0x128>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]

  return status;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000020 	.word	0x20000020
 8005ba8:	40022000 	.word	0x40022000

08005bac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <FLASH_MassErase+0x38>)
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <FLASH_MassErase+0x38>)
 8005bc4:	f043 0304 	orr.w	r3, r3, #4
 8005bc8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <FLASH_MassErase+0x38>)
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4a05      	ldr	r2, [pc, #20]	; (8005be4 <FLASH_MassErase+0x38>)
 8005bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd4:	6153      	str	r3, [r2, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40022000 	.word	0x40022000

08005be8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <FLASH_PageErase+0x44>)
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c02:	490a      	ldr	r1, [pc, #40]	; (8005c2c <FLASH_PageErase+0x44>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <FLASH_PageErase+0x44>)
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <FLASH_PageErase+0x44>)
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <FLASH_PageErase+0x44>)
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <FLASH_PageErase+0x44>)
 8005c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1e:	6153      	str	r3, [r2, #20]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40022000 	.word	0x40022000

08005c30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <FLASH_FlushCaches+0x8c>)
 8005c38:	7f1b      	ldrb	r3, [r3, #28]
 8005c3a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d002      	beq.n	8005c48 <FLASH_FlushCaches+0x18>
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d117      	bne.n	8005c78 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c48:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c52:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c6a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c76:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d002      	beq.n	8005c84 <FLASH_FlushCaches+0x54>
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d111      	bne.n	8005ca8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <FLASH_FlushCaches+0x90>)
 8005ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ca6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <FLASH_FlushCaches+0x8c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	771a      	strb	r2, [r3, #28]
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000020 	.word	0x20000020
 8005cc0:	40022000 	.word	0x40022000

08005cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cd2:	e14e      	b.n	8005f72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	2101      	movs	r1, #1
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8140 	beq.w	8005f6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d005      	beq.n	8005d04 <HAL_GPIO_Init+0x40>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d130      	bne.n	8005d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	f003 0201 	and.w	r2, r3, #1
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d017      	beq.n	8005da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4013      	ands	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d123      	bne.n	8005df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	08da      	lsrs	r2, r3, #3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3208      	adds	r2, #8
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	220f      	movs	r2, #15
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	08da      	lsrs	r2, r3, #3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3208      	adds	r2, #8
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	2203      	movs	r2, #3
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 0203 	and.w	r2, r3, #3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 809a 	beq.w	8005f6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e38:	4b55      	ldr	r3, [pc, #340]	; (8005f90 <HAL_GPIO_Init+0x2cc>)
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3c:	4a54      	ldr	r2, [pc, #336]	; (8005f90 <HAL_GPIO_Init+0x2cc>)
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	6613      	str	r3, [r2, #96]	; 0x60
 8005e44:	4b52      	ldr	r3, [pc, #328]	; (8005f90 <HAL_GPIO_Init+0x2cc>)
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e50:	4a50      	ldr	r2, [pc, #320]	; (8005f94 <HAL_GPIO_Init+0x2d0>)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	089b      	lsrs	r3, r3, #2
 8005e56:	3302      	adds	r3, #2
 8005e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	220f      	movs	r2, #15
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4013      	ands	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e7a:	d013      	beq.n	8005ea4 <HAL_GPIO_Init+0x1e0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	; (8005f98 <HAL_GPIO_Init+0x2d4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00d      	beq.n	8005ea0 <HAL_GPIO_Init+0x1dc>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a45      	ldr	r2, [pc, #276]	; (8005f9c <HAL_GPIO_Init+0x2d8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <HAL_GPIO_Init+0x1d8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a44      	ldr	r2, [pc, #272]	; (8005fa0 <HAL_GPIO_Init+0x2dc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_GPIO_Init+0x1d4>
 8005e94:	2303      	movs	r3, #3
 8005e96:	e006      	b.n	8005ea6 <HAL_GPIO_Init+0x1e2>
 8005e98:	2307      	movs	r3, #7
 8005e9a:	e004      	b.n	8005ea6 <HAL_GPIO_Init+0x1e2>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e002      	b.n	8005ea6 <HAL_GPIO_Init+0x1e2>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_GPIO_Init+0x1e2>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	f002 0203 	and.w	r2, r2, #3
 8005eac:	0092      	lsls	r2, r2, #2
 8005eae:	4093      	lsls	r3, r2
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005eb6:	4937      	ldr	r1, [pc, #220]	; (8005f94 <HAL_GPIO_Init+0x2d0>)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec4:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ee8:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eee:	4b2d      	ldr	r3, [pc, #180]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4013      	ands	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f12:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f18:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4013      	ands	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f42:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f66:	4a0f      	ldr	r2, [pc, #60]	; (8005fa4 <HAL_GPIO_Init+0x2e0>)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f aea9 	bne.w	8005cd4 <HAL_GPIO_Init+0x10>
  }
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40010000 	.word	0x40010000
 8005f98:	48000400 	.word	0x48000400
 8005f9c:	48000800 	.word	0x48000800
 8005fa0:	48000c00 	.word	0x48000c00
 8005fa4:	40010400 	.word	0x40010400

08005fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	e001      	b.n	8005fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe8:	787b      	ldrb	r3, [r7, #1]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ff4:	e002      	b.n	8005ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ff6:	887a      	ldrh	r2, [r7, #2]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <HAL_PWREx_GetVoltageRange+0x18>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40007000 	.word	0x40007000

08006024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006032:	d130      	bne.n	8006096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800603c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006040:	d038      	beq.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800604a:	4a1e      	ldr	r2, [pc, #120]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800604c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2232      	movs	r2, #50	; 0x32
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	0c9b      	lsrs	r3, r3, #18
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006068:	e002      	b.n	8006070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b01      	subs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006070:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d102      	bne.n	8006084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f2      	bne.n	800606a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006090:	d110      	bne.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e00f      	b.n	80060b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a2:	d007      	beq.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060ac:	4a05      	ldr	r2, [pc, #20]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40007000 	.word	0x40007000
 80060c8:	20000014 	.word	0x20000014
 80060cc:	431bde83 	.word	0x431bde83

080060d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f000 bc4f 	b.w	8006982 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e4:	4b97      	ldr	r3, [pc, #604]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ee:	4b95      	ldr	r3, [pc, #596]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80e6 	beq.w	80062d2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_RCC_OscConfig+0x4c>
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b0c      	cmp	r3, #12
 8006110:	f040 808d 	bne.w	800622e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b01      	cmp	r3, #1
 8006118:	f040 8089 	bne.w	800622e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800611c:	4b89      	ldr	r3, [pc, #548]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <HAL_RCC_OscConfig+0x66>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f000 bc26 	b.w	8006982 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613a:	4b82      	ldr	r3, [pc, #520]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <HAL_RCC_OscConfig+0x80>
 8006146:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800614e:	e005      	b.n	800615c <HAL_RCC_OscConfig+0x8c>
 8006150:	4b7c      	ldr	r3, [pc, #496]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615c:	4293      	cmp	r3, r2
 800615e:	d224      	bcs.n	80061aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fdd9 	bl	8006d1c <RCC_SetFlashLatencyFromMSIRange>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	f000 bc06 	b.w	8006982 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006176:	4b73      	ldr	r3, [pc, #460]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a72      	ldr	r2, [pc, #456]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800617c:	f043 0308 	orr.w	r3, r3, #8
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4b70      	ldr	r3, [pc, #448]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	496d      	ldr	r1, [pc, #436]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006190:	4313      	orrs	r3, r2
 8006192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006194:	4b6b      	ldr	r3, [pc, #428]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	4968      	ldr	r1, [pc, #416]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	604b      	str	r3, [r1, #4]
 80061a8:	e025      	b.n	80061f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061aa:	4b66      	ldr	r3, [pc, #408]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061b0:	f043 0308 	orr.w	r3, r3, #8
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b63      	ldr	r3, [pc, #396]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	4960      	ldr	r1, [pc, #384]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061c8:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	495b      	ldr	r1, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fd98 	bl	8006d1c <RCC_SetFlashLatencyFromMSIRange>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e3c5      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061f6:	f000 fccd 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4b51      	ldr	r3, [pc, #324]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	4950      	ldr	r1, [pc, #320]	; (8006348 <HAL_RCC_OscConfig+0x278>)
 8006208:	5ccb      	ldrb	r3, [r1, r3]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	fa22 f303 	lsr.w	r3, r2, r3
 8006212:	4a4e      	ldr	r2, [pc, #312]	; (800634c <HAL_RCC_OscConfig+0x27c>)
 8006214:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006216:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <HAL_RCC_OscConfig+0x280>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fd fa68 	bl	80036f0 <HAL_InitTick>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d052      	beq.n	80062d0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	e3a9      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d032      	beq.n	800629c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006236:	4b43      	ldr	r3, [pc, #268]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a42      	ldr	r2, [pc, #264]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006242:	f7fd faa5 	bl	8003790 <HAL_GetTick>
 8006246:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800624a:	f7fd faa1 	bl	8003790 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e392      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800625c:	4b39      	ldr	r3, [pc, #228]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006268:	4b36      	ldr	r3, [pc, #216]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a35      	ldr	r2, [pc, #212]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800626e:	f043 0308 	orr.w	r3, r3, #8
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4b33      	ldr	r3, [pc, #204]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	4930      	ldr	r1, [pc, #192]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006282:	4313      	orrs	r3, r2
 8006284:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	492b      	ldr	r1, [pc, #172]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
 800629a:	e01a      	b.n	80062d2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800629c:	4b29      	ldr	r3, [pc, #164]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062a8:	f7fd fa72 	bl	8003790 <HAL_GetTick>
 80062ac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062b0:	f7fd fa6e 	bl	8003790 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e35f      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062c2:	4b20      	ldr	r3, [pc, #128]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x1e0>
 80062ce:	e000      	b.n	80062d2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d073      	beq.n	80063c6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_OscConfig+0x220>
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d10e      	bne.n	8006308 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d10b      	bne.n	8006308 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d063      	beq.n	80063c4 <HAL_RCC_OscConfig+0x2f4>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d15f      	bne.n	80063c4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e33c      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d106      	bne.n	8006320 <HAL_RCC_OscConfig+0x250>
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e025      	b.n	800636c <HAL_RCC_OscConfig+0x29c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006328:	d114      	bne.n	8006354 <HAL_RCC_OscConfig+0x284>
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a05      	ldr	r2, [pc, #20]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b03      	ldr	r3, [pc, #12]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a02      	ldr	r2, [pc, #8]	; (8006344 <HAL_RCC_OscConfig+0x274>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e013      	b.n	800636c <HAL_RCC_OscConfig+0x29c>
 8006344:	40021000 	.word	0x40021000
 8006348:	0800fdec 	.word	0x0800fdec
 800634c:	20000014 	.word	0x20000014
 8006350:	20000018 	.word	0x20000018
 8006354:	4b8f      	ldr	r3, [pc, #572]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a8e      	ldr	r2, [pc, #568]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800635a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b8c      	ldr	r3, [pc, #560]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a8b      	ldr	r2, [pc, #556]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800636a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fd fa0c 	bl	8003790 <HAL_GetTick>
 8006378:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800637c:	f7fd fa08 	bl	8003790 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	; 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e2f9      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800638e:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x2ac>
 800639a:	e014      	b.n	80063c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fd f9f8 	bl	8003790 <HAL_GetTick>
 80063a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a4:	f7fd f9f4 	bl	8003790 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b64      	cmp	r3, #100	; 0x64
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e2e5      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063b6:	4b77      	ldr	r3, [pc, #476]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
 80063c2:	e000      	b.n	80063c6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d060      	beq.n	8006494 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d005      	beq.n	80063e4 <HAL_RCC_OscConfig+0x314>
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d119      	bne.n	8006412 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d116      	bne.n	8006412 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e4:	4b6b      	ldr	r3, [pc, #428]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_OscConfig+0x32c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e2c2      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fc:	4b65      	ldr	r3, [pc, #404]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	061b      	lsls	r3, r3, #24
 800640a:	4962      	ldr	r1, [pc, #392]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	4313      	orrs	r3, r2
 800640e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006410:	e040      	b.n	8006494 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d023      	beq.n	8006462 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800641a:	4b5e      	ldr	r3, [pc, #376]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fd f9b3 	bl	8003790 <HAL_GetTick>
 800642a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642e:	f7fd f9af 	bl	8003790 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e2a0      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006440:	4b54      	ldr	r3, [pc, #336]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b51      	ldr	r3, [pc, #324]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	061b      	lsls	r3, r3, #24
 800645a:	494e      	ldr	r1, [pc, #312]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	604b      	str	r3, [r1, #4]
 8006460:	e018      	b.n	8006494 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006462:	4b4c      	ldr	r3, [pc, #304]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4b      	ldr	r2, [pc, #300]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646e:	f7fd f98f 	bl	8003790 <HAL_GetTick>
 8006472:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006476:	f7fd f98b 	bl	8003790 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e27c      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006488:	4b42      	ldr	r3, [pc, #264]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f0      	bne.n	8006476 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8082 	beq.w	80065a6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d05f      	beq.n	800656a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80064aa:	4b3a      	ldr	r3, [pc, #232]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	429a      	cmp	r2, r3
 80064be:	d037      	beq.n	8006530 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e254      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80064e2:	4b2c      	ldr	r3, [pc, #176]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e8:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064f2:	f7fd f94d 	bl	8003790 <HAL_GetTick>
 80064f6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064fa:	f7fd f949 	bl	8003790 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b11      	cmp	r3, #17
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e23a      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1ef      	bne.n	80064fa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800651a:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800651c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006520:	f023 0210 	bic.w	r2, r3, #16
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	491a      	ldr	r1, [pc, #104]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006530:	4b18      	ldr	r3, [pc, #96]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006536:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fd f926 	bl	8003790 <HAL_GetTick>
 8006544:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006548:	f7fd f922 	bl	8003790 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b11      	cmp	r3, #17
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e213      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800655a:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800655c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ef      	beq.n	8006548 <HAL_RCC_OscConfig+0x478>
 8006568:	e01d      	b.n	80065a6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 800656c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006570:	4a08      	ldr	r2, [pc, #32]	; (8006594 <HAL_RCC_OscConfig+0x4c4>)
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657a:	f7fd f909 	bl	8003790 <HAL_GetTick>
 800657e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006580:	e00a      	b.n	8006598 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006582:	f7fd f905 	bl	8003790 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b11      	cmp	r3, #17
 800658e:	d903      	bls.n	8006598 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e1f6      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
 8006594:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006598:	4ba9      	ldr	r3, [pc, #676]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ed      	bne.n	8006582 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80bd 	beq.w	800672e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80065ba:	4ba1      	ldr	r3, [pc, #644]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c6:	4b9e      	ldr	r3, [pc, #632]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	4a9d      	ldr	r2, [pc, #628]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80065cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d0:	6593      	str	r3, [r2, #88]	; 0x58
 80065d2:	4b9b      	ldr	r3, [pc, #620]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e4:	4b97      	ldr	r3, [pc, #604]	; (8006844 <HAL_RCC_OscConfig+0x774>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d118      	bne.n	8006622 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065f0:	4b94      	ldr	r3, [pc, #592]	; (8006844 <HAL_RCC_OscConfig+0x774>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a93      	ldr	r2, [pc, #588]	; (8006844 <HAL_RCC_OscConfig+0x774>)
 80065f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fc:	f7fd f8c8 	bl	8003790 <HAL_GetTick>
 8006600:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006604:	f7fd f8c4 	bl	8003790 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e1b5      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006616:	4b8b      	ldr	r3, [pc, #556]	; (8006844 <HAL_RCC_OscConfig+0x774>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d02c      	beq.n	8006688 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800662e:	4b84      	ldr	r3, [pc, #528]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	497f      	ldr	r1, [pc, #508]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d010      	beq.n	8006676 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006654:	4b7a      	ldr	r3, [pc, #488]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665a:	4a79      	ldr	r2, [pc, #484]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800665c:	f043 0304 	orr.w	r3, r3, #4
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006664:	4b76      	ldr	r3, [pc, #472]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666a:	4a75      	ldr	r2, [pc, #468]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006674:	e018      	b.n	80066a8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667c:	4a70      	ldr	r2, [pc, #448]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006686:	e00f      	b.n	80066a8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006688:	4b6d      	ldr	r3, [pc, #436]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	4a6c      	ldr	r2, [pc, #432]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006698:	4b69      	ldr	r3, [pc, #420]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669e:	4a68      	ldr	r2, [pc, #416]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fd f86e 	bl	8003790 <HAL_GetTick>
 80066b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fd f86a 	bl	8003790 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e159      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ce:	4b5c      	ldr	r3, [pc, #368]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ed      	beq.n	80066b8 <HAL_RCC_OscConfig+0x5e8>
 80066dc:	e01d      	b.n	800671a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fd f857 	bl	8003790 <HAL_GetTick>
 80066e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066e4:	e00a      	b.n	80066fc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fd f853 	bl	8003790 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e142      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066fc:	4b50      	ldr	r3, [pc, #320]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ed      	bne.n	80066e6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800670a:	4b4d      	ldr	r3, [pc, #308]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	4a4b      	ldr	r2, [pc, #300]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800671a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800671e:	2b01      	cmp	r3, #1
 8006720:	d105      	bne.n	800672e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006722:	4b47      	ldr	r3, [pc, #284]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	4a46      	ldr	r2, [pc, #280]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d03c      	beq.n	80067b4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01c      	beq.n	800677c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006742:	4b3f      	ldr	r3, [pc, #252]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006748:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006752:	f7fd f81d 	bl	8003790 <HAL_GetTick>
 8006756:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800675a:	f7fd f819 	bl	8003790 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e10a      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800676c:	4b34      	ldr	r3, [pc, #208]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800676e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0ef      	beq.n	800675a <HAL_RCC_OscConfig+0x68a>
 800677a:	e01b      	b.n	80067b4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800677c:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800677e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006782:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678c:	f7fd f800 	bl	8003790 <HAL_GetTick>
 8006790:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006794:	f7fc fffc 	bl	8003790 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e0ed      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067a6:	4b26      	ldr	r3, [pc, #152]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80067a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ef      	bne.n	8006794 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80e1 	beq.w	8006980 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	f040 80b5 	bne.w	8006932 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f003 0203 	and.w	r2, r3, #3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	429a      	cmp	r2, r3
 80067da:	d124      	bne.n	8006826 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	3b01      	subs	r3, #1
 80067e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d11b      	bne.n	8006826 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d113      	bne.n	8006826 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	3b01      	subs	r3, #1
 800680c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800680e:	429a      	cmp	r2, r3
 8006810:	d109      	bne.n	8006826 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	3b01      	subs	r3, #1
 8006820:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006822:	429a      	cmp	r2, r3
 8006824:	d05f      	beq.n	80068e6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d05a      	beq.n	80068e2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a03      	ldr	r2, [pc, #12]	; (8006840 <HAL_RCC_OscConfig+0x770>)
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006838:	f7fc ffaa 	bl	8003790 <HAL_GetTick>
 800683c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683e:	e00c      	b.n	800685a <HAL_RCC_OscConfig+0x78a>
 8006840:	40021000 	.word	0x40021000
 8006844:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006848:	f7fc ffa2 	bl	8003790 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e093      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800685a:	4b4c      	ldr	r3, [pc, #304]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006866:	4b49      	ldr	r3, [pc, #292]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	4b49      	ldr	r3, [pc, #292]	; (8006990 <HAL_RCC_OscConfig+0x8c0>)
 800686c:	4013      	ands	r3, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006876:	3a01      	subs	r2, #1
 8006878:	0112      	lsls	r2, r2, #4
 800687a:	4311      	orrs	r1, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006880:	0212      	lsls	r2, r2, #8
 8006882:	4311      	orrs	r1, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006888:	0852      	lsrs	r2, r2, #1
 800688a:	3a01      	subs	r2, #1
 800688c:	0552      	lsls	r2, r2, #21
 800688e:	4311      	orrs	r1, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006894:	0852      	lsrs	r2, r2, #1
 8006896:	3a01      	subs	r2, #1
 8006898:	0652      	lsls	r2, r2, #25
 800689a:	430a      	orrs	r2, r1
 800689c:	493b      	ldr	r1, [pc, #236]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068a2:	4b3a      	ldr	r3, [pc, #232]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a39      	ldr	r2, [pc, #228]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ac:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068ae:	4b37      	ldr	r3, [pc, #220]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4a36      	ldr	r2, [pc, #216]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068ba:	f7fc ff69 	bl	8003790 <HAL_GetTick>
 80068be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c2:	f7fc ff65 	bl	8003790 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e056      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068e0:	e04e      	b.n	8006980 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e04d      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d146      	bne.n	8006980 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a25      	ldr	r2, [pc, #148]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 80068f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068fc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068fe:	4b23      	ldr	r3, [pc, #140]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4a22      	ldr	r2, [pc, #136]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006908:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800690a:	f7fc ff41 	bl	8003790 <HAL_GetTick>
 800690e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006912:	f7fc ff3d 	bl	8003790 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e02e      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCC_OscConfig+0x842>
 8006930:	e026      	b.n	8006980 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d021      	beq.n	800697c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 800693e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fc ff24 	bl	8003790 <HAL_GetTick>
 8006948:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800694c:	f7fc ff20 	bl	8003790 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e011      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	4a07      	ldr	r2, [pc, #28]	; (800698c <HAL_RCC_OscConfig+0x8bc>)
 8006970:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	60d3      	str	r3, [r2, #12]
 800697a:	e001      	b.n	8006980 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3728      	adds	r7, #40	; 0x28
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40021000 	.word	0x40021000
 8006990:	f99f808c 	.word	0xf99f808c

08006994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0e7      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069a8:	4b75      	ldr	r3, [pc, #468]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d910      	bls.n	80069d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b6:	4b72      	ldr	r3, [pc, #456]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 0207 	bic.w	r2, r3, #7
 80069be:	4970      	ldr	r1, [pc, #448]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0cf      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d010      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	4b66      	ldr	r3, [pc, #408]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d908      	bls.n	8006a06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f4:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4960      	ldr	r1, [pc, #384]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d04c      	beq.n	8006aac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1a:	4b5a      	ldr	r3, [pc, #360]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d121      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e0a6      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d107      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a32:	4b54      	ldr	r3, [pc, #336]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d115      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e09a      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d107      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a4a:	4b4e      	ldr	r3, [pc, #312]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e08e      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a5a:	4b4a      	ldr	r3, [pc, #296]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e086      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a6a:	4b46      	ldr	r3, [pc, #280]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f023 0203 	bic.w	r2, r3, #3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	4943      	ldr	r1, [pc, #268]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7c:	f7fc fe88 	bl	8003790 <HAL_GetTick>
 8006a80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a84:	f7fc fe84 	bl	8003790 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e06e      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9a:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 020c 	and.w	r2, r3, #12
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d1eb      	bne.n	8006a84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d208      	bcs.n	8006ada <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	492b      	ldr	r1, [pc, #172]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ada:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d210      	bcs.n	8006b0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f023 0207 	bic.w	r2, r3, #7
 8006af0:	4923      	ldr	r1, [pc, #140]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af8:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <HAL_RCC_ClockConfig+0x1ec>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d001      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e036      	b.n	8006b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b16:	4b1b      	ldr	r3, [pc, #108]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4918      	ldr	r1, [pc, #96]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4910      	ldr	r1, [pc, #64]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b48:	f000 f824 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <HAL_RCC_ClockConfig+0x1f0>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	490b      	ldr	r1, [pc, #44]	; (8006b88 <HAL_RCC_ClockConfig+0x1f4>)
 8006b5a:	5ccb      	ldrb	r3, [r1, r3]
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_RCC_ClockConfig+0x1f8>)
 8006b66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1fc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fc fdbf 	bl	80036f0 <HAL_InitTick>
 8006b72:	4603      	mov	r3, r0
 8006b74:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b76:	7afb      	ldrb	r3, [r7, #11]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40022000 	.word	0x40022000
 8006b84:	40021000 	.word	0x40021000
 8006b88:	0800fdec 	.word	0x0800fdec
 8006b8c:	20000014 	.word	0x20000014
 8006b90:	20000018 	.word	0x20000018

08006b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b089      	sub	sp, #36	; 0x24
 8006b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ba2:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bac:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b0c      	cmp	r3, #12
 8006bc0:	d121      	bne.n	8006c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d11e      	bne.n	8006c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bc8:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d107      	bne.n	8006be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	e005      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006be4:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c04:	e00a      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d102      	bne.n	8006c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e004      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c18:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b0c      	cmp	r3, #12
 8006c20:	d134      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d003      	beq.n	8006c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d003      	beq.n	8006c40 <HAL_RCC_GetSysClockFreq+0xac>
 8006c38:	e005      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c3c:	617b      	str	r3, [r7, #20]
      break;
 8006c3e:	e005      	b.n	8006c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c42:	617b      	str	r3, [r7, #20]
      break;
 8006c44:	e002      	b.n	8006c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	617b      	str	r3, [r7, #20]
      break;
 8006c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c4c:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	3301      	adds	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	fb03 f202 	mul.w	r2, r3, r2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c72:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	0e5b      	lsrs	r3, r3, #25
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3724      	adds	r7, #36	; 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	0800fe04 	.word	0x0800fe04
 8006ca4:	00f42400 	.word	0x00f42400
 8006ca8:	007a1200 	.word	0x007a1200

08006cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cb0:	4b03      	ldr	r3, [pc, #12]	; (8006cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000014 	.word	0x20000014

08006cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cc8:	f7ff fff0 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	4904      	ldr	r1, [pc, #16]	; (8006cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cda:	5ccb      	ldrb	r3, [r1, r3]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	0800fdfc 	.word	0x0800fdfc

08006cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cf4:	f7ff ffda 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	0adb      	lsrs	r3, r3, #11
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	4904      	ldr	r1, [pc, #16]	; (8006d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d06:	5ccb      	ldrb	r3, [r1, r3]
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40021000 	.word	0x40021000
 8006d18:	0800fdfc 	.word	0x0800fdfc

08006d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d28:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d34:	f7ff f968 	bl	8006008 <HAL_PWREx_GetVoltageRange>
 8006d38:	6178      	str	r0, [r7, #20]
 8006d3a:	e014      	b.n	8006d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d46:	6593      	str	r3, [r2, #88]	; 0x58
 8006d48:	4b22      	ldr	r3, [pc, #136]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d54:	f7ff f958 	bl	8006008 <HAL_PWREx_GetVoltageRange>
 8006d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d5a:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d10b      	bne.n	8006d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d919      	bls.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2ba0      	cmp	r3, #160	; 0xa0
 8006d78:	d902      	bls.n	8006d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	e013      	b.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d80:	2301      	movs	r3, #1
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	e010      	b.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b80      	cmp	r3, #128	; 0x80
 8006d8a:	d902      	bls.n	8006d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e00a      	b.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d102      	bne.n	8006d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d98:	2302      	movs	r3, #2
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e004      	b.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b70      	cmp	r3, #112	; 0x70
 8006da2:	d101      	bne.n	8006da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006da4:	2301      	movs	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006da8:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f023 0207 	bic.w	r2, r3, #7
 8006db0:	4909      	ldr	r1, [pc, #36]	; (8006dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d001      	beq.n	8006dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	40022000 	.word	0x40022000

08006ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006de4:	2300      	movs	r3, #0
 8006de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006de8:	2300      	movs	r3, #0
 8006dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 809e 	beq.w	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dfe:	4b46      	ldr	r3, [pc, #280]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4b40      	ldr	r3, [pc, #256]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	4a3f      	ldr	r2, [pc, #252]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e20:	4b3d      	ldr	r3, [pc, #244]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e30:	4b3a      	ldr	r3, [pc, #232]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a39      	ldr	r2, [pc, #228]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e3c:	f7fc fca8 	bl	8003790 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e42:	e009      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e44:	f7fc fca4 	bl	8003790 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d902      	bls.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	74fb      	strb	r3, [r7, #19]
        break;
 8006e56:	e005      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e58:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ef      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006e64:	7cfb      	ldrb	r3, [r7, #19]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15a      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01e      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d019      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e86:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e98:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea8:	4a1b      	ldr	r2, [pc, #108]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006eb2:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d016      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fc fc64 	bl	8003790 <HAL_GetTick>
 8006ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ecc:	f7fc fc60 	bl	8003790 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d902      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8006ee2:	e006      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0ec      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006ef2:	7cfb      	ldrb	r3, [r7, #19]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4904      	ldr	r1, [pc, #16]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f0e:	e009      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f10:	7cfb      	ldrb	r3, [r7, #19]
 8006f12:	74bb      	strb	r3, [r7, #18]
 8006f14:	e006      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f24:	7c7b      	ldrb	r3, [r7, #17]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2a:	4b6e      	ldr	r3, [pc, #440]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	4a6d      	ldr	r2, [pc, #436]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f42:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f48:	f023 0203 	bic.w	r2, r3, #3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4964      	ldr	r1, [pc, #400]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f64:	4b5f      	ldr	r3, [pc, #380]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6a:	f023 020c 	bic.w	r2, r3, #12
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	495c      	ldr	r1, [pc, #368]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f86:	4b57      	ldr	r3, [pc, #348]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4953      	ldr	r1, [pc, #332]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fa8:	4b4e      	ldr	r3, [pc, #312]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	494b      	ldr	r1, [pc, #300]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fca:	4b46      	ldr	r3, [pc, #280]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	4942      	ldr	r1, [pc, #264]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fec:	4b3d      	ldr	r3, [pc, #244]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	493a      	ldr	r1, [pc, #232]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800700e:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	4931      	ldr	r1, [pc, #196]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007030:	4b2c      	ldr	r3, [pc, #176]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	4929      	ldr	r1, [pc, #164]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007052:	4b24      	ldr	r3, [pc, #144]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	4920      	ldr	r1, [pc, #128]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	4918      	ldr	r1, [pc, #96]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007092:	d105      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007094:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800709a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800709e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d015      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	490a      	ldr	r1, [pc, #40]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ca:	d105      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80070d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80070d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40021000 	.word	0x40021000

080070e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e049      	b.n	800718e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fc f806 	bl	8003120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f001 f96a 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d001      	beq.n	80071b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e03b      	b.n	8007228 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0201 	orr.w	r2, r2, #1
 80071c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a19      	ldr	r2, [pc, #100]	; (8007234 <HAL_TIM_Base_Start_IT+0x9c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x4e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x4e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a15      	ldr	r2, [pc, #84]	; (8007238 <HAL_TIM_Base_Start_IT+0xa0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d115      	bne.n	8007212 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	4b13      	ldr	r3, [pc, #76]	; (800723c <HAL_TIM_Base_Start_IT+0xa4>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b06      	cmp	r3, #6
 80071f6:	d015      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0x8c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fe:	d011      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	e008      	b.n	8007224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e000      	b.n	8007226 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40014000 	.word	0x40014000
 800723c:	00010007 	.word	0x00010007

08007240 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007262:	4013      	ands	r3, r2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10f      	bne.n	8007288 <HAL_TIM_Base_Stop_IT+0x48>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	f240 4344 	movw	r3, #1092	; 0x444
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_TIM_Base_Stop_IT+0x48>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e049      	b.n	8007344 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7fb fea3 	bl	8003010 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3304      	adds	r3, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f001 f88f 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_TIM_OC_Start_DMA+0x2c>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	e03c      	b.n	80073f2 <HAL_TIM_OC_Start_DMA+0xa6>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b04      	cmp	r3, #4
 800737c:	d109      	bne.n	8007392 <HAL_TIM_OC_Start_DMA+0x46>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e02f      	b.n	80073f2 <HAL_TIM_OC_Start_DMA+0xa6>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d109      	bne.n	80073ac <HAL_TIM_OC_Start_DMA+0x60>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	bf0c      	ite	eq
 80073a4:	2301      	moveq	r3, #1
 80073a6:	2300      	movne	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e022      	b.n	80073f2 <HAL_TIM_OC_Start_DMA+0xa6>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b0c      	cmp	r3, #12
 80073b0:	d109      	bne.n	80073c6 <HAL_TIM_OC_Start_DMA+0x7a>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	bf0c      	ite	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	2300      	movne	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e015      	b.n	80073f2 <HAL_TIM_OC_Start_DMA+0xa6>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	d109      	bne.n	80073e0 <HAL_TIM_OC_Start_DMA+0x94>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e008      	b.n	80073f2 <HAL_TIM_OC_Start_DMA+0xa6>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	bf0c      	ite	eq
 80073ec:	2301      	moveq	r3, #1
 80073ee:	2300      	movne	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
 80073f8:	e18d      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_TIM_OC_Start_DMA+0xc8>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e03c      	b.n	800748e <HAL_TIM_OC_Start_DMA+0x142>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d109      	bne.n	800742e <HAL_TIM_OC_Start_DMA+0xe2>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	bf0c      	ite	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	2300      	movne	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e02f      	b.n	800748e <HAL_TIM_OC_Start_DMA+0x142>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d109      	bne.n	8007448 <HAL_TIM_OC_Start_DMA+0xfc>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e022      	b.n	800748e <HAL_TIM_OC_Start_DMA+0x142>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b0c      	cmp	r3, #12
 800744c:	d109      	bne.n	8007462 <HAL_TIM_OC_Start_DMA+0x116>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b01      	cmp	r3, #1
 8007458:	bf0c      	ite	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	2300      	movne	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	e015      	b.n	800748e <HAL_TIM_OC_Start_DMA+0x142>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b10      	cmp	r3, #16
 8007466:	d109      	bne.n	800747c <HAL_TIM_OC_Start_DMA+0x130>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b01      	cmp	r3, #1
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	e008      	b.n	800748e <HAL_TIM_OC_Start_DMA+0x142>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d034      	beq.n	80074fc <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_TIM_OC_Start_DMA+0x152>
 8007498:	887b      	ldrh	r3, [r7, #2]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e139      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x166>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074b0:	e026      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_OC_Start_DMA+0x176>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c0:	e01e      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_OC_Start_DMA+0x186>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	e016      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_OC_Start_DMA+0x196>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074e0:	e00e      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_OC_Start_DMA+0x1a6>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f0:	e006      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074fa:	e001      	b.n	8007500 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e10a      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	f200 80ae 	bhi.w	8007664 <HAL_TIM_OC_Start_DMA+0x318>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <HAL_TIM_OC_Start_DMA+0x1c4>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007545 	.word	0x08007545
 8007514:	08007665 	.word	0x08007665
 8007518:	08007665 	.word	0x08007665
 800751c:	08007665 	.word	0x08007665
 8007520:	0800758d 	.word	0x0800758d
 8007524:	08007665 	.word	0x08007665
 8007528:	08007665 	.word	0x08007665
 800752c:	08007665 	.word	0x08007665
 8007530:	080075d5 	.word	0x080075d5
 8007534:	08007665 	.word	0x08007665
 8007538:	08007665 	.word	0x08007665
 800753c:	08007665 	.word	0x08007665
 8007540:	0800761d 	.word	0x0800761d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	4a75      	ldr	r2, [pc, #468]	; (8007720 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800754a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	4a74      	ldr	r2, [pc, #464]	; (8007724 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8007552:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	4a73      	ldr	r2, [pc, #460]	; (8007728 <HAL_TIM_OC_Start_DMA+0x3dc>)
 800755a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3334      	adds	r3, #52	; 0x34
 8007568:	461a      	mov	r2, r3
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	f7fd ff6a 	bl	8005444 <HAL_DMA_Start_IT>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e0cd      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007588:	60da      	str	r2, [r3, #12]
      break;
 800758a:	e06e      	b.n	800766a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	4a63      	ldr	r2, [pc, #396]	; (8007720 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8007592:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	4a62      	ldr	r2, [pc, #392]	; (8007724 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800759a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	4a61      	ldr	r2, [pc, #388]	; (8007728 <HAL_TIM_OC_Start_DMA+0x3dc>)
 80075a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3338      	adds	r3, #56	; 0x38
 80075b0:	461a      	mov	r2, r3
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	f7fd ff46 	bl	8005444 <HAL_DMA_Start_IT>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e0a9      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075d0:	60da      	str	r2, [r3, #12]
      break;
 80075d2:	e04a      	b.n	800766a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a51      	ldr	r2, [pc, #324]	; (8007720 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	4a50      	ldr	r2, [pc, #320]	; (8007724 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4a4f      	ldr	r2, [pc, #316]	; (8007728 <HAL_TIM_OC_Start_DMA+0x3dc>)
 80075ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	333c      	adds	r3, #60	; 0x3c
 80075f8:	461a      	mov	r2, r3
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	f7fd ff22 	bl	8005444 <HAL_DMA_Start_IT>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e085      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007618:	60da      	str	r2, [r3, #12]
      break;
 800761a:	e026      	b.n	800766a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	4a3f      	ldr	r2, [pc, #252]	; (8007720 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800762a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	4a3d      	ldr	r2, [pc, #244]	; (8007728 <HAL_TIM_OC_Start_DMA+0x3dc>)
 8007632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3340      	adds	r3, #64	; 0x40
 8007640:	461a      	mov	r2, r3
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	f7fd fefe 	bl	8005444 <HAL_DMA_Start_IT>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e061      	b.n	8007716 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007660:	60da      	str	r2, [r3, #12]
      break;
 8007662:	e002      	b.n	800766a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	bf00      	nop
  }

  if (status == HAL_OK)
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d151      	bne.n	8007714 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2201      	movs	r2, #1
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f9a3 	bl	80089c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a2a      	ldr	r2, [pc, #168]	; (800772c <HAL_TIM_OC_Start_DMA+0x3e0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <HAL_TIM_OC_Start_DMA+0x350>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a28      	ldr	r2, [pc, #160]	; (8007730 <HAL_TIM_OC_Start_DMA+0x3e4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_TIM_OC_Start_DMA+0x350>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a27      	ldr	r2, [pc, #156]	; (8007734 <HAL_TIM_OC_Start_DMA+0x3e8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d101      	bne.n	80076a0 <HAL_TIM_OC_Start_DMA+0x354>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_TIM_OC_Start_DMA+0x356>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <HAL_TIM_OC_Start_DMA+0x3e0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d009      	beq.n	80076d4 <HAL_TIM_OC_Start_DMA+0x388>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c8:	d004      	beq.n	80076d4 <HAL_TIM_OC_Start_DMA+0x388>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <HAL_TIM_OC_Start_DMA+0x3e4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d115      	bne.n	8007700 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <HAL_TIM_OC_Start_DMA+0x3ec>)
 80076dc:	4013      	ands	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b06      	cmp	r3, #6
 80076e4:	d015      	beq.n	8007712 <HAL_TIM_OC_Start_DMA+0x3c6>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ec:	d011      	beq.n	8007712 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fe:	e008      	b.n	8007712 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e000      	b.n	8007714 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007712:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	080082ef 	.word	0x080082ef
 8007724:	08008397 	.word	0x08008397
 8007728:	0800825d 	.word	0x0800825d
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	00010007 	.word	0x00010007

0800773c <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b0c      	cmp	r3, #12
 800774e:	d855      	bhi.n	80077fc <HAL_TIM_OC_Stop_DMA+0xc0>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <HAL_TIM_OC_Stop_DMA+0x1c>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	0800778d 	.word	0x0800778d
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077fd 	.word	0x080077fd
 8007764:	080077fd 	.word	0x080077fd
 8007768:	080077a9 	.word	0x080077a9
 800776c:	080077fd 	.word	0x080077fd
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077fd 	.word	0x080077fd
 8007778:	080077c5 	.word	0x080077c5
 800777c:	080077fd 	.word	0x080077fd
 8007780:	080077fd 	.word	0x080077fd
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077e1 	.word	0x080077e1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800779a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fd feed 	bl	8005580 <HAL_DMA_Abort_IT>
      break;
 80077a6:	e02c      	b.n	8007802 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fd fedf 	bl	8005580 <HAL_DMA_Abort_IT>
      break;
 80077c2:	e01e      	b.n	8007802 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd fed1 	bl	8005580 <HAL_DMA_Abort_IT>
      break;
 80077de:	e010      	b.n	8007802 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fd fec3 	bl	8005580 <HAL_DMA_Abort_IT>
      break;
 80077fa:	e002      	b.n	8007802 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	bf00      	nop
  }

  if (status == HAL_OK)
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d176      	bne.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2200      	movs	r2, #0
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f8d7 	bl	80089c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a39      	ldr	r2, [pc, #228]	; (8007900 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d009      	beq.n	8007834 <HAL_TIM_OC_Stop_DMA+0xf8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a37      	ldr	r2, [pc, #220]	; (8007904 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_TIM_OC_Stop_DMA+0xf8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a36      	ldr	r2, [pc, #216]	; (8007908 <HAL_TIM_OC_Stop_DMA+0x1cc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d101      	bne.n	8007838 <HAL_TIM_OC_Stop_DMA+0xfc>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <HAL_TIM_OC_Stop_DMA+0xfe>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d017      	beq.n	800786e <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	f241 1311 	movw	r3, #4369	; 0x1111
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10f      	bne.n	800786e <HAL_TIM_OC_Stop_DMA+0x132>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	f240 4344 	movw	r3, #1092	; 0x444
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <HAL_TIM_OC_Stop_DMA+0x132>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800786c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6a1a      	ldr	r2, [r3, #32]
 8007874:	f241 1311 	movw	r3, #4369	; 0x1111
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_TIM_OC_Stop_DMA+0x162>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	f240 4344 	movw	r3, #1092	; 0x444
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d107      	bne.n	800789e <HAL_TIM_OC_Stop_DMA+0x162>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_OC_Stop_DMA+0x172>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ac:	e023      	b.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d104      	bne.n	80078be <HAL_TIM_OC_Stop_DMA+0x182>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078bc:	e01b      	b.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d104      	bne.n	80078ce <HAL_TIM_OC_Stop_DMA+0x192>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078cc:	e013      	b.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d104      	bne.n	80078de <HAL_TIM_OC_Stop_DMA+0x1a2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078dc:	e00b      	b.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_OC_Stop_DMA+0x1b2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ec:	e003      	b.n	80078f6 <HAL_TIM_OC_Stop_DMA+0x1ba>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400

0800790c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e049      	b.n	80079b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fb fb46 	bl	8002fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f000 fd58 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <HAL_TIM_PWM_Start+0x24>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e03c      	b.n	8007a5a <HAL_TIM_PWM_Start+0x9e>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d109      	bne.n	80079fa <HAL_TIM_PWM_Start+0x3e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	bf14      	ite	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	2300      	moveq	r3, #0
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	e02f      	b.n	8007a5a <HAL_TIM_PWM_Start+0x9e>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d109      	bne.n	8007a14 <HAL_TIM_PWM_Start+0x58>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e022      	b.n	8007a5a <HAL_TIM_PWM_Start+0x9e>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	d109      	bne.n	8007a2e <HAL_TIM_PWM_Start+0x72>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	bf14      	ite	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	2300      	moveq	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	e015      	b.n	8007a5a <HAL_TIM_PWM_Start+0x9e>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d109      	bne.n	8007a48 <HAL_TIM_PWM_Start+0x8c>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e008      	b.n	8007a5a <HAL_TIM_PWM_Start+0x9e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	bf14      	ite	ne
 8007a54:	2301      	movne	r3, #1
 8007a56:	2300      	moveq	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e07e      	b.n	8007b60 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_PWM_Start+0xb6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a70:	e023      	b.n	8007aba <HAL_TIM_PWM_Start+0xfe>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_PWM_Start+0xc6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a80:	e01b      	b.n	8007aba <HAL_TIM_PWM_Start+0xfe>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d104      	bne.n	8007a92 <HAL_TIM_PWM_Start+0xd6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a90:	e013      	b.n	8007aba <HAL_TIM_PWM_Start+0xfe>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	d104      	bne.n	8007aa2 <HAL_TIM_PWM_Start+0xe6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aa0:	e00b      	b.n	8007aba <HAL_TIM_PWM_Start+0xfe>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d104      	bne.n	8007ab2 <HAL_TIM_PWM_Start+0xf6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ab0:	e003      	b.n	8007aba <HAL_TIM_PWM_Start+0xfe>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 ff7e 	bl	80089c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a26      	ldr	r2, [pc, #152]	; (8007b68 <HAL_TIM_PWM_Start+0x1ac>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0x12a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a25      	ldr	r2, [pc, #148]	; (8007b6c <HAL_TIM_PWM_Start+0x1b0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0x12a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a23      	ldr	r2, [pc, #140]	; (8007b70 <HAL_TIM_PWM_Start+0x1b4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_PWM_Start+0x12e>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_PWM_Start+0x130>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <HAL_TIM_PWM_Start+0x1ac>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_TIM_PWM_Start+0x162>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d004      	beq.n	8007b1e <HAL_TIM_PWM_Start+0x162>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a14      	ldr	r2, [pc, #80]	; (8007b6c <HAL_TIM_PWM_Start+0x1b0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d115      	bne.n	8007b4a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <HAL_TIM_PWM_Start+0x1b8>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b06      	cmp	r3, #6
 8007b2e:	d015      	beq.n	8007b5c <HAL_TIM_PWM_Start+0x1a0>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b36:	d011      	beq.n	8007b5c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b48:	e008      	b.n	8007b5c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e000      	b.n	8007b5e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	00010007 	.word	0x00010007

08007b78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2200      	movs	r2, #0
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff1a 	bl	80089c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a39      	ldr	r2, [pc, #228]	; (8007c7c <HAL_TIM_PWM_Stop+0x104>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIM_PWM_Stop+0x36>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a38      	ldr	r2, [pc, #224]	; (8007c80 <HAL_TIM_PWM_Stop+0x108>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_PWM_Stop+0x36>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a36      	ldr	r2, [pc, #216]	; (8007c84 <HAL_TIM_PWM_Stop+0x10c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <HAL_TIM_PWM_Stop+0x3a>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <HAL_TIM_PWM_Stop+0x3c>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10f      	bne.n	8007be8 <HAL_TIM_PWM_Stop+0x70>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	f240 4344 	movw	r3, #1092	; 0x444
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <HAL_TIM_PWM_Stop+0x70>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10f      	bne.n	8007c18 <HAL_TIM_PWM_Stop+0xa0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	f240 4344 	movw	r3, #1092	; 0x444
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <HAL_TIM_PWM_Stop+0xa0>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d104      	bne.n	8007c28 <HAL_TIM_PWM_Stop+0xb0>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c26:	e023      	b.n	8007c70 <HAL_TIM_PWM_Stop+0xf8>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d104      	bne.n	8007c38 <HAL_TIM_PWM_Stop+0xc0>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c36:	e01b      	b.n	8007c70 <HAL_TIM_PWM_Stop+0xf8>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d104      	bne.n	8007c48 <HAL_TIM_PWM_Stop+0xd0>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c46:	e013      	b.n	8007c70 <HAL_TIM_PWM_Stop+0xf8>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b0c      	cmp	r3, #12
 8007c4c:	d104      	bne.n	8007c58 <HAL_TIM_PWM_Stop+0xe0>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c56:	e00b      	b.n	8007c70 <HAL_TIM_PWM_Stop+0xf8>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d104      	bne.n	8007c68 <HAL_TIM_PWM_Stop+0xf0>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c66:	e003      	b.n	8007c70 <HAL_TIM_PWM_Stop+0xf8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400

08007c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d122      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d11b      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0202 	mvn.w	r2, #2
 8007cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa94 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007cd0:	e005      	b.n	8007cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa86 	bl	80081e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa97 	bl	800820c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d122      	bne.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d11b      	bne.n	8007d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0204 	mvn.w	r2, #4
 8007d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa6a 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa5c 	bl	80081e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa6d 	bl	800820c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d122      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d11b      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0208 	mvn.w	r2, #8
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa40 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa32 	bl	80081e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa43 	bl	800820c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0210 	mvn.w	r2, #16
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2208      	movs	r2, #8
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa16 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa08 	bl	80081e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa19 	bl	800820c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0201 	mvn.w	r2, #1
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7f9 ffa6 	bl	8001d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e16:	2b80      	cmp	r3, #128	; 0x80
 8007e18:	d10e      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d107      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fed4 	bl	8008be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	d10e      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d107      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fec7 	bl	8008bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	d10e      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d107      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9d1 	bl	8008234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d10e      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d107      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f06f 0220 	mvn.w	r2, #32
 8007eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fe87 	bl	8008bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e066      	b.n	8007fb4 <HAL_TIM_OC_ConfigChannel+0xec>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b14      	cmp	r3, #20
 8007ef2:	d857      	bhi.n	8007fa4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <HAL_TIM_OC_ConfigChannel+0x34>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fa5 	.word	0x08007fa5
 8007f08:	08007fa5 	.word	0x08007fa5
 8007f0c:	08007f5f 	.word	0x08007f5f
 8007f10:	08007fa5 	.word	0x08007fa5
 8007f14:	08007fa5 	.word	0x08007fa5
 8007f18:	08007fa5 	.word	0x08007fa5
 8007f1c:	08007f6d 	.word	0x08007f6d
 8007f20:	08007fa5 	.word	0x08007fa5
 8007f24:	08007fa5 	.word	0x08007fa5
 8007f28:	08007fa5 	.word	0x08007fa5
 8007f2c:	08007f7b 	.word	0x08007f7b
 8007f30:	08007fa5 	.word	0x08007fa5
 8007f34:	08007fa5 	.word	0x08007fa5
 8007f38:	08007fa5 	.word	0x08007fa5
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007fa5 	.word	0x08007fa5
 8007f44:	08007fa5 	.word	0x08007fa5
 8007f48:	08007fa5 	.word	0x08007fa5
 8007f4c:	08007f97 	.word	0x08007f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fab6 	bl	80084c8 <TIM_OC1_SetConfig>
      break;
 8007f5c:	e025      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fb2b 	bl	80085c0 <TIM_OC2_SetConfig>
      break;
 8007f6a:	e01e      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fb9e 	bl	80086b4 <TIM_OC3_SetConfig>
      break;
 8007f78:	e017      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fc0f 	bl	80087a4 <TIM_OC4_SetConfig>
      break;
 8007f86:	e010      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fc66 	bl	8008860 <TIM_OC5_SetConfig>
      break;
 8007f94:	e009      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fcb7 	bl	8008910 <TIM_OC6_SetConfig>
      break;
 8007fa2:	e002      	b.n	8007faa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e0ff      	b.n	80081da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b14      	cmp	r3, #20
 8007fe6:	f200 80f0 	bhi.w	80081ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	080081cb 	.word	0x080081cb
 8007ff8:	080081cb 	.word	0x080081cb
 8007ffc:	080081cb 	.word	0x080081cb
 8008000:	08008085 	.word	0x08008085
 8008004:	080081cb 	.word	0x080081cb
 8008008:	080081cb 	.word	0x080081cb
 800800c:	080081cb 	.word	0x080081cb
 8008010:	080080c7 	.word	0x080080c7
 8008014:	080081cb 	.word	0x080081cb
 8008018:	080081cb 	.word	0x080081cb
 800801c:	080081cb 	.word	0x080081cb
 8008020:	08008107 	.word	0x08008107
 8008024:	080081cb 	.word	0x080081cb
 8008028:	080081cb 	.word	0x080081cb
 800802c:	080081cb 	.word	0x080081cb
 8008030:	08008149 	.word	0x08008149
 8008034:	080081cb 	.word	0x080081cb
 8008038:	080081cb 	.word	0x080081cb
 800803c:	080081cb 	.word	0x080081cb
 8008040:	08008189 	.word	0x08008189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fa3c 	bl	80084c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0208 	orr.w	r2, r2, #8
 800805e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0204 	bic.w	r2, r2, #4
 800806e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6999      	ldr	r1, [r3, #24]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	619a      	str	r2, [r3, #24]
      break;
 8008082:	e0a5      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fa98 	bl	80085c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800809e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699a      	ldr	r2, [r3, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6999      	ldr	r1, [r3, #24]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	021a      	lsls	r2, r3, #8
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	619a      	str	r2, [r3, #24]
      break;
 80080c4:	e084      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 faf1 	bl	80086b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0208 	orr.w	r2, r2, #8
 80080e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0204 	bic.w	r2, r2, #4
 80080f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69d9      	ldr	r1, [r3, #28]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	61da      	str	r2, [r3, #28]
      break;
 8008104:	e064      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fb49 	bl	80087a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69da      	ldr	r2, [r3, #28]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69d9      	ldr	r1, [r3, #28]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	021a      	lsls	r2, r3, #8
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	61da      	str	r2, [r3, #28]
      break;
 8008146:	e043      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fb86 	bl	8008860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0208 	orr.w	r2, r2, #8
 8008162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0204 	bic.w	r2, r2, #4
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008186:	e023      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fbbe 	bl	8008910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	021a      	lsls	r2, r3, #8
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081c8:	e002      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
      break;
 80081ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop

080081e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d107      	bne.n	8008284 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008282:	e02a      	b.n	80082da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d107      	bne.n	800829e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2202      	movs	r2, #2
 8008292:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800829c:	e01d      	b.n	80082da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d107      	bne.n	80082b8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2204      	movs	r2, #4
 80082ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b6:	e010      	b.n	80082da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d107      	bne.n	80082d2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2208      	movs	r2, #8
 80082c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082d0:	e003      	b.n	80082da <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff ffb4 	bl	8008248 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	771a      	strb	r2, [r3, #28]
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d10b      	bne.n	800831e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d136      	bne.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800831c:	e031      	b.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d10b      	bne.n	8008340 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2202      	movs	r2, #2
 800832c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d125      	bne.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800833e:	e020      	b.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d10b      	bne.n	8008362 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2204      	movs	r2, #4
 800834e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d114      	bne.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008360:	e00f      	b.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d10a      	bne.n	8008382 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2208      	movs	r2, #8
 8008370:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff ff42 	bl	800820c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	771a      	strb	r2, [r3, #28]
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d103      	bne.n	80083b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	771a      	strb	r2, [r3, #28]
 80083b4:	e019      	b.n	80083ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d103      	bne.n	80083c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2202      	movs	r2, #2
 80083c4:	771a      	strb	r2, [r3, #28]
 80083c6:	e010      	b.n	80083ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d103      	bne.n	80083da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2204      	movs	r2, #4
 80083d6:	771a      	strb	r2, [r3, #28]
 80083d8:	e007      	b.n	80083ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d102      	bne.n	80083ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2208      	movs	r2, #8
 80083e8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff18 	bl	8008220 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	771a      	strb	r2, [r3, #28]
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a2a      	ldr	r2, [pc, #168]	; (80084bc <TIM_Base_SetConfig+0xbc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d003      	beq.n	8008420 <TIM_Base_SetConfig+0x20>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841e:	d108      	bne.n	8008432 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a21      	ldr	r2, [pc, #132]	; (80084bc <TIM_Base_SetConfig+0xbc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00b      	beq.n	8008452 <TIM_Base_SetConfig+0x52>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008440:	d007      	beq.n	8008452 <TIM_Base_SetConfig+0x52>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a1e      	ldr	r2, [pc, #120]	; (80084c0 <TIM_Base_SetConfig+0xc0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d003      	beq.n	8008452 <TIM_Base_SetConfig+0x52>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <TIM_Base_SetConfig+0xc4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d108      	bne.n	8008464 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0c      	ldr	r2, [pc, #48]	; (80084bc <TIM_Base_SetConfig+0xbc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_Base_SetConfig+0xa0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <TIM_Base_SetConfig+0xc0>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0xa0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a0a      	ldr	r2, [pc, #40]	; (80084c4 <TIM_Base_SetConfig+0xc4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d103      	bne.n	80084a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	615a      	str	r2, [r3, #20]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40012c00 	.word	0x40012c00
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400

080084c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0302 	bic.w	r3, r3, #2
 8008514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <TIM_OC1_SetConfig+0xec>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <TIM_OC1_SetConfig+0x70>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <TIM_OC1_SetConfig+0xf0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d003      	beq.n	8008538 <TIM_OC1_SetConfig+0x70>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a22      	ldr	r2, [pc, #136]	; (80085bc <TIM_OC1_SetConfig+0xf4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d10c      	bne.n	8008552 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f023 0308 	bic.w	r3, r3, #8
 800853e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 0304 	bic.w	r3, r3, #4
 8008550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <TIM_OC1_SetConfig+0xec>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_OC1_SetConfig+0xa2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a16      	ldr	r2, [pc, #88]	; (80085b8 <TIM_OC1_SetConfig+0xf0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_OC1_SetConfig+0xa2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <TIM_OC1_SetConfig+0xf4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d111      	bne.n	800858e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	4313      	orrs	r3, r2
 800858c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	621a      	str	r2, [r3, #32]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40012c00 	.word	0x40012c00
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400

080085c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0210 	bic.w	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0320 	bic.w	r3, r3, #32
 800860e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a22      	ldr	r2, [pc, #136]	; (80086a8 <TIM_OC2_SetConfig+0xe8>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d10d      	bne.n	8008640 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800863e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <TIM_OC2_SetConfig+0xe8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d007      	beq.n	8008658 <TIM_OC2_SetConfig+0x98>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a18      	ldr	r2, [pc, #96]	; (80086ac <TIM_OC2_SetConfig+0xec>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_OC2_SetConfig+0x98>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a17      	ldr	r2, [pc, #92]	; (80086b0 <TIM_OC2_SetConfig+0xf0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d113      	bne.n	8008680 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800865e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	40012c00 	.word	0x40012c00
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400

080086b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a21      	ldr	r2, [pc, #132]	; (8008798 <TIM_OC3_SetConfig+0xe4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10d      	bne.n	8008732 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800871c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a18      	ldr	r2, [pc, #96]	; (8008798 <TIM_OC3_SetConfig+0xe4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d007      	beq.n	800874a <TIM_OC3_SetConfig+0x96>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a17      	ldr	r2, [pc, #92]	; (800879c <TIM_OC3_SetConfig+0xe8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_OC3_SetConfig+0x96>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <TIM_OC3_SetConfig+0xec>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d113      	bne.n	8008772 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40014000 	.word	0x40014000
 80087a0:	40014400 	.word	0x40014400

080087a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	031b      	lsls	r3, r3, #12
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a14      	ldr	r2, [pc, #80]	; (8008854 <TIM_OC4_SetConfig+0xb0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_OC4_SetConfig+0x74>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a13      	ldr	r2, [pc, #76]	; (8008858 <TIM_OC4_SetConfig+0xb4>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_OC4_SetConfig+0x74>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a12      	ldr	r2, [pc, #72]	; (800885c <TIM_OC4_SetConfig+0xb8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d109      	bne.n	800882c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800881e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	019b      	lsls	r3, r3, #6
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	621a      	str	r2, [r3, #32]
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400

08008860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <TIM_OC5_SetConfig+0xa4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <TIM_OC5_SetConfig+0x6a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a12      	ldr	r2, [pc, #72]	; (8008908 <TIM_OC5_SetConfig+0xa8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_OC5_SetConfig+0x6a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a11      	ldr	r2, [pc, #68]	; (800890c <TIM_OC5_SetConfig+0xac>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d109      	bne.n	80088de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	621a      	str	r2, [r3, #32]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40014000 	.word	0x40014000
 800890c:	40014400 	.word	0x40014400

08008910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800893e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	051b      	lsls	r3, r3, #20
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <TIM_OC6_SetConfig+0xa8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d007      	beq.n	800897c <TIM_OC6_SetConfig+0x6c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a13      	ldr	r2, [pc, #76]	; (80089bc <TIM_OC6_SetConfig+0xac>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <TIM_OC6_SetConfig+0x6c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a12      	ldr	r2, [pc, #72]	; (80089c0 <TIM_OC6_SetConfig+0xb0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d109      	bne.n	8008990 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	029b      	lsls	r3, r3, #10
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	621a      	str	r2, [r3, #32]
}
 80089aa:	bf00      	nop
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40014400 	.word	0x40014400

080089c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 031f 	and.w	r3, r3, #31
 80089d6:	2201      	movs	r2, #1
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	401a      	ands	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1a      	ldr	r2, [r3, #32]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	fa01 f303 	lsl.w	r3, r1, r3
 80089fc:	431a      	orrs	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	621a      	str	r2, [r3, #32]
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e04f      	b.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d108      	bne.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d009      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a90:	d004      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10c      	bne.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40014000 	.word	0x40014000

08008adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e060      	b.n	8008bba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a14      	ldr	r2, [pc, #80]	; (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d115      	bne.n	8008ba8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	051b      	lsls	r3, r3, #20
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40012c00 	.word	0x40012c00

08008bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e040      	b.n	8008c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fa fb18 	bl	8003260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2224      	movs	r2, #36	; 0x24
 8008c34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0201 	bic.w	r2, r2, #1
 8008c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fcea 	bl	8009620 <UART_SetConfig>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e022      	b.n	8008c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 ff38 	bl	8009ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0201 	orr.w	r2, r2, #1
 8008c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 ffbf 	bl	8009c18 <UART_CheckIdleState>
 8008c9a:	4603      	mov	r3, r0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	; 0x28
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	f040 8082 	bne.w	8008dc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_UART_Transmit+0x26>
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e07a      	b.n	8008dc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_UART_Transmit+0x38>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e073      	b.n	8008dc4 <HAL_UART_Transmit+0x120>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2221      	movs	r2, #33	; 0x21
 8008cf0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cf2:	f7fa fd4d 	bl	8003790 <HAL_GetTick>
 8008cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	88fa      	ldrh	r2, [r7, #6]
 8008d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d10:	d108      	bne.n	8008d24 <HAL_UART_Transmit+0x80>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	e003      	b.n	8008d2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008d34:	e02d      	b.n	8008d92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2180      	movs	r1, #128	; 0x80
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 ffb2 	bl	8009caa <UART_WaitOnFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e039      	b.n	8008dc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d62:	b292      	uxth	r2, r2
 8008d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	61bb      	str	r3, [r7, #24]
 8008d6c:	e008      	b.n	8008d80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	b292      	uxth	r2, r2
 8008d78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1cb      	bne.n	8008d36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2200      	movs	r2, #0
 8008da6:	2140      	movs	r1, #64	; 0x40
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 ff7e 	bl	8009caa <UART_WaitOnFlagUntilTimeout>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e005      	b.n	8008dc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008dc2:	2302      	movs	r3, #2
  }
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d142      	bne.n	8008e68 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_UART_Receive_IT+0x22>
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e03b      	b.n	8008e6a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_UART_Receive_IT+0x34>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e034      	b.n	8008e6a <HAL_UART_Receive_IT+0x9e>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <HAL_UART_Receive_IT+0xa8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01f      	beq.n	8008e58 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d018      	beq.n	8008e58 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	613b      	str	r3, [r7, #16]
   return(result);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	623b      	str	r3, [r7, #32]
 8008e46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	69f9      	ldr	r1, [r7, #28]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 ffe8 	bl	8009e34 <UART_Start_Receive_IT>
 8008e64:	4603      	mov	r3, r0
 8008e66:	e000      	b.n	8008e6a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40008000 	.word	0x40008000

08008e78 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b09a      	sub	sp, #104	; 0x68
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e94:	667b      	str	r3, [r7, #100]	; 0x64
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed2:	643a      	str	r2, [r7, #64]	; 0x40
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d118      	bne.n	8008f20 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f023 0310 	bic.w	r3, r3, #16
 8008f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2a:	2b40      	cmp	r3, #64	; 0x40
 8008f2c:	d150      	bne.n	8008fd0 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f4e:	61ba      	str	r2, [r7, #24]
 8008f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6979      	ldr	r1, [r7, #20]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e5      	bne.n	8008f2e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d013      	beq.n	8008f92 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	4a25      	ldr	r2, [pc, #148]	; (8009004 <HAL_UART_AbortReceive_IT+0x18c>)
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fc fb02 	bl	8005580 <HAL_DMA_Abort_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d03a      	beq.n	8008ff8 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4798      	blx	r3
 8008f90:	e032      	b.n	8008ff8 <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	220f      	movs	r2, #15
 8008fa6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	8b1b      	ldrh	r3, [r3, #24]
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f042 0208 	orr.w	r2, r2, #8
 8008fb8:	b292      	uxth	r2, r2
 8008fba:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb13 	bl	80095f4 <HAL_UART_AbortReceiveCpltCallback>
 8008fce:	e013      	b.n	8008ff8 <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	220f      	movs	r2, #15
 8008fe4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fafe 	bl	80095f4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3768      	adds	r7, #104	; 0x68
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0800a0bb 	.word	0x0800a0bb

08009008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b0ba      	sub	sp, #232	; 0xe8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800902e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009032:	f640 030f 	movw	r3, #2063	; 0x80f
 8009036:	4013      	ands	r3, r2
 8009038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800903c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d115      	bne.n	8009070 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00f      	beq.n	8009070 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 82a6 	beq.w	80095b2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
      }
      return;
 800906e:	e2a0      	b.n	80095b2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8117 	beq.w	80092a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800907a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800908a:	4b85      	ldr	r3, [pc, #532]	; (80092a0 <HAL_UART_IRQHandler+0x298>)
 800908c:	4013      	ands	r3, r2
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 810a 	beq.w	80092a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d011      	beq.n	80090c4 <HAL_UART_IRQHandler+0xbc>
 80090a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2201      	movs	r2, #1
 80090b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ba:	f043 0201 	orr.w	r2, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d011      	beq.n	80090f4 <HAL_UART_IRQHandler+0xec>
 80090d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2202      	movs	r2, #2
 80090e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ea:	f043 0204 	orr.w	r2, r3, #4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d011      	beq.n	8009124 <HAL_UART_IRQHandler+0x11c>
 8009100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2204      	movs	r2, #4
 8009112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800911a:	f043 0202 	orr.w	r2, r3, #2
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009128:	f003 0308 	and.w	r3, r3, #8
 800912c:	2b00      	cmp	r3, #0
 800912e:	d017      	beq.n	8009160 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800913c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009140:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2208      	movs	r2, #8
 800914e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009156:	f043 0208 	orr.w	r2, r3, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009168:	2b00      	cmp	r3, #0
 800916a:	d012      	beq.n	8009192 <HAL_UART_IRQHandler+0x18a>
 800916c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009188:	f043 0220 	orr.w	r2, r3, #32
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 820c 	beq.w	80095b6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800919e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00d      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091da:	2b40      	cmp	r3, #64	; 0x40
 80091dc:	d005      	beq.n	80091ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d04f      	beq.n	800928a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 feec 	bl	8009fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d141      	bne.n	8009282 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800921c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800922a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800922e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1d9      	bne.n	80091fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	2b00      	cmp	r3, #0
 8009250:	d013      	beq.n	800927a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <HAL_UART_IRQHandler+0x29c>)
 8009258:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	4618      	mov	r0, r3
 8009260:	f7fc f98e 	bl	8005580 <HAL_DMA_Abort_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d017      	beq.n	800929a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	e00f      	b.n	800929a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9b0 	bl	80095e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	e00b      	b.n	800929a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9ac 	bl	80095e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	e007      	b.n	800929a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9a8 	bl	80095e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009298:	e18d      	b.n	80095b6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929a:	bf00      	nop
    return;
 800929c:	e18b      	b.n	80095b6 <HAL_UART_IRQHandler+0x5ae>
 800929e:	bf00      	nop
 80092a0:	04000120 	.word	0x04000120
 80092a4:	0800a08f 	.word	0x0800a08f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	f040 8146 	bne.w	800953e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b6:	f003 0310 	and.w	r3, r3, #16
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 813f 	beq.w	800953e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c4:	f003 0310 	and.w	r3, r3, #16
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8138 	beq.w	800953e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2210      	movs	r2, #16
 80092d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e0:	2b40      	cmp	r3, #64	; 0x40
 80092e2:	f040 80b4 	bne.w	800944e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 815f 	beq.w	80095ba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009306:	429a      	cmp	r2, r3
 8009308:	f080 8157 	bcs.w	80095ba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009312:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 8085 	bne.w	8009432 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800933c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009356:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800935e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800936a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1da      	bne.n	8009328 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009384:	f023 0301 	bic.w	r3, r3, #1
 8009388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800939a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800939e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e1      	bne.n	8009372 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e3      	bne.n	80093ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2220      	movs	r2, #32
 80093ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009414:	65bb      	str	r3, [r7, #88]	; 0x58
 8009416:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800941a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e4      	bne.n	80093f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942c:	4618      	mov	r0, r3
 800942e:	f7fc f869 	bl	8005504 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800943e:	b29b      	uxth	r3, r3
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	b29b      	uxth	r3, r3
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8de 	bl	8009608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800944c:	e0b5      	b.n	80095ba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800945a:	b29b      	uxth	r3, r3
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 80a7 	beq.w	80095be <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80a2 	beq.w	80095be <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800948e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800949c:	647b      	str	r3, [r7, #68]	; 0x44
 800949e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e4      	bne.n	800947a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	623b      	str	r3, [r7, #32]
   return(result);
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	f023 0301 	bic.w	r3, r3, #1
 80094c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094d4:	633a      	str	r2, [r7, #48]	; 0x30
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e3      	bne.n	80094b0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	60fb      	str	r3, [r7, #12]
   return(result);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0310 	bic.w	r3, r3, #16
 800950e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69b9      	ldr	r1, [r7, #24]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	617b      	str	r3, [r7, #20]
   return(result);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e4      	bne.n	80094fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f866 	bl	8009608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800953c:	e03f      	b.n	80095be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800953e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <HAL_UART_IRQHandler+0x560>
 800954a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800954e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d008      	beq.n	8009568 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800955e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 ff5a 	bl	800a41a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009566:	e02d      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00e      	beq.n	8009592 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957c:	2b00      	cmp	r3, #0
 800957e:	d008      	beq.n	8009592 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01c      	beq.n	80095c2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
    }
    return;
 8009590:	e017      	b.n	80095c2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d012      	beq.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
 800959e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00c      	beq.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fdab 	bl	800a106 <UART_EndTransmit_IT>
    return;
 80095b0:	e008      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095b2:	bf00      	nop
 80095b4:	e006      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80095b6:	bf00      	nop
 80095b8:	e004      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80095c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80095c4:	37e8      	adds	r7, #232	; 0xe8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop

080095cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009624:	b08a      	sub	sp, #40	; 0x28
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	431a      	orrs	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	431a      	orrs	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	4313      	orrs	r3, r2
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b9e      	ldr	r3, [pc, #632]	; (80098c8 <UART_SetConfig+0x2a8>)
 8009650:	4013      	ands	r3, r2
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009658:	430b      	orrs	r3, r1
 800965a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a93      	ldr	r2, [pc, #588]	; (80098cc <UART_SetConfig+0x2ac>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009688:	4313      	orrs	r3, r2
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969c:	430a      	orrs	r2, r1
 800969e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a8a      	ldr	r2, [pc, #552]	; (80098d0 <UART_SetConfig+0x2b0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d126      	bne.n	80096f8 <UART_SetConfig+0xd8>
 80096aa:	4b8a      	ldr	r3, [pc, #552]	; (80098d4 <UART_SetConfig+0x2b4>)
 80096ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b0:	f003 0303 	and.w	r3, r3, #3
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d81b      	bhi.n	80096f0 <UART_SetConfig+0xd0>
 80096b8:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <UART_SetConfig+0xa0>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096d1 	.word	0x080096d1
 80096c4:	080096e1 	.word	0x080096e1
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	2301      	movs	r3, #1
 80096d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096d6:	e0ab      	b.n	8009830 <UART_SetConfig+0x210>
 80096d8:	2302      	movs	r3, #2
 80096da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096de:	e0a7      	b.n	8009830 <UART_SetConfig+0x210>
 80096e0:	2304      	movs	r3, #4
 80096e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096e6:	e0a3      	b.n	8009830 <UART_SetConfig+0x210>
 80096e8:	2308      	movs	r3, #8
 80096ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ee:	e09f      	b.n	8009830 <UART_SetConfig+0x210>
 80096f0:	2310      	movs	r3, #16
 80096f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096f6:	e09b      	b.n	8009830 <UART_SetConfig+0x210>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a76      	ldr	r2, [pc, #472]	; (80098d8 <UART_SetConfig+0x2b8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d138      	bne.n	8009774 <UART_SetConfig+0x154>
 8009702:	4b74      	ldr	r3, [pc, #464]	; (80098d4 <UART_SetConfig+0x2b4>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	f003 030c 	and.w	r3, r3, #12
 800970c:	2b0c      	cmp	r3, #12
 800970e:	d82d      	bhi.n	800976c <UART_SetConfig+0x14c>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0xf8>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	0800974d 	.word	0x0800974d
 800971c:	0800976d 	.word	0x0800976d
 8009720:	0800976d 	.word	0x0800976d
 8009724:	0800976d 	.word	0x0800976d
 8009728:	0800975d 	.word	0x0800975d
 800972c:	0800976d 	.word	0x0800976d
 8009730:	0800976d 	.word	0x0800976d
 8009734:	0800976d 	.word	0x0800976d
 8009738:	08009755 	.word	0x08009755
 800973c:	0800976d 	.word	0x0800976d
 8009740:	0800976d 	.word	0x0800976d
 8009744:	0800976d 	.word	0x0800976d
 8009748:	08009765 	.word	0x08009765
 800974c:	2300      	movs	r3, #0
 800974e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009752:	e06d      	b.n	8009830 <UART_SetConfig+0x210>
 8009754:	2302      	movs	r3, #2
 8009756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800975a:	e069      	b.n	8009830 <UART_SetConfig+0x210>
 800975c:	2304      	movs	r3, #4
 800975e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009762:	e065      	b.n	8009830 <UART_SetConfig+0x210>
 8009764:	2308      	movs	r3, #8
 8009766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800976a:	e061      	b.n	8009830 <UART_SetConfig+0x210>
 800976c:	2310      	movs	r3, #16
 800976e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009772:	e05d      	b.n	8009830 <UART_SetConfig+0x210>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a58      	ldr	r2, [pc, #352]	; (80098dc <UART_SetConfig+0x2bc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d125      	bne.n	80097ca <UART_SetConfig+0x1aa>
 800977e:	4b55      	ldr	r3, [pc, #340]	; (80098d4 <UART_SetConfig+0x2b4>)
 8009780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009784:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d016      	beq.n	80097ba <UART_SetConfig+0x19a>
 800978c:	2b30      	cmp	r3, #48	; 0x30
 800978e:	d818      	bhi.n	80097c2 <UART_SetConfig+0x1a2>
 8009790:	2b20      	cmp	r3, #32
 8009792:	d00a      	beq.n	80097aa <UART_SetConfig+0x18a>
 8009794:	2b20      	cmp	r3, #32
 8009796:	d814      	bhi.n	80097c2 <UART_SetConfig+0x1a2>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <UART_SetConfig+0x182>
 800979c:	2b10      	cmp	r3, #16
 800979e:	d008      	beq.n	80097b2 <UART_SetConfig+0x192>
 80097a0:	e00f      	b.n	80097c2 <UART_SetConfig+0x1a2>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097a8:	e042      	b.n	8009830 <UART_SetConfig+0x210>
 80097aa:	2302      	movs	r3, #2
 80097ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097b0:	e03e      	b.n	8009830 <UART_SetConfig+0x210>
 80097b2:	2304      	movs	r3, #4
 80097b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097b8:	e03a      	b.n	8009830 <UART_SetConfig+0x210>
 80097ba:	2308      	movs	r3, #8
 80097bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c0:	e036      	b.n	8009830 <UART_SetConfig+0x210>
 80097c2:	2310      	movs	r3, #16
 80097c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c8:	e032      	b.n	8009830 <UART_SetConfig+0x210>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a3f      	ldr	r2, [pc, #252]	; (80098cc <UART_SetConfig+0x2ac>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d12a      	bne.n	800982a <UART_SetConfig+0x20a>
 80097d4:	4b3f      	ldr	r3, [pc, #252]	; (80098d4 <UART_SetConfig+0x2b4>)
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097e2:	d01a      	beq.n	800981a <UART_SetConfig+0x1fa>
 80097e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097e8:	d81b      	bhi.n	8009822 <UART_SetConfig+0x202>
 80097ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ee:	d00c      	beq.n	800980a <UART_SetConfig+0x1ea>
 80097f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097f4:	d815      	bhi.n	8009822 <UART_SetConfig+0x202>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <UART_SetConfig+0x1e2>
 80097fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097fe:	d008      	beq.n	8009812 <UART_SetConfig+0x1f2>
 8009800:	e00f      	b.n	8009822 <UART_SetConfig+0x202>
 8009802:	2300      	movs	r3, #0
 8009804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009808:	e012      	b.n	8009830 <UART_SetConfig+0x210>
 800980a:	2302      	movs	r3, #2
 800980c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009810:	e00e      	b.n	8009830 <UART_SetConfig+0x210>
 8009812:	2304      	movs	r3, #4
 8009814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009818:	e00a      	b.n	8009830 <UART_SetConfig+0x210>
 800981a:	2308      	movs	r3, #8
 800981c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009820:	e006      	b.n	8009830 <UART_SetConfig+0x210>
 8009822:	2310      	movs	r3, #16
 8009824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009828:	e002      	b.n	8009830 <UART_SetConfig+0x210>
 800982a:	2310      	movs	r3, #16
 800982c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a25      	ldr	r2, [pc, #148]	; (80098cc <UART_SetConfig+0x2ac>)
 8009836:	4293      	cmp	r3, r2
 8009838:	f040 808a 	bne.w	8009950 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800983c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009840:	2b08      	cmp	r3, #8
 8009842:	d824      	bhi.n	800988e <UART_SetConfig+0x26e>
 8009844:	a201      	add	r2, pc, #4	; (adr r2, 800984c <UART_SetConfig+0x22c>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	08009871 	.word	0x08009871
 8009850:	0800988f 	.word	0x0800988f
 8009854:	08009879 	.word	0x08009879
 8009858:	0800988f 	.word	0x0800988f
 800985c:	0800987f 	.word	0x0800987f
 8009860:	0800988f 	.word	0x0800988f
 8009864:	0800988f 	.word	0x0800988f
 8009868:	0800988f 	.word	0x0800988f
 800986c:	08009887 	.word	0x08009887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009870:	f7fd fa28 	bl	8006cc4 <HAL_RCC_GetPCLK1Freq>
 8009874:	61f8      	str	r0, [r7, #28]
        break;
 8009876:	e010      	b.n	800989a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <UART_SetConfig+0x2c0>)
 800987a:	61fb      	str	r3, [r7, #28]
        break;
 800987c:	e00d      	b.n	800989a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800987e:	f7fd f989 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 8009882:	61f8      	str	r0, [r7, #28]
        break;
 8009884:	e009      	b.n	800989a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988a:	61fb      	str	r3, [r7, #28]
        break;
 800988c:	e005      	b.n	800989a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8109 	beq.w	8009ab4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	4413      	add	r3, r2
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d305      	bcc.n	80098be <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d912      	bls.n	80098e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098c4:	e0f6      	b.n	8009ab4 <UART_SetConfig+0x494>
 80098c6:	bf00      	nop
 80098c8:	efff69f3 	.word	0xefff69f3
 80098cc:	40008000 	.word	0x40008000
 80098d0:	40013800 	.word	0x40013800
 80098d4:	40021000 	.word	0x40021000
 80098d8:	40004400 	.word	0x40004400
 80098dc:	40004800 	.word	0x40004800
 80098e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	2200      	movs	r2, #0
 80098e8:	461c      	mov	r4, r3
 80098ea:	4615      	mov	r5, r2
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	022b      	lsls	r3, r5, #8
 80098f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80098fa:	0222      	lsls	r2, r4, #8
 80098fc:	68f9      	ldr	r1, [r7, #12]
 80098fe:	6849      	ldr	r1, [r1, #4]
 8009900:	0849      	lsrs	r1, r1, #1
 8009902:	2000      	movs	r0, #0
 8009904:	4688      	mov	r8, r1
 8009906:	4681      	mov	r9, r0
 8009908:	eb12 0a08 	adds.w	sl, r2, r8
 800990c:	eb43 0b09 	adc.w	fp, r3, r9
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	607a      	str	r2, [r7, #4]
 800991a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	f7f7 f9b1 	bl	8000c88 <__aeabi_uldivmod>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4613      	mov	r3, r2
 800992c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009934:	d308      	bcc.n	8009948 <UART_SetConfig+0x328>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993c:	d204      	bcs.n	8009948 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	60da      	str	r2, [r3, #12]
 8009946:	e0b5      	b.n	8009ab4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800994e:	e0b1      	b.n	8009ab4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009958:	d15d      	bne.n	8009a16 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800995a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800995e:	2b08      	cmp	r3, #8
 8009960:	d827      	bhi.n	80099b2 <UART_SetConfig+0x392>
 8009962:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <UART_SetConfig+0x348>)
 8009964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009968:	0800998d 	.word	0x0800998d
 800996c:	08009995 	.word	0x08009995
 8009970:	0800999d 	.word	0x0800999d
 8009974:	080099b3 	.word	0x080099b3
 8009978:	080099a3 	.word	0x080099a3
 800997c:	080099b3 	.word	0x080099b3
 8009980:	080099b3 	.word	0x080099b3
 8009984:	080099b3 	.word	0x080099b3
 8009988:	080099ab 	.word	0x080099ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800998c:	f7fd f99a 	bl	8006cc4 <HAL_RCC_GetPCLK1Freq>
 8009990:	61f8      	str	r0, [r7, #28]
        break;
 8009992:	e014      	b.n	80099be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009994:	f7fd f9ac 	bl	8006cf0 <HAL_RCC_GetPCLK2Freq>
 8009998:	61f8      	str	r0, [r7, #28]
        break;
 800999a:	e010      	b.n	80099be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800999c:	4b4c      	ldr	r3, [pc, #304]	; (8009ad0 <UART_SetConfig+0x4b0>)
 800999e:	61fb      	str	r3, [r7, #28]
        break;
 80099a0:	e00d      	b.n	80099be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099a2:	f7fd f8f7 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 80099a6:	61f8      	str	r0, [r7, #28]
        break;
 80099a8:	e009      	b.n	80099be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ae:	61fb      	str	r3, [r7, #28]
        break;
 80099b0:	e005      	b.n	80099be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80099bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d077      	beq.n	8009ab4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	005a      	lsls	r2, r3, #1
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	2b0f      	cmp	r3, #15
 80099de:	d916      	bls.n	8009a0e <UART_SetConfig+0x3ee>
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e6:	d212      	bcs.n	8009a0e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f023 030f 	bic.w	r3, r3, #15
 80099f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	8afb      	ldrh	r3, [r7, #22]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	8afa      	ldrh	r2, [r7, #22]
 8009a0a:	60da      	str	r2, [r3, #12]
 8009a0c:	e052      	b.n	8009ab4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a14:	e04e      	b.n	8009ab4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a1a:	2b08      	cmp	r3, #8
 8009a1c:	d827      	bhi.n	8009a6e <UART_SetConfig+0x44e>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0x404>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a49 	.word	0x08009a49
 8009a28:	08009a51 	.word	0x08009a51
 8009a2c:	08009a59 	.word	0x08009a59
 8009a30:	08009a6f 	.word	0x08009a6f
 8009a34:	08009a5f 	.word	0x08009a5f
 8009a38:	08009a6f 	.word	0x08009a6f
 8009a3c:	08009a6f 	.word	0x08009a6f
 8009a40:	08009a6f 	.word	0x08009a6f
 8009a44:	08009a67 	.word	0x08009a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a48:	f7fd f93c 	bl	8006cc4 <HAL_RCC_GetPCLK1Freq>
 8009a4c:	61f8      	str	r0, [r7, #28]
        break;
 8009a4e:	e014      	b.n	8009a7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a50:	f7fd f94e 	bl	8006cf0 <HAL_RCC_GetPCLK2Freq>
 8009a54:	61f8      	str	r0, [r7, #28]
        break;
 8009a56:	e010      	b.n	8009a7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a58:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <UART_SetConfig+0x4b0>)
 8009a5a:	61fb      	str	r3, [r7, #28]
        break;
 8009a5c:	e00d      	b.n	8009a7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a5e:	f7fd f899 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 8009a62:	61f8      	str	r0, [r7, #28]
        break;
 8009a64:	e009      	b.n	8009a7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6a:	61fb      	str	r3, [r7, #28]
        break;
 8009a6c:	e005      	b.n	8009a7a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a78:	bf00      	nop
    }

    if (pclk != 0U)
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d019      	beq.n	8009ab4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	085a      	lsrs	r2, r3, #1
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	441a      	add	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b0f      	cmp	r3, #15
 8009a98:	d909      	bls.n	8009aae <UART_SetConfig+0x48e>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa0:	d205      	bcs.n	8009aae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	e002      	b.n	8009ab4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3728      	adds	r7, #40	; 0x28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ace:	bf00      	nop
 8009ad0:	00f42400 	.word	0x00f42400

08009ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00a      	beq.n	8009afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01a      	beq.n	8009bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd2:	d10a      	bne.n	8009bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	605a      	str	r2, [r3, #4]
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af02      	add	r7, sp, #8
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c28:	f7f9 fdb2 	bl	8003790 <HAL_GetTick>
 8009c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d10e      	bne.n	8009c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f82d 	bl	8009caa <UART_WaitOnFlagUntilTimeout>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e023      	b.n	8009ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d10e      	bne.n	8009c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f817 	bl	8009caa <UART_WaitOnFlagUntilTimeout>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e00d      	b.n	8009ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b09c      	sub	sp, #112	; 0x70
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	603b      	str	r3, [r7, #0]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cba:	e0a5      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	f000 80a1 	beq.w	8009e08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cc6:	f7f9 fd63 	bl	8003790 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d302      	bcc.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x32>
 8009cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d13e      	bne.n	8009d5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cfc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e6      	bne.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3308      	adds	r3, #8
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	663b      	str	r3, [r7, #96]	; 0x60
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2220      	movs	r2, #32
 8009d46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e067      	b.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d04f      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d76:	d147      	bne.n	8009e08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
 8009da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e6      	bne.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dd4:	623a      	str	r2, [r7, #32]
 8009dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	69f9      	ldr	r1, [r7, #28]
 8009dda:	6a3a      	ldr	r2, [r7, #32]
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e5      	bne.n	8009db4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2220      	movs	r2, #32
 8009dec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2220      	movs	r2, #32
 8009df2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e010      	b.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	4013      	ands	r3, r2
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	bf0c      	ite	eq
 8009e18:	2301      	moveq	r3, #1
 8009e1a:	2300      	movne	r3, #0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	f43f af4a 	beq.w	8009cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3770      	adds	r7, #112	; 0x70
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b097      	sub	sp, #92	; 0x5c
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	88fa      	ldrh	r2, [r7, #6]
 8009e4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	88fa      	ldrh	r2, [r7, #6]
 8009e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e66:	d10e      	bne.n	8009e86 <UART_Start_Receive_IT+0x52>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <UART_Start_Receive_IT+0x48>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e7a:	e02d      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	22ff      	movs	r2, #255	; 0xff
 8009e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e84:	e028      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10d      	bne.n	8009eaa <UART_Start_Receive_IT+0x76>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d104      	bne.n	8009ea0 <UART_Start_Receive_IT+0x6c>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	22ff      	movs	r2, #255	; 0xff
 8009e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e9e:	e01b      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	227f      	movs	r2, #127	; 0x7f
 8009ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ea8:	e016      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eb2:	d10d      	bne.n	8009ed0 <UART_Start_Receive_IT+0x9c>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <UART_Start_Receive_IT+0x92>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	227f      	movs	r2, #127	; 0x7f
 8009ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ec4:	e008      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	223f      	movs	r2, #63	; 0x3f
 8009eca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ece:	e003      	b.n	8009ed8 <UART_Start_Receive_IT+0xa4>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2222      	movs	r2, #34	; 0x22
 8009ee4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	f043 0301 	orr.w	r3, r3, #1
 8009efc:	657b      	str	r3, [r7, #84]	; 0x54
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f22:	d107      	bne.n	8009f34 <UART_Start_Receive_IT+0x100>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a24      	ldr	r2, [pc, #144]	; (8009fc0 <UART_Start_Receive_IT+0x18c>)
 8009f30:	665a      	str	r2, [r3, #100]	; 0x64
 8009f32:	e002      	b.n	8009f3a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4a23      	ldr	r2, [pc, #140]	; (8009fc4 <UART_Start_Receive_IT+0x190>)
 8009f38:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d019      	beq.n	8009f7e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34
 8009f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e6      	bne.n	8009f4a <UART_Start_Receive_IT+0x116>
 8009f7c:	e018      	b.n	8009fb0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f043 0320 	orr.w	r3, r3, #32
 8009f92:	653b      	str	r3, [r7, #80]	; 0x50
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f9c:	623b      	str	r3, [r7, #32]
 8009f9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	69f9      	ldr	r1, [r7, #28]
 8009fa2:	6a3a      	ldr	r2, [r7, #32]
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e6      	bne.n	8009f7e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	375c      	adds	r7, #92	; 0x5c
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	0800a2bb 	.word	0x0800a2bb
 8009fc4:	0800a15b 	.word	0x0800a15b

08009fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b095      	sub	sp, #84	; 0x54
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fee:	643b      	str	r3, [r7, #64]	; 0x40
 8009ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e6      	bne.n	8009fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	61fb      	str	r3, [r7, #28]
   return(result);
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	64bb      	str	r3, [r7, #72]	; 0x48
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a022:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d118      	bne.n	800a070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f023 0310 	bic.w	r3, r3, #16
 800a052:	647b      	str	r3, [r7, #68]	; 0x44
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6979      	ldr	r1, [r7, #20]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	613b      	str	r3, [r7, #16]
   return(result);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a082:	bf00      	nop
 800a084:	3754      	adds	r7, #84	; 0x54
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff fa97 	bl	80095e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	220f      	movs	r2, #15
 800a0d6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	8b1b      	ldrh	r3, [r3, #24]
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f042 0208 	orr.w	r2, r2, #8
 800a0e8:	b292      	uxth	r2, r2
 800a0ea:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fa7b 	bl	80095f4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a122:	61fb      	str	r3, [r7, #28]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	61bb      	str	r3, [r7, #24]
 800a12e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6979      	ldr	r1, [r7, #20]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	613b      	str	r3, [r7, #16]
   return(result);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e6      	bne.n	800a10e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff fa3d 	bl	80095cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a152:	bf00      	nop
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b096      	sub	sp, #88	; 0x58
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a168:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a170:	2b22      	cmp	r3, #34	; 0x22
 800a172:	f040 8094 	bne.w	800a29e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a17c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a180:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a184:	b2d9      	uxtb	r1, r3
 800a186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a190:	400a      	ands	r2, r1
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d179      	bne.n	800a2b2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d2:	653b      	str	r3, [r7, #80]	; 0x50
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a1de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e6      	bne.n	800a1be <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	623b      	str	r3, [r7, #32]
   return(result);
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	f023 0301 	bic.w	r3, r3, #1
 800a206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3308      	adds	r3, #8
 800a20e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a210:	633a      	str	r2, [r7, #48]	; 0x30
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e5      	bne.n	800a1f0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a234:	2b01      	cmp	r3, #1
 800a236:	d12e      	bne.n	800a296 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	e853 3f00 	ldrex	r3, [r3]
 800a24a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0310 	bic.w	r3, r3, #16
 800a252:	64bb      	str	r3, [r7, #72]	; 0x48
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	461a      	mov	r2, r3
 800a25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25c:	61fb      	str	r3, [r7, #28]
 800a25e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a260:	69b9      	ldr	r1, [r7, #24]
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	e841 2300 	strex	r3, r2, [r1]
 800a268:	617b      	str	r3, [r7, #20]
   return(result);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e6      	bne.n	800a23e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	f003 0310 	and.w	r3, r3, #16
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d103      	bne.n	800a286 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2210      	movs	r2, #16
 800a284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff f9ba 	bl	8009608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a294:	e00d      	b.n	800a2b2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7f8 f97a 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 800a29c:	e009      	b.n	800a2b2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	8b1b      	ldrh	r3, [r3, #24]
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0208 	orr.w	r2, r2, #8
 800a2ae:	b292      	uxth	r2, r2
 800a2b0:	831a      	strh	r2, [r3, #24]
}
 800a2b2:	bf00      	nop
 800a2b4:	3758      	adds	r7, #88	; 0x58
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b096      	sub	sp, #88	; 0x58
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d0:	2b22      	cmp	r3, #34	; 0x22
 800a2d2:	f040 8094 	bne.w	800a3fe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a2ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fa:	1c9a      	adds	r2, r3, #2
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a318:	b29b      	uxth	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d179      	bne.n	800a412 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a332:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33c:	643b      	str	r3, [r7, #64]	; 0x40
 800a33e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	64bb      	str	r3, [r7, #72]	; 0x48
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a370:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2220      	movs	r2, #32
 800a388:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a394:	2b01      	cmp	r3, #1
 800a396:	d12e      	bne.n	800a3f6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f023 0310 	bic.w	r3, r3, #16
 800a3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e6      	bne.n	800a39e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b10      	cmp	r3, #16
 800a3dc:	d103      	bne.n	800a3e6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff f90a 	bl	8009608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3f4:	e00d      	b.n	800a412 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7f8 f8ca 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 800a3fc:	e009      	b.n	800a412 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	8b1b      	ldrh	r3, [r3, #24]
 800a404:	b29a      	uxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f042 0208 	orr.w	r2, r2, #8
 800a40e:	b292      	uxth	r2, r2
 800a410:	831a      	strh	r2, [r3, #24]
}
 800a412:	bf00      	nop
 800a414:	3758      	adds	r7, #88	; 0x58
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
	...

0800a430 <__errno>:
 800a430:	4b01      	ldr	r3, [pc, #4]	; (800a438 <__errno+0x8>)
 800a432:	6818      	ldr	r0, [r3, #0]
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000040 	.word	0x20000040

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4d0d      	ldr	r5, [pc, #52]	; (800a474 <__libc_init_array+0x38>)
 800a440:	4c0d      	ldr	r4, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a442:	1b64      	subs	r4, r4, r5
 800a444:	10a4      	asrs	r4, r4, #2
 800a446:	2600      	movs	r6, #0
 800a448:	42a6      	cmp	r6, r4
 800a44a:	d109      	bne.n	800a460 <__libc_init_array+0x24>
 800a44c:	4d0b      	ldr	r5, [pc, #44]	; (800a47c <__libc_init_array+0x40>)
 800a44e:	4c0c      	ldr	r4, [pc, #48]	; (800a480 <__libc_init_array+0x44>)
 800a450:	f005 f9bc 	bl	800f7cc <_init>
 800a454:	1b64      	subs	r4, r4, r5
 800a456:	10a4      	asrs	r4, r4, #2
 800a458:	2600      	movs	r6, #0
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	d105      	bne.n	800a46a <__libc_init_array+0x2e>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	f855 3b04 	ldr.w	r3, [r5], #4
 800a464:	4798      	blx	r3
 800a466:	3601      	adds	r6, #1
 800a468:	e7ee      	b.n	800a448 <__libc_init_array+0xc>
 800a46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46e:	4798      	blx	r3
 800a470:	3601      	adds	r6, #1
 800a472:	e7f2      	b.n	800a45a <__libc_init_array+0x1e>
 800a474:	080102fc 	.word	0x080102fc
 800a478:	080102fc 	.word	0x080102fc
 800a47c:	080102fc 	.word	0x080102fc
 800a480:	08010300 	.word	0x08010300

0800a484 <memset>:
 800a484:	4402      	add	r2, r0
 800a486:	4603      	mov	r3, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <__cvt>:
 800a494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	ec55 4b10 	vmov	r4, r5, d0
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	460e      	mov	r6, r1
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	bfbb      	ittet	lt
 800a4a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4aa:	461d      	movlt	r5, r3
 800a4ac:	2300      	movge	r3, #0
 800a4ae:	232d      	movlt	r3, #45	; 0x2d
 800a4b0:	700b      	strb	r3, [r1, #0]
 800a4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4b8:	4691      	mov	r9, r2
 800a4ba:	f023 0820 	bic.w	r8, r3, #32
 800a4be:	bfbc      	itt	lt
 800a4c0:	4622      	movlt	r2, r4
 800a4c2:	4614      	movlt	r4, r2
 800a4c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4c8:	d005      	beq.n	800a4d6 <__cvt+0x42>
 800a4ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4ce:	d100      	bne.n	800a4d2 <__cvt+0x3e>
 800a4d0:	3601      	adds	r6, #1
 800a4d2:	2102      	movs	r1, #2
 800a4d4:	e000      	b.n	800a4d8 <__cvt+0x44>
 800a4d6:	2103      	movs	r1, #3
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	ab02      	add	r3, sp, #8
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	ec45 4b10 	vmov	d0, r4, r5
 800a4e4:	4653      	mov	r3, sl
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	f001 ffc2 	bl	800c470 <_dtoa_r>
 800a4ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	d102      	bne.n	800a4fa <__cvt+0x66>
 800a4f4:	f019 0f01 	tst.w	r9, #1
 800a4f8:	d022      	beq.n	800a540 <__cvt+0xac>
 800a4fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4fe:	eb07 0906 	add.w	r9, r7, r6
 800a502:	d110      	bne.n	800a526 <__cvt+0x92>
 800a504:	783b      	ldrb	r3, [r7, #0]
 800a506:	2b30      	cmp	r3, #48	; 0x30
 800a508:	d10a      	bne.n	800a520 <__cvt+0x8c>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a516:	b918      	cbnz	r0, 800a520 <__cvt+0x8c>
 800a518:	f1c6 0601 	rsb	r6, r6, #1
 800a51c:	f8ca 6000 	str.w	r6, [sl]
 800a520:	f8da 3000 	ldr.w	r3, [sl]
 800a524:	4499      	add	r9, r3
 800a526:	2200      	movs	r2, #0
 800a528:	2300      	movs	r3, #0
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f6 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a532:	b108      	cbz	r0, 800a538 <__cvt+0xa4>
 800a534:	f8cd 900c 	str.w	r9, [sp, #12]
 800a538:	2230      	movs	r2, #48	; 0x30
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	454b      	cmp	r3, r9
 800a53e:	d307      	bcc.n	800a550 <__cvt+0xbc>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a544:	1bdb      	subs	r3, r3, r7
 800a546:	4638      	mov	r0, r7
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	b004      	add	sp, #16
 800a54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a550:	1c59      	adds	r1, r3, #1
 800a552:	9103      	str	r1, [sp, #12]
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e7f0      	b.n	800a53a <__cvt+0xa6>

0800a558 <__exponent>:
 800a558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a55a:	4603      	mov	r3, r0
 800a55c:	2900      	cmp	r1, #0
 800a55e:	bfb8      	it	lt
 800a560:	4249      	neglt	r1, r1
 800a562:	f803 2b02 	strb.w	r2, [r3], #2
 800a566:	bfb4      	ite	lt
 800a568:	222d      	movlt	r2, #45	; 0x2d
 800a56a:	222b      	movge	r2, #43	; 0x2b
 800a56c:	2909      	cmp	r1, #9
 800a56e:	7042      	strb	r2, [r0, #1]
 800a570:	dd2a      	ble.n	800a5c8 <__exponent+0x70>
 800a572:	f10d 0407 	add.w	r4, sp, #7
 800a576:	46a4      	mov	ip, r4
 800a578:	270a      	movs	r7, #10
 800a57a:	46a6      	mov	lr, r4
 800a57c:	460a      	mov	r2, r1
 800a57e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a582:	fb07 1516 	mls	r5, r7, r6, r1
 800a586:	3530      	adds	r5, #48	; 0x30
 800a588:	2a63      	cmp	r2, #99	; 0x63
 800a58a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a58e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a592:	4631      	mov	r1, r6
 800a594:	dcf1      	bgt.n	800a57a <__exponent+0x22>
 800a596:	3130      	adds	r1, #48	; 0x30
 800a598:	f1ae 0502 	sub.w	r5, lr, #2
 800a59c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5a0:	1c44      	adds	r4, r0, #1
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4561      	cmp	r1, ip
 800a5a6:	d30a      	bcc.n	800a5be <__exponent+0x66>
 800a5a8:	f10d 0209 	add.w	r2, sp, #9
 800a5ac:	eba2 020e 	sub.w	r2, r2, lr
 800a5b0:	4565      	cmp	r5, ip
 800a5b2:	bf88      	it	hi
 800a5b4:	2200      	movhi	r2, #0
 800a5b6:	4413      	add	r3, r2
 800a5b8:	1a18      	subs	r0, r3, r0
 800a5ba:	b003      	add	sp, #12
 800a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5c6:	e7ed      	b.n	800a5a4 <__exponent+0x4c>
 800a5c8:	2330      	movs	r3, #48	; 0x30
 800a5ca:	3130      	adds	r1, #48	; 0x30
 800a5cc:	7083      	strb	r3, [r0, #2]
 800a5ce:	70c1      	strb	r1, [r0, #3]
 800a5d0:	1d03      	adds	r3, r0, #4
 800a5d2:	e7f1      	b.n	800a5b8 <__exponent+0x60>

0800a5d4 <_printf_float>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	ed2d 8b02 	vpush	{d8}
 800a5dc:	b08d      	sub	sp, #52	; 0x34
 800a5de:	460c      	mov	r4, r1
 800a5e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5e4:	4616      	mov	r6, r2
 800a5e6:	461f      	mov	r7, r3
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	f003 fa55 	bl	800da98 <_localeconv_r>
 800a5ee:	f8d0 a000 	ldr.w	sl, [r0]
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	f7f5 fdec 	bl	80001d0 <strlen>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	9305      	str	r3, [sp, #20]
 800a600:	f8d8 3000 	ldr.w	r3, [r8]
 800a604:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a608:	3307      	adds	r3, #7
 800a60a:	f023 0307 	bic.w	r3, r3, #7
 800a60e:	f103 0208 	add.w	r2, r3, #8
 800a612:	f8c8 2000 	str.w	r2, [r8]
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a61e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a622:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	f8cd 8018 	str.w	r8, [sp, #24]
 800a62c:	ee08 0a10 	vmov	s16, r0
 800a630:	4b9f      	ldr	r3, [pc, #636]	; (800a8b0 <_printf_float+0x2dc>)
 800a632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a636:	f04f 32ff 	mov.w	r2, #4294967295
 800a63a:	f7f6 fa77 	bl	8000b2c <__aeabi_dcmpun>
 800a63e:	bb88      	cbnz	r0, 800a6a4 <_printf_float+0xd0>
 800a640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a644:	4b9a      	ldr	r3, [pc, #616]	; (800a8b0 <_printf_float+0x2dc>)
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	f7f6 fa51 	bl	8000af0 <__aeabi_dcmple>
 800a64e:	bb48      	cbnz	r0, 800a6a4 <_printf_float+0xd0>
 800a650:	2200      	movs	r2, #0
 800a652:	2300      	movs	r3, #0
 800a654:	4640      	mov	r0, r8
 800a656:	4649      	mov	r1, r9
 800a658:	f7f6 fa40 	bl	8000adc <__aeabi_dcmplt>
 800a65c:	b110      	cbz	r0, 800a664 <_printf_float+0x90>
 800a65e:	232d      	movs	r3, #45	; 0x2d
 800a660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a664:	4b93      	ldr	r3, [pc, #588]	; (800a8b4 <_printf_float+0x2e0>)
 800a666:	4894      	ldr	r0, [pc, #592]	; (800a8b8 <_printf_float+0x2e4>)
 800a668:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a66c:	bf94      	ite	ls
 800a66e:	4698      	movls	r8, r3
 800a670:	4680      	movhi	r8, r0
 800a672:	2303      	movs	r3, #3
 800a674:	6123      	str	r3, [r4, #16]
 800a676:	9b05      	ldr	r3, [sp, #20]
 800a678:	f023 0204 	bic.w	r2, r3, #4
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	f04f 0900 	mov.w	r9, #0
 800a682:	9700      	str	r7, [sp, #0]
 800a684:	4633      	mov	r3, r6
 800a686:	aa0b      	add	r2, sp, #44	; 0x2c
 800a688:	4621      	mov	r1, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f9d8 	bl	800aa40 <_printf_common>
 800a690:	3001      	adds	r0, #1
 800a692:	f040 8090 	bne.w	800a7b6 <_printf_float+0x1e2>
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	b00d      	add	sp, #52	; 0x34
 800a69c:	ecbd 8b02 	vpop	{d8}
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f6 fa3e 	bl	8000b2c <__aeabi_dcmpun>
 800a6b0:	b140      	cbz	r0, 800a6c4 <_printf_float+0xf0>
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bfbc      	itt	lt
 800a6b8:	232d      	movlt	r3, #45	; 0x2d
 800a6ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6be:	487f      	ldr	r0, [pc, #508]	; (800a8bc <_printf_float+0x2e8>)
 800a6c0:	4b7f      	ldr	r3, [pc, #508]	; (800a8c0 <_printf_float+0x2ec>)
 800a6c2:	e7d1      	b.n	800a668 <_printf_float+0x94>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6ca:	9206      	str	r2, [sp, #24]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	d13f      	bne.n	800a750 <_printf_float+0x17c>
 800a6d0:	2306      	movs	r3, #6
 800a6d2:	6063      	str	r3, [r4, #4]
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	6861      	ldr	r1, [r4, #4]
 800a6d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6e6:	ab09      	add	r3, sp, #36	; 0x24
 800a6e8:	ec49 8b10 	vmov	d0, r8, r9
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	6022      	str	r2, [r4, #0]
 800a6f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7ff fecd 	bl	800a494 <__cvt>
 800a6fa:	9b06      	ldr	r3, [sp, #24]
 800a6fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6fe:	2b47      	cmp	r3, #71	; 0x47
 800a700:	4680      	mov	r8, r0
 800a702:	d108      	bne.n	800a716 <_printf_float+0x142>
 800a704:	1cc8      	adds	r0, r1, #3
 800a706:	db02      	blt.n	800a70e <_printf_float+0x13a>
 800a708:	6863      	ldr	r3, [r4, #4]
 800a70a:	4299      	cmp	r1, r3
 800a70c:	dd41      	ble.n	800a792 <_printf_float+0x1be>
 800a70e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a712:	fa5f fb8b 	uxtb.w	fp, fp
 800a716:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a71a:	d820      	bhi.n	800a75e <_printf_float+0x18a>
 800a71c:	3901      	subs	r1, #1
 800a71e:	465a      	mov	r2, fp
 800a720:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a724:	9109      	str	r1, [sp, #36]	; 0x24
 800a726:	f7ff ff17 	bl	800a558 <__exponent>
 800a72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72c:	1813      	adds	r3, r2, r0
 800a72e:	2a01      	cmp	r2, #1
 800a730:	4681      	mov	r9, r0
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	dc02      	bgt.n	800a73c <_printf_float+0x168>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	07d2      	lsls	r2, r2, #31
 800a73a:	d501      	bpl.n	800a740 <_printf_float+0x16c>
 800a73c:	3301      	adds	r3, #1
 800a73e:	6123      	str	r3, [r4, #16]
 800a740:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a744:	2b00      	cmp	r3, #0
 800a746:	d09c      	beq.n	800a682 <_printf_float+0xae>
 800a748:	232d      	movs	r3, #45	; 0x2d
 800a74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a74e:	e798      	b.n	800a682 <_printf_float+0xae>
 800a750:	9a06      	ldr	r2, [sp, #24]
 800a752:	2a47      	cmp	r2, #71	; 0x47
 800a754:	d1be      	bne.n	800a6d4 <_printf_float+0x100>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1bc      	bne.n	800a6d4 <_printf_float+0x100>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e7b9      	b.n	800a6d2 <_printf_float+0xfe>
 800a75e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a762:	d118      	bne.n	800a796 <_printf_float+0x1c2>
 800a764:	2900      	cmp	r1, #0
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	dd0b      	ble.n	800a782 <_printf_float+0x1ae>
 800a76a:	6121      	str	r1, [r4, #16]
 800a76c:	b913      	cbnz	r3, 800a774 <_printf_float+0x1a0>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	07d0      	lsls	r0, r2, #31
 800a772:	d502      	bpl.n	800a77a <_printf_float+0x1a6>
 800a774:	3301      	adds	r3, #1
 800a776:	440b      	add	r3, r1
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a77c:	f04f 0900 	mov.w	r9, #0
 800a780:	e7de      	b.n	800a740 <_printf_float+0x16c>
 800a782:	b913      	cbnz	r3, 800a78a <_printf_float+0x1b6>
 800a784:	6822      	ldr	r2, [r4, #0]
 800a786:	07d2      	lsls	r2, r2, #31
 800a788:	d501      	bpl.n	800a78e <_printf_float+0x1ba>
 800a78a:	3302      	adds	r3, #2
 800a78c:	e7f4      	b.n	800a778 <_printf_float+0x1a4>
 800a78e:	2301      	movs	r3, #1
 800a790:	e7f2      	b.n	800a778 <_printf_float+0x1a4>
 800a792:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a798:	4299      	cmp	r1, r3
 800a79a:	db05      	blt.n	800a7a8 <_printf_float+0x1d4>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	6121      	str	r1, [r4, #16]
 800a7a0:	07d8      	lsls	r0, r3, #31
 800a7a2:	d5ea      	bpl.n	800a77a <_printf_float+0x1a6>
 800a7a4:	1c4b      	adds	r3, r1, #1
 800a7a6:	e7e7      	b.n	800a778 <_printf_float+0x1a4>
 800a7a8:	2900      	cmp	r1, #0
 800a7aa:	bfd4      	ite	le
 800a7ac:	f1c1 0202 	rsble	r2, r1, #2
 800a7b0:	2201      	movgt	r2, #1
 800a7b2:	4413      	add	r3, r2
 800a7b4:	e7e0      	b.n	800a778 <_printf_float+0x1a4>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	055a      	lsls	r2, r3, #21
 800a7ba:	d407      	bmi.n	800a7cc <_printf_float+0x1f8>
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	4642      	mov	r2, r8
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	d12c      	bne.n	800a824 <_printf_float+0x250>
 800a7ca:	e764      	b.n	800a696 <_printf_float+0xc2>
 800a7cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7d0:	f240 80e0 	bls.w	800a994 <_printf_float+0x3c0>
 800a7d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f7f6 f974 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d034      	beq.n	800a84e <_printf_float+0x27a>
 800a7e4:	4a37      	ldr	r2, [pc, #220]	; (800a8c4 <_printf_float+0x2f0>)
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af51 	beq.w	800a696 <_printf_float+0xc2>
 800a7f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	db02      	blt.n	800a802 <_printf_float+0x22e>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	07d8      	lsls	r0, r3, #31
 800a800:	d510      	bpl.n	800a824 <_printf_float+0x250>
 800a802:	ee18 3a10 	vmov	r3, s16
 800a806:	4652      	mov	r2, sl
 800a808:	4631      	mov	r1, r6
 800a80a:	4628      	mov	r0, r5
 800a80c:	47b8      	blx	r7
 800a80e:	3001      	adds	r0, #1
 800a810:	f43f af41 	beq.w	800a696 <_printf_float+0xc2>
 800a814:	f04f 0800 	mov.w	r8, #0
 800a818:	f104 091a 	add.w	r9, r4, #26
 800a81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81e:	3b01      	subs	r3, #1
 800a820:	4543      	cmp	r3, r8
 800a822:	dc09      	bgt.n	800a838 <_printf_float+0x264>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	079b      	lsls	r3, r3, #30
 800a828:	f100 8105 	bmi.w	800aa36 <_printf_float+0x462>
 800a82c:	68e0      	ldr	r0, [r4, #12]
 800a82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a830:	4298      	cmp	r0, r3
 800a832:	bfb8      	it	lt
 800a834:	4618      	movlt	r0, r3
 800a836:	e730      	b.n	800a69a <_printf_float+0xc6>
 800a838:	2301      	movs	r3, #1
 800a83a:	464a      	mov	r2, r9
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	47b8      	blx	r7
 800a842:	3001      	adds	r0, #1
 800a844:	f43f af27 	beq.w	800a696 <_printf_float+0xc2>
 800a848:	f108 0801 	add.w	r8, r8, #1
 800a84c:	e7e6      	b.n	800a81c <_printf_float+0x248>
 800a84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	dc39      	bgt.n	800a8c8 <_printf_float+0x2f4>
 800a854:	4a1b      	ldr	r2, [pc, #108]	; (800a8c4 <_printf_float+0x2f0>)
 800a856:	2301      	movs	r3, #1
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af19 	beq.w	800a696 <_printf_float+0xc2>
 800a864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a868:	4313      	orrs	r3, r2
 800a86a:	d102      	bne.n	800a872 <_printf_float+0x29e>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	07d9      	lsls	r1, r3, #31
 800a870:	d5d8      	bpl.n	800a824 <_printf_float+0x250>
 800a872:	ee18 3a10 	vmov	r3, s16
 800a876:	4652      	mov	r2, sl
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f af09 	beq.w	800a696 <_printf_float+0xc2>
 800a884:	f04f 0900 	mov.w	r9, #0
 800a888:	f104 0a1a 	add.w	sl, r4, #26
 800a88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88e:	425b      	negs	r3, r3
 800a890:	454b      	cmp	r3, r9
 800a892:	dc01      	bgt.n	800a898 <_printf_float+0x2c4>
 800a894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a896:	e792      	b.n	800a7be <_printf_float+0x1ea>
 800a898:	2301      	movs	r3, #1
 800a89a:	4652      	mov	r2, sl
 800a89c:	4631      	mov	r1, r6
 800a89e:	4628      	mov	r0, r5
 800a8a0:	47b8      	blx	r7
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	f43f aef7 	beq.w	800a696 <_printf_float+0xc2>
 800a8a8:	f109 0901 	add.w	r9, r9, #1
 800a8ac:	e7ee      	b.n	800a88c <_printf_float+0x2b8>
 800a8ae:	bf00      	nop
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	0800fe38 	.word	0x0800fe38
 800a8b8:	0800fe3c 	.word	0x0800fe3c
 800a8bc:	0800fe44 	.word	0x0800fe44
 800a8c0:	0800fe40 	.word	0x0800fe40
 800a8c4:	080102a1 	.word	0x080102a1
 800a8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bfa8      	it	ge
 800a8d0:	461a      	movge	r2, r3
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	4691      	mov	r9, r2
 800a8d6:	dc37      	bgt.n	800a948 <_printf_float+0x374>
 800a8d8:	f04f 0b00 	mov.w	fp, #0
 800a8dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8e0:	f104 021a 	add.w	r2, r4, #26
 800a8e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8e6:	9305      	str	r3, [sp, #20]
 800a8e8:	eba3 0309 	sub.w	r3, r3, r9
 800a8ec:	455b      	cmp	r3, fp
 800a8ee:	dc33      	bgt.n	800a958 <_printf_float+0x384>
 800a8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	db3b      	blt.n	800a970 <_printf_float+0x39c>
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	07da      	lsls	r2, r3, #31
 800a8fc:	d438      	bmi.n	800a970 <_printf_float+0x39c>
 800a8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a900:	9a05      	ldr	r2, [sp, #20]
 800a902:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a904:	1a9a      	subs	r2, r3, r2
 800a906:	eba3 0901 	sub.w	r9, r3, r1
 800a90a:	4591      	cmp	r9, r2
 800a90c:	bfa8      	it	ge
 800a90e:	4691      	movge	r9, r2
 800a910:	f1b9 0f00 	cmp.w	r9, #0
 800a914:	dc35      	bgt.n	800a982 <_printf_float+0x3ae>
 800a916:	f04f 0800 	mov.w	r8, #0
 800a91a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91e:	f104 0a1a 	add.w	sl, r4, #26
 800a922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a926:	1a9b      	subs	r3, r3, r2
 800a928:	eba3 0309 	sub.w	r3, r3, r9
 800a92c:	4543      	cmp	r3, r8
 800a92e:	f77f af79 	ble.w	800a824 <_printf_float+0x250>
 800a932:	2301      	movs	r3, #1
 800a934:	4652      	mov	r2, sl
 800a936:	4631      	mov	r1, r6
 800a938:	4628      	mov	r0, r5
 800a93a:	47b8      	blx	r7
 800a93c:	3001      	adds	r0, #1
 800a93e:	f43f aeaa 	beq.w	800a696 <_printf_float+0xc2>
 800a942:	f108 0801 	add.w	r8, r8, #1
 800a946:	e7ec      	b.n	800a922 <_printf_float+0x34e>
 800a948:	4613      	mov	r3, r2
 800a94a:	4631      	mov	r1, r6
 800a94c:	4642      	mov	r2, r8
 800a94e:	4628      	mov	r0, r5
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	d1c0      	bne.n	800a8d8 <_printf_float+0x304>
 800a956:	e69e      	b.n	800a696 <_printf_float+0xc2>
 800a958:	2301      	movs	r3, #1
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	9205      	str	r2, [sp, #20]
 800a960:	47b8      	blx	r7
 800a962:	3001      	adds	r0, #1
 800a964:	f43f ae97 	beq.w	800a696 <_printf_float+0xc2>
 800a968:	9a05      	ldr	r2, [sp, #20]
 800a96a:	f10b 0b01 	add.w	fp, fp, #1
 800a96e:	e7b9      	b.n	800a8e4 <_printf_float+0x310>
 800a970:	ee18 3a10 	vmov	r3, s16
 800a974:	4652      	mov	r2, sl
 800a976:	4631      	mov	r1, r6
 800a978:	4628      	mov	r0, r5
 800a97a:	47b8      	blx	r7
 800a97c:	3001      	adds	r0, #1
 800a97e:	d1be      	bne.n	800a8fe <_printf_float+0x32a>
 800a980:	e689      	b.n	800a696 <_printf_float+0xc2>
 800a982:	9a05      	ldr	r2, [sp, #20]
 800a984:	464b      	mov	r3, r9
 800a986:	4442      	add	r2, r8
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	d1c1      	bne.n	800a916 <_printf_float+0x342>
 800a992:	e680      	b.n	800a696 <_printf_float+0xc2>
 800a994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a996:	2a01      	cmp	r2, #1
 800a998:	dc01      	bgt.n	800a99e <_printf_float+0x3ca>
 800a99a:	07db      	lsls	r3, r3, #31
 800a99c:	d538      	bpl.n	800aa10 <_printf_float+0x43c>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f43f ae74 	beq.w	800a696 <_printf_float+0xc2>
 800a9ae:	ee18 3a10 	vmov	r3, s16
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f ae6b 	beq.w	800a696 <_printf_float+0xc2>
 800a9c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f7f6 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9cc:	b9d8      	cbnz	r0, 800aa06 <_printf_float+0x432>
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	f108 0201 	add.w	r2, r8, #1
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d10e      	bne.n	800a9fe <_printf_float+0x42a>
 800a9e0:	e659      	b.n	800a696 <_printf_float+0xc2>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	4652      	mov	r2, sl
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	47b8      	blx	r7
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	f43f ae52 	beq.w	800a696 <_printf_float+0xc2>
 800a9f2:	f108 0801 	add.w	r8, r8, #1
 800a9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	4543      	cmp	r3, r8
 800a9fc:	dcf1      	bgt.n	800a9e2 <_printf_float+0x40e>
 800a9fe:	464b      	mov	r3, r9
 800aa00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa04:	e6dc      	b.n	800a7c0 <_printf_float+0x1ec>
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	f104 0a1a 	add.w	sl, r4, #26
 800aa0e:	e7f2      	b.n	800a9f6 <_printf_float+0x422>
 800aa10:	2301      	movs	r3, #1
 800aa12:	4642      	mov	r2, r8
 800aa14:	e7df      	b.n	800a9d6 <_printf_float+0x402>
 800aa16:	2301      	movs	r3, #1
 800aa18:	464a      	mov	r2, r9
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	f43f ae38 	beq.w	800a696 <_printf_float+0xc2>
 800aa26:	f108 0801 	add.w	r8, r8, #1
 800aa2a:	68e3      	ldr	r3, [r4, #12]
 800aa2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa2e:	1a5b      	subs	r3, r3, r1
 800aa30:	4543      	cmp	r3, r8
 800aa32:	dcf0      	bgt.n	800aa16 <_printf_float+0x442>
 800aa34:	e6fa      	b.n	800a82c <_printf_float+0x258>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	f104 0919 	add.w	r9, r4, #25
 800aa3e:	e7f4      	b.n	800aa2a <_printf_float+0x456>

0800aa40 <_printf_common>:
 800aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	4616      	mov	r6, r2
 800aa46:	4699      	mov	r9, r3
 800aa48:	688a      	ldr	r2, [r1, #8]
 800aa4a:	690b      	ldr	r3, [r1, #16]
 800aa4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa50:	4293      	cmp	r3, r2
 800aa52:	bfb8      	it	lt
 800aa54:	4613      	movlt	r3, r2
 800aa56:	6033      	str	r3, [r6, #0]
 800aa58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	b10a      	cbz	r2, 800aa66 <_printf_common+0x26>
 800aa62:	3301      	adds	r3, #1
 800aa64:	6033      	str	r3, [r6, #0]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	0699      	lsls	r1, r3, #26
 800aa6a:	bf42      	ittt	mi
 800aa6c:	6833      	ldrmi	r3, [r6, #0]
 800aa6e:	3302      	addmi	r3, #2
 800aa70:	6033      	strmi	r3, [r6, #0]
 800aa72:	6825      	ldr	r5, [r4, #0]
 800aa74:	f015 0506 	ands.w	r5, r5, #6
 800aa78:	d106      	bne.n	800aa88 <_printf_common+0x48>
 800aa7a:	f104 0a19 	add.w	sl, r4, #25
 800aa7e:	68e3      	ldr	r3, [r4, #12]
 800aa80:	6832      	ldr	r2, [r6, #0]
 800aa82:	1a9b      	subs	r3, r3, r2
 800aa84:	42ab      	cmp	r3, r5
 800aa86:	dc26      	bgt.n	800aad6 <_printf_common+0x96>
 800aa88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa8c:	1e13      	subs	r3, r2, #0
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	bf18      	it	ne
 800aa92:	2301      	movne	r3, #1
 800aa94:	0692      	lsls	r2, r2, #26
 800aa96:	d42b      	bmi.n	800aaf0 <_printf_common+0xb0>
 800aa98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	47c0      	blx	r8
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d01e      	beq.n	800aae4 <_printf_common+0xa4>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	68e5      	ldr	r5, [r4, #12]
 800aaaa:	6832      	ldr	r2, [r6, #0]
 800aaac:	f003 0306 	and.w	r3, r3, #6
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	bf08      	it	eq
 800aab4:	1aad      	subeq	r5, r5, r2
 800aab6:	68a3      	ldr	r3, [r4, #8]
 800aab8:	6922      	ldr	r2, [r4, #16]
 800aaba:	bf0c      	ite	eq
 800aabc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aac0:	2500      	movne	r5, #0
 800aac2:	4293      	cmp	r3, r2
 800aac4:	bfc4      	itt	gt
 800aac6:	1a9b      	subgt	r3, r3, r2
 800aac8:	18ed      	addgt	r5, r5, r3
 800aaca:	2600      	movs	r6, #0
 800aacc:	341a      	adds	r4, #26
 800aace:	42b5      	cmp	r5, r6
 800aad0:	d11a      	bne.n	800ab08 <_printf_common+0xc8>
 800aad2:	2000      	movs	r0, #0
 800aad4:	e008      	b.n	800aae8 <_printf_common+0xa8>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4652      	mov	r2, sl
 800aada:	4649      	mov	r1, r9
 800aadc:	4638      	mov	r0, r7
 800aade:	47c0      	blx	r8
 800aae0:	3001      	adds	r0, #1
 800aae2:	d103      	bne.n	800aaec <_printf_common+0xac>
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaec:	3501      	adds	r5, #1
 800aaee:	e7c6      	b.n	800aa7e <_printf_common+0x3e>
 800aaf0:	18e1      	adds	r1, r4, r3
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	2030      	movs	r0, #48	; 0x30
 800aaf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aafa:	4422      	add	r2, r4
 800aafc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab04:	3302      	adds	r3, #2
 800ab06:	e7c7      	b.n	800aa98 <_printf_common+0x58>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	4638      	mov	r0, r7
 800ab10:	47c0      	blx	r8
 800ab12:	3001      	adds	r0, #1
 800ab14:	d0e6      	beq.n	800aae4 <_printf_common+0xa4>
 800ab16:	3601      	adds	r6, #1
 800ab18:	e7d9      	b.n	800aace <_printf_common+0x8e>
	...

0800ab1c <_printf_i>:
 800ab1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab20:	7e0f      	ldrb	r7, [r1, #24]
 800ab22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab24:	2f78      	cmp	r7, #120	; 0x78
 800ab26:	4691      	mov	r9, r2
 800ab28:	4680      	mov	r8, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	469a      	mov	sl, r3
 800ab2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab32:	d807      	bhi.n	800ab44 <_printf_i+0x28>
 800ab34:	2f62      	cmp	r7, #98	; 0x62
 800ab36:	d80a      	bhi.n	800ab4e <_printf_i+0x32>
 800ab38:	2f00      	cmp	r7, #0
 800ab3a:	f000 80d8 	beq.w	800acee <_printf_i+0x1d2>
 800ab3e:	2f58      	cmp	r7, #88	; 0x58
 800ab40:	f000 80a3 	beq.w	800ac8a <_printf_i+0x16e>
 800ab44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab4c:	e03a      	b.n	800abc4 <_printf_i+0xa8>
 800ab4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab52:	2b15      	cmp	r3, #21
 800ab54:	d8f6      	bhi.n	800ab44 <_printf_i+0x28>
 800ab56:	a101      	add	r1, pc, #4	; (adr r1, 800ab5c <_printf_i+0x40>)
 800ab58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab5c:	0800abb5 	.word	0x0800abb5
 800ab60:	0800abc9 	.word	0x0800abc9
 800ab64:	0800ab45 	.word	0x0800ab45
 800ab68:	0800ab45 	.word	0x0800ab45
 800ab6c:	0800ab45 	.word	0x0800ab45
 800ab70:	0800ab45 	.word	0x0800ab45
 800ab74:	0800abc9 	.word	0x0800abc9
 800ab78:	0800ab45 	.word	0x0800ab45
 800ab7c:	0800ab45 	.word	0x0800ab45
 800ab80:	0800ab45 	.word	0x0800ab45
 800ab84:	0800ab45 	.word	0x0800ab45
 800ab88:	0800acd5 	.word	0x0800acd5
 800ab8c:	0800abf9 	.word	0x0800abf9
 800ab90:	0800acb7 	.word	0x0800acb7
 800ab94:	0800ab45 	.word	0x0800ab45
 800ab98:	0800ab45 	.word	0x0800ab45
 800ab9c:	0800acf7 	.word	0x0800acf7
 800aba0:	0800ab45 	.word	0x0800ab45
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800ab45 	.word	0x0800ab45
 800abac:	0800ab45 	.word	0x0800ab45
 800abb0:	0800acbf 	.word	0x0800acbf
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	602a      	str	r2, [r5, #0]
 800abbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abc4:	2301      	movs	r3, #1
 800abc6:	e0a3      	b.n	800ad10 <_printf_i+0x1f4>
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	6829      	ldr	r1, [r5, #0]
 800abcc:	0606      	lsls	r6, r0, #24
 800abce:	f101 0304 	add.w	r3, r1, #4
 800abd2:	d50a      	bpl.n	800abea <_printf_i+0xce>
 800abd4:	680e      	ldr	r6, [r1, #0]
 800abd6:	602b      	str	r3, [r5, #0]
 800abd8:	2e00      	cmp	r6, #0
 800abda:	da03      	bge.n	800abe4 <_printf_i+0xc8>
 800abdc:	232d      	movs	r3, #45	; 0x2d
 800abde:	4276      	negs	r6, r6
 800abe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe4:	485e      	ldr	r0, [pc, #376]	; (800ad60 <_printf_i+0x244>)
 800abe6:	230a      	movs	r3, #10
 800abe8:	e019      	b.n	800ac1e <_printf_i+0x102>
 800abea:	680e      	ldr	r6, [r1, #0]
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abf2:	bf18      	it	ne
 800abf4:	b236      	sxthne	r6, r6
 800abf6:	e7ef      	b.n	800abd8 <_printf_i+0xbc>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	1d19      	adds	r1, r3, #4
 800abfe:	6029      	str	r1, [r5, #0]
 800ac00:	0601      	lsls	r1, r0, #24
 800ac02:	d501      	bpl.n	800ac08 <_printf_i+0xec>
 800ac04:	681e      	ldr	r6, [r3, #0]
 800ac06:	e002      	b.n	800ac0e <_printf_i+0xf2>
 800ac08:	0646      	lsls	r6, r0, #25
 800ac0a:	d5fb      	bpl.n	800ac04 <_printf_i+0xe8>
 800ac0c:	881e      	ldrh	r6, [r3, #0]
 800ac0e:	4854      	ldr	r0, [pc, #336]	; (800ad60 <_printf_i+0x244>)
 800ac10:	2f6f      	cmp	r7, #111	; 0x6f
 800ac12:	bf0c      	ite	eq
 800ac14:	2308      	moveq	r3, #8
 800ac16:	230a      	movne	r3, #10
 800ac18:	2100      	movs	r1, #0
 800ac1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac1e:	6865      	ldr	r5, [r4, #4]
 800ac20:	60a5      	str	r5, [r4, #8]
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	bfa2      	ittt	ge
 800ac26:	6821      	ldrge	r1, [r4, #0]
 800ac28:	f021 0104 	bicge.w	r1, r1, #4
 800ac2c:	6021      	strge	r1, [r4, #0]
 800ac2e:	b90e      	cbnz	r6, 800ac34 <_printf_i+0x118>
 800ac30:	2d00      	cmp	r5, #0
 800ac32:	d04d      	beq.n	800acd0 <_printf_i+0x1b4>
 800ac34:	4615      	mov	r5, r2
 800ac36:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac3a:	fb03 6711 	mls	r7, r3, r1, r6
 800ac3e:	5dc7      	ldrb	r7, [r0, r7]
 800ac40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac44:	4637      	mov	r7, r6
 800ac46:	42bb      	cmp	r3, r7
 800ac48:	460e      	mov	r6, r1
 800ac4a:	d9f4      	bls.n	800ac36 <_printf_i+0x11a>
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d10b      	bne.n	800ac68 <_printf_i+0x14c>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	07de      	lsls	r6, r3, #31
 800ac54:	d508      	bpl.n	800ac68 <_printf_i+0x14c>
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	6861      	ldr	r1, [r4, #4]
 800ac5a:	4299      	cmp	r1, r3
 800ac5c:	bfde      	ittt	le
 800ac5e:	2330      	movle	r3, #48	; 0x30
 800ac60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac68:	1b52      	subs	r2, r2, r5
 800ac6a:	6122      	str	r2, [r4, #16]
 800ac6c:	f8cd a000 	str.w	sl, [sp]
 800ac70:	464b      	mov	r3, r9
 800ac72:	aa03      	add	r2, sp, #12
 800ac74:	4621      	mov	r1, r4
 800ac76:	4640      	mov	r0, r8
 800ac78:	f7ff fee2 	bl	800aa40 <_printf_common>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d14c      	bne.n	800ad1a <_printf_i+0x1fe>
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	b004      	add	sp, #16
 800ac86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8a:	4835      	ldr	r0, [pc, #212]	; (800ad60 <_printf_i+0x244>)
 800ac8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac90:	6829      	ldr	r1, [r5, #0]
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac98:	6029      	str	r1, [r5, #0]
 800ac9a:	061d      	lsls	r5, r3, #24
 800ac9c:	d514      	bpl.n	800acc8 <_printf_i+0x1ac>
 800ac9e:	07df      	lsls	r7, r3, #31
 800aca0:	bf44      	itt	mi
 800aca2:	f043 0320 	orrmi.w	r3, r3, #32
 800aca6:	6023      	strmi	r3, [r4, #0]
 800aca8:	b91e      	cbnz	r6, 800acb2 <_printf_i+0x196>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	f023 0320 	bic.w	r3, r3, #32
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	2310      	movs	r3, #16
 800acb4:	e7b0      	b.n	800ac18 <_printf_i+0xfc>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	f043 0320 	orr.w	r3, r3, #32
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	2378      	movs	r3, #120	; 0x78
 800acc0:	4828      	ldr	r0, [pc, #160]	; (800ad64 <_printf_i+0x248>)
 800acc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acc6:	e7e3      	b.n	800ac90 <_printf_i+0x174>
 800acc8:	0659      	lsls	r1, r3, #25
 800acca:	bf48      	it	mi
 800accc:	b2b6      	uxthmi	r6, r6
 800acce:	e7e6      	b.n	800ac9e <_printf_i+0x182>
 800acd0:	4615      	mov	r5, r2
 800acd2:	e7bb      	b.n	800ac4c <_printf_i+0x130>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	6826      	ldr	r6, [r4, #0]
 800acd8:	6961      	ldr	r1, [r4, #20]
 800acda:	1d18      	adds	r0, r3, #4
 800acdc:	6028      	str	r0, [r5, #0]
 800acde:	0635      	lsls	r5, r6, #24
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	d501      	bpl.n	800ace8 <_printf_i+0x1cc>
 800ace4:	6019      	str	r1, [r3, #0]
 800ace6:	e002      	b.n	800acee <_printf_i+0x1d2>
 800ace8:	0670      	lsls	r0, r6, #25
 800acea:	d5fb      	bpl.n	800ace4 <_printf_i+0x1c8>
 800acec:	8019      	strh	r1, [r3, #0]
 800acee:	2300      	movs	r3, #0
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	4615      	mov	r5, r2
 800acf4:	e7ba      	b.n	800ac6c <_printf_i+0x150>
 800acf6:	682b      	ldr	r3, [r5, #0]
 800acf8:	1d1a      	adds	r2, r3, #4
 800acfa:	602a      	str	r2, [r5, #0]
 800acfc:	681d      	ldr	r5, [r3, #0]
 800acfe:	6862      	ldr	r2, [r4, #4]
 800ad00:	2100      	movs	r1, #0
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7f5 fa6c 	bl	80001e0 <memchr>
 800ad08:	b108      	cbz	r0, 800ad0e <_printf_i+0x1f2>
 800ad0a:	1b40      	subs	r0, r0, r5
 800ad0c:	6060      	str	r0, [r4, #4]
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	6123      	str	r3, [r4, #16]
 800ad12:	2300      	movs	r3, #0
 800ad14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad18:	e7a8      	b.n	800ac6c <_printf_i+0x150>
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4640      	mov	r0, r8
 800ad22:	47d0      	blx	sl
 800ad24:	3001      	adds	r0, #1
 800ad26:	d0ab      	beq.n	800ac80 <_printf_i+0x164>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	079b      	lsls	r3, r3, #30
 800ad2c:	d413      	bmi.n	800ad56 <_printf_i+0x23a>
 800ad2e:	68e0      	ldr	r0, [r4, #12]
 800ad30:	9b03      	ldr	r3, [sp, #12]
 800ad32:	4298      	cmp	r0, r3
 800ad34:	bfb8      	it	lt
 800ad36:	4618      	movlt	r0, r3
 800ad38:	e7a4      	b.n	800ac84 <_printf_i+0x168>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	4649      	mov	r1, r9
 800ad40:	4640      	mov	r0, r8
 800ad42:	47d0      	blx	sl
 800ad44:	3001      	adds	r0, #1
 800ad46:	d09b      	beq.n	800ac80 <_printf_i+0x164>
 800ad48:	3501      	adds	r5, #1
 800ad4a:	68e3      	ldr	r3, [r4, #12]
 800ad4c:	9903      	ldr	r1, [sp, #12]
 800ad4e:	1a5b      	subs	r3, r3, r1
 800ad50:	42ab      	cmp	r3, r5
 800ad52:	dcf2      	bgt.n	800ad3a <_printf_i+0x21e>
 800ad54:	e7eb      	b.n	800ad2e <_printf_i+0x212>
 800ad56:	2500      	movs	r5, #0
 800ad58:	f104 0619 	add.w	r6, r4, #25
 800ad5c:	e7f5      	b.n	800ad4a <_printf_i+0x22e>
 800ad5e:	bf00      	nop
 800ad60:	0800fe48 	.word	0x0800fe48
 800ad64:	0800fe59 	.word	0x0800fe59

0800ad68 <_scanf_float>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	b087      	sub	sp, #28
 800ad6e:	4617      	mov	r7, r2
 800ad70:	9303      	str	r3, [sp, #12]
 800ad72:	688b      	ldr	r3, [r1, #8]
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad7a:	bf83      	ittte	hi
 800ad7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad80:	195b      	addhi	r3, r3, r5
 800ad82:	9302      	strhi	r3, [sp, #8]
 800ad84:	2300      	movls	r3, #0
 800ad86:	bf86      	itte	hi
 800ad88:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad8c:	608b      	strhi	r3, [r1, #8]
 800ad8e:	9302      	strls	r3, [sp, #8]
 800ad90:	680b      	ldr	r3, [r1, #0]
 800ad92:	468b      	mov	fp, r1
 800ad94:	2500      	movs	r5, #0
 800ad96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad9a:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ada2:	4680      	mov	r8, r0
 800ada4:	460c      	mov	r4, r1
 800ada6:	465e      	mov	r6, fp
 800ada8:	46aa      	mov	sl, r5
 800adaa:	46a9      	mov	r9, r5
 800adac:	9501      	str	r5, [sp, #4]
 800adae:	68a2      	ldr	r2, [r4, #8]
 800adb0:	b152      	cbz	r2, 800adc8 <_scanf_float+0x60>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b4e      	cmp	r3, #78	; 0x4e
 800adb8:	d864      	bhi.n	800ae84 <_scanf_float+0x11c>
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d83c      	bhi.n	800ae38 <_scanf_float+0xd0>
 800adbe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800adc2:	b2c8      	uxtb	r0, r1
 800adc4:	280e      	cmp	r0, #14
 800adc6:	d93a      	bls.n	800ae3e <_scanf_float+0xd6>
 800adc8:	f1b9 0f00 	cmp.w	r9, #0
 800adcc:	d003      	beq.n	800add6 <_scanf_float+0x6e>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adda:	f1ba 0f01 	cmp.w	sl, #1
 800adde:	f200 8113 	bhi.w	800b008 <_scanf_float+0x2a0>
 800ade2:	455e      	cmp	r6, fp
 800ade4:	f200 8105 	bhi.w	800aff2 <_scanf_float+0x28a>
 800ade8:	2501      	movs	r5, #1
 800adea:	4628      	mov	r0, r5
 800adec:	b007      	add	sp, #28
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800adf6:	2a0d      	cmp	r2, #13
 800adf8:	d8e6      	bhi.n	800adc8 <_scanf_float+0x60>
 800adfa:	a101      	add	r1, pc, #4	; (adr r1, 800ae00 <_scanf_float+0x98>)
 800adfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae00:	0800af3f 	.word	0x0800af3f
 800ae04:	0800adc9 	.word	0x0800adc9
 800ae08:	0800adc9 	.word	0x0800adc9
 800ae0c:	0800adc9 	.word	0x0800adc9
 800ae10:	0800af9f 	.word	0x0800af9f
 800ae14:	0800af77 	.word	0x0800af77
 800ae18:	0800adc9 	.word	0x0800adc9
 800ae1c:	0800adc9 	.word	0x0800adc9
 800ae20:	0800af4d 	.word	0x0800af4d
 800ae24:	0800adc9 	.word	0x0800adc9
 800ae28:	0800adc9 	.word	0x0800adc9
 800ae2c:	0800adc9 	.word	0x0800adc9
 800ae30:	0800adc9 	.word	0x0800adc9
 800ae34:	0800af05 	.word	0x0800af05
 800ae38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae3c:	e7db      	b.n	800adf6 <_scanf_float+0x8e>
 800ae3e:	290e      	cmp	r1, #14
 800ae40:	d8c2      	bhi.n	800adc8 <_scanf_float+0x60>
 800ae42:	a001      	add	r0, pc, #4	; (adr r0, 800ae48 <_scanf_float+0xe0>)
 800ae44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae48:	0800aef7 	.word	0x0800aef7
 800ae4c:	0800adc9 	.word	0x0800adc9
 800ae50:	0800aef7 	.word	0x0800aef7
 800ae54:	0800af8b 	.word	0x0800af8b
 800ae58:	0800adc9 	.word	0x0800adc9
 800ae5c:	0800aea5 	.word	0x0800aea5
 800ae60:	0800aee1 	.word	0x0800aee1
 800ae64:	0800aee1 	.word	0x0800aee1
 800ae68:	0800aee1 	.word	0x0800aee1
 800ae6c:	0800aee1 	.word	0x0800aee1
 800ae70:	0800aee1 	.word	0x0800aee1
 800ae74:	0800aee1 	.word	0x0800aee1
 800ae78:	0800aee1 	.word	0x0800aee1
 800ae7c:	0800aee1 	.word	0x0800aee1
 800ae80:	0800aee1 	.word	0x0800aee1
 800ae84:	2b6e      	cmp	r3, #110	; 0x6e
 800ae86:	d809      	bhi.n	800ae9c <_scanf_float+0x134>
 800ae88:	2b60      	cmp	r3, #96	; 0x60
 800ae8a:	d8b2      	bhi.n	800adf2 <_scanf_float+0x8a>
 800ae8c:	2b54      	cmp	r3, #84	; 0x54
 800ae8e:	d077      	beq.n	800af80 <_scanf_float+0x218>
 800ae90:	2b59      	cmp	r3, #89	; 0x59
 800ae92:	d199      	bne.n	800adc8 <_scanf_float+0x60>
 800ae94:	2d07      	cmp	r5, #7
 800ae96:	d197      	bne.n	800adc8 <_scanf_float+0x60>
 800ae98:	2508      	movs	r5, #8
 800ae9a:	e029      	b.n	800aef0 <_scanf_float+0x188>
 800ae9c:	2b74      	cmp	r3, #116	; 0x74
 800ae9e:	d06f      	beq.n	800af80 <_scanf_float+0x218>
 800aea0:	2b79      	cmp	r3, #121	; 0x79
 800aea2:	e7f6      	b.n	800ae92 <_scanf_float+0x12a>
 800aea4:	6821      	ldr	r1, [r4, #0]
 800aea6:	05c8      	lsls	r0, r1, #23
 800aea8:	d51a      	bpl.n	800aee0 <_scanf_float+0x178>
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aeb0:	6021      	str	r1, [r4, #0]
 800aeb2:	f109 0901 	add.w	r9, r9, #1
 800aeb6:	b11b      	cbz	r3, 800aec0 <_scanf_float+0x158>
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	3201      	adds	r2, #1
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	60a2      	str	r2, [r4, #8]
 800aec0:	68a3      	ldr	r3, [r4, #8]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	3301      	adds	r3, #1
 800aeca:	6123      	str	r3, [r4, #16]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3b01      	subs	r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	607b      	str	r3, [r7, #4]
 800aed4:	f340 8084 	ble.w	800afe0 <_scanf_float+0x278>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	603b      	str	r3, [r7, #0]
 800aede:	e766      	b.n	800adae <_scanf_float+0x46>
 800aee0:	eb1a 0f05 	cmn.w	sl, r5
 800aee4:	f47f af70 	bne.w	800adc8 <_scanf_float+0x60>
 800aee8:	6822      	ldr	r2, [r4, #0]
 800aeea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	f806 3b01 	strb.w	r3, [r6], #1
 800aef4:	e7e4      	b.n	800aec0 <_scanf_float+0x158>
 800aef6:	6822      	ldr	r2, [r4, #0]
 800aef8:	0610      	lsls	r0, r2, #24
 800aefa:	f57f af65 	bpl.w	800adc8 <_scanf_float+0x60>
 800aefe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af02:	e7f4      	b.n	800aeee <_scanf_float+0x186>
 800af04:	f1ba 0f00 	cmp.w	sl, #0
 800af08:	d10e      	bne.n	800af28 <_scanf_float+0x1c0>
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	d10e      	bne.n	800af2e <_scanf_float+0x1c6>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af1a:	d108      	bne.n	800af2e <_scanf_float+0x1c6>
 800af1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af20:	6022      	str	r2, [r4, #0]
 800af22:	f04f 0a01 	mov.w	sl, #1
 800af26:	e7e3      	b.n	800aef0 <_scanf_float+0x188>
 800af28:	f1ba 0f02 	cmp.w	sl, #2
 800af2c:	d055      	beq.n	800afda <_scanf_float+0x272>
 800af2e:	2d01      	cmp	r5, #1
 800af30:	d002      	beq.n	800af38 <_scanf_float+0x1d0>
 800af32:	2d04      	cmp	r5, #4
 800af34:	f47f af48 	bne.w	800adc8 <_scanf_float+0x60>
 800af38:	3501      	adds	r5, #1
 800af3a:	b2ed      	uxtb	r5, r5
 800af3c:	e7d8      	b.n	800aef0 <_scanf_float+0x188>
 800af3e:	f1ba 0f01 	cmp.w	sl, #1
 800af42:	f47f af41 	bne.w	800adc8 <_scanf_float+0x60>
 800af46:	f04f 0a02 	mov.w	sl, #2
 800af4a:	e7d1      	b.n	800aef0 <_scanf_float+0x188>
 800af4c:	b97d      	cbnz	r5, 800af6e <_scanf_float+0x206>
 800af4e:	f1b9 0f00 	cmp.w	r9, #0
 800af52:	f47f af3c 	bne.w	800adce <_scanf_float+0x66>
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af60:	f47f af39 	bne.w	800add6 <_scanf_float+0x6e>
 800af64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af68:	6022      	str	r2, [r4, #0]
 800af6a:	2501      	movs	r5, #1
 800af6c:	e7c0      	b.n	800aef0 <_scanf_float+0x188>
 800af6e:	2d03      	cmp	r5, #3
 800af70:	d0e2      	beq.n	800af38 <_scanf_float+0x1d0>
 800af72:	2d05      	cmp	r5, #5
 800af74:	e7de      	b.n	800af34 <_scanf_float+0x1cc>
 800af76:	2d02      	cmp	r5, #2
 800af78:	f47f af26 	bne.w	800adc8 <_scanf_float+0x60>
 800af7c:	2503      	movs	r5, #3
 800af7e:	e7b7      	b.n	800aef0 <_scanf_float+0x188>
 800af80:	2d06      	cmp	r5, #6
 800af82:	f47f af21 	bne.w	800adc8 <_scanf_float+0x60>
 800af86:	2507      	movs	r5, #7
 800af88:	e7b2      	b.n	800aef0 <_scanf_float+0x188>
 800af8a:	6822      	ldr	r2, [r4, #0]
 800af8c:	0591      	lsls	r1, r2, #22
 800af8e:	f57f af1b 	bpl.w	800adc8 <_scanf_float+0x60>
 800af92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af96:	6022      	str	r2, [r4, #0]
 800af98:	f8cd 9004 	str.w	r9, [sp, #4]
 800af9c:	e7a8      	b.n	800aef0 <_scanf_float+0x188>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800afa4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800afa8:	d006      	beq.n	800afb8 <_scanf_float+0x250>
 800afaa:	0550      	lsls	r0, r2, #21
 800afac:	f57f af0c 	bpl.w	800adc8 <_scanf_float+0x60>
 800afb0:	f1b9 0f00 	cmp.w	r9, #0
 800afb4:	f43f af0f 	beq.w	800add6 <_scanf_float+0x6e>
 800afb8:	0591      	lsls	r1, r2, #22
 800afba:	bf58      	it	pl
 800afbc:	9901      	ldrpl	r1, [sp, #4]
 800afbe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afc2:	bf58      	it	pl
 800afc4:	eba9 0101 	subpl.w	r1, r9, r1
 800afc8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800afcc:	bf58      	it	pl
 800afce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afd2:	6022      	str	r2, [r4, #0]
 800afd4:	f04f 0900 	mov.w	r9, #0
 800afd8:	e78a      	b.n	800aef0 <_scanf_float+0x188>
 800afda:	f04f 0a03 	mov.w	sl, #3
 800afde:	e787      	b.n	800aef0 <_scanf_float+0x188>
 800afe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afe4:	4639      	mov	r1, r7
 800afe6:	4640      	mov	r0, r8
 800afe8:	4798      	blx	r3
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f aedf 	beq.w	800adae <_scanf_float+0x46>
 800aff0:	e6ea      	b.n	800adc8 <_scanf_float+0x60>
 800aff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800affa:	463a      	mov	r2, r7
 800affc:	4640      	mov	r0, r8
 800affe:	4798      	blx	r3
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	3b01      	subs	r3, #1
 800b004:	6123      	str	r3, [r4, #16]
 800b006:	e6ec      	b.n	800ade2 <_scanf_float+0x7a>
 800b008:	1e6b      	subs	r3, r5, #1
 800b00a:	2b06      	cmp	r3, #6
 800b00c:	d825      	bhi.n	800b05a <_scanf_float+0x2f2>
 800b00e:	2d02      	cmp	r5, #2
 800b010:	d836      	bhi.n	800b080 <_scanf_float+0x318>
 800b012:	455e      	cmp	r6, fp
 800b014:	f67f aee8 	bls.w	800ade8 <_scanf_float+0x80>
 800b018:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b01c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b020:	463a      	mov	r2, r7
 800b022:	4640      	mov	r0, r8
 800b024:	4798      	blx	r3
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	3b01      	subs	r3, #1
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	e7f1      	b.n	800b012 <_scanf_float+0x2aa>
 800b02e:	9802      	ldr	r0, [sp, #8]
 800b030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b034:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b038:	9002      	str	r0, [sp, #8]
 800b03a:	463a      	mov	r2, r7
 800b03c:	4640      	mov	r0, r8
 800b03e:	4798      	blx	r3
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	3b01      	subs	r3, #1
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b04a:	fa5f fa8a 	uxtb.w	sl, sl
 800b04e:	f1ba 0f02 	cmp.w	sl, #2
 800b052:	d1ec      	bne.n	800b02e <_scanf_float+0x2c6>
 800b054:	3d03      	subs	r5, #3
 800b056:	b2ed      	uxtb	r5, r5
 800b058:	1b76      	subs	r6, r6, r5
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	05da      	lsls	r2, r3, #23
 800b05e:	d52f      	bpl.n	800b0c0 <_scanf_float+0x358>
 800b060:	055b      	lsls	r3, r3, #21
 800b062:	d510      	bpl.n	800b086 <_scanf_float+0x31e>
 800b064:	455e      	cmp	r6, fp
 800b066:	f67f aebf 	bls.w	800ade8 <_scanf_float+0x80>
 800b06a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b06e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b072:	463a      	mov	r2, r7
 800b074:	4640      	mov	r0, r8
 800b076:	4798      	blx	r3
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	e7f1      	b.n	800b064 <_scanf_float+0x2fc>
 800b080:	46aa      	mov	sl, r5
 800b082:	9602      	str	r6, [sp, #8]
 800b084:	e7df      	b.n	800b046 <_scanf_float+0x2de>
 800b086:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	2965      	cmp	r1, #101	; 0x65
 800b08e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b092:	f106 35ff 	add.w	r5, r6, #4294967295
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	d00c      	beq.n	800b0b4 <_scanf_float+0x34c>
 800b09a:	2945      	cmp	r1, #69	; 0x45
 800b09c:	d00a      	beq.n	800b0b4 <_scanf_float+0x34c>
 800b09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4798      	blx	r3
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	1eb5      	subs	r5, r6, #2
 800b0b2:	6123      	str	r3, [r4, #16]
 800b0b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0b8:	463a      	mov	r2, r7
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	4798      	blx	r3
 800b0be:	462e      	mov	r6, r5
 800b0c0:	6825      	ldr	r5, [r4, #0]
 800b0c2:	f015 0510 	ands.w	r5, r5, #16
 800b0c6:	d159      	bne.n	800b17c <_scanf_float+0x414>
 800b0c8:	7035      	strb	r5, [r6, #0]
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0d4:	d11b      	bne.n	800b10e <_scanf_float+0x3a6>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	454b      	cmp	r3, r9
 800b0da:	eba3 0209 	sub.w	r2, r3, r9
 800b0de:	d123      	bne.n	800b128 <_scanf_float+0x3c0>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	f000 ffc9 	bl	800c07c <_strtod_r>
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	f012 0f02 	tst.w	r2, #2
 800b0f2:	ec57 6b10 	vmov	r6, r7, d0
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	d021      	beq.n	800b13e <_scanf_float+0x3d6>
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	600a      	str	r2, [r1, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	e9c3 6700 	strd	r6, r7, [r3]
 800b106:	68e3      	ldr	r3, [r4, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	60e3      	str	r3, [r4, #12]
 800b10c:	e66d      	b.n	800adea <_scanf_float+0x82>
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d0e5      	beq.n	800b0e0 <_scanf_float+0x378>
 800b114:	9905      	ldr	r1, [sp, #20]
 800b116:	230a      	movs	r3, #10
 800b118:	462a      	mov	r2, r5
 800b11a:	3101      	adds	r1, #1
 800b11c:	4640      	mov	r0, r8
 800b11e:	f001 f835 	bl	800c18c <_strtol_r>
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	9e05      	ldr	r6, [sp, #20]
 800b126:	1ac2      	subs	r2, r0, r3
 800b128:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b12c:	429e      	cmp	r6, r3
 800b12e:	bf28      	it	cs
 800b130:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b134:	4912      	ldr	r1, [pc, #72]	; (800b180 <_scanf_float+0x418>)
 800b136:	4630      	mov	r0, r6
 800b138:	f000 f8d0 	bl	800b2dc <siprintf>
 800b13c:	e7d0      	b.n	800b0e0 <_scanf_float+0x378>
 800b13e:	9903      	ldr	r1, [sp, #12]
 800b140:	f012 0f04 	tst.w	r2, #4
 800b144:	f103 0204 	add.w	r2, r3, #4
 800b148:	600a      	str	r2, [r1, #0]
 800b14a:	d1d9      	bne.n	800b100 <_scanf_float+0x398>
 800b14c:	f8d3 8000 	ldr.w	r8, [r3]
 800b150:	ee10 2a10 	vmov	r2, s0
 800b154:	ee10 0a10 	vmov	r0, s0
 800b158:	463b      	mov	r3, r7
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 fce6 	bl	8000b2c <__aeabi_dcmpun>
 800b160:	b128      	cbz	r0, 800b16e <_scanf_float+0x406>
 800b162:	4808      	ldr	r0, [pc, #32]	; (800b184 <_scanf_float+0x41c>)
 800b164:	f000 f8b4 	bl	800b2d0 <nanf>
 800b168:	ed88 0a00 	vstr	s0, [r8]
 800b16c:	e7cb      	b.n	800b106 <_scanf_float+0x39e>
 800b16e:	4630      	mov	r0, r6
 800b170:	4639      	mov	r1, r7
 800b172:	f7f5 fd39 	bl	8000be8 <__aeabi_d2f>
 800b176:	f8c8 0000 	str.w	r0, [r8]
 800b17a:	e7c4      	b.n	800b106 <_scanf_float+0x39e>
 800b17c:	2500      	movs	r5, #0
 800b17e:	e634      	b.n	800adea <_scanf_float+0x82>
 800b180:	0800fe6a 	.word	0x0800fe6a
 800b184:	080102f3 	.word	0x080102f3

0800b188 <iprintf>:
 800b188:	b40f      	push	{r0, r1, r2, r3}
 800b18a:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <iprintf+0x2c>)
 800b18c:	b513      	push	{r0, r1, r4, lr}
 800b18e:	681c      	ldr	r4, [r3, #0]
 800b190:	b124      	cbz	r4, 800b19c <iprintf+0x14>
 800b192:	69a3      	ldr	r3, [r4, #24]
 800b194:	b913      	cbnz	r3, 800b19c <iprintf+0x14>
 800b196:	4620      	mov	r0, r4
 800b198:	f002 f872 	bl	800d280 <__sinit>
 800b19c:	ab05      	add	r3, sp, #20
 800b19e:	9a04      	ldr	r2, [sp, #16]
 800b1a0:	68a1      	ldr	r1, [r4, #8]
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f003 fe2f 	bl	800ee08 <_vfiprintf_r>
 800b1aa:	b002      	add	sp, #8
 800b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b0:	b004      	add	sp, #16
 800b1b2:	4770      	bx	lr
 800b1b4:	20000040 	.word	0x20000040

0800b1b8 <putchar>:
 800b1b8:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <putchar+0x28>)
 800b1ba:	b513      	push	{r0, r1, r4, lr}
 800b1bc:	681c      	ldr	r4, [r3, #0]
 800b1be:	4601      	mov	r1, r0
 800b1c0:	b134      	cbz	r4, 800b1d0 <putchar+0x18>
 800b1c2:	69a3      	ldr	r3, [r4, #24]
 800b1c4:	b923      	cbnz	r3, 800b1d0 <putchar+0x18>
 800b1c6:	9001      	str	r0, [sp, #4]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f002 f859 	bl	800d280 <__sinit>
 800b1ce:	9901      	ldr	r1, [sp, #4]
 800b1d0:	68a2      	ldr	r2, [r4, #8]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	b002      	add	sp, #8
 800b1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1da:	f004 b897 	b.w	800f30c <_putc_r>
 800b1de:	bf00      	nop
 800b1e0:	20000040 	.word	0x20000040

0800b1e4 <_puts_r>:
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	460e      	mov	r6, r1
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	b118      	cbz	r0, 800b1f4 <_puts_r+0x10>
 800b1ec:	6983      	ldr	r3, [r0, #24]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <_puts_r+0x10>
 800b1f0:	f002 f846 	bl	800d280 <__sinit>
 800b1f4:	69ab      	ldr	r3, [r5, #24]
 800b1f6:	68ac      	ldr	r4, [r5, #8]
 800b1f8:	b913      	cbnz	r3, 800b200 <_puts_r+0x1c>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f002 f840 	bl	800d280 <__sinit>
 800b200:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <_puts_r+0xd0>)
 800b202:	429c      	cmp	r4, r3
 800b204:	d120      	bne.n	800b248 <_puts_r+0x64>
 800b206:	686c      	ldr	r4, [r5, #4]
 800b208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b20a:	07db      	lsls	r3, r3, #31
 800b20c:	d405      	bmi.n	800b21a <_puts_r+0x36>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	0598      	lsls	r0, r3, #22
 800b212:	d402      	bmi.n	800b21a <_puts_r+0x36>
 800b214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b216:	f002 fc44 	bl	800daa2 <__retarget_lock_acquire_recursive>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	0719      	lsls	r1, r3, #28
 800b21e:	d51d      	bpl.n	800b25c <_puts_r+0x78>
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	b1db      	cbz	r3, 800b25c <_puts_r+0x78>
 800b224:	3e01      	subs	r6, #1
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b22c:	3b01      	subs	r3, #1
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	bb39      	cbnz	r1, 800b282 <_puts_r+0x9e>
 800b232:	2b00      	cmp	r3, #0
 800b234:	da38      	bge.n	800b2a8 <_puts_r+0xc4>
 800b236:	4622      	mov	r2, r4
 800b238:	210a      	movs	r1, #10
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 ffa8 	bl	800c190 <__swbuf_r>
 800b240:	3001      	adds	r0, #1
 800b242:	d011      	beq.n	800b268 <_puts_r+0x84>
 800b244:	250a      	movs	r5, #10
 800b246:	e011      	b.n	800b26c <_puts_r+0x88>
 800b248:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <_puts_r+0xd4>)
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d101      	bne.n	800b252 <_puts_r+0x6e>
 800b24e:	68ac      	ldr	r4, [r5, #8]
 800b250:	e7da      	b.n	800b208 <_puts_r+0x24>
 800b252:	4b1a      	ldr	r3, [pc, #104]	; (800b2bc <_puts_r+0xd8>)
 800b254:	429c      	cmp	r4, r3
 800b256:	bf08      	it	eq
 800b258:	68ec      	ldreq	r4, [r5, #12]
 800b25a:	e7d5      	b.n	800b208 <_puts_r+0x24>
 800b25c:	4621      	mov	r1, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 fffa 	bl	800c258 <__swsetup_r>
 800b264:	2800      	cmp	r0, #0
 800b266:	d0dd      	beq.n	800b224 <_puts_r+0x40>
 800b268:	f04f 35ff 	mov.w	r5, #4294967295
 800b26c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26e:	07da      	lsls	r2, r3, #31
 800b270:	d405      	bmi.n	800b27e <_puts_r+0x9a>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	059b      	lsls	r3, r3, #22
 800b276:	d402      	bmi.n	800b27e <_puts_r+0x9a>
 800b278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27a:	f002 fc13 	bl	800daa4 <__retarget_lock_release_recursive>
 800b27e:	4628      	mov	r0, r5
 800b280:	bd70      	pop	{r4, r5, r6, pc}
 800b282:	2b00      	cmp	r3, #0
 800b284:	da04      	bge.n	800b290 <_puts_r+0xac>
 800b286:	69a2      	ldr	r2, [r4, #24]
 800b288:	429a      	cmp	r2, r3
 800b28a:	dc06      	bgt.n	800b29a <_puts_r+0xb6>
 800b28c:	290a      	cmp	r1, #10
 800b28e:	d004      	beq.n	800b29a <_puts_r+0xb6>
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	6022      	str	r2, [r4, #0]
 800b296:	7019      	strb	r1, [r3, #0]
 800b298:	e7c5      	b.n	800b226 <_puts_r+0x42>
 800b29a:	4622      	mov	r2, r4
 800b29c:	4628      	mov	r0, r5
 800b29e:	f000 ff77 	bl	800c190 <__swbuf_r>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d1bf      	bne.n	800b226 <_puts_r+0x42>
 800b2a6:	e7df      	b.n	800b268 <_puts_r+0x84>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	250a      	movs	r5, #10
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	701d      	strb	r5, [r3, #0]
 800b2b2:	e7db      	b.n	800b26c <_puts_r+0x88>
 800b2b4:	08010074 	.word	0x08010074
 800b2b8:	08010094 	.word	0x08010094
 800b2bc:	08010054 	.word	0x08010054

0800b2c0 <puts>:
 800b2c0:	4b02      	ldr	r3, [pc, #8]	; (800b2cc <puts+0xc>)
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	f7ff bf8d 	b.w	800b1e4 <_puts_r>
 800b2ca:	bf00      	nop
 800b2cc:	20000040 	.word	0x20000040

0800b2d0 <nanf>:
 800b2d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2d8 <nanf+0x8>
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	7fc00000 	.word	0x7fc00000

0800b2dc <siprintf>:
 800b2dc:	b40e      	push	{r1, r2, r3}
 800b2de:	b500      	push	{lr}
 800b2e0:	b09c      	sub	sp, #112	; 0x70
 800b2e2:	ab1d      	add	r3, sp, #116	; 0x74
 800b2e4:	9002      	str	r0, [sp, #8]
 800b2e6:	9006      	str	r0, [sp, #24]
 800b2e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2ec:	4809      	ldr	r0, [pc, #36]	; (800b314 <siprintf+0x38>)
 800b2ee:	9107      	str	r1, [sp, #28]
 800b2f0:	9104      	str	r1, [sp, #16]
 800b2f2:	4909      	ldr	r1, [pc, #36]	; (800b318 <siprintf+0x3c>)
 800b2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f8:	9105      	str	r1, [sp, #20]
 800b2fa:	6800      	ldr	r0, [r0, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	a902      	add	r1, sp, #8
 800b300:	f003 fa86 	bl	800e810 <_svfiprintf_r>
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	2200      	movs	r2, #0
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	b01c      	add	sp, #112	; 0x70
 800b30c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b310:	b003      	add	sp, #12
 800b312:	4770      	bx	lr
 800b314:	20000040 	.word	0x20000040
 800b318:	ffff0208 	.word	0xffff0208

0800b31c <siscanf>:
 800b31c:	b40e      	push	{r1, r2, r3}
 800b31e:	b510      	push	{r4, lr}
 800b320:	b09f      	sub	sp, #124	; 0x7c
 800b322:	ac21      	add	r4, sp, #132	; 0x84
 800b324:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b328:	f854 2b04 	ldr.w	r2, [r4], #4
 800b32c:	9201      	str	r2, [sp, #4]
 800b32e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b332:	9004      	str	r0, [sp, #16]
 800b334:	9008      	str	r0, [sp, #32]
 800b336:	f7f4 ff4b 	bl	80001d0 <strlen>
 800b33a:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <siscanf+0x50>)
 800b33c:	9005      	str	r0, [sp, #20]
 800b33e:	9009      	str	r0, [sp, #36]	; 0x24
 800b340:	930d      	str	r3, [sp, #52]	; 0x34
 800b342:	480b      	ldr	r0, [pc, #44]	; (800b370 <siscanf+0x54>)
 800b344:	9a01      	ldr	r2, [sp, #4]
 800b346:	6800      	ldr	r0, [r0, #0]
 800b348:	9403      	str	r4, [sp, #12]
 800b34a:	2300      	movs	r3, #0
 800b34c:	9311      	str	r3, [sp, #68]	; 0x44
 800b34e:	9316      	str	r3, [sp, #88]	; 0x58
 800b350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b354:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4623      	mov	r3, r4
 800b35c:	f003 fbb2 	bl	800eac4 <__ssvfiscanf_r>
 800b360:	b01f      	add	sp, #124	; 0x7c
 800b362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b366:	b003      	add	sp, #12
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	0800b397 	.word	0x0800b397
 800b370:	20000040 	.word	0x20000040

0800b374 <__sread>:
 800b374:	b510      	push	{r4, lr}
 800b376:	460c      	mov	r4, r1
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	f004 f80e 	bl	800f39c <_read_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	bfab      	itete	ge
 800b384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b386:	89a3      	ldrhlt	r3, [r4, #12]
 800b388:	181b      	addge	r3, r3, r0
 800b38a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b38e:	bfac      	ite	ge
 800b390:	6563      	strge	r3, [r4, #84]	; 0x54
 800b392:	81a3      	strhlt	r3, [r4, #12]
 800b394:	bd10      	pop	{r4, pc}

0800b396 <__seofread>:
 800b396:	2000      	movs	r0, #0
 800b398:	4770      	bx	lr

0800b39a <__swrite>:
 800b39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	461f      	mov	r7, r3
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	05db      	lsls	r3, r3, #23
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	d505      	bpl.n	800b3b8 <__swrite+0x1e>
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f002 fb78 	bl	800daa8 <_lseek_r>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	f000 bf31 	b.w	800c234 <_write_r>

0800b3d2 <__sseek>:
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3da:	f002 fb65 	bl	800daa8 <_lseek_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	bf15      	itete	ne
 800b3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ee:	81a3      	strheq	r3, [r4, #12]
 800b3f0:	bf18      	it	ne
 800b3f2:	81a3      	strhne	r3, [r4, #12]
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <__sclose>:
 800b3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3fa:	f000 bf9b 	b.w	800c334 <_close_r>

0800b3fe <strcpy>:
 800b3fe:	4603      	mov	r3, r0
 800b400:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b404:	f803 2b01 	strb.w	r2, [r3], #1
 800b408:	2a00      	cmp	r2, #0
 800b40a:	d1f9      	bne.n	800b400 <strcpy+0x2>
 800b40c:	4770      	bx	lr

0800b40e <strncmp>:
 800b40e:	b510      	push	{r4, lr}
 800b410:	b17a      	cbz	r2, 800b432 <strncmp+0x24>
 800b412:	4603      	mov	r3, r0
 800b414:	3901      	subs	r1, #1
 800b416:	1884      	adds	r4, r0, r2
 800b418:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b41c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b420:	4290      	cmp	r0, r2
 800b422:	d101      	bne.n	800b428 <strncmp+0x1a>
 800b424:	42a3      	cmp	r3, r4
 800b426:	d101      	bne.n	800b42c <strncmp+0x1e>
 800b428:	1a80      	subs	r0, r0, r2
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d1f3      	bne.n	800b418 <strncmp+0xa>
 800b430:	e7fa      	b.n	800b428 <strncmp+0x1a>
 800b432:	4610      	mov	r0, r2
 800b434:	e7f9      	b.n	800b42a <strncmp+0x1c>

0800b436 <sulp>:
 800b436:	b570      	push	{r4, r5, r6, lr}
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	ec45 4b10 	vmov	d0, r4, r5
 800b440:	4616      	mov	r6, r2
 800b442:	f002 ff43 	bl	800e2cc <__ulp>
 800b446:	ec51 0b10 	vmov	r0, r1, d0
 800b44a:	b17e      	cbz	r6, 800b46c <sulp+0x36>
 800b44c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b450:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b454:	2b00      	cmp	r3, #0
 800b456:	dd09      	ble.n	800b46c <sulp+0x36>
 800b458:	051b      	lsls	r3, r3, #20
 800b45a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b45e:	2400      	movs	r4, #0
 800b460:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b464:	4622      	mov	r2, r4
 800b466:	462b      	mov	r3, r5
 800b468:	f7f5 f8c6 	bl	80005f8 <__aeabi_dmul>
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b470 <_strtod_l>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	ed2d 8b02 	vpush	{d8}
 800b478:	b09d      	sub	sp, #116	; 0x74
 800b47a:	461f      	mov	r7, r3
 800b47c:	2300      	movs	r3, #0
 800b47e:	9318      	str	r3, [sp, #96]	; 0x60
 800b480:	4ba2      	ldr	r3, [pc, #648]	; (800b70c <_strtod_l+0x29c>)
 800b482:	9213      	str	r2, [sp, #76]	; 0x4c
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	9305      	str	r3, [sp, #20]
 800b488:	4604      	mov	r4, r0
 800b48a:	4618      	mov	r0, r3
 800b48c:	4688      	mov	r8, r1
 800b48e:	f7f4 fe9f 	bl	80001d0 <strlen>
 800b492:	f04f 0a00 	mov.w	sl, #0
 800b496:	4605      	mov	r5, r0
 800b498:	f04f 0b00 	mov.w	fp, #0
 800b49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	2a2b      	cmp	r2, #43	; 0x2b
 800b4a6:	d04e      	beq.n	800b546 <_strtod_l+0xd6>
 800b4a8:	d83b      	bhi.n	800b522 <_strtod_l+0xb2>
 800b4aa:	2a0d      	cmp	r2, #13
 800b4ac:	d834      	bhi.n	800b518 <_strtod_l+0xa8>
 800b4ae:	2a08      	cmp	r2, #8
 800b4b0:	d834      	bhi.n	800b51c <_strtod_l+0xac>
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d03e      	beq.n	800b534 <_strtod_l+0xc4>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4bc:	7833      	ldrb	r3, [r6, #0]
 800b4be:	2b30      	cmp	r3, #48	; 0x30
 800b4c0:	f040 80b0 	bne.w	800b624 <_strtod_l+0x1b4>
 800b4c4:	7873      	ldrb	r3, [r6, #1]
 800b4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4ca:	2b58      	cmp	r3, #88	; 0x58
 800b4cc:	d168      	bne.n	800b5a0 <_strtod_l+0x130>
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	ab18      	add	r3, sp, #96	; 0x60
 800b4d4:	9702      	str	r7, [sp, #8]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	4a8d      	ldr	r2, [pc, #564]	; (800b710 <_strtod_l+0x2a0>)
 800b4da:	ab19      	add	r3, sp, #100	; 0x64
 800b4dc:	a917      	add	r1, sp, #92	; 0x5c
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 ffd2 	bl	800d488 <__gethex>
 800b4e4:	f010 0707 	ands.w	r7, r0, #7
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	d005      	beq.n	800b4f8 <_strtod_l+0x88>
 800b4ec:	2f06      	cmp	r7, #6
 800b4ee:	d12c      	bne.n	800b54a <_strtod_l+0xda>
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 8590 	bne.w	800c020 <_strtod_l+0xbb0>
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	b1eb      	cbz	r3, 800b540 <_strtod_l+0xd0>
 800b504:	4652      	mov	r2, sl
 800b506:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b50a:	ec43 2b10 	vmov	d0, r2, r3
 800b50e:	b01d      	add	sp, #116	; 0x74
 800b510:	ecbd 8b02 	vpop	{d8}
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	2a20      	cmp	r2, #32
 800b51a:	d1cc      	bne.n	800b4b6 <_strtod_l+0x46>
 800b51c:	3301      	adds	r3, #1
 800b51e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b520:	e7be      	b.n	800b4a0 <_strtod_l+0x30>
 800b522:	2a2d      	cmp	r2, #45	; 0x2d
 800b524:	d1c7      	bne.n	800b4b6 <_strtod_l+0x46>
 800b526:	2201      	movs	r2, #1
 800b528:	920a      	str	r2, [sp, #40]	; 0x28
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b52e:	785b      	ldrb	r3, [r3, #1]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1c2      	bne.n	800b4ba <_strtod_l+0x4a>
 800b534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b536:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f040 856e 	bne.w	800c01c <_strtod_l+0xbac>
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	e7e1      	b.n	800b50a <_strtod_l+0x9a>
 800b546:	2200      	movs	r2, #0
 800b548:	e7ee      	b.n	800b528 <_strtod_l+0xb8>
 800b54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b54c:	b13a      	cbz	r2, 800b55e <_strtod_l+0xee>
 800b54e:	2135      	movs	r1, #53	; 0x35
 800b550:	a81a      	add	r0, sp, #104	; 0x68
 800b552:	f002 ffc6 	bl	800e4e2 <__copybits>
 800b556:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b558:	4620      	mov	r0, r4
 800b55a:	f002 fb85 	bl	800dc68 <_Bfree>
 800b55e:	3f01      	subs	r7, #1
 800b560:	2f04      	cmp	r7, #4
 800b562:	d806      	bhi.n	800b572 <_strtod_l+0x102>
 800b564:	e8df f007 	tbb	[pc, r7]
 800b568:	1714030a 	.word	0x1714030a
 800b56c:	0a          	.byte	0x0a
 800b56d:	00          	.byte	0x00
 800b56e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b572:	0728      	lsls	r0, r5, #28
 800b574:	d5c0      	bpl.n	800b4f8 <_strtod_l+0x88>
 800b576:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b57a:	e7bd      	b.n	800b4f8 <_strtod_l+0x88>
 800b57c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b586:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b58a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b58e:	e7f0      	b.n	800b572 <_strtod_l+0x102>
 800b590:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b714 <_strtod_l+0x2a4>
 800b594:	e7ed      	b.n	800b572 <_strtod_l+0x102>
 800b596:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b59a:	f04f 3aff 	mov.w	sl, #4294967295
 800b59e:	e7e8      	b.n	800b572 <_strtod_l+0x102>
 800b5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5a6:	785b      	ldrb	r3, [r3, #1]
 800b5a8:	2b30      	cmp	r3, #48	; 0x30
 800b5aa:	d0f9      	beq.n	800b5a0 <_strtod_l+0x130>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0a3      	beq.n	800b4f8 <_strtod_l+0x88>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f04f 0900 	mov.w	r9, #0
 800b5b6:	9304      	str	r3, [sp, #16]
 800b5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b5c0:	464f      	mov	r7, r9
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b5c6:	7806      	ldrb	r6, [r0, #0]
 800b5c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b5cc:	b2d9      	uxtb	r1, r3
 800b5ce:	2909      	cmp	r1, #9
 800b5d0:	d92a      	bls.n	800b628 <_strtod_l+0x1b8>
 800b5d2:	9905      	ldr	r1, [sp, #20]
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	f7ff ff1a 	bl	800b40e <strncmp>
 800b5da:	b398      	cbz	r0, 800b644 <_strtod_l+0x1d4>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	4632      	mov	r2, r6
 800b5e0:	463d      	mov	r5, r7
 800b5e2:	9005      	str	r0, [sp, #20]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2a65      	cmp	r2, #101	; 0x65
 800b5e8:	d001      	beq.n	800b5ee <_strtod_l+0x17e>
 800b5ea:	2a45      	cmp	r2, #69	; 0x45
 800b5ec:	d118      	bne.n	800b620 <_strtod_l+0x1b0>
 800b5ee:	b91d      	cbnz	r5, 800b5f8 <_strtod_l+0x188>
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	4302      	orrs	r2, r0
 800b5f4:	d09e      	beq.n	800b534 <_strtod_l+0xc4>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b5fc:	f108 0201 	add.w	r2, r8, #1
 800b600:	9217      	str	r2, [sp, #92]	; 0x5c
 800b602:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b606:	2a2b      	cmp	r2, #43	; 0x2b
 800b608:	d075      	beq.n	800b6f6 <_strtod_l+0x286>
 800b60a:	2a2d      	cmp	r2, #45	; 0x2d
 800b60c:	d07b      	beq.n	800b706 <_strtod_l+0x296>
 800b60e:	f04f 0c00 	mov.w	ip, #0
 800b612:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b616:	2909      	cmp	r1, #9
 800b618:	f240 8082 	bls.w	800b720 <_strtod_l+0x2b0>
 800b61c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b620:	2600      	movs	r6, #0
 800b622:	e09d      	b.n	800b760 <_strtod_l+0x2f0>
 800b624:	2300      	movs	r3, #0
 800b626:	e7c4      	b.n	800b5b2 <_strtod_l+0x142>
 800b628:	2f08      	cmp	r7, #8
 800b62a:	bfd8      	it	le
 800b62c:	9907      	ldrle	r1, [sp, #28]
 800b62e:	f100 0001 	add.w	r0, r0, #1
 800b632:	bfda      	itte	le
 800b634:	fb02 3301 	mlale	r3, r2, r1, r3
 800b638:	9307      	strle	r3, [sp, #28]
 800b63a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b63e:	3701      	adds	r7, #1
 800b640:	9017      	str	r0, [sp, #92]	; 0x5c
 800b642:	e7bf      	b.n	800b5c4 <_strtod_l+0x154>
 800b644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b646:	195a      	adds	r2, r3, r5
 800b648:	9217      	str	r2, [sp, #92]	; 0x5c
 800b64a:	5d5a      	ldrb	r2, [r3, r5]
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	d037      	beq.n	800b6c0 <_strtod_l+0x250>
 800b650:	9005      	str	r0, [sp, #20]
 800b652:	463d      	mov	r5, r7
 800b654:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b658:	2b09      	cmp	r3, #9
 800b65a:	d912      	bls.n	800b682 <_strtod_l+0x212>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e7c2      	b.n	800b5e6 <_strtod_l+0x176>
 800b660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	9217      	str	r2, [sp, #92]	; 0x5c
 800b666:	785a      	ldrb	r2, [r3, #1]
 800b668:	3001      	adds	r0, #1
 800b66a:	2a30      	cmp	r2, #48	; 0x30
 800b66c:	d0f8      	beq.n	800b660 <_strtod_l+0x1f0>
 800b66e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b672:	2b08      	cmp	r3, #8
 800b674:	f200 84d9 	bhi.w	800c02a <_strtod_l+0xbba>
 800b678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b67a:	9005      	str	r0, [sp, #20]
 800b67c:	2000      	movs	r0, #0
 800b67e:	9308      	str	r3, [sp, #32]
 800b680:	4605      	mov	r5, r0
 800b682:	3a30      	subs	r2, #48	; 0x30
 800b684:	f100 0301 	add.w	r3, r0, #1
 800b688:	d014      	beq.n	800b6b4 <_strtod_l+0x244>
 800b68a:	9905      	ldr	r1, [sp, #20]
 800b68c:	4419      	add	r1, r3
 800b68e:	9105      	str	r1, [sp, #20]
 800b690:	462b      	mov	r3, r5
 800b692:	eb00 0e05 	add.w	lr, r0, r5
 800b696:	210a      	movs	r1, #10
 800b698:	4573      	cmp	r3, lr
 800b69a:	d113      	bne.n	800b6c4 <_strtod_l+0x254>
 800b69c:	182b      	adds	r3, r5, r0
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	f105 0501 	add.w	r5, r5, #1
 800b6a4:	4405      	add	r5, r0
 800b6a6:	dc1c      	bgt.n	800b6e2 <_strtod_l+0x272>
 800b6a8:	9907      	ldr	r1, [sp, #28]
 800b6aa:	230a      	movs	r3, #10
 800b6ac:	fb03 2301 	mla	r3, r3, r1, r2
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6b6:	1c51      	adds	r1, r2, #1
 800b6b8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b6ba:	7852      	ldrb	r2, [r2, #1]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	e7c9      	b.n	800b654 <_strtod_l+0x1e4>
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	e7d2      	b.n	800b66a <_strtod_l+0x1fa>
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	dc04      	bgt.n	800b6d2 <_strtod_l+0x262>
 800b6c8:	9e07      	ldr	r6, [sp, #28]
 800b6ca:	434e      	muls	r6, r1
 800b6cc:	9607      	str	r6, [sp, #28]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	e7e2      	b.n	800b698 <_strtod_l+0x228>
 800b6d2:	f103 0c01 	add.w	ip, r3, #1
 800b6d6:	f1bc 0f10 	cmp.w	ip, #16
 800b6da:	bfd8      	it	le
 800b6dc:	fb01 f909 	mulle.w	r9, r1, r9
 800b6e0:	e7f5      	b.n	800b6ce <_strtod_l+0x25e>
 800b6e2:	2d10      	cmp	r5, #16
 800b6e4:	bfdc      	itt	le
 800b6e6:	230a      	movle	r3, #10
 800b6e8:	fb03 2909 	mlale	r9, r3, r9, r2
 800b6ec:	e7e1      	b.n	800b6b2 <_strtod_l+0x242>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9305      	str	r3, [sp, #20]
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e77c      	b.n	800b5f0 <_strtod_l+0x180>
 800b6f6:	f04f 0c00 	mov.w	ip, #0
 800b6fa:	f108 0202 	add.w	r2, r8, #2
 800b6fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800b700:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b704:	e785      	b.n	800b612 <_strtod_l+0x1a2>
 800b706:	f04f 0c01 	mov.w	ip, #1
 800b70a:	e7f6      	b.n	800b6fa <_strtod_l+0x28a>
 800b70c:	0801011c 	.word	0x0801011c
 800b710:	0800fe70 	.word	0x0800fe70
 800b714:	7ff00000 	.word	0x7ff00000
 800b718:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b71a:	1c51      	adds	r1, r2, #1
 800b71c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b71e:	7852      	ldrb	r2, [r2, #1]
 800b720:	2a30      	cmp	r2, #48	; 0x30
 800b722:	d0f9      	beq.n	800b718 <_strtod_l+0x2a8>
 800b724:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b728:	2908      	cmp	r1, #8
 800b72a:	f63f af79 	bhi.w	800b620 <_strtod_l+0x1b0>
 800b72e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b734:	9206      	str	r2, [sp, #24]
 800b736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b738:	1c51      	adds	r1, r2, #1
 800b73a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b73c:	7852      	ldrb	r2, [r2, #1]
 800b73e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b742:	2e09      	cmp	r6, #9
 800b744:	d937      	bls.n	800b7b6 <_strtod_l+0x346>
 800b746:	9e06      	ldr	r6, [sp, #24]
 800b748:	1b89      	subs	r1, r1, r6
 800b74a:	2908      	cmp	r1, #8
 800b74c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b750:	dc02      	bgt.n	800b758 <_strtod_l+0x2e8>
 800b752:	4576      	cmp	r6, lr
 800b754:	bfa8      	it	ge
 800b756:	4676      	movge	r6, lr
 800b758:	f1bc 0f00 	cmp.w	ip, #0
 800b75c:	d000      	beq.n	800b760 <_strtod_l+0x2f0>
 800b75e:	4276      	negs	r6, r6
 800b760:	2d00      	cmp	r5, #0
 800b762:	d14d      	bne.n	800b800 <_strtod_l+0x390>
 800b764:	9904      	ldr	r1, [sp, #16]
 800b766:	4301      	orrs	r1, r0
 800b768:	f47f aec6 	bne.w	800b4f8 <_strtod_l+0x88>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f47f aee1 	bne.w	800b534 <_strtod_l+0xc4>
 800b772:	2a69      	cmp	r2, #105	; 0x69
 800b774:	d027      	beq.n	800b7c6 <_strtod_l+0x356>
 800b776:	dc24      	bgt.n	800b7c2 <_strtod_l+0x352>
 800b778:	2a49      	cmp	r2, #73	; 0x49
 800b77a:	d024      	beq.n	800b7c6 <_strtod_l+0x356>
 800b77c:	2a4e      	cmp	r2, #78	; 0x4e
 800b77e:	f47f aed9 	bne.w	800b534 <_strtod_l+0xc4>
 800b782:	499f      	ldr	r1, [pc, #636]	; (800ba00 <_strtod_l+0x590>)
 800b784:	a817      	add	r0, sp, #92	; 0x5c
 800b786:	f002 f8d7 	bl	800d938 <__match>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f aed2 	beq.w	800b534 <_strtod_l+0xc4>
 800b790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b28      	cmp	r3, #40	; 0x28
 800b796:	d12d      	bne.n	800b7f4 <_strtod_l+0x384>
 800b798:	499a      	ldr	r1, [pc, #616]	; (800ba04 <_strtod_l+0x594>)
 800b79a:	aa1a      	add	r2, sp, #104	; 0x68
 800b79c:	a817      	add	r0, sp, #92	; 0x5c
 800b79e:	f002 f8df 	bl	800d960 <__hexnan>
 800b7a2:	2805      	cmp	r0, #5
 800b7a4:	d126      	bne.n	800b7f4 <_strtod_l+0x384>
 800b7a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b7ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b7b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b7b4:	e6a0      	b.n	800b4f8 <_strtod_l+0x88>
 800b7b6:	210a      	movs	r1, #10
 800b7b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b7bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b7c0:	e7b9      	b.n	800b736 <_strtod_l+0x2c6>
 800b7c2:	2a6e      	cmp	r2, #110	; 0x6e
 800b7c4:	e7db      	b.n	800b77e <_strtod_l+0x30e>
 800b7c6:	4990      	ldr	r1, [pc, #576]	; (800ba08 <_strtod_l+0x598>)
 800b7c8:	a817      	add	r0, sp, #92	; 0x5c
 800b7ca:	f002 f8b5 	bl	800d938 <__match>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f43f aeb0 	beq.w	800b534 <_strtod_l+0xc4>
 800b7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7d6:	498d      	ldr	r1, [pc, #564]	; (800ba0c <_strtod_l+0x59c>)
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	a817      	add	r0, sp, #92	; 0x5c
 800b7dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7de:	f002 f8ab 	bl	800d938 <__match>
 800b7e2:	b910      	cbnz	r0, 800b7ea <_strtod_l+0x37a>
 800b7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ba1c <_strtod_l+0x5ac>
 800b7ee:	f04f 0a00 	mov.w	sl, #0
 800b7f2:	e681      	b.n	800b4f8 <_strtod_l+0x88>
 800b7f4:	4886      	ldr	r0, [pc, #536]	; (800ba10 <_strtod_l+0x5a0>)
 800b7f6:	f003 fde3 	bl	800f3c0 <nan>
 800b7fa:	ec5b ab10 	vmov	sl, fp, d0
 800b7fe:	e67b      	b.n	800b4f8 <_strtod_l+0x88>
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	9807      	ldr	r0, [sp, #28]
 800b804:	1af3      	subs	r3, r6, r3
 800b806:	2f00      	cmp	r7, #0
 800b808:	bf08      	it	eq
 800b80a:	462f      	moveq	r7, r5
 800b80c:	2d10      	cmp	r5, #16
 800b80e:	9306      	str	r3, [sp, #24]
 800b810:	46a8      	mov	r8, r5
 800b812:	bfa8      	it	ge
 800b814:	f04f 0810 	movge.w	r8, #16
 800b818:	f7f4 fe74 	bl	8000504 <__aeabi_ui2d>
 800b81c:	2d09      	cmp	r5, #9
 800b81e:	4682      	mov	sl, r0
 800b820:	468b      	mov	fp, r1
 800b822:	dd13      	ble.n	800b84c <_strtod_l+0x3dc>
 800b824:	4b7b      	ldr	r3, [pc, #492]	; (800ba14 <_strtod_l+0x5a4>)
 800b826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b82a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b82e:	f7f4 fee3 	bl	80005f8 <__aeabi_dmul>
 800b832:	4682      	mov	sl, r0
 800b834:	4648      	mov	r0, r9
 800b836:	468b      	mov	fp, r1
 800b838:	f7f4 fe64 	bl	8000504 <__aeabi_ui2d>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4650      	mov	r0, sl
 800b842:	4659      	mov	r1, fp
 800b844:	f7f4 fd22 	bl	800028c <__adddf3>
 800b848:	4682      	mov	sl, r0
 800b84a:	468b      	mov	fp, r1
 800b84c:	2d0f      	cmp	r5, #15
 800b84e:	dc38      	bgt.n	800b8c2 <_strtod_l+0x452>
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f43f ae50 	beq.w	800b4f8 <_strtod_l+0x88>
 800b858:	dd24      	ble.n	800b8a4 <_strtod_l+0x434>
 800b85a:	2b16      	cmp	r3, #22
 800b85c:	dc0b      	bgt.n	800b876 <_strtod_l+0x406>
 800b85e:	496d      	ldr	r1, [pc, #436]	; (800ba14 <_strtod_l+0x5a4>)
 800b860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b868:	4652      	mov	r2, sl
 800b86a:	465b      	mov	r3, fp
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	4682      	mov	sl, r0
 800b872:	468b      	mov	fp, r1
 800b874:	e640      	b.n	800b4f8 <_strtod_l+0x88>
 800b876:	9a06      	ldr	r2, [sp, #24]
 800b878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b87c:	4293      	cmp	r3, r2
 800b87e:	db20      	blt.n	800b8c2 <_strtod_l+0x452>
 800b880:	4c64      	ldr	r4, [pc, #400]	; (800ba14 <_strtod_l+0x5a4>)
 800b882:	f1c5 050f 	rsb	r5, r5, #15
 800b886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b88a:	4652      	mov	r2, sl
 800b88c:	465b      	mov	r3, fp
 800b88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b892:	f7f4 feb1 	bl	80005f8 <__aeabi_dmul>
 800b896:	9b06      	ldr	r3, [sp, #24]
 800b898:	1b5d      	subs	r5, r3, r5
 800b89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8a2:	e7e3      	b.n	800b86c <_strtod_l+0x3fc>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	3316      	adds	r3, #22
 800b8a8:	db0b      	blt.n	800b8c2 <_strtod_l+0x452>
 800b8aa:	9b05      	ldr	r3, [sp, #20]
 800b8ac:	1b9e      	subs	r6, r3, r6
 800b8ae:	4b59      	ldr	r3, [pc, #356]	; (800ba14 <_strtod_l+0x5a4>)
 800b8b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f7f4 ffc6 	bl	800084c <__aeabi_ddiv>
 800b8c0:	e7d6      	b.n	800b870 <_strtod_l+0x400>
 800b8c2:	9b06      	ldr	r3, [sp, #24]
 800b8c4:	eba5 0808 	sub.w	r8, r5, r8
 800b8c8:	4498      	add	r8, r3
 800b8ca:	f1b8 0f00 	cmp.w	r8, #0
 800b8ce:	dd74      	ble.n	800b9ba <_strtod_l+0x54a>
 800b8d0:	f018 030f 	ands.w	r3, r8, #15
 800b8d4:	d00a      	beq.n	800b8ec <_strtod_l+0x47c>
 800b8d6:	494f      	ldr	r1, [pc, #316]	; (800ba14 <_strtod_l+0x5a4>)
 800b8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8dc:	4652      	mov	r2, sl
 800b8de:	465b      	mov	r3, fp
 800b8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e4:	f7f4 fe88 	bl	80005f8 <__aeabi_dmul>
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	f038 080f 	bics.w	r8, r8, #15
 800b8f0:	d04f      	beq.n	800b992 <_strtod_l+0x522>
 800b8f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b8f6:	dd22      	ble.n	800b93e <_strtod_l+0x4ce>
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	462e      	mov	r6, r5
 800b8fc:	9507      	str	r5, [sp, #28]
 800b8fe:	9505      	str	r5, [sp, #20]
 800b900:	2322      	movs	r3, #34	; 0x22
 800b902:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ba1c <_strtod_l+0x5ac>
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	f04f 0a00 	mov.w	sl, #0
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f43f adf2 	beq.w	800b4f8 <_strtod_l+0x88>
 800b914:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b916:	4620      	mov	r0, r4
 800b918:	f002 f9a6 	bl	800dc68 <_Bfree>
 800b91c:	9905      	ldr	r1, [sp, #20]
 800b91e:	4620      	mov	r0, r4
 800b920:	f002 f9a2 	bl	800dc68 <_Bfree>
 800b924:	4631      	mov	r1, r6
 800b926:	4620      	mov	r0, r4
 800b928:	f002 f99e 	bl	800dc68 <_Bfree>
 800b92c:	9907      	ldr	r1, [sp, #28]
 800b92e:	4620      	mov	r0, r4
 800b930:	f002 f99a 	bl	800dc68 <_Bfree>
 800b934:	4629      	mov	r1, r5
 800b936:	4620      	mov	r0, r4
 800b938:	f002 f996 	bl	800dc68 <_Bfree>
 800b93c:	e5dc      	b.n	800b4f8 <_strtod_l+0x88>
 800b93e:	4b36      	ldr	r3, [pc, #216]	; (800ba18 <_strtod_l+0x5a8>)
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	2300      	movs	r3, #0
 800b944:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b948:	4650      	mov	r0, sl
 800b94a:	4659      	mov	r1, fp
 800b94c:	4699      	mov	r9, r3
 800b94e:	f1b8 0f01 	cmp.w	r8, #1
 800b952:	dc21      	bgt.n	800b998 <_strtod_l+0x528>
 800b954:	b10b      	cbz	r3, 800b95a <_strtod_l+0x4ea>
 800b956:	4682      	mov	sl, r0
 800b958:	468b      	mov	fp, r1
 800b95a:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <_strtod_l+0x5a8>)
 800b95c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b960:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b964:	4652      	mov	r2, sl
 800b966:	465b      	mov	r3, fp
 800b968:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b96c:	f7f4 fe44 	bl	80005f8 <__aeabi_dmul>
 800b970:	4b2a      	ldr	r3, [pc, #168]	; (800ba1c <_strtod_l+0x5ac>)
 800b972:	460a      	mov	r2, r1
 800b974:	400b      	ands	r3, r1
 800b976:	492a      	ldr	r1, [pc, #168]	; (800ba20 <_strtod_l+0x5b0>)
 800b978:	428b      	cmp	r3, r1
 800b97a:	4682      	mov	sl, r0
 800b97c:	d8bc      	bhi.n	800b8f8 <_strtod_l+0x488>
 800b97e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b982:	428b      	cmp	r3, r1
 800b984:	bf86      	itte	hi
 800b986:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ba24 <_strtod_l+0x5b4>
 800b98a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b98e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b992:	2300      	movs	r3, #0
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	e084      	b.n	800baa2 <_strtod_l+0x632>
 800b998:	f018 0f01 	tst.w	r8, #1
 800b99c:	d005      	beq.n	800b9aa <_strtod_l+0x53a>
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fe28 	bl	80005f8 <__aeabi_dmul>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	9a04      	ldr	r2, [sp, #16]
 800b9ac:	3208      	adds	r2, #8
 800b9ae:	f109 0901 	add.w	r9, r9, #1
 800b9b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b9b6:	9204      	str	r2, [sp, #16]
 800b9b8:	e7c9      	b.n	800b94e <_strtod_l+0x4de>
 800b9ba:	d0ea      	beq.n	800b992 <_strtod_l+0x522>
 800b9bc:	f1c8 0800 	rsb	r8, r8, #0
 800b9c0:	f018 020f 	ands.w	r2, r8, #15
 800b9c4:	d00a      	beq.n	800b9dc <_strtod_l+0x56c>
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <_strtod_l+0x5a4>)
 800b9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f7f4 ff3a 	bl	800084c <__aeabi_ddiv>
 800b9d8:	4682      	mov	sl, r0
 800b9da:	468b      	mov	fp, r1
 800b9dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b9e0:	d0d7      	beq.n	800b992 <_strtod_l+0x522>
 800b9e2:	f1b8 0f1f 	cmp.w	r8, #31
 800b9e6:	dd1f      	ble.n	800ba28 <_strtod_l+0x5b8>
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	462e      	mov	r6, r5
 800b9ec:	9507      	str	r5, [sp, #28]
 800b9ee:	9505      	str	r5, [sp, #20]
 800b9f0:	2322      	movs	r3, #34	; 0x22
 800b9f2:	f04f 0a00 	mov.w	sl, #0
 800b9f6:	f04f 0b00 	mov.w	fp, #0
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	e786      	b.n	800b90c <_strtod_l+0x49c>
 800b9fe:	bf00      	nop
 800ba00:	0800fe45 	.word	0x0800fe45
 800ba04:	0800fe84 	.word	0x0800fe84
 800ba08:	0800fe3d 	.word	0x0800fe3d
 800ba0c:	0800ffc4 	.word	0x0800ffc4
 800ba10:	080102f3 	.word	0x080102f3
 800ba14:	080101b8 	.word	0x080101b8
 800ba18:	08010190 	.word	0x08010190
 800ba1c:	7ff00000 	.word	0x7ff00000
 800ba20:	7ca00000 	.word	0x7ca00000
 800ba24:	7fefffff 	.word	0x7fefffff
 800ba28:	f018 0310 	ands.w	r3, r8, #16
 800ba2c:	bf18      	it	ne
 800ba2e:	236a      	movne	r3, #106	; 0x6a
 800ba30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bde0 <_strtod_l+0x970>
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	4650      	mov	r0, sl
 800ba38:	4659      	mov	r1, fp
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f018 0f01 	tst.w	r8, #1
 800ba40:	d004      	beq.n	800ba4c <_strtod_l+0x5dc>
 800ba42:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba46:	f7f4 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ba50:	f109 0908 	add.w	r9, r9, #8
 800ba54:	d1f2      	bne.n	800ba3c <_strtod_l+0x5cc>
 800ba56:	b10b      	cbz	r3, 800ba5c <_strtod_l+0x5ec>
 800ba58:	4682      	mov	sl, r0
 800ba5a:	468b      	mov	fp, r1
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	b1c3      	cbz	r3, 800ba92 <_strtod_l+0x622>
 800ba60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	dd11      	ble.n	800ba92 <_strtod_l+0x622>
 800ba6e:	2b1f      	cmp	r3, #31
 800ba70:	f340 8124 	ble.w	800bcbc <_strtod_l+0x84c>
 800ba74:	2b34      	cmp	r3, #52	; 0x34
 800ba76:	bfde      	ittt	le
 800ba78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ba7c:	f04f 33ff 	movle.w	r3, #4294967295
 800ba80:	fa03 f202 	lslle.w	r2, r3, r2
 800ba84:	f04f 0a00 	mov.w	sl, #0
 800ba88:	bfcc      	ite	gt
 800ba8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ba8e:	ea02 0b01 	andle.w	fp, r2, r1
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4650      	mov	r0, sl
 800ba98:	4659      	mov	r1, fp
 800ba9a:	f7f5 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d1a2      	bne.n	800b9e8 <_strtod_l+0x578>
 800baa2:	9b07      	ldr	r3, [sp, #28]
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	9908      	ldr	r1, [sp, #32]
 800baa8:	462b      	mov	r3, r5
 800baaa:	463a      	mov	r2, r7
 800baac:	4620      	mov	r0, r4
 800baae:	f002 f943 	bl	800dd38 <__s2b>
 800bab2:	9007      	str	r0, [sp, #28]
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f43f af1f 	beq.w	800b8f8 <_strtod_l+0x488>
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	1b9e      	subs	r6, r3, r6
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfb4      	ite	lt
 800bac4:	4633      	movlt	r3, r6
 800bac6:	2300      	movge	r3, #0
 800bac8:	930c      	str	r3, [sp, #48]	; 0x30
 800baca:	9b06      	ldr	r3, [sp, #24]
 800bacc:	2500      	movs	r5, #0
 800bace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bad2:	9312      	str	r3, [sp, #72]	; 0x48
 800bad4:	462e      	mov	r6, r5
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	4620      	mov	r0, r4
 800bada:	6859      	ldr	r1, [r3, #4]
 800badc:	f002 f884 	bl	800dbe8 <_Balloc>
 800bae0:	9005      	str	r0, [sp, #20]
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f43f af0c 	beq.w	800b900 <_strtod_l+0x490>
 800bae8:	9b07      	ldr	r3, [sp, #28]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	3202      	adds	r2, #2
 800baee:	f103 010c 	add.w	r1, r3, #12
 800baf2:	0092      	lsls	r2, r2, #2
 800baf4:	300c      	adds	r0, #12
 800baf6:	f002 f869 	bl	800dbcc <memcpy>
 800bafa:	ec4b ab10 	vmov	d0, sl, fp
 800bafe:	aa1a      	add	r2, sp, #104	; 0x68
 800bb00:	a919      	add	r1, sp, #100	; 0x64
 800bb02:	4620      	mov	r0, r4
 800bb04:	f002 fc5e 	bl	800e3c4 <__d2b>
 800bb08:	ec4b ab18 	vmov	d8, sl, fp
 800bb0c:	9018      	str	r0, [sp, #96]	; 0x60
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f43f aef6 	beq.w	800b900 <_strtod_l+0x490>
 800bb14:	2101      	movs	r1, #1
 800bb16:	4620      	mov	r0, r4
 800bb18:	f002 f9a8 	bl	800de6c <__i2b>
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f43f aeee 	beq.w	800b900 <_strtod_l+0x490>
 800bb24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb26:	9904      	ldr	r1, [sp, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfab      	itete	ge
 800bb2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bb2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bb30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bb32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bb36:	bfac      	ite	ge
 800bb38:	eb03 0902 	addge.w	r9, r3, r2
 800bb3c:	1ad7      	sublt	r7, r2, r3
 800bb3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb40:	eba3 0801 	sub.w	r8, r3, r1
 800bb44:	4490      	add	r8, r2
 800bb46:	4ba1      	ldr	r3, [pc, #644]	; (800bdcc <_strtod_l+0x95c>)
 800bb48:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb4c:	4598      	cmp	r8, r3
 800bb4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb52:	f280 80c7 	bge.w	800bce4 <_strtod_l+0x874>
 800bb56:	eba3 0308 	sub.w	r3, r3, r8
 800bb5a:	2b1f      	cmp	r3, #31
 800bb5c:	eba2 0203 	sub.w	r2, r2, r3
 800bb60:	f04f 0101 	mov.w	r1, #1
 800bb64:	f300 80b1 	bgt.w	800bcca <_strtod_l+0x85a>
 800bb68:	fa01 f303 	lsl.w	r3, r1, r3
 800bb6c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9308      	str	r3, [sp, #32]
 800bb72:	eb09 0802 	add.w	r8, r9, r2
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	45c1      	cmp	r9, r8
 800bb7a:	4417      	add	r7, r2
 800bb7c:	441f      	add	r7, r3
 800bb7e:	464b      	mov	r3, r9
 800bb80:	bfa8      	it	ge
 800bb82:	4643      	movge	r3, r8
 800bb84:	42bb      	cmp	r3, r7
 800bb86:	bfa8      	it	ge
 800bb88:	463b      	movge	r3, r7
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bfc2      	ittt	gt
 800bb8e:	eba8 0803 	subgt.w	r8, r8, r3
 800bb92:	1aff      	subgt	r7, r7, r3
 800bb94:	eba9 0903 	subgt.w	r9, r9, r3
 800bb98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd17      	ble.n	800bbce <_strtod_l+0x75e>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	461a      	mov	r2, r3
 800bba2:	4620      	mov	r0, r4
 800bba4:	f002 fa22 	bl	800dfec <__pow5mult>
 800bba8:	4606      	mov	r6, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f43f aea8 	beq.w	800b900 <_strtod_l+0x490>
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f002 f96f 	bl	800de98 <__multiply>
 800bbba:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	f43f ae9f 	beq.w	800b900 <_strtod_l+0x490>
 800bbc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f002 f84f 	bl	800dc68 <_Bfree>
 800bbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbcc:	9318      	str	r3, [sp, #96]	; 0x60
 800bbce:	f1b8 0f00 	cmp.w	r8, #0
 800bbd2:	f300 808c 	bgt.w	800bcee <_strtod_l+0x87e>
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd08      	ble.n	800bbee <_strtod_l+0x77e>
 800bbdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbde:	9905      	ldr	r1, [sp, #20]
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f002 fa03 	bl	800dfec <__pow5mult>
 800bbe6:	9005      	str	r0, [sp, #20]
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f43f ae89 	beq.w	800b900 <_strtod_l+0x490>
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	dd08      	ble.n	800bc04 <_strtod_l+0x794>
 800bbf2:	9905      	ldr	r1, [sp, #20]
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f002 fa52 	bl	800e0a0 <__lshift>
 800bbfc:	9005      	str	r0, [sp, #20]
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f ae7e 	beq.w	800b900 <_strtod_l+0x490>
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	dd08      	ble.n	800bc1c <_strtod_l+0x7ac>
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	464a      	mov	r2, r9
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f002 fa46 	bl	800e0a0 <__lshift>
 800bc14:	4606      	mov	r6, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f43f ae72 	beq.w	800b900 <_strtod_l+0x490>
 800bc1c:	9a05      	ldr	r2, [sp, #20]
 800bc1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc20:	4620      	mov	r0, r4
 800bc22:	f002 fac9 	bl	800e1b8 <__mdiff>
 800bc26:	4605      	mov	r5, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f ae69 	beq.w	800b900 <_strtod_l+0x490>
 800bc2e:	68c3      	ldr	r3, [r0, #12]
 800bc30:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc32:	2300      	movs	r3, #0
 800bc34:	60c3      	str	r3, [r0, #12]
 800bc36:	4631      	mov	r1, r6
 800bc38:	f002 faa2 	bl	800e180 <__mcmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	da60      	bge.n	800bd02 <_strtod_l+0x892>
 800bc40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc42:	ea53 030a 	orrs.w	r3, r3, sl
 800bc46:	f040 8082 	bne.w	800bd4e <_strtod_l+0x8de>
 800bc4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d17d      	bne.n	800bd4e <_strtod_l+0x8de>
 800bc52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc56:	0d1b      	lsrs	r3, r3, #20
 800bc58:	051b      	lsls	r3, r3, #20
 800bc5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc5e:	d976      	bls.n	800bd4e <_strtod_l+0x8de>
 800bc60:	696b      	ldr	r3, [r5, #20]
 800bc62:	b913      	cbnz	r3, 800bc6a <_strtod_l+0x7fa>
 800bc64:	692b      	ldr	r3, [r5, #16]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	dd71      	ble.n	800bd4e <_strtod_l+0x8de>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f002 fa16 	bl	800e0a0 <__lshift>
 800bc74:	4631      	mov	r1, r6
 800bc76:	4605      	mov	r5, r0
 800bc78:	f002 fa82 	bl	800e180 <__mcmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	dd66      	ble.n	800bd4e <_strtod_l+0x8de>
 800bc80:	9904      	ldr	r1, [sp, #16]
 800bc82:	4a53      	ldr	r2, [pc, #332]	; (800bdd0 <_strtod_l+0x960>)
 800bc84:	465b      	mov	r3, fp
 800bc86:	2900      	cmp	r1, #0
 800bc88:	f000 8081 	beq.w	800bd8e <_strtod_l+0x91e>
 800bc8c:	ea02 010b 	and.w	r1, r2, fp
 800bc90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc94:	dc7b      	bgt.n	800bd8e <_strtod_l+0x91e>
 800bc96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc9a:	f77f aea9 	ble.w	800b9f0 <_strtod_l+0x580>
 800bc9e:	4b4d      	ldr	r3, [pc, #308]	; (800bdd4 <_strtod_l+0x964>)
 800bca0:	4650      	mov	r0, sl
 800bca2:	4659      	mov	r1, fp
 800bca4:	2200      	movs	r2, #0
 800bca6:	f7f4 fca7 	bl	80005f8 <__aeabi_dmul>
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4303      	orrs	r3, r0
 800bcae:	bf08      	it	eq
 800bcb0:	2322      	moveq	r3, #34	; 0x22
 800bcb2:	4682      	mov	sl, r0
 800bcb4:	468b      	mov	fp, r1
 800bcb6:	bf08      	it	eq
 800bcb8:	6023      	streq	r3, [r4, #0]
 800bcba:	e62b      	b.n	800b914 <_strtod_l+0x4a4>
 800bcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc4:	ea03 0a0a 	and.w	sl, r3, sl
 800bcc8:	e6e3      	b.n	800ba92 <_strtod_l+0x622>
 800bcca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bcce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bcd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bcd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bcda:	fa01 f308 	lsl.w	r3, r1, r8
 800bcde:	9308      	str	r3, [sp, #32]
 800bce0:	910d      	str	r1, [sp, #52]	; 0x34
 800bce2:	e746      	b.n	800bb72 <_strtod_l+0x702>
 800bce4:	2300      	movs	r3, #0
 800bce6:	9308      	str	r3, [sp, #32]
 800bce8:	2301      	movs	r3, #1
 800bcea:	930d      	str	r3, [sp, #52]	; 0x34
 800bcec:	e741      	b.n	800bb72 <_strtod_l+0x702>
 800bcee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcf0:	4642      	mov	r2, r8
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f002 f9d4 	bl	800e0a0 <__lshift>
 800bcf8:	9018      	str	r0, [sp, #96]	; 0x60
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f47f af6b 	bne.w	800bbd6 <_strtod_l+0x766>
 800bd00:	e5fe      	b.n	800b900 <_strtod_l+0x490>
 800bd02:	465f      	mov	r7, fp
 800bd04:	d16e      	bne.n	800bde4 <_strtod_l+0x974>
 800bd06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd0c:	b342      	cbz	r2, 800bd60 <_strtod_l+0x8f0>
 800bd0e:	4a32      	ldr	r2, [pc, #200]	; (800bdd8 <_strtod_l+0x968>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d128      	bne.n	800bd66 <_strtod_l+0x8f6>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4651      	mov	r1, sl
 800bd18:	b1eb      	cbz	r3, 800bd56 <_strtod_l+0x8e6>
 800bd1a:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <_strtod_l+0x960>)
 800bd1c:	403b      	ands	r3, r7
 800bd1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295
 800bd26:	d819      	bhi.n	800bd5c <_strtod_l+0x8ec>
 800bd28:	0d1b      	lsrs	r3, r3, #20
 800bd2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	4299      	cmp	r1, r3
 800bd34:	d117      	bne.n	800bd66 <_strtod_l+0x8f6>
 800bd36:	4b29      	ldr	r3, [pc, #164]	; (800bddc <_strtod_l+0x96c>)
 800bd38:	429f      	cmp	r7, r3
 800bd3a:	d102      	bne.n	800bd42 <_strtod_l+0x8d2>
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f43f addf 	beq.w	800b900 <_strtod_l+0x490>
 800bd42:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <_strtod_l+0x960>)
 800bd44:	403b      	ands	r3, r7
 800bd46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bd4a:	f04f 0a00 	mov.w	sl, #0
 800bd4e:	9b04      	ldr	r3, [sp, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1a4      	bne.n	800bc9e <_strtod_l+0x82e>
 800bd54:	e5de      	b.n	800b914 <_strtod_l+0x4a4>
 800bd56:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5a:	e7ea      	b.n	800bd32 <_strtod_l+0x8c2>
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	e7e8      	b.n	800bd32 <_strtod_l+0x8c2>
 800bd60:	ea53 030a 	orrs.w	r3, r3, sl
 800bd64:	d08c      	beq.n	800bc80 <_strtod_l+0x810>
 800bd66:	9b08      	ldr	r3, [sp, #32]
 800bd68:	b1db      	cbz	r3, 800bda2 <_strtod_l+0x932>
 800bd6a:	423b      	tst	r3, r7
 800bd6c:	d0ef      	beq.n	800bd4e <_strtod_l+0x8de>
 800bd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	b1c3      	cbz	r3, 800bdaa <_strtod_l+0x93a>
 800bd78:	f7ff fb5d 	bl	800b436 <sulp>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	ec51 0b18 	vmov	r0, r1, d8
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	4682      	mov	sl, r0
 800bd8a:	468b      	mov	fp, r1
 800bd8c:	e7df      	b.n	800bd4e <_strtod_l+0x8de>
 800bd8e:	4013      	ands	r3, r2
 800bd90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bda0:	e7d5      	b.n	800bd4e <_strtod_l+0x8de>
 800bda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda4:	ea13 0f0a 	tst.w	r3, sl
 800bda8:	e7e0      	b.n	800bd6c <_strtod_l+0x8fc>
 800bdaa:	f7ff fb44 	bl	800b436 <sulp>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	ec51 0b18 	vmov	r0, r1, d8
 800bdb6:	f7f4 fa67 	bl	8000288 <__aeabi_dsub>
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	f7f4 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0c1      	beq.n	800bd4e <_strtod_l+0x8de>
 800bdca:	e611      	b.n	800b9f0 <_strtod_l+0x580>
 800bdcc:	fffffc02 	.word	0xfffffc02
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	39500000 	.word	0x39500000
 800bdd8:	000fffff 	.word	0x000fffff
 800bddc:	7fefffff 	.word	0x7fefffff
 800bde0:	0800fe98 	.word	0x0800fe98
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	f002 fb48 	bl	800e47c <__ratio>
 800bdec:	ec59 8b10 	vmov	r8, r9, d0
 800bdf0:	ee10 0a10 	vmov	r0, s0
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	f7f4 fe78 	bl	8000af0 <__aeabi_dcmple>
 800be00:	2800      	cmp	r0, #0
 800be02:	d07a      	beq.n	800befa <_strtod_l+0xa8a>
 800be04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d04a      	beq.n	800bea0 <_strtod_l+0xa30>
 800be0a:	4b95      	ldr	r3, [pc, #596]	; (800c060 <_strtod_l+0xbf0>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c060 <_strtod_l+0xbf0>
 800be16:	f04f 0800 	mov.w	r8, #0
 800be1a:	4b92      	ldr	r3, [pc, #584]	; (800c064 <_strtod_l+0xbf4>)
 800be1c:	403b      	ands	r3, r7
 800be1e:	930d      	str	r3, [sp, #52]	; 0x34
 800be20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be22:	4b91      	ldr	r3, [pc, #580]	; (800c068 <_strtod_l+0xbf8>)
 800be24:	429a      	cmp	r2, r3
 800be26:	f040 80b0 	bne.w	800bf8a <_strtod_l+0xb1a>
 800be2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800be32:	ec4b ab10 	vmov	d0, sl, fp
 800be36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be3a:	f002 fa47 	bl	800e2cc <__ulp>
 800be3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be42:	ec53 2b10 	vmov	r2, r3, d0
 800be46:	f7f4 fbd7 	bl	80005f8 <__aeabi_dmul>
 800be4a:	4652      	mov	r2, sl
 800be4c:	465b      	mov	r3, fp
 800be4e:	f7f4 fa1d 	bl	800028c <__adddf3>
 800be52:	460b      	mov	r3, r1
 800be54:	4983      	ldr	r1, [pc, #524]	; (800c064 <_strtod_l+0xbf4>)
 800be56:	4a85      	ldr	r2, [pc, #532]	; (800c06c <_strtod_l+0xbfc>)
 800be58:	4019      	ands	r1, r3
 800be5a:	4291      	cmp	r1, r2
 800be5c:	4682      	mov	sl, r0
 800be5e:	d960      	bls.n	800bf22 <_strtod_l+0xab2>
 800be60:	ee18 3a90 	vmov	r3, s17
 800be64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800be68:	4293      	cmp	r3, r2
 800be6a:	d104      	bne.n	800be76 <_strtod_l+0xa06>
 800be6c:	ee18 3a10 	vmov	r3, s16
 800be70:	3301      	adds	r3, #1
 800be72:	f43f ad45 	beq.w	800b900 <_strtod_l+0x490>
 800be76:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c078 <_strtod_l+0xc08>
 800be7a:	f04f 3aff 	mov.w	sl, #4294967295
 800be7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be80:	4620      	mov	r0, r4
 800be82:	f001 fef1 	bl	800dc68 <_Bfree>
 800be86:	9905      	ldr	r1, [sp, #20]
 800be88:	4620      	mov	r0, r4
 800be8a:	f001 feed 	bl	800dc68 <_Bfree>
 800be8e:	4631      	mov	r1, r6
 800be90:	4620      	mov	r0, r4
 800be92:	f001 fee9 	bl	800dc68 <_Bfree>
 800be96:	4629      	mov	r1, r5
 800be98:	4620      	mov	r0, r4
 800be9a:	f001 fee5 	bl	800dc68 <_Bfree>
 800be9e:	e61a      	b.n	800bad6 <_strtod_l+0x666>
 800bea0:	f1ba 0f00 	cmp.w	sl, #0
 800bea4:	d11b      	bne.n	800bede <_strtod_l+0xa6e>
 800bea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beaa:	b9f3      	cbnz	r3, 800beea <_strtod_l+0xa7a>
 800beac:	4b6c      	ldr	r3, [pc, #432]	; (800c060 <_strtod_l+0xbf0>)
 800beae:	2200      	movs	r2, #0
 800beb0:	4640      	mov	r0, r8
 800beb2:	4649      	mov	r1, r9
 800beb4:	f7f4 fe12 	bl	8000adc <__aeabi_dcmplt>
 800beb8:	b9d0      	cbnz	r0, 800bef0 <_strtod_l+0xa80>
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	4b6c      	ldr	r3, [pc, #432]	; (800c070 <_strtod_l+0xc00>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	f7f4 fb99 	bl	80005f8 <__aeabi_dmul>
 800bec6:	4680      	mov	r8, r0
 800bec8:	4689      	mov	r9, r1
 800beca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bed2:	9315      	str	r3, [sp, #84]	; 0x54
 800bed4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bedc:	e79d      	b.n	800be1a <_strtod_l+0x9aa>
 800bede:	f1ba 0f01 	cmp.w	sl, #1
 800bee2:	d102      	bne.n	800beea <_strtod_l+0xa7a>
 800bee4:	2f00      	cmp	r7, #0
 800bee6:	f43f ad83 	beq.w	800b9f0 <_strtod_l+0x580>
 800beea:	4b62      	ldr	r3, [pc, #392]	; (800c074 <_strtod_l+0xc04>)
 800beec:	2200      	movs	r2, #0
 800beee:	e78e      	b.n	800be0e <_strtod_l+0x99e>
 800bef0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c070 <_strtod_l+0xc00>
 800bef4:	f04f 0800 	mov.w	r8, #0
 800bef8:	e7e7      	b.n	800beca <_strtod_l+0xa5a>
 800befa:	4b5d      	ldr	r3, [pc, #372]	; (800c070 <_strtod_l+0xc00>)
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fb79 	bl	80005f8 <__aeabi_dmul>
 800bf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	b933      	cbnz	r3, 800bf1c <_strtod_l+0xaac>
 800bf0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf12:	900e      	str	r0, [sp, #56]	; 0x38
 800bf14:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf1a:	e7dd      	b.n	800bed8 <_strtod_l+0xa68>
 800bf1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bf20:	e7f9      	b.n	800bf16 <_strtod_l+0xaa6>
 800bf22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1a8      	bne.n	800be7e <_strtod_l+0xa0e>
 800bf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf32:	0d1b      	lsrs	r3, r3, #20
 800bf34:	051b      	lsls	r3, r3, #20
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d1a1      	bne.n	800be7e <_strtod_l+0xa0e>
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 febb 	bl	8000cb8 <__aeabi_d2lz>
 800bf42:	f7f4 fb2b 	bl	800059c <__aeabi_l2d>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f99b 	bl	8000288 <__aeabi_dsub>
 800bf52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf58:	ea43 030a 	orr.w	r3, r3, sl
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	4680      	mov	r8, r0
 800bf60:	4689      	mov	r9, r1
 800bf62:	d055      	beq.n	800c010 <_strtod_l+0xba0>
 800bf64:	a336      	add	r3, pc, #216	; (adr r3, 800c040 <_strtod_l+0xbd0>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f7f4 fdb7 	bl	8000adc <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f47f acd0 	bne.w	800b914 <_strtod_l+0x4a4>
 800bf74:	a334      	add	r3, pc, #208	; (adr r3, 800c048 <_strtod_l+0xbd8>)
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f af7b 	beq.w	800be7e <_strtod_l+0xa0e>
 800bf88:	e4c4      	b.n	800b914 <_strtod_l+0x4a4>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	b333      	cbz	r3, 800bfdc <_strtod_l+0xb6c>
 800bf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf94:	d822      	bhi.n	800bfdc <_strtod_l+0xb6c>
 800bf96:	a32e      	add	r3, pc, #184	; (adr r3, 800c050 <_strtod_l+0xbe0>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	f7f4 fda6 	bl	8000af0 <__aeabi_dcmple>
 800bfa4:	b1a0      	cbz	r0, 800bfd0 <_strtod_l+0xb60>
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	f7f4 fdfd 	bl	8000ba8 <__aeabi_d2uiz>
 800bfae:	2801      	cmp	r0, #1
 800bfb0:	bf38      	it	cc
 800bfb2:	2001      	movcc	r0, #1
 800bfb4:	f7f4 faa6 	bl	8000504 <__aeabi_ui2d>
 800bfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4689      	mov	r9, r1
 800bfbe:	bb23      	cbnz	r3, 800c00a <_strtod_l+0xb9a>
 800bfc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfc4:	9010      	str	r0, [sp, #64]	; 0x40
 800bfc6:	9311      	str	r3, [sp, #68]	; 0x44
 800bfc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bfd8:	1a9b      	subs	r3, r3, r2
 800bfda:	9309      	str	r3, [sp, #36]	; 0x24
 800bfdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfe0:	eeb0 0a48 	vmov.f32	s0, s16
 800bfe4:	eef0 0a68 	vmov.f32	s1, s17
 800bfe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfec:	f002 f96e 	bl	800e2cc <__ulp>
 800bff0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff4:	ec53 2b10 	vmov	r2, r3, d0
 800bff8:	f7f4 fafe 	bl	80005f8 <__aeabi_dmul>
 800bffc:	ec53 2b18 	vmov	r2, r3, d8
 800c000:	f7f4 f944 	bl	800028c <__adddf3>
 800c004:	4682      	mov	sl, r0
 800c006:	468b      	mov	fp, r1
 800c008:	e78d      	b.n	800bf26 <_strtod_l+0xab6>
 800c00a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c00e:	e7db      	b.n	800bfc8 <_strtod_l+0xb58>
 800c010:	a311      	add	r3, pc, #68	; (adr r3, 800c058 <_strtod_l+0xbe8>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 fd61 	bl	8000adc <__aeabi_dcmplt>
 800c01a:	e7b2      	b.n	800bf82 <_strtod_l+0xb12>
 800c01c:	2300      	movs	r3, #0
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	f7ff ba6b 	b.w	800b500 <_strtod_l+0x90>
 800c02a:	2a65      	cmp	r2, #101	; 0x65
 800c02c:	f43f ab5f 	beq.w	800b6ee <_strtod_l+0x27e>
 800c030:	2a45      	cmp	r2, #69	; 0x45
 800c032:	f43f ab5c 	beq.w	800b6ee <_strtod_l+0x27e>
 800c036:	2301      	movs	r3, #1
 800c038:	f7ff bb94 	b.w	800b764 <_strtod_l+0x2f4>
 800c03c:	f3af 8000 	nop.w
 800c040:	94a03595 	.word	0x94a03595
 800c044:	3fdfffff 	.word	0x3fdfffff
 800c048:	35afe535 	.word	0x35afe535
 800c04c:	3fe00000 	.word	0x3fe00000
 800c050:	ffc00000 	.word	0xffc00000
 800c054:	41dfffff 	.word	0x41dfffff
 800c058:	94a03595 	.word	0x94a03595
 800c05c:	3fcfffff 	.word	0x3fcfffff
 800c060:	3ff00000 	.word	0x3ff00000
 800c064:	7ff00000 	.word	0x7ff00000
 800c068:	7fe00000 	.word	0x7fe00000
 800c06c:	7c9fffff 	.word	0x7c9fffff
 800c070:	3fe00000 	.word	0x3fe00000
 800c074:	bff00000 	.word	0xbff00000
 800c078:	7fefffff 	.word	0x7fefffff

0800c07c <_strtod_r>:
 800c07c:	4b01      	ldr	r3, [pc, #4]	; (800c084 <_strtod_r+0x8>)
 800c07e:	f7ff b9f7 	b.w	800b470 <_strtod_l>
 800c082:	bf00      	nop
 800c084:	200000a8 	.word	0x200000a8

0800c088 <_strtol_l.constprop.0>:
 800c088:	2b01      	cmp	r3, #1
 800c08a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08e:	d001      	beq.n	800c094 <_strtol_l.constprop.0+0xc>
 800c090:	2b24      	cmp	r3, #36	; 0x24
 800c092:	d906      	bls.n	800c0a2 <_strtol_l.constprop.0+0x1a>
 800c094:	f7fe f9cc 	bl	800a430 <__errno>
 800c098:	2316      	movs	r3, #22
 800c09a:	6003      	str	r3, [r0, #0]
 800c09c:	2000      	movs	r0, #0
 800c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c188 <_strtol_l.constprop.0+0x100>
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	462e      	mov	r6, r5
 800c0aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c0b2:	f017 0708 	ands.w	r7, r7, #8
 800c0b6:	d1f7      	bne.n	800c0a8 <_strtol_l.constprop.0+0x20>
 800c0b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c0ba:	d132      	bne.n	800c122 <_strtol_l.constprop.0+0x9a>
 800c0bc:	782c      	ldrb	r4, [r5, #0]
 800c0be:	2701      	movs	r7, #1
 800c0c0:	1cb5      	adds	r5, r6, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d05b      	beq.n	800c17e <_strtol_l.constprop.0+0xf6>
 800c0c6:	2b10      	cmp	r3, #16
 800c0c8:	d109      	bne.n	800c0de <_strtol_l.constprop.0+0x56>
 800c0ca:	2c30      	cmp	r4, #48	; 0x30
 800c0cc:	d107      	bne.n	800c0de <_strtol_l.constprop.0+0x56>
 800c0ce:	782c      	ldrb	r4, [r5, #0]
 800c0d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c0d4:	2c58      	cmp	r4, #88	; 0x58
 800c0d6:	d14d      	bne.n	800c174 <_strtol_l.constprop.0+0xec>
 800c0d8:	786c      	ldrb	r4, [r5, #1]
 800c0da:	2310      	movs	r3, #16
 800c0dc:	3502      	adds	r5, #2
 800c0de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c0e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0e6:	f04f 0c00 	mov.w	ip, #0
 800c0ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800c0ee:	4666      	mov	r6, ip
 800c0f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c0f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c0f8:	f1be 0f09 	cmp.w	lr, #9
 800c0fc:	d816      	bhi.n	800c12c <_strtol_l.constprop.0+0xa4>
 800c0fe:	4674      	mov	r4, lr
 800c100:	42a3      	cmp	r3, r4
 800c102:	dd24      	ble.n	800c14e <_strtol_l.constprop.0+0xc6>
 800c104:	f1bc 0f00 	cmp.w	ip, #0
 800c108:	db1e      	blt.n	800c148 <_strtol_l.constprop.0+0xc0>
 800c10a:	45b1      	cmp	r9, r6
 800c10c:	d31c      	bcc.n	800c148 <_strtol_l.constprop.0+0xc0>
 800c10e:	d101      	bne.n	800c114 <_strtol_l.constprop.0+0x8c>
 800c110:	45a2      	cmp	sl, r4
 800c112:	db19      	blt.n	800c148 <_strtol_l.constprop.0+0xc0>
 800c114:	fb06 4603 	mla	r6, r6, r3, r4
 800c118:	f04f 0c01 	mov.w	ip, #1
 800c11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c120:	e7e8      	b.n	800c0f4 <_strtol_l.constprop.0+0x6c>
 800c122:	2c2b      	cmp	r4, #43	; 0x2b
 800c124:	bf04      	itt	eq
 800c126:	782c      	ldrbeq	r4, [r5, #0]
 800c128:	1cb5      	addeq	r5, r6, #2
 800c12a:	e7ca      	b.n	800c0c2 <_strtol_l.constprop.0+0x3a>
 800c12c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c130:	f1be 0f19 	cmp.w	lr, #25
 800c134:	d801      	bhi.n	800c13a <_strtol_l.constprop.0+0xb2>
 800c136:	3c37      	subs	r4, #55	; 0x37
 800c138:	e7e2      	b.n	800c100 <_strtol_l.constprop.0+0x78>
 800c13a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c13e:	f1be 0f19 	cmp.w	lr, #25
 800c142:	d804      	bhi.n	800c14e <_strtol_l.constprop.0+0xc6>
 800c144:	3c57      	subs	r4, #87	; 0x57
 800c146:	e7db      	b.n	800c100 <_strtol_l.constprop.0+0x78>
 800c148:	f04f 3cff 	mov.w	ip, #4294967295
 800c14c:	e7e6      	b.n	800c11c <_strtol_l.constprop.0+0x94>
 800c14e:	f1bc 0f00 	cmp.w	ip, #0
 800c152:	da05      	bge.n	800c160 <_strtol_l.constprop.0+0xd8>
 800c154:	2322      	movs	r3, #34	; 0x22
 800c156:	6003      	str	r3, [r0, #0]
 800c158:	4646      	mov	r6, r8
 800c15a:	b942      	cbnz	r2, 800c16e <_strtol_l.constprop.0+0xe6>
 800c15c:	4630      	mov	r0, r6
 800c15e:	e79e      	b.n	800c09e <_strtol_l.constprop.0+0x16>
 800c160:	b107      	cbz	r7, 800c164 <_strtol_l.constprop.0+0xdc>
 800c162:	4276      	negs	r6, r6
 800c164:	2a00      	cmp	r2, #0
 800c166:	d0f9      	beq.n	800c15c <_strtol_l.constprop.0+0xd4>
 800c168:	f1bc 0f00 	cmp.w	ip, #0
 800c16c:	d000      	beq.n	800c170 <_strtol_l.constprop.0+0xe8>
 800c16e:	1e69      	subs	r1, r5, #1
 800c170:	6011      	str	r1, [r2, #0]
 800c172:	e7f3      	b.n	800c15c <_strtol_l.constprop.0+0xd4>
 800c174:	2430      	movs	r4, #48	; 0x30
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1b1      	bne.n	800c0de <_strtol_l.constprop.0+0x56>
 800c17a:	2308      	movs	r3, #8
 800c17c:	e7af      	b.n	800c0de <_strtol_l.constprop.0+0x56>
 800c17e:	2c30      	cmp	r4, #48	; 0x30
 800c180:	d0a5      	beq.n	800c0ce <_strtol_l.constprop.0+0x46>
 800c182:	230a      	movs	r3, #10
 800c184:	e7ab      	b.n	800c0de <_strtol_l.constprop.0+0x56>
 800c186:	bf00      	nop
 800c188:	0800fec1 	.word	0x0800fec1

0800c18c <_strtol_r>:
 800c18c:	f7ff bf7c 	b.w	800c088 <_strtol_l.constprop.0>

0800c190 <__swbuf_r>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	460e      	mov	r6, r1
 800c194:	4614      	mov	r4, r2
 800c196:	4605      	mov	r5, r0
 800c198:	b118      	cbz	r0, 800c1a2 <__swbuf_r+0x12>
 800c19a:	6983      	ldr	r3, [r0, #24]
 800c19c:	b90b      	cbnz	r3, 800c1a2 <__swbuf_r+0x12>
 800c19e:	f001 f86f 	bl	800d280 <__sinit>
 800c1a2:	4b21      	ldr	r3, [pc, #132]	; (800c228 <__swbuf_r+0x98>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d12b      	bne.n	800c200 <__swbuf_r+0x70>
 800c1a8:	686c      	ldr	r4, [r5, #4]
 800c1aa:	69a3      	ldr	r3, [r4, #24]
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	071a      	lsls	r2, r3, #28
 800c1b2:	d52f      	bpl.n	800c214 <__swbuf_r+0x84>
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	b36b      	cbz	r3, 800c214 <__swbuf_r+0x84>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	6820      	ldr	r0, [r4, #0]
 800c1bc:	1ac0      	subs	r0, r0, r3
 800c1be:	6963      	ldr	r3, [r4, #20]
 800c1c0:	b2f6      	uxtb	r6, r6
 800c1c2:	4283      	cmp	r3, r0
 800c1c4:	4637      	mov	r7, r6
 800c1c6:	dc04      	bgt.n	800c1d2 <__swbuf_r+0x42>
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 ffc4 	bl	800d158 <_fflush_r>
 800c1d0:	bb30      	cbnz	r0, 800c220 <__swbuf_r+0x90>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	60a3      	str	r3, [r4, #8]
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	6022      	str	r2, [r4, #0]
 800c1de:	701e      	strb	r6, [r3, #0]
 800c1e0:	6963      	ldr	r3, [r4, #20]
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	4283      	cmp	r3, r0
 800c1e6:	d004      	beq.n	800c1f2 <__swbuf_r+0x62>
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	07db      	lsls	r3, r3, #31
 800c1ec:	d506      	bpl.n	800c1fc <__swbuf_r+0x6c>
 800c1ee:	2e0a      	cmp	r6, #10
 800c1f0:	d104      	bne.n	800c1fc <__swbuf_r+0x6c>
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f000 ffaf 	bl	800d158 <_fflush_r>
 800c1fa:	b988      	cbnz	r0, 800c220 <__swbuf_r+0x90>
 800c1fc:	4638      	mov	r0, r7
 800c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <__swbuf_r+0x9c>)
 800c202:	429c      	cmp	r4, r3
 800c204:	d101      	bne.n	800c20a <__swbuf_r+0x7a>
 800c206:	68ac      	ldr	r4, [r5, #8]
 800c208:	e7cf      	b.n	800c1aa <__swbuf_r+0x1a>
 800c20a:	4b09      	ldr	r3, [pc, #36]	; (800c230 <__swbuf_r+0xa0>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	bf08      	it	eq
 800c210:	68ec      	ldreq	r4, [r5, #12]
 800c212:	e7ca      	b.n	800c1aa <__swbuf_r+0x1a>
 800c214:	4621      	mov	r1, r4
 800c216:	4628      	mov	r0, r5
 800c218:	f000 f81e 	bl	800c258 <__swsetup_r>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d0cb      	beq.n	800c1b8 <__swbuf_r+0x28>
 800c220:	f04f 37ff 	mov.w	r7, #4294967295
 800c224:	e7ea      	b.n	800c1fc <__swbuf_r+0x6c>
 800c226:	bf00      	nop
 800c228:	08010074 	.word	0x08010074
 800c22c:	08010094 	.word	0x08010094
 800c230:	08010054 	.word	0x08010054

0800c234 <_write_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	; (800c254 <_write_r+0x20>)
 800c238:	4604      	mov	r4, r0
 800c23a:	4608      	mov	r0, r1
 800c23c:	4611      	mov	r1, r2
 800c23e:	2200      	movs	r2, #0
 800c240:	602a      	str	r2, [r5, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	f7f7 f971 	bl	800352a <_write>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_write_r+0x1e>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_write_r+0x1e>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	200009f0 	.word	0x200009f0

0800c258 <__swsetup_r>:
 800c258:	4b32      	ldr	r3, [pc, #200]	; (800c324 <__swsetup_r+0xcc>)
 800c25a:	b570      	push	{r4, r5, r6, lr}
 800c25c:	681d      	ldr	r5, [r3, #0]
 800c25e:	4606      	mov	r6, r0
 800c260:	460c      	mov	r4, r1
 800c262:	b125      	cbz	r5, 800c26e <__swsetup_r+0x16>
 800c264:	69ab      	ldr	r3, [r5, #24]
 800c266:	b913      	cbnz	r3, 800c26e <__swsetup_r+0x16>
 800c268:	4628      	mov	r0, r5
 800c26a:	f001 f809 	bl	800d280 <__sinit>
 800c26e:	4b2e      	ldr	r3, [pc, #184]	; (800c328 <__swsetup_r+0xd0>)
 800c270:	429c      	cmp	r4, r3
 800c272:	d10f      	bne.n	800c294 <__swsetup_r+0x3c>
 800c274:	686c      	ldr	r4, [r5, #4]
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c27c:	0719      	lsls	r1, r3, #28
 800c27e:	d42c      	bmi.n	800c2da <__swsetup_r+0x82>
 800c280:	06dd      	lsls	r5, r3, #27
 800c282:	d411      	bmi.n	800c2a8 <__swsetup_r+0x50>
 800c284:	2309      	movs	r3, #9
 800c286:	6033      	str	r3, [r6, #0]
 800c288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	f04f 30ff 	mov.w	r0, #4294967295
 800c292:	e03e      	b.n	800c312 <__swsetup_r+0xba>
 800c294:	4b25      	ldr	r3, [pc, #148]	; (800c32c <__swsetup_r+0xd4>)
 800c296:	429c      	cmp	r4, r3
 800c298:	d101      	bne.n	800c29e <__swsetup_r+0x46>
 800c29a:	68ac      	ldr	r4, [r5, #8]
 800c29c:	e7eb      	b.n	800c276 <__swsetup_r+0x1e>
 800c29e:	4b24      	ldr	r3, [pc, #144]	; (800c330 <__swsetup_r+0xd8>)
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	bf08      	it	eq
 800c2a4:	68ec      	ldreq	r4, [r5, #12]
 800c2a6:	e7e6      	b.n	800c276 <__swsetup_r+0x1e>
 800c2a8:	0758      	lsls	r0, r3, #29
 800c2aa:	d512      	bpl.n	800c2d2 <__swsetup_r+0x7a>
 800c2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ae:	b141      	cbz	r1, 800c2c2 <__swsetup_r+0x6a>
 800c2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b4:	4299      	cmp	r1, r3
 800c2b6:	d002      	beq.n	800c2be <__swsetup_r+0x66>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f002 f96d 	bl	800e598 <_free_r>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	6363      	str	r3, [r4, #52]	; 0x34
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2c8:	81a3      	strh	r3, [r4, #12]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	6063      	str	r3, [r4, #4]
 800c2ce:	6923      	ldr	r3, [r4, #16]
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	f043 0308 	orr.w	r3, r3, #8
 800c2d8:	81a3      	strh	r3, [r4, #12]
 800c2da:	6923      	ldr	r3, [r4, #16]
 800c2dc:	b94b      	cbnz	r3, 800c2f2 <__swsetup_r+0x9a>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2e8:	d003      	beq.n	800c2f2 <__swsetup_r+0x9a>
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f001 fc13 	bl	800db18 <__smakebuf_r>
 800c2f2:	89a0      	ldrh	r0, [r4, #12]
 800c2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2f8:	f010 0301 	ands.w	r3, r0, #1
 800c2fc:	d00a      	beq.n	800c314 <__swsetup_r+0xbc>
 800c2fe:	2300      	movs	r3, #0
 800c300:	60a3      	str	r3, [r4, #8]
 800c302:	6963      	ldr	r3, [r4, #20]
 800c304:	425b      	negs	r3, r3
 800c306:	61a3      	str	r3, [r4, #24]
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	b943      	cbnz	r3, 800c31e <__swsetup_r+0xc6>
 800c30c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c310:	d1ba      	bne.n	800c288 <__swsetup_r+0x30>
 800c312:	bd70      	pop	{r4, r5, r6, pc}
 800c314:	0781      	lsls	r1, r0, #30
 800c316:	bf58      	it	pl
 800c318:	6963      	ldrpl	r3, [r4, #20]
 800c31a:	60a3      	str	r3, [r4, #8]
 800c31c:	e7f4      	b.n	800c308 <__swsetup_r+0xb0>
 800c31e:	2000      	movs	r0, #0
 800c320:	e7f7      	b.n	800c312 <__swsetup_r+0xba>
 800c322:	bf00      	nop
 800c324:	20000040 	.word	0x20000040
 800c328:	08010074 	.word	0x08010074
 800c32c:	08010094 	.word	0x08010094
 800c330:	08010054 	.word	0x08010054

0800c334 <_close_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d06      	ldr	r5, [pc, #24]	; (800c350 <_close_r+0x1c>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f7 f90f 	bl	8003562 <_close>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_close_r+0x1a>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_close_r+0x1a>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	200009f0 	.word	0x200009f0

0800c354 <quorem>:
 800c354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	6903      	ldr	r3, [r0, #16]
 800c35a:	690c      	ldr	r4, [r1, #16]
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	4607      	mov	r7, r0
 800c360:	f2c0 8081 	blt.w	800c466 <quorem+0x112>
 800c364:	3c01      	subs	r4, #1
 800c366:	f101 0814 	add.w	r8, r1, #20
 800c36a:	f100 0514 	add.w	r5, r0, #20
 800c36e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c37c:	3301      	adds	r3, #1
 800c37e:	429a      	cmp	r2, r3
 800c380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c388:	fbb2 f6f3 	udiv	r6, r2, r3
 800c38c:	d331      	bcc.n	800c3f2 <quorem+0x9e>
 800c38e:	f04f 0e00 	mov.w	lr, #0
 800c392:	4640      	mov	r0, r8
 800c394:	46ac      	mov	ip, r5
 800c396:	46f2      	mov	sl, lr
 800c398:	f850 2b04 	ldr.w	r2, [r0], #4
 800c39c:	b293      	uxth	r3, r2
 800c39e:	fb06 e303 	mla	r3, r6, r3, lr
 800c3a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3ac:	f8dc a000 	ldr.w	sl, [ip]
 800c3b0:	0c12      	lsrs	r2, r2, #16
 800c3b2:	fa13 f38a 	uxtah	r3, r3, sl
 800c3b6:	fb06 e202 	mla	r2, r6, r2, lr
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	9b00      	ldr	r3, [sp, #0]
 800c3be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3c2:	b292      	uxth	r2, r2
 800c3c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c3c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3d0:	4581      	cmp	r9, r0
 800c3d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3d6:	f84c 3b04 	str.w	r3, [ip], #4
 800c3da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3de:	d2db      	bcs.n	800c398 <quorem+0x44>
 800c3e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3e4:	b92b      	cbnz	r3, 800c3f2 <quorem+0x9e>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	3b04      	subs	r3, #4
 800c3ea:	429d      	cmp	r5, r3
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	d32e      	bcc.n	800c44e <quorem+0xfa>
 800c3f0:	613c      	str	r4, [r7, #16]
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	f001 fec4 	bl	800e180 <__mcmp>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	db24      	blt.n	800c446 <quorem+0xf2>
 800c3fc:	3601      	adds	r6, #1
 800c3fe:	4628      	mov	r0, r5
 800c400:	f04f 0c00 	mov.w	ip, #0
 800c404:	f858 2b04 	ldr.w	r2, [r8], #4
 800c408:	f8d0 e000 	ldr.w	lr, [r0]
 800c40c:	b293      	uxth	r3, r2
 800c40e:	ebac 0303 	sub.w	r3, ip, r3
 800c412:	0c12      	lsrs	r2, r2, #16
 800c414:	fa13 f38e 	uxtah	r3, r3, lr
 800c418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c420:	b29b      	uxth	r3, r3
 800c422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c426:	45c1      	cmp	r9, r8
 800c428:	f840 3b04 	str.w	r3, [r0], #4
 800c42c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c430:	d2e8      	bcs.n	800c404 <quorem+0xb0>
 800c432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c43a:	b922      	cbnz	r2, 800c446 <quorem+0xf2>
 800c43c:	3b04      	subs	r3, #4
 800c43e:	429d      	cmp	r5, r3
 800c440:	461a      	mov	r2, r3
 800c442:	d30a      	bcc.n	800c45a <quorem+0x106>
 800c444:	613c      	str	r4, [r7, #16]
 800c446:	4630      	mov	r0, r6
 800c448:	b003      	add	sp, #12
 800c44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44e:	6812      	ldr	r2, [r2, #0]
 800c450:	3b04      	subs	r3, #4
 800c452:	2a00      	cmp	r2, #0
 800c454:	d1cc      	bne.n	800c3f0 <quorem+0x9c>
 800c456:	3c01      	subs	r4, #1
 800c458:	e7c7      	b.n	800c3ea <quorem+0x96>
 800c45a:	6812      	ldr	r2, [r2, #0]
 800c45c:	3b04      	subs	r3, #4
 800c45e:	2a00      	cmp	r2, #0
 800c460:	d1f0      	bne.n	800c444 <quorem+0xf0>
 800c462:	3c01      	subs	r4, #1
 800c464:	e7eb      	b.n	800c43e <quorem+0xea>
 800c466:	2000      	movs	r0, #0
 800c468:	e7ee      	b.n	800c448 <quorem+0xf4>
 800c46a:	0000      	movs	r0, r0
 800c46c:	0000      	movs	r0, r0
	...

0800c470 <_dtoa_r>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	ed2d 8b04 	vpush	{d8-d9}
 800c478:	ec57 6b10 	vmov	r6, r7, d0
 800c47c:	b093      	sub	sp, #76	; 0x4c
 800c47e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c484:	9106      	str	r1, [sp, #24]
 800c486:	ee10 aa10 	vmov	sl, s0
 800c48a:	4604      	mov	r4, r0
 800c48c:	9209      	str	r2, [sp, #36]	; 0x24
 800c48e:	930c      	str	r3, [sp, #48]	; 0x30
 800c490:	46bb      	mov	fp, r7
 800c492:	b975      	cbnz	r5, 800c4b2 <_dtoa_r+0x42>
 800c494:	2010      	movs	r0, #16
 800c496:	f001 fb7f 	bl	800db98 <malloc>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6260      	str	r0, [r4, #36]	; 0x24
 800c49e:	b920      	cbnz	r0, 800c4aa <_dtoa_r+0x3a>
 800c4a0:	4ba7      	ldr	r3, [pc, #668]	; (800c740 <_dtoa_r+0x2d0>)
 800c4a2:	21ea      	movs	r1, #234	; 0xea
 800c4a4:	48a7      	ldr	r0, [pc, #668]	; (800c744 <_dtoa_r+0x2d4>)
 800c4a6:	f003 f897 	bl	800f5d8 <__assert_func>
 800c4aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4ae:	6005      	str	r5, [r0, #0]
 800c4b0:	60c5      	str	r5, [r0, #12]
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	6819      	ldr	r1, [r3, #0]
 800c4b6:	b151      	cbz	r1, 800c4ce <_dtoa_r+0x5e>
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	604a      	str	r2, [r1, #4]
 800c4bc:	2301      	movs	r3, #1
 800c4be:	4093      	lsls	r3, r2
 800c4c0:	608b      	str	r3, [r1, #8]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f001 fbd0 	bl	800dc68 <_Bfree>
 800c4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	1e3b      	subs	r3, r7, #0
 800c4d0:	bfaa      	itet	ge
 800c4d2:	2300      	movge	r3, #0
 800c4d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c4d8:	f8c8 3000 	strge.w	r3, [r8]
 800c4dc:	4b9a      	ldr	r3, [pc, #616]	; (800c748 <_dtoa_r+0x2d8>)
 800c4de:	bfbc      	itt	lt
 800c4e0:	2201      	movlt	r2, #1
 800c4e2:	f8c8 2000 	strlt.w	r2, [r8]
 800c4e6:	ea33 030b 	bics.w	r3, r3, fp
 800c4ea:	d11b      	bne.n	800c524 <_dtoa_r+0xb4>
 800c4ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4f8:	4333      	orrs	r3, r6
 800c4fa:	f000 8592 	beq.w	800d022 <_dtoa_r+0xbb2>
 800c4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c500:	b963      	cbnz	r3, 800c51c <_dtoa_r+0xac>
 800c502:	4b92      	ldr	r3, [pc, #584]	; (800c74c <_dtoa_r+0x2dc>)
 800c504:	e022      	b.n	800c54c <_dtoa_r+0xdc>
 800c506:	4b92      	ldr	r3, [pc, #584]	; (800c750 <_dtoa_r+0x2e0>)
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	3308      	adds	r3, #8
 800c50c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c50e:	6013      	str	r3, [r2, #0]
 800c510:	9801      	ldr	r0, [sp, #4]
 800c512:	b013      	add	sp, #76	; 0x4c
 800c514:	ecbd 8b04 	vpop	{d8-d9}
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	4b8b      	ldr	r3, [pc, #556]	; (800c74c <_dtoa_r+0x2dc>)
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	3303      	adds	r3, #3
 800c522:	e7f3      	b.n	800c50c <_dtoa_r+0x9c>
 800c524:	2200      	movs	r2, #0
 800c526:	2300      	movs	r3, #0
 800c528:	4650      	mov	r0, sl
 800c52a:	4659      	mov	r1, fp
 800c52c:	f7f4 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c530:	ec4b ab19 	vmov	d9, sl, fp
 800c534:	4680      	mov	r8, r0
 800c536:	b158      	cbz	r0, 800c550 <_dtoa_r+0xe0>
 800c538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c53a:	2301      	movs	r3, #1
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 856b 	beq.w	800d01c <_dtoa_r+0xbac>
 800c546:	4883      	ldr	r0, [pc, #524]	; (800c754 <_dtoa_r+0x2e4>)
 800c548:	6018      	str	r0, [r3, #0]
 800c54a:	1e43      	subs	r3, r0, #1
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	e7df      	b.n	800c510 <_dtoa_r+0xa0>
 800c550:	ec4b ab10 	vmov	d0, sl, fp
 800c554:	aa10      	add	r2, sp, #64	; 0x40
 800c556:	a911      	add	r1, sp, #68	; 0x44
 800c558:	4620      	mov	r0, r4
 800c55a:	f001 ff33 	bl	800e3c4 <__d2b>
 800c55e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c562:	ee08 0a10 	vmov	s16, r0
 800c566:	2d00      	cmp	r5, #0
 800c568:	f000 8084 	beq.w	800c674 <_dtoa_r+0x204>
 800c56c:	ee19 3a90 	vmov	r3, s19
 800c570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c578:	4656      	mov	r6, sl
 800c57a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c586:	4b74      	ldr	r3, [pc, #464]	; (800c758 <_dtoa_r+0x2e8>)
 800c588:	2200      	movs	r2, #0
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f3 fe7b 	bl	8000288 <__aeabi_dsub>
 800c592:	a365      	add	r3, pc, #404	; (adr r3, 800c728 <_dtoa_r+0x2b8>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f4 f82e 	bl	80005f8 <__aeabi_dmul>
 800c59c:	a364      	add	r3, pc, #400	; (adr r3, 800c730 <_dtoa_r+0x2c0>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe73 	bl	800028c <__adddf3>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	f7f3 ffba 	bl	8000524 <__aeabi_i2d>
 800c5b0:	a361      	add	r3, pc, #388	; (adr r3, 800c738 <_dtoa_r+0x2c8>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f7f4 f81f 	bl	80005f8 <__aeabi_dmul>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4630      	mov	r0, r6
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	f7f3 fe63 	bl	800028c <__adddf3>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	f7f4 fac5 	bl	8000b58 <__aeabi_d2iz>
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	9000      	str	r0, [sp, #0]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	f7f4 fa80 	bl	8000adc <__aeabi_dcmplt>
 800c5dc:	b150      	cbz	r0, 800c5f4 <_dtoa_r+0x184>
 800c5de:	9800      	ldr	r0, [sp, #0]
 800c5e0:	f7f3 ffa0 	bl	8000524 <__aeabi_i2d>
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	f7f4 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ec:	b910      	cbnz	r0, 800c5f4 <_dtoa_r+0x184>
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	2b16      	cmp	r3, #22
 800c5f8:	d85a      	bhi.n	800c6b0 <_dtoa_r+0x240>
 800c5fa:	9a00      	ldr	r2, [sp, #0]
 800c5fc:	4b57      	ldr	r3, [pc, #348]	; (800c75c <_dtoa_r+0x2ec>)
 800c5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	ec51 0b19 	vmov	r0, r1, d9
 800c60a:	f7f4 fa67 	bl	8000adc <__aeabi_dcmplt>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d050      	beq.n	800c6b4 <_dtoa_r+0x244>
 800c612:	9b00      	ldr	r3, [sp, #0]
 800c614:	3b01      	subs	r3, #1
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	2300      	movs	r3, #0
 800c61a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c61e:	1b5d      	subs	r5, r3, r5
 800c620:	1e6b      	subs	r3, r5, #1
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	bf45      	ittet	mi
 800c626:	f1c5 0301 	rsbmi	r3, r5, #1
 800c62a:	9304      	strmi	r3, [sp, #16]
 800c62c:	2300      	movpl	r3, #0
 800c62e:	2300      	movmi	r3, #0
 800c630:	bf4c      	ite	mi
 800c632:	9305      	strmi	r3, [sp, #20]
 800c634:	9304      	strpl	r3, [sp, #16]
 800c636:	9b00      	ldr	r3, [sp, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db3d      	blt.n	800c6b8 <_dtoa_r+0x248>
 800c63c:	9b05      	ldr	r3, [sp, #20]
 800c63e:	9a00      	ldr	r2, [sp, #0]
 800c640:	920a      	str	r2, [sp, #40]	; 0x28
 800c642:	4413      	add	r3, r2
 800c644:	9305      	str	r3, [sp, #20]
 800c646:	2300      	movs	r3, #0
 800c648:	9307      	str	r3, [sp, #28]
 800c64a:	9b06      	ldr	r3, [sp, #24]
 800c64c:	2b09      	cmp	r3, #9
 800c64e:	f200 8089 	bhi.w	800c764 <_dtoa_r+0x2f4>
 800c652:	2b05      	cmp	r3, #5
 800c654:	bfc4      	itt	gt
 800c656:	3b04      	subgt	r3, #4
 800c658:	9306      	strgt	r3, [sp, #24]
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	f1a3 0302 	sub.w	r3, r3, #2
 800c660:	bfcc      	ite	gt
 800c662:	2500      	movgt	r5, #0
 800c664:	2501      	movle	r5, #1
 800c666:	2b03      	cmp	r3, #3
 800c668:	f200 8087 	bhi.w	800c77a <_dtoa_r+0x30a>
 800c66c:	e8df f003 	tbb	[pc, r3]
 800c670:	59383a2d 	.word	0x59383a2d
 800c674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c678:	441d      	add	r5, r3
 800c67a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c67e:	2b20      	cmp	r3, #32
 800c680:	bfc1      	itttt	gt
 800c682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c68a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c68e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c692:	bfda      	itte	le
 800c694:	f1c3 0320 	rsble	r3, r3, #32
 800c698:	fa06 f003 	lslle.w	r0, r6, r3
 800c69c:	4318      	orrgt	r0, r3
 800c69e:	f7f3 ff31 	bl	8000504 <__aeabi_ui2d>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6aa:	3d01      	subs	r5, #1
 800c6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ae:	e76a      	b.n	800c586 <_dtoa_r+0x116>
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e7b2      	b.n	800c61a <_dtoa_r+0x1aa>
 800c6b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6b6:	e7b1      	b.n	800c61c <_dtoa_r+0x1ac>
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	1a9b      	subs	r3, r3, r2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	4253      	negs	r3, r2
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c8:	e7bf      	b.n	800c64a <_dtoa_r+0x1da>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	9308      	str	r3, [sp, #32]
 800c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc55      	bgt.n	800c780 <_dtoa_r+0x310>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6de:	e00c      	b.n	800c6fa <_dtoa_r+0x28a>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e7f3      	b.n	800c6cc <_dtoa_r+0x25c>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e8:	9308      	str	r3, [sp, #32]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	9302      	str	r3, [sp, #8]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	9303      	str	r3, [sp, #12]
 800c6f6:	bfb8      	it	lt
 800c6f8:	2301      	movlt	r3, #1
 800c6fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	6042      	str	r2, [r0, #4]
 800c700:	2204      	movs	r2, #4
 800c702:	f102 0614 	add.w	r6, r2, #20
 800c706:	429e      	cmp	r6, r3
 800c708:	6841      	ldr	r1, [r0, #4]
 800c70a:	d93d      	bls.n	800c788 <_dtoa_r+0x318>
 800c70c:	4620      	mov	r0, r4
 800c70e:	f001 fa6b 	bl	800dbe8 <_Balloc>
 800c712:	9001      	str	r0, [sp, #4]
 800c714:	2800      	cmp	r0, #0
 800c716:	d13b      	bne.n	800c790 <_dtoa_r+0x320>
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <_dtoa_r+0x2f0>)
 800c71a:	4602      	mov	r2, r0
 800c71c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c720:	e6c0      	b.n	800c4a4 <_dtoa_r+0x34>
 800c722:	2301      	movs	r3, #1
 800c724:	e7df      	b.n	800c6e6 <_dtoa_r+0x276>
 800c726:	bf00      	nop
 800c728:	636f4361 	.word	0x636f4361
 800c72c:	3fd287a7 	.word	0x3fd287a7
 800c730:	8b60c8b3 	.word	0x8b60c8b3
 800c734:	3fc68a28 	.word	0x3fc68a28
 800c738:	509f79fb 	.word	0x509f79fb
 800c73c:	3fd34413 	.word	0x3fd34413
 800c740:	0800ffce 	.word	0x0800ffce
 800c744:	0800ffe5 	.word	0x0800ffe5
 800c748:	7ff00000 	.word	0x7ff00000
 800c74c:	0800ffca 	.word	0x0800ffca
 800c750:	0800ffc1 	.word	0x0800ffc1
 800c754:	080102a2 	.word	0x080102a2
 800c758:	3ff80000 	.word	0x3ff80000
 800c75c:	080101b8 	.word	0x080101b8
 800c760:	08010040 	.word	0x08010040
 800c764:	2501      	movs	r5, #1
 800c766:	2300      	movs	r3, #0
 800c768:	9306      	str	r3, [sp, #24]
 800c76a:	9508      	str	r5, [sp, #32]
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	2312      	movs	r3, #18
 800c778:	e7b0      	b.n	800c6dc <_dtoa_r+0x26c>
 800c77a:	2301      	movs	r3, #1
 800c77c:	9308      	str	r3, [sp, #32]
 800c77e:	e7f5      	b.n	800c76c <_dtoa_r+0x2fc>
 800c780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c786:	e7b8      	b.n	800c6fa <_dtoa_r+0x28a>
 800c788:	3101      	adds	r1, #1
 800c78a:	6041      	str	r1, [r0, #4]
 800c78c:	0052      	lsls	r2, r2, #1
 800c78e:	e7b8      	b.n	800c702 <_dtoa_r+0x292>
 800c790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c792:	9a01      	ldr	r2, [sp, #4]
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	2b0e      	cmp	r3, #14
 800c79a:	f200 809d 	bhi.w	800c8d8 <_dtoa_r+0x468>
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	f000 809a 	beq.w	800c8d8 <_dtoa_r+0x468>
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd32      	ble.n	800c810 <_dtoa_r+0x3a0>
 800c7aa:	4ab7      	ldr	r2, [pc, #732]	; (800ca88 <_dtoa_r+0x618>)
 800c7ac:	f003 030f 	and.w	r3, r3, #15
 800c7b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7b8:	9b00      	ldr	r3, [sp, #0]
 800c7ba:	05d8      	lsls	r0, r3, #23
 800c7bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c7c0:	d516      	bpl.n	800c7f0 <_dtoa_r+0x380>
 800c7c2:	4bb2      	ldr	r3, [pc, #712]	; (800ca8c <_dtoa_r+0x61c>)
 800c7c4:	ec51 0b19 	vmov	r0, r1, d9
 800c7c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7cc:	f7f4 f83e 	bl	800084c <__aeabi_ddiv>
 800c7d0:	f007 070f 	and.w	r7, r7, #15
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	468b      	mov	fp, r1
 800c7d8:	2503      	movs	r5, #3
 800c7da:	4eac      	ldr	r6, [pc, #688]	; (800ca8c <_dtoa_r+0x61c>)
 800c7dc:	b957      	cbnz	r7, 800c7f4 <_dtoa_r+0x384>
 800c7de:	4642      	mov	r2, r8
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	f7f4 f831 	bl	800084c <__aeabi_ddiv>
 800c7ea:	4682      	mov	sl, r0
 800c7ec:	468b      	mov	fp, r1
 800c7ee:	e028      	b.n	800c842 <_dtoa_r+0x3d2>
 800c7f0:	2502      	movs	r5, #2
 800c7f2:	e7f2      	b.n	800c7da <_dtoa_r+0x36a>
 800c7f4:	07f9      	lsls	r1, r7, #31
 800c7f6:	d508      	bpl.n	800c80a <_dtoa_r+0x39a>
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c800:	f7f3 fefa 	bl	80005f8 <__aeabi_dmul>
 800c804:	3501      	adds	r5, #1
 800c806:	4680      	mov	r8, r0
 800c808:	4689      	mov	r9, r1
 800c80a:	107f      	asrs	r7, r7, #1
 800c80c:	3608      	adds	r6, #8
 800c80e:	e7e5      	b.n	800c7dc <_dtoa_r+0x36c>
 800c810:	f000 809b 	beq.w	800c94a <_dtoa_r+0x4da>
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	4f9d      	ldr	r7, [pc, #628]	; (800ca8c <_dtoa_r+0x61c>)
 800c818:	425e      	negs	r6, r3
 800c81a:	4b9b      	ldr	r3, [pc, #620]	; (800ca88 <_dtoa_r+0x618>)
 800c81c:	f006 020f 	and.w	r2, r6, #15
 800c820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	ec51 0b19 	vmov	r0, r1, d9
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	1136      	asrs	r6, r6, #4
 800c832:	4682      	mov	sl, r0
 800c834:	468b      	mov	fp, r1
 800c836:	2300      	movs	r3, #0
 800c838:	2502      	movs	r5, #2
 800c83a:	2e00      	cmp	r6, #0
 800c83c:	d17a      	bne.n	800c934 <_dtoa_r+0x4c4>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1d3      	bne.n	800c7ea <_dtoa_r+0x37a>
 800c842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 8082 	beq.w	800c94e <_dtoa_r+0x4de>
 800c84a:	4b91      	ldr	r3, [pc, #580]	; (800ca90 <_dtoa_r+0x620>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	4650      	mov	r0, sl
 800c850:	4659      	mov	r1, fp
 800c852:	f7f4 f943 	bl	8000adc <__aeabi_dcmplt>
 800c856:	2800      	cmp	r0, #0
 800c858:	d079      	beq.n	800c94e <_dtoa_r+0x4de>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d076      	beq.n	800c94e <_dtoa_r+0x4de>
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd36      	ble.n	800c8d4 <_dtoa_r+0x464>
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	4650      	mov	r0, sl
 800c86a:	4659      	mov	r1, fp
 800c86c:	1e5f      	subs	r7, r3, #1
 800c86e:	2200      	movs	r2, #0
 800c870:	4b88      	ldr	r3, [pc, #544]	; (800ca94 <_dtoa_r+0x624>)
 800c872:	f7f3 fec1 	bl	80005f8 <__aeabi_dmul>
 800c876:	9e02      	ldr	r6, [sp, #8]
 800c878:	4682      	mov	sl, r0
 800c87a:	468b      	mov	fp, r1
 800c87c:	3501      	adds	r5, #1
 800c87e:	4628      	mov	r0, r5
 800c880:	f7f3 fe50 	bl	8000524 <__aeabi_i2d>
 800c884:	4652      	mov	r2, sl
 800c886:	465b      	mov	r3, fp
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	4b82      	ldr	r3, [pc, #520]	; (800ca98 <_dtoa_r+0x628>)
 800c88e:	2200      	movs	r2, #0
 800c890:	f7f3 fcfc 	bl	800028c <__adddf3>
 800c894:	46d0      	mov	r8, sl
 800c896:	46d9      	mov	r9, fp
 800c898:	4682      	mov	sl, r0
 800c89a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d158      	bne.n	800c954 <_dtoa_r+0x4e4>
 800c8a2:	4b7e      	ldr	r3, [pc, #504]	; (800ca9c <_dtoa_r+0x62c>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fced 	bl	8000288 <__aeabi_dsub>
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	4689      	mov	r9, r1
 800c8b6:	f7f4 f92f 	bl	8000b18 <__aeabi_dcmpgt>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	f040 8295 	bne.w	800cdea <_dtoa_r+0x97a>
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f4 f907 	bl	8000adc <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f040 8289 	bne.w	800cde6 <_dtoa_r+0x976>
 800c8d4:	ec5b ab19 	vmov	sl, fp, d9
 800c8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f2c0 8148 	blt.w	800cb70 <_dtoa_r+0x700>
 800c8e0:	9a00      	ldr	r2, [sp, #0]
 800c8e2:	2a0e      	cmp	r2, #14
 800c8e4:	f300 8144 	bgt.w	800cb70 <_dtoa_r+0x700>
 800c8e8:	4b67      	ldr	r3, [pc, #412]	; (800ca88 <_dtoa_r+0x618>)
 800c8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f280 80d5 	bge.w	800caa4 <_dtoa_r+0x634>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f300 80d1 	bgt.w	800caa4 <_dtoa_r+0x634>
 800c902:	f040 826f 	bne.w	800cde4 <_dtoa_r+0x974>
 800c906:	4b65      	ldr	r3, [pc, #404]	; (800ca9c <_dtoa_r+0x62c>)
 800c908:	2200      	movs	r2, #0
 800c90a:	4640      	mov	r0, r8
 800c90c:	4649      	mov	r1, r9
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	f7f4 f8f5 	bl	8000b04 <__aeabi_dcmpge>
 800c91a:	9e03      	ldr	r6, [sp, #12]
 800c91c:	4637      	mov	r7, r6
 800c91e:	2800      	cmp	r0, #0
 800c920:	f040 8245 	bne.w	800cdae <_dtoa_r+0x93e>
 800c924:	9d01      	ldr	r5, [sp, #4]
 800c926:	2331      	movs	r3, #49	; 0x31
 800c928:	f805 3b01 	strb.w	r3, [r5], #1
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	3301      	adds	r3, #1
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	e240      	b.n	800cdb6 <_dtoa_r+0x946>
 800c934:	07f2      	lsls	r2, r6, #31
 800c936:	d505      	bpl.n	800c944 <_dtoa_r+0x4d4>
 800c938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93c:	f7f3 fe5c 	bl	80005f8 <__aeabi_dmul>
 800c940:	3501      	adds	r5, #1
 800c942:	2301      	movs	r3, #1
 800c944:	1076      	asrs	r6, r6, #1
 800c946:	3708      	adds	r7, #8
 800c948:	e777      	b.n	800c83a <_dtoa_r+0x3ca>
 800c94a:	2502      	movs	r5, #2
 800c94c:	e779      	b.n	800c842 <_dtoa_r+0x3d2>
 800c94e:	9f00      	ldr	r7, [sp, #0]
 800c950:	9e03      	ldr	r6, [sp, #12]
 800c952:	e794      	b.n	800c87e <_dtoa_r+0x40e>
 800c954:	9901      	ldr	r1, [sp, #4]
 800c956:	4b4c      	ldr	r3, [pc, #304]	; (800ca88 <_dtoa_r+0x618>)
 800c958:	4431      	add	r1, r6
 800c95a:	910d      	str	r1, [sp, #52]	; 0x34
 800c95c:	9908      	ldr	r1, [sp, #32]
 800c95e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c966:	2900      	cmp	r1, #0
 800c968:	d043      	beq.n	800c9f2 <_dtoa_r+0x582>
 800c96a:	494d      	ldr	r1, [pc, #308]	; (800caa0 <_dtoa_r+0x630>)
 800c96c:	2000      	movs	r0, #0
 800c96e:	f7f3 ff6d 	bl	800084c <__aeabi_ddiv>
 800c972:	4652      	mov	r2, sl
 800c974:	465b      	mov	r3, fp
 800c976:	f7f3 fc87 	bl	8000288 <__aeabi_dsub>
 800c97a:	9d01      	ldr	r5, [sp, #4]
 800c97c:	4682      	mov	sl, r0
 800c97e:	468b      	mov	fp, r1
 800c980:	4649      	mov	r1, r9
 800c982:	4640      	mov	r0, r8
 800c984:	f7f4 f8e8 	bl	8000b58 <__aeabi_d2iz>
 800c988:	4606      	mov	r6, r0
 800c98a:	f7f3 fdcb 	bl	8000524 <__aeabi_i2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc77 	bl	8000288 <__aeabi_dsub>
 800c99a:	3630      	adds	r6, #48	; 0x30
 800c99c:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	f7f4 f898 	bl	8000adc <__aeabi_dcmplt>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d163      	bne.n	800ca78 <_dtoa_r+0x608>
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4936      	ldr	r1, [pc, #216]	; (800ca90 <_dtoa_r+0x620>)
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f7f3 fc66 	bl	8000288 <__aeabi_dsub>
 800c9bc:	4652      	mov	r2, sl
 800c9be:	465b      	mov	r3, fp
 800c9c0:	f7f4 f88c 	bl	8000adc <__aeabi_dcmplt>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f040 80b5 	bne.w	800cb34 <_dtoa_r+0x6c4>
 800c9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	d081      	beq.n	800c8d4 <_dtoa_r+0x464>
 800c9d0:	4b30      	ldr	r3, [pc, #192]	; (800ca94 <_dtoa_r+0x624>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	f7f3 fe0e 	bl	80005f8 <__aeabi_dmul>
 800c9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ca94 <_dtoa_r+0x624>)
 800c9de:	4682      	mov	sl, r0
 800c9e0:	468b      	mov	fp, r1
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f7f3 fe06 	bl	80005f8 <__aeabi_dmul>
 800c9ec:	4680      	mov	r8, r0
 800c9ee:	4689      	mov	r9, r1
 800c9f0:	e7c6      	b.n	800c980 <_dtoa_r+0x510>
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	f7f3 fdff 	bl	80005f8 <__aeabi_dmul>
 800c9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9fc:	9d01      	ldr	r5, [sp, #4]
 800c9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca00:	4682      	mov	sl, r0
 800ca02:	468b      	mov	fp, r1
 800ca04:	4649      	mov	r1, r9
 800ca06:	4640      	mov	r0, r8
 800ca08:	f7f4 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	f7f3 fd89 	bl	8000524 <__aeabi_i2d>
 800ca12:	3630      	adds	r6, #48	; 0x30
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f3 fc34 	bl	8000288 <__aeabi_dsub>
 800ca20:	f805 6b01 	strb.w	r6, [r5], #1
 800ca24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca26:	429d      	cmp	r5, r3
 800ca28:	4680      	mov	r8, r0
 800ca2a:	4689      	mov	r9, r1
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	d124      	bne.n	800ca7c <_dtoa_r+0x60c>
 800ca32:	4b1b      	ldr	r3, [pc, #108]	; (800caa0 <_dtoa_r+0x630>)
 800ca34:	4650      	mov	r0, sl
 800ca36:	4659      	mov	r1, fp
 800ca38:	f7f3 fc28 	bl	800028c <__adddf3>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4640      	mov	r0, r8
 800ca42:	4649      	mov	r1, r9
 800ca44:	f7f4 f868 	bl	8000b18 <__aeabi_dcmpgt>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d173      	bne.n	800cb34 <_dtoa_r+0x6c4>
 800ca4c:	4652      	mov	r2, sl
 800ca4e:	465b      	mov	r3, fp
 800ca50:	4913      	ldr	r1, [pc, #76]	; (800caa0 <_dtoa_r+0x630>)
 800ca52:	2000      	movs	r0, #0
 800ca54:	f7f3 fc18 	bl	8000288 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	4649      	mov	r1, r9
 800ca60:	f7f4 f83c 	bl	8000adc <__aeabi_dcmplt>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	f43f af35 	beq.w	800c8d4 <_dtoa_r+0x464>
 800ca6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca6c:	1e6b      	subs	r3, r5, #1
 800ca6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca74:	2b30      	cmp	r3, #48	; 0x30
 800ca76:	d0f8      	beq.n	800ca6a <_dtoa_r+0x5fa>
 800ca78:	9700      	str	r7, [sp, #0]
 800ca7a:	e049      	b.n	800cb10 <_dtoa_r+0x6a0>
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <_dtoa_r+0x624>)
 800ca7e:	f7f3 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ca82:	4680      	mov	r8, r0
 800ca84:	4689      	mov	r9, r1
 800ca86:	e7bd      	b.n	800ca04 <_dtoa_r+0x594>
 800ca88:	080101b8 	.word	0x080101b8
 800ca8c:	08010190 	.word	0x08010190
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	40240000 	.word	0x40240000
 800ca98:	401c0000 	.word	0x401c0000
 800ca9c:	40140000 	.word	0x40140000
 800caa0:	3fe00000 	.word	0x3fe00000
 800caa4:	9d01      	ldr	r5, [sp, #4]
 800caa6:	4656      	mov	r6, sl
 800caa8:	465f      	mov	r7, fp
 800caaa:	4642      	mov	r2, r8
 800caac:	464b      	mov	r3, r9
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	f7f3 fecb 	bl	800084c <__aeabi_ddiv>
 800cab6:	f7f4 f84f 	bl	8000b58 <__aeabi_d2iz>
 800caba:	4682      	mov	sl, r0
 800cabc:	f7f3 fd32 	bl	8000524 <__aeabi_i2d>
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	f7f3 fd98 	bl	80005f8 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4630      	mov	r0, r6
 800cace:	4639      	mov	r1, r7
 800cad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cad4:	f7f3 fbd8 	bl	8000288 <__aeabi_dsub>
 800cad8:	f805 6b01 	strb.w	r6, [r5], #1
 800cadc:	9e01      	ldr	r6, [sp, #4]
 800cade:	9f03      	ldr	r7, [sp, #12]
 800cae0:	1bae      	subs	r6, r5, r6
 800cae2:	42b7      	cmp	r7, r6
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	d135      	bne.n	800cb56 <_dtoa_r+0x6e6>
 800caea:	f7f3 fbcf 	bl	800028c <__adddf3>
 800caee:	4642      	mov	r2, r8
 800caf0:	464b      	mov	r3, r9
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	f7f4 f80f 	bl	8000b18 <__aeabi_dcmpgt>
 800cafa:	b9d0      	cbnz	r0, 800cb32 <_dtoa_r+0x6c2>
 800cafc:	4642      	mov	r2, r8
 800cafe:	464b      	mov	r3, r9
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f3 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb08:	b110      	cbz	r0, 800cb10 <_dtoa_r+0x6a0>
 800cb0a:	f01a 0f01 	tst.w	sl, #1
 800cb0e:	d110      	bne.n	800cb32 <_dtoa_r+0x6c2>
 800cb10:	4620      	mov	r0, r4
 800cb12:	ee18 1a10 	vmov	r1, s16
 800cb16:	f001 f8a7 	bl	800dc68 <_Bfree>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9800      	ldr	r0, [sp, #0]
 800cb1e:	702b      	strb	r3, [r5, #0]
 800cb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb22:	3001      	adds	r0, #1
 800cb24:	6018      	str	r0, [r3, #0]
 800cb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f43f acf1 	beq.w	800c510 <_dtoa_r+0xa0>
 800cb2e:	601d      	str	r5, [r3, #0]
 800cb30:	e4ee      	b.n	800c510 <_dtoa_r+0xa0>
 800cb32:	9f00      	ldr	r7, [sp, #0]
 800cb34:	462b      	mov	r3, r5
 800cb36:	461d      	mov	r5, r3
 800cb38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb3c:	2a39      	cmp	r2, #57	; 0x39
 800cb3e:	d106      	bne.n	800cb4e <_dtoa_r+0x6de>
 800cb40:	9a01      	ldr	r2, [sp, #4]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d1f7      	bne.n	800cb36 <_dtoa_r+0x6c6>
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	2230      	movs	r2, #48	; 0x30
 800cb4a:	3701      	adds	r7, #1
 800cb4c:	700a      	strb	r2, [r1, #0]
 800cb4e:	781a      	ldrb	r2, [r3, #0]
 800cb50:	3201      	adds	r2, #1
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	e790      	b.n	800ca78 <_dtoa_r+0x608>
 800cb56:	4ba6      	ldr	r3, [pc, #664]	; (800cdf0 <_dtoa_r+0x980>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f7f3 fd4d 	bl	80005f8 <__aeabi_dmul>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2300      	movs	r3, #0
 800cb62:	4606      	mov	r6, r0
 800cb64:	460f      	mov	r7, r1
 800cb66:	f7f3 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d09d      	beq.n	800caaa <_dtoa_r+0x63a>
 800cb6e:	e7cf      	b.n	800cb10 <_dtoa_r+0x6a0>
 800cb70:	9a08      	ldr	r2, [sp, #32]
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	f000 80d7 	beq.w	800cd26 <_dtoa_r+0x8b6>
 800cb78:	9a06      	ldr	r2, [sp, #24]
 800cb7a:	2a01      	cmp	r2, #1
 800cb7c:	f300 80ba 	bgt.w	800ccf4 <_dtoa_r+0x884>
 800cb80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	f000 80b2 	beq.w	800ccec <_dtoa_r+0x87c>
 800cb88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb8c:	9e07      	ldr	r6, [sp, #28]
 800cb8e:	9d04      	ldr	r5, [sp, #16]
 800cb90:	9a04      	ldr	r2, [sp, #16]
 800cb92:	441a      	add	r2, r3
 800cb94:	9204      	str	r2, [sp, #16]
 800cb96:	9a05      	ldr	r2, [sp, #20]
 800cb98:	2101      	movs	r1, #1
 800cb9a:	441a      	add	r2, r3
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	9205      	str	r2, [sp, #20]
 800cba0:	f001 f964 	bl	800de6c <__i2b>
 800cba4:	4607      	mov	r7, r0
 800cba6:	2d00      	cmp	r5, #0
 800cba8:	dd0c      	ble.n	800cbc4 <_dtoa_r+0x754>
 800cbaa:	9b05      	ldr	r3, [sp, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dd09      	ble.n	800cbc4 <_dtoa_r+0x754>
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	bfa8      	it	ge
 800cbb6:	462b      	movge	r3, r5
 800cbb8:	1ad2      	subs	r2, r2, r3
 800cbba:	9204      	str	r2, [sp, #16]
 800cbbc:	9a05      	ldr	r2, [sp, #20]
 800cbbe:	1aed      	subs	r5, r5, r3
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	9b07      	ldr	r3, [sp, #28]
 800cbc6:	b31b      	cbz	r3, 800cc10 <_dtoa_r+0x7a0>
 800cbc8:	9b08      	ldr	r3, [sp, #32]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 80af 	beq.w	800cd2e <_dtoa_r+0x8be>
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	dd13      	ble.n	800cbfc <_dtoa_r+0x78c>
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f001 fa07 	bl	800dfec <__pow5mult>
 800cbde:	ee18 2a10 	vmov	r2, s16
 800cbe2:	4601      	mov	r1, r0
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f001 f956 	bl	800de98 <__multiply>
 800cbec:	ee18 1a10 	vmov	r1, s16
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f001 f838 	bl	800dc68 <_Bfree>
 800cbf8:	ee08 8a10 	vmov	s16, r8
 800cbfc:	9b07      	ldr	r3, [sp, #28]
 800cbfe:	1b9a      	subs	r2, r3, r6
 800cc00:	d006      	beq.n	800cc10 <_dtoa_r+0x7a0>
 800cc02:	ee18 1a10 	vmov	r1, s16
 800cc06:	4620      	mov	r0, r4
 800cc08:	f001 f9f0 	bl	800dfec <__pow5mult>
 800cc0c:	ee08 0a10 	vmov	s16, r0
 800cc10:	2101      	movs	r1, #1
 800cc12:	4620      	mov	r0, r4
 800cc14:	f001 f92a 	bl	800de6c <__i2b>
 800cc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	f340 8088 	ble.w	800cd32 <_dtoa_r+0x8c2>
 800cc22:	461a      	mov	r2, r3
 800cc24:	4601      	mov	r1, r0
 800cc26:	4620      	mov	r0, r4
 800cc28:	f001 f9e0 	bl	800dfec <__pow5mult>
 800cc2c:	9b06      	ldr	r3, [sp, #24]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	4606      	mov	r6, r0
 800cc32:	f340 8081 	ble.w	800cd38 <_dtoa_r+0x8c8>
 800cc36:	f04f 0800 	mov.w	r8, #0
 800cc3a:	6933      	ldr	r3, [r6, #16]
 800cc3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc40:	6918      	ldr	r0, [r3, #16]
 800cc42:	f001 f8c3 	bl	800ddcc <__hi0bits>
 800cc46:	f1c0 0020 	rsb	r0, r0, #32
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	4418      	add	r0, r3
 800cc4e:	f010 001f 	ands.w	r0, r0, #31
 800cc52:	f000 8092 	beq.w	800cd7a <_dtoa_r+0x90a>
 800cc56:	f1c0 0320 	rsb	r3, r0, #32
 800cc5a:	2b04      	cmp	r3, #4
 800cc5c:	f340 808a 	ble.w	800cd74 <_dtoa_r+0x904>
 800cc60:	f1c0 001c 	rsb	r0, r0, #28
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	4403      	add	r3, r0
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	4403      	add	r3, r0
 800cc6e:	4405      	add	r5, r0
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	9b04      	ldr	r3, [sp, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dd07      	ble.n	800cc88 <_dtoa_r+0x818>
 800cc78:	ee18 1a10 	vmov	r1, s16
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f001 fa0e 	bl	800e0a0 <__lshift>
 800cc84:	ee08 0a10 	vmov	s16, r0
 800cc88:	9b05      	ldr	r3, [sp, #20]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd05      	ble.n	800cc9a <_dtoa_r+0x82a>
 800cc8e:	4631      	mov	r1, r6
 800cc90:	461a      	mov	r2, r3
 800cc92:	4620      	mov	r0, r4
 800cc94:	f001 fa04 	bl	800e0a0 <__lshift>
 800cc98:	4606      	mov	r6, r0
 800cc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d06e      	beq.n	800cd7e <_dtoa_r+0x90e>
 800cca0:	ee18 0a10 	vmov	r0, s16
 800cca4:	4631      	mov	r1, r6
 800cca6:	f001 fa6b 	bl	800e180 <__mcmp>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	da67      	bge.n	800cd7e <_dtoa_r+0x90e>
 800ccae:	9b00      	ldr	r3, [sp, #0]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	ee18 1a10 	vmov	r1, s16
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	220a      	movs	r2, #10
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fff5 	bl	800dcac <__multadd>
 800ccc2:	9b08      	ldr	r3, [sp, #32]
 800ccc4:	ee08 0a10 	vmov	s16, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 81b1 	beq.w	800d030 <_dtoa_r+0xbc0>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	220a      	movs	r2, #10
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 ffe9 	bl	800dcac <__multadd>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	4607      	mov	r7, r0
 800cce0:	f300 808e 	bgt.w	800ce00 <_dtoa_r+0x990>
 800cce4:	9b06      	ldr	r3, [sp, #24]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	dc51      	bgt.n	800cd8e <_dtoa_r+0x91e>
 800ccea:	e089      	b.n	800ce00 <_dtoa_r+0x990>
 800ccec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccf2:	e74b      	b.n	800cb8c <_dtoa_r+0x71c>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	1e5e      	subs	r6, r3, #1
 800ccf8:	9b07      	ldr	r3, [sp, #28]
 800ccfa:	42b3      	cmp	r3, r6
 800ccfc:	bfbf      	itttt	lt
 800ccfe:	9b07      	ldrlt	r3, [sp, #28]
 800cd00:	9607      	strlt	r6, [sp, #28]
 800cd02:	1af2      	sublt	r2, r6, r3
 800cd04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd06:	bfb6      	itet	lt
 800cd08:	189b      	addlt	r3, r3, r2
 800cd0a:	1b9e      	subge	r6, r3, r6
 800cd0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	bfb8      	it	lt
 800cd12:	2600      	movlt	r6, #0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	bfb7      	itett	lt
 800cd18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cd1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cd20:	1a9d      	sublt	r5, r3, r2
 800cd22:	2300      	movlt	r3, #0
 800cd24:	e734      	b.n	800cb90 <_dtoa_r+0x720>
 800cd26:	9e07      	ldr	r6, [sp, #28]
 800cd28:	9d04      	ldr	r5, [sp, #16]
 800cd2a:	9f08      	ldr	r7, [sp, #32]
 800cd2c:	e73b      	b.n	800cba6 <_dtoa_r+0x736>
 800cd2e:	9a07      	ldr	r2, [sp, #28]
 800cd30:	e767      	b.n	800cc02 <_dtoa_r+0x792>
 800cd32:	9b06      	ldr	r3, [sp, #24]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	dc18      	bgt.n	800cd6a <_dtoa_r+0x8fa>
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	d115      	bne.n	800cd6a <_dtoa_r+0x8fa>
 800cd3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd42:	b993      	cbnz	r3, 800cd6a <_dtoa_r+0x8fa>
 800cd44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd48:	0d1b      	lsrs	r3, r3, #20
 800cd4a:	051b      	lsls	r3, r3, #20
 800cd4c:	b183      	cbz	r3, 800cd70 <_dtoa_r+0x900>
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	3301      	adds	r3, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	9b05      	ldr	r3, [sp, #20]
 800cd56:	3301      	adds	r3, #1
 800cd58:	9305      	str	r3, [sp, #20]
 800cd5a:	f04f 0801 	mov.w	r8, #1
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f47f af6a 	bne.w	800cc3a <_dtoa_r+0x7ca>
 800cd66:	2001      	movs	r0, #1
 800cd68:	e76f      	b.n	800cc4a <_dtoa_r+0x7da>
 800cd6a:	f04f 0800 	mov.w	r8, #0
 800cd6e:	e7f6      	b.n	800cd5e <_dtoa_r+0x8ee>
 800cd70:	4698      	mov	r8, r3
 800cd72:	e7f4      	b.n	800cd5e <_dtoa_r+0x8ee>
 800cd74:	f43f af7d 	beq.w	800cc72 <_dtoa_r+0x802>
 800cd78:	4618      	mov	r0, r3
 800cd7a:	301c      	adds	r0, #28
 800cd7c:	e772      	b.n	800cc64 <_dtoa_r+0x7f4>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc37      	bgt.n	800cdf4 <_dtoa_r+0x984>
 800cd84:	9b06      	ldr	r3, [sp, #24]
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	dd34      	ble.n	800cdf4 <_dtoa_r+0x984>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	b96b      	cbnz	r3, 800cdae <_dtoa_r+0x93e>
 800cd92:	4631      	mov	r1, r6
 800cd94:	2205      	movs	r2, #5
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 ff88 	bl	800dcac <__multadd>
 800cd9c:	4601      	mov	r1, r0
 800cd9e:	4606      	mov	r6, r0
 800cda0:	ee18 0a10 	vmov	r0, s16
 800cda4:	f001 f9ec 	bl	800e180 <__mcmp>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	f73f adbb 	bgt.w	800c924 <_dtoa_r+0x4b4>
 800cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb0:	9d01      	ldr	r5, [sp, #4]
 800cdb2:	43db      	mvns	r3, r3
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	f04f 0800 	mov.w	r8, #0
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 ff53 	bl	800dc68 <_Bfree>
 800cdc2:	2f00      	cmp	r7, #0
 800cdc4:	f43f aea4 	beq.w	800cb10 <_dtoa_r+0x6a0>
 800cdc8:	f1b8 0f00 	cmp.w	r8, #0
 800cdcc:	d005      	beq.n	800cdda <_dtoa_r+0x96a>
 800cdce:	45b8      	cmp	r8, r7
 800cdd0:	d003      	beq.n	800cdda <_dtoa_r+0x96a>
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 ff47 	bl	800dc68 <_Bfree>
 800cdda:	4639      	mov	r1, r7
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 ff43 	bl	800dc68 <_Bfree>
 800cde2:	e695      	b.n	800cb10 <_dtoa_r+0x6a0>
 800cde4:	2600      	movs	r6, #0
 800cde6:	4637      	mov	r7, r6
 800cde8:	e7e1      	b.n	800cdae <_dtoa_r+0x93e>
 800cdea:	9700      	str	r7, [sp, #0]
 800cdec:	4637      	mov	r7, r6
 800cdee:	e599      	b.n	800c924 <_dtoa_r+0x4b4>
 800cdf0:	40240000 	.word	0x40240000
 800cdf4:	9b08      	ldr	r3, [sp, #32]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 80ca 	beq.w	800cf90 <_dtoa_r+0xb20>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	2d00      	cmp	r5, #0
 800ce02:	dd05      	ble.n	800ce10 <_dtoa_r+0x9a0>
 800ce04:	4639      	mov	r1, r7
 800ce06:	462a      	mov	r2, r5
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f001 f949 	bl	800e0a0 <__lshift>
 800ce0e:	4607      	mov	r7, r0
 800ce10:	f1b8 0f00 	cmp.w	r8, #0
 800ce14:	d05b      	beq.n	800cece <_dtoa_r+0xa5e>
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fee5 	bl	800dbe8 <_Balloc>
 800ce1e:	4605      	mov	r5, r0
 800ce20:	b928      	cbnz	r0, 800ce2e <_dtoa_r+0x9be>
 800ce22:	4b87      	ldr	r3, [pc, #540]	; (800d040 <_dtoa_r+0xbd0>)
 800ce24:	4602      	mov	r2, r0
 800ce26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce2a:	f7ff bb3b 	b.w	800c4a4 <_dtoa_r+0x34>
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	3202      	adds	r2, #2
 800ce32:	0092      	lsls	r2, r2, #2
 800ce34:	f107 010c 	add.w	r1, r7, #12
 800ce38:	300c      	adds	r0, #12
 800ce3a:	f000 fec7 	bl	800dbcc <memcpy>
 800ce3e:	2201      	movs	r2, #1
 800ce40:	4629      	mov	r1, r5
 800ce42:	4620      	mov	r0, r4
 800ce44:	f001 f92c 	bl	800e0a0 <__lshift>
 800ce48:	9b01      	ldr	r3, [sp, #4]
 800ce4a:	f103 0901 	add.w	r9, r3, #1
 800ce4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ce52:	4413      	add	r3, r2
 800ce54:	9305      	str	r3, [sp, #20]
 800ce56:	f00a 0301 	and.w	r3, sl, #1
 800ce5a:	46b8      	mov	r8, r7
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	4607      	mov	r7, r0
 800ce60:	4631      	mov	r1, r6
 800ce62:	ee18 0a10 	vmov	r0, s16
 800ce66:	f7ff fa75 	bl	800c354 <quorem>
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	9002      	str	r0, [sp, #8]
 800ce6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce72:	ee18 0a10 	vmov	r0, s16
 800ce76:	f001 f983 	bl	800e180 <__mcmp>
 800ce7a:	463a      	mov	r2, r7
 800ce7c:	9003      	str	r0, [sp, #12]
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4620      	mov	r0, r4
 800ce82:	f001 f999 	bl	800e1b8 <__mdiff>
 800ce86:	68c2      	ldr	r2, [r0, #12]
 800ce88:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	bb02      	cbnz	r2, 800ced2 <_dtoa_r+0xa62>
 800ce90:	4601      	mov	r1, r0
 800ce92:	ee18 0a10 	vmov	r0, s16
 800ce96:	f001 f973 	bl	800e180 <__mcmp>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4620      	mov	r0, r4
 800cea0:	9207      	str	r2, [sp, #28]
 800cea2:	f000 fee1 	bl	800dc68 <_Bfree>
 800cea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ceaa:	ea43 0102 	orr.w	r1, r3, r2
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	464d      	mov	r5, r9
 800ceb4:	d10f      	bne.n	800ced6 <_dtoa_r+0xa66>
 800ceb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceba:	d02a      	beq.n	800cf12 <_dtoa_r+0xaa2>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd02      	ble.n	800cec8 <_dtoa_r+0xa58>
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cec8:	f88b a000 	strb.w	sl, [fp]
 800cecc:	e775      	b.n	800cdba <_dtoa_r+0x94a>
 800cece:	4638      	mov	r0, r7
 800ced0:	e7ba      	b.n	800ce48 <_dtoa_r+0x9d8>
 800ced2:	2201      	movs	r2, #1
 800ced4:	e7e2      	b.n	800ce9c <_dtoa_r+0xa2c>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	db04      	blt.n	800cee6 <_dtoa_r+0xa76>
 800cedc:	9906      	ldr	r1, [sp, #24]
 800cede:	430b      	orrs	r3, r1
 800cee0:	9904      	ldr	r1, [sp, #16]
 800cee2:	430b      	orrs	r3, r1
 800cee4:	d122      	bne.n	800cf2c <_dtoa_r+0xabc>
 800cee6:	2a00      	cmp	r2, #0
 800cee8:	ddee      	ble.n	800cec8 <_dtoa_r+0xa58>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	2201      	movs	r2, #1
 800cef0:	4620      	mov	r0, r4
 800cef2:	f001 f8d5 	bl	800e0a0 <__lshift>
 800cef6:	4631      	mov	r1, r6
 800cef8:	ee08 0a10 	vmov	s16, r0
 800cefc:	f001 f940 	bl	800e180 <__mcmp>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	dc03      	bgt.n	800cf0c <_dtoa_r+0xa9c>
 800cf04:	d1e0      	bne.n	800cec8 <_dtoa_r+0xa58>
 800cf06:	f01a 0f01 	tst.w	sl, #1
 800cf0a:	d0dd      	beq.n	800cec8 <_dtoa_r+0xa58>
 800cf0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf10:	d1d7      	bne.n	800cec2 <_dtoa_r+0xa52>
 800cf12:	2339      	movs	r3, #57	; 0x39
 800cf14:	f88b 3000 	strb.w	r3, [fp]
 800cf18:	462b      	mov	r3, r5
 800cf1a:	461d      	mov	r5, r3
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf22:	2a39      	cmp	r2, #57	; 0x39
 800cf24:	d071      	beq.n	800d00a <_dtoa_r+0xb9a>
 800cf26:	3201      	adds	r2, #1
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	e746      	b.n	800cdba <_dtoa_r+0x94a>
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	dd07      	ble.n	800cf40 <_dtoa_r+0xad0>
 800cf30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf34:	d0ed      	beq.n	800cf12 <_dtoa_r+0xaa2>
 800cf36:	f10a 0301 	add.w	r3, sl, #1
 800cf3a:	f88b 3000 	strb.w	r3, [fp]
 800cf3e:	e73c      	b.n	800cdba <_dtoa_r+0x94a>
 800cf40:	9b05      	ldr	r3, [sp, #20]
 800cf42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cf46:	4599      	cmp	r9, r3
 800cf48:	d047      	beq.n	800cfda <_dtoa_r+0xb6a>
 800cf4a:	ee18 1a10 	vmov	r1, s16
 800cf4e:	2300      	movs	r3, #0
 800cf50:	220a      	movs	r2, #10
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 feaa 	bl	800dcac <__multadd>
 800cf58:	45b8      	cmp	r8, r7
 800cf5a:	ee08 0a10 	vmov	s16, r0
 800cf5e:	f04f 0300 	mov.w	r3, #0
 800cf62:	f04f 020a 	mov.w	r2, #10
 800cf66:	4641      	mov	r1, r8
 800cf68:	4620      	mov	r0, r4
 800cf6a:	d106      	bne.n	800cf7a <_dtoa_r+0xb0a>
 800cf6c:	f000 fe9e 	bl	800dcac <__multadd>
 800cf70:	4680      	mov	r8, r0
 800cf72:	4607      	mov	r7, r0
 800cf74:	f109 0901 	add.w	r9, r9, #1
 800cf78:	e772      	b.n	800ce60 <_dtoa_r+0x9f0>
 800cf7a:	f000 fe97 	bl	800dcac <__multadd>
 800cf7e:	4639      	mov	r1, r7
 800cf80:	4680      	mov	r8, r0
 800cf82:	2300      	movs	r3, #0
 800cf84:	220a      	movs	r2, #10
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fe90 	bl	800dcac <__multadd>
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	e7f1      	b.n	800cf74 <_dtoa_r+0xb04>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	9d01      	ldr	r5, [sp, #4]
 800cf96:	ee18 0a10 	vmov	r0, s16
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	f7ff f9da 	bl	800c354 <quorem>
 800cfa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cfa4:	9b01      	ldr	r3, [sp, #4]
 800cfa6:	f805 ab01 	strb.w	sl, [r5], #1
 800cfaa:	1aea      	subs	r2, r5, r3
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	dd09      	ble.n	800cfc6 <_dtoa_r+0xb56>
 800cfb2:	ee18 1a10 	vmov	r1, s16
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 fe76 	bl	800dcac <__multadd>
 800cfc0:	ee08 0a10 	vmov	s16, r0
 800cfc4:	e7e7      	b.n	800cf96 <_dtoa_r+0xb26>
 800cfc6:	9b02      	ldr	r3, [sp, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	bfc8      	it	gt
 800cfcc:	461d      	movgt	r5, r3
 800cfce:	9b01      	ldr	r3, [sp, #4]
 800cfd0:	bfd8      	it	le
 800cfd2:	2501      	movle	r5, #1
 800cfd4:	441d      	add	r5, r3
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	ee18 1a10 	vmov	r1, s16
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 f85d 	bl	800e0a0 <__lshift>
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	ee08 0a10 	vmov	s16, r0
 800cfec:	f001 f8c8 	bl	800e180 <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	dc91      	bgt.n	800cf18 <_dtoa_r+0xaa8>
 800cff4:	d102      	bne.n	800cffc <_dtoa_r+0xb8c>
 800cff6:	f01a 0f01 	tst.w	sl, #1
 800cffa:	d18d      	bne.n	800cf18 <_dtoa_r+0xaa8>
 800cffc:	462b      	mov	r3, r5
 800cffe:	461d      	mov	r5, r3
 800d000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d004:	2a30      	cmp	r2, #48	; 0x30
 800d006:	d0fa      	beq.n	800cffe <_dtoa_r+0xb8e>
 800d008:	e6d7      	b.n	800cdba <_dtoa_r+0x94a>
 800d00a:	9a01      	ldr	r2, [sp, #4]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d184      	bne.n	800cf1a <_dtoa_r+0xaaa>
 800d010:	9b00      	ldr	r3, [sp, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	2331      	movs	r3, #49	; 0x31
 800d018:	7013      	strb	r3, [r2, #0]
 800d01a:	e6ce      	b.n	800cdba <_dtoa_r+0x94a>
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <_dtoa_r+0xbd4>)
 800d01e:	f7ff ba95 	b.w	800c54c <_dtoa_r+0xdc>
 800d022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d024:	2b00      	cmp	r3, #0
 800d026:	f47f aa6e 	bne.w	800c506 <_dtoa_r+0x96>
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <_dtoa_r+0xbd8>)
 800d02c:	f7ff ba8e 	b.w	800c54c <_dtoa_r+0xdc>
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	dcae      	bgt.n	800cf94 <_dtoa_r+0xb24>
 800d036:	9b06      	ldr	r3, [sp, #24]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	f73f aea8 	bgt.w	800cd8e <_dtoa_r+0x91e>
 800d03e:	e7a9      	b.n	800cf94 <_dtoa_r+0xb24>
 800d040:	08010040 	.word	0x08010040
 800d044:	080102a1 	.word	0x080102a1
 800d048:	0800ffc1 	.word	0x0800ffc1

0800d04c <__sflush_r>:
 800d04c:	898a      	ldrh	r2, [r1, #12]
 800d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	4605      	mov	r5, r0
 800d054:	0710      	lsls	r0, r2, #28
 800d056:	460c      	mov	r4, r1
 800d058:	d458      	bmi.n	800d10c <__sflush_r+0xc0>
 800d05a:	684b      	ldr	r3, [r1, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dc05      	bgt.n	800d06c <__sflush_r+0x20>
 800d060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d062:	2b00      	cmp	r3, #0
 800d064:	dc02      	bgt.n	800d06c <__sflush_r+0x20>
 800d066:	2000      	movs	r0, #0
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d0f9      	beq.n	800d066 <__sflush_r+0x1a>
 800d072:	2300      	movs	r3, #0
 800d074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d078:	682f      	ldr	r7, [r5, #0]
 800d07a:	602b      	str	r3, [r5, #0]
 800d07c:	d032      	beq.n	800d0e4 <__sflush_r+0x98>
 800d07e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	075a      	lsls	r2, r3, #29
 800d084:	d505      	bpl.n	800d092 <__sflush_r+0x46>
 800d086:	6863      	ldr	r3, [r4, #4]
 800d088:	1ac0      	subs	r0, r0, r3
 800d08a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d08c:	b10b      	cbz	r3, 800d092 <__sflush_r+0x46>
 800d08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d090:	1ac0      	subs	r0, r0, r3
 800d092:	2300      	movs	r3, #0
 800d094:	4602      	mov	r2, r0
 800d096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d098:	6a21      	ldr	r1, [r4, #32]
 800d09a:	4628      	mov	r0, r5
 800d09c:	47b0      	blx	r6
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	d106      	bne.n	800d0b2 <__sflush_r+0x66>
 800d0a4:	6829      	ldr	r1, [r5, #0]
 800d0a6:	291d      	cmp	r1, #29
 800d0a8:	d82c      	bhi.n	800d104 <__sflush_r+0xb8>
 800d0aa:	4a2a      	ldr	r2, [pc, #168]	; (800d154 <__sflush_r+0x108>)
 800d0ac:	40ca      	lsrs	r2, r1
 800d0ae:	07d6      	lsls	r6, r2, #31
 800d0b0:	d528      	bpl.n	800d104 <__sflush_r+0xb8>
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	6062      	str	r2, [r4, #4]
 800d0b6:	04d9      	lsls	r1, r3, #19
 800d0b8:	6922      	ldr	r2, [r4, #16]
 800d0ba:	6022      	str	r2, [r4, #0]
 800d0bc:	d504      	bpl.n	800d0c8 <__sflush_r+0x7c>
 800d0be:	1c42      	adds	r2, r0, #1
 800d0c0:	d101      	bne.n	800d0c6 <__sflush_r+0x7a>
 800d0c2:	682b      	ldr	r3, [r5, #0]
 800d0c4:	b903      	cbnz	r3, 800d0c8 <__sflush_r+0x7c>
 800d0c6:	6560      	str	r0, [r4, #84]	; 0x54
 800d0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ca:	602f      	str	r7, [r5, #0]
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	d0ca      	beq.n	800d066 <__sflush_r+0x1a>
 800d0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	d002      	beq.n	800d0de <__sflush_r+0x92>
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f001 fa5d 	bl	800e598 <_free_r>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800d0e2:	e7c1      	b.n	800d068 <__sflush_r+0x1c>
 800d0e4:	6a21      	ldr	r1, [r4, #32]
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	1c41      	adds	r1, r0, #1
 800d0ee:	d1c7      	bne.n	800d080 <__sflush_r+0x34>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0c4      	beq.n	800d080 <__sflush_r+0x34>
 800d0f6:	2b1d      	cmp	r3, #29
 800d0f8:	d001      	beq.n	800d0fe <__sflush_r+0xb2>
 800d0fa:	2b16      	cmp	r3, #22
 800d0fc:	d101      	bne.n	800d102 <__sflush_r+0xb6>
 800d0fe:	602f      	str	r7, [r5, #0]
 800d100:	e7b1      	b.n	800d066 <__sflush_r+0x1a>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	e7ad      	b.n	800d068 <__sflush_r+0x1c>
 800d10c:	690f      	ldr	r7, [r1, #16]
 800d10e:	2f00      	cmp	r7, #0
 800d110:	d0a9      	beq.n	800d066 <__sflush_r+0x1a>
 800d112:	0793      	lsls	r3, r2, #30
 800d114:	680e      	ldr	r6, [r1, #0]
 800d116:	bf08      	it	eq
 800d118:	694b      	ldreq	r3, [r1, #20]
 800d11a:	600f      	str	r7, [r1, #0]
 800d11c:	bf18      	it	ne
 800d11e:	2300      	movne	r3, #0
 800d120:	eba6 0807 	sub.w	r8, r6, r7
 800d124:	608b      	str	r3, [r1, #8]
 800d126:	f1b8 0f00 	cmp.w	r8, #0
 800d12a:	dd9c      	ble.n	800d066 <__sflush_r+0x1a>
 800d12c:	6a21      	ldr	r1, [r4, #32]
 800d12e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d130:	4643      	mov	r3, r8
 800d132:	463a      	mov	r2, r7
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	2800      	cmp	r0, #0
 800d13a:	dc06      	bgt.n	800d14a <__sflush_r+0xfe>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	e78e      	b.n	800d068 <__sflush_r+0x1c>
 800d14a:	4407      	add	r7, r0
 800d14c:	eba8 0800 	sub.w	r8, r8, r0
 800d150:	e7e9      	b.n	800d126 <__sflush_r+0xda>
 800d152:	bf00      	nop
 800d154:	20400001 	.word	0x20400001

0800d158 <_fflush_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	690b      	ldr	r3, [r1, #16]
 800d15c:	4605      	mov	r5, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	b913      	cbnz	r3, 800d168 <_fflush_r+0x10>
 800d162:	2500      	movs	r5, #0
 800d164:	4628      	mov	r0, r5
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	b118      	cbz	r0, 800d172 <_fflush_r+0x1a>
 800d16a:	6983      	ldr	r3, [r0, #24]
 800d16c:	b90b      	cbnz	r3, 800d172 <_fflush_r+0x1a>
 800d16e:	f000 f887 	bl	800d280 <__sinit>
 800d172:	4b14      	ldr	r3, [pc, #80]	; (800d1c4 <_fflush_r+0x6c>)
 800d174:	429c      	cmp	r4, r3
 800d176:	d11b      	bne.n	800d1b0 <_fflush_r+0x58>
 800d178:	686c      	ldr	r4, [r5, #4]
 800d17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0ef      	beq.n	800d162 <_fflush_r+0xa>
 800d182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d184:	07d0      	lsls	r0, r2, #31
 800d186:	d404      	bmi.n	800d192 <_fflush_r+0x3a>
 800d188:	0599      	lsls	r1, r3, #22
 800d18a:	d402      	bmi.n	800d192 <_fflush_r+0x3a>
 800d18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18e:	f000 fc88 	bl	800daa2 <__retarget_lock_acquire_recursive>
 800d192:	4628      	mov	r0, r5
 800d194:	4621      	mov	r1, r4
 800d196:	f7ff ff59 	bl	800d04c <__sflush_r>
 800d19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d19c:	07da      	lsls	r2, r3, #31
 800d19e:	4605      	mov	r5, r0
 800d1a0:	d4e0      	bmi.n	800d164 <_fflush_r+0xc>
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	059b      	lsls	r3, r3, #22
 800d1a6:	d4dd      	bmi.n	800d164 <_fflush_r+0xc>
 800d1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1aa:	f000 fc7b 	bl	800daa4 <__retarget_lock_release_recursive>
 800d1ae:	e7d9      	b.n	800d164 <_fflush_r+0xc>
 800d1b0:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <_fflush_r+0x70>)
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d101      	bne.n	800d1ba <_fflush_r+0x62>
 800d1b6:	68ac      	ldr	r4, [r5, #8]
 800d1b8:	e7df      	b.n	800d17a <_fflush_r+0x22>
 800d1ba:	4b04      	ldr	r3, [pc, #16]	; (800d1cc <_fflush_r+0x74>)
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	bf08      	it	eq
 800d1c0:	68ec      	ldreq	r4, [r5, #12]
 800d1c2:	e7da      	b.n	800d17a <_fflush_r+0x22>
 800d1c4:	08010074 	.word	0x08010074
 800d1c8:	08010094 	.word	0x08010094
 800d1cc:	08010054 	.word	0x08010054

0800d1d0 <std>:
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	b510      	push	{r4, lr}
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1de:	6083      	str	r3, [r0, #8]
 800d1e0:	8181      	strh	r1, [r0, #12]
 800d1e2:	6643      	str	r3, [r0, #100]	; 0x64
 800d1e4:	81c2      	strh	r2, [r0, #14]
 800d1e6:	6183      	str	r3, [r0, #24]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	2208      	movs	r2, #8
 800d1ec:	305c      	adds	r0, #92	; 0x5c
 800d1ee:	f7fd f949 	bl	800a484 <memset>
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <std+0x38>)
 800d1f4:	6263      	str	r3, [r4, #36]	; 0x24
 800d1f6:	4b05      	ldr	r3, [pc, #20]	; (800d20c <std+0x3c>)
 800d1f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <std+0x40>)
 800d1fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1fe:	4b05      	ldr	r3, [pc, #20]	; (800d214 <std+0x44>)
 800d200:	6224      	str	r4, [r4, #32]
 800d202:	6323      	str	r3, [r4, #48]	; 0x30
 800d204:	bd10      	pop	{r4, pc}
 800d206:	bf00      	nop
 800d208:	0800b375 	.word	0x0800b375
 800d20c:	0800b39b 	.word	0x0800b39b
 800d210:	0800b3d3 	.word	0x0800b3d3
 800d214:	0800b3f7 	.word	0x0800b3f7

0800d218 <_cleanup_r>:
 800d218:	4901      	ldr	r1, [pc, #4]	; (800d220 <_cleanup_r+0x8>)
 800d21a:	f000 b8af 	b.w	800d37c <_fwalk_reent>
 800d21e:	bf00      	nop
 800d220:	0800d159 	.word	0x0800d159

0800d224 <__sfmoreglue>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	2268      	movs	r2, #104	; 0x68
 800d228:	1e4d      	subs	r5, r1, #1
 800d22a:	4355      	muls	r5, r2
 800d22c:	460e      	mov	r6, r1
 800d22e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d232:	f001 fa1d 	bl	800e670 <_malloc_r>
 800d236:	4604      	mov	r4, r0
 800d238:	b140      	cbz	r0, 800d24c <__sfmoreglue+0x28>
 800d23a:	2100      	movs	r1, #0
 800d23c:	e9c0 1600 	strd	r1, r6, [r0]
 800d240:	300c      	adds	r0, #12
 800d242:	60a0      	str	r0, [r4, #8]
 800d244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d248:	f7fd f91c 	bl	800a484 <memset>
 800d24c:	4620      	mov	r0, r4
 800d24e:	bd70      	pop	{r4, r5, r6, pc}

0800d250 <__sfp_lock_acquire>:
 800d250:	4801      	ldr	r0, [pc, #4]	; (800d258 <__sfp_lock_acquire+0x8>)
 800d252:	f000 bc26 	b.w	800daa2 <__retarget_lock_acquire_recursive>
 800d256:	bf00      	nop
 800d258:	200009e5 	.word	0x200009e5

0800d25c <__sfp_lock_release>:
 800d25c:	4801      	ldr	r0, [pc, #4]	; (800d264 <__sfp_lock_release+0x8>)
 800d25e:	f000 bc21 	b.w	800daa4 <__retarget_lock_release_recursive>
 800d262:	bf00      	nop
 800d264:	200009e5 	.word	0x200009e5

0800d268 <__sinit_lock_acquire>:
 800d268:	4801      	ldr	r0, [pc, #4]	; (800d270 <__sinit_lock_acquire+0x8>)
 800d26a:	f000 bc1a 	b.w	800daa2 <__retarget_lock_acquire_recursive>
 800d26e:	bf00      	nop
 800d270:	200009e6 	.word	0x200009e6

0800d274 <__sinit_lock_release>:
 800d274:	4801      	ldr	r0, [pc, #4]	; (800d27c <__sinit_lock_release+0x8>)
 800d276:	f000 bc15 	b.w	800daa4 <__retarget_lock_release_recursive>
 800d27a:	bf00      	nop
 800d27c:	200009e6 	.word	0x200009e6

0800d280 <__sinit>:
 800d280:	b510      	push	{r4, lr}
 800d282:	4604      	mov	r4, r0
 800d284:	f7ff fff0 	bl	800d268 <__sinit_lock_acquire>
 800d288:	69a3      	ldr	r3, [r4, #24]
 800d28a:	b11b      	cbz	r3, 800d294 <__sinit+0x14>
 800d28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d290:	f7ff bff0 	b.w	800d274 <__sinit_lock_release>
 800d294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d298:	6523      	str	r3, [r4, #80]	; 0x50
 800d29a:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <__sinit+0x68>)
 800d29c:	4a13      	ldr	r2, [pc, #76]	; (800d2ec <__sinit+0x6c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2a2:	42a3      	cmp	r3, r4
 800d2a4:	bf04      	itt	eq
 800d2a6:	2301      	moveq	r3, #1
 800d2a8:	61a3      	streq	r3, [r4, #24]
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 f820 	bl	800d2f0 <__sfp>
 800d2b0:	6060      	str	r0, [r4, #4]
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f000 f81c 	bl	800d2f0 <__sfp>
 800d2b8:	60a0      	str	r0, [r4, #8]
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f000 f818 	bl	800d2f0 <__sfp>
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	60e0      	str	r0, [r4, #12]
 800d2c4:	2104      	movs	r1, #4
 800d2c6:	6860      	ldr	r0, [r4, #4]
 800d2c8:	f7ff ff82 	bl	800d1d0 <std>
 800d2cc:	68a0      	ldr	r0, [r4, #8]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	2109      	movs	r1, #9
 800d2d2:	f7ff ff7d 	bl	800d1d0 <std>
 800d2d6:	68e0      	ldr	r0, [r4, #12]
 800d2d8:	2202      	movs	r2, #2
 800d2da:	2112      	movs	r1, #18
 800d2dc:	f7ff ff78 	bl	800d1d0 <std>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	61a3      	str	r3, [r4, #24]
 800d2e4:	e7d2      	b.n	800d28c <__sinit+0xc>
 800d2e6:	bf00      	nop
 800d2e8:	0800fe34 	.word	0x0800fe34
 800d2ec:	0800d219 	.word	0x0800d219

0800d2f0 <__sfp>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	f7ff ffac 	bl	800d250 <__sfp_lock_acquire>
 800d2f8:	4b1e      	ldr	r3, [pc, #120]	; (800d374 <__sfp+0x84>)
 800d2fa:	681e      	ldr	r6, [r3, #0]
 800d2fc:	69b3      	ldr	r3, [r6, #24]
 800d2fe:	b913      	cbnz	r3, 800d306 <__sfp+0x16>
 800d300:	4630      	mov	r0, r6
 800d302:	f7ff ffbd 	bl	800d280 <__sinit>
 800d306:	3648      	adds	r6, #72	; 0x48
 800d308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d30c:	3b01      	subs	r3, #1
 800d30e:	d503      	bpl.n	800d318 <__sfp+0x28>
 800d310:	6833      	ldr	r3, [r6, #0]
 800d312:	b30b      	cbz	r3, 800d358 <__sfp+0x68>
 800d314:	6836      	ldr	r6, [r6, #0]
 800d316:	e7f7      	b.n	800d308 <__sfp+0x18>
 800d318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d31c:	b9d5      	cbnz	r5, 800d354 <__sfp+0x64>
 800d31e:	4b16      	ldr	r3, [pc, #88]	; (800d378 <__sfp+0x88>)
 800d320:	60e3      	str	r3, [r4, #12]
 800d322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d326:	6665      	str	r5, [r4, #100]	; 0x64
 800d328:	f000 fbba 	bl	800daa0 <__retarget_lock_init_recursive>
 800d32c:	f7ff ff96 	bl	800d25c <__sfp_lock_release>
 800d330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d338:	6025      	str	r5, [r4, #0]
 800d33a:	61a5      	str	r5, [r4, #24]
 800d33c:	2208      	movs	r2, #8
 800d33e:	4629      	mov	r1, r5
 800d340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d344:	f7fd f89e 	bl	800a484 <memset>
 800d348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d34c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d350:	4620      	mov	r0, r4
 800d352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d354:	3468      	adds	r4, #104	; 0x68
 800d356:	e7d9      	b.n	800d30c <__sfp+0x1c>
 800d358:	2104      	movs	r1, #4
 800d35a:	4638      	mov	r0, r7
 800d35c:	f7ff ff62 	bl	800d224 <__sfmoreglue>
 800d360:	4604      	mov	r4, r0
 800d362:	6030      	str	r0, [r6, #0]
 800d364:	2800      	cmp	r0, #0
 800d366:	d1d5      	bne.n	800d314 <__sfp+0x24>
 800d368:	f7ff ff78 	bl	800d25c <__sfp_lock_release>
 800d36c:	230c      	movs	r3, #12
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	e7ee      	b.n	800d350 <__sfp+0x60>
 800d372:	bf00      	nop
 800d374:	0800fe34 	.word	0x0800fe34
 800d378:	ffff0001 	.word	0xffff0001

0800d37c <_fwalk_reent>:
 800d37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d380:	4606      	mov	r6, r0
 800d382:	4688      	mov	r8, r1
 800d384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d388:	2700      	movs	r7, #0
 800d38a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d38e:	f1b9 0901 	subs.w	r9, r9, #1
 800d392:	d505      	bpl.n	800d3a0 <_fwalk_reent+0x24>
 800d394:	6824      	ldr	r4, [r4, #0]
 800d396:	2c00      	cmp	r4, #0
 800d398:	d1f7      	bne.n	800d38a <_fwalk_reent+0xe>
 800d39a:	4638      	mov	r0, r7
 800d39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a0:	89ab      	ldrh	r3, [r5, #12]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d907      	bls.n	800d3b6 <_fwalk_reent+0x3a>
 800d3a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	d003      	beq.n	800d3b6 <_fwalk_reent+0x3a>
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	47c0      	blx	r8
 800d3b4:	4307      	orrs	r7, r0
 800d3b6:	3568      	adds	r5, #104	; 0x68
 800d3b8:	e7e9      	b.n	800d38e <_fwalk_reent+0x12>

0800d3ba <rshift>:
 800d3ba:	6903      	ldr	r3, [r0, #16]
 800d3bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3c8:	f100 0414 	add.w	r4, r0, #20
 800d3cc:	dd45      	ble.n	800d45a <rshift+0xa0>
 800d3ce:	f011 011f 	ands.w	r1, r1, #31
 800d3d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d3d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d3da:	d10c      	bne.n	800d3f6 <rshift+0x3c>
 800d3dc:	f100 0710 	add.w	r7, r0, #16
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	42b1      	cmp	r1, r6
 800d3e4:	d334      	bcc.n	800d450 <rshift+0x96>
 800d3e6:	1a9b      	subs	r3, r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	1eea      	subs	r2, r5, #3
 800d3ec:	4296      	cmp	r6, r2
 800d3ee:	bf38      	it	cc
 800d3f0:	2300      	movcc	r3, #0
 800d3f2:	4423      	add	r3, r4
 800d3f4:	e015      	b.n	800d422 <rshift+0x68>
 800d3f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3fa:	f1c1 0820 	rsb	r8, r1, #32
 800d3fe:	40cf      	lsrs	r7, r1
 800d400:	f105 0e04 	add.w	lr, r5, #4
 800d404:	46a1      	mov	r9, r4
 800d406:	4576      	cmp	r6, lr
 800d408:	46f4      	mov	ip, lr
 800d40a:	d815      	bhi.n	800d438 <rshift+0x7e>
 800d40c:	1a9a      	subs	r2, r3, r2
 800d40e:	0092      	lsls	r2, r2, #2
 800d410:	3a04      	subs	r2, #4
 800d412:	3501      	adds	r5, #1
 800d414:	42ae      	cmp	r6, r5
 800d416:	bf38      	it	cc
 800d418:	2200      	movcc	r2, #0
 800d41a:	18a3      	adds	r3, r4, r2
 800d41c:	50a7      	str	r7, [r4, r2]
 800d41e:	b107      	cbz	r7, 800d422 <rshift+0x68>
 800d420:	3304      	adds	r3, #4
 800d422:	1b1a      	subs	r2, r3, r4
 800d424:	42a3      	cmp	r3, r4
 800d426:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d42a:	bf08      	it	eq
 800d42c:	2300      	moveq	r3, #0
 800d42e:	6102      	str	r2, [r0, #16]
 800d430:	bf08      	it	eq
 800d432:	6143      	streq	r3, [r0, #20]
 800d434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d438:	f8dc c000 	ldr.w	ip, [ip]
 800d43c:	fa0c fc08 	lsl.w	ip, ip, r8
 800d440:	ea4c 0707 	orr.w	r7, ip, r7
 800d444:	f849 7b04 	str.w	r7, [r9], #4
 800d448:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d44c:	40cf      	lsrs	r7, r1
 800d44e:	e7da      	b.n	800d406 <rshift+0x4c>
 800d450:	f851 cb04 	ldr.w	ip, [r1], #4
 800d454:	f847 cf04 	str.w	ip, [r7, #4]!
 800d458:	e7c3      	b.n	800d3e2 <rshift+0x28>
 800d45a:	4623      	mov	r3, r4
 800d45c:	e7e1      	b.n	800d422 <rshift+0x68>

0800d45e <__hexdig_fun>:
 800d45e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d462:	2b09      	cmp	r3, #9
 800d464:	d802      	bhi.n	800d46c <__hexdig_fun+0xe>
 800d466:	3820      	subs	r0, #32
 800d468:	b2c0      	uxtb	r0, r0
 800d46a:	4770      	bx	lr
 800d46c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d470:	2b05      	cmp	r3, #5
 800d472:	d801      	bhi.n	800d478 <__hexdig_fun+0x1a>
 800d474:	3847      	subs	r0, #71	; 0x47
 800d476:	e7f7      	b.n	800d468 <__hexdig_fun+0xa>
 800d478:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d47c:	2b05      	cmp	r3, #5
 800d47e:	d801      	bhi.n	800d484 <__hexdig_fun+0x26>
 800d480:	3827      	subs	r0, #39	; 0x27
 800d482:	e7f1      	b.n	800d468 <__hexdig_fun+0xa>
 800d484:	2000      	movs	r0, #0
 800d486:	4770      	bx	lr

0800d488 <__gethex>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	ed2d 8b02 	vpush	{d8}
 800d490:	b089      	sub	sp, #36	; 0x24
 800d492:	ee08 0a10 	vmov	s16, r0
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	4bb4      	ldr	r3, [pc, #720]	; (800d76c <__gethex+0x2e4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	468b      	mov	fp, r1
 800d4a2:	4690      	mov	r8, r2
 800d4a4:	f7f2 fe94 	bl	80001d0 <strlen>
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	f8db 2000 	ldr.w	r2, [fp]
 800d4ae:	4403      	add	r3, r0
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d4b6:	9305      	str	r3, [sp, #20]
 800d4b8:	1c93      	adds	r3, r2, #2
 800d4ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d4be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d4c2:	32fe      	adds	r2, #254	; 0xfe
 800d4c4:	18d1      	adds	r1, r2, r3
 800d4c6:	461f      	mov	r7, r3
 800d4c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d4cc:	9100      	str	r1, [sp, #0]
 800d4ce:	2830      	cmp	r0, #48	; 0x30
 800d4d0:	d0f8      	beq.n	800d4c4 <__gethex+0x3c>
 800d4d2:	f7ff ffc4 	bl	800d45e <__hexdig_fun>
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d13a      	bne.n	800d552 <__gethex+0xca>
 800d4dc:	9901      	ldr	r1, [sp, #4]
 800d4de:	4652      	mov	r2, sl
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f7fd ff94 	bl	800b40e <strncmp>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d168      	bne.n	800d5be <__gethex+0x136>
 800d4ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d4f0:	eb07 060a 	add.w	r6, r7, sl
 800d4f4:	f7ff ffb3 	bl	800d45e <__hexdig_fun>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d062      	beq.n	800d5c2 <__gethex+0x13a>
 800d4fc:	4633      	mov	r3, r6
 800d4fe:	7818      	ldrb	r0, [r3, #0]
 800d500:	2830      	cmp	r0, #48	; 0x30
 800d502:	461f      	mov	r7, r3
 800d504:	f103 0301 	add.w	r3, r3, #1
 800d508:	d0f9      	beq.n	800d4fe <__gethex+0x76>
 800d50a:	f7ff ffa8 	bl	800d45e <__hexdig_fun>
 800d50e:	2301      	movs	r3, #1
 800d510:	fab0 f480 	clz	r4, r0
 800d514:	0964      	lsrs	r4, r4, #5
 800d516:	4635      	mov	r5, r6
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	463a      	mov	r2, r7
 800d51c:	4616      	mov	r6, r2
 800d51e:	3201      	adds	r2, #1
 800d520:	7830      	ldrb	r0, [r6, #0]
 800d522:	f7ff ff9c 	bl	800d45e <__hexdig_fun>
 800d526:	2800      	cmp	r0, #0
 800d528:	d1f8      	bne.n	800d51c <__gethex+0x94>
 800d52a:	9901      	ldr	r1, [sp, #4]
 800d52c:	4652      	mov	r2, sl
 800d52e:	4630      	mov	r0, r6
 800d530:	f7fd ff6d 	bl	800b40e <strncmp>
 800d534:	b980      	cbnz	r0, 800d558 <__gethex+0xd0>
 800d536:	b94d      	cbnz	r5, 800d54c <__gethex+0xc4>
 800d538:	eb06 050a 	add.w	r5, r6, sl
 800d53c:	462a      	mov	r2, r5
 800d53e:	4616      	mov	r6, r2
 800d540:	3201      	adds	r2, #1
 800d542:	7830      	ldrb	r0, [r6, #0]
 800d544:	f7ff ff8b 	bl	800d45e <__hexdig_fun>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1f8      	bne.n	800d53e <__gethex+0xb6>
 800d54c:	1bad      	subs	r5, r5, r6
 800d54e:	00ad      	lsls	r5, r5, #2
 800d550:	e004      	b.n	800d55c <__gethex+0xd4>
 800d552:	2400      	movs	r4, #0
 800d554:	4625      	mov	r5, r4
 800d556:	e7e0      	b.n	800d51a <__gethex+0x92>
 800d558:	2d00      	cmp	r5, #0
 800d55a:	d1f7      	bne.n	800d54c <__gethex+0xc4>
 800d55c:	7833      	ldrb	r3, [r6, #0]
 800d55e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d562:	2b50      	cmp	r3, #80	; 0x50
 800d564:	d13b      	bne.n	800d5de <__gethex+0x156>
 800d566:	7873      	ldrb	r3, [r6, #1]
 800d568:	2b2b      	cmp	r3, #43	; 0x2b
 800d56a:	d02c      	beq.n	800d5c6 <__gethex+0x13e>
 800d56c:	2b2d      	cmp	r3, #45	; 0x2d
 800d56e:	d02e      	beq.n	800d5ce <__gethex+0x146>
 800d570:	1c71      	adds	r1, r6, #1
 800d572:	f04f 0900 	mov.w	r9, #0
 800d576:	7808      	ldrb	r0, [r1, #0]
 800d578:	f7ff ff71 	bl	800d45e <__hexdig_fun>
 800d57c:	1e43      	subs	r3, r0, #1
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b18      	cmp	r3, #24
 800d582:	d82c      	bhi.n	800d5de <__gethex+0x156>
 800d584:	f1a0 0210 	sub.w	r2, r0, #16
 800d588:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d58c:	f7ff ff67 	bl	800d45e <__hexdig_fun>
 800d590:	1e43      	subs	r3, r0, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b18      	cmp	r3, #24
 800d596:	d91d      	bls.n	800d5d4 <__gethex+0x14c>
 800d598:	f1b9 0f00 	cmp.w	r9, #0
 800d59c:	d000      	beq.n	800d5a0 <__gethex+0x118>
 800d59e:	4252      	negs	r2, r2
 800d5a0:	4415      	add	r5, r2
 800d5a2:	f8cb 1000 	str.w	r1, [fp]
 800d5a6:	b1e4      	cbz	r4, 800d5e2 <__gethex+0x15a>
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2700      	movne	r7, #0
 800d5b0:	2706      	moveq	r7, #6
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	b009      	add	sp, #36	; 0x24
 800d5b6:	ecbd 8b02 	vpop	{d8}
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	463e      	mov	r6, r7
 800d5c0:	4625      	mov	r5, r4
 800d5c2:	2401      	movs	r4, #1
 800d5c4:	e7ca      	b.n	800d55c <__gethex+0xd4>
 800d5c6:	f04f 0900 	mov.w	r9, #0
 800d5ca:	1cb1      	adds	r1, r6, #2
 800d5cc:	e7d3      	b.n	800d576 <__gethex+0xee>
 800d5ce:	f04f 0901 	mov.w	r9, #1
 800d5d2:	e7fa      	b.n	800d5ca <__gethex+0x142>
 800d5d4:	230a      	movs	r3, #10
 800d5d6:	fb03 0202 	mla	r2, r3, r2, r0
 800d5da:	3a10      	subs	r2, #16
 800d5dc:	e7d4      	b.n	800d588 <__gethex+0x100>
 800d5de:	4631      	mov	r1, r6
 800d5e0:	e7df      	b.n	800d5a2 <__gethex+0x11a>
 800d5e2:	1bf3      	subs	r3, r6, r7
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	2b07      	cmp	r3, #7
 800d5ea:	dc0b      	bgt.n	800d604 <__gethex+0x17c>
 800d5ec:	ee18 0a10 	vmov	r0, s16
 800d5f0:	f000 fafa 	bl	800dbe8 <_Balloc>
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	b940      	cbnz	r0, 800d60a <__gethex+0x182>
 800d5f8:	4b5d      	ldr	r3, [pc, #372]	; (800d770 <__gethex+0x2e8>)
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	21de      	movs	r1, #222	; 0xde
 800d5fe:	485d      	ldr	r0, [pc, #372]	; (800d774 <__gethex+0x2ec>)
 800d600:	f001 ffea 	bl	800f5d8 <__assert_func>
 800d604:	3101      	adds	r1, #1
 800d606:	105b      	asrs	r3, r3, #1
 800d608:	e7ee      	b.n	800d5e8 <__gethex+0x160>
 800d60a:	f100 0914 	add.w	r9, r0, #20
 800d60e:	f04f 0b00 	mov.w	fp, #0
 800d612:	f1ca 0301 	rsb	r3, sl, #1
 800d616:	f8cd 9008 	str.w	r9, [sp, #8]
 800d61a:	f8cd b000 	str.w	fp, [sp]
 800d61e:	9306      	str	r3, [sp, #24]
 800d620:	42b7      	cmp	r7, r6
 800d622:	d340      	bcc.n	800d6a6 <__gethex+0x21e>
 800d624:	9802      	ldr	r0, [sp, #8]
 800d626:	9b00      	ldr	r3, [sp, #0]
 800d628:	f840 3b04 	str.w	r3, [r0], #4
 800d62c:	eba0 0009 	sub.w	r0, r0, r9
 800d630:	1080      	asrs	r0, r0, #2
 800d632:	0146      	lsls	r6, r0, #5
 800d634:	6120      	str	r0, [r4, #16]
 800d636:	4618      	mov	r0, r3
 800d638:	f000 fbc8 	bl	800ddcc <__hi0bits>
 800d63c:	1a30      	subs	r0, r6, r0
 800d63e:	f8d8 6000 	ldr.w	r6, [r8]
 800d642:	42b0      	cmp	r0, r6
 800d644:	dd63      	ble.n	800d70e <__gethex+0x286>
 800d646:	1b87      	subs	r7, r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 ff6c 	bl	800e528 <__any_on>
 800d650:	4682      	mov	sl, r0
 800d652:	b1a8      	cbz	r0, 800d680 <__gethex+0x1f8>
 800d654:	1e7b      	subs	r3, r7, #1
 800d656:	1159      	asrs	r1, r3, #5
 800d658:	f003 021f 	and.w	r2, r3, #31
 800d65c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d660:	f04f 0a01 	mov.w	sl, #1
 800d664:	fa0a f202 	lsl.w	r2, sl, r2
 800d668:	420a      	tst	r2, r1
 800d66a:	d009      	beq.n	800d680 <__gethex+0x1f8>
 800d66c:	4553      	cmp	r3, sl
 800d66e:	dd05      	ble.n	800d67c <__gethex+0x1f4>
 800d670:	1eb9      	subs	r1, r7, #2
 800d672:	4620      	mov	r0, r4
 800d674:	f000 ff58 	bl	800e528 <__any_on>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d145      	bne.n	800d708 <__gethex+0x280>
 800d67c:	f04f 0a02 	mov.w	sl, #2
 800d680:	4639      	mov	r1, r7
 800d682:	4620      	mov	r0, r4
 800d684:	f7ff fe99 	bl	800d3ba <rshift>
 800d688:	443d      	add	r5, r7
 800d68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d68e:	42ab      	cmp	r3, r5
 800d690:	da4c      	bge.n	800d72c <__gethex+0x2a4>
 800d692:	ee18 0a10 	vmov	r0, s16
 800d696:	4621      	mov	r1, r4
 800d698:	f000 fae6 	bl	800dc68 <_Bfree>
 800d69c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d69e:	2300      	movs	r3, #0
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	27a3      	movs	r7, #163	; 0xa3
 800d6a4:	e785      	b.n	800d5b2 <__gethex+0x12a>
 800d6a6:	1e73      	subs	r3, r6, #1
 800d6a8:	9a05      	ldr	r2, [sp, #20]
 800d6aa:	9303      	str	r3, [sp, #12]
 800d6ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d019      	beq.n	800d6e8 <__gethex+0x260>
 800d6b4:	f1bb 0f20 	cmp.w	fp, #32
 800d6b8:	d107      	bne.n	800d6ca <__gethex+0x242>
 800d6ba:	9b02      	ldr	r3, [sp, #8]
 800d6bc:	9a00      	ldr	r2, [sp, #0]
 800d6be:	f843 2b04 	str.w	r2, [r3], #4
 800d6c2:	9302      	str	r3, [sp, #8]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	469b      	mov	fp, r3
 800d6ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d6ce:	f7ff fec6 	bl	800d45e <__hexdig_fun>
 800d6d2:	9b00      	ldr	r3, [sp, #0]
 800d6d4:	f000 000f 	and.w	r0, r0, #15
 800d6d8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d6dc:	4303      	orrs	r3, r0
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	f10b 0b04 	add.w	fp, fp, #4
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	e00d      	b.n	800d704 <__gethex+0x27c>
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	9a06      	ldr	r2, [sp, #24]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	42bb      	cmp	r3, r7
 800d6f0:	d3e0      	bcc.n	800d6b4 <__gethex+0x22c>
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	9901      	ldr	r1, [sp, #4]
 800d6f6:	9307      	str	r3, [sp, #28]
 800d6f8:	4652      	mov	r2, sl
 800d6fa:	f7fd fe88 	bl	800b40e <strncmp>
 800d6fe:	9b07      	ldr	r3, [sp, #28]
 800d700:	2800      	cmp	r0, #0
 800d702:	d1d7      	bne.n	800d6b4 <__gethex+0x22c>
 800d704:	461e      	mov	r6, r3
 800d706:	e78b      	b.n	800d620 <__gethex+0x198>
 800d708:	f04f 0a03 	mov.w	sl, #3
 800d70c:	e7b8      	b.n	800d680 <__gethex+0x1f8>
 800d70e:	da0a      	bge.n	800d726 <__gethex+0x29e>
 800d710:	1a37      	subs	r7, r6, r0
 800d712:	4621      	mov	r1, r4
 800d714:	ee18 0a10 	vmov	r0, s16
 800d718:	463a      	mov	r2, r7
 800d71a:	f000 fcc1 	bl	800e0a0 <__lshift>
 800d71e:	1bed      	subs	r5, r5, r7
 800d720:	4604      	mov	r4, r0
 800d722:	f100 0914 	add.w	r9, r0, #20
 800d726:	f04f 0a00 	mov.w	sl, #0
 800d72a:	e7ae      	b.n	800d68a <__gethex+0x202>
 800d72c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d730:	42a8      	cmp	r0, r5
 800d732:	dd72      	ble.n	800d81a <__gethex+0x392>
 800d734:	1b45      	subs	r5, r0, r5
 800d736:	42ae      	cmp	r6, r5
 800d738:	dc36      	bgt.n	800d7a8 <__gethex+0x320>
 800d73a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d02a      	beq.n	800d798 <__gethex+0x310>
 800d742:	2b03      	cmp	r3, #3
 800d744:	d02c      	beq.n	800d7a0 <__gethex+0x318>
 800d746:	2b01      	cmp	r3, #1
 800d748:	d11c      	bne.n	800d784 <__gethex+0x2fc>
 800d74a:	42ae      	cmp	r6, r5
 800d74c:	d11a      	bne.n	800d784 <__gethex+0x2fc>
 800d74e:	2e01      	cmp	r6, #1
 800d750:	d112      	bne.n	800d778 <__gethex+0x2f0>
 800d752:	9a04      	ldr	r2, [sp, #16]
 800d754:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d758:	6013      	str	r3, [r2, #0]
 800d75a:	2301      	movs	r3, #1
 800d75c:	6123      	str	r3, [r4, #16]
 800d75e:	f8c9 3000 	str.w	r3, [r9]
 800d762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d764:	2762      	movs	r7, #98	; 0x62
 800d766:	601c      	str	r4, [r3, #0]
 800d768:	e723      	b.n	800d5b2 <__gethex+0x12a>
 800d76a:	bf00      	nop
 800d76c:	0801011c 	.word	0x0801011c
 800d770:	08010040 	.word	0x08010040
 800d774:	080100b4 	.word	0x080100b4
 800d778:	1e71      	subs	r1, r6, #1
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 fed4 	bl	800e528 <__any_on>
 800d780:	2800      	cmp	r0, #0
 800d782:	d1e6      	bne.n	800d752 <__gethex+0x2ca>
 800d784:	ee18 0a10 	vmov	r0, s16
 800d788:	4621      	mov	r1, r4
 800d78a:	f000 fa6d 	bl	800dc68 <_Bfree>
 800d78e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d790:	2300      	movs	r3, #0
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	2750      	movs	r7, #80	; 0x50
 800d796:	e70c      	b.n	800d5b2 <__gethex+0x12a>
 800d798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1f2      	bne.n	800d784 <__gethex+0x2fc>
 800d79e:	e7d8      	b.n	800d752 <__gethex+0x2ca>
 800d7a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1d5      	bne.n	800d752 <__gethex+0x2ca>
 800d7a6:	e7ed      	b.n	800d784 <__gethex+0x2fc>
 800d7a8:	1e6f      	subs	r7, r5, #1
 800d7aa:	f1ba 0f00 	cmp.w	sl, #0
 800d7ae:	d131      	bne.n	800d814 <__gethex+0x38c>
 800d7b0:	b127      	cbz	r7, 800d7bc <__gethex+0x334>
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f000 feb7 	bl	800e528 <__any_on>
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	117b      	asrs	r3, r7, #5
 800d7be:	2101      	movs	r1, #1
 800d7c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d7c4:	f007 071f 	and.w	r7, r7, #31
 800d7c8:	fa01 f707 	lsl.w	r7, r1, r7
 800d7cc:	421f      	tst	r7, r3
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	bf18      	it	ne
 800d7d4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d7d8:	1b76      	subs	r6, r6, r5
 800d7da:	f7ff fdee 	bl	800d3ba <rshift>
 800d7de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7e2:	2702      	movs	r7, #2
 800d7e4:	f1ba 0f00 	cmp.w	sl, #0
 800d7e8:	d048      	beq.n	800d87c <__gethex+0x3f4>
 800d7ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d015      	beq.n	800d81e <__gethex+0x396>
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d017      	beq.n	800d826 <__gethex+0x39e>
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d109      	bne.n	800d80e <__gethex+0x386>
 800d7fa:	f01a 0f02 	tst.w	sl, #2
 800d7fe:	d006      	beq.n	800d80e <__gethex+0x386>
 800d800:	f8d9 0000 	ldr.w	r0, [r9]
 800d804:	ea4a 0a00 	orr.w	sl, sl, r0
 800d808:	f01a 0f01 	tst.w	sl, #1
 800d80c:	d10e      	bne.n	800d82c <__gethex+0x3a4>
 800d80e:	f047 0710 	orr.w	r7, r7, #16
 800d812:	e033      	b.n	800d87c <__gethex+0x3f4>
 800d814:	f04f 0a01 	mov.w	sl, #1
 800d818:	e7d0      	b.n	800d7bc <__gethex+0x334>
 800d81a:	2701      	movs	r7, #1
 800d81c:	e7e2      	b.n	800d7e4 <__gethex+0x35c>
 800d81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d820:	f1c3 0301 	rsb	r3, r3, #1
 800d824:	9315      	str	r3, [sp, #84]	; 0x54
 800d826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0f0      	beq.n	800d80e <__gethex+0x386>
 800d82c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d830:	f104 0314 	add.w	r3, r4, #20
 800d834:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d838:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d83c:	f04f 0c00 	mov.w	ip, #0
 800d840:	4618      	mov	r0, r3
 800d842:	f853 2b04 	ldr.w	r2, [r3], #4
 800d846:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d84a:	d01c      	beq.n	800d886 <__gethex+0x3fe>
 800d84c:	3201      	adds	r2, #1
 800d84e:	6002      	str	r2, [r0, #0]
 800d850:	2f02      	cmp	r7, #2
 800d852:	f104 0314 	add.w	r3, r4, #20
 800d856:	d13f      	bne.n	800d8d8 <__gethex+0x450>
 800d858:	f8d8 2000 	ldr.w	r2, [r8]
 800d85c:	3a01      	subs	r2, #1
 800d85e:	42b2      	cmp	r2, r6
 800d860:	d10a      	bne.n	800d878 <__gethex+0x3f0>
 800d862:	1171      	asrs	r1, r6, #5
 800d864:	2201      	movs	r2, #1
 800d866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d86a:	f006 061f 	and.w	r6, r6, #31
 800d86e:	fa02 f606 	lsl.w	r6, r2, r6
 800d872:	421e      	tst	r6, r3
 800d874:	bf18      	it	ne
 800d876:	4617      	movne	r7, r2
 800d878:	f047 0720 	orr.w	r7, r7, #32
 800d87c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d87e:	601c      	str	r4, [r3, #0]
 800d880:	9b04      	ldr	r3, [sp, #16]
 800d882:	601d      	str	r5, [r3, #0]
 800d884:	e695      	b.n	800d5b2 <__gethex+0x12a>
 800d886:	4299      	cmp	r1, r3
 800d888:	f843 cc04 	str.w	ip, [r3, #-4]
 800d88c:	d8d8      	bhi.n	800d840 <__gethex+0x3b8>
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	459b      	cmp	fp, r3
 800d892:	db19      	blt.n	800d8c8 <__gethex+0x440>
 800d894:	6861      	ldr	r1, [r4, #4]
 800d896:	ee18 0a10 	vmov	r0, s16
 800d89a:	3101      	adds	r1, #1
 800d89c:	f000 f9a4 	bl	800dbe8 <_Balloc>
 800d8a0:	4681      	mov	r9, r0
 800d8a2:	b918      	cbnz	r0, 800d8ac <__gethex+0x424>
 800d8a4:	4b1a      	ldr	r3, [pc, #104]	; (800d910 <__gethex+0x488>)
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	2184      	movs	r1, #132	; 0x84
 800d8aa:	e6a8      	b.n	800d5fe <__gethex+0x176>
 800d8ac:	6922      	ldr	r2, [r4, #16]
 800d8ae:	3202      	adds	r2, #2
 800d8b0:	f104 010c 	add.w	r1, r4, #12
 800d8b4:	0092      	lsls	r2, r2, #2
 800d8b6:	300c      	adds	r0, #12
 800d8b8:	f000 f988 	bl	800dbcc <memcpy>
 800d8bc:	4621      	mov	r1, r4
 800d8be:	ee18 0a10 	vmov	r0, s16
 800d8c2:	f000 f9d1 	bl	800dc68 <_Bfree>
 800d8c6:	464c      	mov	r4, r9
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8d0:	6122      	str	r2, [r4, #16]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	615a      	str	r2, [r3, #20]
 800d8d6:	e7bb      	b.n	800d850 <__gethex+0x3c8>
 800d8d8:	6922      	ldr	r2, [r4, #16]
 800d8da:	455a      	cmp	r2, fp
 800d8dc:	dd0b      	ble.n	800d8f6 <__gethex+0x46e>
 800d8de:	2101      	movs	r1, #1
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f7ff fd6a 	bl	800d3ba <rshift>
 800d8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8ea:	3501      	adds	r5, #1
 800d8ec:	42ab      	cmp	r3, r5
 800d8ee:	f6ff aed0 	blt.w	800d692 <__gethex+0x20a>
 800d8f2:	2701      	movs	r7, #1
 800d8f4:	e7c0      	b.n	800d878 <__gethex+0x3f0>
 800d8f6:	f016 061f 	ands.w	r6, r6, #31
 800d8fa:	d0fa      	beq.n	800d8f2 <__gethex+0x46a>
 800d8fc:	4453      	add	r3, sl
 800d8fe:	f1c6 0620 	rsb	r6, r6, #32
 800d902:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d906:	f000 fa61 	bl	800ddcc <__hi0bits>
 800d90a:	42b0      	cmp	r0, r6
 800d90c:	dbe7      	blt.n	800d8de <__gethex+0x456>
 800d90e:	e7f0      	b.n	800d8f2 <__gethex+0x46a>
 800d910:	08010040 	.word	0x08010040

0800d914 <L_shift>:
 800d914:	f1c2 0208 	rsb	r2, r2, #8
 800d918:	0092      	lsls	r2, r2, #2
 800d91a:	b570      	push	{r4, r5, r6, lr}
 800d91c:	f1c2 0620 	rsb	r6, r2, #32
 800d920:	6843      	ldr	r3, [r0, #4]
 800d922:	6804      	ldr	r4, [r0, #0]
 800d924:	fa03 f506 	lsl.w	r5, r3, r6
 800d928:	432c      	orrs	r4, r5
 800d92a:	40d3      	lsrs	r3, r2
 800d92c:	6004      	str	r4, [r0, #0]
 800d92e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d932:	4288      	cmp	r0, r1
 800d934:	d3f4      	bcc.n	800d920 <L_shift+0xc>
 800d936:	bd70      	pop	{r4, r5, r6, pc}

0800d938 <__match>:
 800d938:	b530      	push	{r4, r5, lr}
 800d93a:	6803      	ldr	r3, [r0, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d942:	b914      	cbnz	r4, 800d94a <__match+0x12>
 800d944:	6003      	str	r3, [r0, #0]
 800d946:	2001      	movs	r0, #1
 800d948:	bd30      	pop	{r4, r5, pc}
 800d94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d94e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d952:	2d19      	cmp	r5, #25
 800d954:	bf98      	it	ls
 800d956:	3220      	addls	r2, #32
 800d958:	42a2      	cmp	r2, r4
 800d95a:	d0f0      	beq.n	800d93e <__match+0x6>
 800d95c:	2000      	movs	r0, #0
 800d95e:	e7f3      	b.n	800d948 <__match+0x10>

0800d960 <__hexnan>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	680b      	ldr	r3, [r1, #0]
 800d966:	115e      	asrs	r6, r3, #5
 800d968:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d96c:	f013 031f 	ands.w	r3, r3, #31
 800d970:	b087      	sub	sp, #28
 800d972:	bf18      	it	ne
 800d974:	3604      	addne	r6, #4
 800d976:	2500      	movs	r5, #0
 800d978:	1f37      	subs	r7, r6, #4
 800d97a:	4690      	mov	r8, r2
 800d97c:	6802      	ldr	r2, [r0, #0]
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	4682      	mov	sl, r0
 800d982:	f846 5c04 	str.w	r5, [r6, #-4]
 800d986:	46b9      	mov	r9, r7
 800d988:	463c      	mov	r4, r7
 800d98a:	9502      	str	r5, [sp, #8]
 800d98c:	46ab      	mov	fp, r5
 800d98e:	7851      	ldrb	r1, [r2, #1]
 800d990:	1c53      	adds	r3, r2, #1
 800d992:	9303      	str	r3, [sp, #12]
 800d994:	b341      	cbz	r1, 800d9e8 <__hexnan+0x88>
 800d996:	4608      	mov	r0, r1
 800d998:	9205      	str	r2, [sp, #20]
 800d99a:	9104      	str	r1, [sp, #16]
 800d99c:	f7ff fd5f 	bl	800d45e <__hexdig_fun>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d14f      	bne.n	800da44 <__hexnan+0xe4>
 800d9a4:	9904      	ldr	r1, [sp, #16]
 800d9a6:	9a05      	ldr	r2, [sp, #20]
 800d9a8:	2920      	cmp	r1, #32
 800d9aa:	d818      	bhi.n	800d9de <__hexnan+0x7e>
 800d9ac:	9b02      	ldr	r3, [sp, #8]
 800d9ae:	459b      	cmp	fp, r3
 800d9b0:	dd13      	ble.n	800d9da <__hexnan+0x7a>
 800d9b2:	454c      	cmp	r4, r9
 800d9b4:	d206      	bcs.n	800d9c4 <__hexnan+0x64>
 800d9b6:	2d07      	cmp	r5, #7
 800d9b8:	dc04      	bgt.n	800d9c4 <__hexnan+0x64>
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4649      	mov	r1, r9
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7ff ffa8 	bl	800d914 <L_shift>
 800d9c4:	4544      	cmp	r4, r8
 800d9c6:	d950      	bls.n	800da6a <__hexnan+0x10a>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f1a4 0904 	sub.w	r9, r4, #4
 800d9ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d9d6:	464c      	mov	r4, r9
 800d9d8:	461d      	mov	r5, r3
 800d9da:	9a03      	ldr	r2, [sp, #12]
 800d9dc:	e7d7      	b.n	800d98e <__hexnan+0x2e>
 800d9de:	2929      	cmp	r1, #41	; 0x29
 800d9e0:	d156      	bne.n	800da90 <__hexnan+0x130>
 800d9e2:	3202      	adds	r2, #2
 800d9e4:	f8ca 2000 	str.w	r2, [sl]
 800d9e8:	f1bb 0f00 	cmp.w	fp, #0
 800d9ec:	d050      	beq.n	800da90 <__hexnan+0x130>
 800d9ee:	454c      	cmp	r4, r9
 800d9f0:	d206      	bcs.n	800da00 <__hexnan+0xa0>
 800d9f2:	2d07      	cmp	r5, #7
 800d9f4:	dc04      	bgt.n	800da00 <__hexnan+0xa0>
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f7ff ff8a 	bl	800d914 <L_shift>
 800da00:	4544      	cmp	r4, r8
 800da02:	d934      	bls.n	800da6e <__hexnan+0x10e>
 800da04:	f1a8 0204 	sub.w	r2, r8, #4
 800da08:	4623      	mov	r3, r4
 800da0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800da12:	429f      	cmp	r7, r3
 800da14:	d2f9      	bcs.n	800da0a <__hexnan+0xaa>
 800da16:	1b3b      	subs	r3, r7, r4
 800da18:	f023 0303 	bic.w	r3, r3, #3
 800da1c:	3304      	adds	r3, #4
 800da1e:	3401      	adds	r4, #1
 800da20:	3e03      	subs	r6, #3
 800da22:	42b4      	cmp	r4, r6
 800da24:	bf88      	it	hi
 800da26:	2304      	movhi	r3, #4
 800da28:	4443      	add	r3, r8
 800da2a:	2200      	movs	r2, #0
 800da2c:	f843 2b04 	str.w	r2, [r3], #4
 800da30:	429f      	cmp	r7, r3
 800da32:	d2fb      	bcs.n	800da2c <__hexnan+0xcc>
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	b91b      	cbnz	r3, 800da40 <__hexnan+0xe0>
 800da38:	4547      	cmp	r7, r8
 800da3a:	d127      	bne.n	800da8c <__hexnan+0x12c>
 800da3c:	2301      	movs	r3, #1
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	2005      	movs	r0, #5
 800da42:	e026      	b.n	800da92 <__hexnan+0x132>
 800da44:	3501      	adds	r5, #1
 800da46:	2d08      	cmp	r5, #8
 800da48:	f10b 0b01 	add.w	fp, fp, #1
 800da4c:	dd06      	ble.n	800da5c <__hexnan+0xfc>
 800da4e:	4544      	cmp	r4, r8
 800da50:	d9c3      	bls.n	800d9da <__hexnan+0x7a>
 800da52:	2300      	movs	r3, #0
 800da54:	f844 3c04 	str.w	r3, [r4, #-4]
 800da58:	2501      	movs	r5, #1
 800da5a:	3c04      	subs	r4, #4
 800da5c:	6822      	ldr	r2, [r4, #0]
 800da5e:	f000 000f 	and.w	r0, r0, #15
 800da62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800da66:	6022      	str	r2, [r4, #0]
 800da68:	e7b7      	b.n	800d9da <__hexnan+0x7a>
 800da6a:	2508      	movs	r5, #8
 800da6c:	e7b5      	b.n	800d9da <__hexnan+0x7a>
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0df      	beq.n	800da34 <__hexnan+0xd4>
 800da74:	f04f 32ff 	mov.w	r2, #4294967295
 800da78:	f1c3 0320 	rsb	r3, r3, #32
 800da7c:	fa22 f303 	lsr.w	r3, r2, r3
 800da80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800da84:	401a      	ands	r2, r3
 800da86:	f846 2c04 	str.w	r2, [r6, #-4]
 800da8a:	e7d3      	b.n	800da34 <__hexnan+0xd4>
 800da8c:	3f04      	subs	r7, #4
 800da8e:	e7d1      	b.n	800da34 <__hexnan+0xd4>
 800da90:	2004      	movs	r0, #4
 800da92:	b007      	add	sp, #28
 800da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da98 <_localeconv_r>:
 800da98:	4800      	ldr	r0, [pc, #0]	; (800da9c <_localeconv_r+0x4>)
 800da9a:	4770      	bx	lr
 800da9c:	20000198 	.word	0x20000198

0800daa0 <__retarget_lock_init_recursive>:
 800daa0:	4770      	bx	lr

0800daa2 <__retarget_lock_acquire_recursive>:
 800daa2:	4770      	bx	lr

0800daa4 <__retarget_lock_release_recursive>:
 800daa4:	4770      	bx	lr
	...

0800daa8 <_lseek_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	4d07      	ldr	r5, [pc, #28]	; (800dac8 <_lseek_r+0x20>)
 800daac:	4604      	mov	r4, r0
 800daae:	4608      	mov	r0, r1
 800dab0:	4611      	mov	r1, r2
 800dab2:	2200      	movs	r2, #0
 800dab4:	602a      	str	r2, [r5, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	f7f5 fd7a 	bl	80035b0 <_lseek>
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d102      	bne.n	800dac6 <_lseek_r+0x1e>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	b103      	cbz	r3, 800dac6 <_lseek_r+0x1e>
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	200009f0 	.word	0x200009f0

0800dacc <__swhatbuf_r>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	460e      	mov	r6, r1
 800dad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad4:	2900      	cmp	r1, #0
 800dad6:	b096      	sub	sp, #88	; 0x58
 800dad8:	4614      	mov	r4, r2
 800dada:	461d      	mov	r5, r3
 800dadc:	da08      	bge.n	800daf0 <__swhatbuf_r+0x24>
 800dade:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	602a      	str	r2, [r5, #0]
 800dae6:	061a      	lsls	r2, r3, #24
 800dae8:	d410      	bmi.n	800db0c <__swhatbuf_r+0x40>
 800daea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daee:	e00e      	b.n	800db0e <__swhatbuf_r+0x42>
 800daf0:	466a      	mov	r2, sp
 800daf2:	f001 fda1 	bl	800f638 <_fstat_r>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	dbf1      	blt.n	800dade <__swhatbuf_r+0x12>
 800dafa:	9a01      	ldr	r2, [sp, #4]
 800dafc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db04:	425a      	negs	r2, r3
 800db06:	415a      	adcs	r2, r3
 800db08:	602a      	str	r2, [r5, #0]
 800db0a:	e7ee      	b.n	800daea <__swhatbuf_r+0x1e>
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	2000      	movs	r0, #0
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	b016      	add	sp, #88	; 0x58
 800db14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db18 <__smakebuf_r>:
 800db18:	898b      	ldrh	r3, [r1, #12]
 800db1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db1c:	079d      	lsls	r5, r3, #30
 800db1e:	4606      	mov	r6, r0
 800db20:	460c      	mov	r4, r1
 800db22:	d507      	bpl.n	800db34 <__smakebuf_r+0x1c>
 800db24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	6123      	str	r3, [r4, #16]
 800db2c:	2301      	movs	r3, #1
 800db2e:	6163      	str	r3, [r4, #20]
 800db30:	b002      	add	sp, #8
 800db32:	bd70      	pop	{r4, r5, r6, pc}
 800db34:	ab01      	add	r3, sp, #4
 800db36:	466a      	mov	r2, sp
 800db38:	f7ff ffc8 	bl	800dacc <__swhatbuf_r>
 800db3c:	9900      	ldr	r1, [sp, #0]
 800db3e:	4605      	mov	r5, r0
 800db40:	4630      	mov	r0, r6
 800db42:	f000 fd95 	bl	800e670 <_malloc_r>
 800db46:	b948      	cbnz	r0, 800db5c <__smakebuf_r+0x44>
 800db48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db4c:	059a      	lsls	r2, r3, #22
 800db4e:	d4ef      	bmi.n	800db30 <__smakebuf_r+0x18>
 800db50:	f023 0303 	bic.w	r3, r3, #3
 800db54:	f043 0302 	orr.w	r3, r3, #2
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	e7e3      	b.n	800db24 <__smakebuf_r+0xc>
 800db5c:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <__smakebuf_r+0x7c>)
 800db5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800db60:	89a3      	ldrh	r3, [r4, #12]
 800db62:	6020      	str	r0, [r4, #0]
 800db64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db68:	81a3      	strh	r3, [r4, #12]
 800db6a:	9b00      	ldr	r3, [sp, #0]
 800db6c:	6163      	str	r3, [r4, #20]
 800db6e:	9b01      	ldr	r3, [sp, #4]
 800db70:	6120      	str	r0, [r4, #16]
 800db72:	b15b      	cbz	r3, 800db8c <__smakebuf_r+0x74>
 800db74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db78:	4630      	mov	r0, r6
 800db7a:	f001 fd6f 	bl	800f65c <_isatty_r>
 800db7e:	b128      	cbz	r0, 800db8c <__smakebuf_r+0x74>
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	f023 0303 	bic.w	r3, r3, #3
 800db86:	f043 0301 	orr.w	r3, r3, #1
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	89a0      	ldrh	r0, [r4, #12]
 800db8e:	4305      	orrs	r5, r0
 800db90:	81a5      	strh	r5, [r4, #12]
 800db92:	e7cd      	b.n	800db30 <__smakebuf_r+0x18>
 800db94:	0800d219 	.word	0x0800d219

0800db98 <malloc>:
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <malloc+0xc>)
 800db9a:	4601      	mov	r1, r0
 800db9c:	6818      	ldr	r0, [r3, #0]
 800db9e:	f000 bd67 	b.w	800e670 <_malloc_r>
 800dba2:	bf00      	nop
 800dba4:	20000040 	.word	0x20000040

0800dba8 <__ascii_mbtowc>:
 800dba8:	b082      	sub	sp, #8
 800dbaa:	b901      	cbnz	r1, 800dbae <__ascii_mbtowc+0x6>
 800dbac:	a901      	add	r1, sp, #4
 800dbae:	b142      	cbz	r2, 800dbc2 <__ascii_mbtowc+0x1a>
 800dbb0:	b14b      	cbz	r3, 800dbc6 <__ascii_mbtowc+0x1e>
 800dbb2:	7813      	ldrb	r3, [r2, #0]
 800dbb4:	600b      	str	r3, [r1, #0]
 800dbb6:	7812      	ldrb	r2, [r2, #0]
 800dbb8:	1e10      	subs	r0, r2, #0
 800dbba:	bf18      	it	ne
 800dbbc:	2001      	movne	r0, #1
 800dbbe:	b002      	add	sp, #8
 800dbc0:	4770      	bx	lr
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	e7fb      	b.n	800dbbe <__ascii_mbtowc+0x16>
 800dbc6:	f06f 0001 	mvn.w	r0, #1
 800dbca:	e7f8      	b.n	800dbbe <__ascii_mbtowc+0x16>

0800dbcc <memcpy>:
 800dbcc:	440a      	add	r2, r1
 800dbce:	4291      	cmp	r1, r2
 800dbd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbd4:	d100      	bne.n	800dbd8 <memcpy+0xc>
 800dbd6:	4770      	bx	lr
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbe2:	4291      	cmp	r1, r2
 800dbe4:	d1f9      	bne.n	800dbda <memcpy+0xe>
 800dbe6:	bd10      	pop	{r4, pc}

0800dbe8 <_Balloc>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbec:	4604      	mov	r4, r0
 800dbee:	460d      	mov	r5, r1
 800dbf0:	b976      	cbnz	r6, 800dc10 <_Balloc+0x28>
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	f7ff ffd0 	bl	800db98 <malloc>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6260      	str	r0, [r4, #36]	; 0x24
 800dbfc:	b920      	cbnz	r0, 800dc08 <_Balloc+0x20>
 800dbfe:	4b18      	ldr	r3, [pc, #96]	; (800dc60 <_Balloc+0x78>)
 800dc00:	4818      	ldr	r0, [pc, #96]	; (800dc64 <_Balloc+0x7c>)
 800dc02:	2166      	movs	r1, #102	; 0x66
 800dc04:	f001 fce8 	bl	800f5d8 <__assert_func>
 800dc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc0c:	6006      	str	r6, [r0, #0]
 800dc0e:	60c6      	str	r6, [r0, #12]
 800dc10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dc12:	68f3      	ldr	r3, [r6, #12]
 800dc14:	b183      	cbz	r3, 800dc38 <_Balloc+0x50>
 800dc16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc1e:	b9b8      	cbnz	r0, 800dc50 <_Balloc+0x68>
 800dc20:	2101      	movs	r1, #1
 800dc22:	fa01 f605 	lsl.w	r6, r1, r5
 800dc26:	1d72      	adds	r2, r6, #5
 800dc28:	0092      	lsls	r2, r2, #2
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 fc9d 	bl	800e56a <_calloc_r>
 800dc30:	b160      	cbz	r0, 800dc4c <_Balloc+0x64>
 800dc32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc36:	e00e      	b.n	800dc56 <_Balloc+0x6e>
 800dc38:	2221      	movs	r2, #33	; 0x21
 800dc3a:	2104      	movs	r1, #4
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f000 fc94 	bl	800e56a <_calloc_r>
 800dc42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc44:	60f0      	str	r0, [r6, #12]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e4      	bne.n	800dc16 <_Balloc+0x2e>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	6802      	ldr	r2, [r0, #0]
 800dc52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc56:	2300      	movs	r3, #0
 800dc58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc5c:	e7f7      	b.n	800dc4e <_Balloc+0x66>
 800dc5e:	bf00      	nop
 800dc60:	0800ffce 	.word	0x0800ffce
 800dc64:	08010130 	.word	0x08010130

0800dc68 <_Bfree>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	b976      	cbnz	r6, 800dc90 <_Bfree+0x28>
 800dc72:	2010      	movs	r0, #16
 800dc74:	f7ff ff90 	bl	800db98 <malloc>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6268      	str	r0, [r5, #36]	; 0x24
 800dc7c:	b920      	cbnz	r0, 800dc88 <_Bfree+0x20>
 800dc7e:	4b09      	ldr	r3, [pc, #36]	; (800dca4 <_Bfree+0x3c>)
 800dc80:	4809      	ldr	r0, [pc, #36]	; (800dca8 <_Bfree+0x40>)
 800dc82:	218a      	movs	r1, #138	; 0x8a
 800dc84:	f001 fca8 	bl	800f5d8 <__assert_func>
 800dc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc8c:	6006      	str	r6, [r0, #0]
 800dc8e:	60c6      	str	r6, [r0, #12]
 800dc90:	b13c      	cbz	r4, 800dca2 <_Bfree+0x3a>
 800dc92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc94:	6862      	ldr	r2, [r4, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc9c:	6021      	str	r1, [r4, #0]
 800dc9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	0800ffce 	.word	0x0800ffce
 800dca8:	08010130 	.word	0x08010130

0800dcac <__multadd>:
 800dcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	690d      	ldr	r5, [r1, #16]
 800dcb2:	4607      	mov	r7, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	461e      	mov	r6, r3
 800dcb8:	f101 0c14 	add.w	ip, r1, #20
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f8dc 3000 	ldr.w	r3, [ip]
 800dcc2:	b299      	uxth	r1, r3
 800dcc4:	fb02 6101 	mla	r1, r2, r1, r6
 800dcc8:	0c1e      	lsrs	r6, r3, #16
 800dcca:	0c0b      	lsrs	r3, r1, #16
 800dccc:	fb02 3306 	mla	r3, r2, r6, r3
 800dcd0:	b289      	uxth	r1, r1
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcd8:	4285      	cmp	r5, r0
 800dcda:	f84c 1b04 	str.w	r1, [ip], #4
 800dcde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dce2:	dcec      	bgt.n	800dcbe <__multadd+0x12>
 800dce4:	b30e      	cbz	r6, 800dd2a <__multadd+0x7e>
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	42ab      	cmp	r3, r5
 800dcea:	dc19      	bgt.n	800dd20 <__multadd+0x74>
 800dcec:	6861      	ldr	r1, [r4, #4]
 800dcee:	4638      	mov	r0, r7
 800dcf0:	3101      	adds	r1, #1
 800dcf2:	f7ff ff79 	bl	800dbe8 <_Balloc>
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	b928      	cbnz	r0, 800dd06 <__multadd+0x5a>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <__multadd+0x84>)
 800dcfe:	480d      	ldr	r0, [pc, #52]	; (800dd34 <__multadd+0x88>)
 800dd00:	21b5      	movs	r1, #181	; 0xb5
 800dd02:	f001 fc69 	bl	800f5d8 <__assert_func>
 800dd06:	6922      	ldr	r2, [r4, #16]
 800dd08:	3202      	adds	r2, #2
 800dd0a:	f104 010c 	add.w	r1, r4, #12
 800dd0e:	0092      	lsls	r2, r2, #2
 800dd10:	300c      	adds	r0, #12
 800dd12:	f7ff ff5b 	bl	800dbcc <memcpy>
 800dd16:	4621      	mov	r1, r4
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7ff ffa5 	bl	800dc68 <_Bfree>
 800dd1e:	4644      	mov	r4, r8
 800dd20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd24:	3501      	adds	r5, #1
 800dd26:	615e      	str	r6, [r3, #20]
 800dd28:	6125      	str	r5, [r4, #16]
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	08010040 	.word	0x08010040
 800dd34:	08010130 	.word	0x08010130

0800dd38 <__s2b>:
 800dd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	4615      	mov	r5, r2
 800dd40:	461f      	mov	r7, r3
 800dd42:	2209      	movs	r2, #9
 800dd44:	3308      	adds	r3, #8
 800dd46:	4606      	mov	r6, r0
 800dd48:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	2201      	movs	r2, #1
 800dd50:	429a      	cmp	r2, r3
 800dd52:	db09      	blt.n	800dd68 <__s2b+0x30>
 800dd54:	4630      	mov	r0, r6
 800dd56:	f7ff ff47 	bl	800dbe8 <_Balloc>
 800dd5a:	b940      	cbnz	r0, 800dd6e <__s2b+0x36>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	4b19      	ldr	r3, [pc, #100]	; (800ddc4 <__s2b+0x8c>)
 800dd60:	4819      	ldr	r0, [pc, #100]	; (800ddc8 <__s2b+0x90>)
 800dd62:	21ce      	movs	r1, #206	; 0xce
 800dd64:	f001 fc38 	bl	800f5d8 <__assert_func>
 800dd68:	0052      	lsls	r2, r2, #1
 800dd6a:	3101      	adds	r1, #1
 800dd6c:	e7f0      	b.n	800dd50 <__s2b+0x18>
 800dd6e:	9b08      	ldr	r3, [sp, #32]
 800dd70:	6143      	str	r3, [r0, #20]
 800dd72:	2d09      	cmp	r5, #9
 800dd74:	f04f 0301 	mov.w	r3, #1
 800dd78:	6103      	str	r3, [r0, #16]
 800dd7a:	dd16      	ble.n	800ddaa <__s2b+0x72>
 800dd7c:	f104 0909 	add.w	r9, r4, #9
 800dd80:	46c8      	mov	r8, r9
 800dd82:	442c      	add	r4, r5
 800dd84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd88:	4601      	mov	r1, r0
 800dd8a:	3b30      	subs	r3, #48	; 0x30
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ff8c 	bl	800dcac <__multadd>
 800dd94:	45a0      	cmp	r8, r4
 800dd96:	d1f5      	bne.n	800dd84 <__s2b+0x4c>
 800dd98:	f1a5 0408 	sub.w	r4, r5, #8
 800dd9c:	444c      	add	r4, r9
 800dd9e:	1b2d      	subs	r5, r5, r4
 800dda0:	1963      	adds	r3, r4, r5
 800dda2:	42bb      	cmp	r3, r7
 800dda4:	db04      	blt.n	800ddb0 <__s2b+0x78>
 800dda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddaa:	340a      	adds	r4, #10
 800ddac:	2509      	movs	r5, #9
 800ddae:	e7f6      	b.n	800dd9e <__s2b+0x66>
 800ddb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	3b30      	subs	r3, #48	; 0x30
 800ddb8:	220a      	movs	r2, #10
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f7ff ff76 	bl	800dcac <__multadd>
 800ddc0:	e7ee      	b.n	800dda0 <__s2b+0x68>
 800ddc2:	bf00      	nop
 800ddc4:	08010040 	.word	0x08010040
 800ddc8:	08010130 	.word	0x08010130

0800ddcc <__hi0bits>:
 800ddcc:	0c03      	lsrs	r3, r0, #16
 800ddce:	041b      	lsls	r3, r3, #16
 800ddd0:	b9d3      	cbnz	r3, 800de08 <__hi0bits+0x3c>
 800ddd2:	0400      	lsls	r0, r0, #16
 800ddd4:	2310      	movs	r3, #16
 800ddd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddda:	bf04      	itt	eq
 800dddc:	0200      	lsleq	r0, r0, #8
 800ddde:	3308      	addeq	r3, #8
 800dde0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dde4:	bf04      	itt	eq
 800dde6:	0100      	lsleq	r0, r0, #4
 800dde8:	3304      	addeq	r3, #4
 800ddea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddee:	bf04      	itt	eq
 800ddf0:	0080      	lsleq	r0, r0, #2
 800ddf2:	3302      	addeq	r3, #2
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	db05      	blt.n	800de04 <__hi0bits+0x38>
 800ddf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddfc:	f103 0301 	add.w	r3, r3, #1
 800de00:	bf08      	it	eq
 800de02:	2320      	moveq	r3, #32
 800de04:	4618      	mov	r0, r3
 800de06:	4770      	bx	lr
 800de08:	2300      	movs	r3, #0
 800de0a:	e7e4      	b.n	800ddd6 <__hi0bits+0xa>

0800de0c <__lo0bits>:
 800de0c:	6803      	ldr	r3, [r0, #0]
 800de0e:	f013 0207 	ands.w	r2, r3, #7
 800de12:	4601      	mov	r1, r0
 800de14:	d00b      	beq.n	800de2e <__lo0bits+0x22>
 800de16:	07da      	lsls	r2, r3, #31
 800de18:	d423      	bmi.n	800de62 <__lo0bits+0x56>
 800de1a:	0798      	lsls	r0, r3, #30
 800de1c:	bf49      	itett	mi
 800de1e:	085b      	lsrmi	r3, r3, #1
 800de20:	089b      	lsrpl	r3, r3, #2
 800de22:	2001      	movmi	r0, #1
 800de24:	600b      	strmi	r3, [r1, #0]
 800de26:	bf5c      	itt	pl
 800de28:	600b      	strpl	r3, [r1, #0]
 800de2a:	2002      	movpl	r0, #2
 800de2c:	4770      	bx	lr
 800de2e:	b298      	uxth	r0, r3
 800de30:	b9a8      	cbnz	r0, 800de5e <__lo0bits+0x52>
 800de32:	0c1b      	lsrs	r3, r3, #16
 800de34:	2010      	movs	r0, #16
 800de36:	b2da      	uxtb	r2, r3
 800de38:	b90a      	cbnz	r2, 800de3e <__lo0bits+0x32>
 800de3a:	3008      	adds	r0, #8
 800de3c:	0a1b      	lsrs	r3, r3, #8
 800de3e:	071a      	lsls	r2, r3, #28
 800de40:	bf04      	itt	eq
 800de42:	091b      	lsreq	r3, r3, #4
 800de44:	3004      	addeq	r0, #4
 800de46:	079a      	lsls	r2, r3, #30
 800de48:	bf04      	itt	eq
 800de4a:	089b      	lsreq	r3, r3, #2
 800de4c:	3002      	addeq	r0, #2
 800de4e:	07da      	lsls	r2, r3, #31
 800de50:	d403      	bmi.n	800de5a <__lo0bits+0x4e>
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	f100 0001 	add.w	r0, r0, #1
 800de58:	d005      	beq.n	800de66 <__lo0bits+0x5a>
 800de5a:	600b      	str	r3, [r1, #0]
 800de5c:	4770      	bx	lr
 800de5e:	4610      	mov	r0, r2
 800de60:	e7e9      	b.n	800de36 <__lo0bits+0x2a>
 800de62:	2000      	movs	r0, #0
 800de64:	4770      	bx	lr
 800de66:	2020      	movs	r0, #32
 800de68:	4770      	bx	lr
	...

0800de6c <__i2b>:
 800de6c:	b510      	push	{r4, lr}
 800de6e:	460c      	mov	r4, r1
 800de70:	2101      	movs	r1, #1
 800de72:	f7ff feb9 	bl	800dbe8 <_Balloc>
 800de76:	4602      	mov	r2, r0
 800de78:	b928      	cbnz	r0, 800de86 <__i2b+0x1a>
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <__i2b+0x24>)
 800de7c:	4805      	ldr	r0, [pc, #20]	; (800de94 <__i2b+0x28>)
 800de7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de82:	f001 fba9 	bl	800f5d8 <__assert_func>
 800de86:	2301      	movs	r3, #1
 800de88:	6144      	str	r4, [r0, #20]
 800de8a:	6103      	str	r3, [r0, #16]
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	bf00      	nop
 800de90:	08010040 	.word	0x08010040
 800de94:	08010130 	.word	0x08010130

0800de98 <__multiply>:
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	4691      	mov	r9, r2
 800de9e:	690a      	ldr	r2, [r1, #16]
 800dea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	bfb8      	it	lt
 800dea8:	460b      	movlt	r3, r1
 800deaa:	460c      	mov	r4, r1
 800deac:	bfbc      	itt	lt
 800deae:	464c      	movlt	r4, r9
 800deb0:	4699      	movlt	r9, r3
 800deb2:	6927      	ldr	r7, [r4, #16]
 800deb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800deb8:	68a3      	ldr	r3, [r4, #8]
 800deba:	6861      	ldr	r1, [r4, #4]
 800debc:	eb07 060a 	add.w	r6, r7, sl
 800dec0:	42b3      	cmp	r3, r6
 800dec2:	b085      	sub	sp, #20
 800dec4:	bfb8      	it	lt
 800dec6:	3101      	addlt	r1, #1
 800dec8:	f7ff fe8e 	bl	800dbe8 <_Balloc>
 800decc:	b930      	cbnz	r0, 800dedc <__multiply+0x44>
 800dece:	4602      	mov	r2, r0
 800ded0:	4b44      	ldr	r3, [pc, #272]	; (800dfe4 <__multiply+0x14c>)
 800ded2:	4845      	ldr	r0, [pc, #276]	; (800dfe8 <__multiply+0x150>)
 800ded4:	f240 115d 	movw	r1, #349	; 0x15d
 800ded8:	f001 fb7e 	bl	800f5d8 <__assert_func>
 800dedc:	f100 0514 	add.w	r5, r0, #20
 800dee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dee4:	462b      	mov	r3, r5
 800dee6:	2200      	movs	r2, #0
 800dee8:	4543      	cmp	r3, r8
 800deea:	d321      	bcc.n	800df30 <__multiply+0x98>
 800deec:	f104 0314 	add.w	r3, r4, #20
 800def0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800def4:	f109 0314 	add.w	r3, r9, #20
 800def8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800defc:	9202      	str	r2, [sp, #8]
 800defe:	1b3a      	subs	r2, r7, r4
 800df00:	3a15      	subs	r2, #21
 800df02:	f022 0203 	bic.w	r2, r2, #3
 800df06:	3204      	adds	r2, #4
 800df08:	f104 0115 	add.w	r1, r4, #21
 800df0c:	428f      	cmp	r7, r1
 800df0e:	bf38      	it	cc
 800df10:	2204      	movcc	r2, #4
 800df12:	9201      	str	r2, [sp, #4]
 800df14:	9a02      	ldr	r2, [sp, #8]
 800df16:	9303      	str	r3, [sp, #12]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d80c      	bhi.n	800df36 <__multiply+0x9e>
 800df1c:	2e00      	cmp	r6, #0
 800df1e:	dd03      	ble.n	800df28 <__multiply+0x90>
 800df20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df24:	2b00      	cmp	r3, #0
 800df26:	d05a      	beq.n	800dfde <__multiply+0x146>
 800df28:	6106      	str	r6, [r0, #16]
 800df2a:	b005      	add	sp, #20
 800df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df30:	f843 2b04 	str.w	r2, [r3], #4
 800df34:	e7d8      	b.n	800dee8 <__multiply+0x50>
 800df36:	f8b3 a000 	ldrh.w	sl, [r3]
 800df3a:	f1ba 0f00 	cmp.w	sl, #0
 800df3e:	d024      	beq.n	800df8a <__multiply+0xf2>
 800df40:	f104 0e14 	add.w	lr, r4, #20
 800df44:	46a9      	mov	r9, r5
 800df46:	f04f 0c00 	mov.w	ip, #0
 800df4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df4e:	f8d9 1000 	ldr.w	r1, [r9]
 800df52:	fa1f fb82 	uxth.w	fp, r2
 800df56:	b289      	uxth	r1, r1
 800df58:	fb0a 110b 	mla	r1, sl, fp, r1
 800df5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df60:	f8d9 2000 	ldr.w	r2, [r9]
 800df64:	4461      	add	r1, ip
 800df66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df6a:	fb0a c20b 	mla	r2, sl, fp, ip
 800df6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df72:	b289      	uxth	r1, r1
 800df74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df78:	4577      	cmp	r7, lr
 800df7a:	f849 1b04 	str.w	r1, [r9], #4
 800df7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df82:	d8e2      	bhi.n	800df4a <__multiply+0xb2>
 800df84:	9a01      	ldr	r2, [sp, #4]
 800df86:	f845 c002 	str.w	ip, [r5, r2]
 800df8a:	9a03      	ldr	r2, [sp, #12]
 800df8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df90:	3304      	adds	r3, #4
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d020      	beq.n	800dfda <__multiply+0x142>
 800df98:	6829      	ldr	r1, [r5, #0]
 800df9a:	f104 0c14 	add.w	ip, r4, #20
 800df9e:	46ae      	mov	lr, r5
 800dfa0:	f04f 0a00 	mov.w	sl, #0
 800dfa4:	f8bc b000 	ldrh.w	fp, [ip]
 800dfa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dfac:	fb09 220b 	mla	r2, r9, fp, r2
 800dfb0:	4492      	add	sl, r2
 800dfb2:	b289      	uxth	r1, r1
 800dfb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dfb8:	f84e 1b04 	str.w	r1, [lr], #4
 800dfbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dfc0:	f8be 1000 	ldrh.w	r1, [lr]
 800dfc4:	0c12      	lsrs	r2, r2, #16
 800dfc6:	fb09 1102 	mla	r1, r9, r2, r1
 800dfca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dfce:	4567      	cmp	r7, ip
 800dfd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfd4:	d8e6      	bhi.n	800dfa4 <__multiply+0x10c>
 800dfd6:	9a01      	ldr	r2, [sp, #4]
 800dfd8:	50a9      	str	r1, [r5, r2]
 800dfda:	3504      	adds	r5, #4
 800dfdc:	e79a      	b.n	800df14 <__multiply+0x7c>
 800dfde:	3e01      	subs	r6, #1
 800dfe0:	e79c      	b.n	800df1c <__multiply+0x84>
 800dfe2:	bf00      	nop
 800dfe4:	08010040 	.word	0x08010040
 800dfe8:	08010130 	.word	0x08010130

0800dfec <__pow5mult>:
 800dfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dff0:	4615      	mov	r5, r2
 800dff2:	f012 0203 	ands.w	r2, r2, #3
 800dff6:	4606      	mov	r6, r0
 800dff8:	460f      	mov	r7, r1
 800dffa:	d007      	beq.n	800e00c <__pow5mult+0x20>
 800dffc:	4c25      	ldr	r4, [pc, #148]	; (800e094 <__pow5mult+0xa8>)
 800dffe:	3a01      	subs	r2, #1
 800e000:	2300      	movs	r3, #0
 800e002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e006:	f7ff fe51 	bl	800dcac <__multadd>
 800e00a:	4607      	mov	r7, r0
 800e00c:	10ad      	asrs	r5, r5, #2
 800e00e:	d03d      	beq.n	800e08c <__pow5mult+0xa0>
 800e010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e012:	b97c      	cbnz	r4, 800e034 <__pow5mult+0x48>
 800e014:	2010      	movs	r0, #16
 800e016:	f7ff fdbf 	bl	800db98 <malloc>
 800e01a:	4602      	mov	r2, r0
 800e01c:	6270      	str	r0, [r6, #36]	; 0x24
 800e01e:	b928      	cbnz	r0, 800e02c <__pow5mult+0x40>
 800e020:	4b1d      	ldr	r3, [pc, #116]	; (800e098 <__pow5mult+0xac>)
 800e022:	481e      	ldr	r0, [pc, #120]	; (800e09c <__pow5mult+0xb0>)
 800e024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e028:	f001 fad6 	bl	800f5d8 <__assert_func>
 800e02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e030:	6004      	str	r4, [r0, #0]
 800e032:	60c4      	str	r4, [r0, #12]
 800e034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e03c:	b94c      	cbnz	r4, 800e052 <__pow5mult+0x66>
 800e03e:	f240 2171 	movw	r1, #625	; 0x271
 800e042:	4630      	mov	r0, r6
 800e044:	f7ff ff12 	bl	800de6c <__i2b>
 800e048:	2300      	movs	r3, #0
 800e04a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e04e:	4604      	mov	r4, r0
 800e050:	6003      	str	r3, [r0, #0]
 800e052:	f04f 0900 	mov.w	r9, #0
 800e056:	07eb      	lsls	r3, r5, #31
 800e058:	d50a      	bpl.n	800e070 <__pow5mult+0x84>
 800e05a:	4639      	mov	r1, r7
 800e05c:	4622      	mov	r2, r4
 800e05e:	4630      	mov	r0, r6
 800e060:	f7ff ff1a 	bl	800de98 <__multiply>
 800e064:	4639      	mov	r1, r7
 800e066:	4680      	mov	r8, r0
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff fdfd 	bl	800dc68 <_Bfree>
 800e06e:	4647      	mov	r7, r8
 800e070:	106d      	asrs	r5, r5, #1
 800e072:	d00b      	beq.n	800e08c <__pow5mult+0xa0>
 800e074:	6820      	ldr	r0, [r4, #0]
 800e076:	b938      	cbnz	r0, 800e088 <__pow5mult+0x9c>
 800e078:	4622      	mov	r2, r4
 800e07a:	4621      	mov	r1, r4
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7ff ff0b 	bl	800de98 <__multiply>
 800e082:	6020      	str	r0, [r4, #0]
 800e084:	f8c0 9000 	str.w	r9, [r0]
 800e088:	4604      	mov	r4, r0
 800e08a:	e7e4      	b.n	800e056 <__pow5mult+0x6a>
 800e08c:	4638      	mov	r0, r7
 800e08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e092:	bf00      	nop
 800e094:	08010280 	.word	0x08010280
 800e098:	0800ffce 	.word	0x0800ffce
 800e09c:	08010130 	.word	0x08010130

0800e0a0 <__lshift>:
 800e0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	6849      	ldr	r1, [r1, #4]
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0ae:	68a3      	ldr	r3, [r4, #8]
 800e0b0:	4607      	mov	r7, r0
 800e0b2:	4691      	mov	r9, r2
 800e0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0b8:	f108 0601 	add.w	r6, r8, #1
 800e0bc:	42b3      	cmp	r3, r6
 800e0be:	db0b      	blt.n	800e0d8 <__lshift+0x38>
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7ff fd91 	bl	800dbe8 <_Balloc>
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	b948      	cbnz	r0, 800e0de <__lshift+0x3e>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	4b2a      	ldr	r3, [pc, #168]	; (800e178 <__lshift+0xd8>)
 800e0ce:	482b      	ldr	r0, [pc, #172]	; (800e17c <__lshift+0xdc>)
 800e0d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e0d4:	f001 fa80 	bl	800f5d8 <__assert_func>
 800e0d8:	3101      	adds	r1, #1
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	e7ee      	b.n	800e0bc <__lshift+0x1c>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f100 0114 	add.w	r1, r0, #20
 800e0e4:	f100 0210 	add.w	r2, r0, #16
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	4553      	cmp	r3, sl
 800e0ec:	db37      	blt.n	800e15e <__lshift+0xbe>
 800e0ee:	6920      	ldr	r0, [r4, #16]
 800e0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0f4:	f104 0314 	add.w	r3, r4, #20
 800e0f8:	f019 091f 	ands.w	r9, r9, #31
 800e0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e104:	d02f      	beq.n	800e166 <__lshift+0xc6>
 800e106:	f1c9 0e20 	rsb	lr, r9, #32
 800e10a:	468a      	mov	sl, r1
 800e10c:	f04f 0c00 	mov.w	ip, #0
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	fa02 f209 	lsl.w	r2, r2, r9
 800e116:	ea42 020c 	orr.w	r2, r2, ip
 800e11a:	f84a 2b04 	str.w	r2, [sl], #4
 800e11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e122:	4298      	cmp	r0, r3
 800e124:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e128:	d8f2      	bhi.n	800e110 <__lshift+0x70>
 800e12a:	1b03      	subs	r3, r0, r4
 800e12c:	3b15      	subs	r3, #21
 800e12e:	f023 0303 	bic.w	r3, r3, #3
 800e132:	3304      	adds	r3, #4
 800e134:	f104 0215 	add.w	r2, r4, #21
 800e138:	4290      	cmp	r0, r2
 800e13a:	bf38      	it	cc
 800e13c:	2304      	movcc	r3, #4
 800e13e:	f841 c003 	str.w	ip, [r1, r3]
 800e142:	f1bc 0f00 	cmp.w	ip, #0
 800e146:	d001      	beq.n	800e14c <__lshift+0xac>
 800e148:	f108 0602 	add.w	r6, r8, #2
 800e14c:	3e01      	subs	r6, #1
 800e14e:	4638      	mov	r0, r7
 800e150:	612e      	str	r6, [r5, #16]
 800e152:	4621      	mov	r1, r4
 800e154:	f7ff fd88 	bl	800dc68 <_Bfree>
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e162:	3301      	adds	r3, #1
 800e164:	e7c1      	b.n	800e0ea <__lshift+0x4a>
 800e166:	3904      	subs	r1, #4
 800e168:	f853 2b04 	ldr.w	r2, [r3], #4
 800e16c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e170:	4298      	cmp	r0, r3
 800e172:	d8f9      	bhi.n	800e168 <__lshift+0xc8>
 800e174:	e7ea      	b.n	800e14c <__lshift+0xac>
 800e176:	bf00      	nop
 800e178:	08010040 	.word	0x08010040
 800e17c:	08010130 	.word	0x08010130

0800e180 <__mcmp>:
 800e180:	b530      	push	{r4, r5, lr}
 800e182:	6902      	ldr	r2, [r0, #16]
 800e184:	690c      	ldr	r4, [r1, #16]
 800e186:	1b12      	subs	r2, r2, r4
 800e188:	d10e      	bne.n	800e1a8 <__mcmp+0x28>
 800e18a:	f100 0314 	add.w	r3, r0, #20
 800e18e:	3114      	adds	r1, #20
 800e190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e19c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e1a0:	42a5      	cmp	r5, r4
 800e1a2:	d003      	beq.n	800e1ac <__mcmp+0x2c>
 800e1a4:	d305      	bcc.n	800e1b2 <__mcmp+0x32>
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	bd30      	pop	{r4, r5, pc}
 800e1ac:	4283      	cmp	r3, r0
 800e1ae:	d3f3      	bcc.n	800e198 <__mcmp+0x18>
 800e1b0:	e7fa      	b.n	800e1a8 <__mcmp+0x28>
 800e1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b6:	e7f7      	b.n	800e1a8 <__mcmp+0x28>

0800e1b8 <__mdiff>:
 800e1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	460c      	mov	r4, r1
 800e1be:	4606      	mov	r6, r0
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	4690      	mov	r8, r2
 800e1c6:	f7ff ffdb 	bl	800e180 <__mcmp>
 800e1ca:	1e05      	subs	r5, r0, #0
 800e1cc:	d110      	bne.n	800e1f0 <__mdiff+0x38>
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7ff fd09 	bl	800dbe8 <_Balloc>
 800e1d6:	b930      	cbnz	r0, 800e1e6 <__mdiff+0x2e>
 800e1d8:	4b3a      	ldr	r3, [pc, #232]	; (800e2c4 <__mdiff+0x10c>)
 800e1da:	4602      	mov	r2, r0
 800e1dc:	f240 2132 	movw	r1, #562	; 0x232
 800e1e0:	4839      	ldr	r0, [pc, #228]	; (800e2c8 <__mdiff+0x110>)
 800e1e2:	f001 f9f9 	bl	800f5d8 <__assert_func>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f0:	bfa4      	itt	ge
 800e1f2:	4643      	movge	r3, r8
 800e1f4:	46a0      	movge	r8, r4
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1fc:	bfa6      	itte	ge
 800e1fe:	461c      	movge	r4, r3
 800e200:	2500      	movge	r5, #0
 800e202:	2501      	movlt	r5, #1
 800e204:	f7ff fcf0 	bl	800dbe8 <_Balloc>
 800e208:	b920      	cbnz	r0, 800e214 <__mdiff+0x5c>
 800e20a:	4b2e      	ldr	r3, [pc, #184]	; (800e2c4 <__mdiff+0x10c>)
 800e20c:	4602      	mov	r2, r0
 800e20e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e212:	e7e5      	b.n	800e1e0 <__mdiff+0x28>
 800e214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e218:	6926      	ldr	r6, [r4, #16]
 800e21a:	60c5      	str	r5, [r0, #12]
 800e21c:	f104 0914 	add.w	r9, r4, #20
 800e220:	f108 0514 	add.w	r5, r8, #20
 800e224:	f100 0e14 	add.w	lr, r0, #20
 800e228:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e22c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e230:	f108 0210 	add.w	r2, r8, #16
 800e234:	46f2      	mov	sl, lr
 800e236:	2100      	movs	r1, #0
 800e238:	f859 3b04 	ldr.w	r3, [r9], #4
 800e23c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e240:	fa1f f883 	uxth.w	r8, r3
 800e244:	fa11 f18b 	uxtah	r1, r1, fp
 800e248:	0c1b      	lsrs	r3, r3, #16
 800e24a:	eba1 0808 	sub.w	r8, r1, r8
 800e24e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e256:	fa1f f888 	uxth.w	r8, r8
 800e25a:	1419      	asrs	r1, r3, #16
 800e25c:	454e      	cmp	r6, r9
 800e25e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e262:	f84a 3b04 	str.w	r3, [sl], #4
 800e266:	d8e7      	bhi.n	800e238 <__mdiff+0x80>
 800e268:	1b33      	subs	r3, r6, r4
 800e26a:	3b15      	subs	r3, #21
 800e26c:	f023 0303 	bic.w	r3, r3, #3
 800e270:	3304      	adds	r3, #4
 800e272:	3415      	adds	r4, #21
 800e274:	42a6      	cmp	r6, r4
 800e276:	bf38      	it	cc
 800e278:	2304      	movcc	r3, #4
 800e27a:	441d      	add	r5, r3
 800e27c:	4473      	add	r3, lr
 800e27e:	469e      	mov	lr, r3
 800e280:	462e      	mov	r6, r5
 800e282:	4566      	cmp	r6, ip
 800e284:	d30e      	bcc.n	800e2a4 <__mdiff+0xec>
 800e286:	f10c 0203 	add.w	r2, ip, #3
 800e28a:	1b52      	subs	r2, r2, r5
 800e28c:	f022 0203 	bic.w	r2, r2, #3
 800e290:	3d03      	subs	r5, #3
 800e292:	45ac      	cmp	ip, r5
 800e294:	bf38      	it	cc
 800e296:	2200      	movcc	r2, #0
 800e298:	441a      	add	r2, r3
 800e29a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e29e:	b17b      	cbz	r3, 800e2c0 <__mdiff+0x108>
 800e2a0:	6107      	str	r7, [r0, #16]
 800e2a2:	e7a3      	b.n	800e1ec <__mdiff+0x34>
 800e2a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e2a8:	fa11 f288 	uxtah	r2, r1, r8
 800e2ac:	1414      	asrs	r4, r2, #16
 800e2ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2b2:	b292      	uxth	r2, r2
 800e2b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e2b8:	f84e 2b04 	str.w	r2, [lr], #4
 800e2bc:	1421      	asrs	r1, r4, #16
 800e2be:	e7e0      	b.n	800e282 <__mdiff+0xca>
 800e2c0:	3f01      	subs	r7, #1
 800e2c2:	e7ea      	b.n	800e29a <__mdiff+0xe2>
 800e2c4:	08010040 	.word	0x08010040
 800e2c8:	08010130 	.word	0x08010130

0800e2cc <__ulp>:
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	ed8d 0b00 	vstr	d0, [sp]
 800e2d2:	9b01      	ldr	r3, [sp, #4]
 800e2d4:	4912      	ldr	r1, [pc, #72]	; (800e320 <__ulp+0x54>)
 800e2d6:	4019      	ands	r1, r3
 800e2d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e2dc:	2900      	cmp	r1, #0
 800e2de:	dd05      	ble.n	800e2ec <__ulp+0x20>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	ec43 2b10 	vmov	d0, r2, r3
 800e2e8:	b002      	add	sp, #8
 800e2ea:	4770      	bx	lr
 800e2ec:	4249      	negs	r1, r1
 800e2ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e2f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e2f6:	f04f 0200 	mov.w	r2, #0
 800e2fa:	f04f 0300 	mov.w	r3, #0
 800e2fe:	da04      	bge.n	800e30a <__ulp+0x3e>
 800e300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e304:	fa41 f300 	asr.w	r3, r1, r0
 800e308:	e7ec      	b.n	800e2e4 <__ulp+0x18>
 800e30a:	f1a0 0114 	sub.w	r1, r0, #20
 800e30e:	291e      	cmp	r1, #30
 800e310:	bfda      	itte	le
 800e312:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e316:	fa20 f101 	lsrle.w	r1, r0, r1
 800e31a:	2101      	movgt	r1, #1
 800e31c:	460a      	mov	r2, r1
 800e31e:	e7e1      	b.n	800e2e4 <__ulp+0x18>
 800e320:	7ff00000 	.word	0x7ff00000

0800e324 <__b2d>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	6905      	ldr	r5, [r0, #16]
 800e328:	f100 0714 	add.w	r7, r0, #20
 800e32c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e330:	1f2e      	subs	r6, r5, #4
 800e332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e336:	4620      	mov	r0, r4
 800e338:	f7ff fd48 	bl	800ddcc <__hi0bits>
 800e33c:	f1c0 0320 	rsb	r3, r0, #32
 800e340:	280a      	cmp	r0, #10
 800e342:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e3c0 <__b2d+0x9c>
 800e346:	600b      	str	r3, [r1, #0]
 800e348:	dc14      	bgt.n	800e374 <__b2d+0x50>
 800e34a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e34e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e352:	42b7      	cmp	r7, r6
 800e354:	ea41 030c 	orr.w	r3, r1, ip
 800e358:	bf34      	ite	cc
 800e35a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e35e:	2100      	movcs	r1, #0
 800e360:	3015      	adds	r0, #21
 800e362:	fa04 f000 	lsl.w	r0, r4, r0
 800e366:	fa21 f10e 	lsr.w	r1, r1, lr
 800e36a:	ea40 0201 	orr.w	r2, r0, r1
 800e36e:	ec43 2b10 	vmov	d0, r2, r3
 800e372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e374:	42b7      	cmp	r7, r6
 800e376:	bf3a      	itte	cc
 800e378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e37c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e380:	2100      	movcs	r1, #0
 800e382:	380b      	subs	r0, #11
 800e384:	d017      	beq.n	800e3b6 <__b2d+0x92>
 800e386:	f1c0 0c20 	rsb	ip, r0, #32
 800e38a:	fa04 f500 	lsl.w	r5, r4, r0
 800e38e:	42be      	cmp	r6, r7
 800e390:	fa21 f40c 	lsr.w	r4, r1, ip
 800e394:	ea45 0504 	orr.w	r5, r5, r4
 800e398:	bf8c      	ite	hi
 800e39a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e39e:	2400      	movls	r4, #0
 800e3a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e3a4:	fa01 f000 	lsl.w	r0, r1, r0
 800e3a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e3ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e3b0:	ea40 0204 	orr.w	r2, r0, r4
 800e3b4:	e7db      	b.n	800e36e <__b2d+0x4a>
 800e3b6:	ea44 030c 	orr.w	r3, r4, ip
 800e3ba:	460a      	mov	r2, r1
 800e3bc:	e7d7      	b.n	800e36e <__b2d+0x4a>
 800e3be:	bf00      	nop
 800e3c0:	3ff00000 	.word	0x3ff00000

0800e3c4 <__d2b>:
 800e3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	4689      	mov	r9, r1
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	ec57 6b10 	vmov	r6, r7, d0
 800e3d0:	4690      	mov	r8, r2
 800e3d2:	f7ff fc09 	bl	800dbe8 <_Balloc>
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	b930      	cbnz	r0, 800e3e8 <__d2b+0x24>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	4b25      	ldr	r3, [pc, #148]	; (800e474 <__d2b+0xb0>)
 800e3de:	4826      	ldr	r0, [pc, #152]	; (800e478 <__d2b+0xb4>)
 800e3e0:	f240 310a 	movw	r1, #778	; 0x30a
 800e3e4:	f001 f8f8 	bl	800f5d8 <__assert_func>
 800e3e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3f0:	bb35      	cbnz	r5, 800e440 <__d2b+0x7c>
 800e3f2:	2e00      	cmp	r6, #0
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	d028      	beq.n	800e44a <__d2b+0x86>
 800e3f8:	4668      	mov	r0, sp
 800e3fa:	9600      	str	r6, [sp, #0]
 800e3fc:	f7ff fd06 	bl	800de0c <__lo0bits>
 800e400:	9900      	ldr	r1, [sp, #0]
 800e402:	b300      	cbz	r0, 800e446 <__d2b+0x82>
 800e404:	9a01      	ldr	r2, [sp, #4]
 800e406:	f1c0 0320 	rsb	r3, r0, #32
 800e40a:	fa02 f303 	lsl.w	r3, r2, r3
 800e40e:	430b      	orrs	r3, r1
 800e410:	40c2      	lsrs	r2, r0
 800e412:	6163      	str	r3, [r4, #20]
 800e414:	9201      	str	r2, [sp, #4]
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	61a3      	str	r3, [r4, #24]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	bf14      	ite	ne
 800e41e:	2202      	movne	r2, #2
 800e420:	2201      	moveq	r2, #1
 800e422:	6122      	str	r2, [r4, #16]
 800e424:	b1d5      	cbz	r5, 800e45c <__d2b+0x98>
 800e426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e42a:	4405      	add	r5, r0
 800e42c:	f8c9 5000 	str.w	r5, [r9]
 800e430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e434:	f8c8 0000 	str.w	r0, [r8]
 800e438:	4620      	mov	r0, r4
 800e43a:	b003      	add	sp, #12
 800e43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e444:	e7d5      	b.n	800e3f2 <__d2b+0x2e>
 800e446:	6161      	str	r1, [r4, #20]
 800e448:	e7e5      	b.n	800e416 <__d2b+0x52>
 800e44a:	a801      	add	r0, sp, #4
 800e44c:	f7ff fcde 	bl	800de0c <__lo0bits>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	6163      	str	r3, [r4, #20]
 800e454:	2201      	movs	r2, #1
 800e456:	6122      	str	r2, [r4, #16]
 800e458:	3020      	adds	r0, #32
 800e45a:	e7e3      	b.n	800e424 <__d2b+0x60>
 800e45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e464:	f8c9 0000 	str.w	r0, [r9]
 800e468:	6918      	ldr	r0, [r3, #16]
 800e46a:	f7ff fcaf 	bl	800ddcc <__hi0bits>
 800e46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e472:	e7df      	b.n	800e434 <__d2b+0x70>
 800e474:	08010040 	.word	0x08010040
 800e478:	08010130 	.word	0x08010130

0800e47c <__ratio>:
 800e47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	4688      	mov	r8, r1
 800e482:	4669      	mov	r1, sp
 800e484:	4681      	mov	r9, r0
 800e486:	f7ff ff4d 	bl	800e324 <__b2d>
 800e48a:	a901      	add	r1, sp, #4
 800e48c:	4640      	mov	r0, r8
 800e48e:	ec55 4b10 	vmov	r4, r5, d0
 800e492:	f7ff ff47 	bl	800e324 <__b2d>
 800e496:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e49a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e49e:	eba3 0c02 	sub.w	ip, r3, r2
 800e4a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e4a6:	1a9b      	subs	r3, r3, r2
 800e4a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e4ac:	ec51 0b10 	vmov	r0, r1, d0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	bfd6      	itet	le
 800e4b4:	460a      	movle	r2, r1
 800e4b6:	462a      	movgt	r2, r5
 800e4b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e4bc:	468b      	mov	fp, r1
 800e4be:	462f      	mov	r7, r5
 800e4c0:	bfd4      	ite	le
 800e4c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e4c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	ee10 2a10 	vmov	r2, s0
 800e4d0:	465b      	mov	r3, fp
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f2 f9ba 	bl	800084c <__aeabi_ddiv>
 800e4d8:	ec41 0b10 	vmov	d0, r0, r1
 800e4dc:	b003      	add	sp, #12
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e4e2 <__copybits>:
 800e4e2:	3901      	subs	r1, #1
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	1149      	asrs	r1, r1, #5
 800e4e8:	6914      	ldr	r4, [r2, #16]
 800e4ea:	3101      	adds	r1, #1
 800e4ec:	f102 0314 	add.w	r3, r2, #20
 800e4f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4f8:	1f05      	subs	r5, r0, #4
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	d30c      	bcc.n	800e518 <__copybits+0x36>
 800e4fe:	1aa3      	subs	r3, r4, r2
 800e500:	3b11      	subs	r3, #17
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	3211      	adds	r2, #17
 800e508:	42a2      	cmp	r2, r4
 800e50a:	bf88      	it	hi
 800e50c:	2300      	movhi	r3, #0
 800e50e:	4418      	add	r0, r3
 800e510:	2300      	movs	r3, #0
 800e512:	4288      	cmp	r0, r1
 800e514:	d305      	bcc.n	800e522 <__copybits+0x40>
 800e516:	bd70      	pop	{r4, r5, r6, pc}
 800e518:	f853 6b04 	ldr.w	r6, [r3], #4
 800e51c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e520:	e7eb      	b.n	800e4fa <__copybits+0x18>
 800e522:	f840 3b04 	str.w	r3, [r0], #4
 800e526:	e7f4      	b.n	800e512 <__copybits+0x30>

0800e528 <__any_on>:
 800e528:	f100 0214 	add.w	r2, r0, #20
 800e52c:	6900      	ldr	r0, [r0, #16]
 800e52e:	114b      	asrs	r3, r1, #5
 800e530:	4298      	cmp	r0, r3
 800e532:	b510      	push	{r4, lr}
 800e534:	db11      	blt.n	800e55a <__any_on+0x32>
 800e536:	dd0a      	ble.n	800e54e <__any_on+0x26>
 800e538:	f011 011f 	ands.w	r1, r1, #31
 800e53c:	d007      	beq.n	800e54e <__any_on+0x26>
 800e53e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e542:	fa24 f001 	lsr.w	r0, r4, r1
 800e546:	fa00 f101 	lsl.w	r1, r0, r1
 800e54a:	428c      	cmp	r4, r1
 800e54c:	d10b      	bne.n	800e566 <__any_on+0x3e>
 800e54e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e552:	4293      	cmp	r3, r2
 800e554:	d803      	bhi.n	800e55e <__any_on+0x36>
 800e556:	2000      	movs	r0, #0
 800e558:	bd10      	pop	{r4, pc}
 800e55a:	4603      	mov	r3, r0
 800e55c:	e7f7      	b.n	800e54e <__any_on+0x26>
 800e55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e562:	2900      	cmp	r1, #0
 800e564:	d0f5      	beq.n	800e552 <__any_on+0x2a>
 800e566:	2001      	movs	r0, #1
 800e568:	e7f6      	b.n	800e558 <__any_on+0x30>

0800e56a <_calloc_r>:
 800e56a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e56c:	fba1 2402 	umull	r2, r4, r1, r2
 800e570:	b94c      	cbnz	r4, 800e586 <_calloc_r+0x1c>
 800e572:	4611      	mov	r1, r2
 800e574:	9201      	str	r2, [sp, #4]
 800e576:	f000 f87b 	bl	800e670 <_malloc_r>
 800e57a:	9a01      	ldr	r2, [sp, #4]
 800e57c:	4605      	mov	r5, r0
 800e57e:	b930      	cbnz	r0, 800e58e <_calloc_r+0x24>
 800e580:	4628      	mov	r0, r5
 800e582:	b003      	add	sp, #12
 800e584:	bd30      	pop	{r4, r5, pc}
 800e586:	220c      	movs	r2, #12
 800e588:	6002      	str	r2, [r0, #0]
 800e58a:	2500      	movs	r5, #0
 800e58c:	e7f8      	b.n	800e580 <_calloc_r+0x16>
 800e58e:	4621      	mov	r1, r4
 800e590:	f7fb ff78 	bl	800a484 <memset>
 800e594:	e7f4      	b.n	800e580 <_calloc_r+0x16>
	...

0800e598 <_free_r>:
 800e598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e59a:	2900      	cmp	r1, #0
 800e59c:	d044      	beq.n	800e628 <_free_r+0x90>
 800e59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5a2:	9001      	str	r0, [sp, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e5aa:	bfb8      	it	lt
 800e5ac:	18e4      	addlt	r4, r4, r3
 800e5ae:	f001 f87f 	bl	800f6b0 <__malloc_lock>
 800e5b2:	4a1e      	ldr	r2, [pc, #120]	; (800e62c <_free_r+0x94>)
 800e5b4:	9801      	ldr	r0, [sp, #4]
 800e5b6:	6813      	ldr	r3, [r2, #0]
 800e5b8:	b933      	cbnz	r3, 800e5c8 <_free_r+0x30>
 800e5ba:	6063      	str	r3, [r4, #4]
 800e5bc:	6014      	str	r4, [r2, #0]
 800e5be:	b003      	add	sp, #12
 800e5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5c4:	f001 b87a 	b.w	800f6bc <__malloc_unlock>
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	d908      	bls.n	800e5de <_free_r+0x46>
 800e5cc:	6825      	ldr	r5, [r4, #0]
 800e5ce:	1961      	adds	r1, r4, r5
 800e5d0:	428b      	cmp	r3, r1
 800e5d2:	bf01      	itttt	eq
 800e5d4:	6819      	ldreq	r1, [r3, #0]
 800e5d6:	685b      	ldreq	r3, [r3, #4]
 800e5d8:	1949      	addeq	r1, r1, r5
 800e5da:	6021      	streq	r1, [r4, #0]
 800e5dc:	e7ed      	b.n	800e5ba <_free_r+0x22>
 800e5de:	461a      	mov	r2, r3
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	b10b      	cbz	r3, 800e5e8 <_free_r+0x50>
 800e5e4:	42a3      	cmp	r3, r4
 800e5e6:	d9fa      	bls.n	800e5de <_free_r+0x46>
 800e5e8:	6811      	ldr	r1, [r2, #0]
 800e5ea:	1855      	adds	r5, r2, r1
 800e5ec:	42a5      	cmp	r5, r4
 800e5ee:	d10b      	bne.n	800e608 <_free_r+0x70>
 800e5f0:	6824      	ldr	r4, [r4, #0]
 800e5f2:	4421      	add	r1, r4
 800e5f4:	1854      	adds	r4, r2, r1
 800e5f6:	42a3      	cmp	r3, r4
 800e5f8:	6011      	str	r1, [r2, #0]
 800e5fa:	d1e0      	bne.n	800e5be <_free_r+0x26>
 800e5fc:	681c      	ldr	r4, [r3, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	6053      	str	r3, [r2, #4]
 800e602:	4421      	add	r1, r4
 800e604:	6011      	str	r1, [r2, #0]
 800e606:	e7da      	b.n	800e5be <_free_r+0x26>
 800e608:	d902      	bls.n	800e610 <_free_r+0x78>
 800e60a:	230c      	movs	r3, #12
 800e60c:	6003      	str	r3, [r0, #0]
 800e60e:	e7d6      	b.n	800e5be <_free_r+0x26>
 800e610:	6825      	ldr	r5, [r4, #0]
 800e612:	1961      	adds	r1, r4, r5
 800e614:	428b      	cmp	r3, r1
 800e616:	bf04      	itt	eq
 800e618:	6819      	ldreq	r1, [r3, #0]
 800e61a:	685b      	ldreq	r3, [r3, #4]
 800e61c:	6063      	str	r3, [r4, #4]
 800e61e:	bf04      	itt	eq
 800e620:	1949      	addeq	r1, r1, r5
 800e622:	6021      	streq	r1, [r4, #0]
 800e624:	6054      	str	r4, [r2, #4]
 800e626:	e7ca      	b.n	800e5be <_free_r+0x26>
 800e628:	b003      	add	sp, #12
 800e62a:	bd30      	pop	{r4, r5, pc}
 800e62c:	200009e8 	.word	0x200009e8

0800e630 <sbrk_aligned>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	4e0e      	ldr	r6, [pc, #56]	; (800e66c <sbrk_aligned+0x3c>)
 800e634:	460c      	mov	r4, r1
 800e636:	6831      	ldr	r1, [r6, #0]
 800e638:	4605      	mov	r5, r0
 800e63a:	b911      	cbnz	r1, 800e642 <sbrk_aligned+0x12>
 800e63c:	f000 fec8 	bl	800f3d0 <_sbrk_r>
 800e640:	6030      	str	r0, [r6, #0]
 800e642:	4621      	mov	r1, r4
 800e644:	4628      	mov	r0, r5
 800e646:	f000 fec3 	bl	800f3d0 <_sbrk_r>
 800e64a:	1c43      	adds	r3, r0, #1
 800e64c:	d00a      	beq.n	800e664 <sbrk_aligned+0x34>
 800e64e:	1cc4      	adds	r4, r0, #3
 800e650:	f024 0403 	bic.w	r4, r4, #3
 800e654:	42a0      	cmp	r0, r4
 800e656:	d007      	beq.n	800e668 <sbrk_aligned+0x38>
 800e658:	1a21      	subs	r1, r4, r0
 800e65a:	4628      	mov	r0, r5
 800e65c:	f000 feb8 	bl	800f3d0 <_sbrk_r>
 800e660:	3001      	adds	r0, #1
 800e662:	d101      	bne.n	800e668 <sbrk_aligned+0x38>
 800e664:	f04f 34ff 	mov.w	r4, #4294967295
 800e668:	4620      	mov	r0, r4
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	200009ec 	.word	0x200009ec

0800e670 <_malloc_r>:
 800e670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e674:	1ccd      	adds	r5, r1, #3
 800e676:	f025 0503 	bic.w	r5, r5, #3
 800e67a:	3508      	adds	r5, #8
 800e67c:	2d0c      	cmp	r5, #12
 800e67e:	bf38      	it	cc
 800e680:	250c      	movcc	r5, #12
 800e682:	2d00      	cmp	r5, #0
 800e684:	4607      	mov	r7, r0
 800e686:	db01      	blt.n	800e68c <_malloc_r+0x1c>
 800e688:	42a9      	cmp	r1, r5
 800e68a:	d905      	bls.n	800e698 <_malloc_r+0x28>
 800e68c:	230c      	movs	r3, #12
 800e68e:	603b      	str	r3, [r7, #0]
 800e690:	2600      	movs	r6, #0
 800e692:	4630      	mov	r0, r6
 800e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e698:	4e2e      	ldr	r6, [pc, #184]	; (800e754 <_malloc_r+0xe4>)
 800e69a:	f001 f809 	bl	800f6b0 <__malloc_lock>
 800e69e:	6833      	ldr	r3, [r6, #0]
 800e6a0:	461c      	mov	r4, r3
 800e6a2:	bb34      	cbnz	r4, 800e6f2 <_malloc_r+0x82>
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	f7ff ffc2 	bl	800e630 <sbrk_aligned>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	d14d      	bne.n	800e74e <_malloc_r+0xde>
 800e6b2:	6834      	ldr	r4, [r6, #0]
 800e6b4:	4626      	mov	r6, r4
 800e6b6:	2e00      	cmp	r6, #0
 800e6b8:	d140      	bne.n	800e73c <_malloc_r+0xcc>
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4638      	mov	r0, r7
 800e6c0:	eb04 0803 	add.w	r8, r4, r3
 800e6c4:	f000 fe84 	bl	800f3d0 <_sbrk_r>
 800e6c8:	4580      	cmp	r8, r0
 800e6ca:	d13a      	bne.n	800e742 <_malloc_r+0xd2>
 800e6cc:	6821      	ldr	r1, [r4, #0]
 800e6ce:	3503      	adds	r5, #3
 800e6d0:	1a6d      	subs	r5, r5, r1
 800e6d2:	f025 0503 	bic.w	r5, r5, #3
 800e6d6:	3508      	adds	r5, #8
 800e6d8:	2d0c      	cmp	r5, #12
 800e6da:	bf38      	it	cc
 800e6dc:	250c      	movcc	r5, #12
 800e6de:	4629      	mov	r1, r5
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	f7ff ffa5 	bl	800e630 <sbrk_aligned>
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	d02b      	beq.n	800e742 <_malloc_r+0xd2>
 800e6ea:	6823      	ldr	r3, [r4, #0]
 800e6ec:	442b      	add	r3, r5
 800e6ee:	6023      	str	r3, [r4, #0]
 800e6f0:	e00e      	b.n	800e710 <_malloc_r+0xa0>
 800e6f2:	6822      	ldr	r2, [r4, #0]
 800e6f4:	1b52      	subs	r2, r2, r5
 800e6f6:	d41e      	bmi.n	800e736 <_malloc_r+0xc6>
 800e6f8:	2a0b      	cmp	r2, #11
 800e6fa:	d916      	bls.n	800e72a <_malloc_r+0xba>
 800e6fc:	1961      	adds	r1, r4, r5
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	6025      	str	r5, [r4, #0]
 800e702:	bf18      	it	ne
 800e704:	6059      	strne	r1, [r3, #4]
 800e706:	6863      	ldr	r3, [r4, #4]
 800e708:	bf08      	it	eq
 800e70a:	6031      	streq	r1, [r6, #0]
 800e70c:	5162      	str	r2, [r4, r5]
 800e70e:	604b      	str	r3, [r1, #4]
 800e710:	4638      	mov	r0, r7
 800e712:	f104 060b 	add.w	r6, r4, #11
 800e716:	f000 ffd1 	bl	800f6bc <__malloc_unlock>
 800e71a:	f026 0607 	bic.w	r6, r6, #7
 800e71e:	1d23      	adds	r3, r4, #4
 800e720:	1af2      	subs	r2, r6, r3
 800e722:	d0b6      	beq.n	800e692 <_malloc_r+0x22>
 800e724:	1b9b      	subs	r3, r3, r6
 800e726:	50a3      	str	r3, [r4, r2]
 800e728:	e7b3      	b.n	800e692 <_malloc_r+0x22>
 800e72a:	6862      	ldr	r2, [r4, #4]
 800e72c:	42a3      	cmp	r3, r4
 800e72e:	bf0c      	ite	eq
 800e730:	6032      	streq	r2, [r6, #0]
 800e732:	605a      	strne	r2, [r3, #4]
 800e734:	e7ec      	b.n	800e710 <_malloc_r+0xa0>
 800e736:	4623      	mov	r3, r4
 800e738:	6864      	ldr	r4, [r4, #4]
 800e73a:	e7b2      	b.n	800e6a2 <_malloc_r+0x32>
 800e73c:	4634      	mov	r4, r6
 800e73e:	6876      	ldr	r6, [r6, #4]
 800e740:	e7b9      	b.n	800e6b6 <_malloc_r+0x46>
 800e742:	230c      	movs	r3, #12
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	4638      	mov	r0, r7
 800e748:	f000 ffb8 	bl	800f6bc <__malloc_unlock>
 800e74c:	e7a1      	b.n	800e692 <_malloc_r+0x22>
 800e74e:	6025      	str	r5, [r4, #0]
 800e750:	e7de      	b.n	800e710 <_malloc_r+0xa0>
 800e752:	bf00      	nop
 800e754:	200009e8 	.word	0x200009e8

0800e758 <__ssputs_r>:
 800e758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	688e      	ldr	r6, [r1, #8]
 800e75e:	429e      	cmp	r6, r3
 800e760:	4682      	mov	sl, r0
 800e762:	460c      	mov	r4, r1
 800e764:	4690      	mov	r8, r2
 800e766:	461f      	mov	r7, r3
 800e768:	d838      	bhi.n	800e7dc <__ssputs_r+0x84>
 800e76a:	898a      	ldrh	r2, [r1, #12]
 800e76c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e770:	d032      	beq.n	800e7d8 <__ssputs_r+0x80>
 800e772:	6825      	ldr	r5, [r4, #0]
 800e774:	6909      	ldr	r1, [r1, #16]
 800e776:	eba5 0901 	sub.w	r9, r5, r1
 800e77a:	6965      	ldr	r5, [r4, #20]
 800e77c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e784:	3301      	adds	r3, #1
 800e786:	444b      	add	r3, r9
 800e788:	106d      	asrs	r5, r5, #1
 800e78a:	429d      	cmp	r5, r3
 800e78c:	bf38      	it	cc
 800e78e:	461d      	movcc	r5, r3
 800e790:	0553      	lsls	r3, r2, #21
 800e792:	d531      	bpl.n	800e7f8 <__ssputs_r+0xa0>
 800e794:	4629      	mov	r1, r5
 800e796:	f7ff ff6b 	bl	800e670 <_malloc_r>
 800e79a:	4606      	mov	r6, r0
 800e79c:	b950      	cbnz	r0, 800e7b4 <__ssputs_r+0x5c>
 800e79e:	230c      	movs	r3, #12
 800e7a0:	f8ca 3000 	str.w	r3, [sl]
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7aa:	81a3      	strh	r3, [r4, #12]
 800e7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b4:	6921      	ldr	r1, [r4, #16]
 800e7b6:	464a      	mov	r2, r9
 800e7b8:	f7ff fa08 	bl	800dbcc <memcpy>
 800e7bc:	89a3      	ldrh	r3, [r4, #12]
 800e7be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	6126      	str	r6, [r4, #16]
 800e7ca:	6165      	str	r5, [r4, #20]
 800e7cc:	444e      	add	r6, r9
 800e7ce:	eba5 0509 	sub.w	r5, r5, r9
 800e7d2:	6026      	str	r6, [r4, #0]
 800e7d4:	60a5      	str	r5, [r4, #8]
 800e7d6:	463e      	mov	r6, r7
 800e7d8:	42be      	cmp	r6, r7
 800e7da:	d900      	bls.n	800e7de <__ssputs_r+0x86>
 800e7dc:	463e      	mov	r6, r7
 800e7de:	6820      	ldr	r0, [r4, #0]
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	4641      	mov	r1, r8
 800e7e4:	f000 ff4a 	bl	800f67c <memmove>
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	1b9b      	subs	r3, r3, r6
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	4433      	add	r3, r6
 800e7f2:	6023      	str	r3, [r4, #0]
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e7db      	b.n	800e7b0 <__ssputs_r+0x58>
 800e7f8:	462a      	mov	r2, r5
 800e7fa:	f000 ff65 	bl	800f6c8 <_realloc_r>
 800e7fe:	4606      	mov	r6, r0
 800e800:	2800      	cmp	r0, #0
 800e802:	d1e1      	bne.n	800e7c8 <__ssputs_r+0x70>
 800e804:	6921      	ldr	r1, [r4, #16]
 800e806:	4650      	mov	r0, sl
 800e808:	f7ff fec6 	bl	800e598 <_free_r>
 800e80c:	e7c7      	b.n	800e79e <__ssputs_r+0x46>
	...

0800e810 <_svfiprintf_r>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	4698      	mov	r8, r3
 800e816:	898b      	ldrh	r3, [r1, #12]
 800e818:	061b      	lsls	r3, r3, #24
 800e81a:	b09d      	sub	sp, #116	; 0x74
 800e81c:	4607      	mov	r7, r0
 800e81e:	460d      	mov	r5, r1
 800e820:	4614      	mov	r4, r2
 800e822:	d50e      	bpl.n	800e842 <_svfiprintf_r+0x32>
 800e824:	690b      	ldr	r3, [r1, #16]
 800e826:	b963      	cbnz	r3, 800e842 <_svfiprintf_r+0x32>
 800e828:	2140      	movs	r1, #64	; 0x40
 800e82a:	f7ff ff21 	bl	800e670 <_malloc_r>
 800e82e:	6028      	str	r0, [r5, #0]
 800e830:	6128      	str	r0, [r5, #16]
 800e832:	b920      	cbnz	r0, 800e83e <_svfiprintf_r+0x2e>
 800e834:	230c      	movs	r3, #12
 800e836:	603b      	str	r3, [r7, #0]
 800e838:	f04f 30ff 	mov.w	r0, #4294967295
 800e83c:	e0d1      	b.n	800e9e2 <_svfiprintf_r+0x1d2>
 800e83e:	2340      	movs	r3, #64	; 0x40
 800e840:	616b      	str	r3, [r5, #20]
 800e842:	2300      	movs	r3, #0
 800e844:	9309      	str	r3, [sp, #36]	; 0x24
 800e846:	2320      	movs	r3, #32
 800e848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e850:	2330      	movs	r3, #48	; 0x30
 800e852:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9fc <_svfiprintf_r+0x1ec>
 800e856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e85a:	f04f 0901 	mov.w	r9, #1
 800e85e:	4623      	mov	r3, r4
 800e860:	469a      	mov	sl, r3
 800e862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e866:	b10a      	cbz	r2, 800e86c <_svfiprintf_r+0x5c>
 800e868:	2a25      	cmp	r2, #37	; 0x25
 800e86a:	d1f9      	bne.n	800e860 <_svfiprintf_r+0x50>
 800e86c:	ebba 0b04 	subs.w	fp, sl, r4
 800e870:	d00b      	beq.n	800e88a <_svfiprintf_r+0x7a>
 800e872:	465b      	mov	r3, fp
 800e874:	4622      	mov	r2, r4
 800e876:	4629      	mov	r1, r5
 800e878:	4638      	mov	r0, r7
 800e87a:	f7ff ff6d 	bl	800e758 <__ssputs_r>
 800e87e:	3001      	adds	r0, #1
 800e880:	f000 80aa 	beq.w	800e9d8 <_svfiprintf_r+0x1c8>
 800e884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e886:	445a      	add	r2, fp
 800e888:	9209      	str	r2, [sp, #36]	; 0x24
 800e88a:	f89a 3000 	ldrb.w	r3, [sl]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f000 80a2 	beq.w	800e9d8 <_svfiprintf_r+0x1c8>
 800e894:	2300      	movs	r3, #0
 800e896:	f04f 32ff 	mov.w	r2, #4294967295
 800e89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e89e:	f10a 0a01 	add.w	sl, sl, #1
 800e8a2:	9304      	str	r3, [sp, #16]
 800e8a4:	9307      	str	r3, [sp, #28]
 800e8a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8aa:	931a      	str	r3, [sp, #104]	; 0x68
 800e8ac:	4654      	mov	r4, sl
 800e8ae:	2205      	movs	r2, #5
 800e8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b4:	4851      	ldr	r0, [pc, #324]	; (800e9fc <_svfiprintf_r+0x1ec>)
 800e8b6:	f7f1 fc93 	bl	80001e0 <memchr>
 800e8ba:	9a04      	ldr	r2, [sp, #16]
 800e8bc:	b9d8      	cbnz	r0, 800e8f6 <_svfiprintf_r+0xe6>
 800e8be:	06d0      	lsls	r0, r2, #27
 800e8c0:	bf44      	itt	mi
 800e8c2:	2320      	movmi	r3, #32
 800e8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8c8:	0711      	lsls	r1, r2, #28
 800e8ca:	bf44      	itt	mi
 800e8cc:	232b      	movmi	r3, #43	; 0x2b
 800e8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e8d8:	d015      	beq.n	800e906 <_svfiprintf_r+0xf6>
 800e8da:	9a07      	ldr	r2, [sp, #28]
 800e8dc:	4654      	mov	r4, sl
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f04f 0c0a 	mov.w	ip, #10
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8ea:	3b30      	subs	r3, #48	; 0x30
 800e8ec:	2b09      	cmp	r3, #9
 800e8ee:	d94e      	bls.n	800e98e <_svfiprintf_r+0x17e>
 800e8f0:	b1b0      	cbz	r0, 800e920 <_svfiprintf_r+0x110>
 800e8f2:	9207      	str	r2, [sp, #28]
 800e8f4:	e014      	b.n	800e920 <_svfiprintf_r+0x110>
 800e8f6:	eba0 0308 	sub.w	r3, r0, r8
 800e8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e8fe:	4313      	orrs	r3, r2
 800e900:	9304      	str	r3, [sp, #16]
 800e902:	46a2      	mov	sl, r4
 800e904:	e7d2      	b.n	800e8ac <_svfiprintf_r+0x9c>
 800e906:	9b03      	ldr	r3, [sp, #12]
 800e908:	1d19      	adds	r1, r3, #4
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	9103      	str	r1, [sp, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfbb      	ittet	lt
 800e912:	425b      	neglt	r3, r3
 800e914:	f042 0202 	orrlt.w	r2, r2, #2
 800e918:	9307      	strge	r3, [sp, #28]
 800e91a:	9307      	strlt	r3, [sp, #28]
 800e91c:	bfb8      	it	lt
 800e91e:	9204      	strlt	r2, [sp, #16]
 800e920:	7823      	ldrb	r3, [r4, #0]
 800e922:	2b2e      	cmp	r3, #46	; 0x2e
 800e924:	d10c      	bne.n	800e940 <_svfiprintf_r+0x130>
 800e926:	7863      	ldrb	r3, [r4, #1]
 800e928:	2b2a      	cmp	r3, #42	; 0x2a
 800e92a:	d135      	bne.n	800e998 <_svfiprintf_r+0x188>
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	1d1a      	adds	r2, r3, #4
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	9203      	str	r2, [sp, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	bfb8      	it	lt
 800e938:	f04f 33ff 	movlt.w	r3, #4294967295
 800e93c:	3402      	adds	r4, #2
 800e93e:	9305      	str	r3, [sp, #20]
 800e940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea0c <_svfiprintf_r+0x1fc>
 800e944:	7821      	ldrb	r1, [r4, #0]
 800e946:	2203      	movs	r2, #3
 800e948:	4650      	mov	r0, sl
 800e94a:	f7f1 fc49 	bl	80001e0 <memchr>
 800e94e:	b140      	cbz	r0, 800e962 <_svfiprintf_r+0x152>
 800e950:	2340      	movs	r3, #64	; 0x40
 800e952:	eba0 000a 	sub.w	r0, r0, sl
 800e956:	fa03 f000 	lsl.w	r0, r3, r0
 800e95a:	9b04      	ldr	r3, [sp, #16]
 800e95c:	4303      	orrs	r3, r0
 800e95e:	3401      	adds	r4, #1
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e966:	4826      	ldr	r0, [pc, #152]	; (800ea00 <_svfiprintf_r+0x1f0>)
 800e968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e96c:	2206      	movs	r2, #6
 800e96e:	f7f1 fc37 	bl	80001e0 <memchr>
 800e972:	2800      	cmp	r0, #0
 800e974:	d038      	beq.n	800e9e8 <_svfiprintf_r+0x1d8>
 800e976:	4b23      	ldr	r3, [pc, #140]	; (800ea04 <_svfiprintf_r+0x1f4>)
 800e978:	bb1b      	cbnz	r3, 800e9c2 <_svfiprintf_r+0x1b2>
 800e97a:	9b03      	ldr	r3, [sp, #12]
 800e97c:	3307      	adds	r3, #7
 800e97e:	f023 0307 	bic.w	r3, r3, #7
 800e982:	3308      	adds	r3, #8
 800e984:	9303      	str	r3, [sp, #12]
 800e986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e988:	4433      	add	r3, r6
 800e98a:	9309      	str	r3, [sp, #36]	; 0x24
 800e98c:	e767      	b.n	800e85e <_svfiprintf_r+0x4e>
 800e98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e992:	460c      	mov	r4, r1
 800e994:	2001      	movs	r0, #1
 800e996:	e7a5      	b.n	800e8e4 <_svfiprintf_r+0xd4>
 800e998:	2300      	movs	r3, #0
 800e99a:	3401      	adds	r4, #1
 800e99c:	9305      	str	r3, [sp, #20]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	f04f 0c0a 	mov.w	ip, #10
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9aa:	3a30      	subs	r2, #48	; 0x30
 800e9ac:	2a09      	cmp	r2, #9
 800e9ae:	d903      	bls.n	800e9b8 <_svfiprintf_r+0x1a8>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d0c5      	beq.n	800e940 <_svfiprintf_r+0x130>
 800e9b4:	9105      	str	r1, [sp, #20]
 800e9b6:	e7c3      	b.n	800e940 <_svfiprintf_r+0x130>
 800e9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9bc:	4604      	mov	r4, r0
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e7f0      	b.n	800e9a4 <_svfiprintf_r+0x194>
 800e9c2:	ab03      	add	r3, sp, #12
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	462a      	mov	r2, r5
 800e9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <_svfiprintf_r+0x1f8>)
 800e9ca:	a904      	add	r1, sp, #16
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7fb fe01 	bl	800a5d4 <_printf_float>
 800e9d2:	1c42      	adds	r2, r0, #1
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	d1d6      	bne.n	800e986 <_svfiprintf_r+0x176>
 800e9d8:	89ab      	ldrh	r3, [r5, #12]
 800e9da:	065b      	lsls	r3, r3, #25
 800e9dc:	f53f af2c 	bmi.w	800e838 <_svfiprintf_r+0x28>
 800e9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9e2:	b01d      	add	sp, #116	; 0x74
 800e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e8:	ab03      	add	r3, sp, #12
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	462a      	mov	r2, r5
 800e9ee:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <_svfiprintf_r+0x1f8>)
 800e9f0:	a904      	add	r1, sp, #16
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	f7fc f892 	bl	800ab1c <_printf_i>
 800e9f8:	e7eb      	b.n	800e9d2 <_svfiprintf_r+0x1c2>
 800e9fa:	bf00      	nop
 800e9fc:	0801028c 	.word	0x0801028c
 800ea00:	08010296 	.word	0x08010296
 800ea04:	0800a5d5 	.word	0x0800a5d5
 800ea08:	0800e759 	.word	0x0800e759
 800ea0c:	08010292 	.word	0x08010292

0800ea10 <_sungetc_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	1c4b      	adds	r3, r1, #1
 800ea14:	4614      	mov	r4, r2
 800ea16:	d103      	bne.n	800ea20 <_sungetc_r+0x10>
 800ea18:	f04f 35ff 	mov.w	r5, #4294967295
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	bd38      	pop	{r3, r4, r5, pc}
 800ea20:	8993      	ldrh	r3, [r2, #12]
 800ea22:	f023 0320 	bic.w	r3, r3, #32
 800ea26:	8193      	strh	r3, [r2, #12]
 800ea28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea2a:	6852      	ldr	r2, [r2, #4]
 800ea2c:	b2cd      	uxtb	r5, r1
 800ea2e:	b18b      	cbz	r3, 800ea54 <_sungetc_r+0x44>
 800ea30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea32:	4293      	cmp	r3, r2
 800ea34:	dd08      	ble.n	800ea48 <_sungetc_r+0x38>
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	1e5a      	subs	r2, r3, #1
 800ea3a:	6022      	str	r2, [r4, #0]
 800ea3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	3301      	adds	r3, #1
 800ea44:	6063      	str	r3, [r4, #4]
 800ea46:	e7e9      	b.n	800ea1c <_sungetc_r+0xc>
 800ea48:	4621      	mov	r1, r4
 800ea4a:	f000 fd7d 	bl	800f548 <__submore>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d0f1      	beq.n	800ea36 <_sungetc_r+0x26>
 800ea52:	e7e1      	b.n	800ea18 <_sungetc_r+0x8>
 800ea54:	6921      	ldr	r1, [r4, #16]
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	b151      	cbz	r1, 800ea70 <_sungetc_r+0x60>
 800ea5a:	4299      	cmp	r1, r3
 800ea5c:	d208      	bcs.n	800ea70 <_sungetc_r+0x60>
 800ea5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ea62:	42a9      	cmp	r1, r5
 800ea64:	d104      	bne.n	800ea70 <_sungetc_r+0x60>
 800ea66:	3b01      	subs	r3, #1
 800ea68:	3201      	adds	r2, #1
 800ea6a:	6023      	str	r3, [r4, #0]
 800ea6c:	6062      	str	r2, [r4, #4]
 800ea6e:	e7d5      	b.n	800ea1c <_sungetc_r+0xc>
 800ea70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ea74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea78:	6363      	str	r3, [r4, #52]	; 0x34
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ea7e:	4623      	mov	r3, r4
 800ea80:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	2301      	movs	r3, #1
 800ea88:	e7dc      	b.n	800ea44 <_sungetc_r+0x34>

0800ea8a <__ssrefill_r>:
 800ea8a:	b510      	push	{r4, lr}
 800ea8c:	460c      	mov	r4, r1
 800ea8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ea90:	b169      	cbz	r1, 800eaae <__ssrefill_r+0x24>
 800ea92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea96:	4299      	cmp	r1, r3
 800ea98:	d001      	beq.n	800ea9e <__ssrefill_r+0x14>
 800ea9a:	f7ff fd7d 	bl	800e598 <_free_r>
 800ea9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaa0:	6063      	str	r3, [r4, #4]
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	6360      	str	r0, [r4, #52]	; 0x34
 800eaa6:	b113      	cbz	r3, 800eaae <__ssrefill_r+0x24>
 800eaa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eaaa:	6023      	str	r3, [r4, #0]
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	6923      	ldr	r3, [r4, #16]
 800eab0:	6023      	str	r3, [r4, #0]
 800eab2:	2300      	movs	r3, #0
 800eab4:	6063      	str	r3, [r4, #4]
 800eab6:	89a3      	ldrh	r3, [r4, #12]
 800eab8:	f043 0320 	orr.w	r3, r3, #32
 800eabc:	81a3      	strh	r3, [r4, #12]
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295
 800eac2:	e7f3      	b.n	800eaac <__ssrefill_r+0x22>

0800eac4 <__ssvfiscanf_r>:
 800eac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac8:	460c      	mov	r4, r1
 800eaca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800eace:	2100      	movs	r1, #0
 800ead0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ead4:	49a6      	ldr	r1, [pc, #664]	; (800ed70 <__ssvfiscanf_r+0x2ac>)
 800ead6:	91a0      	str	r1, [sp, #640]	; 0x280
 800ead8:	f10d 0804 	add.w	r8, sp, #4
 800eadc:	49a5      	ldr	r1, [pc, #660]	; (800ed74 <__ssvfiscanf_r+0x2b0>)
 800eade:	4fa6      	ldr	r7, [pc, #664]	; (800ed78 <__ssvfiscanf_r+0x2b4>)
 800eae0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ed7c <__ssvfiscanf_r+0x2b8>
 800eae4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800eae8:	4606      	mov	r6, r0
 800eaea:	91a1      	str	r1, [sp, #644]	; 0x284
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	7813      	ldrb	r3, [r2, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 815a 	beq.w	800edaa <__ssvfiscanf_r+0x2e6>
 800eaf6:	5dd9      	ldrb	r1, [r3, r7]
 800eaf8:	f011 0108 	ands.w	r1, r1, #8
 800eafc:	f102 0501 	add.w	r5, r2, #1
 800eb00:	d019      	beq.n	800eb36 <__ssvfiscanf_r+0x72>
 800eb02:	6863      	ldr	r3, [r4, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	dd0f      	ble.n	800eb28 <__ssvfiscanf_r+0x64>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	781a      	ldrb	r2, [r3, #0]
 800eb0c:	5cba      	ldrb	r2, [r7, r2]
 800eb0e:	0712      	lsls	r2, r2, #28
 800eb10:	d401      	bmi.n	800eb16 <__ssvfiscanf_r+0x52>
 800eb12:	462a      	mov	r2, r5
 800eb14:	e7eb      	b.n	800eaee <__ssvfiscanf_r+0x2a>
 800eb16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eb18:	3201      	adds	r2, #1
 800eb1a:	9245      	str	r2, [sp, #276]	; 0x114
 800eb1c:	6862      	ldr	r2, [r4, #4]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	3a01      	subs	r2, #1
 800eb22:	6062      	str	r2, [r4, #4]
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	e7ec      	b.n	800eb02 <__ssvfiscanf_r+0x3e>
 800eb28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4798      	blx	r3
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d0e9      	beq.n	800eb08 <__ssvfiscanf_r+0x44>
 800eb34:	e7ed      	b.n	800eb12 <__ssvfiscanf_r+0x4e>
 800eb36:	2b25      	cmp	r3, #37	; 0x25
 800eb38:	d012      	beq.n	800eb60 <__ssvfiscanf_r+0x9c>
 800eb3a:	469a      	mov	sl, r3
 800eb3c:	6863      	ldr	r3, [r4, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f340 8091 	ble.w	800ec66 <__ssvfiscanf_r+0x1a2>
 800eb44:	6822      	ldr	r2, [r4, #0]
 800eb46:	7813      	ldrb	r3, [r2, #0]
 800eb48:	4553      	cmp	r3, sl
 800eb4a:	f040 812e 	bne.w	800edaa <__ssvfiscanf_r+0x2e6>
 800eb4e:	6863      	ldr	r3, [r4, #4]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	6063      	str	r3, [r4, #4]
 800eb54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800eb56:	3201      	adds	r2, #1
 800eb58:	3301      	adds	r3, #1
 800eb5a:	6022      	str	r2, [r4, #0]
 800eb5c:	9345      	str	r3, [sp, #276]	; 0x114
 800eb5e:	e7d8      	b.n	800eb12 <__ssvfiscanf_r+0x4e>
 800eb60:	9141      	str	r1, [sp, #260]	; 0x104
 800eb62:	9143      	str	r1, [sp, #268]	; 0x10c
 800eb64:	7853      	ldrb	r3, [r2, #1]
 800eb66:	2b2a      	cmp	r3, #42	; 0x2a
 800eb68:	bf02      	ittt	eq
 800eb6a:	2310      	moveq	r3, #16
 800eb6c:	1c95      	addeq	r5, r2, #2
 800eb6e:	9341      	streq	r3, [sp, #260]	; 0x104
 800eb70:	220a      	movs	r2, #10
 800eb72:	46aa      	mov	sl, r5
 800eb74:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800eb78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800eb7c:	2b09      	cmp	r3, #9
 800eb7e:	d91d      	bls.n	800ebbc <__ssvfiscanf_r+0xf8>
 800eb80:	487e      	ldr	r0, [pc, #504]	; (800ed7c <__ssvfiscanf_r+0x2b8>)
 800eb82:	2203      	movs	r2, #3
 800eb84:	f7f1 fb2c 	bl	80001e0 <memchr>
 800eb88:	b140      	cbz	r0, 800eb9c <__ssvfiscanf_r+0xd8>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	eba0 0009 	sub.w	r0, r0, r9
 800eb90:	fa03 f000 	lsl.w	r0, r3, r0
 800eb94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eb96:	4318      	orrs	r0, r3
 800eb98:	9041      	str	r0, [sp, #260]	; 0x104
 800eb9a:	4655      	mov	r5, sl
 800eb9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eba0:	2b78      	cmp	r3, #120	; 0x78
 800eba2:	d806      	bhi.n	800ebb2 <__ssvfiscanf_r+0xee>
 800eba4:	2b57      	cmp	r3, #87	; 0x57
 800eba6:	d810      	bhi.n	800ebca <__ssvfiscanf_r+0x106>
 800eba8:	2b25      	cmp	r3, #37	; 0x25
 800ebaa:	d0c6      	beq.n	800eb3a <__ssvfiscanf_r+0x76>
 800ebac:	d856      	bhi.n	800ec5c <__ssvfiscanf_r+0x198>
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d064      	beq.n	800ec7c <__ssvfiscanf_r+0x1b8>
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	9347      	str	r3, [sp, #284]	; 0x11c
 800ebb6:	230a      	movs	r3, #10
 800ebb8:	9342      	str	r3, [sp, #264]	; 0x108
 800ebba:	e071      	b.n	800eca0 <__ssvfiscanf_r+0x1dc>
 800ebbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ebbe:	fb02 1103 	mla	r1, r2, r3, r1
 800ebc2:	3930      	subs	r1, #48	; 0x30
 800ebc4:	9143      	str	r1, [sp, #268]	; 0x10c
 800ebc6:	4655      	mov	r5, sl
 800ebc8:	e7d3      	b.n	800eb72 <__ssvfiscanf_r+0xae>
 800ebca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ebce:	2a20      	cmp	r2, #32
 800ebd0:	d8ef      	bhi.n	800ebb2 <__ssvfiscanf_r+0xee>
 800ebd2:	a101      	add	r1, pc, #4	; (adr r1, 800ebd8 <__ssvfiscanf_r+0x114>)
 800ebd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ebd8:	0800ec8b 	.word	0x0800ec8b
 800ebdc:	0800ebb3 	.word	0x0800ebb3
 800ebe0:	0800ebb3 	.word	0x0800ebb3
 800ebe4:	0800ece9 	.word	0x0800ece9
 800ebe8:	0800ebb3 	.word	0x0800ebb3
 800ebec:	0800ebb3 	.word	0x0800ebb3
 800ebf0:	0800ebb3 	.word	0x0800ebb3
 800ebf4:	0800ebb3 	.word	0x0800ebb3
 800ebf8:	0800ebb3 	.word	0x0800ebb3
 800ebfc:	0800ebb3 	.word	0x0800ebb3
 800ec00:	0800ebb3 	.word	0x0800ebb3
 800ec04:	0800ecff 	.word	0x0800ecff
 800ec08:	0800ecd5 	.word	0x0800ecd5
 800ec0c:	0800ec63 	.word	0x0800ec63
 800ec10:	0800ec63 	.word	0x0800ec63
 800ec14:	0800ec63 	.word	0x0800ec63
 800ec18:	0800ebb3 	.word	0x0800ebb3
 800ec1c:	0800ecd9 	.word	0x0800ecd9
 800ec20:	0800ebb3 	.word	0x0800ebb3
 800ec24:	0800ebb3 	.word	0x0800ebb3
 800ec28:	0800ebb3 	.word	0x0800ebb3
 800ec2c:	0800ebb3 	.word	0x0800ebb3
 800ec30:	0800ed0f 	.word	0x0800ed0f
 800ec34:	0800ece1 	.word	0x0800ece1
 800ec38:	0800ec83 	.word	0x0800ec83
 800ec3c:	0800ebb3 	.word	0x0800ebb3
 800ec40:	0800ebb3 	.word	0x0800ebb3
 800ec44:	0800ed0b 	.word	0x0800ed0b
 800ec48:	0800ebb3 	.word	0x0800ebb3
 800ec4c:	0800ecd5 	.word	0x0800ecd5
 800ec50:	0800ebb3 	.word	0x0800ebb3
 800ec54:	0800ebb3 	.word	0x0800ebb3
 800ec58:	0800ec8b 	.word	0x0800ec8b
 800ec5c:	3b45      	subs	r3, #69	; 0x45
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d8a7      	bhi.n	800ebb2 <__ssvfiscanf_r+0xee>
 800ec62:	2305      	movs	r3, #5
 800ec64:	e01b      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ec66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	4798      	blx	r3
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f43f af68 	beq.w	800eb44 <__ssvfiscanf_r+0x80>
 800ec74:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f040 808d 	bne.w	800ed96 <__ssvfiscanf_r+0x2d2>
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec80:	e08f      	b.n	800eda2 <__ssvfiscanf_r+0x2de>
 800ec82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ec84:	f042 0220 	orr.w	r2, r2, #32
 800ec88:	9241      	str	r2, [sp, #260]	; 0x104
 800ec8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ec8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec90:	9241      	str	r2, [sp, #260]	; 0x104
 800ec92:	2210      	movs	r2, #16
 800ec94:	2b6f      	cmp	r3, #111	; 0x6f
 800ec96:	9242      	str	r2, [sp, #264]	; 0x108
 800ec98:	bf34      	ite	cc
 800ec9a:	2303      	movcc	r3, #3
 800ec9c:	2304      	movcs	r3, #4
 800ec9e:	9347      	str	r3, [sp, #284]	; 0x11c
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd42      	ble.n	800ed2c <__ssvfiscanf_r+0x268>
 800eca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eca8:	0659      	lsls	r1, r3, #25
 800ecaa:	d404      	bmi.n	800ecb6 <__ssvfiscanf_r+0x1f2>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	781a      	ldrb	r2, [r3, #0]
 800ecb0:	5cba      	ldrb	r2, [r7, r2]
 800ecb2:	0712      	lsls	r2, r2, #28
 800ecb4:	d441      	bmi.n	800ed3a <__ssvfiscanf_r+0x276>
 800ecb6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	dc50      	bgt.n	800ed5e <__ssvfiscanf_r+0x29a>
 800ecbc:	466b      	mov	r3, sp
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	a941      	add	r1, sp, #260	; 0x104
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f000 f9d0 	bl	800f068 <_scanf_chars>
 800ecc8:	2801      	cmp	r0, #1
 800ecca:	d06e      	beq.n	800edaa <__ssvfiscanf_r+0x2e6>
 800eccc:	2802      	cmp	r0, #2
 800ecce:	f47f af20 	bne.w	800eb12 <__ssvfiscanf_r+0x4e>
 800ecd2:	e7cf      	b.n	800ec74 <__ssvfiscanf_r+0x1b0>
 800ecd4:	220a      	movs	r2, #10
 800ecd6:	e7dd      	b.n	800ec94 <__ssvfiscanf_r+0x1d0>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9342      	str	r3, [sp, #264]	; 0x108
 800ecdc:	2303      	movs	r3, #3
 800ecde:	e7de      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ece0:	2308      	movs	r3, #8
 800ece2:	9342      	str	r3, [sp, #264]	; 0x108
 800ece4:	2304      	movs	r3, #4
 800ece6:	e7da      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ece8:	4629      	mov	r1, r5
 800ecea:	4640      	mov	r0, r8
 800ecec:	f000 fb80 	bl	800f3f0 <__sccl>
 800ecf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ecf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf6:	9341      	str	r3, [sp, #260]	; 0x104
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e7cf      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ecfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ed00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed04:	9341      	str	r3, [sp, #260]	; 0x104
 800ed06:	2300      	movs	r3, #0
 800ed08:	e7c9      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	e7c7      	b.n	800ec9e <__ssvfiscanf_r+0x1da>
 800ed0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ed10:	06c3      	lsls	r3, r0, #27
 800ed12:	f53f aefe 	bmi.w	800eb12 <__ssvfiscanf_r+0x4e>
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ed1a:	1d19      	adds	r1, r3, #4
 800ed1c:	9100      	str	r1, [sp, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f010 0f01 	tst.w	r0, #1
 800ed24:	bf14      	ite	ne
 800ed26:	801a      	strhne	r2, [r3, #0]
 800ed28:	601a      	streq	r2, [r3, #0]
 800ed2a:	e6f2      	b.n	800eb12 <__ssvfiscanf_r+0x4e>
 800ed2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4630      	mov	r0, r6
 800ed32:	4798      	blx	r3
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d0b6      	beq.n	800eca6 <__ssvfiscanf_r+0x1e2>
 800ed38:	e79c      	b.n	800ec74 <__ssvfiscanf_r+0x1b0>
 800ed3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ed3c:	3201      	adds	r2, #1
 800ed3e:	9245      	str	r2, [sp, #276]	; 0x114
 800ed40:	6862      	ldr	r2, [r4, #4]
 800ed42:	3a01      	subs	r2, #1
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	6062      	str	r2, [r4, #4]
 800ed48:	dd02      	ble.n	800ed50 <__ssvfiscanf_r+0x28c>
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	e7ad      	b.n	800ecac <__ssvfiscanf_r+0x1e8>
 800ed50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed52:	4621      	mov	r1, r4
 800ed54:	4630      	mov	r0, r6
 800ed56:	4798      	blx	r3
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d0a7      	beq.n	800ecac <__ssvfiscanf_r+0x1e8>
 800ed5c:	e78a      	b.n	800ec74 <__ssvfiscanf_r+0x1b0>
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	dc0e      	bgt.n	800ed80 <__ssvfiscanf_r+0x2bc>
 800ed62:	466b      	mov	r3, sp
 800ed64:	4622      	mov	r2, r4
 800ed66:	a941      	add	r1, sp, #260	; 0x104
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f000 f9d7 	bl	800f11c <_scanf_i>
 800ed6e:	e7ab      	b.n	800ecc8 <__ssvfiscanf_r+0x204>
 800ed70:	0800ea11 	.word	0x0800ea11
 800ed74:	0800ea8b 	.word	0x0800ea8b
 800ed78:	0800fec1 	.word	0x0800fec1
 800ed7c:	08010292 	.word	0x08010292
 800ed80:	4b0b      	ldr	r3, [pc, #44]	; (800edb0 <__ssvfiscanf_r+0x2ec>)
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f43f aec5 	beq.w	800eb12 <__ssvfiscanf_r+0x4e>
 800ed88:	466b      	mov	r3, sp
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	a941      	add	r1, sp, #260	; 0x104
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7fb ffea 	bl	800ad68 <_scanf_float>
 800ed94:	e798      	b.n	800ecc8 <__ssvfiscanf_r+0x204>
 800ed96:	89a3      	ldrh	r3, [r4, #12]
 800ed98:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ed9c:	bf18      	it	ne
 800ed9e:	f04f 30ff 	movne.w	r0, #4294967295
 800eda2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800edac:	e7f9      	b.n	800eda2 <__ssvfiscanf_r+0x2de>
 800edae:	bf00      	nop
 800edb0:	0800ad69 	.word	0x0800ad69

0800edb4 <__sfputc_r>:
 800edb4:	6893      	ldr	r3, [r2, #8]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	b410      	push	{r4}
 800edbc:	6093      	str	r3, [r2, #8]
 800edbe:	da08      	bge.n	800edd2 <__sfputc_r+0x1e>
 800edc0:	6994      	ldr	r4, [r2, #24]
 800edc2:	42a3      	cmp	r3, r4
 800edc4:	db01      	blt.n	800edca <__sfputc_r+0x16>
 800edc6:	290a      	cmp	r1, #10
 800edc8:	d103      	bne.n	800edd2 <__sfputc_r+0x1e>
 800edca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edce:	f7fd b9df 	b.w	800c190 <__swbuf_r>
 800edd2:	6813      	ldr	r3, [r2, #0]
 800edd4:	1c58      	adds	r0, r3, #1
 800edd6:	6010      	str	r0, [r2, #0]
 800edd8:	7019      	strb	r1, [r3, #0]
 800edda:	4608      	mov	r0, r1
 800eddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <__sfputs_r>:
 800ede2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede4:	4606      	mov	r6, r0
 800ede6:	460f      	mov	r7, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	18d5      	adds	r5, r2, r3
 800edec:	42ac      	cmp	r4, r5
 800edee:	d101      	bne.n	800edf4 <__sfputs_r+0x12>
 800edf0:	2000      	movs	r0, #0
 800edf2:	e007      	b.n	800ee04 <__sfputs_r+0x22>
 800edf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edf8:	463a      	mov	r2, r7
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff ffda 	bl	800edb4 <__sfputc_r>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d1f3      	bne.n	800edec <__sfputs_r+0xa>
 800ee04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee08 <_vfiprintf_r>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	460d      	mov	r5, r1
 800ee0e:	b09d      	sub	sp, #116	; 0x74
 800ee10:	4614      	mov	r4, r2
 800ee12:	4698      	mov	r8, r3
 800ee14:	4606      	mov	r6, r0
 800ee16:	b118      	cbz	r0, 800ee20 <_vfiprintf_r+0x18>
 800ee18:	6983      	ldr	r3, [r0, #24]
 800ee1a:	b90b      	cbnz	r3, 800ee20 <_vfiprintf_r+0x18>
 800ee1c:	f7fe fa30 	bl	800d280 <__sinit>
 800ee20:	4b89      	ldr	r3, [pc, #548]	; (800f048 <_vfiprintf_r+0x240>)
 800ee22:	429d      	cmp	r5, r3
 800ee24:	d11b      	bne.n	800ee5e <_vfiprintf_r+0x56>
 800ee26:	6875      	ldr	r5, [r6, #4]
 800ee28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee2a:	07d9      	lsls	r1, r3, #31
 800ee2c:	d405      	bmi.n	800ee3a <_vfiprintf_r+0x32>
 800ee2e:	89ab      	ldrh	r3, [r5, #12]
 800ee30:	059a      	lsls	r2, r3, #22
 800ee32:	d402      	bmi.n	800ee3a <_vfiprintf_r+0x32>
 800ee34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee36:	f7fe fe34 	bl	800daa2 <__retarget_lock_acquire_recursive>
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	071b      	lsls	r3, r3, #28
 800ee3e:	d501      	bpl.n	800ee44 <_vfiprintf_r+0x3c>
 800ee40:	692b      	ldr	r3, [r5, #16]
 800ee42:	b9eb      	cbnz	r3, 800ee80 <_vfiprintf_r+0x78>
 800ee44:	4629      	mov	r1, r5
 800ee46:	4630      	mov	r0, r6
 800ee48:	f7fd fa06 	bl	800c258 <__swsetup_r>
 800ee4c:	b1c0      	cbz	r0, 800ee80 <_vfiprintf_r+0x78>
 800ee4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee50:	07dc      	lsls	r4, r3, #31
 800ee52:	d50e      	bpl.n	800ee72 <_vfiprintf_r+0x6a>
 800ee54:	f04f 30ff 	mov.w	r0, #4294967295
 800ee58:	b01d      	add	sp, #116	; 0x74
 800ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5e:	4b7b      	ldr	r3, [pc, #492]	; (800f04c <_vfiprintf_r+0x244>)
 800ee60:	429d      	cmp	r5, r3
 800ee62:	d101      	bne.n	800ee68 <_vfiprintf_r+0x60>
 800ee64:	68b5      	ldr	r5, [r6, #8]
 800ee66:	e7df      	b.n	800ee28 <_vfiprintf_r+0x20>
 800ee68:	4b79      	ldr	r3, [pc, #484]	; (800f050 <_vfiprintf_r+0x248>)
 800ee6a:	429d      	cmp	r5, r3
 800ee6c:	bf08      	it	eq
 800ee6e:	68f5      	ldreq	r5, [r6, #12]
 800ee70:	e7da      	b.n	800ee28 <_vfiprintf_r+0x20>
 800ee72:	89ab      	ldrh	r3, [r5, #12]
 800ee74:	0598      	lsls	r0, r3, #22
 800ee76:	d4ed      	bmi.n	800ee54 <_vfiprintf_r+0x4c>
 800ee78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee7a:	f7fe fe13 	bl	800daa4 <__retarget_lock_release_recursive>
 800ee7e:	e7e9      	b.n	800ee54 <_vfiprintf_r+0x4c>
 800ee80:	2300      	movs	r3, #0
 800ee82:	9309      	str	r3, [sp, #36]	; 0x24
 800ee84:	2320      	movs	r3, #32
 800ee86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee8e:	2330      	movs	r3, #48	; 0x30
 800ee90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f054 <_vfiprintf_r+0x24c>
 800ee94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee98:	f04f 0901 	mov.w	r9, #1
 800ee9c:	4623      	mov	r3, r4
 800ee9e:	469a      	mov	sl, r3
 800eea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea4:	b10a      	cbz	r2, 800eeaa <_vfiprintf_r+0xa2>
 800eea6:	2a25      	cmp	r2, #37	; 0x25
 800eea8:	d1f9      	bne.n	800ee9e <_vfiprintf_r+0x96>
 800eeaa:	ebba 0b04 	subs.w	fp, sl, r4
 800eeae:	d00b      	beq.n	800eec8 <_vfiprintf_r+0xc0>
 800eeb0:	465b      	mov	r3, fp
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7ff ff93 	bl	800ede2 <__sfputs_r>
 800eebc:	3001      	adds	r0, #1
 800eebe:	f000 80aa 	beq.w	800f016 <_vfiprintf_r+0x20e>
 800eec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eec4:	445a      	add	r2, fp
 800eec6:	9209      	str	r2, [sp, #36]	; 0x24
 800eec8:	f89a 3000 	ldrb.w	r3, [sl]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f000 80a2 	beq.w	800f016 <_vfiprintf_r+0x20e>
 800eed2:	2300      	movs	r3, #0
 800eed4:	f04f 32ff 	mov.w	r2, #4294967295
 800eed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eedc:	f10a 0a01 	add.w	sl, sl, #1
 800eee0:	9304      	str	r3, [sp, #16]
 800eee2:	9307      	str	r3, [sp, #28]
 800eee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eee8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeea:	4654      	mov	r4, sl
 800eeec:	2205      	movs	r2, #5
 800eeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef2:	4858      	ldr	r0, [pc, #352]	; (800f054 <_vfiprintf_r+0x24c>)
 800eef4:	f7f1 f974 	bl	80001e0 <memchr>
 800eef8:	9a04      	ldr	r2, [sp, #16]
 800eefa:	b9d8      	cbnz	r0, 800ef34 <_vfiprintf_r+0x12c>
 800eefc:	06d1      	lsls	r1, r2, #27
 800eefe:	bf44      	itt	mi
 800ef00:	2320      	movmi	r3, #32
 800ef02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef06:	0713      	lsls	r3, r2, #28
 800ef08:	bf44      	itt	mi
 800ef0a:	232b      	movmi	r3, #43	; 0x2b
 800ef0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef10:	f89a 3000 	ldrb.w	r3, [sl]
 800ef14:	2b2a      	cmp	r3, #42	; 0x2a
 800ef16:	d015      	beq.n	800ef44 <_vfiprintf_r+0x13c>
 800ef18:	9a07      	ldr	r2, [sp, #28]
 800ef1a:	4654      	mov	r4, sl
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	f04f 0c0a 	mov.w	ip, #10
 800ef22:	4621      	mov	r1, r4
 800ef24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef28:	3b30      	subs	r3, #48	; 0x30
 800ef2a:	2b09      	cmp	r3, #9
 800ef2c:	d94e      	bls.n	800efcc <_vfiprintf_r+0x1c4>
 800ef2e:	b1b0      	cbz	r0, 800ef5e <_vfiprintf_r+0x156>
 800ef30:	9207      	str	r2, [sp, #28]
 800ef32:	e014      	b.n	800ef5e <_vfiprintf_r+0x156>
 800ef34:	eba0 0308 	sub.w	r3, r0, r8
 800ef38:	fa09 f303 	lsl.w	r3, r9, r3
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	9304      	str	r3, [sp, #16]
 800ef40:	46a2      	mov	sl, r4
 800ef42:	e7d2      	b.n	800eeea <_vfiprintf_r+0xe2>
 800ef44:	9b03      	ldr	r3, [sp, #12]
 800ef46:	1d19      	adds	r1, r3, #4
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	9103      	str	r1, [sp, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	bfbb      	ittet	lt
 800ef50:	425b      	neglt	r3, r3
 800ef52:	f042 0202 	orrlt.w	r2, r2, #2
 800ef56:	9307      	strge	r3, [sp, #28]
 800ef58:	9307      	strlt	r3, [sp, #28]
 800ef5a:	bfb8      	it	lt
 800ef5c:	9204      	strlt	r2, [sp, #16]
 800ef5e:	7823      	ldrb	r3, [r4, #0]
 800ef60:	2b2e      	cmp	r3, #46	; 0x2e
 800ef62:	d10c      	bne.n	800ef7e <_vfiprintf_r+0x176>
 800ef64:	7863      	ldrb	r3, [r4, #1]
 800ef66:	2b2a      	cmp	r3, #42	; 0x2a
 800ef68:	d135      	bne.n	800efd6 <_vfiprintf_r+0x1ce>
 800ef6a:	9b03      	ldr	r3, [sp, #12]
 800ef6c:	1d1a      	adds	r2, r3, #4
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	9203      	str	r2, [sp, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	bfb8      	it	lt
 800ef76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef7a:	3402      	adds	r4, #2
 800ef7c:	9305      	str	r3, [sp, #20]
 800ef7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f064 <_vfiprintf_r+0x25c>
 800ef82:	7821      	ldrb	r1, [r4, #0]
 800ef84:	2203      	movs	r2, #3
 800ef86:	4650      	mov	r0, sl
 800ef88:	f7f1 f92a 	bl	80001e0 <memchr>
 800ef8c:	b140      	cbz	r0, 800efa0 <_vfiprintf_r+0x198>
 800ef8e:	2340      	movs	r3, #64	; 0x40
 800ef90:	eba0 000a 	sub.w	r0, r0, sl
 800ef94:	fa03 f000 	lsl.w	r0, r3, r0
 800ef98:	9b04      	ldr	r3, [sp, #16]
 800ef9a:	4303      	orrs	r3, r0
 800ef9c:	3401      	adds	r4, #1
 800ef9e:	9304      	str	r3, [sp, #16]
 800efa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa4:	482c      	ldr	r0, [pc, #176]	; (800f058 <_vfiprintf_r+0x250>)
 800efa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efaa:	2206      	movs	r2, #6
 800efac:	f7f1 f918 	bl	80001e0 <memchr>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d03f      	beq.n	800f034 <_vfiprintf_r+0x22c>
 800efb4:	4b29      	ldr	r3, [pc, #164]	; (800f05c <_vfiprintf_r+0x254>)
 800efb6:	bb1b      	cbnz	r3, 800f000 <_vfiprintf_r+0x1f8>
 800efb8:	9b03      	ldr	r3, [sp, #12]
 800efba:	3307      	adds	r3, #7
 800efbc:	f023 0307 	bic.w	r3, r3, #7
 800efc0:	3308      	adds	r3, #8
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc6:	443b      	add	r3, r7
 800efc8:	9309      	str	r3, [sp, #36]	; 0x24
 800efca:	e767      	b.n	800ee9c <_vfiprintf_r+0x94>
 800efcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800efd0:	460c      	mov	r4, r1
 800efd2:	2001      	movs	r0, #1
 800efd4:	e7a5      	b.n	800ef22 <_vfiprintf_r+0x11a>
 800efd6:	2300      	movs	r3, #0
 800efd8:	3401      	adds	r4, #1
 800efda:	9305      	str	r3, [sp, #20]
 800efdc:	4619      	mov	r1, r3
 800efde:	f04f 0c0a 	mov.w	ip, #10
 800efe2:	4620      	mov	r0, r4
 800efe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efe8:	3a30      	subs	r2, #48	; 0x30
 800efea:	2a09      	cmp	r2, #9
 800efec:	d903      	bls.n	800eff6 <_vfiprintf_r+0x1ee>
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0c5      	beq.n	800ef7e <_vfiprintf_r+0x176>
 800eff2:	9105      	str	r1, [sp, #20]
 800eff4:	e7c3      	b.n	800ef7e <_vfiprintf_r+0x176>
 800eff6:	fb0c 2101 	mla	r1, ip, r1, r2
 800effa:	4604      	mov	r4, r0
 800effc:	2301      	movs	r3, #1
 800effe:	e7f0      	b.n	800efe2 <_vfiprintf_r+0x1da>
 800f000:	ab03      	add	r3, sp, #12
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	462a      	mov	r2, r5
 800f006:	4b16      	ldr	r3, [pc, #88]	; (800f060 <_vfiprintf_r+0x258>)
 800f008:	a904      	add	r1, sp, #16
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7fb fae2 	bl	800a5d4 <_printf_float>
 800f010:	4607      	mov	r7, r0
 800f012:	1c78      	adds	r0, r7, #1
 800f014:	d1d6      	bne.n	800efc4 <_vfiprintf_r+0x1bc>
 800f016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f018:	07d9      	lsls	r1, r3, #31
 800f01a:	d405      	bmi.n	800f028 <_vfiprintf_r+0x220>
 800f01c:	89ab      	ldrh	r3, [r5, #12]
 800f01e:	059a      	lsls	r2, r3, #22
 800f020:	d402      	bmi.n	800f028 <_vfiprintf_r+0x220>
 800f022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f024:	f7fe fd3e 	bl	800daa4 <__retarget_lock_release_recursive>
 800f028:	89ab      	ldrh	r3, [r5, #12]
 800f02a:	065b      	lsls	r3, r3, #25
 800f02c:	f53f af12 	bmi.w	800ee54 <_vfiprintf_r+0x4c>
 800f030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f032:	e711      	b.n	800ee58 <_vfiprintf_r+0x50>
 800f034:	ab03      	add	r3, sp, #12
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	462a      	mov	r2, r5
 800f03a:	4b09      	ldr	r3, [pc, #36]	; (800f060 <_vfiprintf_r+0x258>)
 800f03c:	a904      	add	r1, sp, #16
 800f03e:	4630      	mov	r0, r6
 800f040:	f7fb fd6c 	bl	800ab1c <_printf_i>
 800f044:	e7e4      	b.n	800f010 <_vfiprintf_r+0x208>
 800f046:	bf00      	nop
 800f048:	08010074 	.word	0x08010074
 800f04c:	08010094 	.word	0x08010094
 800f050:	08010054 	.word	0x08010054
 800f054:	0801028c 	.word	0x0801028c
 800f058:	08010296 	.word	0x08010296
 800f05c:	0800a5d5 	.word	0x0800a5d5
 800f060:	0800ede3 	.word	0x0800ede3
 800f064:	08010292 	.word	0x08010292

0800f068 <_scanf_chars>:
 800f068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f06c:	4615      	mov	r5, r2
 800f06e:	688a      	ldr	r2, [r1, #8]
 800f070:	4680      	mov	r8, r0
 800f072:	460c      	mov	r4, r1
 800f074:	b932      	cbnz	r2, 800f084 <_scanf_chars+0x1c>
 800f076:	698a      	ldr	r2, [r1, #24]
 800f078:	2a00      	cmp	r2, #0
 800f07a:	bf0c      	ite	eq
 800f07c:	2201      	moveq	r2, #1
 800f07e:	f04f 32ff 	movne.w	r2, #4294967295
 800f082:	608a      	str	r2, [r1, #8]
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f118 <_scanf_chars+0xb0>
 800f08a:	06d1      	lsls	r1, r2, #27
 800f08c:	bf5f      	itttt	pl
 800f08e:	681a      	ldrpl	r2, [r3, #0]
 800f090:	1d11      	addpl	r1, r2, #4
 800f092:	6019      	strpl	r1, [r3, #0]
 800f094:	6816      	ldrpl	r6, [r2, #0]
 800f096:	2700      	movs	r7, #0
 800f098:	69a0      	ldr	r0, [r4, #24]
 800f09a:	b188      	cbz	r0, 800f0c0 <_scanf_chars+0x58>
 800f09c:	2801      	cmp	r0, #1
 800f09e:	d107      	bne.n	800f0b0 <_scanf_chars+0x48>
 800f0a0:	682a      	ldr	r2, [r5, #0]
 800f0a2:	7811      	ldrb	r1, [r2, #0]
 800f0a4:	6962      	ldr	r2, [r4, #20]
 800f0a6:	5c52      	ldrb	r2, [r2, r1]
 800f0a8:	b952      	cbnz	r2, 800f0c0 <_scanf_chars+0x58>
 800f0aa:	2f00      	cmp	r7, #0
 800f0ac:	d031      	beq.n	800f112 <_scanf_chars+0xaa>
 800f0ae:	e022      	b.n	800f0f6 <_scanf_chars+0x8e>
 800f0b0:	2802      	cmp	r0, #2
 800f0b2:	d120      	bne.n	800f0f6 <_scanf_chars+0x8e>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f0bc:	071b      	lsls	r3, r3, #28
 800f0be:	d41a      	bmi.n	800f0f6 <_scanf_chars+0x8e>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	06da      	lsls	r2, r3, #27
 800f0c4:	bf5e      	ittt	pl
 800f0c6:	682b      	ldrpl	r3, [r5, #0]
 800f0c8:	781b      	ldrbpl	r3, [r3, #0]
 800f0ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f0ce:	682a      	ldr	r2, [r5, #0]
 800f0d0:	686b      	ldr	r3, [r5, #4]
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	602a      	str	r2, [r5, #0]
 800f0d6:	68a2      	ldr	r2, [r4, #8]
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	3a01      	subs	r2, #1
 800f0dc:	606b      	str	r3, [r5, #4]
 800f0de:	3701      	adds	r7, #1
 800f0e0:	60a2      	str	r2, [r4, #8]
 800f0e2:	b142      	cbz	r2, 800f0f6 <_scanf_chars+0x8e>
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	dcd7      	bgt.n	800f098 <_scanf_chars+0x30>
 800f0e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	4798      	blx	r3
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d0d0      	beq.n	800f098 <_scanf_chars+0x30>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	f013 0310 	ands.w	r3, r3, #16
 800f0fc:	d105      	bne.n	800f10a <_scanf_chars+0xa2>
 800f0fe:	68e2      	ldr	r2, [r4, #12]
 800f100:	3201      	adds	r2, #1
 800f102:	60e2      	str	r2, [r4, #12]
 800f104:	69a2      	ldr	r2, [r4, #24]
 800f106:	b102      	cbz	r2, 800f10a <_scanf_chars+0xa2>
 800f108:	7033      	strb	r3, [r6, #0]
 800f10a:	6923      	ldr	r3, [r4, #16]
 800f10c:	443b      	add	r3, r7
 800f10e:	6123      	str	r3, [r4, #16]
 800f110:	2000      	movs	r0, #0
 800f112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f116:	bf00      	nop
 800f118:	0800fec1 	.word	0x0800fec1

0800f11c <_scanf_i>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	4698      	mov	r8, r3
 800f122:	4b76      	ldr	r3, [pc, #472]	; (800f2fc <_scanf_i+0x1e0>)
 800f124:	460c      	mov	r4, r1
 800f126:	4682      	mov	sl, r0
 800f128:	4616      	mov	r6, r2
 800f12a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f12e:	b087      	sub	sp, #28
 800f130:	ab03      	add	r3, sp, #12
 800f132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f136:	4b72      	ldr	r3, [pc, #456]	; (800f300 <_scanf_i+0x1e4>)
 800f138:	69a1      	ldr	r1, [r4, #24]
 800f13a:	4a72      	ldr	r2, [pc, #456]	; (800f304 <_scanf_i+0x1e8>)
 800f13c:	2903      	cmp	r1, #3
 800f13e:	bf18      	it	ne
 800f140:	461a      	movne	r2, r3
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	9201      	str	r2, [sp, #4]
 800f146:	1e5a      	subs	r2, r3, #1
 800f148:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f14c:	bf88      	it	hi
 800f14e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f152:	4627      	mov	r7, r4
 800f154:	bf82      	ittt	hi
 800f156:	eb03 0905 	addhi.w	r9, r3, r5
 800f15a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f15e:	60a3      	strhi	r3, [r4, #8]
 800f160:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f164:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f168:	bf98      	it	ls
 800f16a:	f04f 0900 	movls.w	r9, #0
 800f16e:	6023      	str	r3, [r4, #0]
 800f170:	463d      	mov	r5, r7
 800f172:	f04f 0b00 	mov.w	fp, #0
 800f176:	6831      	ldr	r1, [r6, #0]
 800f178:	ab03      	add	r3, sp, #12
 800f17a:	7809      	ldrb	r1, [r1, #0]
 800f17c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f180:	2202      	movs	r2, #2
 800f182:	f7f1 f82d 	bl	80001e0 <memchr>
 800f186:	b328      	cbz	r0, 800f1d4 <_scanf_i+0xb8>
 800f188:	f1bb 0f01 	cmp.w	fp, #1
 800f18c:	d159      	bne.n	800f242 <_scanf_i+0x126>
 800f18e:	6862      	ldr	r2, [r4, #4]
 800f190:	b92a      	cbnz	r2, 800f19e <_scanf_i+0x82>
 800f192:	6822      	ldr	r2, [r4, #0]
 800f194:	2308      	movs	r3, #8
 800f196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f19a:	6063      	str	r3, [r4, #4]
 800f19c:	6022      	str	r2, [r4, #0]
 800f19e:	6822      	ldr	r2, [r4, #0]
 800f1a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f1a4:	6022      	str	r2, [r4, #0]
 800f1a6:	68a2      	ldr	r2, [r4, #8]
 800f1a8:	1e51      	subs	r1, r2, #1
 800f1aa:	60a1      	str	r1, [r4, #8]
 800f1ac:	b192      	cbz	r2, 800f1d4 <_scanf_i+0xb8>
 800f1ae:	6832      	ldr	r2, [r6, #0]
 800f1b0:	1c51      	adds	r1, r2, #1
 800f1b2:	6031      	str	r1, [r6, #0]
 800f1b4:	7812      	ldrb	r2, [r2, #0]
 800f1b6:	f805 2b01 	strb.w	r2, [r5], #1
 800f1ba:	6872      	ldr	r2, [r6, #4]
 800f1bc:	3a01      	subs	r2, #1
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	6072      	str	r2, [r6, #4]
 800f1c2:	dc07      	bgt.n	800f1d4 <_scanf_i+0xb8>
 800f1c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4650      	mov	r0, sl
 800f1cc:	4790      	blx	r2
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	f040 8085 	bne.w	800f2de <_scanf_i+0x1c2>
 800f1d4:	f10b 0b01 	add.w	fp, fp, #1
 800f1d8:	f1bb 0f03 	cmp.w	fp, #3
 800f1dc:	d1cb      	bne.n	800f176 <_scanf_i+0x5a>
 800f1de:	6863      	ldr	r3, [r4, #4]
 800f1e0:	b90b      	cbnz	r3, 800f1e6 <_scanf_i+0xca>
 800f1e2:	230a      	movs	r3, #10
 800f1e4:	6063      	str	r3, [r4, #4]
 800f1e6:	6863      	ldr	r3, [r4, #4]
 800f1e8:	4947      	ldr	r1, [pc, #284]	; (800f308 <_scanf_i+0x1ec>)
 800f1ea:	6960      	ldr	r0, [r4, #20]
 800f1ec:	1ac9      	subs	r1, r1, r3
 800f1ee:	f000 f8ff 	bl	800f3f0 <__sccl>
 800f1f2:	f04f 0b00 	mov.w	fp, #0
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	6822      	ldr	r2, [r4, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d03d      	beq.n	800f27a <_scanf_i+0x15e>
 800f1fe:	6831      	ldr	r1, [r6, #0]
 800f200:	6960      	ldr	r0, [r4, #20]
 800f202:	f891 c000 	ldrb.w	ip, [r1]
 800f206:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d035      	beq.n	800f27a <_scanf_i+0x15e>
 800f20e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f212:	d124      	bne.n	800f25e <_scanf_i+0x142>
 800f214:	0510      	lsls	r0, r2, #20
 800f216:	d522      	bpl.n	800f25e <_scanf_i+0x142>
 800f218:	f10b 0b01 	add.w	fp, fp, #1
 800f21c:	f1b9 0f00 	cmp.w	r9, #0
 800f220:	d003      	beq.n	800f22a <_scanf_i+0x10e>
 800f222:	3301      	adds	r3, #1
 800f224:	f109 39ff 	add.w	r9, r9, #4294967295
 800f228:	60a3      	str	r3, [r4, #8]
 800f22a:	6873      	ldr	r3, [r6, #4]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	6073      	str	r3, [r6, #4]
 800f232:	dd1b      	ble.n	800f26c <_scanf_i+0x150>
 800f234:	6833      	ldr	r3, [r6, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	6033      	str	r3, [r6, #0]
 800f23a:	68a3      	ldr	r3, [r4, #8]
 800f23c:	3b01      	subs	r3, #1
 800f23e:	60a3      	str	r3, [r4, #8]
 800f240:	e7d9      	b.n	800f1f6 <_scanf_i+0xda>
 800f242:	f1bb 0f02 	cmp.w	fp, #2
 800f246:	d1ae      	bne.n	800f1a6 <_scanf_i+0x8a>
 800f248:	6822      	ldr	r2, [r4, #0]
 800f24a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f24e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f252:	d1bf      	bne.n	800f1d4 <_scanf_i+0xb8>
 800f254:	2310      	movs	r3, #16
 800f256:	6063      	str	r3, [r4, #4]
 800f258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f25c:	e7a2      	b.n	800f1a4 <_scanf_i+0x88>
 800f25e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f262:	6022      	str	r2, [r4, #0]
 800f264:	780b      	ldrb	r3, [r1, #0]
 800f266:	f805 3b01 	strb.w	r3, [r5], #1
 800f26a:	e7de      	b.n	800f22a <_scanf_i+0x10e>
 800f26c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f270:	4631      	mov	r1, r6
 800f272:	4650      	mov	r0, sl
 800f274:	4798      	blx	r3
 800f276:	2800      	cmp	r0, #0
 800f278:	d0df      	beq.n	800f23a <_scanf_i+0x11e>
 800f27a:	6823      	ldr	r3, [r4, #0]
 800f27c:	05db      	lsls	r3, r3, #23
 800f27e:	d50d      	bpl.n	800f29c <_scanf_i+0x180>
 800f280:	42bd      	cmp	r5, r7
 800f282:	d909      	bls.n	800f298 <_scanf_i+0x17c>
 800f284:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f28c:	4632      	mov	r2, r6
 800f28e:	4650      	mov	r0, sl
 800f290:	4798      	blx	r3
 800f292:	f105 39ff 	add.w	r9, r5, #4294967295
 800f296:	464d      	mov	r5, r9
 800f298:	42bd      	cmp	r5, r7
 800f29a:	d02d      	beq.n	800f2f8 <_scanf_i+0x1dc>
 800f29c:	6822      	ldr	r2, [r4, #0]
 800f29e:	f012 0210 	ands.w	r2, r2, #16
 800f2a2:	d113      	bne.n	800f2cc <_scanf_i+0x1b0>
 800f2a4:	702a      	strb	r2, [r5, #0]
 800f2a6:	6863      	ldr	r3, [r4, #4]
 800f2a8:	9e01      	ldr	r6, [sp, #4]
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	4650      	mov	r0, sl
 800f2ae:	47b0      	blx	r6
 800f2b0:	6821      	ldr	r1, [r4, #0]
 800f2b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f2b6:	f011 0f20 	tst.w	r1, #32
 800f2ba:	d013      	beq.n	800f2e4 <_scanf_i+0x1c8>
 800f2bc:	1d1a      	adds	r2, r3, #4
 800f2be:	f8c8 2000 	str.w	r2, [r8]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6018      	str	r0, [r3, #0]
 800f2c6:	68e3      	ldr	r3, [r4, #12]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	60e3      	str	r3, [r4, #12]
 800f2cc:	1bed      	subs	r5, r5, r7
 800f2ce:	44ab      	add	fp, r5
 800f2d0:	6925      	ldr	r5, [r4, #16]
 800f2d2:	445d      	add	r5, fp
 800f2d4:	6125      	str	r5, [r4, #16]
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	b007      	add	sp, #28
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	f04f 0b00 	mov.w	fp, #0
 800f2e2:	e7ca      	b.n	800f27a <_scanf_i+0x15e>
 800f2e4:	1d1a      	adds	r2, r3, #4
 800f2e6:	f8c8 2000 	str.w	r2, [r8]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f011 0f01 	tst.w	r1, #1
 800f2f0:	bf14      	ite	ne
 800f2f2:	8018      	strhne	r0, [r3, #0]
 800f2f4:	6018      	streq	r0, [r3, #0]
 800f2f6:	e7e6      	b.n	800f2c6 <_scanf_i+0x1aa>
 800f2f8:	2001      	movs	r0, #1
 800f2fa:	e7ed      	b.n	800f2d8 <_scanf_i+0x1bc>
 800f2fc:	0800fd2c 	.word	0x0800fd2c
 800f300:	0800f545 	.word	0x0800f545
 800f304:	0800c18d 	.word	0x0800c18d
 800f308:	080102b6 	.word	0x080102b6

0800f30c <_putc_r>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	460d      	mov	r5, r1
 800f310:	4614      	mov	r4, r2
 800f312:	4606      	mov	r6, r0
 800f314:	b118      	cbz	r0, 800f31e <_putc_r+0x12>
 800f316:	6983      	ldr	r3, [r0, #24]
 800f318:	b90b      	cbnz	r3, 800f31e <_putc_r+0x12>
 800f31a:	f7fd ffb1 	bl	800d280 <__sinit>
 800f31e:	4b1c      	ldr	r3, [pc, #112]	; (800f390 <_putc_r+0x84>)
 800f320:	429c      	cmp	r4, r3
 800f322:	d124      	bne.n	800f36e <_putc_r+0x62>
 800f324:	6874      	ldr	r4, [r6, #4]
 800f326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f328:	07d8      	lsls	r0, r3, #31
 800f32a:	d405      	bmi.n	800f338 <_putc_r+0x2c>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	0599      	lsls	r1, r3, #22
 800f330:	d402      	bmi.n	800f338 <_putc_r+0x2c>
 800f332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f334:	f7fe fbb5 	bl	800daa2 <__retarget_lock_acquire_recursive>
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	60a3      	str	r3, [r4, #8]
 800f340:	da05      	bge.n	800f34e <_putc_r+0x42>
 800f342:	69a2      	ldr	r2, [r4, #24]
 800f344:	4293      	cmp	r3, r2
 800f346:	db1c      	blt.n	800f382 <_putc_r+0x76>
 800f348:	b2eb      	uxtb	r3, r5
 800f34a:	2b0a      	cmp	r3, #10
 800f34c:	d019      	beq.n	800f382 <_putc_r+0x76>
 800f34e:	6823      	ldr	r3, [r4, #0]
 800f350:	1c5a      	adds	r2, r3, #1
 800f352:	6022      	str	r2, [r4, #0]
 800f354:	701d      	strb	r5, [r3, #0]
 800f356:	b2ed      	uxtb	r5, r5
 800f358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f35a:	07da      	lsls	r2, r3, #31
 800f35c:	d405      	bmi.n	800f36a <_putc_r+0x5e>
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	059b      	lsls	r3, r3, #22
 800f362:	d402      	bmi.n	800f36a <_putc_r+0x5e>
 800f364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f366:	f7fe fb9d 	bl	800daa4 <__retarget_lock_release_recursive>
 800f36a:	4628      	mov	r0, r5
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	4b09      	ldr	r3, [pc, #36]	; (800f394 <_putc_r+0x88>)
 800f370:	429c      	cmp	r4, r3
 800f372:	d101      	bne.n	800f378 <_putc_r+0x6c>
 800f374:	68b4      	ldr	r4, [r6, #8]
 800f376:	e7d6      	b.n	800f326 <_putc_r+0x1a>
 800f378:	4b07      	ldr	r3, [pc, #28]	; (800f398 <_putc_r+0x8c>)
 800f37a:	429c      	cmp	r4, r3
 800f37c:	bf08      	it	eq
 800f37e:	68f4      	ldreq	r4, [r6, #12]
 800f380:	e7d1      	b.n	800f326 <_putc_r+0x1a>
 800f382:	4629      	mov	r1, r5
 800f384:	4622      	mov	r2, r4
 800f386:	4630      	mov	r0, r6
 800f388:	f7fc ff02 	bl	800c190 <__swbuf_r>
 800f38c:	4605      	mov	r5, r0
 800f38e:	e7e3      	b.n	800f358 <_putc_r+0x4c>
 800f390:	08010074 	.word	0x08010074
 800f394:	08010094 	.word	0x08010094
 800f398:	08010054 	.word	0x08010054

0800f39c <_read_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d07      	ldr	r5, [pc, #28]	; (800f3bc <_read_r+0x20>)
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	602a      	str	r2, [r5, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f7f4 f8a0 	bl	80034f0 <_read>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d102      	bne.n	800f3ba <_read_r+0x1e>
 800f3b4:	682b      	ldr	r3, [r5, #0]
 800f3b6:	b103      	cbz	r3, 800f3ba <_read_r+0x1e>
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}
 800f3bc:	200009f0 	.word	0x200009f0

0800f3c0 <nan>:
 800f3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3c8 <nan+0x8>
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	00000000 	.word	0x00000000
 800f3cc:	7ff80000 	.word	0x7ff80000

0800f3d0 <_sbrk_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d06      	ldr	r5, [pc, #24]	; (800f3ec <_sbrk_r+0x1c>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	602b      	str	r3, [r5, #0]
 800f3dc:	f7f4 f8f6 	bl	80035cc <_sbrk>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_sbrk_r+0x1a>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_sbrk_r+0x1a>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	200009f0 	.word	0x200009f0

0800f3f0 <__sccl>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	780b      	ldrb	r3, [r1, #0]
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	2b5e      	cmp	r3, #94	; 0x5e
 800f3f8:	bf0b      	itete	eq
 800f3fa:	784b      	ldrbeq	r3, [r1, #1]
 800f3fc:	1c48      	addne	r0, r1, #1
 800f3fe:	1c88      	addeq	r0, r1, #2
 800f400:	2200      	movne	r2, #0
 800f402:	bf08      	it	eq
 800f404:	2201      	moveq	r2, #1
 800f406:	1e61      	subs	r1, r4, #1
 800f408:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f40c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f410:	42a9      	cmp	r1, r5
 800f412:	d1fb      	bne.n	800f40c <__sccl+0x1c>
 800f414:	b90b      	cbnz	r3, 800f41a <__sccl+0x2a>
 800f416:	3801      	subs	r0, #1
 800f418:	bd70      	pop	{r4, r5, r6, pc}
 800f41a:	f082 0201 	eor.w	r2, r2, #1
 800f41e:	54e2      	strb	r2, [r4, r3]
 800f420:	4605      	mov	r5, r0
 800f422:	4628      	mov	r0, r5
 800f424:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f428:	292d      	cmp	r1, #45	; 0x2d
 800f42a:	d006      	beq.n	800f43a <__sccl+0x4a>
 800f42c:	295d      	cmp	r1, #93	; 0x5d
 800f42e:	d0f3      	beq.n	800f418 <__sccl+0x28>
 800f430:	b909      	cbnz	r1, 800f436 <__sccl+0x46>
 800f432:	4628      	mov	r0, r5
 800f434:	e7f0      	b.n	800f418 <__sccl+0x28>
 800f436:	460b      	mov	r3, r1
 800f438:	e7f1      	b.n	800f41e <__sccl+0x2e>
 800f43a:	786e      	ldrb	r6, [r5, #1]
 800f43c:	2e5d      	cmp	r6, #93	; 0x5d
 800f43e:	d0fa      	beq.n	800f436 <__sccl+0x46>
 800f440:	42b3      	cmp	r3, r6
 800f442:	dcf8      	bgt.n	800f436 <__sccl+0x46>
 800f444:	3502      	adds	r5, #2
 800f446:	4619      	mov	r1, r3
 800f448:	3101      	adds	r1, #1
 800f44a:	428e      	cmp	r6, r1
 800f44c:	5462      	strb	r2, [r4, r1]
 800f44e:	dcfb      	bgt.n	800f448 <__sccl+0x58>
 800f450:	1af1      	subs	r1, r6, r3
 800f452:	3901      	subs	r1, #1
 800f454:	1c58      	adds	r0, r3, #1
 800f456:	42b3      	cmp	r3, r6
 800f458:	bfa8      	it	ge
 800f45a:	2100      	movge	r1, #0
 800f45c:	1843      	adds	r3, r0, r1
 800f45e:	e7e0      	b.n	800f422 <__sccl+0x32>

0800f460 <_strtoul_l.constprop.0>:
 800f460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f464:	4f36      	ldr	r7, [pc, #216]	; (800f540 <_strtoul_l.constprop.0+0xe0>)
 800f466:	4686      	mov	lr, r0
 800f468:	460d      	mov	r5, r1
 800f46a:	4628      	mov	r0, r5
 800f46c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f470:	5de6      	ldrb	r6, [r4, r7]
 800f472:	f016 0608 	ands.w	r6, r6, #8
 800f476:	d1f8      	bne.n	800f46a <_strtoul_l.constprop.0+0xa>
 800f478:	2c2d      	cmp	r4, #45	; 0x2d
 800f47a:	d12f      	bne.n	800f4dc <_strtoul_l.constprop.0+0x7c>
 800f47c:	782c      	ldrb	r4, [r5, #0]
 800f47e:	2601      	movs	r6, #1
 800f480:	1c85      	adds	r5, r0, #2
 800f482:	2b00      	cmp	r3, #0
 800f484:	d057      	beq.n	800f536 <_strtoul_l.constprop.0+0xd6>
 800f486:	2b10      	cmp	r3, #16
 800f488:	d109      	bne.n	800f49e <_strtoul_l.constprop.0+0x3e>
 800f48a:	2c30      	cmp	r4, #48	; 0x30
 800f48c:	d107      	bne.n	800f49e <_strtoul_l.constprop.0+0x3e>
 800f48e:	7828      	ldrb	r0, [r5, #0]
 800f490:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f494:	2858      	cmp	r0, #88	; 0x58
 800f496:	d149      	bne.n	800f52c <_strtoul_l.constprop.0+0xcc>
 800f498:	786c      	ldrb	r4, [r5, #1]
 800f49a:	2310      	movs	r3, #16
 800f49c:	3502      	adds	r5, #2
 800f49e:	f04f 38ff 	mov.w	r8, #4294967295
 800f4a2:	2700      	movs	r7, #0
 800f4a4:	fbb8 f8f3 	udiv	r8, r8, r3
 800f4a8:	fb03 f908 	mul.w	r9, r3, r8
 800f4ac:	ea6f 0909 	mvn.w	r9, r9
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f4b6:	f1bc 0f09 	cmp.w	ip, #9
 800f4ba:	d814      	bhi.n	800f4e6 <_strtoul_l.constprop.0+0x86>
 800f4bc:	4664      	mov	r4, ip
 800f4be:	42a3      	cmp	r3, r4
 800f4c0:	dd22      	ble.n	800f508 <_strtoul_l.constprop.0+0xa8>
 800f4c2:	2f00      	cmp	r7, #0
 800f4c4:	db1d      	blt.n	800f502 <_strtoul_l.constprop.0+0xa2>
 800f4c6:	4580      	cmp	r8, r0
 800f4c8:	d31b      	bcc.n	800f502 <_strtoul_l.constprop.0+0xa2>
 800f4ca:	d101      	bne.n	800f4d0 <_strtoul_l.constprop.0+0x70>
 800f4cc:	45a1      	cmp	r9, r4
 800f4ce:	db18      	blt.n	800f502 <_strtoul_l.constprop.0+0xa2>
 800f4d0:	fb00 4003 	mla	r0, r0, r3, r4
 800f4d4:	2701      	movs	r7, #1
 800f4d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4da:	e7ea      	b.n	800f4b2 <_strtoul_l.constprop.0+0x52>
 800f4dc:	2c2b      	cmp	r4, #43	; 0x2b
 800f4de:	bf04      	itt	eq
 800f4e0:	782c      	ldrbeq	r4, [r5, #0]
 800f4e2:	1c85      	addeq	r5, r0, #2
 800f4e4:	e7cd      	b.n	800f482 <_strtoul_l.constprop.0+0x22>
 800f4e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f4ea:	f1bc 0f19 	cmp.w	ip, #25
 800f4ee:	d801      	bhi.n	800f4f4 <_strtoul_l.constprop.0+0x94>
 800f4f0:	3c37      	subs	r4, #55	; 0x37
 800f4f2:	e7e4      	b.n	800f4be <_strtoul_l.constprop.0+0x5e>
 800f4f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f4f8:	f1bc 0f19 	cmp.w	ip, #25
 800f4fc:	d804      	bhi.n	800f508 <_strtoul_l.constprop.0+0xa8>
 800f4fe:	3c57      	subs	r4, #87	; 0x57
 800f500:	e7dd      	b.n	800f4be <_strtoul_l.constprop.0+0x5e>
 800f502:	f04f 37ff 	mov.w	r7, #4294967295
 800f506:	e7e6      	b.n	800f4d6 <_strtoul_l.constprop.0+0x76>
 800f508:	2f00      	cmp	r7, #0
 800f50a:	da07      	bge.n	800f51c <_strtoul_l.constprop.0+0xbc>
 800f50c:	2322      	movs	r3, #34	; 0x22
 800f50e:	f8ce 3000 	str.w	r3, [lr]
 800f512:	f04f 30ff 	mov.w	r0, #4294967295
 800f516:	b932      	cbnz	r2, 800f526 <_strtoul_l.constprop.0+0xc6>
 800f518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f51c:	b106      	cbz	r6, 800f520 <_strtoul_l.constprop.0+0xc0>
 800f51e:	4240      	negs	r0, r0
 800f520:	2a00      	cmp	r2, #0
 800f522:	d0f9      	beq.n	800f518 <_strtoul_l.constprop.0+0xb8>
 800f524:	b107      	cbz	r7, 800f528 <_strtoul_l.constprop.0+0xc8>
 800f526:	1e69      	subs	r1, r5, #1
 800f528:	6011      	str	r1, [r2, #0]
 800f52a:	e7f5      	b.n	800f518 <_strtoul_l.constprop.0+0xb8>
 800f52c:	2430      	movs	r4, #48	; 0x30
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1b5      	bne.n	800f49e <_strtoul_l.constprop.0+0x3e>
 800f532:	2308      	movs	r3, #8
 800f534:	e7b3      	b.n	800f49e <_strtoul_l.constprop.0+0x3e>
 800f536:	2c30      	cmp	r4, #48	; 0x30
 800f538:	d0a9      	beq.n	800f48e <_strtoul_l.constprop.0+0x2e>
 800f53a:	230a      	movs	r3, #10
 800f53c:	e7af      	b.n	800f49e <_strtoul_l.constprop.0+0x3e>
 800f53e:	bf00      	nop
 800f540:	0800fec1 	.word	0x0800fec1

0800f544 <_strtoul_r>:
 800f544:	f7ff bf8c 	b.w	800f460 <_strtoul_l.constprop.0>

0800f548 <__submore>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	460c      	mov	r4, r1
 800f54e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f554:	4299      	cmp	r1, r3
 800f556:	d11d      	bne.n	800f594 <__submore+0x4c>
 800f558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f55c:	f7ff f888 	bl	800e670 <_malloc_r>
 800f560:	b918      	cbnz	r0, 800f56a <__submore+0x22>
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f56e:	63a3      	str	r3, [r4, #56]	; 0x38
 800f570:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f574:	6360      	str	r0, [r4, #52]	; 0x34
 800f576:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f57a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f57e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f582:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f586:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f58a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f58e:	6020      	str	r0, [r4, #0]
 800f590:	2000      	movs	r0, #0
 800f592:	e7e8      	b.n	800f566 <__submore+0x1e>
 800f594:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f596:	0077      	lsls	r7, r6, #1
 800f598:	463a      	mov	r2, r7
 800f59a:	f000 f895 	bl	800f6c8 <_realloc_r>
 800f59e:	4605      	mov	r5, r0
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d0de      	beq.n	800f562 <__submore+0x1a>
 800f5a4:	eb00 0806 	add.w	r8, r0, r6
 800f5a8:	4601      	mov	r1, r0
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	f7fe fb0d 	bl	800dbcc <memcpy>
 800f5b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f5b6:	f8c4 8000 	str.w	r8, [r4]
 800f5ba:	e7e9      	b.n	800f590 <__submore+0x48>

0800f5bc <__ascii_wctomb>:
 800f5bc:	b149      	cbz	r1, 800f5d2 <__ascii_wctomb+0x16>
 800f5be:	2aff      	cmp	r2, #255	; 0xff
 800f5c0:	bf85      	ittet	hi
 800f5c2:	238a      	movhi	r3, #138	; 0x8a
 800f5c4:	6003      	strhi	r3, [r0, #0]
 800f5c6:	700a      	strbls	r2, [r1, #0]
 800f5c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5cc:	bf98      	it	ls
 800f5ce:	2001      	movls	r0, #1
 800f5d0:	4770      	bx	lr
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <__assert_func>:
 800f5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5da:	4614      	mov	r4, r2
 800f5dc:	461a      	mov	r2, r3
 800f5de:	4b09      	ldr	r3, [pc, #36]	; (800f604 <__assert_func+0x2c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	68d8      	ldr	r0, [r3, #12]
 800f5e6:	b14c      	cbz	r4, 800f5fc <__assert_func+0x24>
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <__assert_func+0x30>)
 800f5ea:	9100      	str	r1, [sp, #0]
 800f5ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5f0:	4906      	ldr	r1, [pc, #24]	; (800f60c <__assert_func+0x34>)
 800f5f2:	462b      	mov	r3, r5
 800f5f4:	f000 f80e 	bl	800f614 <fiprintf>
 800f5f8:	f000 f895 	bl	800f726 <abort>
 800f5fc:	4b04      	ldr	r3, [pc, #16]	; (800f610 <__assert_func+0x38>)
 800f5fe:	461c      	mov	r4, r3
 800f600:	e7f3      	b.n	800f5ea <__assert_func+0x12>
 800f602:	bf00      	nop
 800f604:	20000040 	.word	0x20000040
 800f608:	080102b8 	.word	0x080102b8
 800f60c:	080102c5 	.word	0x080102c5
 800f610:	080102f3 	.word	0x080102f3

0800f614 <fiprintf>:
 800f614:	b40e      	push	{r1, r2, r3}
 800f616:	b503      	push	{r0, r1, lr}
 800f618:	4601      	mov	r1, r0
 800f61a:	ab03      	add	r3, sp, #12
 800f61c:	4805      	ldr	r0, [pc, #20]	; (800f634 <fiprintf+0x20>)
 800f61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f622:	6800      	ldr	r0, [r0, #0]
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	f7ff fbef 	bl	800ee08 <_vfiprintf_r>
 800f62a:	b002      	add	sp, #8
 800f62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f630:	b003      	add	sp, #12
 800f632:	4770      	bx	lr
 800f634:	20000040 	.word	0x20000040

0800f638 <_fstat_r>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	4d07      	ldr	r5, [pc, #28]	; (800f658 <_fstat_r+0x20>)
 800f63c:	2300      	movs	r3, #0
 800f63e:	4604      	mov	r4, r0
 800f640:	4608      	mov	r0, r1
 800f642:	4611      	mov	r1, r2
 800f644:	602b      	str	r3, [r5, #0]
 800f646:	f7f3 ff98 	bl	800357a <_fstat>
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	d102      	bne.n	800f654 <_fstat_r+0x1c>
 800f64e:	682b      	ldr	r3, [r5, #0]
 800f650:	b103      	cbz	r3, 800f654 <_fstat_r+0x1c>
 800f652:	6023      	str	r3, [r4, #0]
 800f654:	bd38      	pop	{r3, r4, r5, pc}
 800f656:	bf00      	nop
 800f658:	200009f0 	.word	0x200009f0

0800f65c <_isatty_r>:
 800f65c:	b538      	push	{r3, r4, r5, lr}
 800f65e:	4d06      	ldr	r5, [pc, #24]	; (800f678 <_isatty_r+0x1c>)
 800f660:	2300      	movs	r3, #0
 800f662:	4604      	mov	r4, r0
 800f664:	4608      	mov	r0, r1
 800f666:	602b      	str	r3, [r5, #0]
 800f668:	f7f3 ff97 	bl	800359a <_isatty>
 800f66c:	1c43      	adds	r3, r0, #1
 800f66e:	d102      	bne.n	800f676 <_isatty_r+0x1a>
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	b103      	cbz	r3, 800f676 <_isatty_r+0x1a>
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	bd38      	pop	{r3, r4, r5, pc}
 800f678:	200009f0 	.word	0x200009f0

0800f67c <memmove>:
 800f67c:	4288      	cmp	r0, r1
 800f67e:	b510      	push	{r4, lr}
 800f680:	eb01 0402 	add.w	r4, r1, r2
 800f684:	d902      	bls.n	800f68c <memmove+0x10>
 800f686:	4284      	cmp	r4, r0
 800f688:	4623      	mov	r3, r4
 800f68a:	d807      	bhi.n	800f69c <memmove+0x20>
 800f68c:	1e43      	subs	r3, r0, #1
 800f68e:	42a1      	cmp	r1, r4
 800f690:	d008      	beq.n	800f6a4 <memmove+0x28>
 800f692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f69a:	e7f8      	b.n	800f68e <memmove+0x12>
 800f69c:	4402      	add	r2, r0
 800f69e:	4601      	mov	r1, r0
 800f6a0:	428a      	cmp	r2, r1
 800f6a2:	d100      	bne.n	800f6a6 <memmove+0x2a>
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6ae:	e7f7      	b.n	800f6a0 <memmove+0x24>

0800f6b0 <__malloc_lock>:
 800f6b0:	4801      	ldr	r0, [pc, #4]	; (800f6b8 <__malloc_lock+0x8>)
 800f6b2:	f7fe b9f6 	b.w	800daa2 <__retarget_lock_acquire_recursive>
 800f6b6:	bf00      	nop
 800f6b8:	200009e4 	.word	0x200009e4

0800f6bc <__malloc_unlock>:
 800f6bc:	4801      	ldr	r0, [pc, #4]	; (800f6c4 <__malloc_unlock+0x8>)
 800f6be:	f7fe b9f1 	b.w	800daa4 <__retarget_lock_release_recursive>
 800f6c2:	bf00      	nop
 800f6c4:	200009e4 	.word	0x200009e4

0800f6c8 <_realloc_r>:
 800f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6cc:	4680      	mov	r8, r0
 800f6ce:	4614      	mov	r4, r2
 800f6d0:	460e      	mov	r6, r1
 800f6d2:	b921      	cbnz	r1, 800f6de <_realloc_r+0x16>
 800f6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	4611      	mov	r1, r2
 800f6da:	f7fe bfc9 	b.w	800e670 <_malloc_r>
 800f6de:	b92a      	cbnz	r2, 800f6ec <_realloc_r+0x24>
 800f6e0:	f7fe ff5a 	bl	800e598 <_free_r>
 800f6e4:	4625      	mov	r5, r4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ec:	f000 f822 	bl	800f734 <_malloc_usable_size_r>
 800f6f0:	4284      	cmp	r4, r0
 800f6f2:	4607      	mov	r7, r0
 800f6f4:	d802      	bhi.n	800f6fc <_realloc_r+0x34>
 800f6f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6fa:	d812      	bhi.n	800f722 <_realloc_r+0x5a>
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	4640      	mov	r0, r8
 800f700:	f7fe ffb6 	bl	800e670 <_malloc_r>
 800f704:	4605      	mov	r5, r0
 800f706:	2800      	cmp	r0, #0
 800f708:	d0ed      	beq.n	800f6e6 <_realloc_r+0x1e>
 800f70a:	42bc      	cmp	r4, r7
 800f70c:	4622      	mov	r2, r4
 800f70e:	4631      	mov	r1, r6
 800f710:	bf28      	it	cs
 800f712:	463a      	movcs	r2, r7
 800f714:	f7fe fa5a 	bl	800dbcc <memcpy>
 800f718:	4631      	mov	r1, r6
 800f71a:	4640      	mov	r0, r8
 800f71c:	f7fe ff3c 	bl	800e598 <_free_r>
 800f720:	e7e1      	b.n	800f6e6 <_realloc_r+0x1e>
 800f722:	4635      	mov	r5, r6
 800f724:	e7df      	b.n	800f6e6 <_realloc_r+0x1e>

0800f726 <abort>:
 800f726:	b508      	push	{r3, lr}
 800f728:	2006      	movs	r0, #6
 800f72a:	f000 f833 	bl	800f794 <raise>
 800f72e:	2001      	movs	r0, #1
 800f730:	f7f3 fed4 	bl	80034dc <_exit>

0800f734 <_malloc_usable_size_r>:
 800f734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f738:	1f18      	subs	r0, r3, #4
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	bfbc      	itt	lt
 800f73e:	580b      	ldrlt	r3, [r1, r0]
 800f740:	18c0      	addlt	r0, r0, r3
 800f742:	4770      	bx	lr

0800f744 <_raise_r>:
 800f744:	291f      	cmp	r1, #31
 800f746:	b538      	push	{r3, r4, r5, lr}
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	d904      	bls.n	800f758 <_raise_r+0x14>
 800f74e:	2316      	movs	r3, #22
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	f04f 30ff 	mov.w	r0, #4294967295
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f75a:	b112      	cbz	r2, 800f762 <_raise_r+0x1e>
 800f75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f760:	b94b      	cbnz	r3, 800f776 <_raise_r+0x32>
 800f762:	4620      	mov	r0, r4
 800f764:	f000 f830 	bl	800f7c8 <_getpid_r>
 800f768:	462a      	mov	r2, r5
 800f76a:	4601      	mov	r1, r0
 800f76c:	4620      	mov	r0, r4
 800f76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f772:	f000 b817 	b.w	800f7a4 <_kill_r>
 800f776:	2b01      	cmp	r3, #1
 800f778:	d00a      	beq.n	800f790 <_raise_r+0x4c>
 800f77a:	1c59      	adds	r1, r3, #1
 800f77c:	d103      	bne.n	800f786 <_raise_r+0x42>
 800f77e:	2316      	movs	r3, #22
 800f780:	6003      	str	r3, [r0, #0]
 800f782:	2001      	movs	r0, #1
 800f784:	e7e7      	b.n	800f756 <_raise_r+0x12>
 800f786:	2400      	movs	r4, #0
 800f788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f78c:	4628      	mov	r0, r5
 800f78e:	4798      	blx	r3
 800f790:	2000      	movs	r0, #0
 800f792:	e7e0      	b.n	800f756 <_raise_r+0x12>

0800f794 <raise>:
 800f794:	4b02      	ldr	r3, [pc, #8]	; (800f7a0 <raise+0xc>)
 800f796:	4601      	mov	r1, r0
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	f7ff bfd3 	b.w	800f744 <_raise_r>
 800f79e:	bf00      	nop
 800f7a0:	20000040 	.word	0x20000040

0800f7a4 <_kill_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d07      	ldr	r5, [pc, #28]	; (800f7c4 <_kill_r+0x20>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	602b      	str	r3, [r5, #0]
 800f7b2:	f7f3 fe83 	bl	80034bc <_kill>
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	d102      	bne.n	800f7c0 <_kill_r+0x1c>
 800f7ba:	682b      	ldr	r3, [r5, #0]
 800f7bc:	b103      	cbz	r3, 800f7c0 <_kill_r+0x1c>
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	200009f0 	.word	0x200009f0

0800f7c8 <_getpid_r>:
 800f7c8:	f7f3 be70 	b.w	80034ac <_getpid>

0800f7cc <_init>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	bf00      	nop
 800f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d2:	bc08      	pop	{r3}
 800f7d4:	469e      	mov	lr, r3
 800f7d6:	4770      	bx	lr

0800f7d8 <_fini>:
 800f7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7da:	bf00      	nop
 800f7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7de:	bc08      	pop	{r3}
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	4770      	bx	lr
