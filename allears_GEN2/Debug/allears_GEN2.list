
allears_GEN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bde4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  0800bf78  0800bf78  0001bf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca1c  0800ca1c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca24  0800ca24  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca28  0800ca28  0001ca28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800ca2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000210  0800cc3c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000920  0800cc3c  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255df  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c76  00000000  00000000  0004581f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000170ee  00000000  00000000  0004a495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  00061588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00062be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb0b  00000000  00000000  000643e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000076b1  00000000  00000000  00080eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008859c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000527c  00000000  00000000  000885ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf5c 	.word	0x0800bf5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800bf5c 	.word	0x0800bf5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Echo_Btn_isHandled>:
echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_isHandled(void)
{
	return ECHO_BTN_STATE_HANDLED;
}
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <Echo_Btn_isHandled+0x8>)
 8000ffa:	7898      	ldrb	r0, [r3, #2]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000022c 	.word	0x2000022c

08001004 <Echo_Btn_Handled_clear>:

void Echo_Btn_Handled_clear(void)
{
	ECHO_BTN_STATE_HANDLED = false;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <Echo_Btn_Handled_clear+0x8>)
 8001006:	2200      	movs	r2, #0
 8001008:	709a      	strb	r2, [r3, #2]
}
 800100a:	4770      	bx	lr
 800100c:	2000022c 	.word	0x2000022c

08001010 <Echo_Btn_handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_handle(void)
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b084      	sub	sp, #16
	bool pressed;
#ifdef DEBUG
	char res_msg[10] =
 8001014:	2300      	movs	r3, #0
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	f8ad 300c 	strh.w	r3, [sp, #12]
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 800101e:	2110      	movs	r1, #16
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f003 f8dc 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001028:	fab0 f280 	clz	r2, r0
 800102c:	0952      	lsrs	r2, r2, #5

	if (pressed != ECHO_BTN_STATE_PRESSED)
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <Echo_Btn_handle+0x7c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4293      	cmp	r3, r2
 8001034:	d10c      	bne.n	8001050 <Echo_Btn_handle+0x40>
			ECHO_BTN_STATE_HANDLED = true;
			ECHO_BTN_STATE_HELD_TICK = 0;
		}
	}
	/* Check held */
	else if (ECHO_BTN_STATE_PRESSED == true)
 8001036:	b1d3      	cbz	r3, 800106e <Echo_Btn_handle+0x5e>
	{
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <Echo_Btn_handle+0x7c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001040:	d017      	beq.n	8001072 <Echo_Btn_handle+0x62>
			sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
			ECHO_SHELL_PRINT(("%s\n",res_msg));
#endif
			ECHO_BTN_STATE_HELD_TICK++;
		}
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 8001042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001046:	d212      	bcs.n	800106e <Echo_Btn_handle+0x5e>
		{
			ECHO_BTN_STATE_HELD_TICK++;
 8001048:	3301      	adds	r3, #1
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <Echo_Btn_handle+0x7c>)
 800104c:	6053      	str	r3, [r2, #4]
		else
		{
			/* Ignored */
		}
	}
}
 800104e:	e00e      	b.n	800106e <Echo_Btn_handle+0x5e>
		ECHO_BTN_STATE_PRESSED = pressed;
 8001050:	4c0e      	ldr	r4, [pc, #56]	; (800108c <Echo_Btn_handle+0x7c>)
 8001052:	7022      	strb	r2, [r4, #0]
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
 8001054:	490e      	ldr	r1, [pc, #56]	; (8001090 <Echo_Btn_handle+0x80>)
 8001056:	a801      	add	r0, sp, #4
 8001058:	f006 fd08 	bl	8007a6c <siprintf>
		ECHO_SHELL_PRINT(("%s\n",res_msg));
 800105c:	a801      	add	r0, sp, #4
 800105e:	f006 fcf7 	bl	8007a50 <puts>
		if (ECHO_BTN_STATE_PRESSED == false)
 8001062:	7823      	ldrb	r3, [r4, #0]
 8001064:	b11b      	cbz	r3, 800106e <Echo_Btn_handle+0x5e>
			ECHO_BTN_STATE_HANDLED = true;
 8001066:	2201      	movs	r2, #1
 8001068:	70a2      	strb	r2, [r4, #2]
			ECHO_BTN_STATE_HELD_TICK = 0;
 800106a:	2200      	movs	r2, #0
 800106c:	6062      	str	r2, [r4, #4]
}
 800106e:	b004      	add	sp, #16
 8001070:	bd10      	pop	{r4, pc}
			sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
 8001072:	4907      	ldr	r1, [pc, #28]	; (8001090 <Echo_Btn_handle+0x80>)
 8001074:	a801      	add	r0, sp, #4
 8001076:	f006 fcf9 	bl	8007a6c <siprintf>
			ECHO_SHELL_PRINT(("%s\n",res_msg));
 800107a:	a801      	add	r0, sp, #4
 800107c:	f006 fce8 	bl	8007a50 <puts>
			ECHO_BTN_STATE_HELD_TICK++;
 8001080:	4a02      	ldr	r2, [pc, #8]	; (800108c <Echo_Btn_handle+0x7c>)
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	3301      	adds	r3, #1
 8001086:	6053      	str	r3, [r2, #4]
 8001088:	e7f1      	b.n	800106e <Echo_Btn_handle+0x5e>
 800108a:	bf00      	nop
 800108c:	2000022c 	.word	0x2000022c
 8001090:	0800bf84 	.word	0x0800bf84

08001094 <GetPage>:

static uint32_t GetPage(uint32_t Addr)
{
	uint32_t page = 0;

	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <GetPage+0x30>)
 8001096:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800109a:	b291      	uxth	r1, r2
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d00a      	beq.n	80010ba <GetPage+0x26>
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <GetPage+0x34>)
 80010a6:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80010aa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010ae:	4283      	cmp	r3, r0
 80010b0:	d905      	bls.n	80010be <GetPage+0x2a>
	{
		/* Bank 1 */
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80010b2:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80010b6:	0ac0      	lsrs	r0, r0, #11
 80010b8:	4770      	bx	lr
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <GetPage+0x38>)
 80010bc:	e7f7      	b.n	80010ae <GetPage+0x1a>
	}
	else
	{
		/* Bank 2 */
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80010be:	1ac0      	subs	r0, r0, r3
 80010c0:	0ac0      	lsrs	r0, r0, #11
	}

	return page;
}
 80010c2:	4770      	bx	lr
 80010c4:	1fff7000 	.word	0x1fff7000
 80010c8:	03fffc00 	.word	0x03fffc00
 80010cc:	08020000 	.word	0x08020000

080010d0 <GetBank>:

static uint32_t GetBank(uint32_t Addr)
{
	return FLASH_BANK_1;
}
 80010d0:	2001      	movs	r0, #1
 80010d2:	4770      	bx	lr

080010d4 <Echo_Flash_Write>:

HAL_StatusTypeDef Echo_Flash_Write()
{
 80010d4:	b570      	push	{r4, r5, r6, lr}
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80010d6:	f002 fe25 	bl	8003d24 <HAL_FLASH_Unlock>

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 80010da:	4e20      	ldr	r6, [pc, #128]	; (800115c <Echo_Flash_Write+0x88>)
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff ffd9 	bl	8001094 <GetPage>
 80010e2:	4605      	mov	r5, r0
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <Echo_Flash_Write+0x8c>)
 80010e6:	6018      	str	r0, [r3, #0]
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80010e8:	481e      	ldr	r0, [pc, #120]	; (8001164 <Echo_Flash_Write+0x90>)
 80010ea:	f7ff ffd3 	bl	8001094 <GetPage>
 80010ee:	1b44      	subs	r4, r0, r5
 80010f0:	3401      	adds	r4, #1
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <Echo_Flash_Write+0x94>)
 80010f4:	601c      	str	r4, [r3, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80010f6:	4630      	mov	r0, r6
 80010f8:	f7ff ffea 	bl	80010d0 <GetBank>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <Echo_Flash_Write+0x98>)
 8001100:	6010      	str	r0, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <Echo_Flash_Write+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	6002      	str	r2, [r0, #0]
	EraseInitStruct.Banks = BankNumber;
 8001108:	6043      	str	r3, [r0, #4]
	EraseInitStruct.Page = FirstPage;
 800110a:	6085      	str	r5, [r0, #8]
	EraseInitStruct.NbPages = NbOfPages;
 800110c:	60c4      	str	r4, [r0, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800110e:	4919      	ldr	r1, [pc, #100]	; (8001174 <Echo_Flash_Write+0xa0>)
 8001110:	f002 ff12 	bl	8003f38 <HAL_FLASHEx_Erase>
 8001114:	b9a8      	cbnz	r0, 8001142 <Echo_Flash_Write+0x6e>
 8001116:	4604      	mov	r4, r0
		/*Error occurred while page erase.*/
		return HAL_FLASH_GetError();
	}

	/* Program the user Flash area word by word*/
	Address = FLASH_USER_START_ADDR;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <Echo_Flash_Write+0xa4>)
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <Echo_Flash_Write+0x88>)
 800111c:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <Echo_Flash_Write+0xa4>)
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <Echo_Flash_Write+0x90>)
 8001124:	4299      	cmp	r1, r3
 8001126:	d214      	bcs.n	8001152 <Echo_Flash_Write+0x7e>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <Echo_Flash_Write+0xa8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	2000      	movs	r0, #0
 8001132:	f002 fe53 	bl	8003ddc <HAL_FLASH_Program>
 8001136:	b940      	cbnz	r0, 800114a <Echo_Flash_Write+0x76>
				== HAL_OK)
		{
			Address = Address + 4;
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <Echo_Flash_Write+0xa4>)
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	3304      	adds	r3, #4
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e7ed      	b.n	800111e <Echo_Flash_Write+0x4a>
		return HAL_FLASH_GetError();
 8001142:	f002 fe11 	bl	8003d68 <HAL_FLASH_GetError>
 8001146:	b2c4      	uxtb	r4, r0
 8001148:	e005      	b.n	8001156 <Echo_Flash_Write+0x82>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 800114a:	f002 fe0d 	bl	8003d68 <HAL_FLASH_GetError>
 800114e:	b2c4      	uxtb	r4, r0
 8001150:	e001      	b.n	8001156 <Echo_Flash_Write+0x82>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001152:	f002 fdff 	bl	8003d54 <HAL_FLASH_Lock>
	return HAL_OK;
}
 8001156:	4620      	mov	r0, r4
 8001158:	bd70      	pop	{r4, r5, r6, pc}
 800115a:	bf00      	nop
 800115c:	0801e000 	.word	0x0801e000
 8001160:	2000024c 	.word	0x2000024c
 8001164:	0801ffff 	.word	0x0801ffff
 8001168:	20000250 	.word	0x20000250
 800116c:	20000238 	.word	0x20000238
 8001170:	2000023c 	.word	0x2000023c
 8001174:	20000254 	.word	0x20000254
 8001178:	20000234 	.word	0x20000234
 800117c:	20000008 	.word	0x20000008

08001180 <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <Echo_Flash_Read+0x2c>)
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <Echo_Flash_Read+0x30>)
 8001184:	6810      	ldr	r0, [r2, #0]
 8001186:	6018      	str	r0, [r3, #0]
 8001188:	8892      	ldrh	r2, [r2, #4]
 800118a:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b93b      	cbnz	r3, 80011a0 <Echo_Flash_Read+0x20>
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Echo_Flash_Read+0x2c>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	b933      	cbnz	r3, 80011a4 <Echo_Flash_Read+0x24>
			&& pwm_param.pulse_width == 0)
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <Echo_Flash_Read+0x2c>)
 8001198:	885b      	ldrh	r3, [r3, #2]
 800119a:	b12b      	cbz	r3, 80011a8 <Echo_Flash_Read+0x28>
	{
		return HAL_ERROR;
	}
	else
	{
		return HAL_OK;
 800119c:	2000      	movs	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	2000      	movs	r0, #0
 80011a2:	4770      	bx	lr
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr
		return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
	}
}
 80011aa:	4770      	bx	lr
 80011ac:	200003c4 	.word	0x200003c4
 80011b0:	0801e000 	.word	0x0801e000

080011b4 <Echo_LED_CTRL>:
	ECHO_LED_ON = false;
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
 80011b4:	b508      	push	{r3, lr}
	if (colors == ECHO_LED_COLOR_NONE)
 80011b6:	b140      	cbz	r0, 80011ca <Echo_LED_CTRL+0x16>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 80011b8:	f010 0f02 	tst.w	r0, #2
 80011bc:	d00b      	beq.n	80011d6 <Echo_LED_CTRL+0x22>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2108      	movs	r1, #8
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <Echo_LED_CTRL+0x30>)
 80011c4:	f003 f813 	bl	80041ee <HAL_GPIO_WritePin>
	Echo_LED_Blue_On();
	else
	Echo_LED_Blue_Off();
#endif
	}
}
 80011c8:	bd08      	pop	{r3, pc}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2108      	movs	r1, #8
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <Echo_LED_CTRL+0x30>)
 80011d0:	f003 f80d 	bl	80041ee <HAL_GPIO_WritePin>
}
 80011d4:	e7f8      	b.n	80011c8 <Echo_LED_CTRL+0x14>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2108      	movs	r1, #8
 80011da:	4802      	ldr	r0, [pc, #8]	; (80011e4 <Echo_LED_CTRL+0x30>)
 80011dc:	f003 f807 	bl	80041ee <HAL_GPIO_WritePin>
}
 80011e0:	e7f2      	b.n	80011c8 <Echo_LED_CTRL+0x14>
 80011e2:	bf00      	nop
 80011e4:	48000400 	.word	0x48000400

080011e8 <Echo_LED_Init>:

void Echo_LED_Init(void)
{
 80011e8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2108      	movs	r1, #8
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <Echo_LED_Init+0x14>)
 80011f0:	f002 fffd 	bl	80041ee <HAL_GPIO_WritePin>
	Echo_LED_Off_All();
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <Echo_LED_Init+0x18>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	735a      	strb	r2, [r3, #13]
}
 80011fa:	bd08      	pop	{r3, pc}
 80011fc:	48000400 	.word	0x48000400
 8001200:	20000258 	.word	0x20000258

08001204 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 8001204:	b538      	push	{r3, r4, r5, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <Echo_LED_Enable+0x20>)
 8001208:	f006 fc22 	bl	8007a50 <puts>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 800120c:	4d06      	ldr	r5, [pc, #24]	; (8001228 <Echo_LED_Enable+0x24>)
 800120e:	2400      	movs	r4, #0
 8001210:	736c      	strb	r4, [r5, #13]
	ECHO_LED_ON = false;
 8001212:	702c      	strb	r4, [r5, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001214:	4622      	mov	r2, r4
 8001216:	2108      	movs	r1, #8
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <Echo_LED_Enable+0x28>)
 800121a:	f002 ffe8 	bl	80041ee <HAL_GPIO_WritePin>
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 800121e:	60ac      	str	r4, [r5, #8]
 8001220:	732c      	strb	r4, [r5, #12]
}
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	0800bf90 	.word	0x0800bf90
 8001228:	20000258 	.word	0x20000258
 800122c:	48000400 	.word	0x48000400

08001230 <Echo_LED_StateSet>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_LED_StateSet(echo_led_sate_t led_state)
{
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	4604      	mov	r4, r0
	echo_led_state_ind_t led_ind;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <Echo_LED_StateSet+0x74>)
 8001238:	f006 fc0a 	bl	8007a50 <puts>
#endif
	Echo_LED_Enable();
 800123c:	f7ff ffe2 	bl	8001204 <Echo_LED_Enable>

	if (ECHO_LED_IND_DISABLED() == true)
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <Echo_LED_StateSet+0x78>)
 8001242:	7b1b      	ldrb	r3, [r3, #12]
 8001244:	bb13      	cbnz	r3, 800128c <Echo_LED_StateSet+0x5c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
 8001246:	2c02      	cmp	r4, #2
 8001248:	d900      	bls.n	800124c <Echo_LED_StateSet+0x1c>
		led_state = ECHO_LED_STATE_NONE;
 800124a:	2400      	movs	r4, #0

	if (led_state == ECHO_LED_CUR_STATE)
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <Echo_LED_StateSet+0x78>)
 800124e:	7b5b      	ldrb	r3, [r3, #13]
 8001250:	42a3      	cmp	r3, r4
 8001252:	d01b      	beq.n	800128c <Echo_LED_StateSet+0x5c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <Echo_LED_StateSet+0x7c>)
 8001256:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800125a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800125e:	f813 6012 	ldrb.w	r6, [r3, r2, lsl #1]
 8001262:	f88d 6000 	strb.w	r6, [sp]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 8001266:	884d      	ldrh	r5, [r1, #2]
 8001268:	f8ad 5002 	strh.w	r5, [sp, #2]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);
 800126c:	888b      	ldrh	r3, [r1, #4]
 800126e:	f8ad 3004 	strh.w	r3, [sp, #4]

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff ff9e 	bl	80011b4 <Echo_LED_CTRL>

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 8001278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127c:	429d      	cmp	r5, r3
 800127e:	d107      	bne.n	8001290 <Echo_LED_StateSet+0x60>
	{
		ECHO_LED_ON = false;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <Echo_LED_StateSet+0x78>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		ECHO_LED_TIME_TICK = 0;
 8001286:	605a      	str	r2, [r3, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <Echo_LED_StateSet+0x78>)
 800128a:	735c      	strb	r4, [r3, #13]

}
 800128c:	b002      	add	sp, #8
 800128e:	bd70      	pop	{r4, r5, r6, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 8001290:	4630      	mov	r0, r6
 8001292:	f7ff ff8f 	bl	80011b4 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001296:	4d04      	ldr	r5, [pc, #16]	; (80012a8 <Echo_LED_StateSet+0x78>)
 8001298:	2301      	movs	r3, #1
 800129a:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800129c:	f001 fb1a 	bl	80028d4 <HAL_GetTick>
 80012a0:	6068      	str	r0, [r5, #4]
 80012a2:	e7f1      	b.n	8001288 <Echo_LED_StateSet+0x58>
 80012a4:	0800bfa4 	.word	0x0800bfa4
 80012a8:	20000258 	.word	0x20000258
 80012ac:	0800bfd0 	.word	0x0800bfd0

080012b0 <Echo_LED_Handle>:
}
void Echo_LED_Handle(void)
{
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <Echo_LED_Handle+0xd8>)
 80012b2:	7b5b      	ldrb	r3, [r3, #13]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d065      	beq.n	8001384 <Echo_LED_Handle+0xd4>
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	b082      	sub	sp, #8
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d838      	bhi.n	8001332 <Echo_LED_Handle+0x82>
		Echo_LED_State_Reset();
		return;
	}

	/* Check timeout of LED indication */
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 80012c0:	4a31      	ldr	r2, [pc, #196]	; (8001388 <Echo_LED_Handle+0xd8>)
 80012c2:	6892      	ldr	r2, [r2, #8]
 80012c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d03c      	beq.n	8001346 <Echo_LED_Handle+0x96>
#endif
		Echo_LED_State_Reset();
		ECHO_LED_TIMED_OUT = true;
		return;
	}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 80012cc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80012d0:	428a      	cmp	r2, r1
 80012d2:	d836      	bhi.n	8001342 <Echo_LED_Handle+0x92>
	{
		ECHO_LED_TIMEOUT_TICK++;
 80012d4:	3201      	adds	r2, #1
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <Echo_LED_Handle+0xd8>)
 80012d8:	608a      	str	r2, [r1, #8]
	else
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 80012da:	4a2c      	ldr	r2, [pc, #176]	; (800138c <Echo_LED_Handle+0xdc>)
 80012dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80012e0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80012e4:	f812 5011 	ldrb.w	r5, [r2, r1, lsl #1]
 80012e8:	f88d 5000 	strb.w	r5, [sp]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 80012ec:	8844      	ldrh	r4, [r0, #2]
 80012ee:	f8ad 4002 	strh.w	r4, [sp, #2]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 80012f2:	8886      	ldrh	r6, [r0, #4]
 80012f4:	f8ad 6004 	strh.w	r6, [sp, #4]

	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 80012f8:	1e63      	subs	r3, r4, #1
 80012fa:	b29b      	uxth	r3, r3
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 80012fc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001300:	4293      	cmp	r3, r2
 8001302:	d81e      	bhi.n	8001342 <Echo_LED_Handle+0x92>
	{
		return;
	}

	if (ECHO_LED_ON == false
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b35b      	cbz	r3, 8001362 <Echo_LED_Handle+0xb2>
	{
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}
	else if (ECHO_LED_ON == true
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <Echo_LED_Handle+0xd8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b1c3      	cbz	r3, 8001342 <Echo_LED_Handle+0x92>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 8001310:	f001 fae0 	bl	80028d4 <HAL_GetTick>
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	1ac0      	subs	r0, r0, r3
 800131a:	42b0      	cmp	r0, r6
 800131c:	d311      	bcc.n	8001342 <Echo_LED_Handle+0x92>
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ff48 	bl	80011b4 <Echo_LED_CTRL>
		ECHO_LED_ON = false;
 8001324:	4c18      	ldr	r4, [pc, #96]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001326:	2300      	movs	r3, #0
 8001328:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800132a:	f001 fad3 	bl	80028d4 <HAL_GetTick>
 800132e:	6060      	str	r0, [r4, #4]
 8001330:	e007      	b.n	8001342 <Echo_LED_Handle+0x92>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001334:	2200      	movs	r2, #0
 8001336:	735a      	strb	r2, [r3, #13]
	ECHO_LED_ON = false;
 8001338:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800133a:	2108      	movs	r1, #8
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <Echo_LED_Handle+0xe0>)
 800133e:	f002 ff56 	bl	80041ee <HAL_GPIO_WritePin>
	}
}
 8001342:	b002      	add	sp, #8
 8001344:	bd70      	pop	{r4, r5, r6, pc}
		ECHO_SHELL_PRINT(("LED IND Timeout\r\n"));
 8001346:	4813      	ldr	r0, [pc, #76]	; (8001394 <Echo_LED_Handle+0xe4>)
 8001348:	f006 fb82 	bl	8007a50 <puts>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 800134c:	4c0e      	ldr	r4, [pc, #56]	; (8001388 <Echo_LED_Handle+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	7362      	strb	r2, [r4, #13]
	ECHO_LED_ON = false;
 8001352:	7022      	strb	r2, [r4, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001354:	2108      	movs	r1, #8
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <Echo_LED_Handle+0xe0>)
 8001358:	f002 ff49 	bl	80041ee <HAL_GPIO_WritePin>
		ECHO_LED_TIMED_OUT = true;
 800135c:	2301      	movs	r3, #1
 800135e:	7323      	strb	r3, [r4, #12]
		return;
 8001360:	e7ef      	b.n	8001342 <Echo_LED_Handle+0x92>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 8001362:	f001 fab7 	bl	80028d4 <HAL_GetTick>
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	1ac0      	subs	r0, r0, r3
 800136c:	42a0      	cmp	r0, r4
 800136e:	d3cc      	bcc.n	800130a <Echo_LED_Handle+0x5a>
		Echo_LED_CTRL(led_ind.led_colors);
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff ff1f 	bl	80011b4 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001376:	4c04      	ldr	r4, [pc, #16]	; (8001388 <Echo_LED_Handle+0xd8>)
 8001378:	2301      	movs	r3, #1
 800137a:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800137c:	f001 faaa 	bl	80028d4 <HAL_GetTick>
 8001380:	6060      	str	r0, [r4, #4]
 8001382:	e7de      	b.n	8001342 <Echo_LED_Handle+0x92>
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000258 	.word	0x20000258
 800138c:	0800bfd0 	.word	0x0800bfd0
 8001390:	48000400 	.word	0x48000400
 8001394:	0800bfbc 	.word	0x0800bfbc

08001398 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001398:	b500      	push	{lr}
 800139a:	b083      	sub	sp, #12
 800139c:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 800139e:	280a      	cmp	r0, #10
 80013a0:	d00a      	beq.n	80013b8 <__io_putchar+0x20>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	2201      	movs	r2, #1
 80013a8:	a901      	add	r1, sp, #4
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <__io_putchar+0x30>)
 80013ac:	f005 fa97 	bl	80068de <HAL_UART_Transmit>
	return ch;
}
 80013b0:	9801      	ldr	r0, [sp, #4]
 80013b2:	b003      	add	sp, #12
 80013b4:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 80013b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013bc:	2201      	movs	r2, #1
 80013be:	4903      	ldr	r1, [pc, #12]	; (80013cc <__io_putchar+0x34>)
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <__io_putchar+0x30>)
 80013c2:	f005 fa8c 	bl	80068de <HAL_UART_Transmit>
 80013c6:	e7ec      	b.n	80013a2 <__io_putchar+0xa>
 80013c8:	20000880 	.word	0x20000880
 80013cc:	0800c39c 	.word	0x0800c39c

080013d0 <Echo_ShellPrint_Char>:

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
	uint16_t i;

	if (len == 0)
 80013d0:	b179      	cbz	r1, 80013f2 <Echo_ShellPrint_Char+0x22>
{
 80013d2:	b570      	push	{r4, r5, r6, lr}
 80013d4:	4605      	mov	r5, r0
 80013d6:	460e      	mov	r6, r1
		return;

	for (i = 0; i < len; i++)
 80013d8:	2400      	movs	r4, #0
 80013da:	e004      	b.n	80013e6 <Echo_ShellPrint_Char+0x16>
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 80013dc:	5d28      	ldrb	r0, [r5, r4]
 80013de:	f006 fab3 	bl	8007948 <putchar>
	for (i = 0; i < len; i++)
 80013e2:	3401      	adds	r4, #1
 80013e4:	b2a4      	uxth	r4, r4
 80013e6:	42b4      	cmp	r4, r6
 80013e8:	d3f8      	bcc.n	80013dc <Echo_ShellPrint_Char+0xc>
	}

	ECHO_SHELL_PRINT(("\n"));
 80013ea:	200a      	movs	r0, #10
 80013ec:	f006 faac 	bl	8007948 <putchar>
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	4770      	bx	lr

080013f4 <Echo_Print_Manual>:

/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
 80013f4:	b508      	push	{r3, lr}
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 80013f6:	4b02      	ldr	r3, [pc, #8]	; (8001400 <Echo_Print_Manual+0xc>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f006 fb29 	bl	8007a50 <puts>
}
 80013fe:	bd08      	pop	{r3, pc}
 8001400:	20000000 	.word	0x20000000

08001404 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001404:	b500      	push	{lr}
 8001406:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 8001408:	2100      	movs	r1, #0
 800140a:	9100      	str	r1, [sp, #0]
 800140c:	2224      	movs	r2, #36	; 0x24
 800140e:	a801      	add	r0, sp, #4
 8001410:	f005 fc00 	bl	8006c14 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <Echo_Print_Version+0x28>)
 8001416:	4906      	ldr	r1, [pc, #24]	; (8001430 <Echo_Print_Version+0x2c>)
 8001418:	4668      	mov	r0, sp
 800141a:	f006 fb27 	bl	8007a6c <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 800141e:	4668      	mov	r0, sp
 8001420:	f006 fb16 	bl	8007a50 <puts>
}
 8001424:	b00b      	add	sp, #44	; 0x2c
 8001426:	f85d fb04 	ldr.w	pc, [sp], #4
 800142a:	bf00      	nop
 800142c:	0800bfe4 	.word	0x0800bfe4
 8001430:	0800bff0 	.word	0x0800bff0

08001434 <Echo_Shell_Input_Print>:
/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
	if (echo_uart2_rcv_byte != 0)
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <Echo_Shell_Input_Print+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b903      	cbnz	r3, 800143c <Echo_Shell_Input_Print+0x8>
 800143a:	4770      	bx	lr
{
 800143c:	b510      	push	{r4, lr}
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 800143e:	4c05      	ldr	r4, [pc, #20]	; (8001454 <Echo_Shell_Input_Print+0x20>)
 8001440:	230a      	movs	r3, #10
 8001442:	2201      	movs	r2, #1
 8001444:	4621      	mov	r1, r4
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <Echo_Shell_Input_Print+0x24>)
 8001448:	f005 fa49 	bl	80068de <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	7023      	strb	r3, [r4, #0]
	}
}
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	200004d0 	.word	0x200004d0
 8001458:	20000880 	.word	0x20000880

0800145c <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 800145c:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 800145e:	4c05      	ldr	r4, [pc, #20]	; (8001474 <Echo_Shell_Init+0x18>)
 8001460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001464:	2100      	movs	r1, #0
 8001466:	1c60      	adds	r0, r4, #1
 8001468:	f005 fbd4 	bl	8006c14 <memset>
	SHELL_MSG_RCV_POS = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	7023      	strb	r3, [r4, #0]
}
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	20000268 	.word	0x20000268

08001478 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 8001478:	b538      	push	{r3, r4, r5, lr}
 800147a:	4605      	mov	r5, r0
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 800147c:	2400      	movs	r4, #0
 800147e:	2c05      	cmp	r4, #5
 8001480:	d80c      	bhi.n	800149c <Echo_AdminCMD_Check+0x24>
	{
		if (strncmp((const char*) data,
				(const char*) admin_cmd_str_table[admin_cmd_cnt].str,
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <Echo_AdminCMD_Check+0x58>)
				admin_cmd_str_table[admin_cmd_cnt].len) == 0)
 8001484:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
		if (strncmp((const char*) data,
 8001488:	7912      	ldrb	r2, [r2, #4]
 800148a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 800148e:	4628      	mov	r0, r5
 8001490:	f006 fb85 	bl	8007b9e <strncmp>
 8001494:	b110      	cbz	r0, 800149c <Echo_AdminCMD_Check+0x24>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 8001496:	3401      	adds	r4, #1
 8001498:	b2e4      	uxtb	r4, r4
 800149a:	e7f0      	b.n	800147e <Echo_AdminCMD_Check+0x6>
		{
			break;
		}
	}
	switch (admin_cmd_cnt)
 800149c:	2c05      	cmp	r4, #5
 800149e:	d806      	bhi.n	80014ae <Echo_AdminCMD_Check+0x36>
 80014a0:	e8df f004 	tbb	[pc, r4]
 80014a4:	0c090603 	.word	0x0c090603
 80014a8:	120f      	.short	0x120f
	{
	case START:
		Echo_Set_FSM_State_Start();
 80014aa:	f000 f8c5 	bl	8001638 <Echo_Set_FSM_State_Start>
		break;

	default:
		break;
	}
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
		Echo_Set_FSM_State_Stop();
 80014b0:	f000 f8c8 	bl	8001644 <Echo_Set_FSM_State_Stop>
		break;
 80014b4:	e7fb      	b.n	80014ae <Echo_AdminCMD_Check+0x36>
		Echo_Flash_Write();
 80014b6:	f7ff fe0d 	bl	80010d4 <Echo_Flash_Write>
		break;
 80014ba:	e7f8      	b.n	80014ae <Echo_AdminCMD_Check+0x36>
		Echo_Factory_Reset();
 80014bc:	f000 fa52 	bl	8001964 <Echo_Factory_Reset>
		break;
 80014c0:	e7f5      	b.n	80014ae <Echo_AdminCMD_Check+0x36>
		Echo_Print_Manual();
 80014c2:	f7ff ff97 	bl	80013f4 <Echo_Print_Manual>
		break;
 80014c6:	e7f2      	b.n	80014ae <Echo_AdminCMD_Check+0x36>
		Echo_Print_Version();
 80014c8:	f7ff ff9c 	bl	8001404 <Echo_Print_Version>
}
 80014cc:	e7ef      	b.n	80014ae <Echo_AdminCMD_Check+0x36>
 80014ce:	bf00      	nop
 80014d0:	0800c2dc 	.word	0x0800c2dc

080014d4 <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4605      	mov	r5, r0
 80014d8:	460e      	mov	r6, r1
	uint8_t param_cmd_cnt = 0;

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 80014da:	2400      	movs	r4, #0
 80014dc:	2c08      	cmp	r4, #8
 80014de:	d80c      	bhi.n	80014fa <Echo_ParameterCMD_Check+0x26>
	{
		if (strncmp((const char*) data,
				(const char*) parameter_cmd_str_table[param_cmd_cnt].str,
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <Echo_ParameterCMD_Check+0x70>)
				parameter_cmd_str_table[param_cmd_cnt].len) == 0)
 80014e2:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
		if (strncmp((const char*) data,
 80014e6:	7912      	ldrb	r2, [r2, #4]
 80014e8:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 80014ec:	4628      	mov	r0, r5
 80014ee:	f006 fb56 	bl	8007b9e <strncmp>
 80014f2:	b110      	cbz	r0, 80014fa <Echo_ParameterCMD_Check+0x26>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 80014f4:	3401      	adds	r4, #1
 80014f6:	b2e4      	uxtb	r4, r4
 80014f8:	e7f0      	b.n	80014dc <Echo_ParameterCMD_Check+0x8>
		{
			break;
		}
	}

	switch (param_cmd_cnt)
 80014fa:	2c08      	cmp	r4, #8
 80014fc:	d80a      	bhi.n	8001514 <Echo_ParameterCMD_Check+0x40>
 80014fe:	e8df f004 	tbb	[pc, r4]
 8001502:	0a05      	.short	0x0a05
 8001504:	1b1b160f 	.word	0x1b1b160f
 8001508:	1b1b      	.short	0x1b1b
 800150a:	1b          	.byte	0x1b
 800150b:	00          	.byte	0x00
	{
	case SET_DEADTIME:
		Echo_Set_DT(data, len);
 800150c:	4631      	mov	r1, r6
 800150e:	4628      	mov	r0, r5
 8001510:	f000 fa6a 	bl	80019e8 <Echo_Set_DT>
		break;

	default:
		break;
	}
}
 8001514:	bd70      	pop	{r4, r5, r6, pc}
		Echo_Set_PW(data, len);
 8001516:	4631      	mov	r1, r6
 8001518:	4628      	mov	r0, r5
 800151a:	f000 fa7b 	bl	8001a14 <Echo_Set_PW>
		break;
 800151e:	e7f9      	b.n	8001514 <Echo_ParameterCMD_Check+0x40>
		Echo_Set_FSM_State_Stop();
 8001520:	f000 f890 	bl	8001644 <Echo_Set_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 8001524:	4631      	mov	r1, r6
 8001526:	4628      	mov	r0, r5
 8001528:	f000 fa84 	bl	8001a34 <Echo_Set_HZ>
		break;
 800152c:	e7f2      	b.n	8001514 <Echo_ParameterCMD_Check+0x40>
		Echo_Set_V_PW(data, len);
 800152e:	4631      	mov	r1, r6
 8001530:	4628      	mov	r0, r5
 8001532:	f000 f9ff 	bl	8001934 <Echo_Set_V_PW>
		break;
 8001536:	e7ed      	b.n	8001514 <Echo_ParameterCMD_Check+0x40>
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 8001538:	1f20      	subs	r0, r4, #4
 800153a:	b2c0      	uxtb	r0, r0
 800153c:	f000 f9a0 	bl	8001880 <Echo_Get_Res_Data>
}
 8001540:	e7e8      	b.n	8001514 <Echo_ParameterCMD_Check+0x40>
 8001542:	bf00      	nop
 8001544:	0800c30c 	.word	0x0800c30c

08001548 <Echo_Shell_CMD_Handle>:
{
 8001548:	b510      	push	{r4, lr}
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 800154a:	e008      	b.n	800155e <Echo_Shell_CMD_Handle+0x16>
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 800154c:	4a31      	ldr	r2, [pc, #196]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 800154e:	7811      	ldrb	r1, [r2, #0]
 8001550:	1850      	adds	r0, r2, r1
 8001552:	7043      	strb	r3, [r0, #1]
			SHELL_MSG_RCV_POS++;
 8001554:	3101      	adds	r1, #1
 8001556:	b2cc      	uxtb	r4, r1
 8001558:	7014      	strb	r4, [r2, #0]
			if (st_byte == 13)
 800155a:	2b0d      	cmp	r3, #13
 800155c:	d011      	beq.n	8001582 <Echo_Shell_CMD_Handle+0x3a>
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 800155e:	482e      	ldr	r0, [pc, #184]	; (8001618 <Echo_Shell_CMD_Handle+0xd0>)
 8001560:	f000 fbdc 	bl	8001d1c <Echo_Uart2_Get_RCV_Q>
 8001564:	b350      	cbz	r0, 80015bc <Echo_Shell_CMD_Handle+0x74>
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 8001566:	f001 f9b5 	bl	80028d4 <HAL_GetTick>
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 800156c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <Echo_Shell_CMD_Handle+0xd0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b23      	cmp	r3, #35	; 0x23
 8001576:	d0e9      	beq.n	800154c <Echo_Shell_CMD_Handle+0x4>
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	2a00      	cmp	r2, #0
 800157e:	d0ee      	beq.n	800155e <Echo_Shell_CMD_Handle+0x16>
 8001580:	e7e4      	b.n	800154c <Echo_Shell_CMD_Handle+0x4>
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001582:	2204      	movs	r2, #4
 8001584:	4925      	ldr	r1, [pc, #148]	; (800161c <Echo_Shell_CMD_Handle+0xd4>)
 8001586:	4826      	ldr	r0, [pc, #152]	; (8001620 <Echo_Shell_CMD_Handle+0xd8>)
 8001588:	f006 fb09 	bl	8007b9e <strncmp>
 800158c:	b128      	cbz	r0, 800159a <Echo_Shell_CMD_Handle+0x52>
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 800158e:	2204      	movs	r2, #4
 8001590:	4924      	ldr	r1, [pc, #144]	; (8001624 <Echo_Shell_CMD_Handle+0xdc>)
 8001592:	4823      	ldr	r0, [pc, #140]	; (8001620 <Echo_Shell_CMD_Handle+0xd8>)
 8001594:	f006 fb03 	bl	8007b9e <strncmp>
 8001598:	b958      	cbnz	r0, 80015b2 <Echo_Shell_CMD_Handle+0x6a>
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 800159a:	4621      	mov	r1, r4
 800159c:	4820      	ldr	r0, [pc, #128]	; (8001620 <Echo_Shell_CMD_Handle+0xd8>)
 800159e:	f7ff ff99 	bl	80014d4 <Echo_ParameterCMD_Check>
				Echo_Shell_Init();
 80015a2:	f7ff ff5b 	bl	800145c <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 80015a6:	f001 f995 	bl	80028d4 <HAL_GetTick>
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 80015ac:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 80015b0:	e7d5      	b.n	800155e <Echo_Shell_CMD_Handle+0x16>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 80015b2:	4621      	mov	r1, r4
 80015b4:	481a      	ldr	r0, [pc, #104]	; (8001620 <Echo_Shell_CMD_Handle+0xd8>)
 80015b6:	f7ff ff5f 	bl	8001478 <Echo_AdminCMD_Check>
 80015ba:	e7f2      	b.n	80015a2 <Echo_Shell_CMD_Handle+0x5a>
	if (SHELL_MSG_RCV_POS > 0)
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b923      	cbnz	r3, 80015cc <Echo_Shell_CMD_Handle+0x84>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 80015c2:	f000 f833 	bl	800162c <Echo_Get_FSM_State>
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d014      	beq.n	80015f4 <Echo_Shell_CMD_Handle+0xac>
}
 80015ca:	bd10      	pop	{r4, pc}
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 80015cc:	f001 f982 	bl	80028d4 <HAL_GetTick>
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 80015d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80015d6:	1ac0      	subs	r0, r0, r3
 80015d8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80015dc:	d9f1      	bls.n	80015c2 <Echo_Shell_CMD_Handle+0x7a>
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <Echo_Shell_CMD_Handle+0xe0>)
 80015e0:	f006 fa36 	bl	8007a50 <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 80015e6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80015ea:	f7ff fef1 	bl	80013d0 <Echo_ShellPrint_Char>
			Echo_Shell_Init();
 80015ee:	f7ff ff35 	bl	800145c <Echo_Shell_Init>
 80015f2:	e7e6      	b.n	80015c2 <Echo_Shell_CMD_Handle+0x7a>
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 80015f4:	f001 f96e 	bl	80028d4 <HAL_GetTick>
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 80015fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015fe:	1ac0      	subs	r0, r0, r3
 8001600:	f242 7310 	movw	r3, #10000	; 0x2710
 8001604:	4298      	cmp	r0, r3
 8001606:	d9e0      	bls.n	80015ca <Echo_Shell_CMD_Handle+0x82>
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001608:	f001 f964 	bl	80028d4 <HAL_GetTick>
 800160c:	4b01      	ldr	r3, [pc, #4]	; (8001614 <Echo_Shell_CMD_Handle+0xcc>)
 800160e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
}
 8001612:	e7da      	b.n	80015ca <Echo_Shell_CMD_Handle+0x82>
 8001614:	20000268 	.word	0x20000268
 8001618:	20000374 	.word	0x20000374
 800161c:	0800c008 	.word	0x0800c008
 8001620:	20000269 	.word	0x20000269
 8001624:	0800c010 	.word	0x0800c010
 8001628:	0800c018 	.word	0x0800c018

0800162c <Echo_Get_FSM_State>:
}

echo_state_t Echo_Get_FSM_State(void)
{
	return ECHO_CUR_STATE;
}
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <Echo_Get_FSM_State+0x8>)
 800162e:	7818      	ldrb	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000378 	.word	0x20000378

08001638 <Echo_Set_FSM_State_Start>:

void Echo_Set_FSM_State_Start()
{
	cur_state = ECHO_STATE_RUN;
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <Echo_Set_FSM_State_Start+0x8>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	4770      	bx	lr
 8001640:	20000004 	.word	0x20000004

08001644 <Echo_Set_FSM_State_Stop>:

void Echo_Set_FSM_State_Stop()
{
	cur_state = ECHO_STATE_IDLE;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <Echo_Set_FSM_State_Stop+0x8>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	4770      	bx	lr
 800164c:	20000004 	.word	0x20000004

08001650 <Echo_Set_FSM_State>:
	 }
	 */
}

void Echo_Set_FSM_State(echo_state_t state)
{
 8001650:	b510      	push	{r4, lr}
 8001652:	4604      	mov	r4, r0
	/*
	 if (ECHO_CUR_STATE == state || state >= echo_state_max)
	 return;
	 */

	switch (state)
 8001654:	2803      	cmp	r0, #3
 8001656:	d822      	bhi.n	800169e <Echo_Set_FSM_State+0x4e>
 8001658:	e8df f000 	tbb	[pc, r0]
 800165c:	1a110802 	.word	0x1a110802
	{

	case ECHO_STATE_INIT:
#ifdef DEBUG
#ifdef ECHO_PULSE_INTERRUPT
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <Echo_Set_FSM_State+0x58>)
 8001662:	f006 f9f5 	bl	8007a50 <puts>
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
#endif
		break;

	}
	ECHO_CUR_STATE = state;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <Echo_Set_FSM_State+0x5c>)
 8001668:	701c      	strb	r4, [r3, #0]
}
 800166a:	bd10      	pop	{r4, pc}
		Echo_Stim_Stop();
 800166c:	f000 fa1a 	bl	8001aa4 <Echo_Stim_Stop>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fddd 	bl	8001230 <Echo_LED_StateSet>
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <Echo_Set_FSM_State+0x60>)
 8001678:	f006 f9ea 	bl	8007a50 <puts>
		break;
 800167c:	e7f3      	b.n	8001666 <Echo_Set_FSM_State+0x16>
		Echo_Stim_Start();
 800167e:	f000 fa3b 	bl	8001af8 <Echo_Stim_Start>
		Echo_LED_StateSet(ECHO_LED_RUN);
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff fdd4 	bl	8001230 <Echo_LED_StateSet>
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <Echo_Set_FSM_State+0x64>)
 800168a:	f006 f9e1 	bl	8007a50 <puts>
		break;
 800168e:	e7ea      	b.n	8001666 <Echo_Set_FSM_State+0x16>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fdcd 	bl	8001230 <Echo_LED_StateSet>
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <Echo_Set_FSM_State+0x68>)
 8001698:	f006 f9da 	bl	8007a50 <puts>
		break;
 800169c:	e7e3      	b.n	8001666 <Echo_Set_FSM_State+0x16>
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
 800169e:	4601      	mov	r1, r0
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <Echo_Set_FSM_State+0x6c>)
 80016a2:	f006 f939 	bl	8007918 <iprintf>
		break;
 80016a6:	e7de      	b.n	8001666 <Echo_Set_FSM_State+0x16>
 80016a8:	0800c354 	.word	0x0800c354
 80016ac:	20000378 	.word	0x20000378
 80016b0:	0800c368 	.word	0x0800c368
 80016b4:	0800c37c 	.word	0x0800c37c
 80016b8:	0800c38c 	.word	0x0800c38c
 80016bc:	0800c3a0 	.word	0x0800c3a0

080016c0 <Echo_FSM_State_Init>:
{
 80016c0:	b508      	push	{r3, lr}
	ECHO_CUR_STATE = echo_state_max;
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <Echo_FSM_State_Init+0x10>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	701a      	strb	r2, [r3, #0]
	Echo_Set_FSM_State(ECHO_STATE_INIT);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ffc1 	bl	8001650 <Echo_Set_FSM_State>
}
 80016ce:	bd08      	pop	{r3, pc}
 80016d0:	20000378 	.word	0x20000378

080016d4 <Echo_FSM_State_Handle>:
{
 80016d4:	b508      	push	{r3, lr}
	if (Echo_Btn_isHandled() == true)
 80016d6:	f7ff fc8f 	bl	8000ff8 <Echo_Btn_isHandled>
 80016da:	b128      	cbz	r0, 80016e8 <Echo_FSM_State_Handle+0x14>
		if (cur_state == ECHO_STATE_IDLE)
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <Echo_FSM_State_Handle+0x48>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d008      	beq.n	80016f6 <Echo_FSM_State_Handle+0x22>
		else if (cur_state == ECHO_STATE_RUN)
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d00d      	beq.n	8001704 <Echo_FSM_State_Handle+0x30>
	if (ECHO_CUR_STATE != cur_state)
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <Echo_FSM_State_Handle+0x4c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <Echo_FSM_State_Handle+0x48>)
 80016ee:	7810      	ldrb	r0, [r2, #0]
 80016f0:	4283      	cmp	r3, r0
 80016f2:	d10d      	bne.n	8001710 <Echo_FSM_State_Handle+0x3c>
}
 80016f4:	bd08      	pop	{r3, pc}
			stop_flag = 0;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <Echo_FSM_State_Handle+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
			cur_state = ECHO_STATE_RUN;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <Echo_FSM_State_Handle+0x48>)
 80016fe:	2202      	movs	r2, #2
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e7f1      	b.n	80016e8 <Echo_FSM_State_Handle+0x14>
			stop_flag = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <Echo_FSM_State_Handle+0x50>)
 8001708:	7013      	strb	r3, [r2, #0]
			cur_state = ECHO_STATE_IDLE;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <Echo_FSM_State_Handle+0x48>)
 800170c:	7013      	strb	r3, [r2, #0]
 800170e:	e7eb      	b.n	80016e8 <Echo_FSM_State_Handle+0x14>
		Echo_Set_FSM_State(cur_state);
 8001710:	f7ff ff9e 	bl	8001650 <Echo_Set_FSM_State>
		Echo_Btn_Handled_clear();
 8001714:	f7ff fc76 	bl	8001004 <Echo_Btn_Handled_clear>
}
 8001718:	e7ec      	b.n	80016f4 <Echo_FSM_State_Handle+0x20>
 800171a:	bf00      	nop
 800171c:	20000004 	.word	0x20000004
 8001720:	20000378 	.word	0x20000378
 8001724:	20000379 	.word	0x20000379

08001728 <HAL_ADC_ConvCpltCallback>:

	echo_adc1_state.item_num++;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001728:	b508      	push	{r3, lr}
	if (hadc->Instance == hadc1.Instance)
 800172a:	6802      	ldr	r2, [r0, #0]
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_ADC_ConvCpltCallback+0x4c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d003      	beq.n	800173c <HAL_ADC_ConvCpltCallback+0x14>
		convVal[0] = ADC1_CONV_BUF[0];
		convVal[1] = ADC1_CONV_BUF[1];
		convVal[2] = ADC1_CONV_BUF[2];
		Echo_ADC_RCV_Q_Put_INLINE(ADC1_CONV_BUF[2]);
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001736:	f001 ffab 	bl	8003690 <HAL_ADC_Stop_DMA>
}
 800173a:	bd08      	pop	{r3, pc}
		convVal[0] = ADC1_CONV_BUF[0];
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_ADC_ConvCpltCallback+0x50>)
 800173e:	8811      	ldrh	r1, [r2, #0]
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_ADC_ConvCpltCallback+0x54>)
 8001742:	8019      	strh	r1, [r3, #0]
		convVal[1] = ADC1_CONV_BUF[1];
 8001744:	8851      	ldrh	r1, [r2, #2]
 8001746:	8059      	strh	r1, [r3, #2]
		convVal[2] = ADC1_CONV_BUF[2];
 8001748:	8890      	ldrh	r0, [r2, #4]
 800174a:	8098      	strh	r0, [r3, #4]
			(echo_adc1_state.q_rear + 1) % ECHO_ADC1_RCV_Q_SIZE;
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_ADC_ConvCpltCallback+0x58>)
 800174e:	8851      	ldrh	r1, [r2, #2]
 8001750:	3101      	adds	r1, #1
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001754:	fb83 c301 	smull	ip, r3, r3, r1
 8001758:	109b      	asrs	r3, r3, #2
 800175a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800175e:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
	echo_adc1_state.q_rear =
 8001762:	b29b      	uxth	r3, r3
 8001764:	8053      	strh	r3, [r2, #2]
	echo_adc1_state.queue[echo_adc1_state.q_rear] = item;
 8001766:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800176a:	80d8      	strh	r0, [r3, #6]
	echo_adc1_state.item_num++;
 800176c:	8893      	ldrh	r3, [r2, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	8093      	strh	r3, [r2, #4]
}
 8001772:	e7df      	b.n	8001734 <HAL_ADC_ConvCpltCallback+0xc>
 8001774:	200005dc 	.word	0x200005dc
 8001778:	200003a0 	.word	0x200003a0
 800177c:	2000037c 	.word	0x2000037c
 8001780:	20000384 	.word	0x20000384
 8001784:	66666667 	.word	0x66666667

08001788 <Echo_ADC_Q_Init>:
		;;
}

void Echo_ADC_Q_Init()
{
	ECHO_ADC1_STATE_RESET();
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <Echo_ADC_Q_Init+0xc>)
 800178a:	2200      	movs	r2, #0
 800178c:	801a      	strh	r2, [r3, #0]
 800178e:	805a      	strh	r2, [r3, #2]
 8001790:	809a      	strh	r2, [r3, #4]
}
 8001792:	4770      	bx	lr
 8001794:	20000384 	.word	0x20000384

08001798 <Echo_ADC1_Enable>:

void Echo_ADC1_Enable()
{
 8001798:	b508      	push	{r3, lr}
	// Enable ADC DMA
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800179a:	217f      	movs	r1, #127	; 0x7f
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <Echo_ADC1_Enable+0x28>)
 800179e:	f001 ffb8 	bl	8003712 <HAL_ADCEx_Calibration_Start>
 80017a2:	b930      	cbnz	r0, 80017b2 <Echo_ADC1_Enable+0x1a>
	{
		Error_Handler();
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM)
 80017a4:	2203      	movs	r2, #3
 80017a6:	4907      	ldr	r1, [pc, #28]	; (80017c4 <Echo_ADC1_Enable+0x2c>)
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <Echo_ADC1_Enable+0x28>)
 80017aa:	f001 fea5 	bl	80034f8 <HAL_ADC_Start_DMA>
 80017ae:	b918      	cbnz	r0, 80017b8 <Echo_ADC1_Enable+0x20>
			!= HAL_OK)
	{
		Error_Handler();
	}
	//ADC1_Conv_Waiting();
}
 80017b0:	bd08      	pop	{r3, pc}
		Error_Handler();
 80017b2:	f000 fb63 	bl	8001e7c <Error_Handler>
 80017b6:	e7f5      	b.n	80017a4 <Echo_ADC1_Enable+0xc>
		Error_Handler();
 80017b8:	f000 fb60 	bl	8001e7c <Error_Handler>
}
 80017bc:	e7f8      	b.n	80017b0 <Echo_ADC1_Enable+0x18>
 80017be:	bf00      	nop
 80017c0:	200005dc 	.word	0x200005dc
 80017c4:	200003a0 	.word	0x200003a0

080017c8 <Echo_Start_ADC_Conv>:

void Echo_Start_ADC_Conv()
{
 80017c8:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM)
 80017ca:	2203      	movs	r2, #3
 80017cc:	4904      	ldr	r1, [pc, #16]	; (80017e0 <Echo_Start_ADC_Conv+0x18>)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <Echo_Start_ADC_Conv+0x1c>)
 80017d0:	f001 fe92 	bl	80034f8 <HAL_ADC_Start_DMA>
 80017d4:	b900      	cbnz	r0, 80017d8 <Echo_Start_ADC_Conv+0x10>
			!= HAL_OK)
	{
		Error_Handler();
	}
	//ADC1_Conv_Waiting();
}
 80017d6:	bd08      	pop	{r3, pc}
		Error_Handler();
 80017d8:	f000 fb50 	bl	8001e7c <Error_Handler>
}
 80017dc:	e7fb      	b.n	80017d6 <Echo_Start_ADC_Conv+0xe>
 80017de:	bf00      	nop
 80017e0:	200003a0 	.word	0x200003a0
 80017e4:	200005dc 	.word	0x200005dc

080017e8 <Echo_Calc_Stepup_V>:

float Echo_Calc_Stepup_V(uint16_t in_adc_val, float r1, float r2)
{
 80017e8:	ee07 0a90 	vmov	s15, r0
	float f_adc_val;
	uint32_t vdda = 1800UL;
	float v_ref = (float) (vdda * 0.001);
	float v_out;

	f_adc_val = in_adc_val / 4095.f;
 80017ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001810 <Echo_Calc_Stepup_V+0x28>
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80017f8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001814 <Echo_Calc_Stepup_V+0x2c>
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001804:	ee80 7a20 	vdiv.f32	s14, s0, s1

	return v_out;
}
 8001808:	ee27 0a87 	vmul.f32	s0, s15, s14
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	457ff000 	.word	0x457ff000
 8001814:	3fe66666 	.word	0x3fe66666

08001818 <Echo_Stepup_Handle>:
		con_val[i] = (uint16_t) temp;
	}
}

void Echo_Stepup_Handle(void)
{
 8001818:	b508      	push	{r3, lr}
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 800181a:	f7ff ff07 	bl	800162c <Echo_Get_FSM_State>
 800181e:	2802      	cmp	r0, #2
 8001820:	d000      	beq.n	8001824 <Echo_Stepup_Handle+0xc>
			Echo_Start_ADC_Conv();
			st_handle_tick = HAL_GetTick();
		}
	}

}
 8001822:	bd08      	pop	{r3, pc}
		if (HAL_GetTick() - st_handle_tick >= PWR_HANDLE_PERIOD)
 8001824:	f001 f856 	bl	80028d4 <HAL_GetTick>
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <Echo_Stepup_Handle+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4298      	cmp	r0, r3
 800182e:	d0f8      	beq.n	8001822 <Echo_Stepup_Handle+0xa>
			Echo_Start_ADC_Conv();
 8001830:	f7ff ffca 	bl	80017c8 <Echo_Start_ADC_Conv>
			st_handle_tick = HAL_GetTick();
 8001834:	f001 f84e 	bl	80028d4 <HAL_GetTick>
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <Echo_Stepup_Handle+0x28>)
 800183a:	6018      	str	r0, [r3, #0]
}
 800183c:	e7f1      	b.n	8001822 <Echo_Stepup_Handle+0xa>
 800183e:	bf00      	nop
 8001840:	200003a8 	.word	0x200003a8

08001844 <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b508      	push	{r3, lr}
	if (htim->Instance == TIM16)
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800184a:	429a      	cmp	r2, r3
 800184c:	d000      	beq.n	8001850 <HAL_TIM_PeriodElapsedCallback+0xc>
			 HAL_TIM_Base_Stop_IT(&htim16);
			 }
			 */
		}
	}
}
 800184e:	bd08      	pop	{r3, pc}
		if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 8001850:	f7ff feec 	bl	800162c <Echo_Get_FSM_State>
 8001854:	2802      	cmp	r0, #2
 8001856:	d1fa      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0xa>
			Echo_ADC_Q_Init();
 8001858:	f7ff ff96 	bl	8001788 <Echo_ADC_Q_Init>
			Echo_Calc_Stepup_V(convVal[2], R1_Vstup, R2_Vstup);
 800185c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001874 <HAL_TIM_PeriodElapsedCallback+0x30>
 8001860:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001878 <HAL_TIM_PeriodElapsedCallback+0x34>
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001866:	8898      	ldrh	r0, [r3, #4]
 8001868:	f7ff ffbe 	bl	80017e8 <Echo_Calc_Stepup_V>
}
 800186c:	e7ef      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0xa>
 800186e:	bf00      	nop
 8001870:	40014400 	.word	0x40014400
 8001874:	42dc0000 	.word	0x42dc0000
 8001878:	45610000 	.word	0x45610000
 800187c:	2000037c 	.word	0x2000037c

08001880 <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 8001880:	b510      	push	{r4, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	4604      	mov	r4, r0
	char mes_head[11] =
 8001886:	2300      	movs	r3, #0
 8001888:	9305      	str	r3, [sp, #20]
 800188a:	9306      	str	r3, [sp, #24]
 800188c:	f8cd 301b 	str.w	r3, [sp, #27]
	{ '\0', };
	strcpy((char*) mes_head,
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <Echo_Get_Res_Data+0x94>)
 8001892:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 8001896:	a805      	add	r0, sp, #20
 8001898:	f006 f979 	bl	8007b8e <strcpy>
			(const char*) get_prm_cmd_str_table[select_msg].str);

	switch (select_msg)
 800189c:	2c04      	cmp	r4, #4
 800189e:	d80b      	bhi.n	80018b8 <Echo_Get_Res_Data+0x38>
 80018a0:	e8df f004 	tbb	[pc, r4]
 80018a4:	20181003 	.word	0x20181003
 80018a8:	28          	.byte	0x28
 80018a9:	00          	.byte	0x00
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <Echo_Get_Res_Data+0x98>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	aa05      	add	r2, sp, #20
 80018b0:	491a      	ldr	r1, [pc, #104]	; (800191c <Echo_Get_Res_Data+0x9c>)
 80018b2:	481b      	ldr	r0, [pc, #108]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 80018b4:	f006 f8da 	bl	8007a6c <siprintf>
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
		break;
	default:
		break;
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 80018b8:	4919      	ldr	r1, [pc, #100]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 80018ba:	481a      	ldr	r0, [pc, #104]	; (8001924 <Echo_Get_Res_Data+0xa4>)
 80018bc:	f006 f82c 	bl	8007918 <iprintf>
}
 80018c0:	b008      	add	sp, #32
 80018c2:	bd10      	pop	{r4, pc}
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <Echo_Get_Res_Data+0x98>)
 80018c6:	885b      	ldrh	r3, [r3, #2]
 80018c8:	aa05      	add	r2, sp, #20
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <Echo_Get_Res_Data+0x9c>)
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 80018ce:	f006 f8cd 	bl	8007a6c <siprintf>
		break;
 80018d2:	e7f1      	b.n	80018b8 <Echo_Get_Res_Data+0x38>
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <Echo_Get_Res_Data+0x98>)
 80018d6:	889b      	ldrh	r3, [r3, #4]
 80018d8:	aa05      	add	r2, sp, #20
 80018da:	4913      	ldr	r1, [pc, #76]	; (8001928 <Echo_Get_Res_Data+0xa8>)
 80018dc:	4810      	ldr	r0, [pc, #64]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 80018de:	f006 f8c5 	bl	8007a6c <siprintf>
		break;
 80018e2:	e7e9      	b.n	80018b8 <Echo_Get_Res_Data+0x38>
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <Echo_Get_Res_Data+0xac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	aa05      	add	r2, sp, #20
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <Echo_Get_Res_Data+0x9c>)
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 80018ee:	f006 f8bd 	bl	8007a6c <siprintf>
		break;
 80018f2:	e7e1      	b.n	80018b8 <Echo_Get_Res_Data+0x38>
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <Echo_Get_Res_Data+0x98>)
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
 80018f6:	885a      	ldrh	r2, [r3, #2]
 80018f8:	8899      	ldrh	r1, [r3, #4]
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <Echo_Get_Res_Data+0xac>)
 80018fc:	6800      	ldr	r0, [r0, #0]
 80018fe:	9002      	str	r0, [sp, #8]
 8001900:	9101      	str	r1, [sp, #4]
 8001902:	9200      	str	r2, [sp, #0]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	aa05      	add	r2, sp, #20
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <Echo_Get_Res_Data+0xb0>)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <Echo_Get_Res_Data+0xa0>)
 800190c:	f006 f8ae 	bl	8007a6c <siprintf>
		break;
 8001910:	e7d2      	b.n	80018b8 <Echo_Get_Res_Data+0x38>
 8001912:	bf00      	nop
 8001914:	0800c4a4 	.word	0x0800c4a4
 8001918:	200003c4 	.word	0x200003c4
 800191c:	0800c3b8 	.word	0x0800c3b8
 8001920:	200003cc 	.word	0x200003cc
 8001924:	0800c40c 	.word	0x0800c40c
 8001928:	0800c3c8 	.word	0x0800c3c8
 800192c:	2000000c 	.word	0x2000000c
 8001930:	0800c3d8 	.word	0x0800c3d8

08001934 <Echo_Set_V_PW>:
{
 8001934:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step_tv);
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <Echo_Set_V_PW+0x24>)
 8001938:	4908      	ldr	r1, [pc, #32]	; (800195c <Echo_Set_V_PW+0x28>)
 800193a:	f006 f8b7 	bl	8007aac <siscanf>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 800193e:	f7ff fe75 	bl	800162c <Echo_Get_FSM_State>
 8001942:	2802      	cmp	r0, #2
 8001944:	d003      	beq.n	800194e <Echo_Set_V_PW+0x1a>
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001946:	2003      	movs	r0, #3
 8001948:	f7ff ff9a 	bl	8001880 <Echo_Get_Res_Data>
}
 800194c:	bd08      	pop	{r3, pc}
		HAL_TIM_Base_Start_IT(&htim16);
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <Echo_Set_V_PW+0x2c>)
 8001950:	f003 fbcc 	bl	80050ec <HAL_TIM_Base_Start_IT>
 8001954:	e7f7      	b.n	8001946 <Echo_Set_V_PW+0x12>
 8001956:	bf00      	nop
 8001958:	2000000c 	.word	0x2000000c
 800195c:	0800c414 	.word	0x0800c414
 8001960:	20000764 	.word	0x20000764

08001964 <Echo_Factory_Reset>:

/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
 8001964:	b508      	push	{r3, lr}
	pwm_param.dead_time = 20;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <Echo_Factory_Reset+0x20>)
 8001968:	2214      	movs	r2, #20
 800196a:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
 800196c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001970:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 100;
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	809a      	strh	r2, [r3, #4]
	v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <Echo_Factory_Reset+0x24>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 800197c:	f7ff fbaa 	bl	80010d4 <Echo_Flash_Write>
}
 8001980:	bd08      	pop	{r3, pc}
 8001982:	bf00      	nop
 8001984:	200003c4 	.word	0x200003c4
 8001988:	2000000c 	.word	0x2000000c

0800198c <Echo_Pulse_Prm_Config>:
#ifdef ECHO_PULSE_DMA
/*
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_Prm_Config()
{
 800198c:	b410      	push	{r4}

	/* HZ SETTING */
	TIM2->CNT = 0;
 800198e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001992:	2300      	movs	r3, #0
 8001994:	6243      	str	r3, [r0, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001996:	4910      	ldr	r1, [pc, #64]	; (80019d8 <Echo_Pulse_Prm_Config+0x4c>)
 8001998:	888a      	ldrh	r2, [r1, #4]
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <Echo_Pulse_Prm_Config+0x50>)
 800199c:	fb93 f3f2 	sdiv	r3, r3, r2
 80019a0:	3b01      	subs	r3, #1
 80019a2:	62c3      	str	r3, [r0, #44]	; 0x2c

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 80019a4:	884a      	ldrh	r2, [r1, #2]
 80019a6:	f102 030a 	add.w	r3, r2, #10
 80019aa:	6383      	str	r3, [r0, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 80019ac:	880b      	ldrh	r3, [r1, #0]
 80019ae:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 80019b2:	f100 040a 	add.w	r4, r0, #10
 80019b6:	490a      	ldr	r1, [pc, #40]	; (80019e0 <Echo_Pulse_Prm_Config+0x54>)
 80019b8:	600c      	str	r4, [r1, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 80019ba:	4413      	add	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 80019be:	3205      	adds	r2, #5
 80019c0:	4908      	ldr	r1, [pc, #32]	; (80019e4 <Echo_Pulse_Prm_Config+0x58>)
 80019c2:	600a      	str	r2, [r1, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 80019c4:	3305      	adds	r3, #5
 80019c6:	604b      	str	r3, [r1, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 80019c8:	3005      	adds	r0, #5
 80019ca:	6088      	str	r0, [r1, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 80019cc:	2305      	movs	r3, #5
 80019ce:	60cb      	str	r3, [r1, #12]
}
 80019d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200003c4 	.word	0x200003c4
 80019dc:	000f4240 	.word	0x000f4240
 80019e0:	200003ac 	.word	0x200003ac
 80019e4:	200003b4 	.word	0x200003b4

080019e8 <Echo_Set_DT>:
{
 80019e8:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 80019ea:	4c08      	ldr	r4, [pc, #32]	; (8001a0c <Echo_Set_DT+0x24>)
 80019ec:	4622      	mov	r2, r4
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <Echo_Set_DT+0x28>)
 80019f0:	f006 f85c 	bl	8007aac <siscanf>
	if (pwm_param.dead_time < (GLICH_DEBOUNCING_TIME * 2))
 80019f4:	8823      	ldrh	r3, [r4, #0]
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d801      	bhi.n	80019fe <Echo_Set_DT+0x16>
		pwm_param.dead_time = GLICH_DEBOUNCING_TIME * 2;
 80019fa:	220a      	movs	r2, #10
 80019fc:	8022      	strh	r2, [r4, #0]
	Echo_Pulse_Prm_Config();
 80019fe:	f7ff ffc5 	bl	800198c <Echo_Pulse_Prm_Config>
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff ff3c 	bl	8001880 <Echo_Get_Res_Data>
}
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200003c4 	.word	0x200003c4
 8001a10:	0800c428 	.word	0x0800c428

08001a14 <Echo_Set_PW>:
{
 8001a14:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <Echo_Set_PW+0x18>)
 8001a18:	4905      	ldr	r1, [pc, #20]	; (8001a30 <Echo_Set_PW+0x1c>)
 8001a1a:	f006 f847 	bl	8007aac <siscanf>
	Echo_Pulse_Prm_Config();
 8001a1e:	f7ff ffb5 	bl	800198c <Echo_Pulse_Prm_Config>
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff ff2c 	bl	8001880 <Echo_Get_Res_Data>
}
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200003c6 	.word	0x200003c6
 8001a30:	0800c43c 	.word	0x0800c43c

08001a34 <Echo_Set_HZ>:
{
 8001a34:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 8001a36:	4c11      	ldr	r4, [pc, #68]	; (8001a7c <Echo_Set_HZ+0x48>)
 8001a38:	1d22      	adds	r2, r4, #4
 8001a3a:	4911      	ldr	r1, [pc, #68]	; (8001a80 <Echo_Set_HZ+0x4c>)
 8001a3c:	f006 f836 	bl	8007aac <siscanf>
	if (PULSE_FREQ_ARR <= (TOTAL_PULSE_WIDTH_TIME * 2))
 8001a40:	88a3      	ldrh	r3, [r4, #4]
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <Echo_Set_HZ+0x50>)
 8001a44:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a48:	8863      	ldrh	r3, [r4, #2]
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	8821      	ldrh	r1, [r4, #0]
 8001a4e:	440b      	add	r3, r1
 8001a50:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8001a54:	dc01      	bgt.n	8001a5a <Echo_Set_HZ+0x26>
		pwm_param.pulse_freq = 1;
 8001a56:	2201      	movs	r2, #1
 8001a58:	80a2      	strh	r2, [r4, #4]
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 8001a5a:	f7ff fde7 	bl	800162c <Echo_Get_FSM_State>
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d005      	beq.n	8001a6e <Echo_Set_HZ+0x3a>
		Echo_Pulse_Prm_Config();
 8001a62:	f7ff ff93 	bl	800198c <Echo_Pulse_Prm_Config>
	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff ff0a 	bl	8001880 <Echo_Get_Res_Data>
}
 8001a6c:	bd10      	pop	{r4, pc}
		Echo_Set_FSM_State_Stop();
 8001a6e:	f7ff fde9 	bl	8001644 <Echo_Set_FSM_State_Stop>
		Echo_Pulse_Prm_Config();
 8001a72:	f7ff ff8b 	bl	800198c <Echo_Pulse_Prm_Config>
		Echo_Set_FSM_State_Start();
 8001a76:	f7ff fddf 	bl	8001638 <Echo_Set_FSM_State_Start>
 8001a7a:	e7f4      	b.n	8001a66 <Echo_Set_HZ+0x32>
 8001a7c:	200003c4 	.word	0x200003c4
 8001a80:	0800c450 	.word	0x0800c450
 8001a84:	000f4240 	.word	0x000f4240

08001a88 <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 8001a88:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <Echo_StepUP_Stop+0x14>)
 8001a8e:	f004 f94d 	bl	8005d2c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <Echo_StepUP_Stop+0x18>)
 8001a94:	f003 fb60 	bl	8005158 <HAL_TIM_Base_Stop_IT>
}
 8001a98:	bd08      	pop	{r3, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000718 	.word	0x20000718
 8001aa0:	20000764 	.word	0x20000764

08001aa4 <Echo_Stim_Stop>:
{
 8001aa4:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 8001aa6:	4c08      	ldr	r4, [pc, #32]	; (8001ac8 <Echo_Stim_Stop+0x24>)
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f004 f93e 	bl	8005d2c <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f004 f814 	bl	8005ae0 <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 8001ab8:	210c      	movs	r1, #12
 8001aba:	4620      	mov	r0, r4
 8001abc:	f004 f810 	bl	8005ae0 <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 8001ac0:	f7ff ffe2 	bl	8001a88 <Echo_StepUP_Stop>
}
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200007b0 	.word	0x200007b0

08001acc <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 8001acc:	b508      	push	{r3, lr}
	TIM1->CCR1 = v_step_val;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <Echo_StepUP_Start+0x1c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <Echo_StepUP_Start+0x20>)
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <Echo_StepUP_Start+0x24>)
 8001ada:	f004 f88f 	bl	8005bfc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <Echo_StepUP_Start+0x28>)
 8001ae0:	f003 fb04 	bl	80050ec <HAL_TIM_Base_Start_IT>
}
 8001ae4:	bd08      	pop	{r3, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200004cc 	.word	0x200004cc
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	20000718 	.word	0x20000718
 8001af4:	20000764 	.word	0x20000764

08001af8 <Echo_Stim_Start>:
{
 8001af8:	b510      	push	{r4, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig =
 8001afc:	2300      	movs	r3, #0
 8001afe:	9307      	str	r3, [sp, #28]
 8001b00:	9308      	str	r3, [sp, #32]
 8001b02:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC =
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	9304      	str	r3, [sp, #16]
 8001b0e:	9305      	str	r3, [sp, #20]
 8001b10:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 8001b12:	4840      	ldr	r0, [pc, #256]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b18:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 79;
 8001b1a:	224f      	movs	r2, #79	; 0x4f
 8001b1c:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 9999;
 8001b20:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b24:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001b2c:	f003 fcee 	bl	800550c <HAL_TIM_OC_Init>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d15d      	bne.n	8001bf0 <Echo_Stim_Start+0xf8>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b34:	4837      	ldr	r0, [pc, #220]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b36:	f003 fd19 	bl	800556c <HAL_TIM_PWM_Init>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d15b      	bne.n	8001bf6 <Echo_Stim_Start+0xfe>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b44:	a907      	add	r1, sp, #28
 8001b46:	4833      	ldr	r0, [pc, #204]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b48:	f004 f946 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d155      	bne.n	8001bfc <Echo_Stim_Start+0x104>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001b50:	2330      	movs	r3, #48	; 0x30
 8001b52:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 5;
 8001b54:	2305      	movs	r3, #5
 8001b56:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b58:	2200      	movs	r2, #0
 8001b5a:	9202      	str	r2, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5c:	9204      	str	r2, [sp, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	4669      	mov	r1, sp
 8001b60:	482c      	ldr	r0, [pc, #176]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b62:	f003 fd6f 	bl	8005644 <HAL_TIM_OC_ConfigChannel>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d14b      	bne.n	8001c02 <Echo_Stim_Start+0x10a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	; 0x60
 8001b6c:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1010;
 8001b6e:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001b72:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b74:	2204      	movs	r2, #4
 8001b76:	4669      	mov	r1, sp
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b7a:	f003 fda0 	bl	80056be <HAL_TIM_PWM_ConfigChannel>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d142      	bne.n	8001c08 <Echo_Stim_Start+0x110>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001b82:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001b84:	6802      	ldr	r2, [r0, #0]
 8001b86:	6993      	ldr	r3, [r2, #24]
 8001b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b8c:	6193      	str	r3, [r2, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001b8e:	2330      	movs	r3, #48	; 0x30
 8001b90:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1040;
 8001b92:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001b96:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b98:	220c      	movs	r2, #12
 8001b9a:	4669      	mov	r1, sp
 8001b9c:	f003 fd52 	bl	8005644 <HAL_TIM_OC_ConfigChannel>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d134      	bne.n	8001c0e <Echo_Stim_Start+0x116>
	HAL_TIM_MspPostInit(&htim2);
 8001ba4:	4c1b      	ldr	r4, [pc, #108]	; (8001c14 <Echo_Stim_Start+0x11c>)
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f000 fc80 	bl	80024ac <HAL_TIM_MspPostInit>
	Echo_Pulse_Prm_Config();
 8001bac:	f7ff feee 	bl	800198c <Echo_Pulse_Prm_Config>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f004 f822 	bl	8005bfc <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 8001bb8:	2304      	movs	r3, #4
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <Echo_Stim_Start+0x120>)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f003 fe2a 	bl	8005818 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <Echo_Stim_Start+0x124>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f023 0306 	bic.w	r3, r3, #6
 8001bce:	6013      	str	r3, [r2, #0]
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <Echo_Stim_Start+0x128>)
 8001bd4:	210c      	movs	r1, #12
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f003 fe1e 	bl	8005818 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <Echo_Stim_Start+0x12c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f023 0306 	bic.w	r3, r3, #6
 8001be6:	6013      	str	r3, [r2, #0]
	Echo_StepUP_Start();
 8001be8:	f7ff ff70 	bl	8001acc <Echo_StepUP_Start>
}
 8001bec:	b00a      	add	sp, #40	; 0x28
 8001bee:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001bf0:	f000 f944 	bl	8001e7c <Error_Handler>
 8001bf4:	e79e      	b.n	8001b34 <Echo_Stim_Start+0x3c>
		Error_Handler();
 8001bf6:	f000 f941 	bl	8001e7c <Error_Handler>
 8001bfa:	e7a0      	b.n	8001b3e <Echo_Stim_Start+0x46>
		Error_Handler();
 8001bfc:	f000 f93e 	bl	8001e7c <Error_Handler>
 8001c00:	e7a6      	b.n	8001b50 <Echo_Stim_Start+0x58>
		Error_Handler();
 8001c02:	f000 f93b 	bl	8001e7c <Error_Handler>
 8001c06:	e7b0      	b.n	8001b6a <Echo_Stim_Start+0x72>
		Error_Handler();
 8001c08:	f000 f938 	bl	8001e7c <Error_Handler>
 8001c0c:	e7b9      	b.n	8001b82 <Echo_Stim_Start+0x8a>
		Error_Handler();
 8001c0e:	f000 f935 	bl	8001e7c <Error_Handler>
 8001c12:	e7c7      	b.n	8001ba4 <Echo_Stim_Start+0xac>
 8001c14:	200007b0 	.word	0x200007b0
 8001c18:	200003b4 	.word	0x200003b4
 8001c1c:	20000688 	.word	0x20000688
 8001c20:	200003ac 	.word	0x200003ac
 8001c24:	200006d0 	.word	0x200006d0

08001c28 <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 8001c28:	b500      	push	{lr}
 8001c2a:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001c2c:	20c8      	movs	r0, #200	; 0xc8
 8001c2e:	f000 fe57 	bl	80028e0 <HAL_Delay>
	char res_msg[55] =
 8001c32:	2100      	movs	r1, #0
 8001c34:	9100      	str	r1, [sp, #0]
 8001c36:	2233      	movs	r2, #51	; 0x33
 8001c38:	a801      	add	r0, sp, #4
 8001c3a:	f004 ffeb 	bl	8006c14 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001c3e:	f7ff fa9f 	bl	8001180 <Echo_Flash_Read>
 8001c42:	b150      	cbz	r0, 8001c5a <Echo_PCI_State_Init+0x32>
	{
		pwm_param.dead_time = 20;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <Echo_PCI_State_Init+0x68>)
 8001c46:	2214      	movs	r2, #20
 8001c48:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8001c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4e:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8001c50:	2264      	movs	r2, #100	; 0x64
 8001c52:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <Echo_PCI_State_Init+0x6c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8001c5a:	f7ff fbd3 	bl	8001404 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001c5e:	f002 fff7 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <Echo_PCI_State_Init+0x70>)
 8001c66:	4668      	mov	r0, sp
 8001c68:	f005 ff00 	bl	8007a6c <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001c6c:	4668      	mov	r0, sp
 8001c6e:	f005 feef 	bl	8007a50 <puts>
	Echo_ADC1_Enable();
 8001c72:	f7ff fd91 	bl	8001798 <Echo_ADC1_Enable>
	Echo_Print_Manual();
 8001c76:	f7ff fbbd 	bl	80013f4 <Echo_Print_Manual>
	Echo_LED_Init();
 8001c7a:	f7ff fab5 	bl	80011e8 <Echo_LED_Init>
	Echo_FSM_State_Init();
 8001c7e:	f7ff fd1f 	bl	80016c0 <Echo_FSM_State_Init>
	Echo_Shell_Init();
 8001c82:	f7ff fbeb 	bl	800145c <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 8001c86:	f000 f809 	bl	8001c9c <Echo_Uart2_INTERRUPT_ENA>
}
 8001c8a:	b00f      	add	sp, #60	; 0x3c
 8001c8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c90:	200003c4 	.word	0x200003c4
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	0800c4cc 	.word	0x0800c4cc

08001c9c <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8001c9c:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <Echo_Uart2_INTERRUPT_ENA+0x20>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	805a      	strh	r2, [r3, #2]
 8001ca6:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001ca8:	4c05      	ldr	r4, [pc, #20]	; (8001cc0 <Echo_Uart2_INTERRUPT_ENA+0x24>)
 8001caa:	4620      	mov	r0, r4
 8001cac:	f004 f95a 	bl	8005f64 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <Echo_Uart2_INTERRUPT_ENA+0x28>)
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f004 ff53 	bl	8006b60 <HAL_UART_Receive_IT>
}
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	200004d4 	.word	0x200004d4
 8001cc0:	20000880 	.word	0x20000880
 8001cc4:	200004d0 	.word	0x200004d0

08001cc8 <HAL_UART_RxCpltCallback>:

/*
 * 1. UART RX Interrupt
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc8:	b508      	push	{r3, lr}
	if (huart->Instance == USART1)
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_UART_RxCpltCallback+0x44>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d003      	beq.n	8001cda <HAL_UART_RxCpltCallback+0x12>
	{
	}
	else if (huart->Instance == USART2)
 8001cd2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d005      	beq.n	8001ce6 <HAL_UART_RxCpltCallback+0x1e>
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <HAL_UART_RxCpltCallback+0x48>)
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <HAL_UART_RxCpltCallback+0x4c>)
 8001ce0:	f004 ff3e 	bl	8006b60 <HAL_UART_Receive_IT>
}
 8001ce4:	bd08      	pop	{r3, pc}
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_UART_RxCpltCallback+0x48>)
 8001ce8:	7818      	ldrb	r0, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_UART_RxCpltCallback+0x50>)
 8001cec:	8853      	ldrh	r3, [r2, #2]
 8001cee:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001cf0:	4259      	negs	r1, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	b2c9      	uxtb	r1, r1
 8001cf6:	bf58      	it	pl
 8001cf8:	424b      	negpl	r3, r1
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001cfe:	4413      	add	r3, r2
 8001d00:	7198      	strb	r0, [r3, #6]
	echo_uart2_state.item_num++;
 8001d02:	8893      	ldrh	r3, [r2, #4]
 8001d04:	3301      	adds	r3, #1
 8001d06:	8093      	strh	r3, [r2, #4]
}
 8001d08:	e7e7      	b.n	8001cda <HAL_UART_RxCpltCallback+0x12>
 8001d0a:	bf00      	nop
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	200004d0 	.word	0x200004d0
 8001d14:	20000880 	.word	0x20000880
 8001d18:	200004d4 	.word	0x200004d4

08001d1c <Echo_Uart2_Get_RCV_Q>:
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	4604      	mov	r4, r0
	bool data_valid;
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <Echo_Uart2_Get_RCV_Q+0x44>)
 8001d22:	f005 fe95 	bl	8007a50 <puts>
#endif
	data_valid = false;

	if (echo_uart2_state.item_num > 0)
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <Echo_Uart2_Get_RCV_Q+0x48>)
 8001d28:	889b      	ldrh	r3, [r3, #4]
 8001d2a:	b90b      	cbnz	r3, 8001d30 <Echo_Uart2_Get_RCV_Q+0x14>
	data_valid = false;
 8001d2c:	2000      	movs	r0, #0
		;

		data_valid = true;
	}
	return data_valid;
}
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001d30:	4d0c      	ldr	r5, [pc, #48]	; (8001d64 <Echo_Uart2_Get_RCV_Q+0x48>)
 8001d32:	882b      	ldrh	r3, [r5, #0]
 8001d34:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 8001d36:	425a      	negs	r2, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	bf58      	it	pl
 8001d3e:	4253      	negpl	r3, r2
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	802b      	strh	r3, [r5, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8001d44:	442b      	add	r3, r5
 8001d46:	799b      	ldrb	r3, [r3, #6]
 8001d48:	7023      	strb	r3, [r4, #0]
		ECHO_USART2_MUTEX_LOCK
 8001d4a:	2026      	movs	r0, #38	; 0x26
 8001d4c:	f001 fe16 	bl	800397c <HAL_NVIC_DisableIRQ>
		echo_uart2_state.item_num--;
 8001d50:	88ab      	ldrh	r3, [r5, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	80ab      	strh	r3, [r5, #4]
		ECHO_USART2_MUTEX_UNLOCK
 8001d56:	2026      	movs	r0, #38	; 0x26
 8001d58:	f001 fe02 	bl	8003960 <HAL_NVIC_EnableIRQ>
		data_valid = true;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e7e6      	b.n	8001d2e <Echo_Uart2_Get_RCV_Q+0x12>
 8001d60:	0800c4fc 	.word	0x0800c4fc
 8001d64:	200004d4 	.word	0x200004d4

08001d68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct =
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9403      	str	r4, [sp, #12]
 8001d70:	9404      	str	r4, [sp, #16]
 8001d72:	9405      	str	r4, [sp, #20]
 8001d74:	9406      	str	r4, [sp, #24]
 8001d76:	9407      	str	r4, [sp, #28]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <MX_GPIO_Init+0xb8>)
 8001d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d7c:	f042 0204 	orr.w	r2, r2, #4
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d84:	f002 0204 	and.w	r2, r2, #4
 8001d88:	9200      	str	r2, [sp, #0]
 8001d8a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d96:	f002 0201 	and.w	r2, r2, #1
 8001d9a:	9201      	str	r2, [sp, #4]
 8001d9c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da0:	f042 0202 	orr.w	r2, r2, #2
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001db0:	4e1c      	ldr	r6, [pc, #112]	; (8001e24 <MX_GPIO_Init+0xbc>)
 8001db2:	4622      	mov	r2, r4
 8001db4:	213b      	movs	r1, #59	; 0x3b
 8001db6:	4630      	mov	r0, r6
 8001db8:	f002 fa19 	bl	80041ee <HAL_GPIO_WritePin>
			QCC_CRTL0_Pin | QCC_CRTL1_Pin | LED_Pin | BIPHASIC_SW_Pin
					| PEAK_DISCHG_SW_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f002 fa12 	bl	80041ee <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : START_BTN_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin;
 8001dca:	2310      	movs	r3, #16
 8001dcc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd0:	2501      	movs	r5, #1
 8001dd2:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	a903      	add	r1, sp, #12
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f002 f923 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001de2:	230b      	movs	r3, #11
 8001de4:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	a903      	add	r1, sp, #12
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f002 f919 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pins : QCC_CRTL0_Pin QCC_CRTL1_Pin LED_Pin BIPHASIC_SW_Pin
	 PEAK_DISCHG_SW_Pin */
	GPIO_InitStruct.Pin = QCC_CRTL0_Pin | QCC_CRTL1_Pin | LED_Pin
 8001df2:	233b      	movs	r3, #59	; 0x3b
 8001df4:	9303      	str	r3, [sp, #12]
			| BIPHASIC_SW_Pin | PEAK_DISCHG_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	a903      	add	r1, sp, #12
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f002 f910 	bl	8004024 <HAL_GPIO_Init>

	/*Configure GPIO pins : DAC0_Pin DAC1_Pin DAC2_Pin DAC3_Pin */
	GPIO_InitStruct.Pin = DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin;
 8001e04:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001e08:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	a903      	add	r1, sp, #12
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f002 f905 	bl	8004024 <HAL_GPIO_Init>

}
 8001e1a:	b008      	add	sp, #32
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <MX_DMA_Init>:
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_DMA_Init+0x50>)
 8001e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	649a      	str	r2, [r3, #72]	; 0x48
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	4611      	mov	r1, r2
 8001e44:	200b      	movs	r0, #11
 8001e46:	f001 fd53 	bl	80038f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e4a:	200b      	movs	r0, #11
 8001e4c:	f001 fd88 	bl	8003960 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	4611      	mov	r1, r2
 8001e54:	200f      	movs	r0, #15
 8001e56:	f001 fd4b 	bl	80038f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f001 fd80 	bl	8003960 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	4611      	mov	r1, r2
 8001e64:	2011      	movs	r0, #17
 8001e66:	f001 fd43 	bl	80038f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001e6a:	2011      	movs	r0, #17
 8001e6c:	f001 fd78 	bl	8003960 <HAL_NVIC_EnableIRQ>
}
 8001e70:	b003      	add	sp, #12
 8001e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e7e:	e7fe      	b.n	8001e7e <Error_Handler+0x2>

08001e80 <MX_TIM1_Init>:
{
 8001e80:	b510      	push	{r4, lr}
 8001e82:	b096      	sub	sp, #88	; 0x58
	TIM_MasterConfigTypeDef sMasterConfig =
 8001e84:	2400      	movs	r4, #0
 8001e86:	9413      	str	r4, [sp, #76]	; 0x4c
 8001e88:	9414      	str	r4, [sp, #80]	; 0x50
 8001e8a:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC =
 8001e8c:	940c      	str	r4, [sp, #48]	; 0x30
 8001e8e:	940d      	str	r4, [sp, #52]	; 0x34
 8001e90:	940e      	str	r4, [sp, #56]	; 0x38
 8001e92:	940f      	str	r4, [sp, #60]	; 0x3c
 8001e94:	9410      	str	r4, [sp, #64]	; 0x40
 8001e96:	9411      	str	r4, [sp, #68]	; 0x44
 8001e98:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001e9a:	222c      	movs	r2, #44	; 0x2c
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	a801      	add	r0, sp, #4
 8001ea0:	f004 feb8 	bl	8006c14 <memset>
	htim1.Instance = TIM1;
 8001ea4:	4825      	ldr	r0, [pc, #148]	; (8001f3c <MX_TIM1_Init+0xbc>)
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_TIM1_Init+0xc0>)
 8001ea8:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 8001eaa:	6044      	str	r4, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 9999;
 8001eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8001eb2:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8001eb6:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ebc:	f003 fb56 	bl	800556c <HAL_TIM_PWM_Init>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d132      	bne.n	8001f2a <MX_TIM1_Init+0xaa>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec8:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eca:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ecc:	a913      	add	r1, sp, #76	; 0x4c
 8001ece:	481b      	ldr	r0, [pc, #108]	; (8001f3c <MX_TIM1_Init+0xbc>)
 8001ed0:	f003 ff82 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d12a      	bne.n	8001f2e <MX_TIM1_Init+0xae>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed8:	2360      	movs	r3, #96	; 0x60
 8001eda:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	920e      	str	r2, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ee4:	920f      	str	r2, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee6:	9210      	str	r2, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ee8:	9211      	str	r2, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eea:	9212      	str	r2, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eec:	a90c      	add	r1, sp, #48	; 0x30
 8001eee:	4813      	ldr	r0, [pc, #76]	; (8001f3c <MX_TIM1_Init+0xbc>)
 8001ef0:	f003 fbe5 	bl	80056be <HAL_TIM_PWM_ConfigChannel>
 8001ef4:	b9e8      	cbnz	r0, 8001f32 <MX_TIM1_Init+0xb2>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001efa:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001efc:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001efe:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f00:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f06:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001f08:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f0a:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f10:	9209      	str	r2, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001f12:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f14:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f16:	a901      	add	r1, sp, #4
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <MX_TIM1_Init+0xbc>)
 8001f1a:	f003 ff95 	bl	8005e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f1e:	b950      	cbnz	r0, 8001f36 <MX_TIM1_Init+0xb6>
	HAL_TIM_MspPostInit(&htim1);
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <MX_TIM1_Init+0xbc>)
 8001f22:	f000 fac3 	bl	80024ac <HAL_TIM_MspPostInit>
}
 8001f26:	b016      	add	sp, #88	; 0x58
 8001f28:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001f2a:	f7ff ffa7 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8001f2e:	f7ff ffa5 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8001f32:	f7ff ffa3 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8001f36:	f7ff ffa1 	bl	8001e7c <Error_Handler>
 8001f3a:	bf00      	nop
 8001f3c:	20000718 	.word	0x20000718
 8001f40:	40012c00 	.word	0x40012c00

08001f44 <MX_TIM2_Init>:
{
 8001f44:	b500      	push	{lr}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig =
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9307      	str	r3, [sp, #28]
 8001f4c:	9308      	str	r3, [sp, #32]
 8001f4e:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC =
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	9304      	str	r3, [sp, #16]
 8001f5a:	9305      	str	r3, [sp, #20]
 8001f5c:	9306      	str	r3, [sp, #24]
	htim2.Instance = TIM2;
 8001f5e:	482c      	ldr	r0, [pc, #176]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f64:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 79;
 8001f66:	224f      	movs	r2, #79	; 0x4f
 8001f68:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 9999;
 8001f6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f70:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f78:	f003 fac8 	bl	800550c <HAL_TIM_OC_Init>
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d13a      	bne.n	8001ff6 <MX_TIM2_Init+0xb2>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f80:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001f82:	f003 faf3 	bl	800556c <HAL_TIM_PWM_Init>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d137      	bne.n	8001ffa <MX_TIM2_Init+0xb6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f90:	a907      	add	r1, sp, #28
 8001f92:	481f      	ldr	r0, [pc, #124]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001f94:	f003 ff20 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d130      	bne.n	8001ffe <MX_TIM2_Init+0xba>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001f9c:	2330      	movs	r3, #48	; 0x30
 8001f9e:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 5;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	9202      	str	r2, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	9204      	str	r2, [sp, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001faa:	4669      	mov	r1, sp
 8001fac:	4818      	ldr	r0, [pc, #96]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001fae:	f003 fb49 	bl	8005644 <HAL_TIM_OC_ConfigChannel>
 8001fb2:	bb30      	cbnz	r0, 8002002 <MX_TIM2_Init+0xbe>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1010;
 8001fb8:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001fbc:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4669      	mov	r1, sp
 8001fc2:	4813      	ldr	r0, [pc, #76]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001fc4:	f003 fb7b 	bl	80056be <HAL_TIM_PWM_ConfigChannel>
 8001fc8:	b9e8      	cbnz	r0, 8002006 <MX_TIM2_Init+0xc2>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001fcc:	6802      	ldr	r2, [r0, #0]
 8001fce:	6993      	ldr	r3, [r2, #24]
 8001fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fd4:	6193      	str	r3, [r2, #24]
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001fd6:	2330      	movs	r3, #48	; 0x30
 8001fd8:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 1040;
 8001fda:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001fde:	9301      	str	r3, [sp, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4669      	mov	r1, sp
 8001fe4:	f003 fb2e 	bl	8005644 <HAL_TIM_OC_ConfigChannel>
 8001fe8:	b978      	cbnz	r0, 800200a <MX_TIM2_Init+0xc6>
	HAL_TIM_MspPostInit(&htim2);
 8001fea:	4809      	ldr	r0, [pc, #36]	; (8002010 <MX_TIM2_Init+0xcc>)
 8001fec:	f000 fa5e 	bl	80024ac <HAL_TIM_MspPostInit>
}
 8001ff0:	b00b      	add	sp, #44	; 0x2c
 8001ff2:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001ff6:	f7ff ff41 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8001ffa:	f7ff ff3f 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8001ffe:	f7ff ff3d 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002002:	f7ff ff3b 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002006:	f7ff ff39 	bl	8001e7c <Error_Handler>
		Error_Handler();
 800200a:	f7ff ff37 	bl	8001e7c <Error_Handler>
 800200e:	bf00      	nop
 8002010:	200007b0 	.word	0x200007b0

08002014 <MX_TIM16_Init>:
{
 8002014:	b508      	push	{r3, lr}
	htim16.Instance = TIM16;
 8002016:	480a      	ldr	r0, [pc, #40]	; (8002040 <MX_TIM16_Init+0x2c>)
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_TIM16_Init+0x30>)
 800201a:	6003      	str	r3, [r0, #0]
	htim16.Init.Prescaler = 799;
 800201c:	f240 331f 	movw	r3, #799	; 0x31f
 8002020:	6043      	str	r3, [r0, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	2300      	movs	r3, #0
 8002024:	6083      	str	r3, [r0, #8]
	htim16.Init.Period = 999;
 8002026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202a:	60c2      	str	r2, [r0, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	6103      	str	r3, [r0, #16]
	htim16.Init.RepetitionCounter = 0;
 800202e:	6143      	str	r3, [r0, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002034:	f003 fa3a 	bl	80054ac <HAL_TIM_Base_Init>
 8002038:	b900      	cbnz	r0, 800203c <MX_TIM16_Init+0x28>
}
 800203a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800203c:	f7ff ff1e 	bl	8001e7c <Error_Handler>
 8002040:	20000764 	.word	0x20000764
 8002044:	40014400 	.word	0x40014400

08002048 <MX_USART1_UART_Init>:
{
 8002048:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <MX_USART1_UART_Init+0x30>)
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USART1_UART_Init+0x34>)
 800204e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8002050:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002054:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	2300      	movs	r3, #0
 8002058:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800205a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800205c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800205e:	220c      	movs	r2, #12
 8002060:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002066:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002068:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800206a:	f004 fcdc 	bl	8006a26 <HAL_UART_Init>
 800206e:	b900      	cbnz	r0, 8002072 <MX_USART1_UART_Init+0x2a>
}
 8002070:	bd08      	pop	{r3, pc}
		Error_Handler();
 8002072:	f7ff ff03 	bl	8001e7c <Error_Handler>
 8002076:	bf00      	nop
 8002078:	200007fc 	.word	0x200007fc
 800207c:	40013800 	.word	0x40013800

08002080 <MX_USART2_UART_Init>:
{
 8002080:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <MX_USART2_UART_Init+0x30>)
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_USART2_UART_Init+0x34>)
 8002086:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8002088:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800208c:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	2300      	movs	r3, #0
 8002090:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002092:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002094:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002096:	220c      	movs	r2, #12
 8002098:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a0:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	f004 fcc0 	bl	8006a26 <HAL_UART_Init>
 80020a6:	b900      	cbnz	r0, 80020aa <MX_USART2_UART_Init+0x2a>
}
 80020a8:	bd08      	pop	{r3, pc}
		Error_Handler();
 80020aa:	f7ff fee7 	bl	8001e7c <Error_Handler>
 80020ae:	bf00      	nop
 80020b0:	20000880 	.word	0x20000880
 80020b4:	40004400 	.word	0x40004400

080020b8 <MX_ADC1_Init>:
{
 80020b8:	b500      	push	{lr}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
	ADC_MultiModeTypeDef multimode =
 80020bc:	2300      	movs	r3, #0
 80020be:	9307      	str	r3, [sp, #28]
 80020c0:	9308      	str	r3, [sp, #32]
 80020c2:	9309      	str	r3, [sp, #36]	; 0x24
	ADC_ChannelConfTypeDef sConfig =
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	9303      	str	r3, [sp, #12]
 80020ca:	9304      	str	r3, [sp, #16]
 80020cc:	9305      	str	r3, [sp, #20]
 80020ce:	9306      	str	r3, [sp, #24]
	hadc1.Instance = ADC1;
 80020d0:	4829      	ldr	r0, [pc, #164]	; (8002178 <MX_ADC1_Init+0xc0>)
 80020d2:	4a2a      	ldr	r2, [pc, #168]	; (800217c <MX_ADC1_Init+0xc4>)
 80020d4:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020d6:	6043      	str	r3, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020d8:	6083      	str	r3, [r0, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020da:	60c3      	str	r3, [r0, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020dc:	2201      	movs	r2, #1
 80020de:	6102      	str	r2, [r0, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020e0:	2104      	movs	r1, #4
 80020e2:	6141      	str	r1, [r0, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80020e4:	7603      	strb	r3, [r0, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80020e6:	7642      	strb	r2, [r0, #25]
	hadc1.Init.NbrOfConversion = 3;
 80020e8:	2103      	movs	r1, #3
 80020ea:	61c1      	str	r1, [r0, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ec:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f0:	6283      	str	r3, [r0, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020f2:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80020f4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80020f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fc:	6342      	str	r2, [r0, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80020fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002102:	f000 fc01 	bl	8002908 <HAL_ADC_Init>
 8002106:	2800      	cmp	r0, #0
 8002108:	d12c      	bne.n	8002164 <MX_ADC1_Init+0xac>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800210a:	2300      	movs	r3, #0
 800210c:	9307      	str	r3, [sp, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800210e:	a907      	add	r1, sp, #28
 8002110:	4819      	ldr	r0, [pc, #100]	; (8002178 <MX_ADC1_Init+0xc0>)
 8002112:	f001 fb4f 	bl	80037b4 <HAL_ADCEx_MultiModeConfigChannel>
 8002116:	bb38      	cbnz	r0, 8002168 <MX_ADC1_Init+0xb0>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_ADC1_Init+0xc8>)
 800211a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800211c:	2306      	movs	r3, #6
 800211e:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002120:	2300      	movs	r3, #0
 8002122:	9303      	str	r3, [sp, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002124:	227f      	movs	r2, #127	; 0x7f
 8002126:	9204      	str	r2, [sp, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002128:	2204      	movs	r2, #4
 800212a:	9205      	str	r2, [sp, #20]
	sConfig.Offset = 0;
 800212c:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212e:	eb0d 0102 	add.w	r1, sp, r2
 8002132:	4811      	ldr	r0, [pc, #68]	; (8002178 <MX_ADC1_Init+0xc0>)
 8002134:	f000 fe86 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8002138:	b9c0      	cbnz	r0, 800216c <MX_ADC1_Init+0xb4>
	sConfig.Channel = ADC_CHANNEL_11;
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_ADC1_Init+0xcc>)
 800213c:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800213e:	230c      	movs	r3, #12
 8002140:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002142:	a901      	add	r1, sp, #4
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_ADC1_Init+0xc0>)
 8002146:	f000 fe7d 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800214a:	b988      	cbnz	r0, 8002170 <MX_ADC1_Init+0xb8>
	sConfig.Channel = ADC_CHANNEL_12;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_ADC1_Init+0xd0>)
 800214e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002150:	2312      	movs	r3, #18
 8002152:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002154:	a901      	add	r1, sp, #4
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <MX_ADC1_Init+0xc0>)
 8002158:	f000 fe74 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800215c:	b950      	cbnz	r0, 8002174 <MX_ADC1_Init+0xbc>
}
 800215e:	b00b      	add	sp, #44	; 0x2c
 8002160:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002164:	f7ff fe8a 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002168:	f7ff fe88 	bl	8001e7c <Error_Handler>
		Error_Handler();
 800216c:	f7ff fe86 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002170:	f7ff fe84 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002174:	f7ff fe82 	bl	8001e7c <Error_Handler>
 8002178:	200005dc 	.word	0x200005dc
 800217c:	50040000 	.word	0x50040000
 8002180:	80000001 	.word	0x80000001
 8002184:	2e300800 	.word	0x2e300800
 8002188:	32601000 	.word	0x32601000

0800218c <SystemClock_Config>:
{
 800218c:	b500      	push	{lr}
 800218e:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002190:	2244      	movs	r2, #68	; 0x44
 8002192:	2100      	movs	r1, #0
 8002194:	a805      	add	r0, sp, #20
 8002196:	f004 fd3d 	bl	8006c14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	9304      	str	r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021aa:	f002 f835 	bl	8004218 <HAL_PWREx_ControlVoltageScaling>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d12f      	bne.n	8002212 <SystemClock_Config+0x86>
	HAL_PWR_EnableBkUpAccess();
 80021b2:	f002 f821 	bl	80041f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021b6:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <SystemClock_Config+0x94>)
 80021b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80021bc:	f023 0318 	bic.w	r3, r3, #24
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80021c4:	2314      	movs	r3, #20
 80021c6:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021c8:	2301      	movs	r3, #1
 80021ca:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021cc:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ce:	2200      	movs	r2, #0
 80021d0:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021d2:	2260      	movs	r2, #96	; 0x60
 80021d4:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d6:	2202      	movs	r2, #2
 80021d8:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021da:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80021dc:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80021de:	2328      	movs	r3, #40	; 0x28
 80021e0:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021e2:	9214      	str	r2, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021e4:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e6:	a805      	add	r0, sp, #20
 80021e8:	f002 f900 	bl	80043ec <HAL_RCC_OscConfig>
 80021ec:	b998      	cbnz	r0, 8002216 <SystemClock_Config+0x8a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ee:	230f      	movs	r3, #15
 80021f0:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f2:	2303      	movs	r3, #3
 80021f4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021fa:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fc:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021fe:	2104      	movs	r1, #4
 8002200:	4668      	mov	r0, sp
 8002202:	f002 fc61 	bl	8004ac8 <HAL_RCC_ClockConfig>
 8002206:	b940      	cbnz	r0, 800221a <SystemClock_Config+0x8e>
	HAL_RCCEx_EnableMSIPLLMode();
 8002208:	f002 fe66 	bl	8004ed8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800220c:	b017      	add	sp, #92	; 0x5c
 800220e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002212:	f7ff fe33 	bl	8001e7c <Error_Handler>
		Error_Handler();
 8002216:	f7ff fe31 	bl	8001e7c <Error_Handler>
		Error_Handler();
 800221a:	f7ff fe2f 	bl	8001e7c <Error_Handler>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <main>:
{
 8002224:	b508      	push	{r3, lr}
	HAL_Init();
 8002226:	f000 fb39 	bl	800289c <HAL_Init>
	SystemClock_Config();
 800222a:	f7ff ffaf 	bl	800218c <SystemClock_Config>
	MX_GPIO_Init();
 800222e:	f7ff fd9b 	bl	8001d68 <MX_GPIO_Init>
	MX_DMA_Init();
 8002232:	f7ff fdf9 	bl	8001e28 <MX_DMA_Init>
	MX_TIM1_Init();
 8002236:	f7ff fe23 	bl	8001e80 <MX_TIM1_Init>
	MX_TIM2_Init();
 800223a:	f7ff fe83 	bl	8001f44 <MX_TIM2_Init>
	MX_TIM16_Init();
 800223e:	f7ff fee9 	bl	8002014 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8002242:	f7ff ff01 	bl	8002048 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002246:	f7ff ff1b 	bl	8002080 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800224a:	f7ff ff35 	bl	80020b8 <MX_ADC1_Init>
	Echo_PCI_State_Init();
 800224e:	f7ff fceb 	bl	8001c28 <Echo_PCI_State_Init>
		Echo_Shell_CMD_Handle();
 8002252:	f7ff f979 	bl	8001548 <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8002256:	f000 fb3d 	bl	80028d4 <HAL_GetTick>
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <main+0x60>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1ac0      	subs	r0, r0, r3
 8002260:	2809      	cmp	r0, #9
 8002262:	d9f6      	bls.n	8002252 <main+0x2e>
			Echo_FSM_State_Handle();
 8002264:	f7ff fa36 	bl	80016d4 <Echo_FSM_State_Handle>
			Echo_Btn_handle();
 8002268:	f7fe fed2 	bl	8001010 <Echo_Btn_handle>
			Echo_LED_Handle();
 800226c:	f7ff f820 	bl	80012b0 <Echo_LED_Handle>
			Echo_Stepup_Handle();
 8002270:	f7ff fad2 	bl	8001818 <Echo_Stepup_Handle>
			Echo_Shell_Input_Print();
 8002274:	f7ff f8de 	bl	8001434 <Echo_Shell_Input_Print>
			schdule_tick = HAL_GetTick();
 8002278:	f000 fb2c 	bl	80028d4 <HAL_GetTick>
 800227c:	4b01      	ldr	r3, [pc, #4]	; (8002284 <main+0x60>)
 800227e:	6018      	str	r0, [r3, #0]
 8002280:	e7e7      	b.n	8002252 <main+0x2e>
 8002282:	bf00      	nop
 8002284:	20000904 	.word	0x20000904

08002288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_MspInit+0x2c>)
 800228c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	661a      	str	r2, [r3, #96]	; 0x60
 8002294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002296:	f002 0201 	and.w	r2, r2, #1
 800229a:	9200      	str	r2, [sp, #0]
 800229c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b0:	b002      	add	sp, #8
 80022b2:	4770      	bx	lr
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	2300      	movs	r3, #0
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	9304      	str	r3, [sp, #16]
 80022c2:	9305      	str	r3, [sp, #20]
 80022c4:	9306      	str	r3, [sp, #24]
 80022c6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80022c8:	6802      	ldr	r2, [r0, #0]
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_ADC_MspInit+0xa8>)
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022d0:	b008      	add	sp, #32
 80022d2:	bd10      	pop	{r4, pc}
 80022d4:	4604      	mov	r4, r0
    __HAL_RCC_ADC_CLK_ENABLE();
 80022d6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80022da:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 80022de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80022e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022ec:	9201      	str	r2, [sp, #4]
 80022ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002302:	23c0      	movs	r3, #192	; 0xc0
 8002304:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002306:	230b      	movs	r3, #11
 8002308:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	a903      	add	r1, sp, #12
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f001 fe88 	bl	8004024 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <HAL_ADC_MspInit+0xac>)
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_ADC_MspInit+0xb0>)
 8002318:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800231a:	2300      	movs	r3, #0
 800231c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800231e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002320:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232a:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800232c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002330:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002332:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800233a:	f001 fb5f 	bl	80039fc <HAL_DMA_Init>
 800233e:	b958      	cbnz	r0, 8002358 <HAL_ADC_MspInit+0xa0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_ADC_MspInit+0xac>)
 8002342:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002344:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	4611      	mov	r1, r2
 800234a:	2012      	movs	r0, #18
 800234c:	f001 fad0 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002350:	2012      	movs	r0, #18
 8002352:	f001 fb05 	bl	8003960 <HAL_NVIC_EnableIRQ>
}
 8002356:	e7bb      	b.n	80022d0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002358:	f7ff fd90 	bl	8001e7c <Error_Handler>
 800235c:	e7f0      	b.n	8002340 <HAL_ADC_MspInit+0x88>
 800235e:	bf00      	nop
 8002360:	50040000 	.word	0x50040000
 8002364:	20000640 	.word	0x20000640
 8002368:	40020008 	.word	0x40020008

0800236c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002370:	429a      	cmp	r2, r3
 8002372:	d000      	beq.n	8002376 <HAL_TIM_PWM_MspInit+0xa>
 8002374:	4770      	bx	lr
{
 8002376:	b500      	push	{lr}
 8002378:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800237e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002384:	661a      	str	r2, [r3, #96]	; 0x60
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2101      	movs	r1, #1
 8002394:	2019      	movs	r0, #25
 8002396:	f001 faab 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800239a:	2019      	movs	r0, #25
 800239c:	f001 fae0 	bl	8003960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023a0:	b003      	add	sp, #12
 80023a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00

080023ac <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 80023ac:	6803      	ldr	r3, [r0, #0]
 80023ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b2:	d000      	beq.n	80023b6 <HAL_TIM_OC_MspInit+0xa>
 80023b4:	4770      	bx	lr
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80023c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80023d2:	4822      	ldr	r0, [pc, #136]	; (800245c <HAL_TIM_OC_MspInit+0xb0>)
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_TIM_OC_MspInit+0xb4>)
 80023d6:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80023d8:	2304      	movs	r3, #4
 80023da:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023dc:	2310      	movs	r3, #16
 80023de:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023f2:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80023f4:	2220      	movs	r2, #32
 80023f6:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80023f8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80023fa:	f001 faff 	bl	80039fc <HAL_DMA_Init>
 80023fe:	bb38      	cbnz	r0, 8002450 <HAL_TIM_OC_MspInit+0xa4>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_TIM_OC_MspInit+0xb0>)
 8002402:	62a3      	str	r3, [r4, #40]	; 0x28
 8002404:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002406:	6323      	str	r3, [r4, #48]	; 0x30

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <HAL_TIM_OC_MspInit+0xb8>)
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_TIM_OC_MspInit+0xbc>)
 800240c:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 800240e:	2304      	movs	r3, #4
 8002410:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002412:	2310      	movs	r3, #16
 8002414:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002428:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800242a:	2220      	movs	r2, #32
 800242c:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800242e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002430:	f001 fae4 	bl	80039fc <HAL_DMA_Init>
 8002434:	b978      	cbnz	r0, 8002456 <HAL_TIM_OC_MspInit+0xaa>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_TIM_OC_MspInit+0xb8>)
 8002438:	6263      	str	r3, [r4, #36]	; 0x24
 800243a:	629c      	str	r4, [r3, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	4611      	mov	r1, r2
 8002440:	201c      	movs	r0, #28
 8002442:	f001 fa55 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002446:	201c      	movs	r0, #28
 8002448:	f001 fa8a 	bl	8003960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800244c:	b002      	add	sp, #8
 800244e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002450:	f7ff fd14 	bl	8001e7c <Error_Handler>
 8002454:	e7d4      	b.n	8002400 <HAL_TIM_OC_MspInit+0x54>
      Error_Handler();
 8002456:	f7ff fd11 	bl	8001e7c <Error_Handler>
 800245a:	e7ec      	b.n	8002436 <HAL_TIM_OC_MspInit+0x8a>
 800245c:	200006d0 	.word	0x200006d0
 8002460:	40020080 	.word	0x40020080
 8002464:	20000688 	.word	0x20000688
 8002468:	40020058 	.word	0x40020058

0800246c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 800246c:	6802      	ldr	r2, [r0, #0]
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002470:	429a      	cmp	r2, r3
 8002472:	d000      	beq.n	8002476 <HAL_TIM_Base_MspInit+0xa>
 8002474:	4770      	bx	lr
{
 8002476:	b500      	push	{lr}
 8002478:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800247a:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 800247e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002480:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002484:	661a      	str	r2, [r3, #96]	; 0x60
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	9b01      	ldr	r3, [sp, #4]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	2101      	movs	r1, #1
 8002494:	2019      	movs	r0, #25
 8002496:	f001 fa2b 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800249a:	2019      	movs	r0, #25
 800249c:	f001 fa60 	bl	8003960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024a0:	b003      	add	sp, #12
 80024a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024a6:	bf00      	nop
 80024a8:	40014400 	.word	0x40014400

080024ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ac:	b500      	push	{lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	2300      	movs	r3, #0
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	9304      	str	r3, [sp, #16]
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	9306      	str	r3, [sp, #24]
 80024ba:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_TIM_MspPostInit+0x80>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d005      	beq.n	80024d0 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d019      	beq.n	80024fe <HAL_TIM_MspPostInit+0x52>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ca:	b009      	add	sp, #36	; 0x24
 80024cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_TIM_MspPostInit+0x84>)
 80024d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 80024e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(STEP_UP_SW_GPIO_Port, &GPIO_InitStruct);
 80024f2:	a903      	add	r1, sp, #12
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f8:	f001 fd94 	bl	8004024 <HAL_GPIO_Init>
 80024fc:	e7e5      	b.n	80024ca <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	64da      	str	r2, [r3, #76]	; 0x4c
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CATHODE_Pin|STIM_CURRENT_CTRL_Pin;
 8002514:	232a      	movs	r3, #42	; 0x2a
 8002516:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800251c:	2301      	movs	r3, #1
 800251e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	a903      	add	r1, sp, #12
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f001 fd7d 	bl	8004024 <HAL_GPIO_Init>
}
 800252a:	e7ce      	b.n	80024ca <HAL_TIM_MspPostInit+0x1e>
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	b096      	sub	sp, #88	; 0x58
 8002538:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	2100      	movs	r1, #0
 800253c:	9111      	str	r1, [sp, #68]	; 0x44
 800253e:	9112      	str	r1, [sp, #72]	; 0x48
 8002540:	9113      	str	r1, [sp, #76]	; 0x4c
 8002542:	9114      	str	r1, [sp, #80]	; 0x50
 8002544:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002546:	2234      	movs	r2, #52	; 0x34
 8002548:	a804      	add	r0, sp, #16
 800254a:	f004 fb63 	bl	8006c14 <memset>
  if(huart->Instance==USART1)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <HAL_UART_MspInit+0x114>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002556:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_UART_MspInit+0x118>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d034      	beq.n	80025c6 <HAL_UART_MspInit+0x92>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800255c:	b016      	add	sp, #88	; 0x58
 800255e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002560:	2301      	movs	r3, #1
 8002562:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002564:	a804      	add	r0, sp, #16
 8002566:	f002 fb9d 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 800256a:	bb48      	cbnz	r0, 80025c0 <HAL_UART_MspInit+0x8c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_UART_MspInit+0x11c>)
 800256e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002574:	661a      	str	r2, [r3, #96]	; 0x60
 8002576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002578:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002582:	f042 0202 	orr.w	r2, r2, #2
 8002586:	64da      	str	r2, [r3, #76]	; 0x4c
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = QCC_UART_TX_Pin|QCC_UART_RX_Pin;
 8002592:	23c0      	movs	r3, #192	; 0xc0
 8002594:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2400      	movs	r4, #0
 800259c:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025a2:	2307      	movs	r3, #7
 80025a4:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	a911      	add	r1, sp, #68	; 0x44
 80025a8:	482a      	ldr	r0, [pc, #168]	; (8002654 <HAL_UART_MspInit+0x120>)
 80025aa:	f001 fd3b 	bl	8004024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ae:	4622      	mov	r2, r4
 80025b0:	4621      	mov	r1, r4
 80025b2:	2025      	movs	r0, #37	; 0x25
 80025b4:	f001 f99c 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b8:	2025      	movs	r0, #37	; 0x25
 80025ba:	f001 f9d1 	bl	8003960 <HAL_NVIC_EnableIRQ>
 80025be:	e7cd      	b.n	800255c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80025c0:	f7ff fc5c 	bl	8001e7c <Error_Handler>
 80025c4:	e7d2      	b.n	800256c <HAL_UART_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ca:	a804      	add	r0, sp, #16
 80025cc:	f002 fb6a 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d136      	bne.n	8002642 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <HAL_UART_MspInit+0x11c>)
 80025d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025dc:	659a      	str	r2, [r3, #88]	; 0x58
 80025de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025e4:	9202      	str	r2, [sp, #8]
 80025e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80025fa:	2304      	movs	r3, #4
 80025fc:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2602      	movs	r6, #2
 8002600:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2400      	movs	r4, #0
 8002604:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2503      	movs	r5, #3
 8002608:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260a:	2307      	movs	r3, #7
 800260c:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800260e:	a911      	add	r1, sp, #68	; 0x44
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f001 fd06 	bl	8004024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261c:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002624:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002626:	a911      	add	r1, sp, #68	; 0x44
 8002628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262c:	f001 fcfa 	bl	8004024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002630:	4622      	mov	r2, r4
 8002632:	4621      	mov	r1, r4
 8002634:	2026      	movs	r0, #38	; 0x26
 8002636:	f001 f95b 	bl	80038f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800263a:	2026      	movs	r0, #38	; 0x26
 800263c:	f001 f990 	bl	8003960 <HAL_NVIC_EnableIRQ>
}
 8002640:	e78c      	b.n	800255c <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002642:	f7ff fc1b 	bl	8001e7c <Error_Handler>
 8002646:	e7c5      	b.n	80025d4 <HAL_UART_MspInit+0xa0>
 8002648:	40013800 	.word	0x40013800
 800264c:	40004400 	.word	0x40004400
 8002650:	40021000 	.word	0x40021000
 8002654:	48000400 	.word	0x48000400

08002658 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800265c:	4905      	ldr	r1, [pc, #20]	; (8002674 <__NVIC_SystemReset+0x1c>)
 800265e:	68ca      	ldr	r2, [r1, #12]
 8002660:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_SystemReset+0x20>)
 8002666:	4313      	orrs	r3, r2
 8002668:	60cb      	str	r3, [r1, #12]
 800266a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800266e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002670:	e7fd      	b.n	800266e <__NVIC_SystemReset+0x16>
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	05fa0004 	.word	0x05fa0004

0800267c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800267c:	e7fe      	b.n	800267c <NMI_Handler>

0800267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8002680:	f7ff ffea 	bl	8002658 <__NVIC_SystemReset>

08002684 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 8002688:	f7ff ffe6 	bl	8002658 <__NVIC_SystemReset>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 800268e:	f7ff ffe3 	bl	8002658 <__NVIC_SystemReset>

08002692 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002692:	4770      	bx	lr

08002694 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f000 f90f 	bl	80028bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	bd08      	pop	{r3, pc}

080026a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA1_Channel1_IRQHandler+0xc>)
 80026a4:	f001 fab6 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026a8:	bd08      	pop	{r3, pc}
 80026aa:	bf00      	nop
 80026ac:	20000640 	.word	0x20000640

080026b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <DMA1_Channel5_IRQHandler+0xc>)
 80026b4:	f001 faae 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026b8:	bd08      	pop	{r3, pc}
 80026ba:	bf00      	nop
 80026bc:	20000688 	.word	0x20000688

080026c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80026c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80026c2:	4802      	ldr	r0, [pc, #8]	; (80026cc <DMA1_Channel7_IRQHandler+0xc>)
 80026c4:	f001 faa6 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80026c8:	bd08      	pop	{r3, pc}
 80026ca:	bf00      	nop
 80026cc:	200006d0 	.word	0x200006d0

080026d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80026d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026d2:	4802      	ldr	r0, [pc, #8]	; (80026dc <ADC1_2_IRQHandler+0xc>)
 80026d4:	f000 fa1a 	bl	8002b0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026d8:	bd08      	pop	{r3, pc}
 80026da:	bf00      	nop
 80026dc:	200005dc 	.word	0x200005dc

080026e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80026e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e2:	4803      	ldr	r0, [pc, #12]	; (80026f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80026e4:	f002 fdad 	bl	8005242 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80026ea:	f002 fdaa 	bl	8005242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026ee:	bd08      	pop	{r3, pc}
 80026f0:	20000718 	.word	0x20000718
 80026f4:	20000764 	.word	0x20000764

080026f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026fa:	4802      	ldr	r0, [pc, #8]	; (8002704 <TIM2_IRQHandler+0xc>)
 80026fc:	f002 fda1 	bl	8005242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002700:	bd08      	pop	{r3, pc}
 8002702:	bf00      	nop
 8002704:	200007b0 	.word	0x200007b0

08002708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800270a:	4802      	ldr	r0, [pc, #8]	; (8002714 <USART1_IRQHandler+0xc>)
 800270c:	f003 fca6 	bl	800605c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002710:	bd08      	pop	{r3, pc}
 8002712:	bf00      	nop
 8002714:	200007fc 	.word	0x200007fc

08002718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800271a:	4802      	ldr	r0, [pc, #8]	; (8002724 <USART2_IRQHandler+0xc>)
 800271c:	f003 fc9e 	bl	800605c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002720:	bd08      	pop	{r3, pc}
 8002722:	bf00      	nop
 8002724:	20000880 	.word	0x20000880

08002728 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002728:	2001      	movs	r0, #1
 800272a:	4770      	bx	lr

0800272c <_kill>:

int _kill(int pid, int sig)
{
 800272c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800272e:	f004 fa47 	bl	8006bc0 <__errno>
 8002732:	2316      	movs	r3, #22
 8002734:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002736:	f04f 30ff 	mov.w	r0, #4294967295
 800273a:	bd08      	pop	{r3, pc}

0800273c <_exit>:

void _exit (int status)
{
 800273c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800273e:	f04f 31ff 	mov.w	r1, #4294967295
 8002742:	f7ff fff3 	bl	800272c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002746:	e7fe      	b.n	8002746 <_exit+0xa>

08002748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	460c      	mov	r4, r1
 800274c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2500      	movs	r5, #0
 8002750:	e006      	b.n	8002760 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8002752:	f3af 8000 	nop.w
 8002756:	4621      	mov	r1, r4
 8002758:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800275e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	42b5      	cmp	r5, r6
 8002762:	dbf6      	blt.n	8002752 <_read+0xa>
	}

return len;
}
 8002764:	4630      	mov	r0, r6
 8002766:	bd70      	pop	{r4, r5, r6, pc}

08002768 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	460c      	mov	r4, r1
 800276c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	2500      	movs	r5, #0
 8002770:	e004      	b.n	800277c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8002772:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002776:	f7fe fe0f 	bl	8001398 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	3501      	adds	r5, #1
 800277c:	42b5      	cmp	r5, r6
 800277e:	dbf8      	blt.n	8002772 <_write+0xa>
	}
	return len;
}
 8002780:	4630      	mov	r0, r6
 8002782:	bd70      	pop	{r4, r5, r6, pc}

08002784 <_close>:

int _close(int file)
{
	return -1;
}
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	4770      	bx	lr

0800278a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800278a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002790:	2000      	movs	r0, #0
 8002792:	4770      	bx	lr

08002794 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002794:	2001      	movs	r0, #1
 8002796:	4770      	bx	lr

08002798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002798:	2000      	movs	r0, #0
 800279a:	4770      	bx	lr

0800279c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 800279c:	b510      	push	{r4, lr}
 800279e:	4603      	mov	r3, r0
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <_sbrk+0x38>)
 80027a2:	490d      	ldr	r1, [pc, #52]	; (80027d8 <_sbrk+0x3c>)
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <_sbrk+0x40>)
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	b140      	cbz	r0, 80027bc <_sbrk+0x20>
	{
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <_sbrk+0x40>)
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	4403      	add	r3, r0
 80027b0:	1a52      	subs	r2, r2, r1
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d806      	bhi.n	80027c4 <_sbrk+0x28>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <_sbrk+0x40>)
 80027b8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
}
 80027ba:	bd10      	pop	{r4, pc}
		__sbrk_heap_end = &_end;
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <_sbrk+0x40>)
 80027be:	4c08      	ldr	r4, [pc, #32]	; (80027e0 <_sbrk+0x44>)
 80027c0:	6004      	str	r4, [r0, #0]
 80027c2:	e7f2      	b.n	80027aa <_sbrk+0xe>
		errno = ENOMEM;
 80027c4:	f004 f9fc 	bl	8006bc0 <__errno>
 80027c8:	230c      	movs	r3, #12
 80027ca:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	e7f3      	b.n	80027ba <_sbrk+0x1e>
 80027d2:	bf00      	nop
 80027d4:	2000a000 	.word	0x2000a000
 80027d8:	00000800 	.word	0x00000800
 80027dc:	20000908 	.word	0x20000908
 80027e0:	20000920 	.word	0x20000920

080027e4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <SystemInit+0x10>)
 80027e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff fff2 	bl	80027e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f004 f9d1 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282a:	f7ff fcfb 	bl	8002224 <main>

0800282e <LoopForever>:

LoopForever:
    b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002830:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800283c:	0800ca2c 	.word	0x0800ca2c
  ldr r2, =_sbss
 8002840:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002844:	20000920 	.word	0x20000920

08002848 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <COMP_IRQHandler>
	...

0800284c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_InitTick+0x44>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b90b      	cbnz	r3, 8002856 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002852:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002854:	4770      	bx	lr
{
 8002856:	b510      	push	{r4, lr}
 8002858:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800285a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_InitTick+0x48>)
 8002864:	6810      	ldr	r0, [r2, #0]
 8002866:	fbb0 f0f3 	udiv	r0, r0, r3
 800286a:	f001 f899 	bl	80039a0 <HAL_SYSTICK_Config>
 800286e:	b968      	cbnz	r0, 800288c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002870:	2c0f      	cmp	r4, #15
 8002872:	d901      	bls.n	8002878 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002874:	2001      	movs	r0, #1
 8002876:	e00a      	b.n	800288e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	4621      	mov	r1, r4
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f001 f836 	bl	80038f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_InitTick+0x4c>)
 8002886:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002888:	2000      	movs	r0, #0
 800288a:	e000      	b.n	800288e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800288c:	2001      	movs	r0, #1
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	20000014 	.word	0x20000014
 8002894:	20000010 	.word	0x20000010
 8002898:	20000018 	.word	0x20000018

0800289c <HAL_Init>:
{
 800289c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289e:	2003      	movs	r0, #3
 80028a0:	f001 f814 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff ffd1 	bl	800284c <HAL_InitTick>
 80028aa:	b110      	cbz	r0, 80028b2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80028ac:	2401      	movs	r4, #1
}
 80028ae:	4620      	mov	r0, r4
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	4604      	mov	r4, r0
    HAL_MspInit();
 80028b4:	f7ff fce8 	bl	8002288 <HAL_MspInit>
 80028b8:	e7f9      	b.n	80028ae <HAL_Init+0x12>
	...

080028bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_IncTick+0x10>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_IncTick+0x14>)
 80028c2:	6811      	ldr	r1, [r2, #0]
 80028c4:	440b      	add	r3, r1
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000014 	.word	0x20000014
 80028d0:	2000090c 	.word	0x2000090c

080028d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028d4:	4b01      	ldr	r3, [pc, #4]	; (80028dc <HAL_GetTick+0x8>)
 80028d6:	6818      	ldr	r0, [r3, #0]
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000090c 	.word	0x2000090c

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fff6 	bl	80028d4 <HAL_GetTick>
 80028e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80028ee:	d002      	beq.n	80028f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_Delay+0x24>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f6:	f7ff ffed 	bl	80028d4 <HAL_GetTick>
 80028fa:	1b40      	subs	r0, r0, r5
 80028fc:	42a0      	cmp	r0, r4
 80028fe:	d3fa      	bcc.n	80028f6 <HAL_Delay+0x16>
  {
  }
}
 8002900:	bd38      	pop	{r3, r4, r5, pc}
 8002902:	bf00      	nop
 8002904:	20000014 	.word	0x20000014

08002908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002908:	b530      	push	{r4, r5, lr}
 800290a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800290c:	2300      	movs	r3, #0
 800290e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 80e4 	beq.w	8002ade <HAL_ADC_Init+0x1d6>
 8002916:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002918:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800291a:	b313      	cbz	r3, 8002962 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800291c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002924:	d005      	beq.n	8002932 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800292c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002930:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002934:	6893      	ldr	r3, [r2, #8]
 8002936:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800293a:	d11f      	bne.n	800297c <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 800293c:	6893      	ldr	r3, [r2, #8]
 800293e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002942:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_ADC_Init+0x1dc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_ADC_Init+0x1e0>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002960:	e009      	b.n	8002976 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002962:	f7ff fca9 	bl	80022b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002966:	2300      	movs	r3, #0
 8002968:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800296a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800296e:	e7d5      	b.n	800291c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002970:	9b01      	ldr	r3, [sp, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800297c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800297e:	6893      	ldr	r3, [r2, #8]
 8002980:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002984:	f040 8082 	bne.w	8002a8c <HAL_ADC_Init+0x184>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002998:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f013 0304 	ands.w	r3, r3, #4
 80029a0:	d000      	beq.n	80029a4 <HAL_ADC_Init+0x9c>
 80029a2:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80029a6:	f011 0f10 	tst.w	r1, #16
 80029aa:	f040 8091 	bne.w	8002ad0 <HAL_ADC_Init+0x1c8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 808e 	bne.w	8002ad0 <HAL_ADC_Init+0x1c8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029c0:	6893      	ldr	r3, [r2, #8]
 80029c2:	f013 0f01 	tst.w	r3, #1
 80029c6:	d114      	bne.n	80029f2 <HAL_ADC_Init+0xea>
 80029c8:	4b48      	ldr	r3, [pc, #288]	; (8002aec <HAL_ADC_Init+0x1e4>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f013 0301 	ands.w	r3, r3, #1
 80029d0:	d000      	beq.n	80029d4 <HAL_ADC_Init+0xcc>
 80029d2:	2301      	movs	r3, #1
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_ADC_Init+0x1e8>)
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	f012 0201 	ands.w	r2, r2, #1
 80029dc:	d000      	beq.n	80029e0 <HAL_ADC_Init+0xd8>
 80029de:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_Init+0xea>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029e4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029e6:	4943      	ldr	r1, [pc, #268]	; (8002af4 <HAL_ADC_Init+0x1ec>)
 80029e8:	688a      	ldr	r2, [r1, #8]
 80029ea:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f2:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 80029f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80029fa:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80029fc:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80029fe:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002a00:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a02:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0a:	2a01      	cmp	r2, #1
 8002a0c:	d040      	beq.n	8002a90 <HAL_ADC_Init+0x188>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a10:	b122      	cbz	r2, 8002a1c <HAL_ADC_Init+0x114>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a12:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a18:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a1a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a1c:	6821      	ldr	r1, [r4, #0]
 8002a1e:	68cd      	ldr	r5, [r1, #12]
 8002a20:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <HAL_ADC_Init+0x1f0>)
 8002a22:	402a      	ands	r2, r5
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a28:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a2a:	688b      	ldr	r3, [r1, #8]
 8002a2c:	f013 0304 	ands.w	r3, r3, #4
 8002a30:	d000      	beq.n	8002a34 <HAL_ADC_Init+0x12c>
 8002a32:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a34:	688a      	ldr	r2, [r1, #8]
 8002a36:	f012 0208 	ands.w	r2, r2, #8
 8002a3a:	d000      	beq.n	8002a3e <HAL_ADC_Init+0x136>
 8002a3c:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a3e:	b9b3      	cbnz	r3, 8002a6e <HAL_ADC_Init+0x166>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a40:	b9aa      	cbnz	r2, 8002a6e <HAL_ADC_Init+0x166>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a42:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a44:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002a48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a4a:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a4e:	68cb      	ldr	r3, [r1, #12]
 8002a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d01a      	beq.n	8002a9a <HAL_ADC_Init+0x192>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	6913      	ldr	r3, [r2, #16]
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d024      	beq.n	8002abe <HAL_ADC_Init+0x1b6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a80:	f023 0303 	bic.w	r3, r3, #3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6563      	str	r3, [r4, #84]	; 0x54
 8002a8a:	e026      	b.n	8002ada <HAL_ADC_Init+0x1d2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e784      	b.n	800299a <HAL_ADC_Init+0x92>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a92:	3a01      	subs	r2, #1
 8002a94:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002a98:	e7b9      	b.n	8002a0e <HAL_ADC_Init+0x106>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a9a:	6821      	ldr	r1, [r4, #0]
 8002a9c:	690b      	ldr	r3, [r1, #16]
 8002a9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002aa8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002aaa:	432a      	orrs	r2, r5
 8002aac:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002aae:	432a      	orrs	r2, r5
 8002ab0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002ab2:	432a      	orrs	r2, r5
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	610b      	str	r3, [r1, #16]
 8002abc:	e7d7      	b.n	8002a6e <HAL_ADC_Init+0x166>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002abe:	6821      	ldr	r1, [r4, #0]
 8002ac0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ac2:	f023 030f 	bic.w	r3, r3, #15
 8002ac6:	69e2      	ldr	r2, [r4, #28]
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	; 0x30
 8002ace:	e7d6      	b.n	8002a7e <HAL_ADC_Init+0x176>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ad2:	f043 0310 	orr.w	r3, r3, #16
 8002ad6:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002ada:	b003      	add	sp, #12
 8002adc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
 8002ae0:	e7fb      	b.n	8002ada <HAL_ADC_Init+0x1d2>
 8002ae2:	bf00      	nop
 8002ae4:	20000010 	.word	0x20000010
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	50040000 	.word	0x50040000
 8002af0:	50040100 	.word	0x50040100
 8002af4:	50040300 	.word	0x50040300
 8002af8:	fff0c007 	.word	0xfff0c007

08002afc <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002afc:	4770      	bx	lr

08002afe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002afe:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b00:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002b02:	f7ff fffb 	bl	8002afc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b06:	bd08      	pop	{r3, pc}

08002b08 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002b08:	4770      	bx	lr

08002b0a <HAL_ADC_ErrorCallback>:
}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_IRQHandler>:
{
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b10:	6803      	ldr	r3, [r0, #0]
 8002b12:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b14:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b16:	4b98      	ldr	r3, [pc, #608]	; (8002d78 <HAL_ADC_IRQHandler+0x26c>)
 8002b18:	689e      	ldr	r6, [r3, #8]
 8002b1a:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b1e:	f017 0f02 	tst.w	r7, #2
 8002b22:	d010      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x3a>
 8002b24:	f015 0f02 	tst.w	r5, #2
 8002b28:	d00d      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b2c:	f013 0f10 	tst.w	r3, #16
 8002b30:	d103      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b32:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b38:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 fe39 	bl	80037b2 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b46:	f017 0f04 	tst.w	r7, #4
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x46>
 8002b4c:	f015 0f04 	tst.w	r5, #4
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x52>
 8002b52:	f017 0f08 	tst.w	r7, #8
 8002b56:	d04a      	beq.n	8002bee <HAL_ADC_IRQHandler+0xe2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b58:	f015 0f08 	tst.w	r5, #8
 8002b5c:	d047      	beq.n	8002bee <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b60:	f013 0f10 	tst.w	r3, #16
 8002b64:	d103      	bne.n	8002b6e <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b6e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002b76:	d134      	bne.n	8002be2 <HAL_ADC_IRQHandler+0xd6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b78:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_ADC_IRQHandler+0x270>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x86>
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b84:	b146      	cbz	r6, 8002b98 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b86:	2e05      	cmp	r6, #5
 8002b88:	d006      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b8a:	2e09      	cmp	r6, #9
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x8c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b8e:	68d2      	ldr	r2, [r2, #12]
 8002b90:	e003      	b.n	8002b9a <HAL_ADC_IRQHandler+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b92:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002b96:	e7f3      	b.n	8002b80 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b98:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b9a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002b9e:	d120      	bne.n	8002be2 <HAL_ADC_IRQHandler+0xd6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f012 0f08 	tst.w	r2, #8
 8002ba6:	d01c      	beq.n	8002be2 <HAL_ADC_IRQHandler+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	f012 0f04 	tst.w	r2, #4
 8002bae:	d110      	bne.n	8002bd2 <HAL_ADC_IRQHandler+0xc6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	f022 020c 	bic.w	r2, r2, #12
 8002bb6:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbe:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002bc6:	d10c      	bne.n	8002be2 <HAL_ADC_IRQHandler+0xd6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6563      	str	r3, [r4, #84]	; 0x54
 8002bd0:	e007      	b.n	8002be2 <HAL_ADC_IRQHandler+0xd6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bd4:	f043 0310 	orr.w	r3, r3, #16
 8002bd8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7fe fda0 	bl	8001728 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bee:	f017 0f20 	tst.w	r7, #32
 8002bf2:	d002      	beq.n	8002bfa <HAL_ADC_IRQHandler+0xee>
 8002bf4:	f015 0f20 	tst.w	r5, #32
 8002bf8:	d105      	bne.n	8002c06 <HAL_ADC_IRQHandler+0xfa>
 8002bfa:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002bfe:	d05c      	beq.n	8002cba <HAL_ADC_IRQHandler+0x1ae>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c00:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c04:	d059      	beq.n	8002cba <HAL_ADC_IRQHandler+0x1ae>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c08:	f013 0f10 	tst.w	r3, #16
 8002c0c:	d103      	bne.n	8002c16 <HAL_ADC_IRQHandler+0x10a>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c14:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c16:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c1a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8002c1e:	d112      	bne.n	8002c46 <HAL_ADC_IRQHandler+0x13a>
 8002c20:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002c28:	d10f      	bne.n	8002c4a <HAL_ADC_IRQHandler+0x13e>
 8002c2a:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_ADC_IRQHandler+0x270>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00d      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x142>
 8002c32:	461a      	mov	r2, r3
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00d      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c38:	b166      	cbz	r6, 8002c54 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c3a:	2e06      	cmp	r6, #6
 8002c3c:	d00a      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c3e:	2e07      	cmp	r6, #7
 8002c40:	d008      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x148>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c42:	68d2      	ldr	r2, [r2, #12]
 8002c44:	e007      	b.n	8002c56 <HAL_ADC_IRQHandler+0x14a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c46:	2100      	movs	r1, #0
 8002c48:	e7eb      	b.n	8002c22 <HAL_ADC_IRQHandler+0x116>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	e7ee      	b.n	8002c2c <HAL_ADC_IRQHandler+0x120>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002c52:	e7ef      	b.n	8002c34 <HAL_ADC_IRQHandler+0x128>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c54:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c56:	b351      	cbz	r1, 8002cae <HAL_ADC_IRQHandler+0x1a2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c58:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002c5c:	d003      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x15a>
 8002c5e:	b330      	cbz	r0, 8002cae <HAL_ADC_IRQHandler+0x1a2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c60:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002c64:	d123      	bne.n	8002cae <HAL_ADC_IRQHandler+0x1a2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c6c:	d01f      	beq.n	8002cae <HAL_ADC_IRQHandler+0x1a2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c6e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002c72:	d11c      	bne.n	8002cae <HAL_ADC_IRQHandler+0x1a2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	f012 0f08 	tst.w	r2, #8
 8002c7a:	d110      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x192>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c82:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c8a:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c92:	d10c      	bne.n	8002cae <HAL_ADC_IRQHandler+0x1a2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6563      	str	r3, [r4, #84]	; 0x54
 8002c9c:	e007      	b.n	8002cae <HAL_ADC_IRQHandler+0x1a2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ca0:	f043 0310 	orr.w	r3, r3, #16
 8002ca4:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f000 fd7b 	bl	80037aa <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	2260      	movs	r2, #96	; 0x60
 8002cb8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002cba:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002cbe:	d002      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x1ba>
 8002cc0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002cc4:	d12f      	bne.n	8002d26 <HAL_ADC_IRQHandler+0x21a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002cc6:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002cca:	d002      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x1c6>
 8002ccc:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002cd0:	d134      	bne.n	8002d3c <HAL_ADC_IRQHandler+0x230>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002cd2:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002cd6:	d002      	beq.n	8002cde <HAL_ADC_IRQHandler+0x1d2>
 8002cd8:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002cdc:	d13a      	bne.n	8002d54 <HAL_ADC_IRQHandler+0x248>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cde:	f017 0f10 	tst.w	r7, #16
 8002ce2:	d019      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x20c>
 8002ce4:	f015 0f10 	tst.w	r5, #16
 8002ce8:	d016      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x20c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cec:	b133      	cbz	r3, 8002cfc <HAL_ADC_IRQHandler+0x1f0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002cee:	2e00      	cmp	r6, #0
 8002cf0:	d03c      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x260>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_ADC_IRQHandler+0x26c>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cf6:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002cfa:	d00a      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x206>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d02:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff fefc 	bl	8002b0a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d18:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8002d1c:	d002      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x218>
 8002d1e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002d22:	d12d      	bne.n	8002d80 <HAL_ADC_IRQHandler+0x274>
}
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff feea 	bl	8002b08 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e7c4      	b.n	8002cc6 <HAL_ADC_IRQHandler+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d42:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f000 fd32 	bl	80037ae <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e7be      	b.n	8002cd2 <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f000 fd27 	bl	80037b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e7b8      	b.n	8002cde <HAL_ADC_IRQHandler+0x1d2>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f013 0f01 	tst.w	r3, #1
 8002d74:	d0cd      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x206>
 8002d76:	e7c1      	b.n	8002cfc <HAL_ADC_IRQHandler+0x1f0>
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	50040100 	.word	0x50040100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d86:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d96:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 fd07 	bl	80037ac <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002d9e:	e7c1      	b.n	8002d24 <HAL_ADC_IRQHandler+0x218>

08002da0 <ADC_DMAConvCplt>:
{
 8002da0:	b508      	push	{r3, lr}
 8002da2:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002da6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002da8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002dac:	d130      	bne.n	8002e10 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db4:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f012 0f08 	tst.w	r2, #8
 8002dbe:	d014      	beq.n	8002dea <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002dc6:	d120      	bne.n	8002e0a <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002dce:	d11c      	bne.n	8002e0a <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd6:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dd8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002dda:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002dde:	d114      	bne.n	8002e0a <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6543      	str	r3, [r0, #84]	; 0x54
 8002de8:	e00f      	b.n	8002e0a <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f013 0f02 	tst.w	r3, #2
 8002df0:	d10b      	bne.n	8002e0a <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002dfc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e00:	d103      	bne.n	8002e0a <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e02:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002e0a:	f7fe fc8d 	bl	8001728 <HAL_ADC_ConvCpltCallback>
}
 8002e0e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e10:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002e12:	f012 0f10 	tst.w	r2, #16
 8002e16:	d104      	bne.n	8002e22 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e18:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4790      	blx	r2
}
 8002e20:	e7f5      	b.n	8002e0e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8002e22:	f7ff fe72 	bl	8002b0a <HAL_ADC_ErrorCallback>
 8002e26:	e7f2      	b.n	8002e0e <ADC_DMAConvCplt+0x6e>

08002e28 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e28:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e32:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e34:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e3c:	f7ff fe65 	bl	8002b0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e40:	bd08      	pop	{r3, pc}
	...

08002e44 <HAL_ADC_ConfigChannel>:
{
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002e48:	2200      	movs	r2, #0
 8002e4a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002e4c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002e50:	2a01      	cmp	r2, #1
 8002e52:	f000 8259 	beq.w	8003308 <HAL_ADC_ConfigChannel+0x4c4>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5e:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e60:	6892      	ldr	r2, [r2, #8]
 8002e62:	f012 0f04 	tst.w	r2, #4
 8002e66:	d009      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002e78:	b003      	add	sp, #12
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8002e7c:	684a      	ldr	r2, [r1, #4]
 8002e7e:	2a05      	cmp	r2, #5
 8002e80:	d809      	bhi.n	8002e96 <HAL_ADC_ConfigChannel+0x52>
      switch (sConfig->Rank)
 8002e82:	3a02      	subs	r2, #2
 8002e84:	2a03      	cmp	r2, #3
 8002e86:	f200 809e 	bhi.w	8002fc6 <HAL_ADC_ConfigChannel+0x182>
 8002e8a:	e8df f002 	tbb	[pc, r2]
 8002e8e:	9202      	.short	0x9202
 8002e90:	9895      	.short	0x9895
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e92:	220c      	movs	r2, #12
 8002e94:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e96:	681d      	ldr	r5, [r3, #0]
 8002e98:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e9a:	3530      	adds	r5, #48	; 0x30
 8002e9c:	0a22      	lsrs	r2, r4, #8
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8002ea4:	58a8      	ldr	r0, [r5, r2]
 8002ea6:	f004 0e1f 	and.w	lr, r4, #31
 8002eaa:	241f      	movs	r4, #31
 8002eac:	fa04 f40e 	lsl.w	r4, r4, lr
 8002eb0:	ea20 0004 	bic.w	r0, r0, r4
 8002eb4:	680c      	ldr	r4, [r1, #0]
 8002eb6:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8002eba:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002ebe:	ea40 000c 	orr.w	r0, r0, ip
 8002ec2:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec4:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec6:	68a2      	ldr	r2, [r4, #8]
 8002ec8:	f012 0204 	ands.w	r2, r2, #4
 8002ecc:	d000      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x8c>
 8002ece:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ed0:	68a0      	ldr	r0, [r4, #8]
 8002ed2:	f010 0008 	ands.w	r0, r0, #8
 8002ed6:	d000      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x96>
 8002ed8:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	2a00      	cmp	r2, #0
 8002edc:	d135      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x106>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d133      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x106>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ee2:	6888      	ldr	r0, [r1, #8]
 8002ee4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8002ee8:	d070      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eea:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002eec:	3414      	adds	r4, #20
 8002eee:	0e72      	lsrs	r2, r6, #25
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002ef6:	58a5      	ldr	r5, [r4, r2]
 8002ef8:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 8002efc:	2607      	movs	r6, #7
 8002efe:	fa06 f60c 	lsl.w	r6, r6, ip
 8002f02:	ea25 0506 	bic.w	r5, r5, r6
 8002f06:	fa00 f00c 	lsl.w	r0, r0, ip
 8002f0a:	4328      	orrs	r0, r5
 8002f0c:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f0e:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f10:	6942      	ldr	r2, [r0, #20]
 8002f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f16:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f18:	694c      	ldr	r4, [r1, #20]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	68c2      	ldr	r2, [r0, #12]
 8002f1e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f22:	0052      	lsls	r2, r2, #1
 8002f24:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f28:	690d      	ldr	r5, [r1, #16]
 8002f2a:	2d04      	cmp	r5, #4
 8002f2c:	d063      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x1b2>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f2e:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f30:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002f32:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8002f36:	4cad      	ldr	r4, [pc, #692]	; (80031ec <HAL_ADC_ConfigChannel+0x3a8>)
 8002f38:	403c      	ands	r4, r7
 8002f3a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002f3e:	4332      	orrs	r2, r6
 8002f40:	4314      	orrs	r4, r2
 8002f42:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002f46:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f4a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f4c:	6882      	ldr	r2, [r0, #8]
 8002f4e:	f012 0f01 	tst.w	r2, #1
 8002f52:	d117      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x140>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f54:	680a      	ldr	r2, [r1, #0]
 8002f56:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002f58:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8002f5c:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8002f60:	ea24 040c 	bic.w	r4, r4, ip
 8002f64:	f005 0c18 	and.w	ip, r5, #24
 8002f68:	4da1      	ldr	r5, [pc, #644]	; (80031f0 <HAL_ADC_ConfigChannel+0x3ac>)
 8002f6a:	fa25 f50c 	lsr.w	r5, r5, ip
 8002f6e:	402a      	ands	r2, r5
 8002f70:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002f74:	4322      	orrs	r2, r4
 8002f76:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f7a:	68c8      	ldr	r0, [r1, #12]
 8002f7c:	4a9d      	ldr	r2, [pc, #628]	; (80031f4 <HAL_ADC_ConfigChannel+0x3b0>)
 8002f7e:	4290      	cmp	r0, r2
 8002f80:	f000 80a1 	beq.w	80030c6 <HAL_ADC_ConfigChannel+0x282>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f84:	680a      	ldr	r2, [r1, #0]
 8002f86:	499c      	ldr	r1, [pc, #624]	; (80031f8 <HAL_ADC_ConfigChannel+0x3b4>)
 8002f88:	420a      	tst	r2, r1
 8002f8a:	f000 81b9 	beq.w	8003300 <HAL_ADC_ConfigChannel+0x4bc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f8e:	499b      	ldr	r1, [pc, #620]	; (80031fc <HAL_ADC_ConfigChannel+0x3b8>)
 8002f90:	6889      	ldr	r1, [r1, #8]
 8002f92:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f96:	489a      	ldr	r0, [pc, #616]	; (8003200 <HAL_ADC_ConfigChannel+0x3bc>)
 8002f98:	4282      	cmp	r2, r0
 8002f9a:	f000 8163 	beq.w	8003264 <HAL_ADC_ConfigChannel+0x420>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f9e:	4899      	ldr	r0, [pc, #612]	; (8003204 <HAL_ADC_ConfigChannel+0x3c0>)
 8002fa0:	4282      	cmp	r2, r0
 8002fa2:	f000 8186 	beq.w	80032b2 <HAL_ADC_ConfigChannel+0x46e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa6:	4898      	ldr	r0, [pc, #608]	; (8003208 <HAL_ADC_ConfigChannel+0x3c4>)
 8002fa8:	4282      	cmp	r2, r0
 8002faa:	f000 8196 	beq.w	80032da <HAL_ADC_ConfigChannel+0x496>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e75f      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002fb2:	2212      	movs	r2, #18
 8002fb4:	604a      	str	r2, [r1, #4]
          break;
 8002fb6:	e76e      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002fb8:	2218      	movs	r2, #24
 8002fba:	604a      	str	r2, [r1, #4]
          break;
 8002fbc:	e76b      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc2:	604a      	str	r2, [r1, #4]
          break;
 8002fc4:	e767      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x52>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002fc6:	2206      	movs	r2, #6
 8002fc8:	604a      	str	r2, [r1, #4]
          break;
 8002fca:	e764      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x52>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fcc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fce:	3414      	adds	r4, #20
 8002fd0:	0e42      	lsrs	r2, r0, #25
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002fd8:	58a5      	ldr	r5, [r4, r2]
 8002fda:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002fde:	2607      	movs	r6, #7
 8002fe0:	fa06 f000 	lsl.w	r0, r6, r0
 8002fe4:	ea25 0000 	bic.w	r0, r5, r0
 8002fe8:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fea:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fec:	6942      	ldr	r2, [r0, #20]
 8002fee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ff2:	6142      	str	r2, [r0, #20]
}
 8002ff4:	e790      	b.n	8002f18 <HAL_ADC_ConfigChannel+0xd4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ff6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002ff8:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ffa:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ffe:	680a      	ldr	r2, [r1, #0]
 8003000:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003004:	bb85      	cbnz	r5, 8003068 <HAL_ADC_ConfigChannel+0x224>
 8003006:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800300a:	4294      	cmp	r4, r2
 800300c:	d034      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x234>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800300e:	681c      	ldr	r4, [r3, #0]
 8003010:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003012:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003014:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003018:	680a      	ldr	r2, [r1, #0]
 800301a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800301e:	bb85      	cbnz	r5, 8003082 <HAL_ADC_ConfigChannel+0x23e>
 8003020:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003024:	4290      	cmp	r0, r2
 8003026:	d034      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x24e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003028:	681c      	ldr	r4, [r3, #0]
 800302a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800302c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800302e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003032:	680a      	ldr	r2, [r1, #0]
 8003034:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003038:	bb85      	cbnz	r5, 800309c <HAL_ADC_ConfigChannel+0x258>
 800303a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800303e:	4290      	cmp	r0, r2
 8003040:	d034      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x268>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003046:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003048:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800304c:	680a      	ldr	r2, [r1, #0]
 800304e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003052:	bb85      	cbnz	r5, 80030b6 <HAL_ADC_ConfigChannel+0x272>
 8003054:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003058:	4290      	cmp	r0, r2
 800305a:	f47f af76 	bne.w	8002f4a <HAL_ADC_ConfigChannel+0x106>
  MODIFY_REG(*preg,
 800305e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003060:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003064:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003066:	e770      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x106>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800306c:	b112      	cbz	r2, 8003074 <HAL_ADC_ConfigChannel+0x230>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800306e:	fab2 f282 	clz	r2, r2
 8003072:	e7ca      	b.n	800300a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003074:	2220      	movs	r2, #32
 8003076:	e7c8      	b.n	800300a <HAL_ADC_ConfigChannel+0x1c6>
  MODIFY_REG(*preg,
 8003078:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800307a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307e:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003080:	e7c5      	b.n	800300e <HAL_ADC_ConfigChannel+0x1ca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003086:	b112      	cbz	r2, 800308e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	e7ca      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1e0>
    return 32U;
 800308e:	2220      	movs	r2, #32
 8003090:	e7c8      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8003092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003094:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003098:	6662      	str	r2, [r4, #100]	; 0x64
}
 800309a:	e7c5      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80030a0:	b112      	cbz	r2, 80030a8 <HAL_ADC_ConfigChannel+0x264>
  return __builtin_clz(value);
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	e7ca      	b.n	800303e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80030a8:	2220      	movs	r2, #32
 80030aa:	e7c8      	b.n	800303e <HAL_ADC_ConfigChannel+0x1fa>
  MODIFY_REG(*preg,
 80030ac:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80030ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030b2:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80030b4:	e7c5      	b.n	8003042 <HAL_ADC_ConfigChannel+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80030ba:	b112      	cbz	r2, 80030c2 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	e7ca      	b.n	8003058 <HAL_ADC_ConfigChannel+0x214>
    return 32U;
 80030c2:	2220      	movs	r2, #32
 80030c4:	e7c8      	b.n	8003058 <HAL_ADC_ConfigChannel+0x214>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c6:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c8:	680a      	ldr	r2, [r1, #0]
 80030ca:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d138      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x300>
 80030d2:	0e90      	lsrs	r0, r2, #26
 80030d4:	3001      	adds	r0, #1
 80030d6:	f000 001f 	and.w	r0, r0, #31
 80030da:	2809      	cmp	r0, #9
 80030dc:	bf8c      	ite	hi
 80030de:	2000      	movhi	r0, #0
 80030e0:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d066      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x370>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	d13b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x31e>
 80030ea:	0e90      	lsrs	r0, r2, #26
 80030ec:	3001      	adds	r0, #1
 80030ee:	0680      	lsls	r0, r0, #26
 80030f0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80030f4:	2d00      	cmp	r5, #0
 80030f6:	d140      	bne.n	800317a <HAL_ADC_ConfigChannel+0x336>
 80030f8:	0e96      	lsrs	r6, r2, #26
 80030fa:	3601      	adds	r6, #1
 80030fc:	f006 071f 	and.w	r7, r6, #31
 8003100:	2601      	movs	r6, #1
 8003102:	40be      	lsls	r6, r7
 8003104:	4330      	orrs	r0, r6
 8003106:	2d00      	cmp	r5, #0
 8003108:	d146      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x354>
 800310a:	0e92      	lsrs	r2, r2, #26
 800310c:	3201      	adds	r2, #1
 800310e:	f002 021f 	and.w	r2, r2, #31
 8003112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003116:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003118:	4302      	orrs	r2, r0
 800311a:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800311c:	f104 0614 	add.w	r6, r4, #20
 8003120:	0e55      	lsrs	r5, r2, #25
 8003122:	00ad      	lsls	r5, r5, #2
 8003124:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003128:	5974      	ldr	r4, [r6, r5]
 800312a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800312e:	f04f 0c07 	mov.w	ip, #7
 8003132:	fa0c fc02 	lsl.w	ip, ip, r2
 8003136:	ea24 0c0c 	bic.w	ip, r4, ip
 800313a:	4090      	lsls	r0, r2
 800313c:	ea4c 0000 	orr.w	r0, ip, r0
 8003140:	5170      	str	r0, [r6, r5]
}
 8003142:	e71f      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003148:	b148      	cbz	r0, 800315e <HAL_ADC_ConfigChannel+0x31a>
  return __builtin_clz(value);
 800314a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800314e:	3001      	adds	r0, #1
 8003150:	f000 001f 	and.w	r0, r0, #31
 8003154:	2809      	cmp	r0, #9
 8003156:	bf8c      	ite	hi
 8003158:	2000      	movhi	r0, #0
 800315a:	2001      	movls	r0, #1
 800315c:	e7c1      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800315e:	2020      	movs	r0, #32
 8003160:	e7f5      	b.n	800314e <HAL_ADC_ConfigChannel+0x30a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003166:	b130      	cbz	r0, 8003176 <HAL_ADC_ConfigChannel+0x332>
  return __builtin_clz(value);
 8003168:	fab0 f080 	clz	r0, r0
 800316c:	3001      	adds	r0, #1
 800316e:	0680      	lsls	r0, r0, #26
 8003170:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003174:	e7be      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8003176:	2020      	movs	r0, #32
 8003178:	e7f8      	b.n	800316c <HAL_ADC_ConfigChannel+0x328>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800317e:	b14e      	cbz	r6, 8003194 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003180:	fab6 f686 	clz	r6, r6
 8003184:	3601      	adds	r6, #1
 8003186:	f006 061f 	and.w	r6, r6, #31
 800318a:	f04f 0c01 	mov.w	ip, #1
 800318e:	fa0c f606 	lsl.w	r6, ip, r6
 8003192:	e7b7      	b.n	8003104 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8003194:	2620      	movs	r6, #32
 8003196:	e7f5      	b.n	8003184 <HAL_ADC_ConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800319c:	b142      	cbz	r2, 80031b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	3201      	adds	r2, #1
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031ac:	0512      	lsls	r2, r2, #20
 80031ae:	e7b3      	b.n	8003118 <HAL_ADC_ConfigChannel+0x2d4>
    return 32U;
 80031b0:	2220      	movs	r2, #32
 80031b2:	e7f6      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x35e>
 80031b4:	bb55      	cbnz	r5, 800320c <HAL_ADC_ConfigChannel+0x3c8>
 80031b6:	0e90      	lsrs	r0, r2, #26
 80031b8:	3001      	adds	r0, #1
 80031ba:	0680      	lsls	r0, r0, #26
 80031bc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80031c0:	bb85      	cbnz	r5, 8003224 <HAL_ADC_ConfigChannel+0x3e0>
 80031c2:	0e96      	lsrs	r6, r2, #26
 80031c4:	3601      	adds	r6, #1
 80031c6:	f006 071f 	and.w	r7, r6, #31
 80031ca:	2601      	movs	r6, #1
 80031cc:	40be      	lsls	r6, r7
 80031ce:	4330      	orrs	r0, r6
 80031d0:	bbbd      	cbnz	r5, 8003242 <HAL_ADC_ConfigChannel+0x3fe>
 80031d2:	0e92      	lsrs	r2, r2, #26
 80031d4:	3201      	adds	r2, #1
 80031d6:	f002 021f 	and.w	r2, r2, #31
 80031da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031de:	3a1e      	subs	r2, #30
 80031e0:	0512      	lsls	r2, r2, #20
 80031e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e797      	b.n	800311a <HAL_ADC_ConfigChannel+0x2d6>
 80031ea:	bf00      	nop
 80031ec:	03fff000 	.word	0x03fff000
 80031f0:	0007ffff 	.word	0x0007ffff
 80031f4:	407f0000 	.word	0x407f0000
 80031f8:	80080000 	.word	0x80080000
 80031fc:	50040300 	.word	0x50040300
 8003200:	c7520000 	.word	0xc7520000
 8003204:	cb840000 	.word	0xcb840000
 8003208:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003210:	b130      	cbz	r0, 8003220 <HAL_ADC_ConfigChannel+0x3dc>
  return __builtin_clz(value);
 8003212:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003216:	3001      	adds	r0, #1
 8003218:	0680      	lsls	r0, r0, #26
 800321a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800321e:	e7cf      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x37c>
    return 32U;
 8003220:	2020      	movs	r0, #32
 8003222:	e7f8      	b.n	8003216 <HAL_ADC_ConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003228:	b14e      	cbz	r6, 800323e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800322a:	fab6 f686 	clz	r6, r6
 800322e:	3601      	adds	r6, #1
 8003230:	f006 061f 	and.w	r6, r6, #31
 8003234:	f04f 0c01 	mov.w	ip, #1
 8003238:	fa0c f606 	lsl.w	r6, ip, r6
 800323c:	e7c7      	b.n	80031ce <HAL_ADC_ConfigChannel+0x38a>
    return 32U;
 800323e:	2620      	movs	r6, #32
 8003240:	e7f5      	b.n	800322e <HAL_ADC_ConfigChannel+0x3ea>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003246:	b15a      	cbz	r2, 8003260 <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	3201      	adds	r2, #1
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003256:	3a1e      	subs	r2, #30
 8003258:	0512      	lsls	r2, r2, #20
 800325a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800325e:	e7c2      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x3a2>
    return 32U;
 8003260:	2220      	movs	r2, #32
 8003262:	e7f3      	b.n	800324c <HAL_ADC_ConfigChannel+0x408>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003264:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8003268:	f47f ae99 	bne.w	8002f9e <HAL_ADC_ConfigChannel+0x15a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	4a27      	ldr	r2, [pc, #156]	; (800330c <HAL_ADC_ConfigChannel+0x4c8>)
 8003270:	4291      	cmp	r1, r2
 8003272:	d001      	beq.n	8003278 <HAL_ADC_ConfigChannel+0x434>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003274:	2000      	movs	r0, #0
 8003276:	e5fc      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003278:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800327c:	4824      	ldr	r0, [pc, #144]	; (8003310 <HAL_ADC_ConfigChannel+0x4cc>)
 800327e:	6881      	ldr	r1, [r0, #8]
 8003280:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003284:	430a      	orrs	r2, r1
 8003286:	6082      	str	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_ADC_ConfigChannel+0x4d0>)
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	0992      	lsrs	r2, r2, #6
 800328e:	4922      	ldr	r1, [pc, #136]	; (8003318 <HAL_ADC_ConfigChannel+0x4d4>)
 8003290:	fba1 1202 	umull	r1, r2, r1, r2
 8003294:	0992      	lsrs	r2, r2, #6
 8003296:	3201      	adds	r2, #1
 8003298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80032a0:	e002      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x464>
            wait_loop_index--;
 80032a2:	9a01      	ldr	r2, [sp, #4]
 80032a4:	3a01      	subs	r2, #1
 80032a6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80032a8:	9a01      	ldr	r2, [sp, #4]
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	d1f9      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x45e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2000      	movs	r0, #0
 80032b0:	e5df      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032b2:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80032b6:	f47f ae76 	bne.w	8002fa6 <HAL_ADC_ConfigChannel+0x162>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_ADC_ConfigChannel+0x4c8>)
 80032be:	4291      	cmp	r1, r2
 80032c0:	d001      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x482>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c2:	2000      	movs	r0, #0
 80032c4:	e5d5      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c6:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <HAL_ADC_ConfigChannel+0x4cc>)
 80032cc:	6881      	ldr	r1, [r0, #8]
 80032ce:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80032d2:	430a      	orrs	r2, r1
 80032d4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2000      	movs	r0, #0
}
 80032d8:	e5cb      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032da:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80032de:	d111      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x4c0>
        if (ADC_VREFINT_INSTANCE(hadc))
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_ADC_ConfigChannel+0x4c8>)
 80032e4:	4291      	cmp	r1, r2
 80032e6:	d001      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x4a8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	e5c2      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ec:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032f0:	4807      	ldr	r0, [pc, #28]	; (8003310 <HAL_ADC_ConfigChannel+0x4cc>)
 80032f2:	6881      	ldr	r1, [r0, #8]
 80032f4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80032f8:	430a      	orrs	r2, r1
 80032fa:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2000      	movs	r0, #0
}
 80032fe:	e5b8      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
 8003300:	2000      	movs	r0, #0
 8003302:	e5b6      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
 8003304:	2000      	movs	r0, #0
 8003306:	e5b4      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003308:	2002      	movs	r0, #2
 800330a:	e5b5      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x34>
 800330c:	50040000 	.word	0x50040000
 8003310:	50040300 	.word	0x50040300
 8003314:	20000010 	.word	0x20000010
 8003318:	053e2d63 	.word	0x053e2d63

0800331c <ADC_ConversionStop>:
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003320:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	f012 0204 	ands.w	r2, r2, #4
 8003328:	d000      	beq.n	800332c <ADC_ConversionStop+0x10>
 800332a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800332c:	6898      	ldr	r0, [r3, #8]
 800332e:	f010 0008 	ands.w	r0, r0, #8
 8003332:	d000      	beq.n	8003336 <ADC_ConversionStop+0x1a>
 8003334:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003336:	b90a      	cbnz	r2, 800333c <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003338:	2800      	cmp	r0, #0
 800333a:	d06b      	beq.n	8003414 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003342:	d004      	beq.n	800334e <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003344:	8b20      	ldrh	r0, [r4, #24]
 8003346:	f240 1201 	movw	r2, #257	; 0x101
 800334a:	4290      	cmp	r0, r2
 800334c:	d04e      	beq.n	80033ec <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800334e:	2902      	cmp	r1, #2
 8003350:	d010      	beq.n	8003374 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003352:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	f012 0f04 	tst.w	r2, #4
 800335a:	d00b      	beq.n	8003374 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	f012 0f02 	tst.w	r2, #2
 8003362:	d107      	bne.n	8003374 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800336a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800336e:	f042 0210 	orr.w	r2, r2, #16
 8003372:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003374:	2901      	cmp	r1, #1
 8003376:	d010      	beq.n	800339a <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003378:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	f012 0f08 	tst.w	r2, #8
 8003380:	d00b      	beq.n	800339a <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f012 0f02 	tst.w	r2, #2
 8003388:	d107      	bne.n	800339a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003390:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003394:	f042 0220 	orr.w	r2, r2, #32
 8003398:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800339a:	2902      	cmp	r1, #2
 800339c:	d034      	beq.n	8003408 <ADC_ConversionStop+0xec>
 800339e:	2903      	cmp	r1, #3
 80033a0:	d134      	bne.n	800340c <ADC_ConversionStop+0xf0>
 80033a2:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80033a4:	f7ff fa96 	bl	80028d4 <HAL_GetTick>
 80033a8:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	422b      	tst	r3, r5
 80033b0:	d02e      	beq.n	8003410 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033b2:	f7ff fa8f 	bl	80028d4 <HAL_GetTick>
 80033b6:	1b80      	subs	r0, r0, r6
 80033b8:	2805      	cmp	r0, #5
 80033ba:	d9f6      	bls.n	80033aa <ADC_ConversionStop+0x8e>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	422b      	tst	r3, r5
 80033c2:	d0f2      	beq.n	80033aa <ADC_ConversionStop+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033c6:	f043 0310 	orr.w	r3, r3, #16
 80033ca:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
 80033d6:	e01c      	b.n	8003412 <ADC_ConversionStop+0xf6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033da:	f043 0310 	orr.w	r3, r3, #16
 80033de:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
 80033ea:	e012      	b.n	8003412 <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80033ec:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80033f4:	d104      	bne.n	8003400 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <ADC_ConversionStop+0xfc>)
 80033f8:	428a      	cmp	r2, r1
 80033fa:	d8ed      	bhi.n	80033d8 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 80033fc:	3201      	adds	r2, #1
 80033fe:	e7f6      	b.n	80033ee <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003404:	2101      	movs	r1, #1
 8003406:	e7a4      	b.n	8003352 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003408:	2508      	movs	r5, #8
 800340a:	e7cb      	b.n	80033a4 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800340c:	2504      	movs	r5, #4
 800340e:	e7c9      	b.n	80033a4 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
}
 8003412:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003414:	2000      	movs	r0, #0
 8003416:	e7fc      	b.n	8003412 <ADC_ConversionStop+0xf6>
 8003418:	a33fffff 	.word	0xa33fffff

0800341c <ADC_Enable>:
{
 800341c:	b530      	push	{r4, r5, lr}
 800341e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003420:	2300      	movs	r3, #0
 8003422:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003424:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	f012 0f01 	tst.w	r2, #1
 800342c:	d158      	bne.n	80034e0 <ADC_Enable+0xc4>
 800342e:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <ADC_Enable+0xcc>)
 8003434:	4211      	tst	r1, r2
 8003436:	d119      	bne.n	800346c <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800343e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <ADC_Enable+0xd0>)
 800344a:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800344c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003450:	d01c      	beq.n	800348c <ADC_Enable+0x70>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003452:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <ADC_Enable+0xd4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <ADC_Enable+0xd8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	3301      	adds	r3, #1
 8003462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800346a:	e00c      	b.n	8003486 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
 800347e:	e030      	b.n	80034e2 <ADC_Enable+0xc6>
        wait_loop_index--;
 8003480:	9b01      	ldr	r3, [sp, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003486:	9b01      	ldr	r3, [sp, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();
 800348c:	f7ff fa22 	bl	80028d4 <HAL_GetTick>
 8003490:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f012 0f01 	tst.w	r2, #1
 800349a:	d11f      	bne.n	80034dc <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	f012 0f01 	tst.w	r2, #1
 80034a2:	d107      	bne.n	80034b4 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034aa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034b4:	f7ff fa0e 	bl	80028d4 <HAL_GetTick>
 80034b8:	1b43      	subs	r3, r0, r5
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d9e9      	bls.n	8003492 <ADC_Enable+0x76>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f013 0f01 	tst.w	r3, #1
 80034c6:	d1e4      	bne.n	8003492 <ADC_Enable+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034ca:	f043 0310 	orr.w	r3, r3, #16
 80034ce:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e002      	b.n	80034e2 <ADC_Enable+0xc6>
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
 80034de:	e000      	b.n	80034e2 <ADC_Enable+0xc6>
 80034e0:	2000      	movs	r0, #0
}
 80034e2:	b003      	add	sp, #12
 80034e4:	bd30      	pop	{r4, r5, pc}
 80034e6:	bf00      	nop
 80034e8:	8000003f 	.word	0x8000003f
 80034ec:	50040300 	.word	0x50040300
 80034f0:	20000010 	.word	0x20000010
 80034f4:	053e2d63 	.word	0x053e2d63

080034f8 <HAL_ADC_Start_DMA>:
{
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_ADC_Start_DMA+0xf0>)
 80034fe:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003500:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003502:	6880      	ldr	r0, [r0, #8]
 8003504:	f010 0f04 	tst.w	r0, #4
 8003508:	d169      	bne.n	80035de <HAL_ADC_Start_DMA+0xe6>
 800350a:	460e      	mov	r6, r1
 800350c:	4617      	mov	r7, r2
 800350e:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8003512:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003516:	2b01      	cmp	r3, #1
 8003518:	d063      	beq.n	80035e2 <HAL_ADC_Start_DMA+0xea>
 800351a:	2301      	movs	r3, #1
 800351c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003520:	b145      	cbz	r5, 8003534 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003522:	2d05      	cmp	r5, #5
 8003524:	d006      	beq.n	8003534 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003526:	2d09      	cmp	r5, #9
 8003528:	d004      	beq.n	8003534 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 800352a:	2300      	movs	r3, #0
 800352c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8003530:	2001      	movs	r0, #1
 8003532:	e055      	b.n	80035e0 <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff ff71 	bl	800341c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800353a:	2800      	cmp	r0, #0
 800353c:	d14b      	bne.n	80035d6 <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 800353e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003540:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_ADC_Start_DMA+0xf4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d039      	beq.n	80035ca <HAL_ADC_Start_DMA+0xd2>
 8003556:	461a      	mov	r2, r3
 8003558:	4293      	cmp	r3, r2
 800355a:	d000      	beq.n	800355e <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800355c:	b91d      	cbnz	r5, 8003566 <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800355e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003560:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003564:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003566:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003568:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800356c:	d030      	beq.n	80035d0 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800356e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003570:	f023 0306 	bic.w	r3, r3, #6
 8003574:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003576:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003578:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_ADC_Start_DMA+0xf8>)
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800357c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_ADC_Start_DMA+0xfc>)
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003582:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_ADC_Start_DMA+0x100>)
 8003586:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	221c      	movs	r2, #28
 800358c:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800358e:	2300      	movs	r3, #0
 8003590:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	6853      	ldr	r3, [r2, #4]
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	68d3      	ldr	r3, [r2, #12]
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	463b      	mov	r3, r7
 80035ac:	4632      	mov	r2, r6
 80035ae:	3140      	adds	r1, #64	; 0x40
 80035b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035b2:	f000 faa7 	bl	8003b04 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035b6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6093      	str	r3, [r2, #8]
}
 80035c8:	e00a      	b.n	80035e0 <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80035ce:	e7c3      	b.n	8003558 <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	2300      	movs	r3, #0
 80035d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80035d4:	e7cf      	b.n	8003576 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 80035d6:	2300      	movs	r3, #0
 80035d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80035dc:	e000      	b.n	80035e0 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 80035de:	2002      	movs	r0, #2
}
 80035e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80035e2:	2002      	movs	r0, #2
 80035e4:	e7fc      	b.n	80035e0 <HAL_ADC_Start_DMA+0xe8>
 80035e6:	bf00      	nop
 80035e8:	50040300 	.word	0x50040300
 80035ec:	50040100 	.word	0x50040100
 80035f0:	08002da1 	.word	0x08002da1
 80035f4:	08002aff 	.word	0x08002aff
 80035f8:	08002e29 	.word	0x08002e29

080035fc <ADC_Disable>:
{
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003600:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003602:	6893      	ldr	r3, [r2, #8]
 8003604:	f013 0302 	ands.w	r3, r3, #2
 8003608:	d000      	beq.n	800360c <ADC_Disable+0x10>
 800360a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800360c:	6891      	ldr	r1, [r2, #8]
 800360e:	f011 0f01 	tst.w	r1, #1
 8003612:	d039      	beq.n	8003688 <ADC_Disable+0x8c>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003614:	2b00      	cmp	r3, #0
 8003616:	d139      	bne.n	800368c <ADC_Disable+0x90>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	f003 030d 	and.w	r3, r3, #13
 800361e:	2b01      	cmp	r3, #1
 8003620:	d009      	beq.n	8003636 <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003632:	2001      	movs	r0, #1
 8003634:	e029      	b.n	800368a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003636:	6893      	ldr	r3, [r2, #8]
 8003638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800363c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	2203      	movs	r2, #3
 800364a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800364c:	f7ff f942 	bl	80028d4 <HAL_GetTick>
 8003650:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f013 0f01 	tst.w	r3, #1
 800365a:	d013      	beq.n	8003684 <ADC_Disable+0x88>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800365c:	f7ff f93a 	bl	80028d4 <HAL_GetTick>
 8003660:	1b40      	subs	r0, r0, r5
 8003662:	2802      	cmp	r0, #2
 8003664:	d9f5      	bls.n	8003652 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f013 0f01 	tst.w	r3, #1
 800366e:	d0f0      	beq.n	8003652 <ADC_Disable+0x56>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003670:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003672:	f043 0310 	orr.w	r3, r3, #16
 8003676:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8003680:	2001      	movs	r0, #1
 8003682:	e002      	b.n	800368a <ADC_Disable+0x8e>
  return HAL_OK;
 8003684:	2000      	movs	r0, #0
 8003686:	e000      	b.n	800368a <ADC_Disable+0x8e>
 8003688:	2000      	movs	r0, #0
}
 800368a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800368c:	2000      	movs	r0, #0
 800368e:	e7fc      	b.n	800368a <ADC_Disable+0x8e>

08003690 <HAL_ADC_Stop_DMA>:
{
 8003690:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8003692:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003696:	2b01      	cmp	r3, #1
 8003698:	d039      	beq.n	800370e <HAL_ADC_Stop_DMA+0x7e>
 800369a:	4604      	mov	r4, r0
 800369c:	2301      	movs	r3, #1
 800369e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80036a2:	2103      	movs	r1, #3
 80036a4:	f7ff fe3a 	bl	800331c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80036a8:	4605      	mov	r5, r0
 80036aa:	b9e8      	cbnz	r0, 80036e8 <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	68d3      	ldr	r3, [r2, #12]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80036b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80036b8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d017      	beq.n	80036f2 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	6853      	ldr	r3, [r2, #4]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80036cc:	b9dd      	cbnz	r5, 8003706 <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ff94 	bl	80035fc <ADC_Disable>
 80036d4:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 80036d6:	b93d      	cbnz	r5, 80036e8 <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 80036d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80036ee:	4628      	mov	r0, r5
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80036f2:	f000 fa42 	bl	8003b7a <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80036f6:	4605      	mov	r5, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d0e2      	beq.n	80036c2 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003702:	6563      	str	r3, [r4, #84]	; 0x54
 8003704:	e7dd      	b.n	80036c2 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff ff78 	bl	80035fc <ADC_Disable>
 800370c:	e7e3      	b.n	80036d6 <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 800370e:	2502      	movs	r5, #2
 8003710:	e7ed      	b.n	80036ee <HAL_ADC_Stop_DMA+0x5e>

08003712 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003712:	b530      	push	{r4, r5, lr}
 8003714:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003716:	2300      	movs	r3, #0
 8003718:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800371a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800371e:	2b01      	cmp	r3, #1
 8003720:	d041      	beq.n	80037a6 <HAL_ADCEx_Calibration_Start+0x94>
 8003722:	4604      	mov	r4, r0
 8003724:	460d      	mov	r5, r1
 8003726:	2301      	movs	r3, #1
 8003728:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800372c:	f7ff ff66 	bl	80035fc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003730:	bb80      	cbnz	r0, 8003794 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003732:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003734:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003738:	f023 0302 	bic.w	r3, r3, #2
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003742:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800374a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374e:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8003752:	432b      	orrs	r3, r5
 8003754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003758:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800375a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db06      	blt.n	8003770 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003764:	f023 0303 	bic.w	r3, r3, #3
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6563      	str	r3, [r4, #84]	; 0x54
 800376e:	e015      	b.n	800379c <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8003770:	9b01      	ldr	r3, [sp, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800377c:	d3ed      	bcc.n	800375a <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800377e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003780:	f023 0312 	bic.w	r3, r3, #18
 8003784:	f043 0310 	orr.w	r3, r3, #16
 8003788:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800378a:	2300      	movs	r3, #0
 800378c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003790:	2001      	movs	r0, #1
 8003792:	e006      	b.n	80037a2 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003796:	f043 0310 	orr.w	r3, r3, #16
 800379a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379c:	2300      	movs	r3, #0
 800379e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80037a2:	b003      	add	sp, #12
 80037a4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80037a6:	2002      	movs	r0, #2
 80037a8:	e7fb      	b.n	80037a2 <HAL_ADCEx_Calibration_Start+0x90>

080037aa <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037aa:	4770      	bx	lr

080037ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037ac:	4770      	bx	lr

080037ae <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037b0:	4770      	bx	lr

080037b2 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80037b2:	4770      	bx	lr

080037b4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80037b8:	2a01      	cmp	r2, #1
 80037ba:	d07e      	beq.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x106>
{
 80037bc:	b410      	push	{r4}
 80037be:	b09b      	sub	sp, #108	; 0x6c
 80037c0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80037c2:	2201      	movs	r2, #1
 80037c4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80037c8:	2200      	movs	r2, #0
 80037ca:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80037cc:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	4a3b      	ldr	r2, [pc, #236]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80037d2:	4290      	cmp	r0, r2
 80037d4:	d038      	beq.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80037d6:	2200      	movs	r2, #0
 80037d8:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80037da:	9a01      	ldr	r2, [sp, #4]
 80037dc:	2a00      	cmp	r2, #0
 80037de:	d037      	beq.n	8003850 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	f012 0204 	ands.w	r2, r2, #4
 80037e6:	d000      	beq.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80037e8:	2201      	movs	r2, #1
 80037ea:	6880      	ldr	r0, [r0, #8]
 80037ec:	f010 0f04 	tst.w	r0, #4
 80037f0:	d153      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d151      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037f6:	680a      	ldr	r2, [r1, #0]
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d032      	beq.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037fc:	4c31      	ldr	r4, [pc, #196]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80037fe:	68a2      	ldr	r2, [r4, #8]
 8003800:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003804:	6848      	ldr	r0, [r1, #4]
 8003806:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 800380a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800380e:	4302      	orrs	r2, r0
 8003810:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003812:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	f012 0201 	ands.w	r2, r2, #1
 800381a:	d000      	beq.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 800381c:	2201      	movs	r2, #1
 800381e:	482a      	ldr	r0, [pc, #168]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003820:	6880      	ldr	r0, [r0, #8]
 8003822:	f010 0001 	ands.w	r0, r0, #1
 8003826:	d000      	beq.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003828:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800382a:	4302      	orrs	r2, r0
 800382c:	d141      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800382e:	4c25      	ldr	r4, [pc, #148]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003830:	68a2      	ldr	r2, [r4, #8]
 8003832:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003836:	f022 020f 	bic.w	r2, r2, #15
 800383a:	6808      	ldr	r0, [r1, #0]
 800383c:	6889      	ldr	r1, [r1, #8]
 800383e:	4301      	orrs	r1, r0
 8003840:	430a      	orrs	r2, r1
 8003842:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003844:	2000      	movs	r0, #0
 8003846:	e02d      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003848:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800384c:	9201      	str	r2, [sp, #4]
 800384e:	e7c4      	b.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
 8003860:	e023      	b.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003862:	4918      	ldr	r1, [pc, #96]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003864:	688a      	ldr	r2, [r1, #8]
 8003866:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800386a:	608a      	str	r2, [r1, #8]
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	f012 0201 	ands.w	r2, r2, #1
 8003874:	d000      	beq.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8003876:	2201      	movs	r2, #1
 8003878:	4913      	ldr	r1, [pc, #76]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 800387a:	6889      	ldr	r1, [r1, #8]
 800387c:	f011 0101 	ands.w	r1, r1, #1
 8003880:	d000      	beq.n	8003884 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003882:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003884:	430a      	orrs	r2, r1
 8003886:	d116      	bne.n	80038b6 <HAL_ADCEx_MultiModeConfigChannel+0x102>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800388a:	688a      	ldr	r2, [r1, #8]
 800388c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003890:	f022 020f 	bic.w	r2, r2, #15
 8003894:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003896:	2000      	movs	r0, #0
 8003898:	e004      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038a2:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80038aa:	b01b      	add	sp, #108	; 0x6c
 80038ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b0:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b2:	2000      	movs	r0, #0
 80038b4:	e7f6      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 80038b6:	2000      	movs	r0, #0
 80038b8:	e7f4      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 80038ba:	2002      	movs	r0, #2
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	50040000 	.word	0x50040000
 80038c4:	50040300 	.word	0x50040300
 80038c8:	50040100 	.word	0x50040100

080038cc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80038ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	0200      	lsls	r0, r0, #8
 80038da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038de:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80038e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80038e8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_NVIC_SetPriority+0x68>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fa:	f1c3 0c07 	rsb	ip, r3, #7
 80038fe:	f1bc 0f04 	cmp.w	ip, #4
 8003902:	bf28      	it	cs
 8003904:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003908:	f103 0e04 	add.w	lr, r3, #4
 800390c:	f1be 0f06 	cmp.w	lr, #6
 8003910:	d918      	bls.n	8003944 <HAL_NVIC_SetPriority+0x54>
 8003912:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 3eff 	mov.w	lr, #4294967295
 8003918:	fa0e fc0c 	lsl.w	ip, lr, ip
 800391c:	ea21 010c 	bic.w	r1, r1, ip
 8003920:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003922:	fa0e f303 	lsl.w	r3, lr, r3
 8003926:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800392c:	2800      	cmp	r0, #0
 800392e:	db0b      	blt.n	8003948 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	0109      	lsls	r1, r1, #4
 8003932:	b2c9      	uxtb	r1, r1
 8003934:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003938:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800393c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003940:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003944:	2300      	movs	r3, #0
 8003946:	e7e5      	b.n	8003914 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003948:	f000 000f 	and.w	r0, r0, #15
 800394c:	0109      	lsls	r1, r1, #4
 800394e:	b2c9      	uxtb	r1, r1
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <HAL_NVIC_SetPriority+0x6c>)
 8003952:	5419      	strb	r1, [r3, r0]
 8003954:	e7f4      	b.n	8003940 <HAL_NVIC_SetPriority+0x50>
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00
 800395c:	e000ed14 	.word	0xe000ed14

08003960 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003960:	2800      	cmp	r0, #0
 8003962:	db07      	blt.n	8003974 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003964:	f000 021f 	and.w	r2, r0, #31
 8003968:	0940      	lsrs	r0, r0, #5
 800396a:	2301      	movs	r3, #1
 800396c:	4093      	lsls	r3, r2
 800396e:	4a02      	ldr	r2, [pc, #8]	; (8003978 <HAL_NVIC_EnableIRQ+0x18>)
 8003970:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000e100 	.word	0xe000e100

0800397c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800397c:	2800      	cmp	r0, #0
 800397e:	db0c      	blt.n	800399a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003980:	f000 021f 	and.w	r2, r0, #31
 8003984:	0940      	lsrs	r0, r0, #5
 8003986:	2301      	movs	r3, #1
 8003988:	4093      	lsls	r3, r2
 800398a:	3020      	adds	r0, #32
 800398c:	4a03      	ldr	r2, [pc, #12]	; (800399c <HAL_NVIC_DisableIRQ+0x20>)
 800398e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003996:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800399a:	4770      	bx	lr
 800399c:	e000e100 	.word	0xe000e100

080039a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	3801      	subs	r0, #1
 80039a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80039a6:	d20b      	bcs.n	80039c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <HAL_SYSTICK_Config+0x24>)
 80039b0:	21f0      	movs	r1, #240	; 0xf0
 80039b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b6:	2000      	movs	r0, #0
 80039b8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	2207      	movs	r2, #7
 80039bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80039c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80039cc:	f004 0c1c 	and.w	ip, r4, #28
 80039d0:	2401      	movs	r4, #1
 80039d2:	fa04 f40c 	lsl.w	r4, r4, ip
 80039d6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80039d8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039da:	6804      	ldr	r4, [r0, #0]
 80039dc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039de:	6883      	ldr	r3, [r0, #8]
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d005      	beq.n	80039f0 <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80039e8:	6803      	ldr	r3, [r0, #0]
 80039ea:	60da      	str	r2, [r3, #12]
  }
}
 80039ec:	bc30      	pop	{r4, r5}
 80039ee:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	60d9      	str	r1, [r3, #12]
 80039f8:	e7f8      	b.n	80039ec <DMA_SetConfig+0x24>
	...

080039fc <HAL_DMA_Init>:
  if(hdma == NULL)
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d073      	beq.n	8003ae8 <HAL_DMA_Init+0xec>
{
 8003a00:	b410      	push	{r4}
 8003a02:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a04:	6800      	ldr	r0, [r0, #0]
 8003a06:	4a39      	ldr	r2, [pc, #228]	; (8003aec <HAL_DMA_Init+0xf0>)
 8003a08:	4290      	cmp	r0, r2
 8003a0a:	d84a      	bhi.n	8003aa2 <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a0c:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <HAL_DMA_Init+0xf4>)
 8003a0e:	4402      	add	r2, r0
 8003a10:	4938      	ldr	r1, [pc, #224]	; (8003af4 <HAL_DMA_Init+0xf8>)
 8003a12:	fba1 1202 	umull	r1, r2, r1, r2
 8003a16:	0912      	lsrs	r2, r2, #4
 8003a18:	0092      	lsls	r2, r2, #2
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a1c:	4a36      	ldr	r2, [pc, #216]	; (8003af8 <HAL_DMA_Init+0xfc>)
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003a26:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a28:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003a2c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	68dc      	ldr	r4, [r3, #12]
 8003a34:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	691c      	ldr	r4, [r3, #16]
 8003a38:	4322      	orrs	r2, r4
 8003a3a:	695c      	ldr	r4, [r3, #20]
 8003a3c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3e:	699c      	ldr	r4, [r3, #24]
 8003a40:	4322      	orrs	r2, r4
 8003a42:	69dc      	ldr	r4, [r3, #28]
 8003a44:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a46:	6a1c      	ldr	r4, [r3, #32]
 8003a48:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003a4a:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8003a4c:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003a54:	d01b      	beq.n	8003a8e <HAL_DMA_Init+0x92>
    if (DMA1 == hdma->DmaBaseAddress)
 8003a56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <HAL_DMA_Init+0xfc>)
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	d02c      	beq.n	8003ab8 <HAL_DMA_Init+0xbc>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a5e:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <HAL_DMA_Init+0xfc>)
 8003a60:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8003a64:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003a66:	f000 0c1c 	and.w	ip, r0, #28
 8003a6a:	200f      	movs	r0, #15
 8003a6c:	fa00 f00c 	lsl.w	r0, r0, ip
 8003a70:	ea21 0100 	bic.w	r1, r1, r0
 8003a74:	f8c2 14a8 	str.w	r1, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a78:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8003a7c:	6858      	ldr	r0, [r3, #4]
 8003a7e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003a80:	f004 0c1c 	and.w	ip, r4, #28
 8003a84:	fa00 f00c 	lsl.w	r0, r0, ip
 8003a88:	4301      	orrs	r1, r0
 8003a8a:	f8c2 14a8 	str.w	r1, [r2, #1192]	; 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	2000      	movs	r0, #0
 8003a90:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003a98:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8003a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aa0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_DMA_Init+0x100>)
 8003aa4:	4402      	add	r2, r0
 8003aa6:	4913      	ldr	r1, [pc, #76]	; (8003af4 <HAL_DMA_Init+0xf8>)
 8003aa8:	fba1 1202 	umull	r1, r2, r1, r2
 8003aac:	0912      	lsrs	r2, r2, #4
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <HAL_DMA_Init+0x104>)
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab6:	e7b3      	b.n	8003a20 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ab8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003abc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003abe:	f000 0c1c 	and.w	ip, r0, #28
 8003ac2:	200f      	movs	r0, #15
 8003ac4:	fa00 f00c 	lsl.w	r0, r0, ip
 8003ac8:	ea21 0100 	bic.w	r1, r1, r0
 8003acc:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ad0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003ad4:	6858      	ldr	r0, [r3, #4]
 8003ad6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003ad8:	f004 0c1c 	and.w	ip, r4, #28
 8003adc:	fa00 f00c 	lsl.w	r0, r0, ip
 8003ae0:	4301      	orrs	r1, r0
 8003ae2:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
 8003ae6:	e7d2      	b.n	8003a8e <HAL_DMA_Init+0x92>
    return HAL_ERROR;
 8003ae8:	2001      	movs	r0, #1
}
 8003aea:	4770      	bx	lr
 8003aec:	40020407 	.word	0x40020407
 8003af0:	bffdfff8 	.word	0xbffdfff8
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	40020000 	.word	0x40020000
 8003afc:	bffdfbf8 	.word	0xbffdfbf8
 8003b00:	40020400 	.word	0x40020400

08003b04 <HAL_DMA_Start_IT>:
{
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003b08:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003b0c:	2801      	cmp	r0, #1
 8003b0e:	d032      	beq.n	8003b76 <HAL_DMA_Start_IT+0x72>
 8003b10:	2001      	movs	r0, #1
 8003b12:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b16:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003b1a:	b2c0      	uxtb	r0, r0
 8003b1c:	2801      	cmp	r0, #1
 8003b1e:	d004      	beq.n	8003b2a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8003b20:	2300      	movs	r3, #0
 8003b22:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8003b26:	2002      	movs	r0, #2
}
 8003b28:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	2002      	movs	r0, #2
 8003b2c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b30:	2000      	movs	r0, #0
 8003b32:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003b34:	6825      	ldr	r5, [r4, #0]
 8003b36:	6828      	ldr	r0, [r5, #0]
 8003b38:	f020 0001 	bic.w	r0, r0, #1
 8003b3c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7ff ff42 	bl	80039c8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003b44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b46:	b15b      	cbz	r3, 8003b60 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	f043 030e 	orr.w	r3, r3, #14
 8003b50:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e7e3      	b.n	8003b28 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	f043 030a 	orr.w	r3, r3, #10
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e7ed      	b.n	8003b52 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003b76:	2002      	movs	r0, #2
 8003b78:	e7d6      	b.n	8003b28 <HAL_DMA_Start_IT+0x24>

08003b7a <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d006      	beq.n	8003b92 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b84:	2304      	movs	r3, #4
 8003b86:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003b8e:	2001      	movs	r0, #1
 8003b90:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	6802      	ldr	r2, [r0, #0]
 8003b94:	6813      	ldr	r3, [r2, #0]
 8003b96:	f023 030e 	bic.w	r3, r3, #14
 8003b9a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ba6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ba8:	f003 031c 	and.w	r3, r3, #28
 8003bac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8003bc0:	4618      	mov	r0, r3
}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_DMA_Abort_IT>:
{
 8003bc4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bc6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
}
 8003bd6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	f023 030e 	bic.w	r3, r3, #14
 8003be0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003be2:	6802      	ldr	r2, [r0, #0]
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003bee:	f003 031c 	and.w	r3, r3, #28
 8003bf2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003c00:	2300      	movs	r3, #0
 8003c02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003c06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c08:	b113      	cbz	r3, 8003c10 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8003c0a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7e2      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x12>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e7e0      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x12>

08003c14 <HAL_DMA_IRQHandler>:
{
 8003c14:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c18:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1a:	6804      	ldr	r4, [r0, #0]
 8003c1c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c20:	f003 031c 	and.w	r3, r3, #28
 8003c24:	2204      	movs	r2, #4
 8003c26:	409a      	lsls	r2, r3
 8003c28:	420a      	tst	r2, r1
 8003c2a:	d015      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x44>
 8003c2c:	f015 0f04 	tst.w	r5, #4
 8003c30:	d012      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f013 0f20 	tst.w	r3, #32
 8003c38:	d103      	bne.n	8003c42 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c44:	f003 021c 	and.w	r2, r3, #28
 8003c48:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8003c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003c52:	b103      	cbz	r3, 8003c56 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003c54:	4798      	blx	r3
}
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c58:	2202      	movs	r2, #2
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	420a      	tst	r2, r1
 8003c5e:	d01c      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x86>
 8003c60:	f015 0f02 	tst.w	r5, #2
 8003c64:	d019      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	f013 0f20 	tst.w	r3, #32
 8003c6c:	d106      	bne.n	8003c7c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f023 030a 	bic.w	r3, r3, #10
 8003c74:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c7e:	f003 021c 	and.w	r2, r3, #28
 8003c82:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003c84:	2302      	movs	r3, #2
 8003c86:	4093      	lsls	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003c90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0df      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003c96:	4798      	blx	r3
 8003c98:	e7dd      	b.n	8003c56 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	420b      	tst	r3, r1
 8003ca2:	d0d8      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x42>
 8003ca4:	f015 0f08 	tst.w	r5, #8
 8003ca8:	d0d5      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	f023 030e 	bic.w	r3, r3, #14
 8003cb0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003cb4:	f003 031c 	and.w	r3, r3, #28
 8003cb8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003cba:	2201      	movs	r2, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cc2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003cce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0c0      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003cd4:	4798      	blx	r3
  return;
 8003cd6:	e7be      	b.n	8003c56 <HAL_DMA_IRQHandler+0x42>

08003cd8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003cd8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003cda:	4c06      	ldr	r4, [pc, #24]	; (8003cf4 <FLASH_Program_DoubleWord+0x1c>)
 8003cdc:	6961      	ldr	r1, [r4, #20]
 8003cde:	f041 0101 	orr.w	r1, r1, #1
 8003ce2:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003ce4:	6002      	str	r2, [r0, #0]
 8003ce6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003cea:	6043      	str	r3, [r0, #4]
}
 8003cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <FLASH_Program_Fast+0x28>)
 8003cfa:	6953      	ldr	r3, [r2, #20]
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003d06:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003d08:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003d0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8003d0e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003d12:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 8003d14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003d18:	d1f7      	bne.n	8003d0a <FLASH_Program_Fast+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	f38c 8810 	msr	PRIMASK, ip

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003d1e:	4770      	bx	lr
 8003d20:	40022000 	.word	0x40022000

08003d24 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_FLASH_Unlock+0x28>)
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db01      	blt.n	8003d30 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_FLASH_Unlock+0x28>)
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <HAL_FLASH_Unlock+0x2c>)
 8003d34:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d36:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003d3a:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db01      	blt.n	8003d46 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2000      	movs	r0, #0
 8003d44:	4770      	bx	lr
      status = HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	45670123 	.word	0x45670123

08003d54 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d54:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <HAL_FLASH_Lock+0x10>)
 8003d56:	6953      	ldr	r3, [r2, #20]
 8003d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d5c:	6153      	str	r3, [r2, #20]
}
 8003d5e:	2000      	movs	r0, #0
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000

08003d68 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <HAL_FLASH_GetError+0x8>)
 8003d6a:	6858      	ldr	r0, [r3, #4]
}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000001c 	.word	0x2000001c

08003d74 <FLASH_WaitForLastOperation>:
{
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7fe fdac 	bl	80028d4 <HAL_GetTick>
 8003d7c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <FLASH_WaitForLastOperation+0x5c>)
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d86:	d009      	beq.n	8003d9c <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8003d88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003d8c:	d0f7      	beq.n	8003d7e <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003d8e:	f7fe fda1 	bl	80028d4 <HAL_GetTick>
 8003d92:	1b40      	subs	r0, r0, r5
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d3f2      	bcc.n	8003d7e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8003d98:	2003      	movs	r0, #3
 8003d9a:	e015      	b.n	8003dc8 <FLASH_WaitForLastOperation+0x54>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <FLASH_WaitForLastOperation+0x5c>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <FLASH_WaitForLastOperation+0x60>)
  if(error != 0u)
 8003da2:	4013      	ands	r3, r2
 8003da4:	d109      	bne.n	8003dba <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <FLASH_WaitForLastOperation+0x5c>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f013 0f01 	tst.w	r3, #1
 8003dae:	d00c      	beq.n	8003dca <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <FLASH_WaitForLastOperation+0x5c>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e006      	b.n	8003dc8 <FLASH_WaitForLastOperation+0x54>
    pFlash.ErrorCode |= error;
 8003dba:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <FLASH_WaitForLastOperation+0x64>)
 8003dbc:	684a      	ldr	r2, [r1, #4]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8003dc2:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <FLASH_WaitForLastOperation+0x5c>)
 8003dc4:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
}
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e7fc      	b.n	8003dc8 <FLASH_WaitForLastOperation+0x54>
 8003dce:	bf00      	nop
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	0002c3fa 	.word	0x0002c3fa
 8003dd8:	2000001c 	.word	0x2000001c

08003ddc <HAL_FLASH_Program>:
{
 8003ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8003de2:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	2a01      	cmp	r2, #1
 8003de8:	d049      	beq.n	8003e7e <HAL_FLASH_Program+0xa2>
 8003dea:	4604      	mov	r4, r0
 8003dec:	460d      	mov	r5, r1
 8003dee:	4698      	mov	r8, r3
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003df6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dfa:	f7ff ffbb 	bl	8003d74 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003dfe:	4607      	mov	r7, r0
 8003e00:	bb08      	cbnz	r0, 8003e46 <HAL_FLASH_Program+0x6a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e02:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <HAL_FLASH_Program+0xac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e10:	d01f      	beq.n	8003e52 <HAL_FLASH_Program+0x76>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_FLASH_Program+0xac>)
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003e1e:	2202      	movs	r2, #2
 8003e20:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003e22:	b1d4      	cbz	r4, 8003e5a <HAL_FLASH_Program+0x7e>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003e24:	1e63      	subs	r3, r4, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d91e      	bls.n	8003e68 <HAL_FLASH_Program+0x8c>
  uint32_t prog_bit = 0;
 8003e2a:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e30:	f7ff ffa0 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003e34:	4607      	mov	r7, r0
    if (prog_bit != 0U)
 8003e36:	b124      	cbz	r4, 8003e42 <HAL_FLASH_Program+0x66>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_FLASH_Program+0xac>)
 8003e3a:	6953      	ldr	r3, [r2, #20]
 8003e3c:	ea23 0404 	bic.w	r4, r3, r4
 8003e40:	6154      	str	r4, [r2, #20]
    FLASH_FlushCaches();
 8003e42:	f000 f847 	bl	8003ed4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
}
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_FLASH_Program+0xa8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
 8003e58:	e7e3      	b.n	8003e22 <HAL_FLASH_Program+0x46>
      FLASH_Program_DoubleWord(Address, Data);
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff ff3a 	bl	8003cd8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003e64:	2401      	movs	r4, #1
 8003e66:	e7e1      	b.n	8003e2c <HAL_FLASH_Program+0x50>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7ff ff44 	bl	8003cf8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003e70:	2c02      	cmp	r4, #2
 8003e72:	d001      	beq.n	8003e78 <HAL_FLASH_Program+0x9c>
  uint32_t prog_bit = 0;
 8003e74:	2400      	movs	r4, #0
 8003e76:	e7d9      	b.n	8003e2c <HAL_FLASH_Program+0x50>
        prog_bit = FLASH_CR_FSTPG;
 8003e78:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003e7c:	e7d6      	b.n	8003e2c <HAL_FLASH_Program+0x50>
  __HAL_LOCK(&pFlash);
 8003e7e:	2702      	movs	r7, #2
 8003e80:	e7e4      	b.n	8003e4c <HAL_FLASH_Program+0x70>
 8003e82:	bf00      	nop
 8003e84:	2000001c 	.word	0x2000001c
 8003e88:	40022000 	.word	0x40022000

08003e8c <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003e8c:	f010 0f01 	tst.w	r0, #1
 8003e90:	d004      	beq.n	8003e9c <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <FLASH_MassErase+0x1c>)
 8003e94:	6953      	ldr	r3, [r2, #20]
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e9c:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <FLASH_MassErase+0x1c>)
 8003e9e:	6953      	ldr	r3, [r2, #20]
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6153      	str	r3, [r2, #20]
}
 8003ea6:	4770      	bx	lr
 8003ea8:	40022000 	.word	0x40022000

08003eac <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <FLASH_PageErase+0x24>)
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8003eb4:	00c0      	lsls	r0, r0, #3
 8003eb6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8003eba:	4302      	orrs	r2, r0
 8003ebc:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	f042 0202 	orr.w	r2, r2, #2
 8003ec4:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ecc:	615a      	str	r2, [r3, #20]
}
 8003ece:	4770      	bx	lr
 8003ed0:	40022000 	.word	0x40022000

08003ed4 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <FLASH_FlushCaches+0x5c>)
 8003ed6:	7f1b      	ldrb	r3, [r3, #28]
 8003ed8:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d001      	beq.n	8003ee2 <FLASH_FlushCaches+0xe>
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d110      	bne.n	8003f04 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <FLASH_FlushCaches+0x60>)
 8003ee4:	6811      	ldr	r1, [r2, #0]
 8003ee6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003eea:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003ef2:	6011      	str	r1, [r2, #0]
 8003ef4:	6811      	ldr	r1, [r2, #0]
 8003ef6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003efa:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003efc:	6811      	ldr	r1, [r2, #0]
 8003efe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003f02:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003f04:	3b02      	subs	r3, #2
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d903      	bls.n	8003f14 <FLASH_FlushCaches+0x40>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <FLASH_FlushCaches+0x5c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	771a      	strb	r2, [r3, #28]
}
 8003f12:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <FLASH_FlushCaches+0x60>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f24:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e7ed      	b.n	8003f0c <FLASH_FlushCaches+0x38>
 8003f30:	2000001c 	.word	0x2000001c
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_FLASHEx_Erase>:
{
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d069      	beq.n	8004016 <HAL_FLASHEx_Erase+0xde>
 8003f42:	4604      	mov	r4, r0
 8003f44:	460e      	mov	r6, r1
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f50:	f7ff ff10 	bl	8003d74 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003f54:	4607      	mov	r7, r0
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d158      	bne.n	800400c <HAL_FLASHEx_Erase+0xd4>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003f60:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f68:	d02d      	beq.n	8003fc6 <HAL_FLASHEx_Erase+0x8e>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f72:	d024      	beq.n	8003fbe <HAL_FLASHEx_Erase+0x86>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f74:	4a2a      	ldr	r2, [pc, #168]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f7c:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003f80:	2203      	movs	r2, #3
 8003f82:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d02f      	beq.n	8003fea <HAL_FLASHEx_Erase+0xb2>
      *PageError = 0xFFFFFFFFU;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f90:	68a5      	ldr	r5, [r4, #8]
 8003f92:	68a3      	ldr	r3, [r4, #8]
 8003f94:	68e2      	ldr	r2, [r4, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	d935      	bls.n	8004008 <HAL_FLASHEx_Erase+0xd0>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003f9c:	6861      	ldr	r1, [r4, #4]
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7ff ff84 	bl	8003eac <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fa8:	f7ff fee4 	bl	8003d74 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003fae:	6953      	ldr	r3, [r2, #20]
 8003fb0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8003fb4:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 8003fb6:	4607      	mov	r7, r0
 8003fb8:	bb28      	cbnz	r0, 8004006 <HAL_FLASHEx_Erase+0xce>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003fba:	3501      	adds	r5, #1
 8003fbc:	e7e9      	b.n	8003f92 <HAL_FLASHEx_Erase+0x5a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]
 8003fc4:	e7de      	b.n	8003f84 <HAL_FLASHEx_Erase+0x4c>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003fce:	d008      	beq.n	8003fe2 <HAL_FLASHEx_Erase+0xaa>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd8:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	771a      	strb	r2, [r3, #28]
 8003fe0:	e7d0      	b.n	8003f84 <HAL_FLASHEx_Erase+0x4c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
 8003fe8:	e7cc      	b.n	8003f84 <HAL_FLASHEx_Erase+0x4c>
      FLASH_MassErase(pEraseInit->Banks);
 8003fea:	6860      	ldr	r0, [r4, #4]
 8003fec:	f7ff ff4e 	bl	8003e8c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ff0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ff4:	f7ff febe 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003ff8:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_FLASHEx_Erase+0xe8>)
 8003ffc:	6953      	ldr	r3, [r2, #20]
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	6153      	str	r3, [r2, #20]
 8004004:	e000      	b.n	8004008 <HAL_FLASHEx_Erase+0xd0>
          *PageError = page_index;
 8004006:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8004008:	f7ff ff64 	bl	8003ed4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_FLASHEx_Erase+0xe4>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
}
 8004012:	4638      	mov	r0, r7
 8004014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004016:	2702      	movs	r7, #2
 8004018:	e7fb      	b.n	8004012 <HAL_FLASHEx_Erase+0xda>
 800401a:	bf00      	nop
 800401c:	2000001c 	.word	0x2000001c
 8004020:	40022000 	.word	0x40022000

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8004028:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800402a:	e062      	b.n	80040f2 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800402c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800402e:	005e      	lsls	r6, r3, #1
 8004030:	2403      	movs	r4, #3
 8004032:	40b4      	lsls	r4, r6
 8004034:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004038:	68cc      	ldr	r4, [r1, #12]
 800403a:	40b4      	lsls	r4, r6
 800403c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800403e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004040:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004042:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004046:	684c      	ldr	r4, [r1, #4]
 8004048:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800404c:	409c      	lsls	r4, r3
 800404e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004052:	6044      	str	r4, [r0, #4]
 8004054:	e05e      	b.n	8004114 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004056:	08dd      	lsrs	r5, r3, #3
 8004058:	3508      	adds	r5, #8
 800405a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800405e:	f003 0407 	and.w	r4, r3, #7
 8004062:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004066:	240f      	movs	r4, #15
 8004068:	fa04 f40c 	lsl.w	r4, r4, ip
 800406c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004070:	690c      	ldr	r4, [r1, #16]
 8004072:	fa04 f40c 	lsl.w	r4, r4, ip
 8004076:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800407a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800407e:	e060      	b.n	8004142 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004080:	2403      	movs	r4, #3
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x62>
 8004084:	2400      	movs	r4, #0
 8004086:	fa04 f40e 	lsl.w	r4, r4, lr
 800408a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800408c:	f10c 0c02 	add.w	ip, ip, #2
 8004090:	4d4f      	ldr	r5, [pc, #316]	; (80041d0 <HAL_GPIO_Init+0x1ac>)
 8004092:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004096:	4c4f      	ldr	r4, [pc, #316]	; (80041d4 <HAL_GPIO_Init+0x1b0>)
 8004098:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800409a:	43d4      	mvns	r4, r2
 800409c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a0:	684f      	ldr	r7, [r1, #4]
 80040a2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80040a6:	d001      	beq.n	80040ac <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80040a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80040ac:	4d49      	ldr	r5, [pc, #292]	; (80041d4 <HAL_GPIO_Init+0x1b0>)
 80040ae:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80040b0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80040b2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040b6:	684f      	ldr	r7, [r1, #4]
 80040b8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80040bc:	d001      	beq.n	80040c2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80040be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80040c2:	4d44      	ldr	r5, [pc, #272]	; (80041d4 <HAL_GPIO_Init+0x1b0>)
 80040c4:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040c6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80040c8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040cc:	684f      	ldr	r7, [r1, #4]
 80040ce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80040d2:	d001      	beq.n	80040d8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80040d4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80040d8:	4d3e      	ldr	r5, [pc, #248]	; (80041d4 <HAL_GPIO_Init+0x1b0>)
 80040da:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80040dc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80040de:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e0:	684e      	ldr	r6, [r1, #4]
 80040e2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80040e6:	d001      	beq.n	80040ec <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80040e8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80040ec:	4a39      	ldr	r2, [pc, #228]	; (80041d4 <HAL_GPIO_Init+0x1b0>)
 80040ee:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80040f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	680a      	ldr	r2, [r1, #0]
 80040f4:	fa32 f403 	lsrs.w	r4, r2, r3
 80040f8:	d068      	beq.n	80041cc <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040fa:	f04f 0c01 	mov.w	ip, #1
 80040fe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004102:	ea1c 0202 	ands.w	r2, ip, r2
 8004106:	d0f3      	beq.n	80040f0 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004108:	684c      	ldr	r4, [r1, #4]
 800410a:	f004 0403 	and.w	r4, r4, #3
 800410e:	3c01      	subs	r4, #1
 8004110:	2c01      	cmp	r4, #1
 8004112:	d98b      	bls.n	800402c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004114:	684c      	ldr	r4, [r1, #4]
 8004116:	f004 0403 	and.w	r4, r4, #3
 800411a:	2c03      	cmp	r4, #3
 800411c:	d00c      	beq.n	8004138 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800411e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004120:	005d      	lsls	r5, r3, #1
 8004122:	f04f 0c03 	mov.w	ip, #3
 8004126:	fa0c fc05 	lsl.w	ip, ip, r5
 800412a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800412e:	688c      	ldr	r4, [r1, #8]
 8004130:	40ac      	lsls	r4, r5
 8004132:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004136:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004138:	684c      	ldr	r4, [r1, #4]
 800413a:	f004 0403 	and.w	r4, r4, #3
 800413e:	2c02      	cmp	r4, #2
 8004140:	d089      	beq.n	8004056 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8004142:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004144:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004148:	f04f 0c03 	mov.w	ip, #3
 800414c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004150:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004154:	684c      	ldr	r4, [r1, #4]
 8004156:	f004 0403 	and.w	r4, r4, #3
 800415a:	fa04 f40e 	lsl.w	r4, r4, lr
 800415e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004162:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004164:	684c      	ldr	r4, [r1, #4]
 8004166:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800416a:	d0c1      	beq.n	80040f0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416c:	4c1a      	ldr	r4, [pc, #104]	; (80041d8 <HAL_GPIO_Init+0x1b4>)
 800416e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004170:	f045 0501 	orr.w	r5, r5, #1
 8004174:	6625      	str	r5, [r4, #96]	; 0x60
 8004176:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004178:	f004 0401 	and.w	r4, r4, #1
 800417c:	9401      	str	r4, [sp, #4]
 800417e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004180:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004184:	f10c 0502 	add.w	r5, ip, #2
 8004188:	4c11      	ldr	r4, [pc, #68]	; (80041d0 <HAL_GPIO_Init+0x1ac>)
 800418a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800418e:	f003 0403 	and.w	r4, r3, #3
 8004192:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004196:	240f      	movs	r4, #15
 8004198:	fa04 f40e 	lsl.w	r4, r4, lr
 800419c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80041a4:	f43f af6e 	beq.w	8004084 <HAL_GPIO_Init+0x60>
 80041a8:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <HAL_GPIO_Init+0x1b8>)
 80041aa:	42a0      	cmp	r0, r4
 80041ac:	d00a      	beq.n	80041c4 <HAL_GPIO_Init+0x1a0>
 80041ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80041b2:	42a0      	cmp	r0, r4
 80041b4:	d008      	beq.n	80041c8 <HAL_GPIO_Init+0x1a4>
 80041b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80041ba:	42a0      	cmp	r0, r4
 80041bc:	f43f af60 	beq.w	8004080 <HAL_GPIO_Init+0x5c>
 80041c0:	2407      	movs	r4, #7
 80041c2:	e760      	b.n	8004086 <HAL_GPIO_Init+0x62>
 80041c4:	2401      	movs	r4, #1
 80041c6:	e75e      	b.n	8004086 <HAL_GPIO_Init+0x62>
 80041c8:	2402      	movs	r4, #2
 80041ca:	e75c      	b.n	8004086 <HAL_GPIO_Init+0x62>
  }
}
 80041cc:	b003      	add	sp, #12
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40021000 	.word	0x40021000
 80041dc:	48000400 	.word	0x48000400

080041e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041e0:	6903      	ldr	r3, [r0, #16]
 80041e2:	4219      	tst	r1, r3
 80041e4:	d001      	beq.n	80041ea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80041e6:	2001      	movs	r0, #1
 80041e8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80041ec:	4770      	bx	lr

080041ee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041ee:	b10a      	cbz	r2, 80041f4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f0:	6181      	str	r1, [r0, #24]
 80041f2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041f4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80041f6:	4770      	bx	lr

080041f8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f8:	4a02      	ldr	r2, [pc, #8]	; (8004204 <HAL_PWR_EnableBkUpAccess+0xc>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	4770      	bx	lr
 8004204:	40007000 	.word	0x40007000

08004208 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004208:	4b02      	ldr	r3, [pc, #8]	; (8004214 <HAL_PWREx_GetVoltageRange+0xc>)
 800420a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800420c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40007000 	.word	0x40007000

08004218 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004218:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800421c:	d00f      	beq.n	800423e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d034      	beq.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004238:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800423a:	2000      	movs	r0, #0
 800423c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d020      	beq.n	800428e <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004258:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2232      	movs	r2, #50	; 0x32
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0c9b      	lsrs	r3, r3, #18
 800426c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426e:	e000      	b.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8004270:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004274:	6952      	ldr	r2, [r2, #20]
 8004276:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800427a:	d001      	beq.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x68>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f7      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004288:	d103      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800428a:	2000      	movs	r0, #0
 800428c:	4770      	bx	lr
 800428e:	2000      	movs	r0, #0
 8004290:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
 8004294:	4770      	bx	lr
  return HAL_OK;
 8004296:	2000      	movs	r0, #0
}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000
 80042a0:	20000010 	.word	0x20000010
 80042a4:	431bde83 	.word	0x431bde83

080042a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042a8:	b530      	push	{r4, r5, lr}
 80042aa:	b083      	sub	sp, #12
 80042ac:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80042b6:	d00b      	beq.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042b8:	f7ff ffa6 	bl	8004208 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80042c0:	d017      	beq.n	80042f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042c2:	2c80      	cmp	r4, #128	; 0x80
 80042c4:	d81f      	bhi.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042c6:	d02d      	beq.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042c8:	2c70      	cmp	r4, #112	; 0x70
 80042ca:	d02d      	beq.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042cc:	2100      	movs	r1, #0
 80042ce:	e01b      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	4d17      	ldr	r5, [pc, #92]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80042d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	65ab      	str	r3, [r5, #88]	; 0x58
 80042da:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80042e4:	f7ff ff90 	bl	8004208 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80042ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ee:	65ab      	str	r3, [r5, #88]	; 0x58
 80042f0:	e7e4      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	2c80      	cmp	r4, #128	; 0x80
 80042f4:	d903      	bls.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80042f6:	2ca0      	cmp	r4, #160	; 0xa0
 80042f8:	d903      	bls.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80042fa:	2102      	movs	r1, #2
 80042fc:	e004      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042fe:	2100      	movs	r1, #0
 8004300:	e002      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004302:	2101      	movs	r1, #1
 8004304:	e000      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004306:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	428b      	cmp	r3, r1
 800431c:	d106      	bne.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800431e:	2000      	movs	r0, #0
}
 8004320:	b003      	add	sp, #12
 8004322:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8004324:	2102      	movs	r1, #2
 8004326:	e7ef      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2101      	movs	r1, #1
 800432a:	e7ed      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
 800432e:	e7f7      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8004330:	40021000 	.word	0x40021000
 8004334:	40022000 	.word	0x40022000

08004338 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004338:	4a28      	ldr	r2, [pc, #160]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800433a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004342:	f013 030c 	ands.w	r3, r3, #12
 8004346:	d00a      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x26>
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d006      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800434c:	2b04      	cmp	r3, #4
 800434e:	d01f      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004350:	2b08      	cmp	r3, #8
 8004352:	d020      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004354:	2000      	movs	r0, #0
 8004356:	4602      	mov	r2, r0
 8004358:	e010      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800435a:	2a01      	cmp	r2, #1
 800435c:	d1f6      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800435e:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	f012 0f08 	tst.w	r2, #8
 8004366:	d10c      	bne.n	8004382 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800436a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800436e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004378:	b143      	cbz	r3, 800438c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800437a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d00d      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x64>
}
 8004380:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004382:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800438a:	e7f2      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800438c:	4610      	mov	r0, r2
 800438e:	e7f5      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8004390:	4814      	ldr	r0, [pc, #80]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004392:	2200      	movs	r2, #0
 8004394:	e7f2      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8004396:	4814      	ldr	r0, [pc, #80]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004398:	2200      	movs	r2, #0
 800439a:	e7ef      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d016      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x9e>
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d100      	bne.n	80043ae <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ae:	490b      	ldr	r1, [pc, #44]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80043b0:	68c8      	ldr	r0, [r1, #12]
 80043b2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80043b6:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043b8:	68c8      	ldr	r0, [r1, #12]
 80043ba:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80043be:	fb02 f000 	mul.w	r0, r2, r0
 80043c2:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c6:	68cb      	ldr	r3, [r1, #12]
 80043c8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80043cc:	3301      	adds	r3, #1
 80043ce:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80043d0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80043d4:	e7d4      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80043d6:	4a03      	ldr	r2, [pc, #12]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xac>)
 80043d8:	e7e9      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x76>
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	0800c528 	.word	0x0800c528
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f000 8353 	beq.w	8004a98 <HAL_RCC_OscConfig+0x6ac>
{
 80043f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f4:	b083      	sub	sp, #12
 80043f6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f8:	4b96      	ldr	r3, [pc, #600]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80043fa:	689d      	ldr	r5, [r3, #8]
 80043fc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004400:	68de      	ldr	r6, [r3, #12]
 8004402:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	f013 0f10 	tst.w	r3, #16
 800440c:	d05a      	beq.n	80044c4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800440e:	b1e5      	cbz	r5, 800444a <HAL_RCC_OscConfig+0x5e>
 8004410:	2d0c      	cmp	r5, #12
 8004412:	d018      	beq.n	8004446 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004414:	69e3      	ldr	r3, [r4, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80bb 	beq.w	8004592 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800441c:	4a8d      	ldr	r2, [pc, #564]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004426:	f7fe fa55 	bl	80028d4 <HAL_GetTick>
 800442a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800442c:	4b89      	ldr	r3, [pc, #548]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f013 0f02 	tst.w	r3, #2
 8004434:	f040 809a 	bne.w	800456c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004438:	f7fe fa4c 	bl	80028d4 <HAL_GetTick>
 800443c:	1bc0      	subs	r0, r0, r7
 800443e:	2802      	cmp	r0, #2
 8004440:	d9f4      	bls.n	800442c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8004442:	2003      	movs	r0, #3
 8004444:	e335      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004446:	2e01      	cmp	r6, #1
 8004448:	d1e4      	bne.n	8004414 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444a:	4b82      	ldr	r3, [pc, #520]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f013 0f02 	tst.w	r3, #2
 8004452:	d003      	beq.n	800445c <HAL_RCC_OscConfig+0x70>
 8004454:	69e3      	ldr	r3, [r4, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8320 	beq.w	8004a9c <HAL_RCC_OscConfig+0x6b0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800445c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800445e:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f013 0f08 	tst.w	r3, #8
 8004466:	d05b      	beq.n	8004520 <HAL_RCC_OscConfig+0x134>
 8004468:	4b7a      	ldr	r3, [pc, #488]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004470:	4298      	cmp	r0, r3
 8004472:	d85c      	bhi.n	800452e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004474:	4b77      	ldr	r3, [pc, #476]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004496:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004498:	2d00      	cmp	r5, #0
 800449a:	d060      	beq.n	800455e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800449c:	f7ff ff4c 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80044a0:	4b6c      	ldr	r3, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044a8:	4a6b      	ldr	r2, [pc, #428]	; (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	40d8      	lsrs	r0, r3
 80044b2:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_OscConfig+0x270>)
 80044b4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x274>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f7fe f9c7 	bl	800284c <HAL_InitTick>
        if(status != HAL_OK)
 80044be:	2800      	cmp	r0, #0
 80044c0:	f040 82f7 	bne.w	8004ab2 <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f013 0f01 	tst.w	r3, #1
 80044ca:	f000 8081 	beq.w	80045d0 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044ce:	2d08      	cmp	r5, #8
 80044d0:	d075      	beq.n	80045be <HAL_RCC_OscConfig+0x1d2>
 80044d2:	2d0c      	cmp	r5, #12
 80044d4:	d071      	beq.n	80045ba <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	f000 8098 	beq.w	8004610 <HAL_RCC_OscConfig+0x224>
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e4:	f000 809a 	beq.w	800461c <HAL_RCC_OscConfig+0x230>
 80044e8:	4b5a      	ldr	r3, [pc, #360]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044f8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fa:	6863      	ldr	r3, [r4, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 809a 	beq.w	8004636 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8004502:	f7fe f9e7 	bl	80028d4 <HAL_GetTick>
 8004506:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004508:	4b52      	ldr	r3, [pc, #328]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004510:	d15e      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004512:	f7fe f9df 	bl	80028d4 <HAL_GetTick>
 8004516:	1bc0      	subs	r0, r0, r7
 8004518:	2864      	cmp	r0, #100	; 0x64
 800451a:	d9f5      	bls.n	8004508 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
 800451e:	e2c8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004520:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452c:	e7a0      	b.n	8004470 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800452e:	f7ff febb 	bl	80042a8 <RCC_SetFlashLatencyFromMSIRange>
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 82b4 	bne.w	8004aa0 <HAL_RCC_OscConfig+0x6b4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f042 0208 	orr.w	r2, r2, #8
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004548:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800454a:	430a      	orrs	r2, r1
 800454c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004554:	6a21      	ldr	r1, [r4, #32]
 8004556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	e79e      	b.n	800449c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800455e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004560:	f7ff fea2 	bl	80042a8 <RCC_SetFlashLatencyFromMSIRange>
 8004564:	2800      	cmp	r0, #0
 8004566:	d099      	beq.n	800449c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8004568:	2001      	movs	r0, #1
 800456a:	e2a2      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456c:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800457c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004588:	6a21      	ldr	r1, [r4, #32]
 800458a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	e798      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800459c:	f7fe f99a 	bl	80028d4 <HAL_GetTick>
 80045a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a2:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f013 0f02 	tst.w	r3, #2
 80045aa:	d08b      	beq.n	80044c4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ac:	f7fe f992 	bl	80028d4 <HAL_GetTick>
 80045b0:	1bc0      	subs	r0, r0, r7
 80045b2:	2802      	cmp	r0, #2
 80045b4:	d9f5      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80045b6:	2003      	movs	r0, #3
 80045b8:	e27b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ba:	2e03      	cmp	r6, #3
 80045bc:	d18b      	bne.n	80044d6 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045be:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045c6:	d003      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1e4>
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 826a 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x6b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f013 0f02 	tst.w	r3, #2
 80045d6:	d058      	beq.n	800468a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045d8:	2d04      	cmp	r5, #4
 80045da:	d045      	beq.n	8004668 <HAL_RCC_OscConfig+0x27c>
 80045dc:	2d0c      	cmp	r5, #12
 80045de:	d041      	beq.n	8004664 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e0:	68e3      	ldr	r3, [r4, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8091 	beq.w	800470a <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045f2:	f7fe f96f 	bl	80028d4 <HAL_GetTick>
 80045f6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004600:	d17a      	bne.n	80046f8 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004602:	f7fe f967 	bl	80028d4 <HAL_GetTick>
 8004606:	1b80      	subs	r0, r0, r6
 8004608:	2802      	cmp	r0, #2
 800460a:	d9f5      	bls.n	80045f8 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 800460c:	2003      	movs	r0, #3
 800460e:	e250      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	4a10      	ldr	r2, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e76e      	b.n	80044fa <HAL_RCC_OscConfig+0x10e>
 800461c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004620:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e761      	b.n	80044fa <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8004636:	f7fe f94d 	bl	80028d4 <HAL_GetTick>
 800463a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_OscConfig+0x268>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004644:	d0c4      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004646:	f7fe f945 	bl	80028d4 <HAL_GetTick>
 800464a:	1bc0      	subs	r0, r0, r7
 800464c:	2864      	cmp	r0, #100	; 0x64
 800464e:	d9f5      	bls.n	800463c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8004650:	2003      	movs	r0, #3
 8004652:	e22e      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
 8004654:	40021000 	.word	0x40021000
 8004658:	0800c510 	.word	0x0800c510
 800465c:	20000010 	.word	0x20000010
 8004660:	20000018 	.word	0x20000018
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004664:	2e02      	cmp	r6, #2
 8004666:	d1bb      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004668:	4baf      	ldr	r3, [pc, #700]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004670:	d003      	beq.n	800467a <HAL_RCC_OscConfig+0x28e>
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8217 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x6bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4aab      	ldr	r2, [pc, #684]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800467c:	6853      	ldr	r3, [r2, #4]
 800467e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004682:	6921      	ldr	r1, [r4, #16]
 8004684:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004688:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f013 0f08 	tst.w	r3, #8
 8004690:	d07d      	beq.n	800478e <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004692:	6963      	ldr	r3, [r4, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d063      	beq.n	8004760 <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 8004698:	4ba3      	ldr	r3, [pc, #652]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800469e:	69a1      	ldr	r1, [r4, #24]
 80046a0:	f003 0210 	and.w	r2, r3, #16
 80046a4:	4291      	cmp	r1, r2
 80046a6:	d010      	beq.n	80046ca <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046a8:	f003 0203 	and.w	r2, r3, #3
 80046ac:	2a02      	cmp	r2, #2
 80046ae:	f000 81fd 	beq.w	8004aac <HAL_RCC_OscConfig+0x6c0>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046b2:	f013 0f01 	tst.w	r3, #1
 80046b6:	d13c      	bne.n	8004732 <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80046b8:	4a9b      	ldr	r2, [pc, #620]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80046ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	69a1      	ldr	r1, [r4, #24]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4a97      	ldr	r2, [pc, #604]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80046cc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80046d8:	f7fe f8fc 	bl	80028d4 <HAL_GetTick>
 80046dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046de:	4b92      	ldr	r3, [pc, #584]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	f013 0f02 	tst.w	r3, #2
 80046e8:	d151      	bne.n	800478e <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ea:	f7fe f8f3 	bl	80028d4 <HAL_GetTick>
 80046ee:	1b80      	subs	r0, r0, r6
 80046f0:	2811      	cmp	r0, #17
 80046f2:	d9f4      	bls.n	80046de <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 80046f4:	2003      	movs	r0, #3
 80046f6:	e1dc      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f8:	4a8b      	ldr	r2, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80046fa:	6853      	ldr	r3, [r2, #4]
 80046fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004700:	6921      	ldr	r1, [r4, #16]
 8004702:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004706:	6053      	str	r3, [r2, #4]
 8004708:	e7bf      	b.n	800468a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800470a:	4a87      	ldr	r2, [pc, #540]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004712:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004714:	f7fe f8de 	bl	80028d4 <HAL_GetTick>
 8004718:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471a:	4b83      	ldr	r3, [pc, #524]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004722:	d0b2      	beq.n	800468a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe f8d6 	bl	80028d4 <HAL_GetTick>
 8004728:	1b80      	subs	r0, r0, r6
 800472a:	2802      	cmp	r0, #2
 800472c:	d9f5      	bls.n	800471a <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800472e:	2003      	movs	r0, #3
 8004730:	e1bf      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_LSI_DISABLE();
 8004732:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004734:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004740:	f7fe f8c8 	bl	80028d4 <HAL_GetTick>
 8004744:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004746:	4b78      	ldr	r3, [pc, #480]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474c:	f013 0f02 	tst.w	r3, #2
 8004750:	d0b2      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fe f8bf 	bl	80028d4 <HAL_GetTick>
 8004756:	1b80      	subs	r0, r0, r6
 8004758:	2811      	cmp	r0, #17
 800475a:	d9f4      	bls.n	8004746 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800475c:	2003      	movs	r0, #3
 800475e:	e1a8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_LSI_DISABLE();
 8004760:	4a71      	ldr	r2, [pc, #452]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004762:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800476e:	f7fe f8b1 	bl	80028d4 <HAL_GetTick>
 8004772:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004774:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f013 0f02 	tst.w	r3, #2
 800477e:	d006      	beq.n	800478e <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004780:	f7fe f8a8 	bl	80028d4 <HAL_GetTick>
 8004784:	1b80      	subs	r0, r0, r6
 8004786:	2811      	cmp	r0, #17
 8004788:	d9f4      	bls.n	8004774 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 800478a:	2003      	movs	r0, #3
 800478c:	e191      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f013 0f04 	tst.w	r3, #4
 8004794:	f000 808d 	beq.w	80048b2 <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004798:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80047a0:	d12e      	bne.n	8004800 <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	4b61      	ldr	r3, [pc, #388]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80047a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047aa:	659a      	str	r2, [r3, #88]	; 0x58
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047b6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b8:	4b5c      	ldr	r3, [pc, #368]	; (800492c <HAL_RCC_OscConfig+0x540>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047c0:	d020      	beq.n	8004804 <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	f013 0f01 	tst.w	r3, #1
 80047c8:	d038      	beq.n	800483c <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80047ca:	4957      	ldr	r1, [pc, #348]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80047cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80047d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	f013 0f04 	tst.w	r3, #4
 80047e4:	d022      	beq.n	800482c <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80047ea:	f042 0204 	orr.w	r2, r2, #4
 80047ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 80047fe:	e02a      	b.n	8004856 <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 8004800:	2600      	movs	r6, #0
 8004802:	e7d9      	b.n	80047b8 <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004804:	4a49      	ldr	r2, [pc, #292]	; (800492c <HAL_RCC_OscConfig+0x540>)
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800480e:	f7fe f861 	bl	80028d4 <HAL_GetTick>
 8004812:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004814:	4b45      	ldr	r3, [pc, #276]	; (800492c <HAL_RCC_OscConfig+0x540>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800481c:	d1d1      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481e:	f7fe f859 	bl	80028d4 <HAL_GetTick>
 8004822:	1bc0      	subs	r0, r0, r7
 8004824:	2802      	cmp	r0, #2
 8004826:	d9f5      	bls.n	8004814 <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8004828:	2003      	movs	r0, #3
 800482a:	e142      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800482c:	4a3e      	ldr	r2, [pc, #248]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800482e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483a:	e00c      	b.n	8004856 <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800483e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800484a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800484e:	f022 0204 	bic.w	r2, r2, #4
 8004852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004856:	68a3      	ldr	r3, [r4, #8]
 8004858:	b18b      	cbz	r3, 800487e <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 800485a:	f7fe f83b 	bl	80028d4 <HAL_GetTick>
 800485e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004860:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f013 0f02 	tst.w	r3, #2
 800486a:	d121      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fe f832 	bl	80028d4 <HAL_GetTick>
 8004870:	1bc0      	subs	r0, r0, r7
 8004872:	f241 3388 	movw	r3, #5000	; 0x1388
 8004876:	4298      	cmp	r0, r3
 8004878:	d9f2      	bls.n	8004860 <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 800487a:	2003      	movs	r0, #3
 800487c:	e119      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      tickstart = HAL_GetTick();
 800487e:	f7fe f829 	bl	80028d4 <HAL_GetTick>
 8004882:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f013 0f02 	tst.w	r3, #2
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fe f820 	bl	80028d4 <HAL_GetTick>
 8004894:	1bc0      	subs	r0, r0, r7
 8004896:	f241 3388 	movw	r3, #5000	; 0x1388
 800489a:	4298      	cmp	r0, r3
 800489c:	d9f2      	bls.n	8004884 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800489e:	2003      	movs	r0, #3
 80048a0:	e107      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80048a2:	4a21      	ldr	r2, [pc, #132]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80048a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 80048b0:	b9e6      	cbnz	r6, 80048ec <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f013 0f20 	tst.w	r3, #32
 80048b8:	d03a      	beq.n	8004930 <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048bc:	b1e3      	cbz	r3, 80048f8 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80048c0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80048cc:	f7fe f802 	bl	80028d4 <HAL_GetTick>
 80048d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80048d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d8:	f013 0f02 	tst.w	r3, #2
 80048dc:	d128      	bne.n	8004930 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048de:	f7fd fff9 	bl	80028d4 <HAL_GetTick>
 80048e2:	1b80      	subs	r0, r0, r6
 80048e4:	2802      	cmp	r0, #2
 80048e6:	d9f4      	bls.n	80048d2 <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 80048e8:	2003      	movs	r0, #3
 80048ea:	e0e2      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80048ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
 80048f6:	e7dc      	b.n	80048b2 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 80048f8:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 80048fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004906:	f7fd ffe5 	bl	80028d4 <HAL_GetTick>
 800490a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_OscConfig+0x53c>)
 800490e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004912:	f013 0f02 	tst.w	r3, #2
 8004916:	d00b      	beq.n	8004930 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004918:	f7fd ffdc 	bl	80028d4 <HAL_GetTick>
 800491c:	1b80      	subs	r0, r0, r6
 800491e:	2802      	cmp	r0, #2
 8004920:	d9f4      	bls.n	800490c <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 8004922:	2003      	movs	r0, #3
 8004924:	e0c5      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004930:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80bc 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x6c4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004938:	2b02      	cmp	r3, #2
 800493a:	d017      	beq.n	800496c <HAL_RCC_OscConfig+0x580>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493c:	2d0c      	cmp	r5, #12
 800493e:	f000 80bc 	beq.w	8004aba <HAL_RCC_OscConfig+0x6ce>
        __HAL_RCC_PLL_DISABLE();
 8004942:	4a5f      	ldr	r2, [pc, #380]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800494c:	f7fd ffc2 	bl	80028d4 <HAL_GetTick>
 8004950:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004952:	4b5b      	ldr	r3, [pc, #364]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800495a:	f000 8094 	beq.w	8004a86 <HAL_RCC_OscConfig+0x69a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495e:	f7fd ffb9 	bl	80028d4 <HAL_GetTick>
 8004962:	1b00      	subs	r0, r0, r4
 8004964:	2802      	cmp	r0, #2
 8004966:	d9f4      	bls.n	8004952 <HAL_RCC_OscConfig+0x566>
            return HAL_TIMEOUT;
 8004968:	2003      	movs	r0, #3
 800496a:	e0a2      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
      pll_config = RCC->PLLCFGR;
 800496c:	4b54      	ldr	r3, [pc, #336]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 800496e:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004970:	f003 0103 	and.w	r1, r3, #3
 8004974:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004976:	4291      	cmp	r1, r2
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x5bc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800497a:	2d0c      	cmp	r5, #12
 800497c:	f000 809b 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x6ca>
            __HAL_RCC_PLL_DISABLE();
 8004980:	4a4f      	ldr	r2, [pc, #316]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004988:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800498a:	f7fd ffa3 	bl	80028d4 <HAL_GetTick>
 800498e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004998:	d02a      	beq.n	80049f0 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd ff9b 	bl	80028d4 <HAL_GetTick>
 800499e:	1b40      	subs	r0, r0, r5
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d9f5      	bls.n	8004990 <HAL_RCC_OscConfig+0x5a4>
                return HAL_TIMEOUT;
 80049a4:	2003      	movs	r0, #3
 80049a6:	e084      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ae:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80049b4:	d1e1      	bne.n	800497a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049bc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80049c0:	d1db      	bne.n	800497a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80049c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80049c8:	0852      	lsrs	r2, r2, #1
 80049ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049cc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80049d0:	d1d3      	bne.n	800497a <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049d2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80049d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049d8:	0852      	lsrs	r2, r2, #1
 80049da:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049dc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80049e0:	d1cb      	bne.n	800497a <HAL_RCC_OscConfig+0x58e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e2:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049ea:	d032      	beq.n	8004a52 <HAL_RCC_OscConfig+0x666>
  return HAL_OK;
 80049ec:	2000      	movs	r0, #0
 80049ee:	e060      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4a33      	ldr	r2, [pc, #204]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 80049f2:	68d3      	ldr	r3, [r2, #12]
 80049f4:	4933      	ldr	r1, [pc, #204]	; (8004ac4 <HAL_RCC_OscConfig+0x6d8>)
 80049f6:	4019      	ands	r1, r3
 80049f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80049fc:	3801      	subs	r0, #1
 80049fe:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004a02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004a08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a0a:	0840      	lsrs	r0, r0, #1
 8004a0c:	3801      	subs	r0, #1
 8004a0e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004a12:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a14:	0840      	lsrs	r0, r0, #1
 8004a16:	3801      	subs	r0, #1
 8004a18:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a26:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a28:	68d3      	ldr	r3, [r2, #12]
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004a30:	f7fd ff50 	bl	80028d4 <HAL_GetTick>
 8004a34:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x662>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd ff48 	bl	80028d4 <HAL_GetTick>
 8004a44:	1b00      	subs	r0, r0, r4
 8004a46:	2802      	cmp	r0, #2
 8004a48:	d9f5      	bls.n	8004a36 <HAL_RCC_OscConfig+0x64a>
                return HAL_TIMEOUT;
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	e031      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e02f      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_PLL_ENABLE();
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a5a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a62:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004a64:	f7fd ff36 	bl	80028d4 <HAL_GetTick>
 8004a68:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCC_OscConfig+0x696>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd ff2e 	bl	80028d4 <HAL_GetTick>
 8004a78:	1b03      	subs	r3, r0, r4
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d9f5      	bls.n	8004a6a <HAL_RCC_OscConfig+0x67e>
              return HAL_TIMEOUT;
 8004a7e:	2003      	movs	r0, #3
 8004a80:	e017      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8004a82:	2000      	movs	r0, #0
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004a86:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <HAL_RCC_OscConfig+0x6d4>)
 8004a88:	68d3      	ldr	r3, [r2, #12]
 8004a8a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004a94:	2000      	movs	r0, #0
 8004a96:	e00c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
}
 8004a9a:	4770      	bx	lr
        return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
            return HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e006      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
          return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8004ab0:	2000      	movs	r0, #0
}
 8004ab2:	b003      	add	sp, #12
 8004ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e7fb      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8004aba:	2001      	movs	r0, #1
 8004abc:	e7f9      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6c6>
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	f99f808c 	.word	0xf99f808c

08004ac8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f000 80af 	beq.w	8004c2c <HAL_RCC_ClockConfig+0x164>
{
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x174>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	428b      	cmp	r3, r1
 8004ade:	d20b      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae0:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <HAL_RCC_ClockConfig+0x174>)
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	428b      	cmp	r3, r1
 8004af4:	f040 809c 	bne.w	8004c30 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f013 0f02 	tst.w	r3, #2
 8004afe:	d00c      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b00:	68a2      	ldr	r2, [r4, #8]
 8004b02:	4b4f      	ldr	r3, [pc, #316]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d905      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0e:	494c      	ldr	r1, [pc, #304]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b10:	688b      	ldr	r3, [r1, #8]
 8004b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b16:	431a      	orrs	r2, r3
 8004b18:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	f013 0f01 	tst.w	r3, #1
 8004b20:	d039      	beq.n	8004b96 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d009      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d026      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b2c:	bb63      	cbnz	r3, 8004b88 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b2e:	4a44      	ldr	r2, [pc, #272]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	f012 0f02 	tst.w	r2, #2
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
 8004b3a:	e076      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3c:	4a40      	ldr	r2, [pc, #256]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004b44:	d076      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b46:	493e      	ldr	r1, [pc, #248]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b48:	688a      	ldr	r2, [r1, #8]
 8004b4a:	f022 0203 	bic.w	r2, r2, #3
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b52:	f7fd febf 	bl	80028d4 <HAL_GetTick>
 8004b56:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b58:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	6862      	ldr	r2, [r4, #4]
 8004b62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b66:	d016      	beq.n	8004b96 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fd feb4 	bl	80028d4 <HAL_GetTick>
 8004b6c:	1b80      	subs	r0, r0, r6
 8004b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b72:	4298      	cmp	r0, r3
 8004b74:	d9f0      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
 8004b78:	e057      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	4a31      	ldr	r2, [pc, #196]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004b82:	d1e0      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004b84:	2001      	movs	r0, #1
 8004b86:	e050      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b88:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b90:	d1d9      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004b92:	2001      	movs	r0, #1
 8004b94:	e049      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f013 0f02 	tst.w	r3, #2
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b9e:	68a2      	ldr	r2, [r4, #8]
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d205      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4924      	ldr	r1, [pc, #144]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004bae:	688b      	ldr	r3, [r1, #8]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_RCC_ClockConfig+0x174>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	42ab      	cmp	r3, r5
 8004bc2:	d90a      	bls.n	8004bda <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_RCC_ClockConfig+0x174>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	f023 0307 	bic.w	r3, r3, #7
 8004bcc:	432b      	orrs	r3, r5
 8004bce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd0:	6813      	ldr	r3, [r2, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	42ab      	cmp	r3, r5
 8004bd8:	d12e      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	f013 0f04 	tst.w	r3, #4
 8004be0:	d006      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004be4:	6893      	ldr	r3, [r2, #8]
 8004be6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bea:	68e1      	ldr	r1, [r4, #12]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	f013 0f08 	tst.w	r3, #8
 8004bf6:	d007      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004bfa:	6893      	ldr	r3, [r2, #8]
 8004bfc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c06:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c08:	f7ff fb96 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <HAL_RCC_ClockConfig+0x178>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c14:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <HAL_RCC_ClockConfig+0x17c>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	40d8      	lsrs	r0, r3
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <HAL_RCC_ClockConfig+0x180>)
 8004c20:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_RCC_ClockConfig+0x184>)
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f7fd fe11 	bl	800284c <HAL_InitTick>
}
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c2c:	2001      	movs	r0, #1
}
 8004c2e:	4770      	bx	lr
      return HAL_ERROR;
 8004c30:	2001      	movs	r0, #1
 8004c32:	e7fa      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
 8004c36:	e7f8      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8004c38:	2001      	movs	r0, #1
 8004c3a:	e7f6      	b.n	8004c2a <HAL_RCC_ClockConfig+0x162>
 8004c3c:	40022000 	.word	0x40022000
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800c510 	.word	0x0800c510
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	20000018 	.word	0x20000018

08004c50 <HAL_RCC_GetHCLKFreq>:
}
 8004c50:	4b01      	ldr	r3, [pc, #4]	; (8004c58 <HAL_RCC_GetHCLKFreq+0x8>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000010 	.word	0x20000010

08004c5c <HAL_RCC_GetPCLK1Freq>:
{
 8004c5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c5e:	f7ff fff7 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c6a:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
}
 8004c72:	40d8      	lsrs	r0, r3
 8004c74:	bd08      	pop	{r3, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	0800c520 	.word	0x0800c520

08004c80 <HAL_RCC_GetPCLK2Freq>:
{
 8004c80:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c82:	f7ff ffe5 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c8e:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	f003 031f 	and.w	r3, r3, #31
}
 8004c96:	40d8      	lsrs	r0, r3
 8004c98:	bd08      	pop	{r3, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800c520 	.word	0x0800c520

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004cb0:	d069      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cb2:	4b87      	ldr	r3, [pc, #540]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004cba:	d11e      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b84      	ldr	r3, [pc, #528]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004cd0:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd2:	4a80      	ldr	r2, [pc, #512]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cdc:	f7fd fdfa 	bl	80028d4 <HAL_GetTick>
 8004ce0:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cea:	d108      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cec:	f7fd fdf2 	bl	80028d4 <HAL_GetTick>
 8004cf0:	1b40      	subs	r0, r0, r5
 8004cf2:	2802      	cmp	r0, #2
 8004cf4:	d9f5      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8004cf6:	2503      	movs	r5, #3
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	e7e9      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cfe:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8004d00:	bb45      	cbnz	r5, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d02:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d08:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d0c:	d015      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x96>
 8004d0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d012      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d14:	4a6e      	ldr	r2, [pc, #440]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d1e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004d22:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004d26:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004d2e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004d32:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d3a:	f013 0f01 	tst.w	r3, #1
 8004d3e:	d110      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8004d40:	b945      	cbnz	r5, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d42:	4a63      	ldr	r2, [pc, #396]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d54:	b1c6      	cbz	r6, 8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d58:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d60:	e012      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 8004d62:	f7fd fdb7 	bl	80028d4 <HAL_GetTick>
 8004d66:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f013 0f02 	tst.w	r3, #2
 8004d72:	d1e5      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fd fdae 	bl	80028d4 <HAL_GetTick>
 8004d78:	1bc0      	subs	r0, r0, r7
 8004d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d7e:	4298      	cmp	r0, r3
 8004d80:	d9f2      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8004d82:	2503      	movs	r5, #3
 8004d84:	e7dc      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d86:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f013 0f01 	tst.w	r3, #1
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d90:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	6861      	ldr	r1, [r4, #4]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f013 0f02 	tst.w	r3, #2
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004daa:	4a49      	ldr	r2, [pc, #292]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004db0:	f023 030c 	bic.w	r3, r3, #12
 8004db4:	68a1      	ldr	r1, [r4, #8]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	f013 0f04 	tst.w	r3, #4
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc4:	4a42      	ldr	r2, [pc, #264]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004dca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004dce:	68e1      	ldr	r1, [r4, #12]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f013 0f20 	tst.w	r3, #32
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dde:	4a3c      	ldr	r2, [pc, #240]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004de0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004de4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004de8:	6921      	ldr	r1, [r4, #16]
 8004dea:	430b      	orrs	r3, r1
 8004dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df8:	4a35      	ldr	r2, [pc, #212]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004dfe:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004e02:	6a21      	ldr	r1, [r4, #32]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004e10:	d008      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e12:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e36:	6961      	ldr	r1, [r4, #20]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e44:	d008      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e46:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e50:	69a1      	ldr	r1, [r4, #24]
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e6a:	69e1      	ldr	r1, [r4, #28]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004e78:	d00c      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7a:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e80:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e86:	430b      	orrs	r3, r1
 8004e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e92:	d013      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004e9a:	d00c      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e9c:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ea2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb4:	d007      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	b003      	add	sp, #12
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ebc:	68d3      	ldr	r3, [r2, #12]
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
 8004ec4:	e7e6      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec6:	68d3      	ldr	r3, [r2, #12]
 8004ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ecc:	60d3      	str	r3, [r2, #12]
 8004ece:	e7f2      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000

08004ed8 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ed8:	4a02      	ldr	r2, [pc, #8]	; (8004ee4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	4770      	bx	lr
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eea:	6a03      	ldr	r3, [r0, #32]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004efc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	680c      	ldr	r4, [r1, #0]
 8004f02:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f04:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f08:	688c      	ldr	r4, [r1, #8]
 8004f0a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f0c:	4c15      	ldr	r4, [pc, #84]	; (8004f64 <TIM_OC1_SetConfig+0x7c>)
 8004f0e:	42a0      	cmp	r0, r4
 8004f10:	d007      	beq.n	8004f22 <TIM_OC1_SetConfig+0x3a>
 8004f12:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004f16:	42a0      	cmp	r0, r4
 8004f18:	d003      	beq.n	8004f22 <TIM_OC1_SetConfig+0x3a>
 8004f1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f1e:	42a0      	cmp	r0, r4
 8004f20:	d105      	bne.n	8004f2e <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f22:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f26:	68cc      	ldr	r4, [r1, #12]
 8004f28:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2e:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <TIM_OC1_SetConfig+0x7c>)
 8004f30:	42a0      	cmp	r0, r4
 8004f32:	d007      	beq.n	8004f44 <TIM_OC1_SetConfig+0x5c>
 8004f34:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC1_SetConfig+0x5c>
 8004f3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d107      	bne.n	8004f54 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f44:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f48:	694c      	ldr	r4, [r1, #20]
 8004f4a:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f4e:	698d      	ldr	r5, [r1, #24]
 8004f50:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f56:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f58:	684a      	ldr	r2, [r1, #4]
 8004f5a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5c:	6203      	str	r3, [r0, #32]
}
 8004f5e:	bc30      	pop	{r4, r5}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f6a:	6a03      	ldr	r3, [r0, #32]
 8004f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f7c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	680d      	ldr	r5, [r1, #0]
 8004f82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f88:	688d      	ldr	r5, [r1, #8]
 8004f8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8e:	4d12      	ldr	r5, [pc, #72]	; (8004fd8 <TIM_OC3_SetConfig+0x70>)
 8004f90:	42a8      	cmp	r0, r5
 8004f92:	d019      	beq.n	8004fc8 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	4d10      	ldr	r5, [pc, #64]	; (8004fd8 <TIM_OC3_SetConfig+0x70>)
 8004f96:	42a8      	cmp	r0, r5
 8004f98:	d007      	beq.n	8004faa <TIM_OC3_SetConfig+0x42>
 8004f9a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004f9e:	42a8      	cmp	r0, r5
 8004fa0:	d003      	beq.n	8004faa <TIM_OC3_SetConfig+0x42>
 8004fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fa6:	42a8      	cmp	r0, r5
 8004fa8:	d107      	bne.n	8004fba <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fae:	694d      	ldr	r5, [r1, #20]
 8004fb0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb4:	698d      	ldr	r5, [r1, #24]
 8004fb6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fbc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fbe:	684a      	ldr	r2, [r1, #4]
 8004fc0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	6203      	str	r3, [r0, #32]
}
 8004fc4:	bc30      	pop	{r4, r5}
 8004fc6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fcc:	68cd      	ldr	r5, [r1, #12]
 8004fce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd6:	e7dd      	b.n	8004f94 <TIM_OC3_SetConfig+0x2c>
 8004fd8:	40012c00 	.word	0x40012c00

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fde:	6a03      	ldr	r3, [r0, #32]
 8004fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	680d      	ldr	r5, [r1, #0]
 8004ff6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ffe:	688d      	ldr	r5, [r1, #8]
 8005000:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <TIM_OC4_SetConfig+0x58>)
 8005006:	42a8      	cmp	r0, r5
 8005008:	d007      	beq.n	800501a <TIM_OC4_SetConfig+0x3e>
 800500a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800500e:	42a8      	cmp	r0, r5
 8005010:	d003      	beq.n	800501a <TIM_OC4_SetConfig+0x3e>
 8005012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005016:	42a8      	cmp	r0, r5
 8005018:	d104      	bne.n	8005024 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800501e:	694d      	ldr	r5, [r1, #20]
 8005020:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005026:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	684b      	ldr	r3, [r1, #4]
 800502a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	6202      	str	r2, [r0, #32]
}
 800502e:	bc30      	pop	{r4, r5}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00

08005038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800503a:	6a03      	ldr	r3, [r0, #32]
 800503c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005040:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005046:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005048:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800504c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005050:	680d      	ldr	r5, [r1, #0]
 8005052:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005058:	688d      	ldr	r5, [r1, #8]
 800505a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	4d0b      	ldr	r5, [pc, #44]	; (800508c <TIM_OC5_SetConfig+0x54>)
 8005060:	42a8      	cmp	r0, r5
 8005062:	d007      	beq.n	8005074 <TIM_OC5_SetConfig+0x3c>
 8005064:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8005068:	42a8      	cmp	r0, r5
 800506a:	d003      	beq.n	8005074 <TIM_OC5_SetConfig+0x3c>
 800506c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005070:	42a8      	cmp	r0, r5
 8005072:	d104      	bne.n	800507e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005074:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005078:	694d      	ldr	r5, [r1, #20]
 800507a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005080:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005082:	684a      	ldr	r2, [r1, #4]
 8005084:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	6203      	str	r3, [r0, #32]
}
 8005088:	bc30      	pop	{r4, r5}
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00

08005090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005092:	6a03      	ldr	r3, [r0, #32]
 8005094:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005098:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800509e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	680d      	ldr	r5, [r1, #0]
 80050aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050ae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b2:	688d      	ldr	r5, [r1, #8]
 80050b4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	4d0b      	ldr	r5, [pc, #44]	; (80050e8 <TIM_OC6_SetConfig+0x58>)
 80050ba:	42a8      	cmp	r0, r5
 80050bc:	d007      	beq.n	80050ce <TIM_OC6_SetConfig+0x3e>
 80050be:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80050c2:	42a8      	cmp	r0, r5
 80050c4:	d003      	beq.n	80050ce <TIM_OC6_SetConfig+0x3e>
 80050c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050ca:	42a8      	cmp	r0, r5
 80050cc:	d104      	bne.n	80050d8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050ce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050d2:	694d      	ldr	r5, [r1, #20]
 80050d4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050da:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050dc:	684b      	ldr	r3, [r1, #4]
 80050de:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	6202      	str	r2, [r0, #32]
}
 80050e2:	bc30      	pop	{r4, r5}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00

080050ec <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d126      	bne.n	8005144 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050fc:	6802      	ldr	r2, [r0, #0]
 80050fe:	68d3      	ldr	r3, [r2, #12]
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	6803      	ldr	r3, [r0, #0]
 8005108:	4a11      	ldr	r2, [pc, #68]	; (8005150 <HAL_TIM_Base_Start_IT+0x64>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00c      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x3c>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x3c>
 8005114:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005118:	4293      	cmp	r3, r2
 800511a:	d005      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005124:	2000      	movs	r0, #0
 8005126:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <HAL_TIM_Base_Start_IT+0x68>)
 800512c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	2a06      	cmp	r2, #6
 8005130:	d00a      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x5c>
 8005132:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005140:	2000      	movs	r0, #0
 8005142:	4770      	bx	lr
    return HAL_ERROR;
 8005144:	2001      	movs	r0, #1
 8005146:	4770      	bx	lr
  return HAL_OK;
 8005148:	2000      	movs	r0, #0
 800514a:	4770      	bx	lr
 800514c:	2000      	movs	r0, #0
}
 800514e:	4770      	bx	lr
 8005150:	40012c00 	.word	0x40012c00
 8005154:	00010007 	.word	0x00010007

08005158 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005158:	6802      	ldr	r2, [r0, #0]
 800515a:	68d3      	ldr	r3, [r2, #12]
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8005162:	6803      	ldr	r3, [r0, #0]
 8005164:	6a19      	ldr	r1, [r3, #32]
 8005166:	f241 1211 	movw	r2, #4369	; 0x1111
 800516a:	4211      	tst	r1, r2
 800516c:	d108      	bne.n	8005180 <HAL_TIM_Base_Stop_IT+0x28>
 800516e:	6a19      	ldr	r1, [r3, #32]
 8005170:	f240 4244 	movw	r2, #1092	; 0x444
 8005174:	4211      	tst	r1, r2
 8005176:	d103      	bne.n	8005180 <HAL_TIM_Base_Stop_IT+0x28>
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005180:	2301      	movs	r3, #1
 8005182:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005186:	2000      	movs	r0, #0
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_IC_CaptureCallback>:
}
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800518e:	4770      	bx	lr

08005190 <TIM_DMADelayPulseCplt>:
{
 8005190:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005192:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005196:	4283      	cmp	r3, r0
 8005198:	d00e      	beq.n	80051b8 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800519a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800519c:	4283      	cmp	r3, r0
 800519e:	d014      	beq.n	80051ca <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051a2:	4283      	cmp	r3, r0
 80051a4:	d01a      	beq.n	80051dc <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051a8:	4283      	cmp	r3, r0
 80051aa:	d020      	beq.n	80051ee <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ffee 	bl	800518e <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	2300      	movs	r3, #0
 80051b4:	7723      	strb	r3, [r4, #28]
}
 80051b6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80051bc:	69c3      	ldr	r3, [r0, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f4      	bne.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	2301      	movs	r3, #1
 80051c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80051c8:	e7f0      	b.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ca:	2302      	movs	r3, #2
 80051cc:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80051ce:	69c3      	ldr	r3, [r0, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1eb      	bne.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	2301      	movs	r3, #1
 80051d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051da:	e7e7      	b.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051dc:	2304      	movs	r3, #4
 80051de:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80051e0:	69c3      	ldr	r3, [r0, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e2      	bne.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	2301      	movs	r3, #1
 80051e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80051ec:	e7de      	b.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ee:	2308      	movs	r3, #8
 80051f0:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80051f2:	69c3      	ldr	r3, [r0, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1d9      	bne.n	80051ac <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	2301      	movs	r3, #1
 80051fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80051fe:	e7d5      	b.n	80051ac <TIM_DMADelayPulseCplt+0x1c>

08005200 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8005200:	4770      	bx	lr

08005202 <TIM_DMADelayPulseHalfCplt>:
{
 8005202:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005204:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005208:	4283      	cmp	r3, r0
 800520a:	d00b      	beq.n	8005224 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800520c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800520e:	4283      	cmp	r3, r0
 8005210:	d010      	beq.n	8005234 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005214:	4283      	cmp	r3, r0
 8005216:	d010      	beq.n	800523a <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800521a:	4283      	cmp	r3, r0
 800521c:	d104      	bne.n	8005228 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521e:	2308      	movs	r3, #8
 8005220:	7723      	strb	r3, [r4, #28]
 8005222:	e001      	b.n	8005228 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005224:	2301      	movs	r3, #1
 8005226:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff ffe9 	bl	8005200 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	2300      	movs	r3, #0
 8005230:	7723      	strb	r3, [r4, #28]
}
 8005232:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005234:	2302      	movs	r3, #2
 8005236:	7723      	strb	r3, [r4, #28]
 8005238:	e7f6      	b.n	8005228 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800523a:	2304      	movs	r3, #4
 800523c:	7723      	strb	r3, [r4, #28]
 800523e:	e7f3      	b.n	8005228 <TIM_DMADelayPulseHalfCplt+0x26>

08005240 <HAL_TIM_TriggerCallback>:
}
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_IRQHandler>:
{
 8005242:	b510      	push	{r4, lr}
 8005244:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005246:	6803      	ldr	r3, [r0, #0]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	f012 0f02 	tst.w	r2, #2
 800524e:	d011      	beq.n	8005274 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	f012 0f02 	tst.w	r2, #2
 8005256:	d00d      	beq.n	8005274 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005258:	f06f 0202 	mvn.w	r2, #2
 800525c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525e:	2301      	movs	r3, #1
 8005260:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005262:	6803      	ldr	r3, [r0, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f013 0f03 	tst.w	r3, #3
 800526a:	d079      	beq.n	8005360 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800526c:	f7ff ff8e 	bl	800518c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005270:	2300      	movs	r3, #0
 8005272:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	f012 0f04 	tst.w	r2, #4
 800527c:	d012      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	f012 0f04 	tst.w	r2, #4
 8005284:	d00e      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005286:	f06f 0204 	mvn.w	r2, #4
 800528a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528c:	2302      	movs	r3, #2
 800528e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005298:	d068      	beq.n	800536c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff ff76 	bl	800518c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a0:	2300      	movs	r3, #0
 80052a2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	f012 0f08 	tst.w	r2, #8
 80052ac:	d012      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	f012 0f08 	tst.w	r2, #8
 80052b4:	d00e      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b6:	f06f 0208 	mvn.w	r2, #8
 80052ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052bc:	2304      	movs	r3, #4
 80052be:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f013 0f03 	tst.w	r3, #3
 80052c8:	d057      	beq.n	800537a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff ff5e 	bl	800518c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	2300      	movs	r3, #0
 80052d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	f012 0f10 	tst.w	r2, #16
 80052dc:	d012      	beq.n	8005304 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	f012 0f10 	tst.w	r2, #16
 80052e4:	d00e      	beq.n	8005304 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e6:	f06f 0210 	mvn.w	r2, #16
 80052ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ec:	2308      	movs	r3, #8
 80052ee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80052f8:	d046      	beq.n	8005388 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff ff46 	bl	800518c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005300:	2300      	movs	r3, #0
 8005302:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	f012 0f01 	tst.w	r2, #1
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	f012 0f01 	tst.w	r2, #1
 8005314:	d13f      	bne.n	8005396 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005326:	d13d      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005338:	d13b      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005342:	d003      	beq.n	800534c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	f012 0f40 	tst.w	r2, #64	; 0x40
 800534a:	d139      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	f012 0f20 	tst.w	r2, #32
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	f012 0f20 	tst.w	r2, #32
 800535c:	d137      	bne.n	80053ce <HAL_TIM_IRQHandler+0x18c>
}
 800535e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005360:	f7ff ff13 	bl	800518a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff ff12 	bl	800518e <HAL_TIM_PWM_PulseFinishedCallback>
 800536a:	e781      	b.n	8005270 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff ff0c 	bl	800518a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005372:	4620      	mov	r0, r4
 8005374:	f7ff ff0b 	bl	800518e <HAL_TIM_PWM_PulseFinishedCallback>
 8005378:	e792      	b.n	80052a0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff ff05 	bl	800518a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	4620      	mov	r0, r4
 8005382:	f7ff ff04 	bl	800518e <HAL_TIM_PWM_PulseFinishedCallback>
 8005386:	e7a3      	b.n	80052d0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff fefe 	bl	800518a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fefd 	bl	800518e <HAL_TIM_PWM_PulseFinishedCallback>
 8005394:	e7b4      	b.n	8005300 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005396:	f06f 0201 	mvn.w	r2, #1
 800539a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800539c:	4620      	mov	r0, r4
 800539e:	f7fc fa51 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
 80053a2:	e7b8      	b.n	8005316 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 fd91 	bl	8005ed2 <HAL_TIMEx_BreakCallback>
 80053b0:	e7ba      	b.n	8005328 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fd8b 	bl	8005ed4 <HAL_TIMEx_Break2Callback>
 80053be:	e7bc      	b.n	800533a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff ff3a 	bl	8005240 <HAL_TIM_TriggerCallback>
 80053cc:	e7be      	b.n	800534c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ce:	f06f 0220 	mvn.w	r2, #32
 80053d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 fd7b 	bl	8005ed0 <HAL_TIMEx_CommutCallback>
}
 80053da:	e7c0      	b.n	800535e <HAL_TIM_IRQHandler+0x11c>

080053dc <HAL_TIM_ErrorCallback>:
}
 80053dc:	4770      	bx	lr

080053de <TIM_DMAError>:
{
 80053de:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e4:	4283      	cmp	r3, r0
 80053e6:	d00c      	beq.n	8005402 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053ea:	4283      	cmp	r3, r0
 80053ec:	d013      	beq.n	8005416 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053f0:	4283      	cmp	r3, r0
 80053f2:	d016      	beq.n	8005422 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053f6:	4283      	cmp	r3, r0
 80053f8:	d019      	beq.n	800542e <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8005400:	e003      	b.n	800540a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005402:	2301      	movs	r3, #1
 8005404:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800540a:	4620      	mov	r0, r4
 800540c:	f7ff ffe6 	bl	80053dc <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005410:	2300      	movs	r3, #0
 8005412:	7723      	strb	r3, [r4, #28]
}
 8005414:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005416:	2302      	movs	r3, #2
 8005418:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	2301      	movs	r3, #1
 800541c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005420:	e7f3      	b.n	800540a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005422:	2304      	movs	r3, #4
 8005424:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	2301      	movs	r3, #1
 8005428:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800542c:	e7ed      	b.n	800540a <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	2308      	movs	r3, #8
 8005430:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	2301      	movs	r3, #1
 8005434:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005438:	e7e7      	b.n	800540a <TIM_DMAError+0x2c>
	...

0800543c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800543c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <TIM_Base_SetConfig+0x6c>)
 8005440:	4290      	cmp	r0, r2
 8005442:	d002      	beq.n	800544a <TIM_Base_SetConfig+0xe>
 8005444:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005448:	d103      	bne.n	8005452 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800544e:	684a      	ldr	r2, [r1, #4]
 8005450:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_Base_SetConfig+0x6c>)
 8005454:	4290      	cmp	r0, r2
 8005456:	d00a      	beq.n	800546e <TIM_Base_SetConfig+0x32>
 8005458:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x32>
 800545e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005462:	4290      	cmp	r0, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x32>
 8005466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800546a:	4290      	cmp	r0, r2
 800546c:	d103      	bne.n	8005476 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005472:	68ca      	ldr	r2, [r1, #12]
 8005474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547a:	694a      	ldr	r2, [r1, #20]
 800547c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800547e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	688b      	ldr	r3, [r1, #8]
 8005482:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005484:	680b      	ldr	r3, [r1, #0]
 8005486:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <TIM_Base_SetConfig+0x6c>)
 800548a:	4298      	cmp	r0, r3
 800548c:	d007      	beq.n	800549e <TIM_Base_SetConfig+0x62>
 800548e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005492:	4298      	cmp	r0, r3
 8005494:	d003      	beq.n	800549e <TIM_Base_SetConfig+0x62>
 8005496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549a:	4298      	cmp	r0, r3
 800549c:	d101      	bne.n	80054a2 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800549e:	690b      	ldr	r3, [r1, #16]
 80054a0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80054a2:	2301      	movs	r3, #1
 80054a4:	6143      	str	r3, [r0, #20]
}
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00

080054ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80054ac:	b360      	cbz	r0, 8005508 <HAL_TIM_Base_Init+0x5c>
{
 80054ae:	b510      	push	{r4, lr}
 80054b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80054b6:	b313      	cbz	r3, 80054fe <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054be:	4621      	mov	r1, r4
 80054c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80054c4:	f7ff ffba 	bl	800543c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80054d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80054d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80054da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80054de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80054ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80054f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80054fa:	2000      	movs	r0, #0
}
 80054fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80054fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005502:	f7fc ffb3 	bl	800246c <HAL_TIM_Base_MspInit>
 8005506:	e7d7      	b.n	80054b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005508:	2001      	movs	r0, #1
}
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800550c:	b360      	cbz	r0, 8005568 <HAL_TIM_OC_Init+0x5c>
{
 800550e:	b510      	push	{r4, lr}
 8005510:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005516:	b313      	cbz	r3, 800555e <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	2302      	movs	r3, #2
 800551a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800551e:	4621      	mov	r1, r4
 8005520:	f851 0b04 	ldr.w	r0, [r1], #4
 8005524:	f7ff ff8a 	bl	800543c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	2301      	movs	r3, #1
 800552a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005532:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005536:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800553a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800553e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800554a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800554e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005552:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800555a:	2000      	movs	r0, #0
}
 800555c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800555e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005562:	f7fc ff23 	bl	80023ac <HAL_TIM_OC_MspInit>
 8005566:	e7d7      	b.n	8005518 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8005568:	2001      	movs	r0, #1
}
 800556a:	4770      	bx	lr

0800556c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800556c:	b360      	cbz	r0, 80055c8 <HAL_TIM_PWM_Init+0x5c>
{
 800556e:	b510      	push	{r4, lr}
 8005570:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005576:	b313      	cbz	r3, 80055be <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	2302      	movs	r3, #2
 800557a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557e:	4621      	mov	r1, r4
 8005580:	f851 0b04 	ldr.w	r0, [r1], #4
 8005584:	f7ff ff5a 	bl	800543c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	2301      	movs	r3, #1
 800558a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005592:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005596:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800559a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800559e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80055aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80055b2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80055b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80055ba:	2000      	movs	r0, #0
}
 80055bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80055be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80055c2:	f7fc fed3 	bl	800236c <HAL_TIM_PWM_MspInit>
 80055c6:	e7d7      	b.n	8005578 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80055c8:	2001      	movs	r0, #1
}
 80055ca:	4770      	bx	lr

080055cc <TIM_OC2_SetConfig>:
{
 80055cc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ce:	6a03      	ldr	r3, [r0, #32]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80055d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80055d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80055da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80055e0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	680d      	ldr	r5, [r1, #0]
 80055e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80055ea:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ee:	688d      	ldr	r5, [r1, #8]
 80055f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f4:	4d12      	ldr	r5, [pc, #72]	; (8005640 <TIM_OC2_SetConfig+0x74>)
 80055f6:	42a8      	cmp	r0, r5
 80055f8:	d019      	beq.n	800562e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fa:	4d11      	ldr	r5, [pc, #68]	; (8005640 <TIM_OC2_SetConfig+0x74>)
 80055fc:	42a8      	cmp	r0, r5
 80055fe:	d007      	beq.n	8005610 <TIM_OC2_SetConfig+0x44>
 8005600:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8005604:	42a8      	cmp	r0, r5
 8005606:	d003      	beq.n	8005610 <TIM_OC2_SetConfig+0x44>
 8005608:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800560c:	42a8      	cmp	r0, r5
 800560e:	d107      	bne.n	8005620 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005610:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005614:	694d      	ldr	r5, [r1, #20]
 8005616:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561a:	698d      	ldr	r5, [r1, #24]
 800561c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005620:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005622:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005628:	6203      	str	r3, [r0, #32]
}
 800562a:	bc30      	pop	{r4, r5}
 800562c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800562e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005632:	68cd      	ldr	r5, [r1, #12]
 8005634:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563c:	e7dd      	b.n	80055fa <TIM_OC2_SetConfig+0x2e>
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00

08005644 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005644:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d036      	beq.n	80056ba <HAL_TIM_OC_ConfigChannel+0x76>
{
 800564c:	b510      	push	{r4, lr}
 800564e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005650:	2301      	movs	r3, #1
 8005652:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005656:	2a14      	cmp	r2, #20
 8005658:	d82a      	bhi.n	80056b0 <HAL_TIM_OC_ConfigChannel+0x6c>
 800565a:	e8df f002 	tbb	[pc, r2]
 800565e:	290b      	.short	0x290b
 8005660:	29102929 	.word	0x29102929
 8005664:	29152929 	.word	0x29152929
 8005668:	291a2929 	.word	0x291a2929
 800566c:	291f2929 	.word	0x291f2929
 8005670:	2929      	.short	0x2929
 8005672:	24          	.byte	0x24
 8005673:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f7ff fc37 	bl	8004ee8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2000      	movs	r0, #0
      break;
 800567c:	e019      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	f7ff ffa4 	bl	80055cc <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005684:	2000      	movs	r0, #0
      break;
 8005686:	e014      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	f7ff fc6d 	bl	8004f68 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2000      	movs	r0, #0
      break;
 8005690:	e00f      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005692:	6800      	ldr	r0, [r0, #0]
 8005694:	f7ff fca2 	bl	8004fdc <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2000      	movs	r0, #0
      break;
 800569a:	e00a      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f7ff fccb 	bl	8005038 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2000      	movs	r0, #0
      break;
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	f7ff fcf2 	bl	8005090 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2000      	movs	r0, #0
      break;
 80056ae:	e000      	b.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 80056b0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80056b2:	2300      	movs	r3, #0
 80056b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80056b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80056ba:	2002      	movs	r0, #2
}
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_PWM_ConfigChannel>:
{
 80056be:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80056c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f000 8095 	beq.w	80057f4 <HAL_TIM_PWM_ConfigChannel+0x136>
 80056ca:	4604      	mov	r4, r0
 80056cc:	460d      	mov	r5, r1
 80056ce:	2301      	movs	r3, #1
 80056d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80056d4:	2a14      	cmp	r2, #20
 80056d6:	f200 8088 	bhi.w	80057ea <HAL_TIM_PWM_ConfigChannel+0x12c>
 80056da:	e8df f002 	tbb	[pc, r2]
 80056de:	860b      	.short	0x860b
 80056e0:	861f8686 	.word	0x861f8686
 80056e4:	86348686 	.word	0x86348686
 80056e8:	86488686 	.word	0x86488686
 80056ec:	865d8686 	.word	0x865d8686
 80056f0:	8686      	.short	0x8686
 80056f2:	71          	.byte	0x71
 80056f3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f4:	6800      	ldr	r0, [r0, #0]
 80056f6:	f7ff fbf7 	bl	8004ee8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	6993      	ldr	r3, [r2, #24]
 80056fe:	f043 0308 	orr.w	r3, r3, #8
 8005702:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	6993      	ldr	r3, [r2, #24]
 8005708:	f023 0304 	bic.w	r3, r3, #4
 800570c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	6993      	ldr	r3, [r2, #24]
 8005712:	6929      	ldr	r1, [r5, #16]
 8005714:	430b      	orrs	r3, r1
 8005716:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2000      	movs	r0, #0
      break;
 800571a:	e067      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800571c:	6800      	ldr	r0, [r0, #0]
 800571e:	f7ff ff55 	bl	80055cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	6993      	ldr	r3, [r2, #24]
 8005726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800572a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	6993      	ldr	r3, [r2, #24]
 8005730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005734:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	6993      	ldr	r3, [r2, #24]
 800573a:	6929      	ldr	r1, [r5, #16]
 800573c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005740:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2000      	movs	r0, #0
      break;
 8005744:	e052      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	f7ff fc0e 	bl	8004f68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	69d3      	ldr	r3, [r2, #28]
 8005750:	f043 0308 	orr.w	r3, r3, #8
 8005754:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	69d3      	ldr	r3, [r2, #28]
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	69d3      	ldr	r3, [r2, #28]
 8005764:	6929      	ldr	r1, [r5, #16]
 8005766:	430b      	orrs	r3, r1
 8005768:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2000      	movs	r0, #0
      break;
 800576c:	e03e      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	f7ff fc34 	bl	8004fdc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	69d3      	ldr	r3, [r2, #28]
 8005778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800577c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	69d3      	ldr	r3, [r2, #28]
 8005782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005786:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	69d3      	ldr	r3, [r2, #28]
 800578c:	6929      	ldr	r1, [r5, #16]
 800578e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005792:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2000      	movs	r0, #0
      break;
 8005796:	e029      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005798:	6800      	ldr	r0, [r0, #0]
 800579a:	f7ff fc4d 	bl	8005038 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057b6:	6929      	ldr	r1, [r5, #16]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80057bc:	2000      	movs	r0, #0
      break;
 80057be:	e015      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057c0:	6800      	ldr	r0, [r0, #0]
 80057c2:	f7ff fc65 	bl	8005090 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057ce:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057de:	6929      	ldr	r1, [r5, #16]
 80057e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057e4:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2000      	movs	r0, #0
      break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 80057ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80057ec:	2300      	movs	r3, #0
 80057ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80057f4:	2002      	movs	r0, #2
 80057f6:	e7fc      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x134>

080057f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f8:	f001 011f 	and.w	r1, r1, #31
 80057fc:	2301      	movs	r3, #1
 80057fe:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005802:	6a03      	ldr	r3, [r0, #32]
 8005804:	ea23 030c 	bic.w	r3, r3, ip
 8005808:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800580a:	6a03      	ldr	r3, [r0, #32]
 800580c:	fa02 f101 	lsl.w	r1, r2, r1
 8005810:	430b      	orrs	r3, r1
 8005812:	6203      	str	r3, [r0, #32]
}
 8005814:	4770      	bx	lr
	...

08005818 <HAL_TIM_OC_Start_DMA>:
{
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4604      	mov	r4, r0
 800581c:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800581e:	460d      	mov	r5, r1
 8005820:	2900      	cmp	r1, #0
 8005822:	d132      	bne.n	800588a <HAL_TIM_OC_Start_DMA+0x72>
 8005824:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005828:	b2c0      	uxtb	r0, r0
 800582a:	2802      	cmp	r0, #2
 800582c:	bf14      	ite	ne
 800582e:	2000      	movne	r0, #0
 8005830:	2001      	moveq	r0, #1
 8005832:	2800      	cmp	r0, #0
 8005834:	f040 8134 	bne.w	8005aa0 <HAL_TIM_OC_Start_DMA+0x288>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005838:	2d00      	cmp	r5, #0
 800583a:	d156      	bne.n	80058ea <HAL_TIM_OC_Start_DMA+0xd2>
 800583c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	2a01      	cmp	r2, #1
 8005844:	bf14      	ite	ne
 8005846:	2200      	movne	r2, #0
 8005848:	2201      	moveq	r2, #1
 800584a:	2a00      	cmp	r2, #0
 800584c:	f000 812a 	beq.w	8005aa4 <HAL_TIM_OC_Start_DMA+0x28c>
    if ((pData == NULL) || (Length == 0U))
 8005850:	2e00      	cmp	r6, #0
 8005852:	f000 8129 	beq.w	8005aa8 <HAL_TIM_OC_Start_DMA+0x290>
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8128 	beq.w	8005aac <HAL_TIM_OC_Start_DMA+0x294>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585c:	2d00      	cmp	r5, #0
 800585e:	d174      	bne.n	800594a <HAL_TIM_OC_Start_DMA+0x132>
 8005860:	2202      	movs	r2, #2
 8005862:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 8005866:	2d0c      	cmp	r5, #12
 8005868:	f200 8122 	bhi.w	8005ab0 <HAL_TIM_OC_Start_DMA+0x298>
 800586c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005870:	01200089 	.word	0x01200089
 8005874:	01200120 	.word	0x01200120
 8005878:	012000c6 	.word	0x012000c6
 800587c:	01200120 	.word	0x01200120
 8005880:	012000dd 	.word	0x012000dd
 8005884:	01200120 	.word	0x01200120
 8005888:	00f4      	.short	0x00f4
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800588a:	2904      	cmp	r1, #4
 800588c:	d00d      	beq.n	80058aa <HAL_TIM_OC_Start_DMA+0x92>
 800588e:	2908      	cmp	r1, #8
 8005890:	d013      	beq.n	80058ba <HAL_TIM_OC_Start_DMA+0xa2>
 8005892:	290c      	cmp	r1, #12
 8005894:	d019      	beq.n	80058ca <HAL_TIM_OC_Start_DMA+0xb2>
 8005896:	2910      	cmp	r1, #16
 8005898:	d01f      	beq.n	80058da <HAL_TIM_OC_Start_DMA+0xc2>
 800589a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800589e:	b2c0      	uxtb	r0, r0
 80058a0:	2802      	cmp	r0, #2
 80058a2:	bf14      	ite	ne
 80058a4:	2000      	movne	r0, #0
 80058a6:	2001      	moveq	r0, #1
 80058a8:	e7c3      	b.n	8005832 <HAL_TIM_OC_Start_DMA+0x1a>
 80058aa:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80058ae:	b2c0      	uxtb	r0, r0
 80058b0:	2802      	cmp	r0, #2
 80058b2:	bf14      	ite	ne
 80058b4:	2000      	movne	r0, #0
 80058b6:	2001      	moveq	r0, #1
 80058b8:	e7bb      	b.n	8005832 <HAL_TIM_OC_Start_DMA+0x1a>
 80058ba:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80058be:	b2c0      	uxtb	r0, r0
 80058c0:	2802      	cmp	r0, #2
 80058c2:	bf14      	ite	ne
 80058c4:	2000      	movne	r0, #0
 80058c6:	2001      	moveq	r0, #1
 80058c8:	e7b3      	b.n	8005832 <HAL_TIM_OC_Start_DMA+0x1a>
 80058ca:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80058ce:	b2c0      	uxtb	r0, r0
 80058d0:	2802      	cmp	r0, #2
 80058d2:	bf14      	ite	ne
 80058d4:	2000      	movne	r0, #0
 80058d6:	2001      	moveq	r0, #1
 80058d8:	e7ab      	b.n	8005832 <HAL_TIM_OC_Start_DMA+0x1a>
 80058da:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 80058de:	b2c0      	uxtb	r0, r0
 80058e0:	2802      	cmp	r0, #2
 80058e2:	bf14      	ite	ne
 80058e4:	2000      	movne	r0, #0
 80058e6:	2001      	moveq	r0, #1
 80058e8:	e7a3      	b.n	8005832 <HAL_TIM_OC_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80058ea:	2d04      	cmp	r5, #4
 80058ec:	d00d      	beq.n	800590a <HAL_TIM_OC_Start_DMA+0xf2>
 80058ee:	2d08      	cmp	r5, #8
 80058f0:	d013      	beq.n	800591a <HAL_TIM_OC_Start_DMA+0x102>
 80058f2:	2d0c      	cmp	r5, #12
 80058f4:	d019      	beq.n	800592a <HAL_TIM_OC_Start_DMA+0x112>
 80058f6:	2d10      	cmp	r5, #16
 80058f8:	d01f      	beq.n	800593a <HAL_TIM_OC_Start_DMA+0x122>
 80058fa:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	2a01      	cmp	r2, #1
 8005902:	bf14      	ite	ne
 8005904:	2200      	movne	r2, #0
 8005906:	2201      	moveq	r2, #1
 8005908:	e79f      	b.n	800584a <HAL_TIM_OC_Start_DMA+0x32>
 800590a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	2a01      	cmp	r2, #1
 8005912:	bf14      	ite	ne
 8005914:	2200      	movne	r2, #0
 8005916:	2201      	moveq	r2, #1
 8005918:	e797      	b.n	800584a <HAL_TIM_OC_Start_DMA+0x32>
 800591a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	2a01      	cmp	r2, #1
 8005922:	bf14      	ite	ne
 8005924:	2200      	movne	r2, #0
 8005926:	2201      	moveq	r2, #1
 8005928:	e78f      	b.n	800584a <HAL_TIM_OC_Start_DMA+0x32>
 800592a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	2a01      	cmp	r2, #1
 8005932:	bf14      	ite	ne
 8005934:	2200      	movne	r2, #0
 8005936:	2201      	moveq	r2, #1
 8005938:	e787      	b.n	800584a <HAL_TIM_OC_Start_DMA+0x32>
 800593a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	2a01      	cmp	r2, #1
 8005942:	bf14      	ite	ne
 8005944:	2200      	movne	r2, #0
 8005946:	2201      	moveq	r2, #1
 8005948:	e77f      	b.n	800584a <HAL_TIM_OC_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	2d04      	cmp	r5, #4
 800594c:	d009      	beq.n	8005962 <HAL_TIM_OC_Start_DMA+0x14a>
 800594e:	2d08      	cmp	r5, #8
 8005950:	d00b      	beq.n	800596a <HAL_TIM_OC_Start_DMA+0x152>
 8005952:	2d0c      	cmp	r5, #12
 8005954:	d00d      	beq.n	8005972 <HAL_TIM_OC_Start_DMA+0x15a>
 8005956:	2d10      	cmp	r5, #16
 8005958:	d00f      	beq.n	800597a <HAL_TIM_OC_Start_DMA+0x162>
 800595a:	2202      	movs	r2, #2
 800595c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005960:	e781      	b.n	8005866 <HAL_TIM_OC_Start_DMA+0x4e>
 8005962:	2202      	movs	r2, #2
 8005964:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8005968:	e77d      	b.n	8005866 <HAL_TIM_OC_Start_DMA+0x4e>
 800596a:	2202      	movs	r2, #2
 800596c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8005970:	e779      	b.n	8005866 <HAL_TIM_OC_Start_DMA+0x4e>
 8005972:	2202      	movs	r2, #2
 8005974:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8005978:	e775      	b.n	8005866 <HAL_TIM_OC_Start_DMA+0x4e>
 800597a:	2202      	movs	r2, #2
 800597c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005980:	e771      	b.n	8005866 <HAL_TIM_OC_Start_DMA+0x4e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005984:	4951      	ldr	r1, [pc, #324]	; (8005acc <HAL_TIM_OC_Start_DMA+0x2b4>)
 8005986:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800598a:	4951      	ldr	r1, [pc, #324]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x2b8>)
 800598c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800598e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005990:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8005992:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	3234      	adds	r2, #52	; 0x34
 8005998:	4631      	mov	r1, r6
 800599a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800599c:	f7fe f8b2 	bl	8003b04 <HAL_DMA_Start_IT>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 8087 	bne.w	8005ab4 <HAL_TIM_OC_Start_DMA+0x29c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	68d3      	ldr	r3, [r2, #12]
 80059aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ae:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059b0:	2201      	movs	r2, #1
 80059b2:	4629      	mov	r1, r5
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	f7ff ff1f 	bl	80057f8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <HAL_TIM_OC_Start_DMA+0x2c0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_OC_Start_DMA+0x1ba>
 80059c2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_OC_Start_DMA+0x1ba>
 80059ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d103      	bne.n	80059da <HAL_TIM_OC_Start_DMA+0x1c2>
      __HAL_TIM_MOE_ENABLE(htim);
 80059d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <HAL_TIM_OC_Start_DMA+0x2c0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d050      	beq.n	8005a84 <HAL_TIM_OC_Start_DMA+0x26c>
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d04d      	beq.n	8005a84 <HAL_TIM_OC_Start_DMA+0x26c>
 80059e8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d049      	beq.n	8005a84 <HAL_TIM_OC_Start_DMA+0x26c>
      __HAL_TIM_ENABLE(htim);
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e054      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80059fe:	4933      	ldr	r1, [pc, #204]	; (8005acc <HAL_TIM_OC_Start_DMA+0x2b4>)
 8005a00:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a04:	4932      	ldr	r1, [pc, #200]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8005a06:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005a08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a0a:	4932      	ldr	r1, [pc, #200]	; (8005ad4 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8005a0c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	3238      	adds	r2, #56	; 0x38
 8005a12:	4631      	mov	r1, r6
 8005a14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005a16:	f7fe f875 	bl	8003b04 <HAL_DMA_Start_IT>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d14c      	bne.n	8005ab8 <HAL_TIM_OC_Start_DMA+0x2a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	68d3      	ldr	r3, [r2, #12]
 8005a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a26:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005a28:	e7c2      	b.n	80059b0 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a2c:	4927      	ldr	r1, [pc, #156]	; (8005acc <HAL_TIM_OC_Start_DMA+0x2b4>)
 8005a2e:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a32:	4927      	ldr	r1, [pc, #156]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8005a34:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005a36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a38:	4926      	ldr	r1, [pc, #152]	; (8005ad4 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8005a3a:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	323c      	adds	r2, #60	; 0x3c
 8005a40:	4631      	mov	r1, r6
 8005a42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005a44:	f7fe f85e 	bl	8003b04 <HAL_DMA_Start_IT>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d137      	bne.n	8005abc <HAL_TIM_OC_Start_DMA+0x2a4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	68d3      	ldr	r3, [r2, #12]
 8005a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a54:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005a56:	e7ab      	b.n	80059b0 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a5a:	491c      	ldr	r1, [pc, #112]	; (8005acc <HAL_TIM_OC_Start_DMA+0x2b4>)
 8005a5c:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a60:	491b      	ldr	r1, [pc, #108]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x2b8>)
 8005a62:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a66:	491b      	ldr	r1, [pc, #108]	; (8005ad4 <HAL_TIM_OC_Start_DMA+0x2bc>)
 8005a68:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	3240      	adds	r2, #64	; 0x40
 8005a6e:	4631      	mov	r1, r6
 8005a70:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a72:	f7fe f847 	bl	8003b04 <HAL_DMA_Start_IT>
 8005a76:	bb18      	cbnz	r0, 8005ac0 <HAL_TIM_OC_Start_DMA+0x2a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	68d3      	ldr	r3, [r2, #12]
 8005a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a80:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005a82:	e795      	b.n	80059b0 <HAL_TIM_OC_Start_DMA+0x198>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_TIM_OC_Start_DMA+0x2c4>)
 8005a88:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	2a06      	cmp	r2, #6
 8005a8c:	d01a      	beq.n	8005ac4 <HAL_TIM_OC_Start_DMA+0x2ac>
 8005a8e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005a92:	d019      	beq.n	8005ac8 <HAL_TIM_OC_Start_DMA+0x2b0>
        __HAL_TIM_ENABLE(htim);
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e002      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
    return HAL_BUSY;
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
    return HAL_ERROR;
 8005aa4:	2001      	movs	r0, #1
}
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e7fc      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
 8005aac:	2001      	movs	r0, #1
 8005aae:	e7fa      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
  switch (Channel)
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	e7f8      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	e7f6      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005ab8:	2001      	movs	r0, #1
 8005aba:	e7f4      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005abc:	2001      	movs	r0, #1
 8005abe:	e7f2      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
        return HAL_ERROR;
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e7f0      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e7ee      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e7ec      	b.n	8005aa6 <HAL_TIM_OC_Start_DMA+0x28e>
 8005acc:	08005191 	.word	0x08005191
 8005ad0:	08005203 	.word	0x08005203
 8005ad4:	080053df 	.word	0x080053df
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	00010007 	.word	0x00010007

08005ae0 <HAL_TIM_OC_Stop_DMA>:
{
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	460d      	mov	r5, r1
  switch (Channel)
 8005ae6:	290c      	cmp	r1, #12
 8005ae8:	f200 8083 	bhi.w	8005bf2 <HAL_TIM_OC_Stop_DMA+0x112>
 8005aec:	e8df f001 	tbb	[pc, r1]
 8005af0:	81818107 	.word	0x81818107
 8005af4:	81818136 	.word	0x81818136
 8005af8:	8181813f 	.word	0x8181813f
 8005afc:	48          	.byte	0x48
 8005afd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005afe:	6802      	ldr	r2, [r0, #0]
 8005b00:	68d3      	ldr	r3, [r2, #12]
 8005b02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b06:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005b08:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005b0a:	f7fe f85b 	bl	8003bc4 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4629      	mov	r1, r5
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	f7ff fe70 	bl	80057f8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	4a37      	ldr	r2, [pc, #220]	; (8005bf8 <HAL_TIM_OC_Stop_DMA+0x118>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d038      	beq.n	8005b92 <HAL_TIM_OC_Stop_DMA+0xb2>
 8005b20:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d034      	beq.n	8005b92 <HAL_TIM_OC_Stop_DMA+0xb2>
 8005b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d030      	beq.n	8005b92 <HAL_TIM_OC_Stop_DMA+0xb2>
    __HAL_TIM_DISABLE(htim);
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6a19      	ldr	r1, [r3, #32]
 8005b34:	f241 1211 	movw	r2, #4369	; 0x1111
 8005b38:	4211      	tst	r1, r2
 8005b3a:	d108      	bne.n	8005b4e <HAL_TIM_OC_Stop_DMA+0x6e>
 8005b3c:	6a19      	ldr	r1, [r3, #32]
 8005b3e:	f240 4244 	movw	r2, #1092	; 0x444
 8005b42:	4211      	tst	r1, r2
 8005b44:	d103      	bne.n	8005b4e <HAL_TIM_OC_Stop_DMA+0x6e>
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	d12e      	bne.n	8005bb0 <HAL_TIM_OC_Stop_DMA+0xd0>
 8005b52:	2301      	movs	r3, #1
 8005b54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e04b      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b5c:	6802      	ldr	r2, [r0, #0]
 8005b5e:	68d3      	ldr	r3, [r2, #12]
 8005b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b64:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005b68:	f7fe f82c 	bl	8003bc4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8005b6c:	e7cf      	b.n	8005b0e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b6e:	6802      	ldr	r2, [r0, #0]
 8005b70:	68d3      	ldr	r3, [r2, #12]
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b76:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005b7a:	f7fe f823 	bl	8003bc4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8005b7e:	e7c6      	b.n	8005b0e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b80:	6802      	ldr	r2, [r0, #0]
 8005b82:	68d3      	ldr	r3, [r2, #12]
 8005b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b88:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b8a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005b8c:	f7fe f81a 	bl	8003bc4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8005b90:	e7bd      	b.n	8005b0e <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_MOE_DISABLE(htim);
 8005b92:	6a19      	ldr	r1, [r3, #32]
 8005b94:	f241 1211 	movw	r2, #4369	; 0x1111
 8005b98:	4211      	tst	r1, r2
 8005b9a:	d1c9      	bne.n	8005b30 <HAL_TIM_OC_Stop_DMA+0x50>
 8005b9c:	6a19      	ldr	r1, [r3, #32]
 8005b9e:	f240 4244 	movw	r2, #1092	; 0x444
 8005ba2:	4211      	tst	r1, r2
 8005ba4:	d1c4      	bne.n	8005b30 <HAL_TIM_OC_Stop_DMA+0x50>
 8005ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
 8005bae:	e7bf      	b.n	8005b30 <HAL_TIM_OC_Stop_DMA+0x50>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bb0:	2d04      	cmp	r5, #4
 8005bb2:	d00a      	beq.n	8005bca <HAL_TIM_OC_Stop_DMA+0xea>
 8005bb4:	2d08      	cmp	r5, #8
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_TIM_OC_Stop_DMA+0xf4>
 8005bb8:	2d0c      	cmp	r5, #12
 8005bba:	d010      	beq.n	8005bde <HAL_TIM_OC_Stop_DMA+0xfe>
 8005bbc:	2d10      	cmp	r5, #16
 8005bbe:	d013      	beq.n	8005be8 <HAL_TIM_OC_Stop_DMA+0x108>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e014      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e00f      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e00a      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
 8005bde:	2301      	movs	r3, #1
 8005be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005be4:	2000      	movs	r0, #0
 8005be6:	e005      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
 8005be8:	2301      	movs	r3, #1
 8005bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_OC_Stop_DMA+0x114>
  switch (Channel)
 8005bf2:	2001      	movs	r0, #1
}
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00

08005bfc <HAL_TIM_PWM_Start>:
{
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c00:	4608      	mov	r0, r1
 8005c02:	2900      	cmp	r1, #0
 8005c04:	d132      	bne.n	8005c6c <HAL_TIM_PWM_Start+0x70>
 8005c06:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	bf18      	it	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d17f      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x11a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d153      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0xc6>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c20:	2201      	movs	r2, #1
 8005c22:	4601      	mov	r1, r0
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	f7ff fde7 	bl	80057f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	4a3d      	ldr	r2, [pc, #244]	; (8005d24 <HAL_TIM_PWM_Start+0x128>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x46>
 8005c32:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x46>
 8005c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d103      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 8005c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	4a35      	ldr	r2, [pc, #212]	; (8005d24 <HAL_TIM_PWM_Start+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d053      	beq.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d050      	beq.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005c58:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04c      	beq.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
    __HAL_TIM_ENABLE(htim);
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e055      	b.n	8005d18 <HAL_TIM_PWM_Start+0x11c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c6c:	2904      	cmp	r1, #4
 8005c6e:	d00c      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x8e>
 8005c70:	2908      	cmp	r1, #8
 8005c72:	d011      	beq.n	8005c98 <HAL_TIM_PWM_Start+0x9c>
 8005c74:	290c      	cmp	r1, #12
 8005c76:	d016      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c78:	2910      	cmp	r1, #16
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_TIM_PWM_Start+0xb8>
 8005c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	bf18      	it	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	e7c3      	b.n	8005c12 <HAL_TIM_PWM_Start+0x16>
 8005c8a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	bf18      	it	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	e7bc      	b.n	8005c12 <HAL_TIM_PWM_Start+0x16>
 8005c98:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	bf18      	it	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	e7b5      	b.n	8005c12 <HAL_TIM_PWM_Start+0x16>
 8005ca6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	bf18      	it	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	e7ae      	b.n	8005c12 <HAL_TIM_PWM_Start+0x16>
 8005cb4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	e7a7      	b.n	8005c12 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc2:	2804      	cmp	r0, #4
 8005cc4:	d009      	beq.n	8005cda <HAL_TIM_PWM_Start+0xde>
 8005cc6:	2808      	cmp	r0, #8
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0xe6>
 8005cca:	280c      	cmp	r0, #12
 8005ccc:	d00d      	beq.n	8005cea <HAL_TIM_PWM_Start+0xee>
 8005cce:	2810      	cmp	r0, #16
 8005cd0:	d00f      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xf6>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	e7a2      	b.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ce0:	e79e      	b.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005ce8:	e79a      	b.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005cea:	2302      	movs	r3, #2
 8005cec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cf0:	e796      	b.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf8:	e792      	b.n	8005c20 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfa:	6899      	ldr	r1, [r3, #8]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_TIM_PWM_Start+0x12c>)
 8005cfe:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d00:	2a06      	cmp	r2, #6
 8005d02:	d00a      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x11e>
 8005d04:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005d08:	d009      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x122>
      __HAL_TIM_ENABLE(htim);
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d12:	2000      	movs	r0, #0
 8005d14:	e000      	b.n	8005d18 <HAL_TIM_PWM_Start+0x11c>
    return HAL_ERROR;
 8005d16:	2001      	movs	r0, #1
}
 8005d18:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e7fc      	b.n	8005d18 <HAL_TIM_PWM_Start+0x11c>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e7fa      	b.n	8005d18 <HAL_TIM_PWM_Start+0x11c>
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_PWM_Stop>:
{
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d32:	2200      	movs	r2, #0
 8005d34:	6800      	ldr	r0, [r0, #0]
 8005d36:	f7ff fd5f 	bl	80057f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <HAL_TIM_PWM_Stop+0xa8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01c      	beq.n	8005d7c <HAL_TIM_PWM_Stop+0x50>
 8005d42:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_TIM_PWM_Stop+0x50>
 8005d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d014      	beq.n	8005d7c <HAL_TIM_PWM_Stop+0x50>
  __HAL_TIM_DISABLE(htim);
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	6a19      	ldr	r1, [r3, #32]
 8005d56:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d5a:	4211      	tst	r1, r2
 8005d5c:	d108      	bne.n	8005d70 <HAL_TIM_PWM_Stop+0x44>
 8005d5e:	6a19      	ldr	r1, [r3, #32]
 8005d60:	f240 4244 	movw	r2, #1092	; 0x444
 8005d64:	4211      	tst	r1, r2
 8005d66:	d103      	bne.n	8005d70 <HAL_TIM_PWM_Stop+0x44>
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	b99d      	cbnz	r5, 8005d9a <HAL_TIM_PWM_Stop+0x6e>
 8005d72:	2301      	movs	r3, #1
 8005d74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005d78:	2000      	movs	r0, #0
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005d7c:	6a19      	ldr	r1, [r3, #32]
 8005d7e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d82:	4211      	tst	r1, r2
 8005d84:	d1e5      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0x26>
 8005d86:	6a19      	ldr	r1, [r3, #32]
 8005d88:	f240 4244 	movw	r2, #1092	; 0x444
 8005d8c:	4211      	tst	r1, r2
 8005d8e:	d1e0      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0x26>
 8005d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
 8005d98:	e7db      	b.n	8005d52 <HAL_TIM_PWM_Stop+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	2d04      	cmp	r5, #4
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_PWM_Stop+0x86>
 8005d9e:	2d08      	cmp	r5, #8
 8005da0:	d00b      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x8e>
 8005da2:	2d0c      	cmp	r5, #12
 8005da4:	d00d      	beq.n	8005dc2 <HAL_TIM_PWM_Stop+0x96>
 8005da6:	2d10      	cmp	r5, #16
 8005da8:	d00f      	beq.n	8005dca <HAL_TIM_PWM_Stop+0x9e>
 8005daa:	2301      	movs	r3, #1
 8005dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db0:	e7e2      	b.n	8005d78 <HAL_TIM_PWM_Stop+0x4c>
 8005db2:	2301      	movs	r3, #1
 8005db4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005db8:	e7de      	b.n	8005d78 <HAL_TIM_PWM_Stop+0x4c>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005dc0:	e7da      	b.n	8005d78 <HAL_TIM_PWM_Stop+0x4c>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005dc8:	e7d6      	b.n	8005d78 <HAL_TIM_PWM_Stop+0x4c>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dd0:	e7d2      	b.n	8005d78 <HAL_TIM_PWM_Stop+0x4c>
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d02f      	beq.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8005de0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005de2:	2301      	movs	r3, #1
 8005de4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	2302      	movs	r3, #2
 8005dea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dee:	6802      	ldr	r2, [r0, #0]
 8005df0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005df4:	4d13      	ldr	r5, [pc, #76]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005df6:	42aa      	cmp	r2, r5
 8005df8:	d01d      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfe:	680d      	ldr	r5, [r1, #0]
 8005e00:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e02:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e04:	6803      	ldr	r3, [r0, #0]
 8005e06:	4a0f      	ldr	r2, [pc, #60]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d006      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e10:	d003      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8005e12:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d104      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	688a      	ldr	r2, [r1, #8]
 8005e20:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e22:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005e30:	4618      	mov	r0, r3
}
 8005e32:	bc30      	pop	{r4, r5}
 8005e34:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e3a:	684d      	ldr	r5, [r1, #4]
 8005e3c:	432b      	orrs	r3, r5
 8005e3e:	e7dc      	b.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005e40:	2002      	movs	r0, #2
}
 8005e42:	4770      	bx	lr
 8005e44:	40012c00 	.word	0x40012c00

08005e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d03b      	beq.n	8005ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 8005e50:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8005e52:	2301      	movs	r3, #1
 8005e54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e58:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5e:	688a      	ldr	r2, [r1, #8]
 8005e60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e66:	684a      	ldr	r2, [r1, #4]
 8005e68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e6e:	680a      	ldr	r2, [r1, #0]
 8005e70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e76:	690a      	ldr	r2, [r1, #16]
 8005e78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e7e:	694a      	ldr	r2, [r1, #20]
 8005e80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e86:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005e88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e8a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005e8e:	698a      	ldr	r2, [r1, #24]
 8005e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e94:	6802      	ldr	r2, [r0, #0]
 8005e96:	4c0d      	ldr	r4, [pc, #52]	; (8005ecc <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8005e98:	42a2      	cmp	r2, r4
 8005e9a:	d007      	beq.n	8005eac <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e9c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005ea4:	4618      	mov	r0, r3
}
 8005ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eaa:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eb0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005eb2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eba:	69cc      	ldr	r4, [r1, #28]
 8005ebc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ebe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	6a09      	ldr	r1, [r1, #32]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	e7e9      	b.n	8005e9c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8005ec8:	2002      	movs	r0, #2
}
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00

08005ed0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed4:	4770      	bx	lr

08005ed6 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	e852 3f00 	ldrex	r3, [r2]
 8005edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	e842 3100 	strex	r1, r3, [r2]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	d1f6      	bne.n	8005ed6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	f102 0308 	add.w	r3, r2, #8
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	3208      	adds	r2, #8
 8005ef8:	e842 3100 	strex	r1, r3, [r2]
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d1f3      	bne.n	8005ee8 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f00:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d005      	beq.n	8005f12 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	2320      	movs	r3, #32
 8005f08:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f0e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005f10:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	e852 3f00 	ldrex	r3, [r2]
 8005f18:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	e842 3100 	strex	r1, r3, [r2]
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d1f6      	bne.n	8005f12 <UART_EndRxTransfer+0x3c>
 8005f24:	e7ef      	b.n	8005f06 <UART_EndRxTransfer+0x30>

08005f26 <HAL_UART_TxCpltCallback>:
}
 8005f26:	4770      	bx	lr

08005f28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f28:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	e852 3f00 	ldrex	r3, [r2]
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	e842 3100 	strex	r1, r3, [r2]
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d1f6      	bne.n	8005f2a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f44:	f7ff ffef 	bl	8005f26 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f48:	bd08      	pop	{r3, pc}

08005f4a <HAL_UART_ErrorCallback>:
}
 8005f4a:	4770      	bx	lr

08005f4c <UART_DMAAbortOnError>:
{
 8005f4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f4e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f56:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8005f5a:	f7ff fff6 	bl	8005f4a <HAL_UART_ErrorCallback>
}
 8005f5e:	bd08      	pop	{r3, pc}

08005f60 <HAL_UART_AbortReceiveCpltCallback>:
}
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_UART_AbortReceive_IT>:
{
 8005f64:	b510      	push	{r4, lr}
 8005f66:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	e852 3f00 	ldrex	r3, [r2]
 8005f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	e842 3100 	strex	r1, r3, [r2]
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d1f6      	bne.n	8005f68 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	f102 0308 	add.w	r3, r2, #8
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	3208      	adds	r2, #8
 8005f8a:	e842 3100 	strex	r1, r3, [r2]
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	d1f3      	bne.n	8005f7a <HAL_UART_AbortReceive_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d01d      	beq.n	8005fd4 <HAL_UART_AbortReceive_IT+0x70>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fa0:	d036      	beq.n	8006010 <HAL_UART_AbortReceive_IT+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f102 0308 	add.w	r3, r2, #8
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	e842 3100 	strex	r1, r3, [r2]
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d1f3      	bne.n	8005fa2 <HAL_UART_AbortReceive_IT+0x3e>
    if (huart->hdmarx != NULL)
 8005fba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005fbc:	b1a3      	cbz	r3, 8005fe8 <HAL_UART_AbortReceive_IT+0x84>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005fbe:	4a1b      	ldr	r2, [pc, #108]	; (800602c <HAL_UART_AbortReceive_IT+0xc8>)
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005fc4:	f7fd fdfe 	bl	8003bc4 <HAL_DMA_Abort_IT>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d02d      	beq.n	8006028 <HAL_UART_AbortReceive_IT+0xc4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fcc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005fce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fd0:	4798      	blx	r3
 8005fd2:	e029      	b.n	8006028 <HAL_UART_AbortReceive_IT+0xc4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005fd4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	e852 3f00 	ldrex	r3, [r2]
 8005fda:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	e842 3100 	strex	r1, r3, [r2]
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d1f6      	bne.n	8005fd4 <HAL_UART_AbortReceive_IT+0x70>
 8005fe6:	e7d7      	b.n	8005f98 <HAL_UART_AbortReceive_IT+0x34>
      huart->RxXferCount = 0U;
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 8005fee:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	210f      	movs	r1, #15
 8005ff4:	6219      	str	r1, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ff6:	6821      	ldr	r1, [r4, #0]
 8005ff8:	8b0b      	ldrh	r3, [r1, #24]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f043 0308 	orr.w	r3, r3, #8
 8006000:	830b      	strh	r3, [r1, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8006002:	2320      	movs	r3, #32
 8006004:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	6622      	str	r2, [r4, #96]	; 0x60
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff ffa9 	bl	8005f60 <HAL_UART_AbortReceiveCpltCallback>
 800600e:	e00b      	b.n	8006028 <HAL_UART_AbortReceive_IT+0xc4>
    huart->RxXferCount = 0U;
 8006010:	2200      	movs	r2, #0
 8006012:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 8006016:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006018:	210f      	movs	r1, #15
 800601a:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 800601c:	2320      	movs	r3, #32
 800601e:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006020:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff ff9c 	bl	8005f60 <HAL_UART_AbortReceiveCpltCallback>
}
 8006028:	2000      	movs	r0, #0
 800602a:	bd10      	pop	{r4, pc}
 800602c:	08006031 	.word	0x08006031

08006030 <UART_DMARxOnlyAbortCallback>:
{
 8006030:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006032:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006034:	2200      	movs	r2, #0
 8006036:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	210f      	movs	r1, #15
 800603e:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006040:	6801      	ldr	r1, [r0, #0]
 8006042:	8b0b      	ldrh	r3, [r1, #24]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f043 0308 	orr.w	r3, r3, #8
 800604a:	830b      	strh	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	2320      	movs	r3, #32
 800604e:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006052:	f7ff ff85 	bl	8005f60 <HAL_UART_AbortReceiveCpltCallback>
}
 8006056:	bd08      	pop	{r3, pc}

08006058 <HAL_UARTEx_RxEventCallback>:
}
 8006058:	4770      	bx	lr
	...

0800605c <HAL_UART_IRQHandler>:
{
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006060:	6801      	ldr	r1, [r0, #0]
 8006062:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006064:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006066:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006068:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800606c:	401a      	ands	r2, r3
 800606e:	d105      	bne.n	800607c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006070:	f013 0f20 	tst.w	r3, #32
 8006074:	d002      	beq.n	800607c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006076:	f010 0f20 	tst.w	r0, #32
 800607a:	d120      	bne.n	80060be <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 800607c:	b12a      	cbz	r2, 800608a <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800607e:	f015 0201 	ands.w	r2, r5, #1
 8006082:	d122      	bne.n	80060ca <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006084:	4eac      	ldr	r6, [pc, #688]	; (8006338 <HAL_UART_IRQHandler+0x2dc>)
 8006086:	4230      	tst	r0, r6
 8006088:	d11f      	bne.n	80060ca <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800608c:	2a01      	cmp	r2, #1
 800608e:	f000 80ab 	beq.w	80061e8 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006092:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006096:	d003      	beq.n	80060a0 <HAL_UART_IRQHandler+0x44>
 8006098:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800609c:	f040 8139 	bne.w	8006312 <HAL_UART_IRQHandler+0x2b6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060a4:	d003      	beq.n	80060ae <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80060aa:	f040 8139 	bne.w	8006320 <HAL_UART_IRQHandler+0x2c4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060b2:	d003      	beq.n	80060bc <HAL_UART_IRQHandler+0x60>
 80060b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b8:	f040 8139 	bne.w	800632e <HAL_UART_IRQHandler+0x2d2>
}
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80060be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0fb      	beq.n	80060bc <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 80060c4:	4620      	mov	r0, r4
 80060c6:	4798      	blx	r3
      return;
 80060c8:	e7f8      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060ca:	f013 0f01 	tst.w	r3, #1
 80060ce:	d009      	beq.n	80060e4 <HAL_UART_IRQHandler+0x88>
 80060d0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80060d4:	d006      	beq.n	80060e4 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060d6:	2501      	movs	r5, #1
 80060d8:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060da:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80060de:	4329      	orrs	r1, r5
 80060e0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060e4:	f013 0f02 	tst.w	r3, #2
 80060e8:	d009      	beq.n	80060fe <HAL_UART_IRQHandler+0xa2>
 80060ea:	b142      	cbz	r2, 80060fe <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060ec:	6821      	ldr	r1, [r4, #0]
 80060ee:	2502      	movs	r5, #2
 80060f0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80060f6:	f041 0104 	orr.w	r1, r1, #4
 80060fa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fe:	f013 0f04 	tst.w	r3, #4
 8006102:	d009      	beq.n	8006118 <HAL_UART_IRQHandler+0xbc>
 8006104:	b142      	cbz	r2, 8006118 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	2504      	movs	r5, #4
 800610a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006110:	f041 0102 	orr.w	r1, r1, #2
 8006114:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006118:	f013 0f08 	tst.w	r3, #8
 800611c:	d00b      	beq.n	8006136 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800611e:	f010 0f20 	tst.w	r0, #32
 8006122:	d100      	bne.n	8006126 <HAL_UART_IRQHandler+0xca>
 8006124:	b13a      	cbz	r2, 8006136 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	2108      	movs	r1, #8
 800612a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800612c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006130:	430a      	orrs	r2, r1
 8006132:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006136:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800613a:	d00c      	beq.n	8006156 <HAL_UART_IRQHandler+0xfa>
 800613c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006140:	d009      	beq.n	8006156 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006148:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800614a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800614e:	f042 0220 	orr.w	r2, r2, #32
 8006152:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006156:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800615a:	2a00      	cmp	r2, #0
 800615c:	d0ae      	beq.n	80060bc <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800615e:	f013 0f20 	tst.w	r3, #32
 8006162:	d006      	beq.n	8006172 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006164:	f010 0f20 	tst.w	r0, #32
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 800616a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616c:	b10b      	cbz	r3, 8006172 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 800616e:	4620      	mov	r0, r4
 8006170:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006172:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800617e:	d102      	bne.n	8006186 <HAL_UART_IRQHandler+0x12a>
 8006180:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006184:	d029      	beq.n	80061da <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 8006186:	4620      	mov	r0, r4
 8006188:	f7ff fea5 	bl	8005ed6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006194:	d01d      	beq.n	80061d2 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f102 0308 	add.w	r3, r2, #8
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	3208      	adds	r2, #8
 80061a6:	e842 3100 	strex	r1, r3, [r2]
 80061aa:	2900      	cmp	r1, #0
 80061ac:	d1f3      	bne.n	8006196 <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 80061ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80061b0:	b15b      	cbz	r3, 80061ca <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b2:	4a62      	ldr	r2, [pc, #392]	; (800633c <HAL_UART_IRQHandler+0x2e0>)
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80061b8:	f7fd fd04 	bl	8003bc4 <HAL_DMA_Abort_IT>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f43f af7d 	beq.w	80060bc <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80061c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80061c6:	4798      	blx	r3
 80061c8:	e778      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 80061ca:	4620      	mov	r0, r4
 80061cc:	f7ff febd 	bl	8005f4a <HAL_UART_ErrorCallback>
 80061d0:	e774      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 80061d2:	4620      	mov	r0, r4
 80061d4:	f7ff feb9 	bl	8005f4a <HAL_UART_ErrorCallback>
 80061d8:	e770      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 80061da:	4620      	mov	r0, r4
 80061dc:	f7ff feb5 	bl	8005f4a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 80061e6:	e769      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061e8:	f013 0f10 	tst.w	r3, #16
 80061ec:	f43f af51 	beq.w	8006092 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061f0:	f010 0f10 	tst.w	r0, #16
 80061f4:	f43f af4d 	beq.w	8006092 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f8:	2310      	movs	r3, #16
 80061fa:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006204:	d04e      	beq.n	80062a4 <HAL_UART_IRQHandler+0x248>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006206:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800620e:	2b00      	cmp	r3, #0
 8006210:	f43f af54 	beq.w	80060bc <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006214:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006218:	4299      	cmp	r1, r3
 800621a:	f67f af4f 	bls.w	80060bc <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 800621e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f013 0f20 	tst.w	r3, #32
 800622a:	d130      	bne.n	800628e <HAL_UART_IRQHandler+0x232>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800622c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	e852 3f00 	ldrex	r3, [r2]
 8006232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	e842 3100 	strex	r1, r3, [r2]
 800623a:	2900      	cmp	r1, #0
 800623c:	d1f6      	bne.n	800622c <HAL_UART_IRQHandler+0x1d0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	f102 0308 	add.w	r3, r2, #8
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	3208      	adds	r2, #8
 800624e:	e842 3100 	strex	r1, r3, [r2]
 8006252:	2900      	cmp	r1, #0
 8006254:	d1f3      	bne.n	800623e <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	f102 0308 	add.w	r3, r2, #8
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	3208      	adds	r2, #8
 8006266:	e842 3100 	strex	r1, r3, [r2]
 800626a:	2900      	cmp	r1, #0
 800626c:	d1f3      	bne.n	8006256 <HAL_UART_IRQHandler+0x1fa>
          huart->RxState = HAL_UART_STATE_READY;
 800626e:	2320      	movs	r3, #32
 8006270:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	2300      	movs	r3, #0
 8006274:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006276:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	e852 3f00 	ldrex	r3, [r2]
 800627c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	e842 3100 	strex	r1, r3, [r2]
 8006284:	2900      	cmp	r1, #0
 8006286:	d1f6      	bne.n	8006276 <HAL_UART_IRQHandler+0x21a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006288:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800628a:	f7fd fc76 	bl	8003b7a <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006292:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006296:	b29b      	uxth	r3, r3
 8006298:	1ac9      	subs	r1, r1, r3
 800629a:	b289      	uxth	r1, r1
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff fedb 	bl	8006058 <HAL_UARTEx_RxEventCallback>
      return;
 80062a2:	e70b      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062a4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80062a8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	1ac9      	subs	r1, r1, r3
 80062b0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80062b2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f43f aeff 	beq.w	80060bc <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 80062be:	2900      	cmp	r1, #0
 80062c0:	f43f aefc 	beq.w	80060bc <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	e852 3f00 	ldrex	r3, [r2]
 80062ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	e842 3000 	strex	r0, r3, [r2]
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d1f6      	bne.n	80062c4 <HAL_UART_IRQHandler+0x268>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	f102 0308 	add.w	r3, r2, #8
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	3208      	adds	r2, #8
 80062e6:	e842 3000 	strex	r0, r3, [r2]
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1f3      	bne.n	80062d6 <HAL_UART_IRQHandler+0x27a>
        huart->RxState = HAL_UART_STATE_READY;
 80062ee:	2320      	movs	r3, #32
 80062f0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	2300      	movs	r3, #0
 80062f4:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80062f6:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	e852 3f00 	ldrex	r3, [r2]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	e842 3000 	strex	r0, r3, [r2]
 8006306:	2800      	cmp	r0, #0
 8006308:	d1f6      	bne.n	80062f8 <HAL_UART_IRQHandler+0x29c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff fea4 	bl	8006058 <HAL_UARTEx_RxEventCallback>
      return;
 8006310:	e6d4      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006312:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006316:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fc4f 	bl	8006bbc <HAL_UARTEx_WakeupCallback>
    return;
 800631e:	e6cd      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 8006320:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006322:	2b00      	cmp	r3, #0
 8006324:	f43f aeca 	beq.w	80060bc <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 8006328:	4620      	mov	r0, r4
 800632a:	4798      	blx	r3
    return;
 800632c:	e6c6      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff fdfa 	bl	8005f28 <UART_EndTransmit_IT>
    return;
 8006334:	e6c2      	b.n	80060bc <HAL_UART_IRQHandler+0x60>
 8006336:	bf00      	nop
 8006338:	04000120 	.word	0x04000120
 800633c:	08005f4d 	.word	0x08005f4d

08006340 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006340:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006342:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006346:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006348:	2a22      	cmp	r2, #34	; 0x22
 800634a:	d006      	beq.n	800635a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800634c:	6802      	ldr	r2, [r0, #0]
 800634e:	8b13      	ldrh	r3, [r2, #24]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f043 0308 	orr.w	r3, r3, #8
 8006356:	8313      	strh	r3, [r2, #24]
  }
}
 8006358:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800635a:	6802      	ldr	r2, [r0, #0]
 800635c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800635e:	b2db      	uxtb	r3, r3
 8006360:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006362:	400b      	ands	r3, r1
 8006364:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006366:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006368:	3301      	adds	r3, #1
 800636a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800636c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29b      	uxth	r3, r3
 8006376:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800637a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e9      	bne.n	8006358 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006384:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	e852 3f00 	ldrex	r3, [r2]
 800638a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	e842 3100 	strex	r1, r3, [r2]
 8006392:	2900      	cmp	r1, #0
 8006394:	d1f6      	bne.n	8006384 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	f102 0308 	add.w	r3, r2, #8
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	3208      	adds	r2, #8
 80063a6:	e842 3100 	strex	r1, r3, [r2]
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d1f3      	bne.n	8006396 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80063ae:	2320      	movs	r3, #32
 80063b0:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d116      	bne.n	80063ea <UART_RxISR_8BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	2300      	movs	r3, #0
 80063be:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	e852 3f00 	ldrex	r3, [r2]
 80063c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	e842 3100 	strex	r1, r3, [r2]
 80063ce:	2900      	cmp	r1, #0
 80063d0:	d1f6      	bne.n	80063c0 <UART_RxISR_8BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d2:	6803      	ldr	r3, [r0, #0]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	f012 0f10 	tst.w	r2, #16
 80063da:	d001      	beq.n	80063e0 <UART_RxISR_8BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063dc:	2210      	movs	r2, #16
 80063de:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80063e4:	f7ff fe38 	bl	8006058 <HAL_UARTEx_RxEventCallback>
 80063e8:	e7b6      	b.n	8006358 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80063ea:	f7fb fc6d 	bl	8001cc8 <HAL_UART_RxCpltCallback>
 80063ee:	e7b3      	b.n	8006358 <UART_RxISR_8BIT+0x18>

080063f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063f0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063f2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80063f8:	2a22      	cmp	r2, #34	; 0x22
 80063fa:	d006      	beq.n	800640a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063fc:	6802      	ldr	r2, [r0, #0]
 80063fe:	8b13      	ldrh	r3, [r2, #24]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f043 0308 	orr.w	r3, r3, #8
 8006406:	8313      	strh	r3, [r2, #24]
  }
}
 8006408:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800640a:	6802      	ldr	r2, [r0, #0]
 800640c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800640e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8006410:	400b      	ands	r3, r1
 8006412:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8006414:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006416:	3302      	adds	r3, #2
 8006418:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800641a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29b      	uxth	r3, r3
 8006424:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006428:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ea      	bne.n	8006408 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006432:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	e852 3f00 	ldrex	r3, [r2]
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	e842 3100 	strex	r1, r3, [r2]
 8006440:	2900      	cmp	r1, #0
 8006442:	d1f6      	bne.n	8006432 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	f102 0308 	add.w	r3, r2, #8
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	3208      	adds	r2, #8
 8006454:	e842 3100 	strex	r1, r3, [r2]
 8006458:	2900      	cmp	r1, #0
 800645a:	d1f3      	bne.n	8006444 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800645c:	2320      	movs	r3, #32
 800645e:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006466:	2b01      	cmp	r3, #1
 8006468:	d116      	bne.n	8006498 <UART_RxISR_16BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	2300      	movs	r3, #0
 800646c:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	e852 3f00 	ldrex	r3, [r2]
 8006474:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	e842 3100 	strex	r1, r3, [r2]
 800647c:	2900      	cmp	r1, #0
 800647e:	d1f6      	bne.n	800646e <UART_RxISR_16BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006480:	6803      	ldr	r3, [r0, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	f012 0f10 	tst.w	r2, #16
 8006488:	d001      	beq.n	800648e <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800648a:	2210      	movs	r2, #16
 800648c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800648e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8006492:	f7ff fde1 	bl	8006058 <HAL_UARTEx_RxEventCallback>
 8006496:	e7b7      	b.n	8006408 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006498:	f7fb fc16 	bl	8001cc8 <HAL_UART_RxCpltCallback>
 800649c:	e7b4      	b.n	8006408 <UART_RxISR_16BIT+0x18>
	...

080064a0 <UART_SetConfig>:
{
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80064a4:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a6:	6883      	ldr	r3, [r0, #8]
 80064a8:	6902      	ldr	r2, [r0, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	6942      	ldr	r2, [r0, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	69c2      	ldr	r2, [r0, #28]
 80064b2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b4:	6808      	ldr	r0, [r1, #0]
 80064b6:	4a95      	ldr	r2, [pc, #596]	; (800670c <UART_SetConfig+0x26c>)
 80064b8:	4002      	ands	r2, r0
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	6853      	ldr	r3, [r2, #4]
 80064c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064cc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	4b8f      	ldr	r3, [pc, #572]	; (8006710 <UART_SetConfig+0x270>)
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d001      	beq.n	80064da <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80064d6:	6a23      	ldr	r3, [r4, #32]
 80064d8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064da:	6893      	ldr	r3, [r2, #8]
 80064dc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	4a8b      	ldr	r2, [pc, #556]	; (8006714 <UART_SetConfig+0x274>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d01f      	beq.n	800652c <UART_SetConfig+0x8c>
 80064ec:	4a8a      	ldr	r2, [pc, #552]	; (8006718 <UART_SetConfig+0x278>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d030      	beq.n	8006554 <UART_SetConfig+0xb4>
 80064f2:	4a8a      	ldr	r2, [pc, #552]	; (800671c <UART_SetConfig+0x27c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d046      	beq.n	8006586 <UART_SetConfig+0xe6>
 80064f8:	4a85      	ldr	r2, [pc, #532]	; (8006710 <UART_SetConfig+0x270>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d055      	beq.n	80065aa <UART_SetConfig+0x10a>
 80064fe:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006500:	4983      	ldr	r1, [pc, #524]	; (8006710 <UART_SetConfig+0x270>)
 8006502:	428b      	cmp	r3, r1
 8006504:	d07a      	beq.n	80065fc <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006506:	69e0      	ldr	r0, [r4, #28]
 8006508:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800650c:	f000 80a6 	beq.w	800665c <UART_SetConfig+0x1bc>
    switch (clocksource)
 8006510:	2a08      	cmp	r2, #8
 8006512:	f200 810f 	bhi.w	8006734 <UART_SetConfig+0x294>
 8006516:	e8df f012 	tbh	[pc, r2, lsl #1]
 800651a:	00ce      	.short	0x00ce
 800651c:	00cc00e5 	.word	0x00cc00e5
 8006520:	00e8010d 	.word	0x00e8010d
 8006524:	010d010d 	.word	0x010d010d
 8006528:	00eb010d 	.word	0x00eb010d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800652c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8006530:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006534:	f002 0203 	and.w	r2, r2, #3
 8006538:	2a03      	cmp	r2, #3
 800653a:	d809      	bhi.n	8006550 <UART_SetConfig+0xb0>
 800653c:	e8df f002 	tbb	[pc, r2]
 8006540:	064a0402 	.word	0x064a0402
 8006544:	2201      	movs	r2, #1
 8006546:	e7db      	b.n	8006500 <UART_SetConfig+0x60>
 8006548:	2204      	movs	r2, #4
 800654a:	e7d9      	b.n	8006500 <UART_SetConfig+0x60>
 800654c:	2208      	movs	r2, #8
 800654e:	e7d7      	b.n	8006500 <UART_SetConfig+0x60>
 8006550:	2210      	movs	r2, #16
 8006552:	e7d5      	b.n	8006500 <UART_SetConfig+0x60>
 8006554:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8006558:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800655c:	f002 020c 	and.w	r2, r2, #12
 8006560:	2a0c      	cmp	r2, #12
 8006562:	d80e      	bhi.n	8006582 <UART_SetConfig+0xe2>
 8006564:	e8df f002 	tbb	[pc, r2]
 8006568:	0d0d0d07 	.word	0x0d0d0d07
 800656c:	0d0d0d09 	.word	0x0d0d0d09
 8006570:	0d0d0d38 	.word	0x0d0d0d38
 8006574:	0b          	.byte	0x0b
 8006575:	00          	.byte	0x00
 8006576:	2200      	movs	r2, #0
 8006578:	e7c2      	b.n	8006500 <UART_SetConfig+0x60>
 800657a:	2204      	movs	r2, #4
 800657c:	e7c0      	b.n	8006500 <UART_SetConfig+0x60>
 800657e:	2208      	movs	r2, #8
 8006580:	e7be      	b.n	8006500 <UART_SetConfig+0x60>
 8006582:	2210      	movs	r2, #16
 8006584:	e7bc      	b.n	8006500 <UART_SetConfig+0x60>
 8006586:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800658a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800658e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006592:	2a20      	cmp	r2, #32
 8006594:	d022      	beq.n	80065dc <UART_SetConfig+0x13c>
 8006596:	d804      	bhi.n	80065a2 <UART_SetConfig+0x102>
 8006598:	b312      	cbz	r2, 80065e0 <UART_SetConfig+0x140>
 800659a:	2a10      	cmp	r2, #16
 800659c:	d122      	bne.n	80065e4 <UART_SetConfig+0x144>
 800659e:	2204      	movs	r2, #4
 80065a0:	e7ae      	b.n	8006500 <UART_SetConfig+0x60>
 80065a2:	2a30      	cmp	r2, #48	; 0x30
 80065a4:	d120      	bne.n	80065e8 <UART_SetConfig+0x148>
 80065a6:	2208      	movs	r2, #8
 80065a8:	e7aa      	b.n	8006500 <UART_SetConfig+0x60>
 80065aa:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80065ae:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80065b2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80065b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80065ba:	d017      	beq.n	80065ec <UART_SetConfig+0x14c>
 80065bc:	d805      	bhi.n	80065ca <UART_SetConfig+0x12a>
 80065be:	b1ba      	cbz	r2, 80065f0 <UART_SetConfig+0x150>
 80065c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80065c4:	d116      	bne.n	80065f4 <UART_SetConfig+0x154>
 80065c6:	2204      	movs	r2, #4
 80065c8:	e79a      	b.n	8006500 <UART_SetConfig+0x60>
 80065ca:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80065ce:	d113      	bne.n	80065f8 <UART_SetConfig+0x158>
 80065d0:	2208      	movs	r2, #8
 80065d2:	e795      	b.n	8006500 <UART_SetConfig+0x60>
 80065d4:	2202      	movs	r2, #2
 80065d6:	e793      	b.n	8006500 <UART_SetConfig+0x60>
 80065d8:	2202      	movs	r2, #2
 80065da:	e791      	b.n	8006500 <UART_SetConfig+0x60>
 80065dc:	2202      	movs	r2, #2
 80065de:	e78f      	b.n	8006500 <UART_SetConfig+0x60>
 80065e0:	2200      	movs	r2, #0
 80065e2:	e78d      	b.n	8006500 <UART_SetConfig+0x60>
 80065e4:	2210      	movs	r2, #16
 80065e6:	e78b      	b.n	8006500 <UART_SetConfig+0x60>
 80065e8:	2210      	movs	r2, #16
 80065ea:	e789      	b.n	8006500 <UART_SetConfig+0x60>
 80065ec:	2202      	movs	r2, #2
 80065ee:	e787      	b.n	8006500 <UART_SetConfig+0x60>
 80065f0:	2200      	movs	r2, #0
 80065f2:	e785      	b.n	8006500 <UART_SetConfig+0x60>
 80065f4:	2210      	movs	r2, #16
 80065f6:	e783      	b.n	8006500 <UART_SetConfig+0x60>
 80065f8:	2210      	movs	r2, #16
 80065fa:	e781      	b.n	8006500 <UART_SetConfig+0x60>
    switch (clocksource)
 80065fc:	2a08      	cmp	r2, #8
 80065fe:	d87a      	bhi.n	80066f6 <UART_SetConfig+0x256>
 8006600:	e8df f002 	tbb	[pc, r2]
 8006604:	792a7908 	.word	0x792a7908
 8006608:	79797927 	.word	0x79797927
 800660c:	05          	.byte	0x05
 800660d:	00          	.byte	0x00
 800660e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006612:	e003      	b.n	800661c <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006614:	f7fe fb22 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006618:	2800      	cmp	r0, #0
 800661a:	d06e      	beq.n	80066fa <UART_SetConfig+0x25a>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800661c:	6862      	ldr	r2, [r4, #4]
 800661e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006622:	4283      	cmp	r3, r0
 8006624:	d86b      	bhi.n	80066fe <UART_SetConfig+0x25e>
 8006626:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800662a:	d86a      	bhi.n	8006702 <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800662c:	0e01      	lsrs	r1, r0, #24
 800662e:	0200      	lsls	r0, r0, #8
 8006630:	0853      	lsrs	r3, r2, #1
 8006632:	18c0      	adds	r0, r0, r3
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	f141 0100 	adc.w	r1, r1, #0
 800663c:	f7fa fb24 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006640:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006644:	4b36      	ldr	r3, [pc, #216]	; (8006720 <UART_SetConfig+0x280>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d85d      	bhi.n	8006706 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	60d8      	str	r0, [r3, #12]
 800664e:	2000      	movs	r0, #0
 8006650:	e044      	b.n	80066dc <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006652:	f7fd fe71 	bl	8004338 <HAL_RCC_GetSysClockFreq>
        break;
 8006656:	e7df      	b.n	8006618 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8006658:	4832      	ldr	r0, [pc, #200]	; (8006724 <UART_SetConfig+0x284>)
 800665a:	e7df      	b.n	800661c <UART_SetConfig+0x17c>
    switch (clocksource)
 800665c:	2a08      	cmp	r2, #8
 800665e:	d863      	bhi.n	8006728 <UART_SetConfig+0x288>
 8006660:	e8df f002 	tbb	[pc, r2]
 8006664:	62052107 	.word	0x62052107
 8006668:	62626224 	.word	0x62626224
 800666c:	0b          	.byte	0x0b
 800666d:	00          	.byte	0x00
 800666e:	482d      	ldr	r0, [pc, #180]	; (8006724 <UART_SetConfig+0x284>)
 8006670:	e003      	b.n	800667a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006672:	f7fe faf3 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006676:	2800      	cmp	r0, #0
 8006678:	d058      	beq.n	800672c <UART_SetConfig+0x28c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800667a:	6862      	ldr	r2, [r4, #4]
 800667c:	0853      	lsrs	r3, r2, #1
 800667e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006682:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006686:	f1a0 0210 	sub.w	r2, r0, #16
 800668a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800668e:	429a      	cmp	r2, r3
 8006690:	d84e      	bhi.n	8006730 <UART_SetConfig+0x290>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006692:	b283      	uxth	r3, r0
 8006694:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006698:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800669c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	60d8      	str	r0, [r3, #12]
 80066a2:	2000      	movs	r0, #0
 80066a4:	e01a      	b.n	80066dc <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a6:	f7fe faeb 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
        break;
 80066aa:	e7e4      	b.n	8006676 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetSysClockFreq();
 80066ac:	f7fd fe44 	bl	8004338 <HAL_RCC_GetSysClockFreq>
        break;
 80066b0:	e7e1      	b.n	8006676 <UART_SetConfig+0x1d6>
    switch (clocksource)
 80066b2:	481c      	ldr	r0, [pc, #112]	; (8006724 <UART_SetConfig+0x284>)
 80066b4:	e003      	b.n	80066be <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b6:	f7fe fad1 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d03c      	beq.n	8006738 <UART_SetConfig+0x298>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80066c4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c8:	f1a0 0210 	sub.w	r2, r0, #16
 80066cc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d833      	bhi.n	800673c <UART_SetConfig+0x29c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	b280      	uxth	r0, r0
 80066d8:	60d8      	str	r0, [r3, #12]
 80066da:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80066e0:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80066e2:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe facc 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
        break;
 80066e8:	e7e7      	b.n	80066ba <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 80066ea:	f7fd fe25 	bl	8004338 <HAL_RCC_GetSysClockFreq>
        break;
 80066ee:	e7e4      	b.n	80066ba <UART_SetConfig+0x21a>
        pclk = (uint32_t) LSE_VALUE;
 80066f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066f4:	e7e3      	b.n	80066be <UART_SetConfig+0x21e>
    switch (clocksource)
 80066f6:	2001      	movs	r0, #1
 80066f8:	e7f0      	b.n	80066dc <UART_SetConfig+0x23c>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7ee      	b.n	80066dc <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 80066fe:	2001      	movs	r0, #1
 8006700:	e7ec      	b.n	80066dc <UART_SetConfig+0x23c>
 8006702:	2001      	movs	r0, #1
 8006704:	e7ea      	b.n	80066dc <UART_SetConfig+0x23c>
          ret = HAL_ERROR;
 8006706:	2001      	movs	r0, #1
 8006708:	e7e8      	b.n	80066dc <UART_SetConfig+0x23c>
 800670a:	bf00      	nop
 800670c:	efff69f3 	.word	0xefff69f3
 8006710:	40008000 	.word	0x40008000
 8006714:	40013800 	.word	0x40013800
 8006718:	40004400 	.word	0x40004400
 800671c:	40004800 	.word	0x40004800
 8006720:	000ffcff 	.word	0x000ffcff
 8006724:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8006728:	2001      	movs	r0, #1
 800672a:	e7d7      	b.n	80066dc <UART_SetConfig+0x23c>
 800672c:	2000      	movs	r0, #0
 800672e:	e7d5      	b.n	80066dc <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8006730:	2001      	movs	r0, #1
 8006732:	e7d3      	b.n	80066dc <UART_SetConfig+0x23c>
    switch (clocksource)
 8006734:	2001      	movs	r0, #1
 8006736:	e7d1      	b.n	80066dc <UART_SetConfig+0x23c>
 8006738:	2000      	movs	r0, #0
 800673a:	e7cf      	b.n	80066dc <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 800673c:	2001      	movs	r0, #1
 800673e:	e7cd      	b.n	80066dc <UART_SetConfig+0x23c>

08006740 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006742:	f013 0f01 	tst.w	r3, #1
 8006746:	d006      	beq.n	8006756 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006748:	6802      	ldr	r2, [r0, #0]
 800674a:	6853      	ldr	r3, [r2, #4]
 800674c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006750:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006752:	430b      	orrs	r3, r1
 8006754:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006756:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006758:	f013 0f02 	tst.w	r3, #2
 800675c:	d006      	beq.n	800676c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675e:	6802      	ldr	r2, [r0, #0]
 8006760:	6853      	ldr	r3, [r2, #4]
 8006762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006766:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006768:	430b      	orrs	r3, r1
 800676a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800676e:	f013 0f04 	tst.w	r3, #4
 8006772:	d006      	beq.n	8006782 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006774:	6802      	ldr	r2, [r0, #0]
 8006776:	6853      	ldr	r3, [r2, #4]
 8006778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800677c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800677e:	430b      	orrs	r3, r1
 8006780:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006782:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006784:	f013 0f08 	tst.w	r3, #8
 8006788:	d006      	beq.n	8006798 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678a:	6802      	ldr	r2, [r0, #0]
 800678c:	6853      	ldr	r3, [r2, #4]
 800678e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006792:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006794:	430b      	orrs	r3, r1
 8006796:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800679a:	f013 0f10 	tst.w	r3, #16
 800679e:	d006      	beq.n	80067ae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a0:	6802      	ldr	r2, [r0, #0]
 80067a2:	6893      	ldr	r3, [r2, #8]
 80067a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067b0:	f013 0f20 	tst.w	r3, #32
 80067b4:	d006      	beq.n	80067c4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067b6:	6802      	ldr	r2, [r0, #0]
 80067b8:	6893      	ldr	r3, [r2, #8]
 80067ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067be:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067cc:	6802      	ldr	r2, [r0, #0]
 80067ce:	6853      	ldr	r3, [r2, #4]
 80067d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e0:	d00b      	beq.n	80067fa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067e8:	d006      	beq.n	80067f8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ea:	6802      	ldr	r2, [r0, #0]
 80067ec:	6853      	ldr	r3, [r2, #4]
 80067ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80067f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6053      	str	r3, [r2, #4]
}
 80067f8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067fa:	6802      	ldr	r2, [r0, #0]
 80067fc:	6853      	ldr	r3, [r2, #4]
 80067fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006802:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006804:	430b      	orrs	r3, r1
 8006806:	6053      	str	r3, [r2, #4]
 8006808:	e7eb      	b.n	80067e2 <UART_AdvFeatureConfig+0xa2>

0800680a <UART_WaitOnFlagUntilTimeout>:
{
 800680a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	460f      	mov	r7, r1
 8006812:	4616      	mov	r6, r2
 8006814:	4699      	mov	r9, r3
 8006816:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681a:	682c      	ldr	r4, [r5, #0]
 800681c:	69e4      	ldr	r4, [r4, #28]
 800681e:	ea37 0304 	bics.w	r3, r7, r4
 8006822:	bf0c      	ite	eq
 8006824:	f04f 0c01 	moveq.w	ip, #1
 8006828:	f04f 0c00 	movne.w	ip, #0
 800682c:	45b4      	cmp	ip, r6
 800682e:	d153      	bne.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8006830:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006834:	d0f1      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fc f84d 	bl	80028d4 <HAL_GetTick>
 800683a:	eba0 0009 	sub.w	r0, r0, r9
 800683e:	4540      	cmp	r0, r8
 8006840:	d82d      	bhi.n	800689e <UART_WaitOnFlagUntilTimeout+0x94>
 8006842:	f1b8 0f00 	cmp.w	r8, #0
 8006846:	d02a      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f012 0f04 	tst.w	r2, #4
 8006850:	d0e3      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006858:	d0df      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006860:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	e852 3f00 	ldrex	r3, [r2]
 8006866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	e842 3100 	strex	r1, r3, [r2]
 800686e:	2900      	cmp	r1, #0
 8006870:	d1f6      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	f102 0308 	add.w	r3, r2, #8
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	3208      	adds	r2, #8
 8006882:	e842 3100 	strex	r1, r3, [r2]
 8006886:	2900      	cmp	r1, #0
 8006888:	d1f3      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800688a:	2320      	movs	r3, #32
 800688c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800688e:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006890:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8006894:	2300      	movs	r3, #0
 8006896:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 800689a:	2003      	movs	r0, #3
 800689c:	e01d      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800689e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	e852 3f00 	ldrex	r3, [r2]
 80068a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	e842 3100 	strex	r1, r3, [r2]
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d1f6      	bne.n	800689e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	f102 0308 	add.w	r3, r2, #8
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	3208      	adds	r2, #8
 80068c0:	e842 3100 	strex	r1, r3, [r2]
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d1f3      	bne.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80068c8:	2320      	movs	r3, #32
 80068ca:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068cc:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80068ce:	2300      	movs	r3, #0
 80068d0:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 80068d4:	2003      	movs	r0, #3
 80068d6:	e000      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xd0>
  return HAL_OK;
 80068d8:	2000      	movs	r0, #0
}
 80068da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068de <HAL_UART_Transmit>:
{
 80068de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80068e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d156      	bne.n	800699a <HAL_UART_Transmit+0xbc>
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d055      	beq.n	80069a2 <HAL_UART_Transmit+0xc4>
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d055      	beq.n	80069a6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80068fa:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d053      	beq.n	80069aa <HAL_UART_Transmit+0xcc>
 8006902:	2301      	movs	r3, #1
 8006904:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
 800690a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690e:	2321      	movs	r3, #33	; 0x21
 8006910:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006912:	f7fb ffdf 	bl	80028d4 <HAL_GetTick>
 8006916:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006918:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800691c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006926:	d005      	beq.n	8006934 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8006928:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800692c:	2300      	movs	r3, #0
 800692e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8006932:	e014      	b.n	800695e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006934:	6923      	ldr	r3, [r4, #16]
 8006936:	b113      	cbz	r3, 800693e <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8006938:	f04f 0800 	mov.w	r8, #0
 800693c:	e7f6      	b.n	800692c <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 800693e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006940:	2500      	movs	r5, #0
 8006942:	e7f3      	b.n	800692c <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006944:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006950:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006954:	b292      	uxth	r2, r2
 8006956:	3a01      	subs	r2, #1
 8006958:	b292      	uxth	r2, r2
 800695a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800695e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006962:	b29b      	uxth	r3, r3
 8006964:	b173      	cbz	r3, 8006984 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006966:	9600      	str	r6, [sp, #0]
 8006968:	463b      	mov	r3, r7
 800696a:	2200      	movs	r2, #0
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff ff4b 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8006974:	b9d8      	cbnz	r0, 80069ae <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8006976:	2d00      	cmp	r5, #0
 8006978:	d0e4      	beq.n	8006944 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006982:	e7e5      	b.n	8006950 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006984:	9600      	str	r6, [sp, #0]
 8006986:	463b      	mov	r3, r7
 8006988:	2200      	movs	r2, #0
 800698a:	2140      	movs	r1, #64	; 0x40
 800698c:	4620      	mov	r0, r4
 800698e:	f7ff ff3c 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8006992:	b970      	cbnz	r0, 80069b2 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8006994:	2320      	movs	r3, #32
 8006996:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8006998:	e000      	b.n	800699c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800699a:	2002      	movs	r0, #2
}
 800699c:	b002      	add	sp, #8
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80069a2:	2001      	movs	r0, #1
 80069a4:	e7fa      	b.n	800699c <HAL_UART_Transmit+0xbe>
 80069a6:	2001      	movs	r0, #1
 80069a8:	e7f8      	b.n	800699c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80069aa:	2002      	movs	r0, #2
 80069ac:	e7f6      	b.n	800699c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80069ae:	2003      	movs	r0, #3
 80069b0:	e7f4      	b.n	800699c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80069b2:	2003      	movs	r0, #3
 80069b4:	e7f2      	b.n	800699c <HAL_UART_Transmit+0xbe>

080069b6 <UART_CheckIdleState>:
{
 80069b6:	b530      	push	{r4, r5, lr}
 80069b8:	b083      	sub	sp, #12
 80069ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80069c2:	f7fb ff87 	bl	80028d4 <HAL_GetTick>
 80069c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	f012 0f08 	tst.w	r2, #8
 80069d0:	d10d      	bne.n	80069ee <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f013 0f04 	tst.w	r3, #4
 80069da:	d116      	bne.n	8006a0a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80069dc:	2320      	movs	r3, #32
 80069de:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	2000      	movs	r0, #0
 80069e4:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80069e6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 80069ea:	b003      	add	sp, #12
 80069ec:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	2200      	movs	r2, #0
 80069f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7ff ff04 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d0e5      	beq.n	80069d2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006a06:	2003      	movs	r0, #3
 8006a08:	e7ef      	b.n	80069ea <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462b      	mov	r3, r5
 8006a12:	2200      	movs	r2, #0
 8006a14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f7ff fef6 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d0dc      	beq.n	80069dc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006a22:	2003      	movs	r0, #3
 8006a24:	e7e1      	b.n	80069ea <UART_CheckIdleState+0x34>

08006a26 <HAL_UART_Init>:
  if (huart == NULL)
 8006a26:	b368      	cbz	r0, 8006a84 <HAL_UART_Init+0x5e>
{
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006a2e:	b303      	cbz	r3, 8006a72 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a30:	2324      	movs	r3, #36	; 0x24
 8006a32:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff fd2e 	bl	80064a0 <UART_SetConfig>
 8006a44:	2801      	cmp	r0, #1
 8006a46:	d013      	beq.n	8006a70 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4a:	b9bb      	cbnz	r3, 8006a7c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	6853      	ldr	r3, [r2, #4]
 8006a50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006a54:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	6893      	ldr	r3, [r2, #8]
 8006a5a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006a5e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff ffa3 	bl	80069b6 <UART_CheckIdleState>
}
 8006a70:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006a72:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006a76:	f7fb fd5d 	bl	8002534 <HAL_UART_MspInit>
 8006a7a:	e7d9      	b.n	8006a30 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff fe5f 	bl	8006740 <UART_AdvFeatureConfig>
 8006a82:	e7e3      	b.n	8006a4c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8006a84:	2001      	movs	r0, #1
}
 8006a86:	4770      	bx	lr

08006a88 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 8006a88:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a8a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a8e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8006a96:	6883      	ldr	r3, [r0, #8]
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9c:	d006      	beq.n	8006aac <UART_Start_Receive_IT+0x24>
 8006a9e:	b9a3      	cbnz	r3, 8006aca <UART_Start_Receive_IT+0x42>
 8006aa0:	6903      	ldr	r3, [r0, #16]
 8006aa2:	b973      	cbnz	r3, 8006ac2 <UART_Start_Receive_IT+0x3a>
 8006aa4:	23ff      	movs	r3, #255	; 0xff
 8006aa6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006aaa:	e014      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
 8006aac:	6903      	ldr	r3, [r0, #16]
 8006aae:	b923      	cbnz	r3, 8006aba <UART_Start_Receive_IT+0x32>
 8006ab0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ab4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006ab8:	e00d      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
 8006aba:	23ff      	movs	r3, #255	; 0xff
 8006abc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006ac0:	e009      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
 8006ac2:	237f      	movs	r3, #127	; 0x7f
 8006ac4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006ac8:	e005      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
 8006aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ace:	d029      	beq.n	8006b24 <UART_Start_Receive_IT+0x9c>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006adc:	2322      	movs	r3, #34	; 0x22
 8006ade:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	f102 0308 	add.w	r3, r2, #8
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	3208      	adds	r2, #8
 8006af0:	e842 3100 	strex	r1, r3, [r2]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d1f3      	bne.n	8006ae0 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af8:	6883      	ldr	r3, [r0, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d01b      	beq.n	8006b38 <UART_Start_Receive_IT+0xb0>
    huart->RxISR = UART_RxISR_8BIT;
 8006b00:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <UART_Start_Receive_IT+0xd0>)
 8006b02:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8006b04:	2300      	movs	r3, #0
 8006b06:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0a:	6903      	ldr	r3, [r0, #16]
 8006b0c:	b1d3      	cbz	r3, 8006b44 <UART_Start_Receive_IT+0xbc>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b0e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	e852 3f00 	ldrex	r3, [r2]
 8006b14:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	e842 3100 	strex	r1, r3, [r2]
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d1f6      	bne.n	8006b0e <UART_Start_Receive_IT+0x86>
}
 8006b20:	2000      	movs	r0, #0
 8006b22:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006b24:	6903      	ldr	r3, [r0, #16]
 8006b26:	b91b      	cbnz	r3, 8006b30 <UART_Start_Receive_IT+0xa8>
 8006b28:	237f      	movs	r3, #127	; 0x7f
 8006b2a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b2e:	e7d2      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
 8006b30:	233f      	movs	r3, #63	; 0x3f
 8006b32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b36:	e7ce      	b.n	8006ad6 <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b38:	6903      	ldr	r3, [r0, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e0      	bne.n	8006b00 <UART_Start_Receive_IT+0x78>
    huart->RxISR = UART_RxISR_16BIT;
 8006b3e:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <UART_Start_Receive_IT+0xd4>)
 8006b40:	6643      	str	r3, [r0, #100]	; 0x64
 8006b42:	e7df      	b.n	8006b04 <UART_Start_Receive_IT+0x7c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	e852 3f00 	ldrex	r3, [r2]
 8006b4a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	e842 3100 	strex	r1, r3, [r2]
 8006b52:	2900      	cmp	r1, #0
 8006b54:	d1f6      	bne.n	8006b44 <UART_Start_Receive_IT+0xbc>
 8006b56:	e7e3      	b.n	8006b20 <UART_Start_Receive_IT+0x98>
 8006b58:	08006341 	.word	0x08006341
 8006b5c:	080063f1 	.word	0x080063f1

08006b60 <HAL_UART_Receive_IT>:
{
 8006b60:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b62:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d11e      	bne.n	8006ba6 <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 8006b68:	b1f9      	cbz	r1, 8006baa <HAL_UART_Receive_IT+0x4a>
 8006b6a:	b302      	cbz	r2, 8006bae <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8006b6c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d01e      	beq.n	8006bb2 <HAL_UART_Receive_IT+0x52>
 8006b74:	2301      	movs	r3, #1
 8006b76:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b7e:	6803      	ldr	r3, [r0, #0]
 8006b80:	4c0d      	ldr	r4, [pc, #52]	; (8006bb8 <HAL_UART_Receive_IT+0x58>)
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	d00c      	beq.n	8006ba0 <HAL_UART_Receive_IT+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b8c:	d008      	beq.n	8006ba0 <HAL_UART_Receive_IT+0x40>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b8e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	e854 3f00 	ldrex	r3, [r4]
 8006b94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	e844 3500 	strex	r5, r3, [r4]
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	d1f6      	bne.n	8006b8e <HAL_UART_Receive_IT+0x2e>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ba0:	f7ff ff72 	bl	8006a88 <UART_Start_Receive_IT>
 8006ba4:	e000      	b.n	8006ba8 <HAL_UART_Receive_IT+0x48>
    return HAL_BUSY;
 8006ba6:	2002      	movs	r0, #2
}
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006baa:	2001      	movs	r0, #1
 8006bac:	e7fc      	b.n	8006ba8 <HAL_UART_Receive_IT+0x48>
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7fa      	b.n	8006ba8 <HAL_UART_Receive_IT+0x48>
    __HAL_LOCK(huart);
 8006bb2:	2002      	movs	r0, #2
 8006bb4:	e7f8      	b.n	8006ba8 <HAL_UART_Receive_IT+0x48>
 8006bb6:	bf00      	nop
 8006bb8:	40008000 	.word	0x40008000

08006bbc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bbc:	4770      	bx	lr
	...

08006bc0 <__errno>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	; (8006bc8 <__errno+0x8>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	2000003c 	.word	0x2000003c

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f005 f9bc 	bl	800bf5c <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	0800ca24 	.word	0x0800ca24
 8006c08:	0800ca24 	.word	0x0800ca24
 8006c0c:	0800ca24 	.word	0x0800ca24
 8006c10:	0800ca28 	.word	0x0800ca28

08006c14 <memset>:
 8006c14:	4402      	add	r2, r0
 8006c16:	4603      	mov	r3, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <__cvt>:
 8006c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	ec55 4b10 	vmov	r4, r5, d0
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	460e      	mov	r6, r1
 8006c30:	4619      	mov	r1, r3
 8006c32:	462b      	mov	r3, r5
 8006c34:	bfbb      	ittet	lt
 8006c36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c3a:	461d      	movlt	r5, r3
 8006c3c:	2300      	movge	r3, #0
 8006c3e:	232d      	movlt	r3, #45	; 0x2d
 8006c40:	700b      	strb	r3, [r1, #0]
 8006c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c48:	4691      	mov	r9, r2
 8006c4a:	f023 0820 	bic.w	r8, r3, #32
 8006c4e:	bfbc      	itt	lt
 8006c50:	4622      	movlt	r2, r4
 8006c52:	4614      	movlt	r4, r2
 8006c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c58:	d005      	beq.n	8006c66 <__cvt+0x42>
 8006c5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c5e:	d100      	bne.n	8006c62 <__cvt+0x3e>
 8006c60:	3601      	adds	r6, #1
 8006c62:	2102      	movs	r1, #2
 8006c64:	e000      	b.n	8006c68 <__cvt+0x44>
 8006c66:	2103      	movs	r1, #3
 8006c68:	ab03      	add	r3, sp, #12
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	ab02      	add	r3, sp, #8
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	ec45 4b10 	vmov	d0, r4, r5
 8006c74:	4653      	mov	r3, sl
 8006c76:	4632      	mov	r2, r6
 8006c78:	f001 ffc2 	bl	8008c00 <_dtoa_r>
 8006c7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c80:	4607      	mov	r7, r0
 8006c82:	d102      	bne.n	8006c8a <__cvt+0x66>
 8006c84:	f019 0f01 	tst.w	r9, #1
 8006c88:	d022      	beq.n	8006cd0 <__cvt+0xac>
 8006c8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c8e:	eb07 0906 	add.w	r9, r7, r6
 8006c92:	d110      	bne.n	8006cb6 <__cvt+0x92>
 8006c94:	783b      	ldrb	r3, [r7, #0]
 8006c96:	2b30      	cmp	r3, #48	; 0x30
 8006c98:	d10a      	bne.n	8006cb0 <__cvt+0x8c>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca6:	b918      	cbnz	r0, 8006cb0 <__cvt+0x8c>
 8006ca8:	f1c6 0601 	rsb	r6, r6, #1
 8006cac:	f8ca 6000 	str.w	r6, [sl]
 8006cb0:	f8da 3000 	ldr.w	r3, [sl]
 8006cb4:	4499      	add	r9, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7f9 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc2:	b108      	cbz	r0, 8006cc8 <__cvt+0xa4>
 8006cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cc8:	2230      	movs	r2, #48	; 0x30
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	454b      	cmp	r3, r9
 8006cce:	d307      	bcc.n	8006ce0 <__cvt+0xbc>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd4:	1bdb      	subs	r3, r3, r7
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	b004      	add	sp, #16
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	9103      	str	r1, [sp, #12]
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e7f0      	b.n	8006cca <__cvt+0xa6>

08006ce8 <__exponent>:
 8006ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cea:	4603      	mov	r3, r0
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfb8      	it	lt
 8006cf0:	4249      	neglt	r1, r1
 8006cf2:	f803 2b02 	strb.w	r2, [r3], #2
 8006cf6:	bfb4      	ite	lt
 8006cf8:	222d      	movlt	r2, #45	; 0x2d
 8006cfa:	222b      	movge	r2, #43	; 0x2b
 8006cfc:	2909      	cmp	r1, #9
 8006cfe:	7042      	strb	r2, [r0, #1]
 8006d00:	dd2a      	ble.n	8006d58 <__exponent+0x70>
 8006d02:	f10d 0407 	add.w	r4, sp, #7
 8006d06:	46a4      	mov	ip, r4
 8006d08:	270a      	movs	r7, #10
 8006d0a:	46a6      	mov	lr, r4
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d12:	fb07 1516 	mls	r5, r7, r6, r1
 8006d16:	3530      	adds	r5, #48	; 0x30
 8006d18:	2a63      	cmp	r2, #99	; 0x63
 8006d1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d22:	4631      	mov	r1, r6
 8006d24:	dcf1      	bgt.n	8006d0a <__exponent+0x22>
 8006d26:	3130      	adds	r1, #48	; 0x30
 8006d28:	f1ae 0502 	sub.w	r5, lr, #2
 8006d2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d30:	1c44      	adds	r4, r0, #1
 8006d32:	4629      	mov	r1, r5
 8006d34:	4561      	cmp	r1, ip
 8006d36:	d30a      	bcc.n	8006d4e <__exponent+0x66>
 8006d38:	f10d 0209 	add.w	r2, sp, #9
 8006d3c:	eba2 020e 	sub.w	r2, r2, lr
 8006d40:	4565      	cmp	r5, ip
 8006d42:	bf88      	it	hi
 8006d44:	2200      	movhi	r2, #0
 8006d46:	4413      	add	r3, r2
 8006d48:	1a18      	subs	r0, r3, r0
 8006d4a:	b003      	add	sp, #12
 8006d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d56:	e7ed      	b.n	8006d34 <__exponent+0x4c>
 8006d58:	2330      	movs	r3, #48	; 0x30
 8006d5a:	3130      	adds	r1, #48	; 0x30
 8006d5c:	7083      	strb	r3, [r0, #2]
 8006d5e:	70c1      	strb	r1, [r0, #3]
 8006d60:	1d03      	adds	r3, r0, #4
 8006d62:	e7f1      	b.n	8006d48 <__exponent+0x60>

08006d64 <_printf_float>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	ed2d 8b02 	vpush	{d8}
 8006d6c:	b08d      	sub	sp, #52	; 0x34
 8006d6e:	460c      	mov	r4, r1
 8006d70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d74:	4616      	mov	r6, r2
 8006d76:	461f      	mov	r7, r3
 8006d78:	4605      	mov	r5, r0
 8006d7a:	f003 fa55 	bl	800a228 <_localeconv_r>
 8006d7e:	f8d0 a000 	ldr.w	sl, [r0]
 8006d82:	4650      	mov	r0, sl
 8006d84:	f7f9 fa24 	bl	80001d0 <strlen>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	9305      	str	r3, [sp, #20]
 8006d90:	f8d8 3000 	ldr.w	r3, [r8]
 8006d94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	f103 0208 	add.w	r2, r3, #8
 8006da2:	f8c8 2000 	str.w	r2, [r8]
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006dae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006db2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dbc:	ee08 0a10 	vmov	s16, r0
 8006dc0:	4b9f      	ldr	r3, [pc, #636]	; (8007040 <_printf_float+0x2dc>)
 8006dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	f7f9 feaf 	bl	8000b2c <__aeabi_dcmpun>
 8006dce:	bb88      	cbnz	r0, 8006e34 <_printf_float+0xd0>
 8006dd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd4:	4b9a      	ldr	r3, [pc, #616]	; (8007040 <_printf_float+0x2dc>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	f7f9 fe89 	bl	8000af0 <__aeabi_dcmple>
 8006dde:	bb48      	cbnz	r0, 8006e34 <_printf_float+0xd0>
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	4640      	mov	r0, r8
 8006de6:	4649      	mov	r1, r9
 8006de8:	f7f9 fe78 	bl	8000adc <__aeabi_dcmplt>
 8006dec:	b110      	cbz	r0, 8006df4 <_printf_float+0x90>
 8006dee:	232d      	movs	r3, #45	; 0x2d
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	4b93      	ldr	r3, [pc, #588]	; (8007044 <_printf_float+0x2e0>)
 8006df6:	4894      	ldr	r0, [pc, #592]	; (8007048 <_printf_float+0x2e4>)
 8006df8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006dfc:	bf94      	ite	ls
 8006dfe:	4698      	movls	r8, r3
 8006e00:	4680      	movhi	r8, r0
 8006e02:	2303      	movs	r3, #3
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	9b05      	ldr	r3, [sp, #20]
 8006e08:	f023 0204 	bic.w	r2, r3, #4
 8006e0c:	6022      	str	r2, [r4, #0]
 8006e0e:	f04f 0900 	mov.w	r9, #0
 8006e12:	9700      	str	r7, [sp, #0]
 8006e14:	4633      	mov	r3, r6
 8006e16:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 f9d8 	bl	80071d0 <_printf_common>
 8006e20:	3001      	adds	r0, #1
 8006e22:	f040 8090 	bne.w	8006f46 <_printf_float+0x1e2>
 8006e26:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2a:	b00d      	add	sp, #52	; 0x34
 8006e2c:	ecbd 8b02 	vpop	{d8}
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 fe76 	bl	8000b2c <__aeabi_dcmpun>
 8006e40:	b140      	cbz	r0, 8006e54 <_printf_float+0xf0>
 8006e42:	464b      	mov	r3, r9
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfbc      	itt	lt
 8006e48:	232d      	movlt	r3, #45	; 0x2d
 8006e4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e4e:	487f      	ldr	r0, [pc, #508]	; (800704c <_printf_float+0x2e8>)
 8006e50:	4b7f      	ldr	r3, [pc, #508]	; (8007050 <_printf_float+0x2ec>)
 8006e52:	e7d1      	b.n	8006df8 <_printf_float+0x94>
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e5a:	9206      	str	r2, [sp, #24]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	d13f      	bne.n	8006ee0 <_printf_float+0x17c>
 8006e60:	2306      	movs	r3, #6
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	6861      	ldr	r1, [r4, #4]
 8006e68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	ab0a      	add	r3, sp, #40	; 0x28
 8006e72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e76:	ab09      	add	r3, sp, #36	; 0x24
 8006e78:	ec49 8b10 	vmov	d0, r8, r9
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7ff fecd 	bl	8006c24 <__cvt>
 8006e8a:	9b06      	ldr	r3, [sp, #24]
 8006e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e8e:	2b47      	cmp	r3, #71	; 0x47
 8006e90:	4680      	mov	r8, r0
 8006e92:	d108      	bne.n	8006ea6 <_printf_float+0x142>
 8006e94:	1cc8      	adds	r0, r1, #3
 8006e96:	db02      	blt.n	8006e9e <_printf_float+0x13a>
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	dd41      	ble.n	8006f22 <_printf_float+0x1be>
 8006e9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ea2:	fa5f fb8b 	uxtb.w	fp, fp
 8006ea6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006eaa:	d820      	bhi.n	8006eee <_printf_float+0x18a>
 8006eac:	3901      	subs	r1, #1
 8006eae:	465a      	mov	r2, fp
 8006eb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006eb4:	9109      	str	r1, [sp, #36]	; 0x24
 8006eb6:	f7ff ff17 	bl	8006ce8 <__exponent>
 8006eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ebc:	1813      	adds	r3, r2, r0
 8006ebe:	2a01      	cmp	r2, #1
 8006ec0:	4681      	mov	r9, r0
 8006ec2:	6123      	str	r3, [r4, #16]
 8006ec4:	dc02      	bgt.n	8006ecc <_printf_float+0x168>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	07d2      	lsls	r2, r2, #31
 8006eca:	d501      	bpl.n	8006ed0 <_printf_float+0x16c>
 8006ecc:	3301      	adds	r3, #1
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d09c      	beq.n	8006e12 <_printf_float+0xae>
 8006ed8:	232d      	movs	r3, #45	; 0x2d
 8006eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ede:	e798      	b.n	8006e12 <_printf_float+0xae>
 8006ee0:	9a06      	ldr	r2, [sp, #24]
 8006ee2:	2a47      	cmp	r2, #71	; 0x47
 8006ee4:	d1be      	bne.n	8006e64 <_printf_float+0x100>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1bc      	bne.n	8006e64 <_printf_float+0x100>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e7b9      	b.n	8006e62 <_printf_float+0xfe>
 8006eee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ef2:	d118      	bne.n	8006f26 <_printf_float+0x1c2>
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	dd0b      	ble.n	8006f12 <_printf_float+0x1ae>
 8006efa:	6121      	str	r1, [r4, #16]
 8006efc:	b913      	cbnz	r3, 8006f04 <_printf_float+0x1a0>
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	07d0      	lsls	r0, r2, #31
 8006f02:	d502      	bpl.n	8006f0a <_printf_float+0x1a6>
 8006f04:	3301      	adds	r3, #1
 8006f06:	440b      	add	r3, r1
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	e7de      	b.n	8006ed0 <_printf_float+0x16c>
 8006f12:	b913      	cbnz	r3, 8006f1a <_printf_float+0x1b6>
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	07d2      	lsls	r2, r2, #31
 8006f18:	d501      	bpl.n	8006f1e <_printf_float+0x1ba>
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	e7f4      	b.n	8006f08 <_printf_float+0x1a4>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7f2      	b.n	8006f08 <_printf_float+0x1a4>
 8006f22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	db05      	blt.n	8006f38 <_printf_float+0x1d4>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	6121      	str	r1, [r4, #16]
 8006f30:	07d8      	lsls	r0, r3, #31
 8006f32:	d5ea      	bpl.n	8006f0a <_printf_float+0x1a6>
 8006f34:	1c4b      	adds	r3, r1, #1
 8006f36:	e7e7      	b.n	8006f08 <_printf_float+0x1a4>
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	bfd4      	ite	le
 8006f3c:	f1c1 0202 	rsble	r2, r1, #2
 8006f40:	2201      	movgt	r2, #1
 8006f42:	4413      	add	r3, r2
 8006f44:	e7e0      	b.n	8006f08 <_printf_float+0x1a4>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	055a      	lsls	r2, r3, #21
 8006f4a:	d407      	bmi.n	8006f5c <_printf_float+0x1f8>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	d12c      	bne.n	8006fb4 <_printf_float+0x250>
 8006f5a:	e764      	b.n	8006e26 <_printf_float+0xc2>
 8006f5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f60:	f240 80e0 	bls.w	8007124 <_printf_float+0x3c0>
 8006f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f7f9 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d034      	beq.n	8006fde <_printf_float+0x27a>
 8006f74:	4a37      	ldr	r2, [pc, #220]	; (8007054 <_printf_float+0x2f0>)
 8006f76:	2301      	movs	r3, #1
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	47b8      	blx	r7
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f43f af51 	beq.w	8006e26 <_printf_float+0xc2>
 8006f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	db02      	blt.n	8006f92 <_printf_float+0x22e>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	07d8      	lsls	r0, r3, #31
 8006f90:	d510      	bpl.n	8006fb4 <_printf_float+0x250>
 8006f92:	ee18 3a10 	vmov	r3, s16
 8006f96:	4652      	mov	r2, sl
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f af41 	beq.w	8006e26 <_printf_float+0xc2>
 8006fa4:	f04f 0800 	mov.w	r8, #0
 8006fa8:	f104 091a 	add.w	r9, r4, #26
 8006fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	dc09      	bgt.n	8006fc8 <_printf_float+0x264>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	079b      	lsls	r3, r3, #30
 8006fb8:	f100 8105 	bmi.w	80071c6 <_printf_float+0x462>
 8006fbc:	68e0      	ldr	r0, [r4, #12]
 8006fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc0:	4298      	cmp	r0, r3
 8006fc2:	bfb8      	it	lt
 8006fc4:	4618      	movlt	r0, r3
 8006fc6:	e730      	b.n	8006e2a <_printf_float+0xc6>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	464a      	mov	r2, r9
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f af27 	beq.w	8006e26 <_printf_float+0xc2>
 8006fd8:	f108 0801 	add.w	r8, r8, #1
 8006fdc:	e7e6      	b.n	8006fac <_printf_float+0x248>
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dc39      	bgt.n	8007058 <_printf_float+0x2f4>
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <_printf_float+0x2f0>)
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	f43f af19 	beq.w	8006e26 <_printf_float+0xc2>
 8006ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d102      	bne.n	8007002 <_printf_float+0x29e>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07d9      	lsls	r1, r3, #31
 8007000:	d5d8      	bpl.n	8006fb4 <_printf_float+0x250>
 8007002:	ee18 3a10 	vmov	r3, s16
 8007006:	4652      	mov	r2, sl
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	f43f af09 	beq.w	8006e26 <_printf_float+0xc2>
 8007014:	f04f 0900 	mov.w	r9, #0
 8007018:	f104 0a1a 	add.w	sl, r4, #26
 800701c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701e:	425b      	negs	r3, r3
 8007020:	454b      	cmp	r3, r9
 8007022:	dc01      	bgt.n	8007028 <_printf_float+0x2c4>
 8007024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007026:	e792      	b.n	8006f4e <_printf_float+0x1ea>
 8007028:	2301      	movs	r3, #1
 800702a:	4652      	mov	r2, sl
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f aef7 	beq.w	8006e26 <_printf_float+0xc2>
 8007038:	f109 0901 	add.w	r9, r9, #1
 800703c:	e7ee      	b.n	800701c <_printf_float+0x2b8>
 800703e:	bf00      	nop
 8007040:	7fefffff 	.word	0x7fefffff
 8007044:	0800c55c 	.word	0x0800c55c
 8007048:	0800c560 	.word	0x0800c560
 800704c:	0800c568 	.word	0x0800c568
 8007050:	0800c564 	.word	0x0800c564
 8007054:	0800c9c9 	.word	0x0800c9c9
 8007058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800705c:	429a      	cmp	r2, r3
 800705e:	bfa8      	it	ge
 8007060:	461a      	movge	r2, r3
 8007062:	2a00      	cmp	r2, #0
 8007064:	4691      	mov	r9, r2
 8007066:	dc37      	bgt.n	80070d8 <_printf_float+0x374>
 8007068:	f04f 0b00 	mov.w	fp, #0
 800706c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007070:	f104 021a 	add.w	r2, r4, #26
 8007074:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007076:	9305      	str	r3, [sp, #20]
 8007078:	eba3 0309 	sub.w	r3, r3, r9
 800707c:	455b      	cmp	r3, fp
 800707e:	dc33      	bgt.n	80070e8 <_printf_float+0x384>
 8007080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007084:	429a      	cmp	r2, r3
 8007086:	db3b      	blt.n	8007100 <_printf_float+0x39c>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	07da      	lsls	r2, r3, #31
 800708c:	d438      	bmi.n	8007100 <_printf_float+0x39c>
 800708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007090:	9a05      	ldr	r2, [sp, #20]
 8007092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007094:	1a9a      	subs	r2, r3, r2
 8007096:	eba3 0901 	sub.w	r9, r3, r1
 800709a:	4591      	cmp	r9, r2
 800709c:	bfa8      	it	ge
 800709e:	4691      	movge	r9, r2
 80070a0:	f1b9 0f00 	cmp.w	r9, #0
 80070a4:	dc35      	bgt.n	8007112 <_printf_float+0x3ae>
 80070a6:	f04f 0800 	mov.w	r8, #0
 80070aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ae:	f104 0a1a 	add.w	sl, r4, #26
 80070b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	eba3 0309 	sub.w	r3, r3, r9
 80070bc:	4543      	cmp	r3, r8
 80070be:	f77f af79 	ble.w	8006fb4 <_printf_float+0x250>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4652      	mov	r2, sl
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f aeaa 	beq.w	8006e26 <_printf_float+0xc2>
 80070d2:	f108 0801 	add.w	r8, r8, #1
 80070d6:	e7ec      	b.n	80070b2 <_printf_float+0x34e>
 80070d8:	4613      	mov	r3, r2
 80070da:	4631      	mov	r1, r6
 80070dc:	4642      	mov	r2, r8
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	d1c0      	bne.n	8007068 <_printf_float+0x304>
 80070e6:	e69e      	b.n	8006e26 <_printf_float+0xc2>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	9205      	str	r2, [sp, #20]
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f ae97 	beq.w	8006e26 <_printf_float+0xc2>
 80070f8:	9a05      	ldr	r2, [sp, #20]
 80070fa:	f10b 0b01 	add.w	fp, fp, #1
 80070fe:	e7b9      	b.n	8007074 <_printf_float+0x310>
 8007100:	ee18 3a10 	vmov	r3, s16
 8007104:	4652      	mov	r2, sl
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	d1be      	bne.n	800708e <_printf_float+0x32a>
 8007110:	e689      	b.n	8006e26 <_printf_float+0xc2>
 8007112:	9a05      	ldr	r2, [sp, #20]
 8007114:	464b      	mov	r3, r9
 8007116:	4442      	add	r2, r8
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	d1c1      	bne.n	80070a6 <_printf_float+0x342>
 8007122:	e680      	b.n	8006e26 <_printf_float+0xc2>
 8007124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007126:	2a01      	cmp	r2, #1
 8007128:	dc01      	bgt.n	800712e <_printf_float+0x3ca>
 800712a:	07db      	lsls	r3, r3, #31
 800712c:	d538      	bpl.n	80071a0 <_printf_float+0x43c>
 800712e:	2301      	movs	r3, #1
 8007130:	4642      	mov	r2, r8
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f ae74 	beq.w	8006e26 <_printf_float+0xc2>
 800713e:	ee18 3a10 	vmov	r3, s16
 8007142:	4652      	mov	r2, sl
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f ae6b 	beq.w	8006e26 <_printf_float+0xc2>
 8007150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	f7f9 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800715c:	b9d8      	cbnz	r0, 8007196 <_printf_float+0x432>
 800715e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007160:	f108 0201 	add.w	r2, r8, #1
 8007164:	3b01      	subs	r3, #1
 8007166:	4631      	mov	r1, r6
 8007168:	4628      	mov	r0, r5
 800716a:	47b8      	blx	r7
 800716c:	3001      	adds	r0, #1
 800716e:	d10e      	bne.n	800718e <_printf_float+0x42a>
 8007170:	e659      	b.n	8006e26 <_printf_float+0xc2>
 8007172:	2301      	movs	r3, #1
 8007174:	4652      	mov	r2, sl
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae52 	beq.w	8006e26 <_printf_float+0xc2>
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	4543      	cmp	r3, r8
 800718c:	dcf1      	bgt.n	8007172 <_printf_float+0x40e>
 800718e:	464b      	mov	r3, r9
 8007190:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007194:	e6dc      	b.n	8006f50 <_printf_float+0x1ec>
 8007196:	f04f 0800 	mov.w	r8, #0
 800719a:	f104 0a1a 	add.w	sl, r4, #26
 800719e:	e7f2      	b.n	8007186 <_printf_float+0x422>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4642      	mov	r2, r8
 80071a4:	e7df      	b.n	8007166 <_printf_float+0x402>
 80071a6:	2301      	movs	r3, #1
 80071a8:	464a      	mov	r2, r9
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f ae38 	beq.w	8006e26 <_printf_float+0xc2>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071be:	1a5b      	subs	r3, r3, r1
 80071c0:	4543      	cmp	r3, r8
 80071c2:	dcf0      	bgt.n	80071a6 <_printf_float+0x442>
 80071c4:	e6fa      	b.n	8006fbc <_printf_float+0x258>
 80071c6:	f04f 0800 	mov.w	r8, #0
 80071ca:	f104 0919 	add.w	r9, r4, #25
 80071ce:	e7f4      	b.n	80071ba <_printf_float+0x456>

080071d0 <_printf_common>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	4616      	mov	r6, r2
 80071d6:	4699      	mov	r9, r3
 80071d8:	688a      	ldr	r2, [r1, #8]
 80071da:	690b      	ldr	r3, [r1, #16]
 80071dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071e0:	4293      	cmp	r3, r2
 80071e2:	bfb8      	it	lt
 80071e4:	4613      	movlt	r3, r2
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071ec:	4607      	mov	r7, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	b10a      	cbz	r2, 80071f6 <_printf_common+0x26>
 80071f2:	3301      	adds	r3, #1
 80071f4:	6033      	str	r3, [r6, #0]
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	0699      	lsls	r1, r3, #26
 80071fa:	bf42      	ittt	mi
 80071fc:	6833      	ldrmi	r3, [r6, #0]
 80071fe:	3302      	addmi	r3, #2
 8007200:	6033      	strmi	r3, [r6, #0]
 8007202:	6825      	ldr	r5, [r4, #0]
 8007204:	f015 0506 	ands.w	r5, r5, #6
 8007208:	d106      	bne.n	8007218 <_printf_common+0x48>
 800720a:	f104 0a19 	add.w	sl, r4, #25
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	6832      	ldr	r2, [r6, #0]
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	42ab      	cmp	r3, r5
 8007216:	dc26      	bgt.n	8007266 <_printf_common+0x96>
 8007218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800721c:	1e13      	subs	r3, r2, #0
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	bf18      	it	ne
 8007222:	2301      	movne	r3, #1
 8007224:	0692      	lsls	r2, r2, #26
 8007226:	d42b      	bmi.n	8007280 <_printf_common+0xb0>
 8007228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800722c:	4649      	mov	r1, r9
 800722e:	4638      	mov	r0, r7
 8007230:	47c0      	blx	r8
 8007232:	3001      	adds	r0, #1
 8007234:	d01e      	beq.n	8007274 <_printf_common+0xa4>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	68e5      	ldr	r5, [r4, #12]
 800723a:	6832      	ldr	r2, [r6, #0]
 800723c:	f003 0306 	and.w	r3, r3, #6
 8007240:	2b04      	cmp	r3, #4
 8007242:	bf08      	it	eq
 8007244:	1aad      	subeq	r5, r5, r2
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	bf0c      	ite	eq
 800724c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007250:	2500      	movne	r5, #0
 8007252:	4293      	cmp	r3, r2
 8007254:	bfc4      	itt	gt
 8007256:	1a9b      	subgt	r3, r3, r2
 8007258:	18ed      	addgt	r5, r5, r3
 800725a:	2600      	movs	r6, #0
 800725c:	341a      	adds	r4, #26
 800725e:	42b5      	cmp	r5, r6
 8007260:	d11a      	bne.n	8007298 <_printf_common+0xc8>
 8007262:	2000      	movs	r0, #0
 8007264:	e008      	b.n	8007278 <_printf_common+0xa8>
 8007266:	2301      	movs	r3, #1
 8007268:	4652      	mov	r2, sl
 800726a:	4649      	mov	r1, r9
 800726c:	4638      	mov	r0, r7
 800726e:	47c0      	blx	r8
 8007270:	3001      	adds	r0, #1
 8007272:	d103      	bne.n	800727c <_printf_common+0xac>
 8007274:	f04f 30ff 	mov.w	r0, #4294967295
 8007278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727c:	3501      	adds	r5, #1
 800727e:	e7c6      	b.n	800720e <_printf_common+0x3e>
 8007280:	18e1      	adds	r1, r4, r3
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	2030      	movs	r0, #48	; 0x30
 8007286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800728a:	4422      	add	r2, r4
 800728c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007294:	3302      	adds	r3, #2
 8007296:	e7c7      	b.n	8007228 <_printf_common+0x58>
 8007298:	2301      	movs	r3, #1
 800729a:	4622      	mov	r2, r4
 800729c:	4649      	mov	r1, r9
 800729e:	4638      	mov	r0, r7
 80072a0:	47c0      	blx	r8
 80072a2:	3001      	adds	r0, #1
 80072a4:	d0e6      	beq.n	8007274 <_printf_common+0xa4>
 80072a6:	3601      	adds	r6, #1
 80072a8:	e7d9      	b.n	800725e <_printf_common+0x8e>
	...

080072ac <_printf_i>:
 80072ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	7e0f      	ldrb	r7, [r1, #24]
 80072b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072b4:	2f78      	cmp	r7, #120	; 0x78
 80072b6:	4691      	mov	r9, r2
 80072b8:	4680      	mov	r8, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	469a      	mov	sl, r3
 80072be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072c2:	d807      	bhi.n	80072d4 <_printf_i+0x28>
 80072c4:	2f62      	cmp	r7, #98	; 0x62
 80072c6:	d80a      	bhi.n	80072de <_printf_i+0x32>
 80072c8:	2f00      	cmp	r7, #0
 80072ca:	f000 80d8 	beq.w	800747e <_printf_i+0x1d2>
 80072ce:	2f58      	cmp	r7, #88	; 0x58
 80072d0:	f000 80a3 	beq.w	800741a <_printf_i+0x16e>
 80072d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072dc:	e03a      	b.n	8007354 <_printf_i+0xa8>
 80072de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072e2:	2b15      	cmp	r3, #21
 80072e4:	d8f6      	bhi.n	80072d4 <_printf_i+0x28>
 80072e6:	a101      	add	r1, pc, #4	; (adr r1, 80072ec <_printf_i+0x40>)
 80072e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007359 	.word	0x08007359
 80072f4:	080072d5 	.word	0x080072d5
 80072f8:	080072d5 	.word	0x080072d5
 80072fc:	080072d5 	.word	0x080072d5
 8007300:	080072d5 	.word	0x080072d5
 8007304:	08007359 	.word	0x08007359
 8007308:	080072d5 	.word	0x080072d5
 800730c:	080072d5 	.word	0x080072d5
 8007310:	080072d5 	.word	0x080072d5
 8007314:	080072d5 	.word	0x080072d5
 8007318:	08007465 	.word	0x08007465
 800731c:	08007389 	.word	0x08007389
 8007320:	08007447 	.word	0x08007447
 8007324:	080072d5 	.word	0x080072d5
 8007328:	080072d5 	.word	0x080072d5
 800732c:	08007487 	.word	0x08007487
 8007330:	080072d5 	.word	0x080072d5
 8007334:	08007389 	.word	0x08007389
 8007338:	080072d5 	.word	0x080072d5
 800733c:	080072d5 	.word	0x080072d5
 8007340:	0800744f 	.word	0x0800744f
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	1d1a      	adds	r2, r3, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	602a      	str	r2, [r5, #0]
 800734c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007354:	2301      	movs	r3, #1
 8007356:	e0a3      	b.n	80074a0 <_printf_i+0x1f4>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	6829      	ldr	r1, [r5, #0]
 800735c:	0606      	lsls	r6, r0, #24
 800735e:	f101 0304 	add.w	r3, r1, #4
 8007362:	d50a      	bpl.n	800737a <_printf_i+0xce>
 8007364:	680e      	ldr	r6, [r1, #0]
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	2e00      	cmp	r6, #0
 800736a:	da03      	bge.n	8007374 <_printf_i+0xc8>
 800736c:	232d      	movs	r3, #45	; 0x2d
 800736e:	4276      	negs	r6, r6
 8007370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007374:	485e      	ldr	r0, [pc, #376]	; (80074f0 <_printf_i+0x244>)
 8007376:	230a      	movs	r3, #10
 8007378:	e019      	b.n	80073ae <_printf_i+0x102>
 800737a:	680e      	ldr	r6, [r1, #0]
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007382:	bf18      	it	ne
 8007384:	b236      	sxthne	r6, r6
 8007386:	e7ef      	b.n	8007368 <_printf_i+0xbc>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	1d19      	adds	r1, r3, #4
 800738e:	6029      	str	r1, [r5, #0]
 8007390:	0601      	lsls	r1, r0, #24
 8007392:	d501      	bpl.n	8007398 <_printf_i+0xec>
 8007394:	681e      	ldr	r6, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0xf2>
 8007398:	0646      	lsls	r6, r0, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0xe8>
 800739c:	881e      	ldrh	r6, [r3, #0]
 800739e:	4854      	ldr	r0, [pc, #336]	; (80074f0 <_printf_i+0x244>)
 80073a0:	2f6f      	cmp	r7, #111	; 0x6f
 80073a2:	bf0c      	ite	eq
 80073a4:	2308      	moveq	r3, #8
 80073a6:	230a      	movne	r3, #10
 80073a8:	2100      	movs	r1, #0
 80073aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ae:	6865      	ldr	r5, [r4, #4]
 80073b0:	60a5      	str	r5, [r4, #8]
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	bfa2      	ittt	ge
 80073b6:	6821      	ldrge	r1, [r4, #0]
 80073b8:	f021 0104 	bicge.w	r1, r1, #4
 80073bc:	6021      	strge	r1, [r4, #0]
 80073be:	b90e      	cbnz	r6, 80073c4 <_printf_i+0x118>
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	d04d      	beq.n	8007460 <_printf_i+0x1b4>
 80073c4:	4615      	mov	r5, r2
 80073c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ca:	fb03 6711 	mls	r7, r3, r1, r6
 80073ce:	5dc7      	ldrb	r7, [r0, r7]
 80073d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073d4:	4637      	mov	r7, r6
 80073d6:	42bb      	cmp	r3, r7
 80073d8:	460e      	mov	r6, r1
 80073da:	d9f4      	bls.n	80073c6 <_printf_i+0x11a>
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d10b      	bne.n	80073f8 <_printf_i+0x14c>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	07de      	lsls	r6, r3, #31
 80073e4:	d508      	bpl.n	80073f8 <_printf_i+0x14c>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6861      	ldr	r1, [r4, #4]
 80073ea:	4299      	cmp	r1, r3
 80073ec:	bfde      	ittt	le
 80073ee:	2330      	movle	r3, #48	; 0x30
 80073f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073f8:	1b52      	subs	r2, r2, r5
 80073fa:	6122      	str	r2, [r4, #16]
 80073fc:	f8cd a000 	str.w	sl, [sp]
 8007400:	464b      	mov	r3, r9
 8007402:	aa03      	add	r2, sp, #12
 8007404:	4621      	mov	r1, r4
 8007406:	4640      	mov	r0, r8
 8007408:	f7ff fee2 	bl	80071d0 <_printf_common>
 800740c:	3001      	adds	r0, #1
 800740e:	d14c      	bne.n	80074aa <_printf_i+0x1fe>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	b004      	add	sp, #16
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	4835      	ldr	r0, [pc, #212]	; (80074f0 <_printf_i+0x244>)
 800741c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007420:	6829      	ldr	r1, [r5, #0]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	f851 6b04 	ldr.w	r6, [r1], #4
 8007428:	6029      	str	r1, [r5, #0]
 800742a:	061d      	lsls	r5, r3, #24
 800742c:	d514      	bpl.n	8007458 <_printf_i+0x1ac>
 800742e:	07df      	lsls	r7, r3, #31
 8007430:	bf44      	itt	mi
 8007432:	f043 0320 	orrmi.w	r3, r3, #32
 8007436:	6023      	strmi	r3, [r4, #0]
 8007438:	b91e      	cbnz	r6, 8007442 <_printf_i+0x196>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f023 0320 	bic.w	r3, r3, #32
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	2310      	movs	r3, #16
 8007444:	e7b0      	b.n	80073a8 <_printf_i+0xfc>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f043 0320 	orr.w	r3, r3, #32
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	2378      	movs	r3, #120	; 0x78
 8007450:	4828      	ldr	r0, [pc, #160]	; (80074f4 <_printf_i+0x248>)
 8007452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007456:	e7e3      	b.n	8007420 <_printf_i+0x174>
 8007458:	0659      	lsls	r1, r3, #25
 800745a:	bf48      	it	mi
 800745c:	b2b6      	uxthmi	r6, r6
 800745e:	e7e6      	b.n	800742e <_printf_i+0x182>
 8007460:	4615      	mov	r5, r2
 8007462:	e7bb      	b.n	80073dc <_printf_i+0x130>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	6826      	ldr	r6, [r4, #0]
 8007468:	6961      	ldr	r1, [r4, #20]
 800746a:	1d18      	adds	r0, r3, #4
 800746c:	6028      	str	r0, [r5, #0]
 800746e:	0635      	lsls	r5, r6, #24
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	d501      	bpl.n	8007478 <_printf_i+0x1cc>
 8007474:	6019      	str	r1, [r3, #0]
 8007476:	e002      	b.n	800747e <_printf_i+0x1d2>
 8007478:	0670      	lsls	r0, r6, #25
 800747a:	d5fb      	bpl.n	8007474 <_printf_i+0x1c8>
 800747c:	8019      	strh	r1, [r3, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	6123      	str	r3, [r4, #16]
 8007482:	4615      	mov	r5, r2
 8007484:	e7ba      	b.n	80073fc <_printf_i+0x150>
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	1d1a      	adds	r2, r3, #4
 800748a:	602a      	str	r2, [r5, #0]
 800748c:	681d      	ldr	r5, [r3, #0]
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	2100      	movs	r1, #0
 8007492:	4628      	mov	r0, r5
 8007494:	f7f8 fea4 	bl	80001e0 <memchr>
 8007498:	b108      	cbz	r0, 800749e <_printf_i+0x1f2>
 800749a:	1b40      	subs	r0, r0, r5
 800749c:	6060      	str	r0, [r4, #4]
 800749e:	6863      	ldr	r3, [r4, #4]
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	2300      	movs	r3, #0
 80074a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a8:	e7a8      	b.n	80073fc <_printf_i+0x150>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	462a      	mov	r2, r5
 80074ae:	4649      	mov	r1, r9
 80074b0:	4640      	mov	r0, r8
 80074b2:	47d0      	blx	sl
 80074b4:	3001      	adds	r0, #1
 80074b6:	d0ab      	beq.n	8007410 <_printf_i+0x164>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	079b      	lsls	r3, r3, #30
 80074bc:	d413      	bmi.n	80074e6 <_printf_i+0x23a>
 80074be:	68e0      	ldr	r0, [r4, #12]
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	4298      	cmp	r0, r3
 80074c4:	bfb8      	it	lt
 80074c6:	4618      	movlt	r0, r3
 80074c8:	e7a4      	b.n	8007414 <_printf_i+0x168>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4632      	mov	r2, r6
 80074ce:	4649      	mov	r1, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	47d0      	blx	sl
 80074d4:	3001      	adds	r0, #1
 80074d6:	d09b      	beq.n	8007410 <_printf_i+0x164>
 80074d8:	3501      	adds	r5, #1
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	9903      	ldr	r1, [sp, #12]
 80074de:	1a5b      	subs	r3, r3, r1
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dcf2      	bgt.n	80074ca <_printf_i+0x21e>
 80074e4:	e7eb      	b.n	80074be <_printf_i+0x212>
 80074e6:	2500      	movs	r5, #0
 80074e8:	f104 0619 	add.w	r6, r4, #25
 80074ec:	e7f5      	b.n	80074da <_printf_i+0x22e>
 80074ee:	bf00      	nop
 80074f0:	0800c56c 	.word	0x0800c56c
 80074f4:	0800c57d 	.word	0x0800c57d

080074f8 <_scanf_float>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	b087      	sub	sp, #28
 80074fe:	4617      	mov	r7, r2
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	688b      	ldr	r3, [r1, #8]
 8007504:	1e5a      	subs	r2, r3, #1
 8007506:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800750a:	bf83      	ittte	hi
 800750c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007510:	195b      	addhi	r3, r3, r5
 8007512:	9302      	strhi	r3, [sp, #8]
 8007514:	2300      	movls	r3, #0
 8007516:	bf86      	itte	hi
 8007518:	f240 135d 	movwhi	r3, #349	; 0x15d
 800751c:	608b      	strhi	r3, [r1, #8]
 800751e:	9302      	strls	r3, [sp, #8]
 8007520:	680b      	ldr	r3, [r1, #0]
 8007522:	468b      	mov	fp, r1
 8007524:	2500      	movs	r5, #0
 8007526:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800752a:	f84b 3b1c 	str.w	r3, [fp], #28
 800752e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007532:	4680      	mov	r8, r0
 8007534:	460c      	mov	r4, r1
 8007536:	465e      	mov	r6, fp
 8007538:	46aa      	mov	sl, r5
 800753a:	46a9      	mov	r9, r5
 800753c:	9501      	str	r5, [sp, #4]
 800753e:	68a2      	ldr	r2, [r4, #8]
 8007540:	b152      	cbz	r2, 8007558 <_scanf_float+0x60>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b4e      	cmp	r3, #78	; 0x4e
 8007548:	d864      	bhi.n	8007614 <_scanf_float+0x11c>
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d83c      	bhi.n	80075c8 <_scanf_float+0xd0>
 800754e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007552:	b2c8      	uxtb	r0, r1
 8007554:	280e      	cmp	r0, #14
 8007556:	d93a      	bls.n	80075ce <_scanf_float+0xd6>
 8007558:	f1b9 0f00 	cmp.w	r9, #0
 800755c:	d003      	beq.n	8007566 <_scanf_float+0x6e>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800756a:	f1ba 0f01 	cmp.w	sl, #1
 800756e:	f200 8113 	bhi.w	8007798 <_scanf_float+0x2a0>
 8007572:	455e      	cmp	r6, fp
 8007574:	f200 8105 	bhi.w	8007782 <_scanf_float+0x28a>
 8007578:	2501      	movs	r5, #1
 800757a:	4628      	mov	r0, r5
 800757c:	b007      	add	sp, #28
 800757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007586:	2a0d      	cmp	r2, #13
 8007588:	d8e6      	bhi.n	8007558 <_scanf_float+0x60>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <_scanf_float+0x98>)
 800758c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007590:	080076cf 	.word	0x080076cf
 8007594:	08007559 	.word	0x08007559
 8007598:	08007559 	.word	0x08007559
 800759c:	08007559 	.word	0x08007559
 80075a0:	0800772f 	.word	0x0800772f
 80075a4:	08007707 	.word	0x08007707
 80075a8:	08007559 	.word	0x08007559
 80075ac:	08007559 	.word	0x08007559
 80075b0:	080076dd 	.word	0x080076dd
 80075b4:	08007559 	.word	0x08007559
 80075b8:	08007559 	.word	0x08007559
 80075bc:	08007559 	.word	0x08007559
 80075c0:	08007559 	.word	0x08007559
 80075c4:	08007695 	.word	0x08007695
 80075c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80075cc:	e7db      	b.n	8007586 <_scanf_float+0x8e>
 80075ce:	290e      	cmp	r1, #14
 80075d0:	d8c2      	bhi.n	8007558 <_scanf_float+0x60>
 80075d2:	a001      	add	r0, pc, #4	; (adr r0, 80075d8 <_scanf_float+0xe0>)
 80075d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80075d8:	08007687 	.word	0x08007687
 80075dc:	08007559 	.word	0x08007559
 80075e0:	08007687 	.word	0x08007687
 80075e4:	0800771b 	.word	0x0800771b
 80075e8:	08007559 	.word	0x08007559
 80075ec:	08007635 	.word	0x08007635
 80075f0:	08007671 	.word	0x08007671
 80075f4:	08007671 	.word	0x08007671
 80075f8:	08007671 	.word	0x08007671
 80075fc:	08007671 	.word	0x08007671
 8007600:	08007671 	.word	0x08007671
 8007604:	08007671 	.word	0x08007671
 8007608:	08007671 	.word	0x08007671
 800760c:	08007671 	.word	0x08007671
 8007610:	08007671 	.word	0x08007671
 8007614:	2b6e      	cmp	r3, #110	; 0x6e
 8007616:	d809      	bhi.n	800762c <_scanf_float+0x134>
 8007618:	2b60      	cmp	r3, #96	; 0x60
 800761a:	d8b2      	bhi.n	8007582 <_scanf_float+0x8a>
 800761c:	2b54      	cmp	r3, #84	; 0x54
 800761e:	d077      	beq.n	8007710 <_scanf_float+0x218>
 8007620:	2b59      	cmp	r3, #89	; 0x59
 8007622:	d199      	bne.n	8007558 <_scanf_float+0x60>
 8007624:	2d07      	cmp	r5, #7
 8007626:	d197      	bne.n	8007558 <_scanf_float+0x60>
 8007628:	2508      	movs	r5, #8
 800762a:	e029      	b.n	8007680 <_scanf_float+0x188>
 800762c:	2b74      	cmp	r3, #116	; 0x74
 800762e:	d06f      	beq.n	8007710 <_scanf_float+0x218>
 8007630:	2b79      	cmp	r3, #121	; 0x79
 8007632:	e7f6      	b.n	8007622 <_scanf_float+0x12a>
 8007634:	6821      	ldr	r1, [r4, #0]
 8007636:	05c8      	lsls	r0, r1, #23
 8007638:	d51a      	bpl.n	8007670 <_scanf_float+0x178>
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007640:	6021      	str	r1, [r4, #0]
 8007642:	f109 0901 	add.w	r9, r9, #1
 8007646:	b11b      	cbz	r3, 8007650 <_scanf_float+0x158>
 8007648:	3b01      	subs	r3, #1
 800764a:	3201      	adds	r2, #1
 800764c:	9302      	str	r3, [sp, #8]
 800764e:	60a2      	str	r2, [r4, #8]
 8007650:	68a3      	ldr	r3, [r4, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	3301      	adds	r3, #1
 800765a:	6123      	str	r3, [r4, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3b01      	subs	r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	f340 8084 	ble.w	8007770 <_scanf_float+0x278>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	e766      	b.n	800753e <_scanf_float+0x46>
 8007670:	eb1a 0f05 	cmn.w	sl, r5
 8007674:	f47f af70 	bne.w	8007558 <_scanf_float+0x60>
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	f806 3b01 	strb.w	r3, [r6], #1
 8007684:	e7e4      	b.n	8007650 <_scanf_float+0x158>
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	0610      	lsls	r0, r2, #24
 800768a:	f57f af65 	bpl.w	8007558 <_scanf_float+0x60>
 800768e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007692:	e7f4      	b.n	800767e <_scanf_float+0x186>
 8007694:	f1ba 0f00 	cmp.w	sl, #0
 8007698:	d10e      	bne.n	80076b8 <_scanf_float+0x1c0>
 800769a:	f1b9 0f00 	cmp.w	r9, #0
 800769e:	d10e      	bne.n	80076be <_scanf_float+0x1c6>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076aa:	d108      	bne.n	80076be <_scanf_float+0x1c6>
 80076ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076b0:	6022      	str	r2, [r4, #0]
 80076b2:	f04f 0a01 	mov.w	sl, #1
 80076b6:	e7e3      	b.n	8007680 <_scanf_float+0x188>
 80076b8:	f1ba 0f02 	cmp.w	sl, #2
 80076bc:	d055      	beq.n	800776a <_scanf_float+0x272>
 80076be:	2d01      	cmp	r5, #1
 80076c0:	d002      	beq.n	80076c8 <_scanf_float+0x1d0>
 80076c2:	2d04      	cmp	r5, #4
 80076c4:	f47f af48 	bne.w	8007558 <_scanf_float+0x60>
 80076c8:	3501      	adds	r5, #1
 80076ca:	b2ed      	uxtb	r5, r5
 80076cc:	e7d8      	b.n	8007680 <_scanf_float+0x188>
 80076ce:	f1ba 0f01 	cmp.w	sl, #1
 80076d2:	f47f af41 	bne.w	8007558 <_scanf_float+0x60>
 80076d6:	f04f 0a02 	mov.w	sl, #2
 80076da:	e7d1      	b.n	8007680 <_scanf_float+0x188>
 80076dc:	b97d      	cbnz	r5, 80076fe <_scanf_float+0x206>
 80076de:	f1b9 0f00 	cmp.w	r9, #0
 80076e2:	f47f af3c 	bne.w	800755e <_scanf_float+0x66>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076f0:	f47f af39 	bne.w	8007566 <_scanf_float+0x6e>
 80076f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076f8:	6022      	str	r2, [r4, #0]
 80076fa:	2501      	movs	r5, #1
 80076fc:	e7c0      	b.n	8007680 <_scanf_float+0x188>
 80076fe:	2d03      	cmp	r5, #3
 8007700:	d0e2      	beq.n	80076c8 <_scanf_float+0x1d0>
 8007702:	2d05      	cmp	r5, #5
 8007704:	e7de      	b.n	80076c4 <_scanf_float+0x1cc>
 8007706:	2d02      	cmp	r5, #2
 8007708:	f47f af26 	bne.w	8007558 <_scanf_float+0x60>
 800770c:	2503      	movs	r5, #3
 800770e:	e7b7      	b.n	8007680 <_scanf_float+0x188>
 8007710:	2d06      	cmp	r5, #6
 8007712:	f47f af21 	bne.w	8007558 <_scanf_float+0x60>
 8007716:	2507      	movs	r5, #7
 8007718:	e7b2      	b.n	8007680 <_scanf_float+0x188>
 800771a:	6822      	ldr	r2, [r4, #0]
 800771c:	0591      	lsls	r1, r2, #22
 800771e:	f57f af1b 	bpl.w	8007558 <_scanf_float+0x60>
 8007722:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	f8cd 9004 	str.w	r9, [sp, #4]
 800772c:	e7a8      	b.n	8007680 <_scanf_float+0x188>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007734:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007738:	d006      	beq.n	8007748 <_scanf_float+0x250>
 800773a:	0550      	lsls	r0, r2, #21
 800773c:	f57f af0c 	bpl.w	8007558 <_scanf_float+0x60>
 8007740:	f1b9 0f00 	cmp.w	r9, #0
 8007744:	f43f af0f 	beq.w	8007566 <_scanf_float+0x6e>
 8007748:	0591      	lsls	r1, r2, #22
 800774a:	bf58      	it	pl
 800774c:	9901      	ldrpl	r1, [sp, #4]
 800774e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007752:	bf58      	it	pl
 8007754:	eba9 0101 	subpl.w	r1, r9, r1
 8007758:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800775c:	bf58      	it	pl
 800775e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	f04f 0900 	mov.w	r9, #0
 8007768:	e78a      	b.n	8007680 <_scanf_float+0x188>
 800776a:	f04f 0a03 	mov.w	sl, #3
 800776e:	e787      	b.n	8007680 <_scanf_float+0x188>
 8007770:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007774:	4639      	mov	r1, r7
 8007776:	4640      	mov	r0, r8
 8007778:	4798      	blx	r3
 800777a:	2800      	cmp	r0, #0
 800777c:	f43f aedf 	beq.w	800753e <_scanf_float+0x46>
 8007780:	e6ea      	b.n	8007558 <_scanf_float+0x60>
 8007782:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007786:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800778a:	463a      	mov	r2, r7
 800778c:	4640      	mov	r0, r8
 800778e:	4798      	blx	r3
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	3b01      	subs	r3, #1
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	e6ec      	b.n	8007572 <_scanf_float+0x7a>
 8007798:	1e6b      	subs	r3, r5, #1
 800779a:	2b06      	cmp	r3, #6
 800779c:	d825      	bhi.n	80077ea <_scanf_float+0x2f2>
 800779e:	2d02      	cmp	r5, #2
 80077a0:	d836      	bhi.n	8007810 <_scanf_float+0x318>
 80077a2:	455e      	cmp	r6, fp
 80077a4:	f67f aee8 	bls.w	8007578 <_scanf_float+0x80>
 80077a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077b0:	463a      	mov	r2, r7
 80077b2:	4640      	mov	r0, r8
 80077b4:	4798      	blx	r3
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	e7f1      	b.n	80077a2 <_scanf_float+0x2aa>
 80077be:	9802      	ldr	r0, [sp, #8]
 80077c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80077c8:	9002      	str	r0, [sp, #8]
 80077ca:	463a      	mov	r2, r7
 80077cc:	4640      	mov	r0, r8
 80077ce:	4798      	blx	r3
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077da:	fa5f fa8a 	uxtb.w	sl, sl
 80077de:	f1ba 0f02 	cmp.w	sl, #2
 80077e2:	d1ec      	bne.n	80077be <_scanf_float+0x2c6>
 80077e4:	3d03      	subs	r5, #3
 80077e6:	b2ed      	uxtb	r5, r5
 80077e8:	1b76      	subs	r6, r6, r5
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	05da      	lsls	r2, r3, #23
 80077ee:	d52f      	bpl.n	8007850 <_scanf_float+0x358>
 80077f0:	055b      	lsls	r3, r3, #21
 80077f2:	d510      	bpl.n	8007816 <_scanf_float+0x31e>
 80077f4:	455e      	cmp	r6, fp
 80077f6:	f67f aebf 	bls.w	8007578 <_scanf_float+0x80>
 80077fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007802:	463a      	mov	r2, r7
 8007804:	4640      	mov	r0, r8
 8007806:	4798      	blx	r3
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	3b01      	subs	r3, #1
 800780c:	6123      	str	r3, [r4, #16]
 800780e:	e7f1      	b.n	80077f4 <_scanf_float+0x2fc>
 8007810:	46aa      	mov	sl, r5
 8007812:	9602      	str	r6, [sp, #8]
 8007814:	e7df      	b.n	80077d6 <_scanf_float+0x2de>
 8007816:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	2965      	cmp	r1, #101	; 0x65
 800781e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007822:	f106 35ff 	add.w	r5, r6, #4294967295
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	d00c      	beq.n	8007844 <_scanf_float+0x34c>
 800782a:	2945      	cmp	r1, #69	; 0x45
 800782c:	d00a      	beq.n	8007844 <_scanf_float+0x34c>
 800782e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007832:	463a      	mov	r2, r7
 8007834:	4640      	mov	r0, r8
 8007836:	4798      	blx	r3
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800783e:	3b01      	subs	r3, #1
 8007840:	1eb5      	subs	r5, r6, #2
 8007842:	6123      	str	r3, [r4, #16]
 8007844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007848:	463a      	mov	r2, r7
 800784a:	4640      	mov	r0, r8
 800784c:	4798      	blx	r3
 800784e:	462e      	mov	r6, r5
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	f015 0510 	ands.w	r5, r5, #16
 8007856:	d159      	bne.n	800790c <_scanf_float+0x414>
 8007858:	7035      	strb	r5, [r6, #0]
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007864:	d11b      	bne.n	800789e <_scanf_float+0x3a6>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	454b      	cmp	r3, r9
 800786a:	eba3 0209 	sub.w	r2, r3, r9
 800786e:	d123      	bne.n	80078b8 <_scanf_float+0x3c0>
 8007870:	2200      	movs	r2, #0
 8007872:	4659      	mov	r1, fp
 8007874:	4640      	mov	r0, r8
 8007876:	f000 ffc9 	bl	800880c <_strtod_r>
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	f012 0f02 	tst.w	r2, #2
 8007882:	ec57 6b10 	vmov	r6, r7, d0
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	d021      	beq.n	80078ce <_scanf_float+0x3d6>
 800788a:	9903      	ldr	r1, [sp, #12]
 800788c:	1d1a      	adds	r2, r3, #4
 800788e:	600a      	str	r2, [r1, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	e9c3 6700 	strd	r6, r7, [r3]
 8007896:	68e3      	ldr	r3, [r4, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	60e3      	str	r3, [r4, #12]
 800789c:	e66d      	b.n	800757a <_scanf_float+0x82>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0e5      	beq.n	8007870 <_scanf_float+0x378>
 80078a4:	9905      	ldr	r1, [sp, #20]
 80078a6:	230a      	movs	r3, #10
 80078a8:	462a      	mov	r2, r5
 80078aa:	3101      	adds	r1, #1
 80078ac:	4640      	mov	r0, r8
 80078ae:	f001 f835 	bl	800891c <_strtol_r>
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	9e05      	ldr	r6, [sp, #20]
 80078b6:	1ac2      	subs	r2, r0, r3
 80078b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80078bc:	429e      	cmp	r6, r3
 80078be:	bf28      	it	cs
 80078c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80078c4:	4912      	ldr	r1, [pc, #72]	; (8007910 <_scanf_float+0x418>)
 80078c6:	4630      	mov	r0, r6
 80078c8:	f000 f8d0 	bl	8007a6c <siprintf>
 80078cc:	e7d0      	b.n	8007870 <_scanf_float+0x378>
 80078ce:	9903      	ldr	r1, [sp, #12]
 80078d0:	f012 0f04 	tst.w	r2, #4
 80078d4:	f103 0204 	add.w	r2, r3, #4
 80078d8:	600a      	str	r2, [r1, #0]
 80078da:	d1d9      	bne.n	8007890 <_scanf_float+0x398>
 80078dc:	f8d3 8000 	ldr.w	r8, [r3]
 80078e0:	ee10 2a10 	vmov	r2, s0
 80078e4:	ee10 0a10 	vmov	r0, s0
 80078e8:	463b      	mov	r3, r7
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f9 f91e 	bl	8000b2c <__aeabi_dcmpun>
 80078f0:	b128      	cbz	r0, 80078fe <_scanf_float+0x406>
 80078f2:	4808      	ldr	r0, [pc, #32]	; (8007914 <_scanf_float+0x41c>)
 80078f4:	f000 f8b4 	bl	8007a60 <nanf>
 80078f8:	ed88 0a00 	vstr	s0, [r8]
 80078fc:	e7cb      	b.n	8007896 <_scanf_float+0x39e>
 80078fe:	4630      	mov	r0, r6
 8007900:	4639      	mov	r1, r7
 8007902:	f7f9 f971 	bl	8000be8 <__aeabi_d2f>
 8007906:	f8c8 0000 	str.w	r0, [r8]
 800790a:	e7c4      	b.n	8007896 <_scanf_float+0x39e>
 800790c:	2500      	movs	r5, #0
 800790e:	e634      	b.n	800757a <_scanf_float+0x82>
 8007910:	0800c58e 	.word	0x0800c58e
 8007914:	0800ca1b 	.word	0x0800ca1b

08007918 <iprintf>:
 8007918:	b40f      	push	{r0, r1, r2, r3}
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <iprintf+0x2c>)
 800791c:	b513      	push	{r0, r1, r4, lr}
 800791e:	681c      	ldr	r4, [r3, #0]
 8007920:	b124      	cbz	r4, 800792c <iprintf+0x14>
 8007922:	69a3      	ldr	r3, [r4, #24]
 8007924:	b913      	cbnz	r3, 800792c <iprintf+0x14>
 8007926:	4620      	mov	r0, r4
 8007928:	f002 f872 	bl	8009a10 <__sinit>
 800792c:	ab05      	add	r3, sp, #20
 800792e:	9a04      	ldr	r2, [sp, #16]
 8007930:	68a1      	ldr	r1, [r4, #8]
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	4620      	mov	r0, r4
 8007936:	f003 fe2f 	bl	800b598 <_vfiprintf_r>
 800793a:	b002      	add	sp, #8
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	b004      	add	sp, #16
 8007942:	4770      	bx	lr
 8007944:	2000003c 	.word	0x2000003c

08007948 <putchar>:
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <putchar+0x28>)
 800794a:	b513      	push	{r0, r1, r4, lr}
 800794c:	681c      	ldr	r4, [r3, #0]
 800794e:	4601      	mov	r1, r0
 8007950:	b134      	cbz	r4, 8007960 <putchar+0x18>
 8007952:	69a3      	ldr	r3, [r4, #24]
 8007954:	b923      	cbnz	r3, 8007960 <putchar+0x18>
 8007956:	9001      	str	r0, [sp, #4]
 8007958:	4620      	mov	r0, r4
 800795a:	f002 f859 	bl	8009a10 <__sinit>
 800795e:	9901      	ldr	r1, [sp, #4]
 8007960:	68a2      	ldr	r2, [r4, #8]
 8007962:	4620      	mov	r0, r4
 8007964:	b002      	add	sp, #8
 8007966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796a:	f004 b897 	b.w	800ba9c <_putc_r>
 800796e:	bf00      	nop
 8007970:	2000003c 	.word	0x2000003c

08007974 <_puts_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460e      	mov	r6, r1
 8007978:	4605      	mov	r5, r0
 800797a:	b118      	cbz	r0, 8007984 <_puts_r+0x10>
 800797c:	6983      	ldr	r3, [r0, #24]
 800797e:	b90b      	cbnz	r3, 8007984 <_puts_r+0x10>
 8007980:	f002 f846 	bl	8009a10 <__sinit>
 8007984:	69ab      	ldr	r3, [r5, #24]
 8007986:	68ac      	ldr	r4, [r5, #8]
 8007988:	b913      	cbnz	r3, 8007990 <_puts_r+0x1c>
 800798a:	4628      	mov	r0, r5
 800798c:	f002 f840 	bl	8009a10 <__sinit>
 8007990:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <_puts_r+0xd0>)
 8007992:	429c      	cmp	r4, r3
 8007994:	d120      	bne.n	80079d8 <_puts_r+0x64>
 8007996:	686c      	ldr	r4, [r5, #4]
 8007998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800799a:	07db      	lsls	r3, r3, #31
 800799c:	d405      	bmi.n	80079aa <_puts_r+0x36>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	0598      	lsls	r0, r3, #22
 80079a2:	d402      	bmi.n	80079aa <_puts_r+0x36>
 80079a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a6:	f002 fc44 	bl	800a232 <__retarget_lock_acquire_recursive>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	d51d      	bpl.n	80079ec <_puts_r+0x78>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	b1db      	cbz	r3, 80079ec <_puts_r+0x78>
 80079b4:	3e01      	subs	r6, #1
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079bc:	3b01      	subs	r3, #1
 80079be:	60a3      	str	r3, [r4, #8]
 80079c0:	bb39      	cbnz	r1, 8007a12 <_puts_r+0x9e>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da38      	bge.n	8007a38 <_puts_r+0xc4>
 80079c6:	4622      	mov	r2, r4
 80079c8:	210a      	movs	r1, #10
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 ffa8 	bl	8008920 <__swbuf_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d011      	beq.n	80079f8 <_puts_r+0x84>
 80079d4:	250a      	movs	r5, #10
 80079d6:	e011      	b.n	80079fc <_puts_r+0x88>
 80079d8:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <_puts_r+0xd4>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <_puts_r+0x6e>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7da      	b.n	8007998 <_puts_r+0x24>
 80079e2:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <_puts_r+0xd8>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7d5      	b.n	8007998 <_puts_r+0x24>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fffa 	bl	80089e8 <__swsetup_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d0dd      	beq.n	80079b4 <_puts_r+0x40>
 80079f8:	f04f 35ff 	mov.w	r5, #4294967295
 80079fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079fe:	07da      	lsls	r2, r3, #31
 8007a00:	d405      	bmi.n	8007a0e <_puts_r+0x9a>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	059b      	lsls	r3, r3, #22
 8007a06:	d402      	bmi.n	8007a0e <_puts_r+0x9a>
 8007a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0a:	f002 fc13 	bl	800a234 <__retarget_lock_release_recursive>
 8007a0e:	4628      	mov	r0, r5
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	da04      	bge.n	8007a20 <_puts_r+0xac>
 8007a16:	69a2      	ldr	r2, [r4, #24]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	dc06      	bgt.n	8007a2a <_puts_r+0xb6>
 8007a1c:	290a      	cmp	r1, #10
 8007a1e:	d004      	beq.n	8007a2a <_puts_r+0xb6>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	6022      	str	r2, [r4, #0]
 8007a26:	7019      	strb	r1, [r3, #0]
 8007a28:	e7c5      	b.n	80079b6 <_puts_r+0x42>
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 ff77 	bl	8008920 <__swbuf_r>
 8007a32:	3001      	adds	r0, #1
 8007a34:	d1bf      	bne.n	80079b6 <_puts_r+0x42>
 8007a36:	e7df      	b.n	80079f8 <_puts_r+0x84>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	250a      	movs	r5, #10
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	6022      	str	r2, [r4, #0]
 8007a40:	701d      	strb	r5, [r3, #0]
 8007a42:	e7db      	b.n	80079fc <_puts_r+0x88>
 8007a44:	0800c79c 	.word	0x0800c79c
 8007a48:	0800c7bc 	.word	0x0800c7bc
 8007a4c:	0800c77c 	.word	0x0800c77c

08007a50 <puts>:
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <puts+0xc>)
 8007a52:	4601      	mov	r1, r0
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f7ff bf8d 	b.w	8007974 <_puts_r>
 8007a5a:	bf00      	nop
 8007a5c:	2000003c 	.word	0x2000003c

08007a60 <nanf>:
 8007a60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a68 <nanf+0x8>
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	7fc00000 	.word	0x7fc00000

08007a6c <siprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b500      	push	{lr}
 8007a70:	b09c      	sub	sp, #112	; 0x70
 8007a72:	ab1d      	add	r3, sp, #116	; 0x74
 8007a74:	9002      	str	r0, [sp, #8]
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a7c:	4809      	ldr	r0, [pc, #36]	; (8007aa4 <siprintf+0x38>)
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	4909      	ldr	r1, [pc, #36]	; (8007aa8 <siprintf+0x3c>)
 8007a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a88:	9105      	str	r1, [sp, #20]
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	a902      	add	r1, sp, #8
 8007a90:	f003 fa86 	bl	800afa0 <_svfiprintf_r>
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	b01c      	add	sp, #112	; 0x70
 8007a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa0:	b003      	add	sp, #12
 8007aa2:	4770      	bx	lr
 8007aa4:	2000003c 	.word	0x2000003c
 8007aa8:	ffff0208 	.word	0xffff0208

08007aac <siscanf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	b09f      	sub	sp, #124	; 0x7c
 8007ab2:	ac21      	add	r4, sp, #132	; 0x84
 8007ab4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ab8:	f854 2b04 	ldr.w	r2, [r4], #4
 8007abc:	9201      	str	r2, [sp, #4]
 8007abe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007ac2:	9004      	str	r0, [sp, #16]
 8007ac4:	9008      	str	r0, [sp, #32]
 8007ac6:	f7f8 fb83 	bl	80001d0 <strlen>
 8007aca:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <siscanf+0x50>)
 8007acc:	9005      	str	r0, [sp, #20]
 8007ace:	9009      	str	r0, [sp, #36]	; 0x24
 8007ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad2:	480b      	ldr	r0, [pc, #44]	; (8007b00 <siscanf+0x54>)
 8007ad4:	9a01      	ldr	r2, [sp, #4]
 8007ad6:	6800      	ldr	r0, [r0, #0]
 8007ad8:	9403      	str	r4, [sp, #12]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9311      	str	r3, [sp, #68]	; 0x44
 8007ade:	9316      	str	r3, [sp, #88]	; 0x58
 8007ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ae4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	4623      	mov	r3, r4
 8007aec:	f003 fbb2 	bl	800b254 <__ssvfiscanf_r>
 8007af0:	b01f      	add	sp, #124	; 0x7c
 8007af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af6:	b003      	add	sp, #12
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	2000003c 	.word	0x2000003c

08007b04 <__sread>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	460c      	mov	r4, r1
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	f004 f80e 	bl	800bb2c <_read_r>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	bfab      	itete	ge
 8007b14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b16:	89a3      	ldrhlt	r3, [r4, #12]
 8007b18:	181b      	addge	r3, r3, r0
 8007b1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b1e:	bfac      	ite	ge
 8007b20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b22:	81a3      	strhlt	r3, [r4, #12]
 8007b24:	bd10      	pop	{r4, pc}

08007b26 <__seofread>:
 8007b26:	2000      	movs	r0, #0
 8007b28:	4770      	bx	lr

08007b2a <__swrite>:
 8007b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2e:	461f      	mov	r7, r3
 8007b30:	898b      	ldrh	r3, [r1, #12]
 8007b32:	05db      	lsls	r3, r3, #23
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	4616      	mov	r6, r2
 8007b3a:	d505      	bpl.n	8007b48 <__swrite+0x1e>
 8007b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b40:	2302      	movs	r3, #2
 8007b42:	2200      	movs	r2, #0
 8007b44:	f002 fb78 	bl	800a238 <_lseek_r>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	4632      	mov	r2, r6
 8007b56:	463b      	mov	r3, r7
 8007b58:	4628      	mov	r0, r5
 8007b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5e:	f000 bf31 	b.w	80089c4 <_write_r>

08007b62 <__sseek>:
 8007b62:	b510      	push	{r4, lr}
 8007b64:	460c      	mov	r4, r1
 8007b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6a:	f002 fb65 	bl	800a238 <_lseek_r>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	bf15      	itete	ne
 8007b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b7e:	81a3      	strheq	r3, [r4, #12]
 8007b80:	bf18      	it	ne
 8007b82:	81a3      	strhne	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__sclose>:
 8007b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8a:	f000 bf9b 	b.w	8008ac4 <_close_r>

08007b8e <strcpy>:
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b94:	f803 2b01 	strb.w	r2, [r3], #1
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d1f9      	bne.n	8007b90 <strcpy+0x2>
 8007b9c:	4770      	bx	lr

08007b9e <strncmp>:
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	b17a      	cbz	r2, 8007bc2 <strncmp+0x24>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	3901      	subs	r1, #1
 8007ba6:	1884      	adds	r4, r0, r2
 8007ba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007bac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bb0:	4290      	cmp	r0, r2
 8007bb2:	d101      	bne.n	8007bb8 <strncmp+0x1a>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d101      	bne.n	8007bbc <strncmp+0x1e>
 8007bb8:	1a80      	subs	r0, r0, r2
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1f3      	bne.n	8007ba8 <strncmp+0xa>
 8007bc0:	e7fa      	b.n	8007bb8 <strncmp+0x1a>
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	e7f9      	b.n	8007bba <strncmp+0x1c>

08007bc6 <sulp>:
 8007bc6:	b570      	push	{r4, r5, r6, lr}
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460d      	mov	r5, r1
 8007bcc:	ec45 4b10 	vmov	d0, r4, r5
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	f002 ff43 	bl	800aa5c <__ulp>
 8007bd6:	ec51 0b10 	vmov	r0, r1, d0
 8007bda:	b17e      	cbz	r6, 8007bfc <sulp+0x36>
 8007bdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007be0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dd09      	ble.n	8007bfc <sulp+0x36>
 8007be8:	051b      	lsls	r3, r3, #20
 8007bea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007bee:	2400      	movs	r4, #0
 8007bf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f7f8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c00 <_strtod_l>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	ed2d 8b02 	vpush	{d8}
 8007c08:	b09d      	sub	sp, #116	; 0x74
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9318      	str	r3, [sp, #96]	; 0x60
 8007c10:	4ba2      	ldr	r3, [pc, #648]	; (8007e9c <_strtod_l+0x29c>)
 8007c12:	9213      	str	r2, [sp, #76]	; 0x4c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	9305      	str	r3, [sp, #20]
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	4688      	mov	r8, r1
 8007c1e:	f7f8 fad7 	bl	80001d0 <strlen>
 8007c22:	f04f 0a00 	mov.w	sl, #0
 8007c26:	4605      	mov	r5, r0
 8007c28:	f04f 0b00 	mov.w	fp, #0
 8007c2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	2a2b      	cmp	r2, #43	; 0x2b
 8007c36:	d04e      	beq.n	8007cd6 <_strtod_l+0xd6>
 8007c38:	d83b      	bhi.n	8007cb2 <_strtod_l+0xb2>
 8007c3a:	2a0d      	cmp	r2, #13
 8007c3c:	d834      	bhi.n	8007ca8 <_strtod_l+0xa8>
 8007c3e:	2a08      	cmp	r2, #8
 8007c40:	d834      	bhi.n	8007cac <_strtod_l+0xac>
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	d03e      	beq.n	8007cc4 <_strtod_l+0xc4>
 8007c46:	2300      	movs	r3, #0
 8007c48:	930a      	str	r3, [sp, #40]	; 0x28
 8007c4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007c4c:	7833      	ldrb	r3, [r6, #0]
 8007c4e:	2b30      	cmp	r3, #48	; 0x30
 8007c50:	f040 80b0 	bne.w	8007db4 <_strtod_l+0x1b4>
 8007c54:	7873      	ldrb	r3, [r6, #1]
 8007c56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c5a:	2b58      	cmp	r3, #88	; 0x58
 8007c5c:	d168      	bne.n	8007d30 <_strtod_l+0x130>
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	ab18      	add	r3, sp, #96	; 0x60
 8007c64:	9702      	str	r7, [sp, #8]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4a8d      	ldr	r2, [pc, #564]	; (8007ea0 <_strtod_l+0x2a0>)
 8007c6a:	ab19      	add	r3, sp, #100	; 0x64
 8007c6c:	a917      	add	r1, sp, #92	; 0x5c
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 ffd2 	bl	8009c18 <__gethex>
 8007c74:	f010 0707 	ands.w	r7, r0, #7
 8007c78:	4605      	mov	r5, r0
 8007c7a:	d005      	beq.n	8007c88 <_strtod_l+0x88>
 8007c7c:	2f06      	cmp	r7, #6
 8007c7e:	d12c      	bne.n	8007cda <_strtod_l+0xda>
 8007c80:	3601      	adds	r6, #1
 8007c82:	2300      	movs	r3, #0
 8007c84:	9617      	str	r6, [sp, #92]	; 0x5c
 8007c86:	930a      	str	r3, [sp, #40]	; 0x28
 8007c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 8590 	bne.w	80087b0 <_strtod_l+0xbb0>
 8007c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c92:	b1eb      	cbz	r3, 8007cd0 <_strtod_l+0xd0>
 8007c94:	4652      	mov	r2, sl
 8007c96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c9a:	ec43 2b10 	vmov	d0, r2, r3
 8007c9e:	b01d      	add	sp, #116	; 0x74
 8007ca0:	ecbd 8b02 	vpop	{d8}
 8007ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca8:	2a20      	cmp	r2, #32
 8007caa:	d1cc      	bne.n	8007c46 <_strtod_l+0x46>
 8007cac:	3301      	adds	r3, #1
 8007cae:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cb0:	e7be      	b.n	8007c30 <_strtod_l+0x30>
 8007cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8007cb4:	d1c7      	bne.n	8007c46 <_strtod_l+0x46>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1c2      	bne.n	8007c4a <_strtod_l+0x4a>
 8007cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f040 856e 	bne.w	80087ac <_strtod_l+0xbac>
 8007cd0:	4652      	mov	r2, sl
 8007cd2:	465b      	mov	r3, fp
 8007cd4:	e7e1      	b.n	8007c9a <_strtod_l+0x9a>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	e7ee      	b.n	8007cb8 <_strtod_l+0xb8>
 8007cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cdc:	b13a      	cbz	r2, 8007cee <_strtod_l+0xee>
 8007cde:	2135      	movs	r1, #53	; 0x35
 8007ce0:	a81a      	add	r0, sp, #104	; 0x68
 8007ce2:	f002 ffc6 	bl	800ac72 <__copybits>
 8007ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f002 fb85 	bl	800a3f8 <_Bfree>
 8007cee:	3f01      	subs	r7, #1
 8007cf0:	2f04      	cmp	r7, #4
 8007cf2:	d806      	bhi.n	8007d02 <_strtod_l+0x102>
 8007cf4:	e8df f007 	tbb	[pc, r7]
 8007cf8:	1714030a 	.word	0x1714030a
 8007cfc:	0a          	.byte	0x0a
 8007cfd:	00          	.byte	0x00
 8007cfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007d02:	0728      	lsls	r0, r5, #28
 8007d04:	d5c0      	bpl.n	8007c88 <_strtod_l+0x88>
 8007d06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d0a:	e7bd      	b.n	8007c88 <_strtod_l+0x88>
 8007d0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d1e:	e7f0      	b.n	8007d02 <_strtod_l+0x102>
 8007d20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007ea4 <_strtod_l+0x2a4>
 8007d24:	e7ed      	b.n	8007d02 <_strtod_l+0x102>
 8007d26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007d2a:	f04f 3aff 	mov.w	sl, #4294967295
 8007d2e:	e7e8      	b.n	8007d02 <_strtod_l+0x102>
 8007d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b30      	cmp	r3, #48	; 0x30
 8007d3a:	d0f9      	beq.n	8007d30 <_strtod_l+0x130>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0a3      	beq.n	8007c88 <_strtod_l+0x88>
 8007d40:	2301      	movs	r3, #1
 8007d42:	f04f 0900 	mov.w	r9, #0
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d4a:	9308      	str	r3, [sp, #32]
 8007d4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d50:	464f      	mov	r7, r9
 8007d52:	220a      	movs	r2, #10
 8007d54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d56:	7806      	ldrb	r6, [r0, #0]
 8007d58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007d5c:	b2d9      	uxtb	r1, r3
 8007d5e:	2909      	cmp	r1, #9
 8007d60:	d92a      	bls.n	8007db8 <_strtod_l+0x1b8>
 8007d62:	9905      	ldr	r1, [sp, #20]
 8007d64:	462a      	mov	r2, r5
 8007d66:	f7ff ff1a 	bl	8007b9e <strncmp>
 8007d6a:	b398      	cbz	r0, 8007dd4 <_strtod_l+0x1d4>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	4632      	mov	r2, r6
 8007d70:	463d      	mov	r5, r7
 8007d72:	9005      	str	r0, [sp, #20]
 8007d74:	4603      	mov	r3, r0
 8007d76:	2a65      	cmp	r2, #101	; 0x65
 8007d78:	d001      	beq.n	8007d7e <_strtod_l+0x17e>
 8007d7a:	2a45      	cmp	r2, #69	; 0x45
 8007d7c:	d118      	bne.n	8007db0 <_strtod_l+0x1b0>
 8007d7e:	b91d      	cbnz	r5, 8007d88 <_strtod_l+0x188>
 8007d80:	9a04      	ldr	r2, [sp, #16]
 8007d82:	4302      	orrs	r2, r0
 8007d84:	d09e      	beq.n	8007cc4 <_strtod_l+0xc4>
 8007d86:	2500      	movs	r5, #0
 8007d88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007d8c:	f108 0201 	add.w	r2, r8, #1
 8007d90:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007d96:	2a2b      	cmp	r2, #43	; 0x2b
 8007d98:	d075      	beq.n	8007e86 <_strtod_l+0x286>
 8007d9a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d9c:	d07b      	beq.n	8007e96 <_strtod_l+0x296>
 8007d9e:	f04f 0c00 	mov.w	ip, #0
 8007da2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007da6:	2909      	cmp	r1, #9
 8007da8:	f240 8082 	bls.w	8007eb0 <_strtod_l+0x2b0>
 8007dac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007db0:	2600      	movs	r6, #0
 8007db2:	e09d      	b.n	8007ef0 <_strtod_l+0x2f0>
 8007db4:	2300      	movs	r3, #0
 8007db6:	e7c4      	b.n	8007d42 <_strtod_l+0x142>
 8007db8:	2f08      	cmp	r7, #8
 8007dba:	bfd8      	it	le
 8007dbc:	9907      	ldrle	r1, [sp, #28]
 8007dbe:	f100 0001 	add.w	r0, r0, #1
 8007dc2:	bfda      	itte	le
 8007dc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007dc8:	9307      	strle	r3, [sp, #28]
 8007dca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007dce:	3701      	adds	r7, #1
 8007dd0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007dd2:	e7bf      	b.n	8007d54 <_strtod_l+0x154>
 8007dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dd6:	195a      	adds	r2, r3, r5
 8007dd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dda:	5d5a      	ldrb	r2, [r3, r5]
 8007ddc:	2f00      	cmp	r7, #0
 8007dde:	d037      	beq.n	8007e50 <_strtod_l+0x250>
 8007de0:	9005      	str	r0, [sp, #20]
 8007de2:	463d      	mov	r5, r7
 8007de4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	d912      	bls.n	8007e12 <_strtod_l+0x212>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7c2      	b.n	8007d76 <_strtod_l+0x176>
 8007df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007df6:	785a      	ldrb	r2, [r3, #1]
 8007df8:	3001      	adds	r0, #1
 8007dfa:	2a30      	cmp	r2, #48	; 0x30
 8007dfc:	d0f8      	beq.n	8007df0 <_strtod_l+0x1f0>
 8007dfe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	f200 84d9 	bhi.w	80087ba <_strtod_l+0xbba>
 8007e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e0a:	9005      	str	r0, [sp, #20]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	9308      	str	r3, [sp, #32]
 8007e10:	4605      	mov	r5, r0
 8007e12:	3a30      	subs	r2, #48	; 0x30
 8007e14:	f100 0301 	add.w	r3, r0, #1
 8007e18:	d014      	beq.n	8007e44 <_strtod_l+0x244>
 8007e1a:	9905      	ldr	r1, [sp, #20]
 8007e1c:	4419      	add	r1, r3
 8007e1e:	9105      	str	r1, [sp, #20]
 8007e20:	462b      	mov	r3, r5
 8007e22:	eb00 0e05 	add.w	lr, r0, r5
 8007e26:	210a      	movs	r1, #10
 8007e28:	4573      	cmp	r3, lr
 8007e2a:	d113      	bne.n	8007e54 <_strtod_l+0x254>
 8007e2c:	182b      	adds	r3, r5, r0
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	f105 0501 	add.w	r5, r5, #1
 8007e34:	4405      	add	r5, r0
 8007e36:	dc1c      	bgt.n	8007e72 <_strtod_l+0x272>
 8007e38:	9907      	ldr	r1, [sp, #28]
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	fb03 2301 	mla	r3, r3, r1, r2
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	2300      	movs	r3, #0
 8007e44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e46:	1c51      	adds	r1, r2, #1
 8007e48:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e4a:	7852      	ldrb	r2, [r2, #1]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	e7c9      	b.n	8007de4 <_strtod_l+0x1e4>
 8007e50:	4638      	mov	r0, r7
 8007e52:	e7d2      	b.n	8007dfa <_strtod_l+0x1fa>
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	dc04      	bgt.n	8007e62 <_strtod_l+0x262>
 8007e58:	9e07      	ldr	r6, [sp, #28]
 8007e5a:	434e      	muls	r6, r1
 8007e5c:	9607      	str	r6, [sp, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	e7e2      	b.n	8007e28 <_strtod_l+0x228>
 8007e62:	f103 0c01 	add.w	ip, r3, #1
 8007e66:	f1bc 0f10 	cmp.w	ip, #16
 8007e6a:	bfd8      	it	le
 8007e6c:	fb01 f909 	mulle.w	r9, r1, r9
 8007e70:	e7f5      	b.n	8007e5e <_strtod_l+0x25e>
 8007e72:	2d10      	cmp	r5, #16
 8007e74:	bfdc      	itt	le
 8007e76:	230a      	movle	r3, #10
 8007e78:	fb03 2909 	mlale	r9, r3, r9, r2
 8007e7c:	e7e1      	b.n	8007e42 <_strtod_l+0x242>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	2301      	movs	r3, #1
 8007e84:	e77c      	b.n	8007d80 <_strtod_l+0x180>
 8007e86:	f04f 0c00 	mov.w	ip, #0
 8007e8a:	f108 0202 	add.w	r2, r8, #2
 8007e8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007e94:	e785      	b.n	8007da2 <_strtod_l+0x1a2>
 8007e96:	f04f 0c01 	mov.w	ip, #1
 8007e9a:	e7f6      	b.n	8007e8a <_strtod_l+0x28a>
 8007e9c:	0800c844 	.word	0x0800c844
 8007ea0:	0800c594 	.word	0x0800c594
 8007ea4:	7ff00000 	.word	0x7ff00000
 8007ea8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007eaa:	1c51      	adds	r1, r2, #1
 8007eac:	9117      	str	r1, [sp, #92]	; 0x5c
 8007eae:	7852      	ldrb	r2, [r2, #1]
 8007eb0:	2a30      	cmp	r2, #48	; 0x30
 8007eb2:	d0f9      	beq.n	8007ea8 <_strtod_l+0x2a8>
 8007eb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007eb8:	2908      	cmp	r1, #8
 8007eba:	f63f af79 	bhi.w	8007db0 <_strtod_l+0x1b0>
 8007ebe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ec2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ec4:	9206      	str	r2, [sp, #24]
 8007ec6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ec8:	1c51      	adds	r1, r2, #1
 8007eca:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ecc:	7852      	ldrb	r2, [r2, #1]
 8007ece:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007ed2:	2e09      	cmp	r6, #9
 8007ed4:	d937      	bls.n	8007f46 <_strtod_l+0x346>
 8007ed6:	9e06      	ldr	r6, [sp, #24]
 8007ed8:	1b89      	subs	r1, r1, r6
 8007eda:	2908      	cmp	r1, #8
 8007edc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ee0:	dc02      	bgt.n	8007ee8 <_strtod_l+0x2e8>
 8007ee2:	4576      	cmp	r6, lr
 8007ee4:	bfa8      	it	ge
 8007ee6:	4676      	movge	r6, lr
 8007ee8:	f1bc 0f00 	cmp.w	ip, #0
 8007eec:	d000      	beq.n	8007ef0 <_strtod_l+0x2f0>
 8007eee:	4276      	negs	r6, r6
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d14d      	bne.n	8007f90 <_strtod_l+0x390>
 8007ef4:	9904      	ldr	r1, [sp, #16]
 8007ef6:	4301      	orrs	r1, r0
 8007ef8:	f47f aec6 	bne.w	8007c88 <_strtod_l+0x88>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f47f aee1 	bne.w	8007cc4 <_strtod_l+0xc4>
 8007f02:	2a69      	cmp	r2, #105	; 0x69
 8007f04:	d027      	beq.n	8007f56 <_strtod_l+0x356>
 8007f06:	dc24      	bgt.n	8007f52 <_strtod_l+0x352>
 8007f08:	2a49      	cmp	r2, #73	; 0x49
 8007f0a:	d024      	beq.n	8007f56 <_strtod_l+0x356>
 8007f0c:	2a4e      	cmp	r2, #78	; 0x4e
 8007f0e:	f47f aed9 	bne.w	8007cc4 <_strtod_l+0xc4>
 8007f12:	499f      	ldr	r1, [pc, #636]	; (8008190 <_strtod_l+0x590>)
 8007f14:	a817      	add	r0, sp, #92	; 0x5c
 8007f16:	f002 f8d7 	bl	800a0c8 <__match>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	f43f aed2 	beq.w	8007cc4 <_strtod_l+0xc4>
 8007f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b28      	cmp	r3, #40	; 0x28
 8007f26:	d12d      	bne.n	8007f84 <_strtod_l+0x384>
 8007f28:	499a      	ldr	r1, [pc, #616]	; (8008194 <_strtod_l+0x594>)
 8007f2a:	aa1a      	add	r2, sp, #104	; 0x68
 8007f2c:	a817      	add	r0, sp, #92	; 0x5c
 8007f2e:	f002 f8df 	bl	800a0f0 <__hexnan>
 8007f32:	2805      	cmp	r0, #5
 8007f34:	d126      	bne.n	8007f84 <_strtod_l+0x384>
 8007f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007f3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f44:	e6a0      	b.n	8007c88 <_strtod_l+0x88>
 8007f46:	210a      	movs	r1, #10
 8007f48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007f4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007f50:	e7b9      	b.n	8007ec6 <_strtod_l+0x2c6>
 8007f52:	2a6e      	cmp	r2, #110	; 0x6e
 8007f54:	e7db      	b.n	8007f0e <_strtod_l+0x30e>
 8007f56:	4990      	ldr	r1, [pc, #576]	; (8008198 <_strtod_l+0x598>)
 8007f58:	a817      	add	r0, sp, #92	; 0x5c
 8007f5a:	f002 f8b5 	bl	800a0c8 <__match>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aeb0 	beq.w	8007cc4 <_strtod_l+0xc4>
 8007f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f66:	498d      	ldr	r1, [pc, #564]	; (800819c <_strtod_l+0x59c>)
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	a817      	add	r0, sp, #92	; 0x5c
 8007f6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f6e:	f002 f8ab 	bl	800a0c8 <__match>
 8007f72:	b910      	cbnz	r0, 8007f7a <_strtod_l+0x37a>
 8007f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f76:	3301      	adds	r3, #1
 8007f78:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80081ac <_strtod_l+0x5ac>
 8007f7e:	f04f 0a00 	mov.w	sl, #0
 8007f82:	e681      	b.n	8007c88 <_strtod_l+0x88>
 8007f84:	4886      	ldr	r0, [pc, #536]	; (80081a0 <_strtod_l+0x5a0>)
 8007f86:	f003 fde3 	bl	800bb50 <nan>
 8007f8a:	ec5b ab10 	vmov	sl, fp, d0
 8007f8e:	e67b      	b.n	8007c88 <_strtod_l+0x88>
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	9807      	ldr	r0, [sp, #28]
 8007f94:	1af3      	subs	r3, r6, r3
 8007f96:	2f00      	cmp	r7, #0
 8007f98:	bf08      	it	eq
 8007f9a:	462f      	moveq	r7, r5
 8007f9c:	2d10      	cmp	r5, #16
 8007f9e:	9306      	str	r3, [sp, #24]
 8007fa0:	46a8      	mov	r8, r5
 8007fa2:	bfa8      	it	ge
 8007fa4:	f04f 0810 	movge.w	r8, #16
 8007fa8:	f7f8 faac 	bl	8000504 <__aeabi_ui2d>
 8007fac:	2d09      	cmp	r5, #9
 8007fae:	4682      	mov	sl, r0
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	dd13      	ble.n	8007fdc <_strtod_l+0x3dc>
 8007fb4:	4b7b      	ldr	r3, [pc, #492]	; (80081a4 <_strtod_l+0x5a4>)
 8007fb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007fba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	4682      	mov	sl, r0
 8007fc4:	4648      	mov	r0, r9
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	f7f8 fa9c 	bl	8000504 <__aeabi_ui2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 f95a 	bl	800028c <__adddf3>
 8007fd8:	4682      	mov	sl, r0
 8007fda:	468b      	mov	fp, r1
 8007fdc:	2d0f      	cmp	r5, #15
 8007fde:	dc38      	bgt.n	8008052 <_strtod_l+0x452>
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f43f ae50 	beq.w	8007c88 <_strtod_l+0x88>
 8007fe8:	dd24      	ble.n	8008034 <_strtod_l+0x434>
 8007fea:	2b16      	cmp	r3, #22
 8007fec:	dc0b      	bgt.n	8008006 <_strtod_l+0x406>
 8007fee:	496d      	ldr	r1, [pc, #436]	; (80081a4 <_strtod_l+0x5a4>)
 8007ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	465b      	mov	r3, fp
 8007ffc:	f7f8 fafc 	bl	80005f8 <__aeabi_dmul>
 8008000:	4682      	mov	sl, r0
 8008002:	468b      	mov	fp, r1
 8008004:	e640      	b.n	8007c88 <_strtod_l+0x88>
 8008006:	9a06      	ldr	r2, [sp, #24]
 8008008:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800800c:	4293      	cmp	r3, r2
 800800e:	db20      	blt.n	8008052 <_strtod_l+0x452>
 8008010:	4c64      	ldr	r4, [pc, #400]	; (80081a4 <_strtod_l+0x5a4>)
 8008012:	f1c5 050f 	rsb	r5, r5, #15
 8008016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	1b5d      	subs	r5, r3, r5
 800802a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800802e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008032:	e7e3      	b.n	8007ffc <_strtod_l+0x3fc>
 8008034:	9b06      	ldr	r3, [sp, #24]
 8008036:	3316      	adds	r3, #22
 8008038:	db0b      	blt.n	8008052 <_strtod_l+0x452>
 800803a:	9b05      	ldr	r3, [sp, #20]
 800803c:	1b9e      	subs	r6, r3, r6
 800803e:	4b59      	ldr	r3, [pc, #356]	; (80081a4 <_strtod_l+0x5a4>)
 8008040:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008048:	4650      	mov	r0, sl
 800804a:	4659      	mov	r1, fp
 800804c:	f7f8 fbfe 	bl	800084c <__aeabi_ddiv>
 8008050:	e7d6      	b.n	8008000 <_strtod_l+0x400>
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	eba5 0808 	sub.w	r8, r5, r8
 8008058:	4498      	add	r8, r3
 800805a:	f1b8 0f00 	cmp.w	r8, #0
 800805e:	dd74      	ble.n	800814a <_strtod_l+0x54a>
 8008060:	f018 030f 	ands.w	r3, r8, #15
 8008064:	d00a      	beq.n	800807c <_strtod_l+0x47c>
 8008066:	494f      	ldr	r1, [pc, #316]	; (80081a4 <_strtod_l+0x5a4>)
 8008068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800806c:	4652      	mov	r2, sl
 800806e:	465b      	mov	r3, fp
 8008070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008074:	f7f8 fac0 	bl	80005f8 <__aeabi_dmul>
 8008078:	4682      	mov	sl, r0
 800807a:	468b      	mov	fp, r1
 800807c:	f038 080f 	bics.w	r8, r8, #15
 8008080:	d04f      	beq.n	8008122 <_strtod_l+0x522>
 8008082:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008086:	dd22      	ble.n	80080ce <_strtod_l+0x4ce>
 8008088:	2500      	movs	r5, #0
 800808a:	462e      	mov	r6, r5
 800808c:	9507      	str	r5, [sp, #28]
 800808e:	9505      	str	r5, [sp, #20]
 8008090:	2322      	movs	r3, #34	; 0x22
 8008092:	f8df b118 	ldr.w	fp, [pc, #280]	; 80081ac <_strtod_l+0x5ac>
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	f04f 0a00 	mov.w	sl, #0
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f43f adf2 	beq.w	8007c88 <_strtod_l+0x88>
 80080a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080a6:	4620      	mov	r0, r4
 80080a8:	f002 f9a6 	bl	800a3f8 <_Bfree>
 80080ac:	9905      	ldr	r1, [sp, #20]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f002 f9a2 	bl	800a3f8 <_Bfree>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4620      	mov	r0, r4
 80080b8:	f002 f99e 	bl	800a3f8 <_Bfree>
 80080bc:	9907      	ldr	r1, [sp, #28]
 80080be:	4620      	mov	r0, r4
 80080c0:	f002 f99a 	bl	800a3f8 <_Bfree>
 80080c4:	4629      	mov	r1, r5
 80080c6:	4620      	mov	r0, r4
 80080c8:	f002 f996 	bl	800a3f8 <_Bfree>
 80080cc:	e5dc      	b.n	8007c88 <_strtod_l+0x88>
 80080ce:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <_strtod_l+0x5a8>)
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	2300      	movs	r3, #0
 80080d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80080d8:	4650      	mov	r0, sl
 80080da:	4659      	mov	r1, fp
 80080dc:	4699      	mov	r9, r3
 80080de:	f1b8 0f01 	cmp.w	r8, #1
 80080e2:	dc21      	bgt.n	8008128 <_strtod_l+0x528>
 80080e4:	b10b      	cbz	r3, 80080ea <_strtod_l+0x4ea>
 80080e6:	4682      	mov	sl, r0
 80080e8:	468b      	mov	fp, r1
 80080ea:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <_strtod_l+0x5a8>)
 80080ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80080f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80080f4:	4652      	mov	r2, sl
 80080f6:	465b      	mov	r3, fp
 80080f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80080fc:	f7f8 fa7c 	bl	80005f8 <__aeabi_dmul>
 8008100:	4b2a      	ldr	r3, [pc, #168]	; (80081ac <_strtod_l+0x5ac>)
 8008102:	460a      	mov	r2, r1
 8008104:	400b      	ands	r3, r1
 8008106:	492a      	ldr	r1, [pc, #168]	; (80081b0 <_strtod_l+0x5b0>)
 8008108:	428b      	cmp	r3, r1
 800810a:	4682      	mov	sl, r0
 800810c:	d8bc      	bhi.n	8008088 <_strtod_l+0x488>
 800810e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008112:	428b      	cmp	r3, r1
 8008114:	bf86      	itte	hi
 8008116:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80081b4 <_strtod_l+0x5b4>
 800811a:	f04f 3aff 	movhi.w	sl, #4294967295
 800811e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008122:	2300      	movs	r3, #0
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	e084      	b.n	8008232 <_strtod_l+0x632>
 8008128:	f018 0f01 	tst.w	r8, #1
 800812c:	d005      	beq.n	800813a <_strtod_l+0x53a>
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	2301      	movs	r3, #1
 800813a:	9a04      	ldr	r2, [sp, #16]
 800813c:	3208      	adds	r2, #8
 800813e:	f109 0901 	add.w	r9, r9, #1
 8008142:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008146:	9204      	str	r2, [sp, #16]
 8008148:	e7c9      	b.n	80080de <_strtod_l+0x4de>
 800814a:	d0ea      	beq.n	8008122 <_strtod_l+0x522>
 800814c:	f1c8 0800 	rsb	r8, r8, #0
 8008150:	f018 020f 	ands.w	r2, r8, #15
 8008154:	d00a      	beq.n	800816c <_strtod_l+0x56c>
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <_strtod_l+0x5a4>)
 8008158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800815c:	4650      	mov	r0, sl
 800815e:	4659      	mov	r1, fp
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 fb72 	bl	800084c <__aeabi_ddiv>
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008170:	d0d7      	beq.n	8008122 <_strtod_l+0x522>
 8008172:	f1b8 0f1f 	cmp.w	r8, #31
 8008176:	dd1f      	ble.n	80081b8 <_strtod_l+0x5b8>
 8008178:	2500      	movs	r5, #0
 800817a:	462e      	mov	r6, r5
 800817c:	9507      	str	r5, [sp, #28]
 800817e:	9505      	str	r5, [sp, #20]
 8008180:	2322      	movs	r3, #34	; 0x22
 8008182:	f04f 0a00 	mov.w	sl, #0
 8008186:	f04f 0b00 	mov.w	fp, #0
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	e786      	b.n	800809c <_strtod_l+0x49c>
 800818e:	bf00      	nop
 8008190:	0800c569 	.word	0x0800c569
 8008194:	0800c5a8 	.word	0x0800c5a8
 8008198:	0800c561 	.word	0x0800c561
 800819c:	0800c6ec 	.word	0x0800c6ec
 80081a0:	0800ca1b 	.word	0x0800ca1b
 80081a4:	0800c8e0 	.word	0x0800c8e0
 80081a8:	0800c8b8 	.word	0x0800c8b8
 80081ac:	7ff00000 	.word	0x7ff00000
 80081b0:	7ca00000 	.word	0x7ca00000
 80081b4:	7fefffff 	.word	0x7fefffff
 80081b8:	f018 0310 	ands.w	r3, r8, #16
 80081bc:	bf18      	it	ne
 80081be:	236a      	movne	r3, #106	; 0x6a
 80081c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008570 <_strtod_l+0x970>
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	4650      	mov	r0, sl
 80081c8:	4659      	mov	r1, fp
 80081ca:	2300      	movs	r3, #0
 80081cc:	f018 0f01 	tst.w	r8, #1
 80081d0:	d004      	beq.n	80081dc <_strtod_l+0x5dc>
 80081d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081d6:	f7f8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80081da:	2301      	movs	r3, #1
 80081dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80081e0:	f109 0908 	add.w	r9, r9, #8
 80081e4:	d1f2      	bne.n	80081cc <_strtod_l+0x5cc>
 80081e6:	b10b      	cbz	r3, 80081ec <_strtod_l+0x5ec>
 80081e8:	4682      	mov	sl, r0
 80081ea:	468b      	mov	fp, r1
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	b1c3      	cbz	r3, 8008222 <_strtod_l+0x622>
 80081f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	4659      	mov	r1, fp
 80081fc:	dd11      	ble.n	8008222 <_strtod_l+0x622>
 80081fe:	2b1f      	cmp	r3, #31
 8008200:	f340 8124 	ble.w	800844c <_strtod_l+0x84c>
 8008204:	2b34      	cmp	r3, #52	; 0x34
 8008206:	bfde      	ittt	le
 8008208:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800820c:	f04f 33ff 	movle.w	r3, #4294967295
 8008210:	fa03 f202 	lslle.w	r2, r3, r2
 8008214:	f04f 0a00 	mov.w	sl, #0
 8008218:	bfcc      	ite	gt
 800821a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800821e:	ea02 0b01 	andle.w	fp, r2, r1
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	4650      	mov	r0, sl
 8008228:	4659      	mov	r1, fp
 800822a:	f7f8 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800822e:	2800      	cmp	r0, #0
 8008230:	d1a2      	bne.n	8008178 <_strtod_l+0x578>
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	9908      	ldr	r1, [sp, #32]
 8008238:	462b      	mov	r3, r5
 800823a:	463a      	mov	r2, r7
 800823c:	4620      	mov	r0, r4
 800823e:	f002 f943 	bl	800a4c8 <__s2b>
 8008242:	9007      	str	r0, [sp, #28]
 8008244:	2800      	cmp	r0, #0
 8008246:	f43f af1f 	beq.w	8008088 <_strtod_l+0x488>
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	1b9e      	subs	r6, r3, r6
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfb4      	ite	lt
 8008254:	4633      	movlt	r3, r6
 8008256:	2300      	movge	r3, #0
 8008258:	930c      	str	r3, [sp, #48]	; 0x30
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2500      	movs	r5, #0
 800825e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008262:	9312      	str	r3, [sp, #72]	; 0x48
 8008264:	462e      	mov	r6, r5
 8008266:	9b07      	ldr	r3, [sp, #28]
 8008268:	4620      	mov	r0, r4
 800826a:	6859      	ldr	r1, [r3, #4]
 800826c:	f002 f884 	bl	800a378 <_Balloc>
 8008270:	9005      	str	r0, [sp, #20]
 8008272:	2800      	cmp	r0, #0
 8008274:	f43f af0c 	beq.w	8008090 <_strtod_l+0x490>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	3202      	adds	r2, #2
 800827e:	f103 010c 	add.w	r1, r3, #12
 8008282:	0092      	lsls	r2, r2, #2
 8008284:	300c      	adds	r0, #12
 8008286:	f002 f869 	bl	800a35c <memcpy>
 800828a:	ec4b ab10 	vmov	d0, sl, fp
 800828e:	aa1a      	add	r2, sp, #104	; 0x68
 8008290:	a919      	add	r1, sp, #100	; 0x64
 8008292:	4620      	mov	r0, r4
 8008294:	f002 fc5e 	bl	800ab54 <__d2b>
 8008298:	ec4b ab18 	vmov	d8, sl, fp
 800829c:	9018      	str	r0, [sp, #96]	; 0x60
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f aef6 	beq.w	8008090 <_strtod_l+0x490>
 80082a4:	2101      	movs	r1, #1
 80082a6:	4620      	mov	r0, r4
 80082a8:	f002 f9a8 	bl	800a5fc <__i2b>
 80082ac:	4606      	mov	r6, r0
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f aeee 	beq.w	8008090 <_strtod_l+0x490>
 80082b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082b6:	9904      	ldr	r1, [sp, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfab      	itete	ge
 80082bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80082be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80082c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80082c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80082c6:	bfac      	ite	ge
 80082c8:	eb03 0902 	addge.w	r9, r3, r2
 80082cc:	1ad7      	sublt	r7, r2, r3
 80082ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082d0:	eba3 0801 	sub.w	r8, r3, r1
 80082d4:	4490      	add	r8, r2
 80082d6:	4ba1      	ldr	r3, [pc, #644]	; (800855c <_strtod_l+0x95c>)
 80082d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80082dc:	4598      	cmp	r8, r3
 80082de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082e2:	f280 80c7 	bge.w	8008474 <_strtod_l+0x874>
 80082e6:	eba3 0308 	sub.w	r3, r3, r8
 80082ea:	2b1f      	cmp	r3, #31
 80082ec:	eba2 0203 	sub.w	r2, r2, r3
 80082f0:	f04f 0101 	mov.w	r1, #1
 80082f4:	f300 80b1 	bgt.w	800845a <_strtod_l+0x85a>
 80082f8:	fa01 f303 	lsl.w	r3, r1, r3
 80082fc:	930d      	str	r3, [sp, #52]	; 0x34
 80082fe:	2300      	movs	r3, #0
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	eb09 0802 	add.w	r8, r9, r2
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	45c1      	cmp	r9, r8
 800830a:	4417      	add	r7, r2
 800830c:	441f      	add	r7, r3
 800830e:	464b      	mov	r3, r9
 8008310:	bfa8      	it	ge
 8008312:	4643      	movge	r3, r8
 8008314:	42bb      	cmp	r3, r7
 8008316:	bfa8      	it	ge
 8008318:	463b      	movge	r3, r7
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfc2      	ittt	gt
 800831e:	eba8 0803 	subgt.w	r8, r8, r3
 8008322:	1aff      	subgt	r7, r7, r3
 8008324:	eba9 0903 	subgt.w	r9, r9, r3
 8008328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd17      	ble.n	800835e <_strtod_l+0x75e>
 800832e:	4631      	mov	r1, r6
 8008330:	461a      	mov	r2, r3
 8008332:	4620      	mov	r0, r4
 8008334:	f002 fa22 	bl	800a77c <__pow5mult>
 8008338:	4606      	mov	r6, r0
 800833a:	2800      	cmp	r0, #0
 800833c:	f43f aea8 	beq.w	8008090 <_strtod_l+0x490>
 8008340:	4601      	mov	r1, r0
 8008342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008344:	4620      	mov	r0, r4
 8008346:	f002 f96f 	bl	800a628 <__multiply>
 800834a:	900b      	str	r0, [sp, #44]	; 0x2c
 800834c:	2800      	cmp	r0, #0
 800834e:	f43f ae9f 	beq.w	8008090 <_strtod_l+0x490>
 8008352:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008354:	4620      	mov	r0, r4
 8008356:	f002 f84f 	bl	800a3f8 <_Bfree>
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	9318      	str	r3, [sp, #96]	; 0x60
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	f300 808c 	bgt.w	800847e <_strtod_l+0x87e>
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dd08      	ble.n	800837e <_strtod_l+0x77e>
 800836c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836e:	9905      	ldr	r1, [sp, #20]
 8008370:	4620      	mov	r0, r4
 8008372:	f002 fa03 	bl	800a77c <__pow5mult>
 8008376:	9005      	str	r0, [sp, #20]
 8008378:	2800      	cmp	r0, #0
 800837a:	f43f ae89 	beq.w	8008090 <_strtod_l+0x490>
 800837e:	2f00      	cmp	r7, #0
 8008380:	dd08      	ble.n	8008394 <_strtod_l+0x794>
 8008382:	9905      	ldr	r1, [sp, #20]
 8008384:	463a      	mov	r2, r7
 8008386:	4620      	mov	r0, r4
 8008388:	f002 fa52 	bl	800a830 <__lshift>
 800838c:	9005      	str	r0, [sp, #20]
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f ae7e 	beq.w	8008090 <_strtod_l+0x490>
 8008394:	f1b9 0f00 	cmp.w	r9, #0
 8008398:	dd08      	ble.n	80083ac <_strtod_l+0x7ac>
 800839a:	4631      	mov	r1, r6
 800839c:	464a      	mov	r2, r9
 800839e:	4620      	mov	r0, r4
 80083a0:	f002 fa46 	bl	800a830 <__lshift>
 80083a4:	4606      	mov	r6, r0
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f ae72 	beq.w	8008090 <_strtod_l+0x490>
 80083ac:	9a05      	ldr	r2, [sp, #20]
 80083ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083b0:	4620      	mov	r0, r4
 80083b2:	f002 fac9 	bl	800a948 <__mdiff>
 80083b6:	4605      	mov	r5, r0
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f43f ae69 	beq.w	8008090 <_strtod_l+0x490>
 80083be:	68c3      	ldr	r3, [r0, #12]
 80083c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c2:	2300      	movs	r3, #0
 80083c4:	60c3      	str	r3, [r0, #12]
 80083c6:	4631      	mov	r1, r6
 80083c8:	f002 faa2 	bl	800a910 <__mcmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	da60      	bge.n	8008492 <_strtod_l+0x892>
 80083d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d2:	ea53 030a 	orrs.w	r3, r3, sl
 80083d6:	f040 8082 	bne.w	80084de <_strtod_l+0x8de>
 80083da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d17d      	bne.n	80084de <_strtod_l+0x8de>
 80083e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	051b      	lsls	r3, r3, #20
 80083ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80083ee:	d976      	bls.n	80084de <_strtod_l+0x8de>
 80083f0:	696b      	ldr	r3, [r5, #20]
 80083f2:	b913      	cbnz	r3, 80083fa <_strtod_l+0x7fa>
 80083f4:	692b      	ldr	r3, [r5, #16]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	dd71      	ble.n	80084de <_strtod_l+0x8de>
 80083fa:	4629      	mov	r1, r5
 80083fc:	2201      	movs	r2, #1
 80083fe:	4620      	mov	r0, r4
 8008400:	f002 fa16 	bl	800a830 <__lshift>
 8008404:	4631      	mov	r1, r6
 8008406:	4605      	mov	r5, r0
 8008408:	f002 fa82 	bl	800a910 <__mcmp>
 800840c:	2800      	cmp	r0, #0
 800840e:	dd66      	ble.n	80084de <_strtod_l+0x8de>
 8008410:	9904      	ldr	r1, [sp, #16]
 8008412:	4a53      	ldr	r2, [pc, #332]	; (8008560 <_strtod_l+0x960>)
 8008414:	465b      	mov	r3, fp
 8008416:	2900      	cmp	r1, #0
 8008418:	f000 8081 	beq.w	800851e <_strtod_l+0x91e>
 800841c:	ea02 010b 	and.w	r1, r2, fp
 8008420:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008424:	dc7b      	bgt.n	800851e <_strtod_l+0x91e>
 8008426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800842a:	f77f aea9 	ble.w	8008180 <_strtod_l+0x580>
 800842e:	4b4d      	ldr	r3, [pc, #308]	; (8008564 <_strtod_l+0x964>)
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	2200      	movs	r2, #0
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	460b      	mov	r3, r1
 800843c:	4303      	orrs	r3, r0
 800843e:	bf08      	it	eq
 8008440:	2322      	moveq	r3, #34	; 0x22
 8008442:	4682      	mov	sl, r0
 8008444:	468b      	mov	fp, r1
 8008446:	bf08      	it	eq
 8008448:	6023      	streq	r3, [r4, #0]
 800844a:	e62b      	b.n	80080a4 <_strtod_l+0x4a4>
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	ea03 0a0a 	and.w	sl, r3, sl
 8008458:	e6e3      	b.n	8008222 <_strtod_l+0x622>
 800845a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800845e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008462:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008466:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800846a:	fa01 f308 	lsl.w	r3, r1, r8
 800846e:	9308      	str	r3, [sp, #32]
 8008470:	910d      	str	r1, [sp, #52]	; 0x34
 8008472:	e746      	b.n	8008302 <_strtod_l+0x702>
 8008474:	2300      	movs	r3, #0
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	2301      	movs	r3, #1
 800847a:	930d      	str	r3, [sp, #52]	; 0x34
 800847c:	e741      	b.n	8008302 <_strtod_l+0x702>
 800847e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008480:	4642      	mov	r2, r8
 8008482:	4620      	mov	r0, r4
 8008484:	f002 f9d4 	bl	800a830 <__lshift>
 8008488:	9018      	str	r0, [sp, #96]	; 0x60
 800848a:	2800      	cmp	r0, #0
 800848c:	f47f af6b 	bne.w	8008366 <_strtod_l+0x766>
 8008490:	e5fe      	b.n	8008090 <_strtod_l+0x490>
 8008492:	465f      	mov	r7, fp
 8008494:	d16e      	bne.n	8008574 <_strtod_l+0x974>
 8008496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800849c:	b342      	cbz	r2, 80084f0 <_strtod_l+0x8f0>
 800849e:	4a32      	ldr	r2, [pc, #200]	; (8008568 <_strtod_l+0x968>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d128      	bne.n	80084f6 <_strtod_l+0x8f6>
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	4651      	mov	r1, sl
 80084a8:	b1eb      	cbz	r3, 80084e6 <_strtod_l+0x8e6>
 80084aa:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <_strtod_l+0x960>)
 80084ac:	403b      	ands	r3, r7
 80084ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	d819      	bhi.n	80084ec <_strtod_l+0x8ec>
 80084b8:	0d1b      	lsrs	r3, r3, #20
 80084ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	4299      	cmp	r1, r3
 80084c4:	d117      	bne.n	80084f6 <_strtod_l+0x8f6>
 80084c6:	4b29      	ldr	r3, [pc, #164]	; (800856c <_strtod_l+0x96c>)
 80084c8:	429f      	cmp	r7, r3
 80084ca:	d102      	bne.n	80084d2 <_strtod_l+0x8d2>
 80084cc:	3101      	adds	r1, #1
 80084ce:	f43f addf 	beq.w	8008090 <_strtod_l+0x490>
 80084d2:	4b23      	ldr	r3, [pc, #140]	; (8008560 <_strtod_l+0x960>)
 80084d4:	403b      	ands	r3, r7
 80084d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80084da:	f04f 0a00 	mov.w	sl, #0
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1a4      	bne.n	800842e <_strtod_l+0x82e>
 80084e4:	e5de      	b.n	80080a4 <_strtod_l+0x4a4>
 80084e6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ea:	e7ea      	b.n	80084c2 <_strtod_l+0x8c2>
 80084ec:	4613      	mov	r3, r2
 80084ee:	e7e8      	b.n	80084c2 <_strtod_l+0x8c2>
 80084f0:	ea53 030a 	orrs.w	r3, r3, sl
 80084f4:	d08c      	beq.n	8008410 <_strtod_l+0x810>
 80084f6:	9b08      	ldr	r3, [sp, #32]
 80084f8:	b1db      	cbz	r3, 8008532 <_strtod_l+0x932>
 80084fa:	423b      	tst	r3, r7
 80084fc:	d0ef      	beq.n	80084de <_strtod_l+0x8de>
 80084fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008500:	9a04      	ldr	r2, [sp, #16]
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	b1c3      	cbz	r3, 800853a <_strtod_l+0x93a>
 8008508:	f7ff fb5d 	bl	8007bc6 <sulp>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	ec51 0b18 	vmov	r0, r1, d8
 8008514:	f7f7 feba 	bl	800028c <__adddf3>
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	e7df      	b.n	80084de <_strtod_l+0x8de>
 800851e:	4013      	ands	r3, r2
 8008520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800852c:	f04f 3aff 	mov.w	sl, #4294967295
 8008530:	e7d5      	b.n	80084de <_strtod_l+0x8de>
 8008532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008534:	ea13 0f0a 	tst.w	r3, sl
 8008538:	e7e0      	b.n	80084fc <_strtod_l+0x8fc>
 800853a:	f7ff fb44 	bl	8007bc6 <sulp>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	ec51 0b18 	vmov	r0, r1, d8
 8008546:	f7f7 fe9f 	bl	8000288 <__aeabi_dsub>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4682      	mov	sl, r0
 8008550:	468b      	mov	fp, r1
 8008552:	f7f8 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	d0c1      	beq.n	80084de <_strtod_l+0x8de>
 800855a:	e611      	b.n	8008180 <_strtod_l+0x580>
 800855c:	fffffc02 	.word	0xfffffc02
 8008560:	7ff00000 	.word	0x7ff00000
 8008564:	39500000 	.word	0x39500000
 8008568:	000fffff 	.word	0x000fffff
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	0800c5c0 	.word	0x0800c5c0
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	f002 fb48 	bl	800ac0c <__ratio>
 800857c:	ec59 8b10 	vmov	r8, r9, d0
 8008580:	ee10 0a10 	vmov	r0, s0
 8008584:	2200      	movs	r2, #0
 8008586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800858a:	4649      	mov	r1, r9
 800858c:	f7f8 fab0 	bl	8000af0 <__aeabi_dcmple>
 8008590:	2800      	cmp	r0, #0
 8008592:	d07a      	beq.n	800868a <_strtod_l+0xa8a>
 8008594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d04a      	beq.n	8008630 <_strtod_l+0xa30>
 800859a:	4b95      	ldr	r3, [pc, #596]	; (80087f0 <_strtod_l+0xbf0>)
 800859c:	2200      	movs	r2, #0
 800859e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80087f0 <_strtod_l+0xbf0>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	4b92      	ldr	r3, [pc, #584]	; (80087f4 <_strtod_l+0xbf4>)
 80085ac:	403b      	ands	r3, r7
 80085ae:	930d      	str	r3, [sp, #52]	; 0x34
 80085b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085b2:	4b91      	ldr	r3, [pc, #580]	; (80087f8 <_strtod_l+0xbf8>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	f040 80b0 	bne.w	800871a <_strtod_l+0xb1a>
 80085ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80085c2:	ec4b ab10 	vmov	d0, sl, fp
 80085c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085ca:	f002 fa47 	bl	800aa5c <__ulp>
 80085ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085d2:	ec53 2b10 	vmov	r2, r3, d0
 80085d6:	f7f8 f80f 	bl	80005f8 <__aeabi_dmul>
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	f7f7 fe55 	bl	800028c <__adddf3>
 80085e2:	460b      	mov	r3, r1
 80085e4:	4983      	ldr	r1, [pc, #524]	; (80087f4 <_strtod_l+0xbf4>)
 80085e6:	4a85      	ldr	r2, [pc, #532]	; (80087fc <_strtod_l+0xbfc>)
 80085e8:	4019      	ands	r1, r3
 80085ea:	4291      	cmp	r1, r2
 80085ec:	4682      	mov	sl, r0
 80085ee:	d960      	bls.n	80086b2 <_strtod_l+0xab2>
 80085f0:	ee18 3a90 	vmov	r3, s17
 80085f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d104      	bne.n	8008606 <_strtod_l+0xa06>
 80085fc:	ee18 3a10 	vmov	r3, s16
 8008600:	3301      	adds	r3, #1
 8008602:	f43f ad45 	beq.w	8008090 <_strtod_l+0x490>
 8008606:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008808 <_strtod_l+0xc08>
 800860a:	f04f 3aff 	mov.w	sl, #4294967295
 800860e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008610:	4620      	mov	r0, r4
 8008612:	f001 fef1 	bl	800a3f8 <_Bfree>
 8008616:	9905      	ldr	r1, [sp, #20]
 8008618:	4620      	mov	r0, r4
 800861a:	f001 feed 	bl	800a3f8 <_Bfree>
 800861e:	4631      	mov	r1, r6
 8008620:	4620      	mov	r0, r4
 8008622:	f001 fee9 	bl	800a3f8 <_Bfree>
 8008626:	4629      	mov	r1, r5
 8008628:	4620      	mov	r0, r4
 800862a:	f001 fee5 	bl	800a3f8 <_Bfree>
 800862e:	e61a      	b.n	8008266 <_strtod_l+0x666>
 8008630:	f1ba 0f00 	cmp.w	sl, #0
 8008634:	d11b      	bne.n	800866e <_strtod_l+0xa6e>
 8008636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800863a:	b9f3      	cbnz	r3, 800867a <_strtod_l+0xa7a>
 800863c:	4b6c      	ldr	r3, [pc, #432]	; (80087f0 <_strtod_l+0xbf0>)
 800863e:	2200      	movs	r2, #0
 8008640:	4640      	mov	r0, r8
 8008642:	4649      	mov	r1, r9
 8008644:	f7f8 fa4a 	bl	8000adc <__aeabi_dcmplt>
 8008648:	b9d0      	cbnz	r0, 8008680 <_strtod_l+0xa80>
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	4b6c      	ldr	r3, [pc, #432]	; (8008800 <_strtod_l+0xc00>)
 8008650:	2200      	movs	r2, #0
 8008652:	f7f7 ffd1 	bl	80005f8 <__aeabi_dmul>
 8008656:	4680      	mov	r8, r0
 8008658:	4689      	mov	r9, r1
 800865a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800865e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008662:	9315      	str	r3, [sp, #84]	; 0x54
 8008664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008668:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800866c:	e79d      	b.n	80085aa <_strtod_l+0x9aa>
 800866e:	f1ba 0f01 	cmp.w	sl, #1
 8008672:	d102      	bne.n	800867a <_strtod_l+0xa7a>
 8008674:	2f00      	cmp	r7, #0
 8008676:	f43f ad83 	beq.w	8008180 <_strtod_l+0x580>
 800867a:	4b62      	ldr	r3, [pc, #392]	; (8008804 <_strtod_l+0xc04>)
 800867c:	2200      	movs	r2, #0
 800867e:	e78e      	b.n	800859e <_strtod_l+0x99e>
 8008680:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008800 <_strtod_l+0xc00>
 8008684:	f04f 0800 	mov.w	r8, #0
 8008688:	e7e7      	b.n	800865a <_strtod_l+0xa5a>
 800868a:	4b5d      	ldr	r3, [pc, #372]	; (8008800 <_strtod_l+0xc00>)
 800868c:	4640      	mov	r0, r8
 800868e:	4649      	mov	r1, r9
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ffb1 	bl	80005f8 <__aeabi_dmul>
 8008696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008698:	4680      	mov	r8, r0
 800869a:	4689      	mov	r9, r1
 800869c:	b933      	cbnz	r3, 80086ac <_strtod_l+0xaac>
 800869e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086a2:	900e      	str	r0, [sp, #56]	; 0x38
 80086a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086aa:	e7dd      	b.n	8008668 <_strtod_l+0xa68>
 80086ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80086b0:	e7f9      	b.n	80086a6 <_strtod_l+0xaa6>
 80086b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1a8      	bne.n	800860e <_strtod_l+0xa0e>
 80086bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086c2:	0d1b      	lsrs	r3, r3, #20
 80086c4:	051b      	lsls	r3, r3, #20
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d1a1      	bne.n	800860e <_strtod_l+0xa0e>
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f8 faf3 	bl	8000cb8 <__aeabi_d2lz>
 80086d2:	f7f7 ff63 	bl	800059c <__aeabi_l2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 fdd3 	bl	8000288 <__aeabi_dsub>
 80086e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e8:	ea43 030a 	orr.w	r3, r3, sl
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4680      	mov	r8, r0
 80086f0:	4689      	mov	r9, r1
 80086f2:	d055      	beq.n	80087a0 <_strtod_l+0xba0>
 80086f4:	a336      	add	r3, pc, #216	; (adr r3, 80087d0 <_strtod_l+0xbd0>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f8 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	f47f acd0 	bne.w	80080a4 <_strtod_l+0x4a4>
 8008704:	a334      	add	r3, pc, #208	; (adr r3, 80087d8 <_strtod_l+0xbd8>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	f7f8 fa03 	bl	8000b18 <__aeabi_dcmpgt>
 8008712:	2800      	cmp	r0, #0
 8008714:	f43f af7b 	beq.w	800860e <_strtod_l+0xa0e>
 8008718:	e4c4      	b.n	80080a4 <_strtod_l+0x4a4>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	b333      	cbz	r3, 800876c <_strtod_l+0xb6c>
 800871e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008720:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008724:	d822      	bhi.n	800876c <_strtod_l+0xb6c>
 8008726:	a32e      	add	r3, pc, #184	; (adr r3, 80087e0 <_strtod_l+0xbe0>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	4640      	mov	r0, r8
 800872e:	4649      	mov	r1, r9
 8008730:	f7f8 f9de 	bl	8000af0 <__aeabi_dcmple>
 8008734:	b1a0      	cbz	r0, 8008760 <_strtod_l+0xb60>
 8008736:	4649      	mov	r1, r9
 8008738:	4640      	mov	r0, r8
 800873a:	f7f8 fa35 	bl	8000ba8 <__aeabi_d2uiz>
 800873e:	2801      	cmp	r0, #1
 8008740:	bf38      	it	cc
 8008742:	2001      	movcc	r0, #1
 8008744:	f7f7 fede 	bl	8000504 <__aeabi_ui2d>
 8008748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	bb23      	cbnz	r3, 800879a <_strtod_l+0xb9a>
 8008750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008754:	9010      	str	r0, [sp, #64]	; 0x40
 8008756:	9311      	str	r3, [sp, #68]	; 0x44
 8008758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800875c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008764:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008770:	eeb0 0a48 	vmov.f32	s0, s16
 8008774:	eef0 0a68 	vmov.f32	s1, s17
 8008778:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800877c:	f002 f96e 	bl	800aa5c <__ulp>
 8008780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008784:	ec53 2b10 	vmov	r2, r3, d0
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	ec53 2b18 	vmov	r2, r3, d8
 8008790:	f7f7 fd7c 	bl	800028c <__adddf3>
 8008794:	4682      	mov	sl, r0
 8008796:	468b      	mov	fp, r1
 8008798:	e78d      	b.n	80086b6 <_strtod_l+0xab6>
 800879a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800879e:	e7db      	b.n	8008758 <_strtod_l+0xb58>
 80087a0:	a311      	add	r3, pc, #68	; (adr r3, 80087e8 <_strtod_l+0xbe8>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f7f8 f999 	bl	8000adc <__aeabi_dcmplt>
 80087aa:	e7b2      	b.n	8008712 <_strtod_l+0xb12>
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	f7ff ba6b 	b.w	8007c90 <_strtod_l+0x90>
 80087ba:	2a65      	cmp	r2, #101	; 0x65
 80087bc:	f43f ab5f 	beq.w	8007e7e <_strtod_l+0x27e>
 80087c0:	2a45      	cmp	r2, #69	; 0x45
 80087c2:	f43f ab5c 	beq.w	8007e7e <_strtod_l+0x27e>
 80087c6:	2301      	movs	r3, #1
 80087c8:	f7ff bb94 	b.w	8007ef4 <_strtod_l+0x2f4>
 80087cc:	f3af 8000 	nop.w
 80087d0:	94a03595 	.word	0x94a03595
 80087d4:	3fdfffff 	.word	0x3fdfffff
 80087d8:	35afe535 	.word	0x35afe535
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	ffc00000 	.word	0xffc00000
 80087e4:	41dfffff 	.word	0x41dfffff
 80087e8:	94a03595 	.word	0x94a03595
 80087ec:	3fcfffff 	.word	0x3fcfffff
 80087f0:	3ff00000 	.word	0x3ff00000
 80087f4:	7ff00000 	.word	0x7ff00000
 80087f8:	7fe00000 	.word	0x7fe00000
 80087fc:	7c9fffff 	.word	0x7c9fffff
 8008800:	3fe00000 	.word	0x3fe00000
 8008804:	bff00000 	.word	0xbff00000
 8008808:	7fefffff 	.word	0x7fefffff

0800880c <_strtod_r>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <_strtod_r+0x8>)
 800880e:	f7ff b9f7 	b.w	8007c00 <_strtod_l>
 8008812:	bf00      	nop
 8008814:	200000a4 	.word	0x200000a4

08008818 <_strtol_l.constprop.0>:
 8008818:	2b01      	cmp	r3, #1
 800881a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881e:	d001      	beq.n	8008824 <_strtol_l.constprop.0+0xc>
 8008820:	2b24      	cmp	r3, #36	; 0x24
 8008822:	d906      	bls.n	8008832 <_strtol_l.constprop.0+0x1a>
 8008824:	f7fe f9cc 	bl	8006bc0 <__errno>
 8008828:	2316      	movs	r3, #22
 800882a:	6003      	str	r3, [r0, #0]
 800882c:	2000      	movs	r0, #0
 800882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008832:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008918 <_strtol_l.constprop.0+0x100>
 8008836:	460d      	mov	r5, r1
 8008838:	462e      	mov	r6, r5
 800883a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800883e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008842:	f017 0708 	ands.w	r7, r7, #8
 8008846:	d1f7      	bne.n	8008838 <_strtol_l.constprop.0+0x20>
 8008848:	2c2d      	cmp	r4, #45	; 0x2d
 800884a:	d132      	bne.n	80088b2 <_strtol_l.constprop.0+0x9a>
 800884c:	782c      	ldrb	r4, [r5, #0]
 800884e:	2701      	movs	r7, #1
 8008850:	1cb5      	adds	r5, r6, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d05b      	beq.n	800890e <_strtol_l.constprop.0+0xf6>
 8008856:	2b10      	cmp	r3, #16
 8008858:	d109      	bne.n	800886e <_strtol_l.constprop.0+0x56>
 800885a:	2c30      	cmp	r4, #48	; 0x30
 800885c:	d107      	bne.n	800886e <_strtol_l.constprop.0+0x56>
 800885e:	782c      	ldrb	r4, [r5, #0]
 8008860:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008864:	2c58      	cmp	r4, #88	; 0x58
 8008866:	d14d      	bne.n	8008904 <_strtol_l.constprop.0+0xec>
 8008868:	786c      	ldrb	r4, [r5, #1]
 800886a:	2310      	movs	r3, #16
 800886c:	3502      	adds	r5, #2
 800886e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008872:	f108 38ff 	add.w	r8, r8, #4294967295
 8008876:	f04f 0c00 	mov.w	ip, #0
 800887a:	fbb8 f9f3 	udiv	r9, r8, r3
 800887e:	4666      	mov	r6, ip
 8008880:	fb03 8a19 	mls	sl, r3, r9, r8
 8008884:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008888:	f1be 0f09 	cmp.w	lr, #9
 800888c:	d816      	bhi.n	80088bc <_strtol_l.constprop.0+0xa4>
 800888e:	4674      	mov	r4, lr
 8008890:	42a3      	cmp	r3, r4
 8008892:	dd24      	ble.n	80088de <_strtol_l.constprop.0+0xc6>
 8008894:	f1bc 0f00 	cmp.w	ip, #0
 8008898:	db1e      	blt.n	80088d8 <_strtol_l.constprop.0+0xc0>
 800889a:	45b1      	cmp	r9, r6
 800889c:	d31c      	bcc.n	80088d8 <_strtol_l.constprop.0+0xc0>
 800889e:	d101      	bne.n	80088a4 <_strtol_l.constprop.0+0x8c>
 80088a0:	45a2      	cmp	sl, r4
 80088a2:	db19      	blt.n	80088d8 <_strtol_l.constprop.0+0xc0>
 80088a4:	fb06 4603 	mla	r6, r6, r3, r4
 80088a8:	f04f 0c01 	mov.w	ip, #1
 80088ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088b0:	e7e8      	b.n	8008884 <_strtol_l.constprop.0+0x6c>
 80088b2:	2c2b      	cmp	r4, #43	; 0x2b
 80088b4:	bf04      	itt	eq
 80088b6:	782c      	ldrbeq	r4, [r5, #0]
 80088b8:	1cb5      	addeq	r5, r6, #2
 80088ba:	e7ca      	b.n	8008852 <_strtol_l.constprop.0+0x3a>
 80088bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80088c0:	f1be 0f19 	cmp.w	lr, #25
 80088c4:	d801      	bhi.n	80088ca <_strtol_l.constprop.0+0xb2>
 80088c6:	3c37      	subs	r4, #55	; 0x37
 80088c8:	e7e2      	b.n	8008890 <_strtol_l.constprop.0+0x78>
 80088ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80088ce:	f1be 0f19 	cmp.w	lr, #25
 80088d2:	d804      	bhi.n	80088de <_strtol_l.constprop.0+0xc6>
 80088d4:	3c57      	subs	r4, #87	; 0x57
 80088d6:	e7db      	b.n	8008890 <_strtol_l.constprop.0+0x78>
 80088d8:	f04f 3cff 	mov.w	ip, #4294967295
 80088dc:	e7e6      	b.n	80088ac <_strtol_l.constprop.0+0x94>
 80088de:	f1bc 0f00 	cmp.w	ip, #0
 80088e2:	da05      	bge.n	80088f0 <_strtol_l.constprop.0+0xd8>
 80088e4:	2322      	movs	r3, #34	; 0x22
 80088e6:	6003      	str	r3, [r0, #0]
 80088e8:	4646      	mov	r6, r8
 80088ea:	b942      	cbnz	r2, 80088fe <_strtol_l.constprop.0+0xe6>
 80088ec:	4630      	mov	r0, r6
 80088ee:	e79e      	b.n	800882e <_strtol_l.constprop.0+0x16>
 80088f0:	b107      	cbz	r7, 80088f4 <_strtol_l.constprop.0+0xdc>
 80088f2:	4276      	negs	r6, r6
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	d0f9      	beq.n	80088ec <_strtol_l.constprop.0+0xd4>
 80088f8:	f1bc 0f00 	cmp.w	ip, #0
 80088fc:	d000      	beq.n	8008900 <_strtol_l.constprop.0+0xe8>
 80088fe:	1e69      	subs	r1, r5, #1
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	e7f3      	b.n	80088ec <_strtol_l.constprop.0+0xd4>
 8008904:	2430      	movs	r4, #48	; 0x30
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1b1      	bne.n	800886e <_strtol_l.constprop.0+0x56>
 800890a:	2308      	movs	r3, #8
 800890c:	e7af      	b.n	800886e <_strtol_l.constprop.0+0x56>
 800890e:	2c30      	cmp	r4, #48	; 0x30
 8008910:	d0a5      	beq.n	800885e <_strtol_l.constprop.0+0x46>
 8008912:	230a      	movs	r3, #10
 8008914:	e7ab      	b.n	800886e <_strtol_l.constprop.0+0x56>
 8008916:	bf00      	nop
 8008918:	0800c5e9 	.word	0x0800c5e9

0800891c <_strtol_r>:
 800891c:	f7ff bf7c 	b.w	8008818 <_strtol_l.constprop.0>

08008920 <__swbuf_r>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	460e      	mov	r6, r1
 8008924:	4614      	mov	r4, r2
 8008926:	4605      	mov	r5, r0
 8008928:	b118      	cbz	r0, 8008932 <__swbuf_r+0x12>
 800892a:	6983      	ldr	r3, [r0, #24]
 800892c:	b90b      	cbnz	r3, 8008932 <__swbuf_r+0x12>
 800892e:	f001 f86f 	bl	8009a10 <__sinit>
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <__swbuf_r+0x98>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d12b      	bne.n	8008990 <__swbuf_r+0x70>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	69a3      	ldr	r3, [r4, #24]
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	071a      	lsls	r2, r3, #28
 8008942:	d52f      	bpl.n	80089a4 <__swbuf_r+0x84>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b36b      	cbz	r3, 80089a4 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	1ac0      	subs	r0, r0, r3
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	b2f6      	uxtb	r6, r6
 8008952:	4283      	cmp	r3, r0
 8008954:	4637      	mov	r7, r6
 8008956:	dc04      	bgt.n	8008962 <__swbuf_r+0x42>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 ffc4 	bl	80098e8 <_fflush_r>
 8008960:	bb30      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	701e      	strb	r6, [r3, #0]
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	3001      	adds	r0, #1
 8008974:	4283      	cmp	r3, r0
 8008976:	d004      	beq.n	8008982 <__swbuf_r+0x62>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d506      	bpl.n	800898c <__swbuf_r+0x6c>
 800897e:	2e0a      	cmp	r6, #10
 8008980:	d104      	bne.n	800898c <__swbuf_r+0x6c>
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	f000 ffaf 	bl	80098e8 <_fflush_r>
 800898a:	b988      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 800898c:	4638      	mov	r0, r7
 800898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <__swbuf_r+0x9c>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d101      	bne.n	800899a <__swbuf_r+0x7a>
 8008996:	68ac      	ldr	r4, [r5, #8]
 8008998:	e7cf      	b.n	800893a <__swbuf_r+0x1a>
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__swbuf_r+0xa0>)
 800899c:	429c      	cmp	r4, r3
 800899e:	bf08      	it	eq
 80089a0:	68ec      	ldreq	r4, [r5, #12]
 80089a2:	e7ca      	b.n	800893a <__swbuf_r+0x1a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f81e 	bl	80089e8 <__swsetup_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0cb      	beq.n	8008948 <__swbuf_r+0x28>
 80089b0:	f04f 37ff 	mov.w	r7, #4294967295
 80089b4:	e7ea      	b.n	800898c <__swbuf_r+0x6c>
 80089b6:	bf00      	nop
 80089b8:	0800c79c 	.word	0x0800c79c
 80089bc:	0800c7bc 	.word	0x0800c7bc
 80089c0:	0800c77c 	.word	0x0800c77c

080089c4 <_write_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_write_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f7f9 fec8 	bl	8002768 <_write>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_write_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_write_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	2000091c 	.word	0x2000091c

080089e8 <__swsetup_r>:
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <__swsetup_r+0xcc>)
 80089ea:	b570      	push	{r4, r5, r6, lr}
 80089ec:	681d      	ldr	r5, [r3, #0]
 80089ee:	4606      	mov	r6, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	b125      	cbz	r5, 80089fe <__swsetup_r+0x16>
 80089f4:	69ab      	ldr	r3, [r5, #24]
 80089f6:	b913      	cbnz	r3, 80089fe <__swsetup_r+0x16>
 80089f8:	4628      	mov	r0, r5
 80089fa:	f001 f809 	bl	8009a10 <__sinit>
 80089fe:	4b2e      	ldr	r3, [pc, #184]	; (8008ab8 <__swsetup_r+0xd0>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	d10f      	bne.n	8008a24 <__swsetup_r+0x3c>
 8008a04:	686c      	ldr	r4, [r5, #4]
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a0c:	0719      	lsls	r1, r3, #28
 8008a0e:	d42c      	bmi.n	8008a6a <__swsetup_r+0x82>
 8008a10:	06dd      	lsls	r5, r3, #27
 8008a12:	d411      	bmi.n	8008a38 <__swsetup_r+0x50>
 8008a14:	2309      	movs	r3, #9
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a22:	e03e      	b.n	8008aa2 <__swsetup_r+0xba>
 8008a24:	4b25      	ldr	r3, [pc, #148]	; (8008abc <__swsetup_r+0xd4>)
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d101      	bne.n	8008a2e <__swsetup_r+0x46>
 8008a2a:	68ac      	ldr	r4, [r5, #8]
 8008a2c:	e7eb      	b.n	8008a06 <__swsetup_r+0x1e>
 8008a2e:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <__swsetup_r+0xd8>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	bf08      	it	eq
 8008a34:	68ec      	ldreq	r4, [r5, #12]
 8008a36:	e7e6      	b.n	8008a06 <__swsetup_r+0x1e>
 8008a38:	0758      	lsls	r0, r3, #29
 8008a3a:	d512      	bpl.n	8008a62 <__swsetup_r+0x7a>
 8008a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3e:	b141      	cbz	r1, 8008a52 <__swsetup_r+0x6a>
 8008a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a44:	4299      	cmp	r1, r3
 8008a46:	d002      	beq.n	8008a4e <__swsetup_r+0x66>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f002 f96d 	bl	800ad28 <_free_r>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6363      	str	r3, [r4, #52]	; 0x34
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f043 0308 	orr.w	r3, r3, #8
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	b94b      	cbnz	r3, 8008a82 <__swsetup_r+0x9a>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a78:	d003      	beq.n	8008a82 <__swsetup_r+0x9a>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f001 fc13 	bl	800a2a8 <__smakebuf_r>
 8008a82:	89a0      	ldrh	r0, [r4, #12]
 8008a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a88:	f010 0301 	ands.w	r3, r0, #1
 8008a8c:	d00a      	beq.n	8008aa4 <__swsetup_r+0xbc>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60a3      	str	r3, [r4, #8]
 8008a92:	6963      	ldr	r3, [r4, #20]
 8008a94:	425b      	negs	r3, r3
 8008a96:	61a3      	str	r3, [r4, #24]
 8008a98:	6923      	ldr	r3, [r4, #16]
 8008a9a:	b943      	cbnz	r3, 8008aae <__swsetup_r+0xc6>
 8008a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aa0:	d1ba      	bne.n	8008a18 <__swsetup_r+0x30>
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	0781      	lsls	r1, r0, #30
 8008aa6:	bf58      	it	pl
 8008aa8:	6963      	ldrpl	r3, [r4, #20]
 8008aaa:	60a3      	str	r3, [r4, #8]
 8008aac:	e7f4      	b.n	8008a98 <__swsetup_r+0xb0>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e7f7      	b.n	8008aa2 <__swsetup_r+0xba>
 8008ab2:	bf00      	nop
 8008ab4:	2000003c 	.word	0x2000003c
 8008ab8:	0800c79c 	.word	0x0800c79c
 8008abc:	0800c7bc 	.word	0x0800c7bc
 8008ac0:	0800c77c 	.word	0x0800c77c

08008ac4 <_close_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_close_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f9 fe58 	bl	8002784 <_close>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_close_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_close_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	2000091c 	.word	0x2000091c

08008ae4 <quorem>:
 8008ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	6903      	ldr	r3, [r0, #16]
 8008aea:	690c      	ldr	r4, [r1, #16]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	4607      	mov	r7, r0
 8008af0:	f2c0 8081 	blt.w	8008bf6 <quorem+0x112>
 8008af4:	3c01      	subs	r4, #1
 8008af6:	f101 0814 	add.w	r8, r1, #20
 8008afa:	f100 0514 	add.w	r5, r0, #20
 8008afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b1c:	d331      	bcc.n	8008b82 <quorem+0x9e>
 8008b1e:	f04f 0e00 	mov.w	lr, #0
 8008b22:	4640      	mov	r0, r8
 8008b24:	46ac      	mov	ip, r5
 8008b26:	46f2      	mov	sl, lr
 8008b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b2c:	b293      	uxth	r3, r2
 8008b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ebaa 0303 	sub.w	r3, sl, r3
 8008b3c:	f8dc a000 	ldr.w	sl, [ip]
 8008b40:	0c12      	lsrs	r2, r2, #16
 8008b42:	fa13 f38a 	uxtah	r3, r3, sl
 8008b46:	fb06 e202 	mla	r2, r6, r2, lr
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b52:	b292      	uxth	r2, r2
 8008b54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b60:	4581      	cmp	r9, r0
 8008b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b66:	f84c 3b04 	str.w	r3, [ip], #4
 8008b6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b6e:	d2db      	bcs.n	8008b28 <quorem+0x44>
 8008b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b74:	b92b      	cbnz	r3, 8008b82 <quorem+0x9e>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	d32e      	bcc.n	8008bde <quorem+0xfa>
 8008b80:	613c      	str	r4, [r7, #16]
 8008b82:	4638      	mov	r0, r7
 8008b84:	f001 fec4 	bl	800a910 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	db24      	blt.n	8008bd6 <quorem+0xf2>
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b98:	f8d0 e000 	ldr.w	lr, [r0]
 8008b9c:	b293      	uxth	r3, r2
 8008b9e:	ebac 0303 	sub.w	r3, ip, r3
 8008ba2:	0c12      	lsrs	r2, r2, #16
 8008ba4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ba8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb6:	45c1      	cmp	r9, r8
 8008bb8:	f840 3b04 	str.w	r3, [r0], #4
 8008bbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc0:	d2e8      	bcs.n	8008b94 <quorem+0xb0>
 8008bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bca:	b922      	cbnz	r2, 8008bd6 <quorem+0xf2>
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	d30a      	bcc.n	8008bea <quorem+0x106>
 8008bd4:	613c      	str	r4, [r7, #16]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	b003      	add	sp, #12
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d1cc      	bne.n	8008b80 <quorem+0x9c>
 8008be6:	3c01      	subs	r4, #1
 8008be8:	e7c7      	b.n	8008b7a <quorem+0x96>
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <quorem+0xf0>
 8008bf2:	3c01      	subs	r4, #1
 8008bf4:	e7eb      	b.n	8008bce <quorem+0xea>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e7ee      	b.n	8008bd8 <quorem+0xf4>
 8008bfa:	0000      	movs	r0, r0
 8008bfc:	0000      	movs	r0, r0
	...

08008c00 <_dtoa_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ed2d 8b04 	vpush	{d8-d9}
 8008c08:	ec57 6b10 	vmov	r6, r7, d0
 8008c0c:	b093      	sub	sp, #76	; 0x4c
 8008c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c14:	9106      	str	r1, [sp, #24]
 8008c16:	ee10 aa10 	vmov	sl, s0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c20:	46bb      	mov	fp, r7
 8008c22:	b975      	cbnz	r5, 8008c42 <_dtoa_r+0x42>
 8008c24:	2010      	movs	r0, #16
 8008c26:	f001 fb7f 	bl	800a328 <malloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c2e:	b920      	cbnz	r0, 8008c3a <_dtoa_r+0x3a>
 8008c30:	4ba7      	ldr	r3, [pc, #668]	; (8008ed0 <_dtoa_r+0x2d0>)
 8008c32:	21ea      	movs	r1, #234	; 0xea
 8008c34:	48a7      	ldr	r0, [pc, #668]	; (8008ed4 <_dtoa_r+0x2d4>)
 8008c36:	f003 f897 	bl	800bd68 <__assert_func>
 8008c3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c3e:	6005      	str	r5, [r0, #0]
 8008c40:	60c5      	str	r5, [r0, #12]
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	b151      	cbz	r1, 8008c5e <_dtoa_r+0x5e>
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	604a      	str	r2, [r1, #4]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4093      	lsls	r3, r2
 8008c50:	608b      	str	r3, [r1, #8]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f001 fbd0 	bl	800a3f8 <_Bfree>
 8008c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	1e3b      	subs	r3, r7, #0
 8008c60:	bfaa      	itet	ge
 8008c62:	2300      	movge	r3, #0
 8008c64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c68:	f8c8 3000 	strge.w	r3, [r8]
 8008c6c:	4b9a      	ldr	r3, [pc, #616]	; (8008ed8 <_dtoa_r+0x2d8>)
 8008c6e:	bfbc      	itt	lt
 8008c70:	2201      	movlt	r2, #1
 8008c72:	f8c8 2000 	strlt.w	r2, [r8]
 8008c76:	ea33 030b 	bics.w	r3, r3, fp
 8008c7a:	d11b      	bne.n	8008cb4 <_dtoa_r+0xb4>
 8008c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c88:	4333      	orrs	r3, r6
 8008c8a:	f000 8592 	beq.w	80097b2 <_dtoa_r+0xbb2>
 8008c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c90:	b963      	cbnz	r3, 8008cac <_dtoa_r+0xac>
 8008c92:	4b92      	ldr	r3, [pc, #584]	; (8008edc <_dtoa_r+0x2dc>)
 8008c94:	e022      	b.n	8008cdc <_dtoa_r+0xdc>
 8008c96:	4b92      	ldr	r3, [pc, #584]	; (8008ee0 <_dtoa_r+0x2e0>)
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	9801      	ldr	r0, [sp, #4]
 8008ca2:	b013      	add	sp, #76	; 0x4c
 8008ca4:	ecbd 8b04 	vpop	{d8-d9}
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	4b8b      	ldr	r3, [pc, #556]	; (8008edc <_dtoa_r+0x2dc>)
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	3303      	adds	r3, #3
 8008cb2:	e7f3      	b.n	8008c9c <_dtoa_r+0x9c>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4650      	mov	r0, sl
 8008cba:	4659      	mov	r1, fp
 8008cbc:	f7f7 ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc0:	ec4b ab19 	vmov	d9, sl, fp
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	b158      	cbz	r0, 8008ce0 <_dtoa_r+0xe0>
 8008cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cca:	2301      	movs	r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 856b 	beq.w	80097ac <_dtoa_r+0xbac>
 8008cd6:	4883      	ldr	r0, [pc, #524]	; (8008ee4 <_dtoa_r+0x2e4>)
 8008cd8:	6018      	str	r0, [r3, #0]
 8008cda:	1e43      	subs	r3, r0, #1
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	e7df      	b.n	8008ca0 <_dtoa_r+0xa0>
 8008ce0:	ec4b ab10 	vmov	d0, sl, fp
 8008ce4:	aa10      	add	r2, sp, #64	; 0x40
 8008ce6:	a911      	add	r1, sp, #68	; 0x44
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 ff33 	bl	800ab54 <__d2b>
 8008cee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cf2:	ee08 0a10 	vmov	s16, r0
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	f000 8084 	beq.w	8008e04 <_dtoa_r+0x204>
 8008cfc:	ee19 3a90 	vmov	r3, s19
 8008d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d08:	4656      	mov	r6, sl
 8008d0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d16:	4b74      	ldr	r3, [pc, #464]	; (8008ee8 <_dtoa_r+0x2e8>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fab3 	bl	8000288 <__aeabi_dsub>
 8008d22:	a365      	add	r3, pc, #404	; (adr r3, 8008eb8 <_dtoa_r+0x2b8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fc66 	bl	80005f8 <__aeabi_dmul>
 8008d2c:	a364      	add	r3, pc, #400	; (adr r3, 8008ec0 <_dtoa_r+0x2c0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 faab 	bl	800028c <__adddf3>
 8008d36:	4606      	mov	r6, r0
 8008d38:	4628      	mov	r0, r5
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	f7f7 fbf2 	bl	8000524 <__aeabi_i2d>
 8008d40:	a361      	add	r3, pc, #388	; (adr r3, 8008ec8 <_dtoa_r+0x2c8>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	f7f7 fc57 	bl	80005f8 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fa9b 	bl	800028c <__adddf3>
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	f7f7 fefd 	bl	8000b58 <__aeabi_d2iz>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	9000      	str	r0, [sp, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 feb8 	bl	8000adc <__aeabi_dcmplt>
 8008d6c:	b150      	cbz	r0, 8008d84 <_dtoa_r+0x184>
 8008d6e:	9800      	ldr	r0, [sp, #0]
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	4632      	mov	r2, r6
 8008d76:	463b      	mov	r3, r7
 8008d78:	f7f7 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d7c:	b910      	cbnz	r0, 8008d84 <_dtoa_r+0x184>
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	2b16      	cmp	r3, #22
 8008d88:	d85a      	bhi.n	8008e40 <_dtoa_r+0x240>
 8008d8a:	9a00      	ldr	r2, [sp, #0]
 8008d8c:	4b57      	ldr	r3, [pc, #348]	; (8008eec <_dtoa_r+0x2ec>)
 8008d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	ec51 0b19 	vmov	r0, r1, d9
 8008d9a:	f7f7 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d050      	beq.n	8008e44 <_dtoa_r+0x244>
 8008da2:	9b00      	ldr	r3, [sp, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	2300      	movs	r3, #0
 8008daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dae:	1b5d      	subs	r5, r3, r5
 8008db0:	1e6b      	subs	r3, r5, #1
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	bf45      	ittet	mi
 8008db6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dba:	9304      	strmi	r3, [sp, #16]
 8008dbc:	2300      	movpl	r3, #0
 8008dbe:	2300      	movmi	r3, #0
 8008dc0:	bf4c      	ite	mi
 8008dc2:	9305      	strmi	r3, [sp, #20]
 8008dc4:	9304      	strpl	r3, [sp, #16]
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db3d      	blt.n	8008e48 <_dtoa_r+0x248>
 8008dcc:	9b05      	ldr	r3, [sp, #20]
 8008dce:	9a00      	ldr	r2, [sp, #0]
 8008dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd2:	4413      	add	r3, r2
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	f200 8089 	bhi.w	8008ef4 <_dtoa_r+0x2f4>
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	bfc4      	itt	gt
 8008de6:	3b04      	subgt	r3, #4
 8008de8:	9306      	strgt	r3, [sp, #24]
 8008dea:	9b06      	ldr	r3, [sp, #24]
 8008dec:	f1a3 0302 	sub.w	r3, r3, #2
 8008df0:	bfcc      	ite	gt
 8008df2:	2500      	movgt	r5, #0
 8008df4:	2501      	movle	r5, #1
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	f200 8087 	bhi.w	8008f0a <_dtoa_r+0x30a>
 8008dfc:	e8df f003 	tbb	[pc, r3]
 8008e00:	59383a2d 	.word	0x59383a2d
 8008e04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e08:	441d      	add	r5, r3
 8008e0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	bfc1      	itttt	gt
 8008e12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e22:	bfda      	itte	le
 8008e24:	f1c3 0320 	rsble	r3, r3, #32
 8008e28:	fa06 f003 	lslle.w	r0, r6, r3
 8008e2c:	4318      	orrgt	r0, r3
 8008e2e:	f7f7 fb69 	bl	8000504 <__aeabi_ui2d>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4606      	mov	r6, r0
 8008e36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e3a:	3d01      	subs	r5, #1
 8008e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e3e:	e76a      	b.n	8008d16 <_dtoa_r+0x116>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7b2      	b.n	8008daa <_dtoa_r+0x1aa>
 8008e44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e46:	e7b1      	b.n	8008dac <_dtoa_r+0x1ac>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	9a00      	ldr	r2, [sp, #0]
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	4253      	negs	r3, r2
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	2300      	movs	r3, #0
 8008e56:	930a      	str	r3, [sp, #40]	; 0x28
 8008e58:	e7bf      	b.n	8008dda <_dtoa_r+0x1da>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9308      	str	r3, [sp, #32]
 8008e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc55      	bgt.n	8008f10 <_dtoa_r+0x310>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6e:	e00c      	b.n	8008e8a <_dtoa_r+0x28a>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7f3      	b.n	8008e5c <_dtoa_r+0x25c>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e78:	9308      	str	r3, [sp, #32]
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	9302      	str	r3, [sp, #8]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	9303      	str	r3, [sp, #12]
 8008e86:	bfb8      	it	lt
 8008e88:	2301      	movlt	r3, #1
 8008e8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	6042      	str	r2, [r0, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	f102 0614 	add.w	r6, r2, #20
 8008e96:	429e      	cmp	r6, r3
 8008e98:	6841      	ldr	r1, [r0, #4]
 8008e9a:	d93d      	bls.n	8008f18 <_dtoa_r+0x318>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f001 fa6b 	bl	800a378 <_Balloc>
 8008ea2:	9001      	str	r0, [sp, #4]
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d13b      	bne.n	8008f20 <_dtoa_r+0x320>
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <_dtoa_r+0x2f0>)
 8008eaa:	4602      	mov	r2, r0
 8008eac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eb0:	e6c0      	b.n	8008c34 <_dtoa_r+0x34>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7df      	b.n	8008e76 <_dtoa_r+0x276>
 8008eb6:	bf00      	nop
 8008eb8:	636f4361 	.word	0x636f4361
 8008ebc:	3fd287a7 	.word	0x3fd287a7
 8008ec0:	8b60c8b3 	.word	0x8b60c8b3
 8008ec4:	3fc68a28 	.word	0x3fc68a28
 8008ec8:	509f79fb 	.word	0x509f79fb
 8008ecc:	3fd34413 	.word	0x3fd34413
 8008ed0:	0800c6f6 	.word	0x0800c6f6
 8008ed4:	0800c70d 	.word	0x0800c70d
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	0800c6f2 	.word	0x0800c6f2
 8008ee0:	0800c6e9 	.word	0x0800c6e9
 8008ee4:	0800c9ca 	.word	0x0800c9ca
 8008ee8:	3ff80000 	.word	0x3ff80000
 8008eec:	0800c8e0 	.word	0x0800c8e0
 8008ef0:	0800c768 	.word	0x0800c768
 8008ef4:	2501      	movs	r5, #1
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9306      	str	r3, [sp, #24]
 8008efa:	9508      	str	r5, [sp, #32]
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295
 8008f00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2312      	movs	r3, #18
 8008f08:	e7b0      	b.n	8008e6c <_dtoa_r+0x26c>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	e7f5      	b.n	8008efc <_dtoa_r+0x2fc>
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f16:	e7b8      	b.n	8008e8a <_dtoa_r+0x28a>
 8008f18:	3101      	adds	r1, #1
 8008f1a:	6041      	str	r1, [r0, #4]
 8008f1c:	0052      	lsls	r2, r2, #1
 8008f1e:	e7b8      	b.n	8008e92 <_dtoa_r+0x292>
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	9a01      	ldr	r2, [sp, #4]
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	2b0e      	cmp	r3, #14
 8008f2a:	f200 809d 	bhi.w	8009068 <_dtoa_r+0x468>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	f000 809a 	beq.w	8009068 <_dtoa_r+0x468>
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd32      	ble.n	8008fa0 <_dtoa_r+0x3a0>
 8008f3a:	4ab7      	ldr	r2, [pc, #732]	; (8009218 <_dtoa_r+0x618>)
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	05d8      	lsls	r0, r3, #23
 8008f4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f50:	d516      	bpl.n	8008f80 <_dtoa_r+0x380>
 8008f52:	4bb2      	ldr	r3, [pc, #712]	; (800921c <_dtoa_r+0x61c>)
 8008f54:	ec51 0b19 	vmov	r0, r1, d9
 8008f58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f5c:	f7f7 fc76 	bl	800084c <__aeabi_ddiv>
 8008f60:	f007 070f 	and.w	r7, r7, #15
 8008f64:	4682      	mov	sl, r0
 8008f66:	468b      	mov	fp, r1
 8008f68:	2503      	movs	r5, #3
 8008f6a:	4eac      	ldr	r6, [pc, #688]	; (800921c <_dtoa_r+0x61c>)
 8008f6c:	b957      	cbnz	r7, 8008f84 <_dtoa_r+0x384>
 8008f6e:	4642      	mov	r2, r8
 8008f70:	464b      	mov	r3, r9
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	f7f7 fc69 	bl	800084c <__aeabi_ddiv>
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	e028      	b.n	8008fd2 <_dtoa_r+0x3d2>
 8008f80:	2502      	movs	r5, #2
 8008f82:	e7f2      	b.n	8008f6a <_dtoa_r+0x36a>
 8008f84:	07f9      	lsls	r1, r7, #31
 8008f86:	d508      	bpl.n	8008f9a <_dtoa_r+0x39a>
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f90:	f7f7 fb32 	bl	80005f8 <__aeabi_dmul>
 8008f94:	3501      	adds	r5, #1
 8008f96:	4680      	mov	r8, r0
 8008f98:	4689      	mov	r9, r1
 8008f9a:	107f      	asrs	r7, r7, #1
 8008f9c:	3608      	adds	r6, #8
 8008f9e:	e7e5      	b.n	8008f6c <_dtoa_r+0x36c>
 8008fa0:	f000 809b 	beq.w	80090da <_dtoa_r+0x4da>
 8008fa4:	9b00      	ldr	r3, [sp, #0]
 8008fa6:	4f9d      	ldr	r7, [pc, #628]	; (800921c <_dtoa_r+0x61c>)
 8008fa8:	425e      	negs	r6, r3
 8008faa:	4b9b      	ldr	r3, [pc, #620]	; (8009218 <_dtoa_r+0x618>)
 8008fac:	f006 020f 	and.w	r2, r6, #15
 8008fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	ec51 0b19 	vmov	r0, r1, d9
 8008fbc:	f7f7 fb1c 	bl	80005f8 <__aeabi_dmul>
 8008fc0:	1136      	asrs	r6, r6, #4
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2502      	movs	r5, #2
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	d17a      	bne.n	80090c4 <_dtoa_r+0x4c4>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1d3      	bne.n	8008f7a <_dtoa_r+0x37a>
 8008fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8082 	beq.w	80090de <_dtoa_r+0x4de>
 8008fda:	4b91      	ldr	r3, [pc, #580]	; (8009220 <_dtoa_r+0x620>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d079      	beq.n	80090de <_dtoa_r+0x4de>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d076      	beq.n	80090de <_dtoa_r+0x4de>
 8008ff0:	9b02      	ldr	r3, [sp, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd36      	ble.n	8009064 <_dtoa_r+0x464>
 8008ff6:	9b00      	ldr	r3, [sp, #0]
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4659      	mov	r1, fp
 8008ffc:	1e5f      	subs	r7, r3, #1
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b88      	ldr	r3, [pc, #544]	; (8009224 <_dtoa_r+0x624>)
 8009002:	f7f7 faf9 	bl	80005f8 <__aeabi_dmul>
 8009006:	9e02      	ldr	r6, [sp, #8]
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	3501      	adds	r5, #1
 800900e:	4628      	mov	r0, r5
 8009010:	f7f7 fa88 	bl	8000524 <__aeabi_i2d>
 8009014:	4652      	mov	r2, sl
 8009016:	465b      	mov	r3, fp
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4b82      	ldr	r3, [pc, #520]	; (8009228 <_dtoa_r+0x628>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 f934 	bl	800028c <__adddf3>
 8009024:	46d0      	mov	r8, sl
 8009026:	46d9      	mov	r9, fp
 8009028:	4682      	mov	sl, r0
 800902a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800902e:	2e00      	cmp	r6, #0
 8009030:	d158      	bne.n	80090e4 <_dtoa_r+0x4e4>
 8009032:	4b7e      	ldr	r3, [pc, #504]	; (800922c <_dtoa_r+0x62c>)
 8009034:	2200      	movs	r2, #0
 8009036:	4640      	mov	r0, r8
 8009038:	4649      	mov	r1, r9
 800903a:	f7f7 f925 	bl	8000288 <__aeabi_dsub>
 800903e:	4652      	mov	r2, sl
 8009040:	465b      	mov	r3, fp
 8009042:	4680      	mov	r8, r0
 8009044:	4689      	mov	r9, r1
 8009046:	f7f7 fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800904a:	2800      	cmp	r0, #0
 800904c:	f040 8295 	bne.w	800957a <_dtoa_r+0x97a>
 8009050:	4652      	mov	r2, sl
 8009052:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f040 8289 	bne.w	8009576 <_dtoa_r+0x976>
 8009064:	ec5b ab19 	vmov	sl, fp, d9
 8009068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800906a:	2b00      	cmp	r3, #0
 800906c:	f2c0 8148 	blt.w	8009300 <_dtoa_r+0x700>
 8009070:	9a00      	ldr	r2, [sp, #0]
 8009072:	2a0e      	cmp	r2, #14
 8009074:	f300 8144 	bgt.w	8009300 <_dtoa_r+0x700>
 8009078:	4b67      	ldr	r3, [pc, #412]	; (8009218 <_dtoa_r+0x618>)
 800907a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800907e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	f280 80d5 	bge.w	8009234 <_dtoa_r+0x634>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f300 80d1 	bgt.w	8009234 <_dtoa_r+0x634>
 8009092:	f040 826f 	bne.w	8009574 <_dtoa_r+0x974>
 8009096:	4b65      	ldr	r3, [pc, #404]	; (800922c <_dtoa_r+0x62c>)
 8009098:	2200      	movs	r2, #0
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 faab 	bl	80005f8 <__aeabi_dmul>
 80090a2:	4652      	mov	r2, sl
 80090a4:	465b      	mov	r3, fp
 80090a6:	f7f7 fd2d 	bl	8000b04 <__aeabi_dcmpge>
 80090aa:	9e03      	ldr	r6, [sp, #12]
 80090ac:	4637      	mov	r7, r6
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8245 	bne.w	800953e <_dtoa_r+0x93e>
 80090b4:	9d01      	ldr	r5, [sp, #4]
 80090b6:	2331      	movs	r3, #49	; 0x31
 80090b8:	f805 3b01 	strb.w	r3, [r5], #1
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	e240      	b.n	8009546 <_dtoa_r+0x946>
 80090c4:	07f2      	lsls	r2, r6, #31
 80090c6:	d505      	bpl.n	80090d4 <_dtoa_r+0x4d4>
 80090c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090cc:	f7f7 fa94 	bl	80005f8 <__aeabi_dmul>
 80090d0:	3501      	adds	r5, #1
 80090d2:	2301      	movs	r3, #1
 80090d4:	1076      	asrs	r6, r6, #1
 80090d6:	3708      	adds	r7, #8
 80090d8:	e777      	b.n	8008fca <_dtoa_r+0x3ca>
 80090da:	2502      	movs	r5, #2
 80090dc:	e779      	b.n	8008fd2 <_dtoa_r+0x3d2>
 80090de:	9f00      	ldr	r7, [sp, #0]
 80090e0:	9e03      	ldr	r6, [sp, #12]
 80090e2:	e794      	b.n	800900e <_dtoa_r+0x40e>
 80090e4:	9901      	ldr	r1, [sp, #4]
 80090e6:	4b4c      	ldr	r3, [pc, #304]	; (8009218 <_dtoa_r+0x618>)
 80090e8:	4431      	add	r1, r6
 80090ea:	910d      	str	r1, [sp, #52]	; 0x34
 80090ec:	9908      	ldr	r1, [sp, #32]
 80090ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d043      	beq.n	8009182 <_dtoa_r+0x582>
 80090fa:	494d      	ldr	r1, [pc, #308]	; (8009230 <_dtoa_r+0x630>)
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7f7 fba5 	bl	800084c <__aeabi_ddiv>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	f7f7 f8bf 	bl	8000288 <__aeabi_dsub>
 800910a:	9d01      	ldr	r5, [sp, #4]
 800910c:	4682      	mov	sl, r0
 800910e:	468b      	mov	fp, r1
 8009110:	4649      	mov	r1, r9
 8009112:	4640      	mov	r0, r8
 8009114:	f7f7 fd20 	bl	8000b58 <__aeabi_d2iz>
 8009118:	4606      	mov	r6, r0
 800911a:	f7f7 fa03 	bl	8000524 <__aeabi_i2d>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 f8af 	bl	8000288 <__aeabi_dsub>
 800912a:	3630      	adds	r6, #48	; 0x30
 800912c:	f805 6b01 	strb.w	r6, [r5], #1
 8009130:	4652      	mov	r2, sl
 8009132:	465b      	mov	r3, fp
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	f7f7 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	d163      	bne.n	8009208 <_dtoa_r+0x608>
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	4936      	ldr	r1, [pc, #216]	; (8009220 <_dtoa_r+0x620>)
 8009146:	2000      	movs	r0, #0
 8009148:	f7f7 f89e 	bl	8000288 <__aeabi_dsub>
 800914c:	4652      	mov	r2, sl
 800914e:	465b      	mov	r3, fp
 8009150:	f7f7 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	f040 80b5 	bne.w	80092c4 <_dtoa_r+0x6c4>
 800915a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915c:	429d      	cmp	r5, r3
 800915e:	d081      	beq.n	8009064 <_dtoa_r+0x464>
 8009160:	4b30      	ldr	r3, [pc, #192]	; (8009224 <_dtoa_r+0x624>)
 8009162:	2200      	movs	r2, #0
 8009164:	4650      	mov	r0, sl
 8009166:	4659      	mov	r1, fp
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <_dtoa_r+0x624>)
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	2200      	movs	r2, #0
 8009178:	f7f7 fa3e 	bl	80005f8 <__aeabi_dmul>
 800917c:	4680      	mov	r8, r0
 800917e:	4689      	mov	r9, r1
 8009180:	e7c6      	b.n	8009110 <_dtoa_r+0x510>
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	f7f7 fa37 	bl	80005f8 <__aeabi_dmul>
 800918a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918c:	9d01      	ldr	r5, [sp, #4]
 800918e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009190:	4682      	mov	sl, r0
 8009192:	468b      	mov	fp, r1
 8009194:	4649      	mov	r1, r9
 8009196:	4640      	mov	r0, r8
 8009198:	f7f7 fcde 	bl	8000b58 <__aeabi_d2iz>
 800919c:	4606      	mov	r6, r0
 800919e:	f7f7 f9c1 	bl	8000524 <__aeabi_i2d>
 80091a2:	3630      	adds	r6, #48	; 0x30
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 f86c 	bl	8000288 <__aeabi_dsub>
 80091b0:	f805 6b01 	strb.w	r6, [r5], #1
 80091b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b6:	429d      	cmp	r5, r3
 80091b8:	4680      	mov	r8, r0
 80091ba:	4689      	mov	r9, r1
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	d124      	bne.n	800920c <_dtoa_r+0x60c>
 80091c2:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <_dtoa_r+0x630>)
 80091c4:	4650      	mov	r0, sl
 80091c6:	4659      	mov	r1, fp
 80091c8:	f7f7 f860 	bl	800028c <__adddf3>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d173      	bne.n	80092c4 <_dtoa_r+0x6c4>
 80091dc:	4652      	mov	r2, sl
 80091de:	465b      	mov	r3, fp
 80091e0:	4913      	ldr	r1, [pc, #76]	; (8009230 <_dtoa_r+0x630>)
 80091e2:	2000      	movs	r0, #0
 80091e4:	f7f7 f850 	bl	8000288 <__aeabi_dsub>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4640      	mov	r0, r8
 80091ee:	4649      	mov	r1, r9
 80091f0:	f7f7 fc74 	bl	8000adc <__aeabi_dcmplt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f43f af35 	beq.w	8009064 <_dtoa_r+0x464>
 80091fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091fc:	1e6b      	subs	r3, r5, #1
 80091fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009200:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009204:	2b30      	cmp	r3, #48	; 0x30
 8009206:	d0f8      	beq.n	80091fa <_dtoa_r+0x5fa>
 8009208:	9700      	str	r7, [sp, #0]
 800920a:	e049      	b.n	80092a0 <_dtoa_r+0x6a0>
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <_dtoa_r+0x624>)
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	e7bd      	b.n	8009194 <_dtoa_r+0x594>
 8009218:	0800c8e0 	.word	0x0800c8e0
 800921c:	0800c8b8 	.word	0x0800c8b8
 8009220:	3ff00000 	.word	0x3ff00000
 8009224:	40240000 	.word	0x40240000
 8009228:	401c0000 	.word	0x401c0000
 800922c:	40140000 	.word	0x40140000
 8009230:	3fe00000 	.word	0x3fe00000
 8009234:	9d01      	ldr	r5, [sp, #4]
 8009236:	4656      	mov	r6, sl
 8009238:	465f      	mov	r7, fp
 800923a:	4642      	mov	r2, r8
 800923c:	464b      	mov	r3, r9
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 fb03 	bl	800084c <__aeabi_ddiv>
 8009246:	f7f7 fc87 	bl	8000b58 <__aeabi_d2iz>
 800924a:	4682      	mov	sl, r0
 800924c:	f7f7 f96a 	bl	8000524 <__aeabi_i2d>
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f7f7 f9d0 	bl	80005f8 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009264:	f7f7 f810 	bl	8000288 <__aeabi_dsub>
 8009268:	f805 6b01 	strb.w	r6, [r5], #1
 800926c:	9e01      	ldr	r6, [sp, #4]
 800926e:	9f03      	ldr	r7, [sp, #12]
 8009270:	1bae      	subs	r6, r5, r6
 8009272:	42b7      	cmp	r7, r6
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	d135      	bne.n	80092e6 <_dtoa_r+0x6e6>
 800927a:	f7f7 f807 	bl	800028c <__adddf3>
 800927e:	4642      	mov	r2, r8
 8009280:	464b      	mov	r3, r9
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	f7f7 fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800928a:	b9d0      	cbnz	r0, 80092c2 <_dtoa_r+0x6c2>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009298:	b110      	cbz	r0, 80092a0 <_dtoa_r+0x6a0>
 800929a:	f01a 0f01 	tst.w	sl, #1
 800929e:	d110      	bne.n	80092c2 <_dtoa_r+0x6c2>
 80092a0:	4620      	mov	r0, r4
 80092a2:	ee18 1a10 	vmov	r1, s16
 80092a6:	f001 f8a7 	bl	800a3f8 <_Bfree>
 80092aa:	2300      	movs	r3, #0
 80092ac:	9800      	ldr	r0, [sp, #0]
 80092ae:	702b      	strb	r3, [r5, #0]
 80092b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b2:	3001      	adds	r0, #1
 80092b4:	6018      	str	r0, [r3, #0]
 80092b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f43f acf1 	beq.w	8008ca0 <_dtoa_r+0xa0>
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	e4ee      	b.n	8008ca0 <_dtoa_r+0xa0>
 80092c2:	9f00      	ldr	r7, [sp, #0]
 80092c4:	462b      	mov	r3, r5
 80092c6:	461d      	mov	r5, r3
 80092c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092cc:	2a39      	cmp	r2, #57	; 0x39
 80092ce:	d106      	bne.n	80092de <_dtoa_r+0x6de>
 80092d0:	9a01      	ldr	r2, [sp, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d1f7      	bne.n	80092c6 <_dtoa_r+0x6c6>
 80092d6:	9901      	ldr	r1, [sp, #4]
 80092d8:	2230      	movs	r2, #48	; 0x30
 80092da:	3701      	adds	r7, #1
 80092dc:	700a      	strb	r2, [r1, #0]
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	3201      	adds	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e790      	b.n	8009208 <_dtoa_r+0x608>
 80092e6:	4ba6      	ldr	r3, [pc, #664]	; (8009580 <_dtoa_r+0x980>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	2200      	movs	r2, #0
 80092f0:	2300      	movs	r3, #0
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	f7f7 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d09d      	beq.n	800923a <_dtoa_r+0x63a>
 80092fe:	e7cf      	b.n	80092a0 <_dtoa_r+0x6a0>
 8009300:	9a08      	ldr	r2, [sp, #32]
 8009302:	2a00      	cmp	r2, #0
 8009304:	f000 80d7 	beq.w	80094b6 <_dtoa_r+0x8b6>
 8009308:	9a06      	ldr	r2, [sp, #24]
 800930a:	2a01      	cmp	r2, #1
 800930c:	f300 80ba 	bgt.w	8009484 <_dtoa_r+0x884>
 8009310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009312:	2a00      	cmp	r2, #0
 8009314:	f000 80b2 	beq.w	800947c <_dtoa_r+0x87c>
 8009318:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800931c:	9e07      	ldr	r6, [sp, #28]
 800931e:	9d04      	ldr	r5, [sp, #16]
 8009320:	9a04      	ldr	r2, [sp, #16]
 8009322:	441a      	add	r2, r3
 8009324:	9204      	str	r2, [sp, #16]
 8009326:	9a05      	ldr	r2, [sp, #20]
 8009328:	2101      	movs	r1, #1
 800932a:	441a      	add	r2, r3
 800932c:	4620      	mov	r0, r4
 800932e:	9205      	str	r2, [sp, #20]
 8009330:	f001 f964 	bl	800a5fc <__i2b>
 8009334:	4607      	mov	r7, r0
 8009336:	2d00      	cmp	r5, #0
 8009338:	dd0c      	ble.n	8009354 <_dtoa_r+0x754>
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd09      	ble.n	8009354 <_dtoa_r+0x754>
 8009340:	42ab      	cmp	r3, r5
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	bfa8      	it	ge
 8009346:	462b      	movge	r3, r5
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	9204      	str	r2, [sp, #16]
 800934c:	9a05      	ldr	r2, [sp, #20]
 800934e:	1aed      	subs	r5, r5, r3
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	9b07      	ldr	r3, [sp, #28]
 8009356:	b31b      	cbz	r3, 80093a0 <_dtoa_r+0x7a0>
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80af 	beq.w	80094be <_dtoa_r+0x8be>
 8009360:	2e00      	cmp	r6, #0
 8009362:	dd13      	ble.n	800938c <_dtoa_r+0x78c>
 8009364:	4639      	mov	r1, r7
 8009366:	4632      	mov	r2, r6
 8009368:	4620      	mov	r0, r4
 800936a:	f001 fa07 	bl	800a77c <__pow5mult>
 800936e:	ee18 2a10 	vmov	r2, s16
 8009372:	4601      	mov	r1, r0
 8009374:	4607      	mov	r7, r0
 8009376:	4620      	mov	r0, r4
 8009378:	f001 f956 	bl	800a628 <__multiply>
 800937c:	ee18 1a10 	vmov	r1, s16
 8009380:	4680      	mov	r8, r0
 8009382:	4620      	mov	r0, r4
 8009384:	f001 f838 	bl	800a3f8 <_Bfree>
 8009388:	ee08 8a10 	vmov	s16, r8
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	1b9a      	subs	r2, r3, r6
 8009390:	d006      	beq.n	80093a0 <_dtoa_r+0x7a0>
 8009392:	ee18 1a10 	vmov	r1, s16
 8009396:	4620      	mov	r0, r4
 8009398:	f001 f9f0 	bl	800a77c <__pow5mult>
 800939c:	ee08 0a10 	vmov	s16, r0
 80093a0:	2101      	movs	r1, #1
 80093a2:	4620      	mov	r0, r4
 80093a4:	f001 f92a 	bl	800a5fc <__i2b>
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	4606      	mov	r6, r0
 80093ae:	f340 8088 	ble.w	80094c2 <_dtoa_r+0x8c2>
 80093b2:	461a      	mov	r2, r3
 80093b4:	4601      	mov	r1, r0
 80093b6:	4620      	mov	r0, r4
 80093b8:	f001 f9e0 	bl	800a77c <__pow5mult>
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	4606      	mov	r6, r0
 80093c2:	f340 8081 	ble.w	80094c8 <_dtoa_r+0x8c8>
 80093c6:	f04f 0800 	mov.w	r8, #0
 80093ca:	6933      	ldr	r3, [r6, #16]
 80093cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d0:	6918      	ldr	r0, [r3, #16]
 80093d2:	f001 f8c3 	bl	800a55c <__hi0bits>
 80093d6:	f1c0 0020 	rsb	r0, r0, #32
 80093da:	9b05      	ldr	r3, [sp, #20]
 80093dc:	4418      	add	r0, r3
 80093de:	f010 001f 	ands.w	r0, r0, #31
 80093e2:	f000 8092 	beq.w	800950a <_dtoa_r+0x90a>
 80093e6:	f1c0 0320 	rsb	r3, r0, #32
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	f340 808a 	ble.w	8009504 <_dtoa_r+0x904>
 80093f0:	f1c0 001c 	rsb	r0, r0, #28
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	4403      	add	r3, r0
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	4403      	add	r3, r0
 80093fe:	4405      	add	r5, r0
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd07      	ble.n	8009418 <_dtoa_r+0x818>
 8009408:	ee18 1a10 	vmov	r1, s16
 800940c:	461a      	mov	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	f001 fa0e 	bl	800a830 <__lshift>
 8009414:	ee08 0a10 	vmov	s16, r0
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd05      	ble.n	800942a <_dtoa_r+0x82a>
 800941e:	4631      	mov	r1, r6
 8009420:	461a      	mov	r2, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f001 fa04 	bl	800a830 <__lshift>
 8009428:	4606      	mov	r6, r0
 800942a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d06e      	beq.n	800950e <_dtoa_r+0x90e>
 8009430:	ee18 0a10 	vmov	r0, s16
 8009434:	4631      	mov	r1, r6
 8009436:	f001 fa6b 	bl	800a910 <__mcmp>
 800943a:	2800      	cmp	r0, #0
 800943c:	da67      	bge.n	800950e <_dtoa_r+0x90e>
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	3b01      	subs	r3, #1
 8009442:	ee18 1a10 	vmov	r1, s16
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	220a      	movs	r2, #10
 800944a:	2300      	movs	r3, #0
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fff5 	bl	800a43c <__multadd>
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	ee08 0a10 	vmov	s16, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 81b1 	beq.w	80097c0 <_dtoa_r+0xbc0>
 800945e:	2300      	movs	r3, #0
 8009460:	4639      	mov	r1, r7
 8009462:	220a      	movs	r2, #10
 8009464:	4620      	mov	r0, r4
 8009466:	f000 ffe9 	bl	800a43c <__multadd>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	4607      	mov	r7, r0
 8009470:	f300 808e 	bgt.w	8009590 <_dtoa_r+0x990>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	2b02      	cmp	r3, #2
 8009478:	dc51      	bgt.n	800951e <_dtoa_r+0x91e>
 800947a:	e089      	b.n	8009590 <_dtoa_r+0x990>
 800947c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800947e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009482:	e74b      	b.n	800931c <_dtoa_r+0x71c>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1e5e      	subs	r6, r3, #1
 8009488:	9b07      	ldr	r3, [sp, #28]
 800948a:	42b3      	cmp	r3, r6
 800948c:	bfbf      	itttt	lt
 800948e:	9b07      	ldrlt	r3, [sp, #28]
 8009490:	9607      	strlt	r6, [sp, #28]
 8009492:	1af2      	sublt	r2, r6, r3
 8009494:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009496:	bfb6      	itet	lt
 8009498:	189b      	addlt	r3, r3, r2
 800949a:	1b9e      	subge	r6, r3, r6
 800949c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	bfb8      	it	lt
 80094a2:	2600      	movlt	r6, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb7      	itett	lt
 80094a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094b0:	1a9d      	sublt	r5, r3, r2
 80094b2:	2300      	movlt	r3, #0
 80094b4:	e734      	b.n	8009320 <_dtoa_r+0x720>
 80094b6:	9e07      	ldr	r6, [sp, #28]
 80094b8:	9d04      	ldr	r5, [sp, #16]
 80094ba:	9f08      	ldr	r7, [sp, #32]
 80094bc:	e73b      	b.n	8009336 <_dtoa_r+0x736>
 80094be:	9a07      	ldr	r2, [sp, #28]
 80094c0:	e767      	b.n	8009392 <_dtoa_r+0x792>
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	dc18      	bgt.n	80094fa <_dtoa_r+0x8fa>
 80094c8:	f1ba 0f00 	cmp.w	sl, #0
 80094cc:	d115      	bne.n	80094fa <_dtoa_r+0x8fa>
 80094ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d2:	b993      	cbnz	r3, 80094fa <_dtoa_r+0x8fa>
 80094d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	b183      	cbz	r3, 8009500 <_dtoa_r+0x900>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	3301      	adds	r3, #1
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f04f 0801 	mov.w	r8, #1
 80094ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f47f af6a 	bne.w	80093ca <_dtoa_r+0x7ca>
 80094f6:	2001      	movs	r0, #1
 80094f8:	e76f      	b.n	80093da <_dtoa_r+0x7da>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	e7f6      	b.n	80094ee <_dtoa_r+0x8ee>
 8009500:	4698      	mov	r8, r3
 8009502:	e7f4      	b.n	80094ee <_dtoa_r+0x8ee>
 8009504:	f43f af7d 	beq.w	8009402 <_dtoa_r+0x802>
 8009508:	4618      	mov	r0, r3
 800950a:	301c      	adds	r0, #28
 800950c:	e772      	b.n	80093f4 <_dtoa_r+0x7f4>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	dc37      	bgt.n	8009584 <_dtoa_r+0x984>
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	2b02      	cmp	r3, #2
 8009518:	dd34      	ble.n	8009584 <_dtoa_r+0x984>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	9302      	str	r3, [sp, #8]
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	b96b      	cbnz	r3, 800953e <_dtoa_r+0x93e>
 8009522:	4631      	mov	r1, r6
 8009524:	2205      	movs	r2, #5
 8009526:	4620      	mov	r0, r4
 8009528:	f000 ff88 	bl	800a43c <__multadd>
 800952c:	4601      	mov	r1, r0
 800952e:	4606      	mov	r6, r0
 8009530:	ee18 0a10 	vmov	r0, s16
 8009534:	f001 f9ec 	bl	800a910 <__mcmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	f73f adbb 	bgt.w	80090b4 <_dtoa_r+0x4b4>
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	9d01      	ldr	r5, [sp, #4]
 8009542:	43db      	mvns	r3, r3
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	4631      	mov	r1, r6
 800954c:	4620      	mov	r0, r4
 800954e:	f000 ff53 	bl	800a3f8 <_Bfree>
 8009552:	2f00      	cmp	r7, #0
 8009554:	f43f aea4 	beq.w	80092a0 <_dtoa_r+0x6a0>
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d005      	beq.n	800956a <_dtoa_r+0x96a>
 800955e:	45b8      	cmp	r8, r7
 8009560:	d003      	beq.n	800956a <_dtoa_r+0x96a>
 8009562:	4641      	mov	r1, r8
 8009564:	4620      	mov	r0, r4
 8009566:	f000 ff47 	bl	800a3f8 <_Bfree>
 800956a:	4639      	mov	r1, r7
 800956c:	4620      	mov	r0, r4
 800956e:	f000 ff43 	bl	800a3f8 <_Bfree>
 8009572:	e695      	b.n	80092a0 <_dtoa_r+0x6a0>
 8009574:	2600      	movs	r6, #0
 8009576:	4637      	mov	r7, r6
 8009578:	e7e1      	b.n	800953e <_dtoa_r+0x93e>
 800957a:	9700      	str	r7, [sp, #0]
 800957c:	4637      	mov	r7, r6
 800957e:	e599      	b.n	80090b4 <_dtoa_r+0x4b4>
 8009580:	40240000 	.word	0x40240000
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80ca 	beq.w	8009720 <_dtoa_r+0xb20>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	2d00      	cmp	r5, #0
 8009592:	dd05      	ble.n	80095a0 <_dtoa_r+0x9a0>
 8009594:	4639      	mov	r1, r7
 8009596:	462a      	mov	r2, r5
 8009598:	4620      	mov	r0, r4
 800959a:	f001 f949 	bl	800a830 <__lshift>
 800959e:	4607      	mov	r7, r0
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d05b      	beq.n	800965e <_dtoa_r+0xa5e>
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fee5 	bl	800a378 <_Balloc>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b928      	cbnz	r0, 80095be <_dtoa_r+0x9be>
 80095b2:	4b87      	ldr	r3, [pc, #540]	; (80097d0 <_dtoa_r+0xbd0>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095ba:	f7ff bb3b 	b.w	8008c34 <_dtoa_r+0x34>
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	3202      	adds	r2, #2
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	300c      	adds	r0, #12
 80095ca:	f000 fec7 	bl	800a35c <memcpy>
 80095ce:	2201      	movs	r2, #1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f001 f92c 	bl	800a830 <__lshift>
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	f103 0901 	add.w	r9, r3, #1
 80095de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	f00a 0301 	and.w	r3, sl, #1
 80095ea:	46b8      	mov	r8, r7
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	4607      	mov	r7, r0
 80095f0:	4631      	mov	r1, r6
 80095f2:	ee18 0a10 	vmov	r0, s16
 80095f6:	f7ff fa75 	bl	8008ae4 <quorem>
 80095fa:	4641      	mov	r1, r8
 80095fc:	9002      	str	r0, [sp, #8]
 80095fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009602:	ee18 0a10 	vmov	r0, s16
 8009606:	f001 f983 	bl	800a910 <__mcmp>
 800960a:	463a      	mov	r2, r7
 800960c:	9003      	str	r0, [sp, #12]
 800960e:	4631      	mov	r1, r6
 8009610:	4620      	mov	r0, r4
 8009612:	f001 f999 	bl	800a948 <__mdiff>
 8009616:	68c2      	ldr	r2, [r0, #12]
 8009618:	f109 3bff 	add.w	fp, r9, #4294967295
 800961c:	4605      	mov	r5, r0
 800961e:	bb02      	cbnz	r2, 8009662 <_dtoa_r+0xa62>
 8009620:	4601      	mov	r1, r0
 8009622:	ee18 0a10 	vmov	r0, s16
 8009626:	f001 f973 	bl	800a910 <__mcmp>
 800962a:	4602      	mov	r2, r0
 800962c:	4629      	mov	r1, r5
 800962e:	4620      	mov	r0, r4
 8009630:	9207      	str	r2, [sp, #28]
 8009632:	f000 fee1 	bl	800a3f8 <_Bfree>
 8009636:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800963a:	ea43 0102 	orr.w	r1, r3, r2
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	430b      	orrs	r3, r1
 8009642:	464d      	mov	r5, r9
 8009644:	d10f      	bne.n	8009666 <_dtoa_r+0xa66>
 8009646:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800964a:	d02a      	beq.n	80096a2 <_dtoa_r+0xaa2>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	dd02      	ble.n	8009658 <_dtoa_r+0xa58>
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009658:	f88b a000 	strb.w	sl, [fp]
 800965c:	e775      	b.n	800954a <_dtoa_r+0x94a>
 800965e:	4638      	mov	r0, r7
 8009660:	e7ba      	b.n	80095d8 <_dtoa_r+0x9d8>
 8009662:	2201      	movs	r2, #1
 8009664:	e7e2      	b.n	800962c <_dtoa_r+0xa2c>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	db04      	blt.n	8009676 <_dtoa_r+0xa76>
 800966c:	9906      	ldr	r1, [sp, #24]
 800966e:	430b      	orrs	r3, r1
 8009670:	9904      	ldr	r1, [sp, #16]
 8009672:	430b      	orrs	r3, r1
 8009674:	d122      	bne.n	80096bc <_dtoa_r+0xabc>
 8009676:	2a00      	cmp	r2, #0
 8009678:	ddee      	ble.n	8009658 <_dtoa_r+0xa58>
 800967a:	ee18 1a10 	vmov	r1, s16
 800967e:	2201      	movs	r2, #1
 8009680:	4620      	mov	r0, r4
 8009682:	f001 f8d5 	bl	800a830 <__lshift>
 8009686:	4631      	mov	r1, r6
 8009688:	ee08 0a10 	vmov	s16, r0
 800968c:	f001 f940 	bl	800a910 <__mcmp>
 8009690:	2800      	cmp	r0, #0
 8009692:	dc03      	bgt.n	800969c <_dtoa_r+0xa9c>
 8009694:	d1e0      	bne.n	8009658 <_dtoa_r+0xa58>
 8009696:	f01a 0f01 	tst.w	sl, #1
 800969a:	d0dd      	beq.n	8009658 <_dtoa_r+0xa58>
 800969c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a0:	d1d7      	bne.n	8009652 <_dtoa_r+0xa52>
 80096a2:	2339      	movs	r3, #57	; 0x39
 80096a4:	f88b 3000 	strb.w	r3, [fp]
 80096a8:	462b      	mov	r3, r5
 80096aa:	461d      	mov	r5, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b2:	2a39      	cmp	r2, #57	; 0x39
 80096b4:	d071      	beq.n	800979a <_dtoa_r+0xb9a>
 80096b6:	3201      	adds	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e746      	b.n	800954a <_dtoa_r+0x94a>
 80096bc:	2a00      	cmp	r2, #0
 80096be:	dd07      	ble.n	80096d0 <_dtoa_r+0xad0>
 80096c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096c4:	d0ed      	beq.n	80096a2 <_dtoa_r+0xaa2>
 80096c6:	f10a 0301 	add.w	r3, sl, #1
 80096ca:	f88b 3000 	strb.w	r3, [fp]
 80096ce:	e73c      	b.n	800954a <_dtoa_r+0x94a>
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096d6:	4599      	cmp	r9, r3
 80096d8:	d047      	beq.n	800976a <_dtoa_r+0xb6a>
 80096da:	ee18 1a10 	vmov	r1, s16
 80096de:	2300      	movs	r3, #0
 80096e0:	220a      	movs	r2, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 feaa 	bl	800a43c <__multadd>
 80096e8:	45b8      	cmp	r8, r7
 80096ea:	ee08 0a10 	vmov	s16, r0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	f04f 020a 	mov.w	r2, #10
 80096f6:	4641      	mov	r1, r8
 80096f8:	4620      	mov	r0, r4
 80096fa:	d106      	bne.n	800970a <_dtoa_r+0xb0a>
 80096fc:	f000 fe9e 	bl	800a43c <__multadd>
 8009700:	4680      	mov	r8, r0
 8009702:	4607      	mov	r7, r0
 8009704:	f109 0901 	add.w	r9, r9, #1
 8009708:	e772      	b.n	80095f0 <_dtoa_r+0x9f0>
 800970a:	f000 fe97 	bl	800a43c <__multadd>
 800970e:	4639      	mov	r1, r7
 8009710:	4680      	mov	r8, r0
 8009712:	2300      	movs	r3, #0
 8009714:	220a      	movs	r2, #10
 8009716:	4620      	mov	r0, r4
 8009718:	f000 fe90 	bl	800a43c <__multadd>
 800971c:	4607      	mov	r7, r0
 800971e:	e7f1      	b.n	8009704 <_dtoa_r+0xb04>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	9d01      	ldr	r5, [sp, #4]
 8009726:	ee18 0a10 	vmov	r0, s16
 800972a:	4631      	mov	r1, r6
 800972c:	f7ff f9da 	bl	8008ae4 <quorem>
 8009730:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009734:	9b01      	ldr	r3, [sp, #4]
 8009736:	f805 ab01 	strb.w	sl, [r5], #1
 800973a:	1aea      	subs	r2, r5, r3
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	4293      	cmp	r3, r2
 8009740:	dd09      	ble.n	8009756 <_dtoa_r+0xb56>
 8009742:	ee18 1a10 	vmov	r1, s16
 8009746:	2300      	movs	r3, #0
 8009748:	220a      	movs	r2, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fe76 	bl	800a43c <__multadd>
 8009750:	ee08 0a10 	vmov	s16, r0
 8009754:	e7e7      	b.n	8009726 <_dtoa_r+0xb26>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfc8      	it	gt
 800975c:	461d      	movgt	r5, r3
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	bfd8      	it	le
 8009762:	2501      	movle	r5, #1
 8009764:	441d      	add	r5, r3
 8009766:	f04f 0800 	mov.w	r8, #0
 800976a:	ee18 1a10 	vmov	r1, s16
 800976e:	2201      	movs	r2, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f001 f85d 	bl	800a830 <__lshift>
 8009776:	4631      	mov	r1, r6
 8009778:	ee08 0a10 	vmov	s16, r0
 800977c:	f001 f8c8 	bl	800a910 <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	dc91      	bgt.n	80096a8 <_dtoa_r+0xaa8>
 8009784:	d102      	bne.n	800978c <_dtoa_r+0xb8c>
 8009786:	f01a 0f01 	tst.w	sl, #1
 800978a:	d18d      	bne.n	80096a8 <_dtoa_r+0xaa8>
 800978c:	462b      	mov	r3, r5
 800978e:	461d      	mov	r5, r3
 8009790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009794:	2a30      	cmp	r2, #48	; 0x30
 8009796:	d0fa      	beq.n	800978e <_dtoa_r+0xb8e>
 8009798:	e6d7      	b.n	800954a <_dtoa_r+0x94a>
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d184      	bne.n	80096aa <_dtoa_r+0xaaa>
 80097a0:	9b00      	ldr	r3, [sp, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	2331      	movs	r3, #49	; 0x31
 80097a8:	7013      	strb	r3, [r2, #0]
 80097aa:	e6ce      	b.n	800954a <_dtoa_r+0x94a>
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <_dtoa_r+0xbd4>)
 80097ae:	f7ff ba95 	b.w	8008cdc <_dtoa_r+0xdc>
 80097b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f aa6e 	bne.w	8008c96 <_dtoa_r+0x96>
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <_dtoa_r+0xbd8>)
 80097bc:	f7ff ba8e 	b.w	8008cdc <_dtoa_r+0xdc>
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dcae      	bgt.n	8009724 <_dtoa_r+0xb24>
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	f73f aea8 	bgt.w	800951e <_dtoa_r+0x91e>
 80097ce:	e7a9      	b.n	8009724 <_dtoa_r+0xb24>
 80097d0:	0800c768 	.word	0x0800c768
 80097d4:	0800c9c9 	.word	0x0800c9c9
 80097d8:	0800c6e9 	.word	0x0800c6e9

080097dc <__sflush_r>:
 80097dc:	898a      	ldrh	r2, [r1, #12]
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	4605      	mov	r5, r0
 80097e4:	0710      	lsls	r0, r2, #28
 80097e6:	460c      	mov	r4, r1
 80097e8:	d458      	bmi.n	800989c <__sflush_r+0xc0>
 80097ea:	684b      	ldr	r3, [r1, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dc05      	bgt.n	80097fc <__sflush_r+0x20>
 80097f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dc02      	bgt.n	80097fc <__sflush_r+0x20>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097fe:	2e00      	cmp	r6, #0
 8009800:	d0f9      	beq.n	80097f6 <__sflush_r+0x1a>
 8009802:	2300      	movs	r3, #0
 8009804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009808:	682f      	ldr	r7, [r5, #0]
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	d032      	beq.n	8009874 <__sflush_r+0x98>
 800980e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	075a      	lsls	r2, r3, #29
 8009814:	d505      	bpl.n	8009822 <__sflush_r+0x46>
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	1ac0      	subs	r0, r0, r3
 800981a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800981c:	b10b      	cbz	r3, 8009822 <__sflush_r+0x46>
 800981e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	2300      	movs	r3, #0
 8009824:	4602      	mov	r2, r0
 8009826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009828:	6a21      	ldr	r1, [r4, #32]
 800982a:	4628      	mov	r0, r5
 800982c:	47b0      	blx	r6
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	d106      	bne.n	8009842 <__sflush_r+0x66>
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	291d      	cmp	r1, #29
 8009838:	d82c      	bhi.n	8009894 <__sflush_r+0xb8>
 800983a:	4a2a      	ldr	r2, [pc, #168]	; (80098e4 <__sflush_r+0x108>)
 800983c:	40ca      	lsrs	r2, r1
 800983e:	07d6      	lsls	r6, r2, #31
 8009840:	d528      	bpl.n	8009894 <__sflush_r+0xb8>
 8009842:	2200      	movs	r2, #0
 8009844:	6062      	str	r2, [r4, #4]
 8009846:	04d9      	lsls	r1, r3, #19
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	d504      	bpl.n	8009858 <__sflush_r+0x7c>
 800984e:	1c42      	adds	r2, r0, #1
 8009850:	d101      	bne.n	8009856 <__sflush_r+0x7a>
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	b903      	cbnz	r3, 8009858 <__sflush_r+0x7c>
 8009856:	6560      	str	r0, [r4, #84]	; 0x54
 8009858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800985a:	602f      	str	r7, [r5, #0]
 800985c:	2900      	cmp	r1, #0
 800985e:	d0ca      	beq.n	80097f6 <__sflush_r+0x1a>
 8009860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009864:	4299      	cmp	r1, r3
 8009866:	d002      	beq.n	800986e <__sflush_r+0x92>
 8009868:	4628      	mov	r0, r5
 800986a:	f001 fa5d 	bl	800ad28 <_free_r>
 800986e:	2000      	movs	r0, #0
 8009870:	6360      	str	r0, [r4, #52]	; 0x34
 8009872:	e7c1      	b.n	80097f8 <__sflush_r+0x1c>
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	2301      	movs	r3, #1
 8009878:	4628      	mov	r0, r5
 800987a:	47b0      	blx	r6
 800987c:	1c41      	adds	r1, r0, #1
 800987e:	d1c7      	bne.n	8009810 <__sflush_r+0x34>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c4      	beq.n	8009810 <__sflush_r+0x34>
 8009886:	2b1d      	cmp	r3, #29
 8009888:	d001      	beq.n	800988e <__sflush_r+0xb2>
 800988a:	2b16      	cmp	r3, #22
 800988c:	d101      	bne.n	8009892 <__sflush_r+0xb6>
 800988e:	602f      	str	r7, [r5, #0]
 8009890:	e7b1      	b.n	80097f6 <__sflush_r+0x1a>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7ad      	b.n	80097f8 <__sflush_r+0x1c>
 800989c:	690f      	ldr	r7, [r1, #16]
 800989e:	2f00      	cmp	r7, #0
 80098a0:	d0a9      	beq.n	80097f6 <__sflush_r+0x1a>
 80098a2:	0793      	lsls	r3, r2, #30
 80098a4:	680e      	ldr	r6, [r1, #0]
 80098a6:	bf08      	it	eq
 80098a8:	694b      	ldreq	r3, [r1, #20]
 80098aa:	600f      	str	r7, [r1, #0]
 80098ac:	bf18      	it	ne
 80098ae:	2300      	movne	r3, #0
 80098b0:	eba6 0807 	sub.w	r8, r6, r7
 80098b4:	608b      	str	r3, [r1, #8]
 80098b6:	f1b8 0f00 	cmp.w	r8, #0
 80098ba:	dd9c      	ble.n	80097f6 <__sflush_r+0x1a>
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c0:	4643      	mov	r3, r8
 80098c2:	463a      	mov	r2, r7
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dc06      	bgt.n	80098da <__sflush_r+0xfe>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e78e      	b.n	80097f8 <__sflush_r+0x1c>
 80098da:	4407      	add	r7, r0
 80098dc:	eba8 0800 	sub.w	r8, r8, r0
 80098e0:	e7e9      	b.n	80098b6 <__sflush_r+0xda>
 80098e2:	bf00      	nop
 80098e4:	20400001 	.word	0x20400001

080098e8 <_fflush_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	b913      	cbnz	r3, 80098f8 <_fflush_r+0x10>
 80098f2:	2500      	movs	r5, #0
 80098f4:	4628      	mov	r0, r5
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	b118      	cbz	r0, 8009902 <_fflush_r+0x1a>
 80098fa:	6983      	ldr	r3, [r0, #24]
 80098fc:	b90b      	cbnz	r3, 8009902 <_fflush_r+0x1a>
 80098fe:	f000 f887 	bl	8009a10 <__sinit>
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <_fflush_r+0x6c>)
 8009904:	429c      	cmp	r4, r3
 8009906:	d11b      	bne.n	8009940 <_fflush_r+0x58>
 8009908:	686c      	ldr	r4, [r5, #4]
 800990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0ef      	beq.n	80098f2 <_fflush_r+0xa>
 8009912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009914:	07d0      	lsls	r0, r2, #31
 8009916:	d404      	bmi.n	8009922 <_fflush_r+0x3a>
 8009918:	0599      	lsls	r1, r3, #22
 800991a:	d402      	bmi.n	8009922 <_fflush_r+0x3a>
 800991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991e:	f000 fc88 	bl	800a232 <__retarget_lock_acquire_recursive>
 8009922:	4628      	mov	r0, r5
 8009924:	4621      	mov	r1, r4
 8009926:	f7ff ff59 	bl	80097dc <__sflush_r>
 800992a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800992c:	07da      	lsls	r2, r3, #31
 800992e:	4605      	mov	r5, r0
 8009930:	d4e0      	bmi.n	80098f4 <_fflush_r+0xc>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	059b      	lsls	r3, r3, #22
 8009936:	d4dd      	bmi.n	80098f4 <_fflush_r+0xc>
 8009938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993a:	f000 fc7b 	bl	800a234 <__retarget_lock_release_recursive>
 800993e:	e7d9      	b.n	80098f4 <_fflush_r+0xc>
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <_fflush_r+0x70>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d101      	bne.n	800994a <_fflush_r+0x62>
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	e7df      	b.n	800990a <_fflush_r+0x22>
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <_fflush_r+0x74>)
 800994c:	429c      	cmp	r4, r3
 800994e:	bf08      	it	eq
 8009950:	68ec      	ldreq	r4, [r5, #12]
 8009952:	e7da      	b.n	800990a <_fflush_r+0x22>
 8009954:	0800c79c 	.word	0x0800c79c
 8009958:	0800c7bc 	.word	0x0800c7bc
 800995c:	0800c77c 	.word	0x0800c77c

08009960 <std>:
 8009960:	2300      	movs	r3, #0
 8009962:	b510      	push	{r4, lr}
 8009964:	4604      	mov	r4, r0
 8009966:	e9c0 3300 	strd	r3, r3, [r0]
 800996a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800996e:	6083      	str	r3, [r0, #8]
 8009970:	8181      	strh	r1, [r0, #12]
 8009972:	6643      	str	r3, [r0, #100]	; 0x64
 8009974:	81c2      	strh	r2, [r0, #14]
 8009976:	6183      	str	r3, [r0, #24]
 8009978:	4619      	mov	r1, r3
 800997a:	2208      	movs	r2, #8
 800997c:	305c      	adds	r0, #92	; 0x5c
 800997e:	f7fd f949 	bl	8006c14 <memset>
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <std+0x38>)
 8009984:	6263      	str	r3, [r4, #36]	; 0x24
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <std+0x3c>)
 8009988:	62a3      	str	r3, [r4, #40]	; 0x28
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x40>)
 800998c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x44>)
 8009990:	6224      	str	r4, [r4, #32]
 8009992:	6323      	str	r3, [r4, #48]	; 0x30
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	08007b05 	.word	0x08007b05
 800999c:	08007b2b 	.word	0x08007b2b
 80099a0:	08007b63 	.word	0x08007b63
 80099a4:	08007b87 	.word	0x08007b87

080099a8 <_cleanup_r>:
 80099a8:	4901      	ldr	r1, [pc, #4]	; (80099b0 <_cleanup_r+0x8>)
 80099aa:	f000 b8af 	b.w	8009b0c <_fwalk_reent>
 80099ae:	bf00      	nop
 80099b0:	080098e9 	.word	0x080098e9

080099b4 <__sfmoreglue>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	2268      	movs	r2, #104	; 0x68
 80099b8:	1e4d      	subs	r5, r1, #1
 80099ba:	4355      	muls	r5, r2
 80099bc:	460e      	mov	r6, r1
 80099be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099c2:	f001 fa1d 	bl	800ae00 <_malloc_r>
 80099c6:	4604      	mov	r4, r0
 80099c8:	b140      	cbz	r0, 80099dc <__sfmoreglue+0x28>
 80099ca:	2100      	movs	r1, #0
 80099cc:	e9c0 1600 	strd	r1, r6, [r0]
 80099d0:	300c      	adds	r0, #12
 80099d2:	60a0      	str	r0, [r4, #8]
 80099d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099d8:	f7fd f91c 	bl	8006c14 <memset>
 80099dc:	4620      	mov	r0, r4
 80099de:	bd70      	pop	{r4, r5, r6, pc}

080099e0 <__sfp_lock_acquire>:
 80099e0:	4801      	ldr	r0, [pc, #4]	; (80099e8 <__sfp_lock_acquire+0x8>)
 80099e2:	f000 bc26 	b.w	800a232 <__retarget_lock_acquire_recursive>
 80099e6:	bf00      	nop
 80099e8:	20000911 	.word	0x20000911

080099ec <__sfp_lock_release>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__sfp_lock_release+0x8>)
 80099ee:	f000 bc21 	b.w	800a234 <__retarget_lock_release_recursive>
 80099f2:	bf00      	nop
 80099f4:	20000911 	.word	0x20000911

080099f8 <__sinit_lock_acquire>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__sinit_lock_acquire+0x8>)
 80099fa:	f000 bc1a 	b.w	800a232 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	20000912 	.word	0x20000912

08009a04 <__sinit_lock_release>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__sinit_lock_release+0x8>)
 8009a06:	f000 bc15 	b.w	800a234 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20000912 	.word	0x20000912

08009a10 <__sinit>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4604      	mov	r4, r0
 8009a14:	f7ff fff0 	bl	80099f8 <__sinit_lock_acquire>
 8009a18:	69a3      	ldr	r3, [r4, #24]
 8009a1a:	b11b      	cbz	r3, 8009a24 <__sinit+0x14>
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f7ff bff0 	b.w	8009a04 <__sinit_lock_release>
 8009a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a28:	6523      	str	r3, [r4, #80]	; 0x50
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <__sinit+0x68>)
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <__sinit+0x6c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	bf04      	itt	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	61a3      	streq	r3, [r4, #24]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f820 	bl	8009a80 <__sfp>
 8009a40:	6060      	str	r0, [r4, #4]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f81c 	bl	8009a80 <__sfp>
 8009a48:	60a0      	str	r0, [r4, #8]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f818 	bl	8009a80 <__sfp>
 8009a50:	2200      	movs	r2, #0
 8009a52:	60e0      	str	r0, [r4, #12]
 8009a54:	2104      	movs	r1, #4
 8009a56:	6860      	ldr	r0, [r4, #4]
 8009a58:	f7ff ff82 	bl	8009960 <std>
 8009a5c:	68a0      	ldr	r0, [r4, #8]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	2109      	movs	r1, #9
 8009a62:	f7ff ff7d 	bl	8009960 <std>
 8009a66:	68e0      	ldr	r0, [r4, #12]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	2112      	movs	r1, #18
 8009a6c:	f7ff ff78 	bl	8009960 <std>
 8009a70:	2301      	movs	r3, #1
 8009a72:	61a3      	str	r3, [r4, #24]
 8009a74:	e7d2      	b.n	8009a1c <__sinit+0xc>
 8009a76:	bf00      	nop
 8009a78:	0800c558 	.word	0x0800c558
 8009a7c:	080099a9 	.word	0x080099a9

08009a80 <__sfp>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	4607      	mov	r7, r0
 8009a84:	f7ff ffac 	bl	80099e0 <__sfp_lock_acquire>
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <__sfp+0x84>)
 8009a8a:	681e      	ldr	r6, [r3, #0]
 8009a8c:	69b3      	ldr	r3, [r6, #24]
 8009a8e:	b913      	cbnz	r3, 8009a96 <__sfp+0x16>
 8009a90:	4630      	mov	r0, r6
 8009a92:	f7ff ffbd 	bl	8009a10 <__sinit>
 8009a96:	3648      	adds	r6, #72	; 0x48
 8009a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	d503      	bpl.n	8009aa8 <__sfp+0x28>
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	b30b      	cbz	r3, 8009ae8 <__sfp+0x68>
 8009aa4:	6836      	ldr	r6, [r6, #0]
 8009aa6:	e7f7      	b.n	8009a98 <__sfp+0x18>
 8009aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009aac:	b9d5      	cbnz	r5, 8009ae4 <__sfp+0x64>
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <__sfp+0x88>)
 8009ab0:	60e3      	str	r3, [r4, #12]
 8009ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ab8:	f000 fbba 	bl	800a230 <__retarget_lock_init_recursive>
 8009abc:	f7ff ff96 	bl	80099ec <__sfp_lock_release>
 8009ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ac8:	6025      	str	r5, [r4, #0]
 8009aca:	61a5      	str	r5, [r4, #24]
 8009acc:	2208      	movs	r2, #8
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad4:	f7fd f89e 	bl	8006c14 <memset>
 8009ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae4:	3468      	adds	r4, #104	; 0x68
 8009ae6:	e7d9      	b.n	8009a9c <__sfp+0x1c>
 8009ae8:	2104      	movs	r1, #4
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7ff ff62 	bl	80099b4 <__sfmoreglue>
 8009af0:	4604      	mov	r4, r0
 8009af2:	6030      	str	r0, [r6, #0]
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d1d5      	bne.n	8009aa4 <__sfp+0x24>
 8009af8:	f7ff ff78 	bl	80099ec <__sfp_lock_release>
 8009afc:	230c      	movs	r3, #12
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	e7ee      	b.n	8009ae0 <__sfp+0x60>
 8009b02:	bf00      	nop
 8009b04:	0800c558 	.word	0x0800c558
 8009b08:	ffff0001 	.word	0xffff0001

08009b0c <_fwalk_reent>:
 8009b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b10:	4606      	mov	r6, r0
 8009b12:	4688      	mov	r8, r1
 8009b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b18:	2700      	movs	r7, #0
 8009b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b22:	d505      	bpl.n	8009b30 <_fwalk_reent+0x24>
 8009b24:	6824      	ldr	r4, [r4, #0]
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d1f7      	bne.n	8009b1a <_fwalk_reent+0xe>
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b30:	89ab      	ldrh	r3, [r5, #12]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d907      	bls.n	8009b46 <_fwalk_reent+0x3a>
 8009b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	d003      	beq.n	8009b46 <_fwalk_reent+0x3a>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4630      	mov	r0, r6
 8009b42:	47c0      	blx	r8
 8009b44:	4307      	orrs	r7, r0
 8009b46:	3568      	adds	r5, #104	; 0x68
 8009b48:	e7e9      	b.n	8009b1e <_fwalk_reent+0x12>

08009b4a <rshift>:
 8009b4a:	6903      	ldr	r3, [r0, #16]
 8009b4c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b54:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b58:	f100 0414 	add.w	r4, r0, #20
 8009b5c:	dd45      	ble.n	8009bea <rshift+0xa0>
 8009b5e:	f011 011f 	ands.w	r1, r1, #31
 8009b62:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b66:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b6a:	d10c      	bne.n	8009b86 <rshift+0x3c>
 8009b6c:	f100 0710 	add.w	r7, r0, #16
 8009b70:	4629      	mov	r1, r5
 8009b72:	42b1      	cmp	r1, r6
 8009b74:	d334      	bcc.n	8009be0 <rshift+0x96>
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	1eea      	subs	r2, r5, #3
 8009b7c:	4296      	cmp	r6, r2
 8009b7e:	bf38      	it	cc
 8009b80:	2300      	movcc	r3, #0
 8009b82:	4423      	add	r3, r4
 8009b84:	e015      	b.n	8009bb2 <rshift+0x68>
 8009b86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b8a:	f1c1 0820 	rsb	r8, r1, #32
 8009b8e:	40cf      	lsrs	r7, r1
 8009b90:	f105 0e04 	add.w	lr, r5, #4
 8009b94:	46a1      	mov	r9, r4
 8009b96:	4576      	cmp	r6, lr
 8009b98:	46f4      	mov	ip, lr
 8009b9a:	d815      	bhi.n	8009bc8 <rshift+0x7e>
 8009b9c:	1a9a      	subs	r2, r3, r2
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	3a04      	subs	r2, #4
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	42ae      	cmp	r6, r5
 8009ba6:	bf38      	it	cc
 8009ba8:	2200      	movcc	r2, #0
 8009baa:	18a3      	adds	r3, r4, r2
 8009bac:	50a7      	str	r7, [r4, r2]
 8009bae:	b107      	cbz	r7, 8009bb2 <rshift+0x68>
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	1b1a      	subs	r2, r3, r4
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bba:	bf08      	it	eq
 8009bbc:	2300      	moveq	r3, #0
 8009bbe:	6102      	str	r2, [r0, #16]
 8009bc0:	bf08      	it	eq
 8009bc2:	6143      	streq	r3, [r0, #20]
 8009bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	f8dc c000 	ldr.w	ip, [ip]
 8009bcc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bd0:	ea4c 0707 	orr.w	r7, ip, r7
 8009bd4:	f849 7b04 	str.w	r7, [r9], #4
 8009bd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bdc:	40cf      	lsrs	r7, r1
 8009bde:	e7da      	b.n	8009b96 <rshift+0x4c>
 8009be0:	f851 cb04 	ldr.w	ip, [r1], #4
 8009be4:	f847 cf04 	str.w	ip, [r7, #4]!
 8009be8:	e7c3      	b.n	8009b72 <rshift+0x28>
 8009bea:	4623      	mov	r3, r4
 8009bec:	e7e1      	b.n	8009bb2 <rshift+0x68>

08009bee <__hexdig_fun>:
 8009bee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009bf2:	2b09      	cmp	r3, #9
 8009bf4:	d802      	bhi.n	8009bfc <__hexdig_fun+0xe>
 8009bf6:	3820      	subs	r0, #32
 8009bf8:	b2c0      	uxtb	r0, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c00:	2b05      	cmp	r3, #5
 8009c02:	d801      	bhi.n	8009c08 <__hexdig_fun+0x1a>
 8009c04:	3847      	subs	r0, #71	; 0x47
 8009c06:	e7f7      	b.n	8009bf8 <__hexdig_fun+0xa>
 8009c08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d801      	bhi.n	8009c14 <__hexdig_fun+0x26>
 8009c10:	3827      	subs	r0, #39	; 0x27
 8009c12:	e7f1      	b.n	8009bf8 <__hexdig_fun+0xa>
 8009c14:	2000      	movs	r0, #0
 8009c16:	4770      	bx	lr

08009c18 <__gethex>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ed2d 8b02 	vpush	{d8}
 8009c20:	b089      	sub	sp, #36	; 0x24
 8009c22:	ee08 0a10 	vmov	s16, r0
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	4bb4      	ldr	r3, [pc, #720]	; (8009efc <__gethex+0x2e4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	468b      	mov	fp, r1
 8009c32:	4690      	mov	r8, r2
 8009c34:	f7f6 facc 	bl	80001d0 <strlen>
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	f8db 2000 	ldr.w	r2, [fp]
 8009c3e:	4403      	add	r3, r0
 8009c40:	4682      	mov	sl, r0
 8009c42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c46:	9305      	str	r3, [sp, #20]
 8009c48:	1c93      	adds	r3, r2, #2
 8009c4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c52:	32fe      	adds	r2, #254	; 0xfe
 8009c54:	18d1      	adds	r1, r2, r3
 8009c56:	461f      	mov	r7, r3
 8009c58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c5c:	9100      	str	r1, [sp, #0]
 8009c5e:	2830      	cmp	r0, #48	; 0x30
 8009c60:	d0f8      	beq.n	8009c54 <__gethex+0x3c>
 8009c62:	f7ff ffc4 	bl	8009bee <__hexdig_fun>
 8009c66:	4604      	mov	r4, r0
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d13a      	bne.n	8009ce2 <__gethex+0xca>
 8009c6c:	9901      	ldr	r1, [sp, #4]
 8009c6e:	4652      	mov	r2, sl
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7fd ff94 	bl	8007b9e <strncmp>
 8009c76:	4605      	mov	r5, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d168      	bne.n	8009d4e <__gethex+0x136>
 8009c7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009c80:	eb07 060a 	add.w	r6, r7, sl
 8009c84:	f7ff ffb3 	bl	8009bee <__hexdig_fun>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d062      	beq.n	8009d52 <__gethex+0x13a>
 8009c8c:	4633      	mov	r3, r6
 8009c8e:	7818      	ldrb	r0, [r3, #0]
 8009c90:	2830      	cmp	r0, #48	; 0x30
 8009c92:	461f      	mov	r7, r3
 8009c94:	f103 0301 	add.w	r3, r3, #1
 8009c98:	d0f9      	beq.n	8009c8e <__gethex+0x76>
 8009c9a:	f7ff ffa8 	bl	8009bee <__hexdig_fun>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	fab0 f480 	clz	r4, r0
 8009ca4:	0964      	lsrs	r4, r4, #5
 8009ca6:	4635      	mov	r5, r6
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	463a      	mov	r2, r7
 8009cac:	4616      	mov	r6, r2
 8009cae:	3201      	adds	r2, #1
 8009cb0:	7830      	ldrb	r0, [r6, #0]
 8009cb2:	f7ff ff9c 	bl	8009bee <__hexdig_fun>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1f8      	bne.n	8009cac <__gethex+0x94>
 8009cba:	9901      	ldr	r1, [sp, #4]
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7fd ff6d 	bl	8007b9e <strncmp>
 8009cc4:	b980      	cbnz	r0, 8009ce8 <__gethex+0xd0>
 8009cc6:	b94d      	cbnz	r5, 8009cdc <__gethex+0xc4>
 8009cc8:	eb06 050a 	add.w	r5, r6, sl
 8009ccc:	462a      	mov	r2, r5
 8009cce:	4616      	mov	r6, r2
 8009cd0:	3201      	adds	r2, #1
 8009cd2:	7830      	ldrb	r0, [r6, #0]
 8009cd4:	f7ff ff8b 	bl	8009bee <__hexdig_fun>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1f8      	bne.n	8009cce <__gethex+0xb6>
 8009cdc:	1bad      	subs	r5, r5, r6
 8009cde:	00ad      	lsls	r5, r5, #2
 8009ce0:	e004      	b.n	8009cec <__gethex+0xd4>
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	4625      	mov	r5, r4
 8009ce6:	e7e0      	b.n	8009caa <__gethex+0x92>
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	d1f7      	bne.n	8009cdc <__gethex+0xc4>
 8009cec:	7833      	ldrb	r3, [r6, #0]
 8009cee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cf2:	2b50      	cmp	r3, #80	; 0x50
 8009cf4:	d13b      	bne.n	8009d6e <__gethex+0x156>
 8009cf6:	7873      	ldrb	r3, [r6, #1]
 8009cf8:	2b2b      	cmp	r3, #43	; 0x2b
 8009cfa:	d02c      	beq.n	8009d56 <__gethex+0x13e>
 8009cfc:	2b2d      	cmp	r3, #45	; 0x2d
 8009cfe:	d02e      	beq.n	8009d5e <__gethex+0x146>
 8009d00:	1c71      	adds	r1, r6, #1
 8009d02:	f04f 0900 	mov.w	r9, #0
 8009d06:	7808      	ldrb	r0, [r1, #0]
 8009d08:	f7ff ff71 	bl	8009bee <__hexdig_fun>
 8009d0c:	1e43      	subs	r3, r0, #1
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b18      	cmp	r3, #24
 8009d12:	d82c      	bhi.n	8009d6e <__gethex+0x156>
 8009d14:	f1a0 0210 	sub.w	r2, r0, #16
 8009d18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d1c:	f7ff ff67 	bl	8009bee <__hexdig_fun>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b18      	cmp	r3, #24
 8009d26:	d91d      	bls.n	8009d64 <__gethex+0x14c>
 8009d28:	f1b9 0f00 	cmp.w	r9, #0
 8009d2c:	d000      	beq.n	8009d30 <__gethex+0x118>
 8009d2e:	4252      	negs	r2, r2
 8009d30:	4415      	add	r5, r2
 8009d32:	f8cb 1000 	str.w	r1, [fp]
 8009d36:	b1e4      	cbz	r4, 8009d72 <__gethex+0x15a>
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bf14      	ite	ne
 8009d3e:	2700      	movne	r7, #0
 8009d40:	2706      	moveq	r7, #6
 8009d42:	4638      	mov	r0, r7
 8009d44:	b009      	add	sp, #36	; 0x24
 8009d46:	ecbd 8b02 	vpop	{d8}
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	463e      	mov	r6, r7
 8009d50:	4625      	mov	r5, r4
 8009d52:	2401      	movs	r4, #1
 8009d54:	e7ca      	b.n	8009cec <__gethex+0xd4>
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	1cb1      	adds	r1, r6, #2
 8009d5c:	e7d3      	b.n	8009d06 <__gethex+0xee>
 8009d5e:	f04f 0901 	mov.w	r9, #1
 8009d62:	e7fa      	b.n	8009d5a <__gethex+0x142>
 8009d64:	230a      	movs	r3, #10
 8009d66:	fb03 0202 	mla	r2, r3, r2, r0
 8009d6a:	3a10      	subs	r2, #16
 8009d6c:	e7d4      	b.n	8009d18 <__gethex+0x100>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	e7df      	b.n	8009d32 <__gethex+0x11a>
 8009d72:	1bf3      	subs	r3, r6, r7
 8009d74:	3b01      	subs	r3, #1
 8009d76:	4621      	mov	r1, r4
 8009d78:	2b07      	cmp	r3, #7
 8009d7a:	dc0b      	bgt.n	8009d94 <__gethex+0x17c>
 8009d7c:	ee18 0a10 	vmov	r0, s16
 8009d80:	f000 fafa 	bl	800a378 <_Balloc>
 8009d84:	4604      	mov	r4, r0
 8009d86:	b940      	cbnz	r0, 8009d9a <__gethex+0x182>
 8009d88:	4b5d      	ldr	r3, [pc, #372]	; (8009f00 <__gethex+0x2e8>)
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	21de      	movs	r1, #222	; 0xde
 8009d8e:	485d      	ldr	r0, [pc, #372]	; (8009f04 <__gethex+0x2ec>)
 8009d90:	f001 ffea 	bl	800bd68 <__assert_func>
 8009d94:	3101      	adds	r1, #1
 8009d96:	105b      	asrs	r3, r3, #1
 8009d98:	e7ee      	b.n	8009d78 <__gethex+0x160>
 8009d9a:	f100 0914 	add.w	r9, r0, #20
 8009d9e:	f04f 0b00 	mov.w	fp, #0
 8009da2:	f1ca 0301 	rsb	r3, sl, #1
 8009da6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009daa:	f8cd b000 	str.w	fp, [sp]
 8009dae:	9306      	str	r3, [sp, #24]
 8009db0:	42b7      	cmp	r7, r6
 8009db2:	d340      	bcc.n	8009e36 <__gethex+0x21e>
 8009db4:	9802      	ldr	r0, [sp, #8]
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	f840 3b04 	str.w	r3, [r0], #4
 8009dbc:	eba0 0009 	sub.w	r0, r0, r9
 8009dc0:	1080      	asrs	r0, r0, #2
 8009dc2:	0146      	lsls	r6, r0, #5
 8009dc4:	6120      	str	r0, [r4, #16]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fbc8 	bl	800a55c <__hi0bits>
 8009dcc:	1a30      	subs	r0, r6, r0
 8009dce:	f8d8 6000 	ldr.w	r6, [r8]
 8009dd2:	42b0      	cmp	r0, r6
 8009dd4:	dd63      	ble.n	8009e9e <__gethex+0x286>
 8009dd6:	1b87      	subs	r7, r0, r6
 8009dd8:	4639      	mov	r1, r7
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 ff6c 	bl	800acb8 <__any_on>
 8009de0:	4682      	mov	sl, r0
 8009de2:	b1a8      	cbz	r0, 8009e10 <__gethex+0x1f8>
 8009de4:	1e7b      	subs	r3, r7, #1
 8009de6:	1159      	asrs	r1, r3, #5
 8009de8:	f003 021f 	and.w	r2, r3, #31
 8009dec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009df0:	f04f 0a01 	mov.w	sl, #1
 8009df4:	fa0a f202 	lsl.w	r2, sl, r2
 8009df8:	420a      	tst	r2, r1
 8009dfa:	d009      	beq.n	8009e10 <__gethex+0x1f8>
 8009dfc:	4553      	cmp	r3, sl
 8009dfe:	dd05      	ble.n	8009e0c <__gethex+0x1f4>
 8009e00:	1eb9      	subs	r1, r7, #2
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 ff58 	bl	800acb8 <__any_on>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d145      	bne.n	8009e98 <__gethex+0x280>
 8009e0c:	f04f 0a02 	mov.w	sl, #2
 8009e10:	4639      	mov	r1, r7
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff fe99 	bl	8009b4a <rshift>
 8009e18:	443d      	add	r5, r7
 8009e1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e1e:	42ab      	cmp	r3, r5
 8009e20:	da4c      	bge.n	8009ebc <__gethex+0x2a4>
 8009e22:	ee18 0a10 	vmov	r0, s16
 8009e26:	4621      	mov	r1, r4
 8009e28:	f000 fae6 	bl	800a3f8 <_Bfree>
 8009e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	27a3      	movs	r7, #163	; 0xa3
 8009e34:	e785      	b.n	8009d42 <__gethex+0x12a>
 8009e36:	1e73      	subs	r3, r6, #1
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d019      	beq.n	8009e78 <__gethex+0x260>
 8009e44:	f1bb 0f20 	cmp.w	fp, #32
 8009e48:	d107      	bne.n	8009e5a <__gethex+0x242>
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	9a00      	ldr	r2, [sp, #0]
 8009e4e:	f843 2b04 	str.w	r2, [r3], #4
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	2300      	movs	r3, #0
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	469b      	mov	fp, r3
 8009e5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009e5e:	f7ff fec6 	bl	8009bee <__hexdig_fun>
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	f000 000f 	and.w	r0, r0, #15
 8009e68:	fa00 f00b 	lsl.w	r0, r0, fp
 8009e6c:	4303      	orrs	r3, r0
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	f10b 0b04 	add.w	fp, fp, #4
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	e00d      	b.n	8009e94 <__gethex+0x27c>
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	9a06      	ldr	r2, [sp, #24]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	42bb      	cmp	r3, r7
 8009e80:	d3e0      	bcc.n	8009e44 <__gethex+0x22c>
 8009e82:	4618      	mov	r0, r3
 8009e84:	9901      	ldr	r1, [sp, #4]
 8009e86:	9307      	str	r3, [sp, #28]
 8009e88:	4652      	mov	r2, sl
 8009e8a:	f7fd fe88 	bl	8007b9e <strncmp>
 8009e8e:	9b07      	ldr	r3, [sp, #28]
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d1d7      	bne.n	8009e44 <__gethex+0x22c>
 8009e94:	461e      	mov	r6, r3
 8009e96:	e78b      	b.n	8009db0 <__gethex+0x198>
 8009e98:	f04f 0a03 	mov.w	sl, #3
 8009e9c:	e7b8      	b.n	8009e10 <__gethex+0x1f8>
 8009e9e:	da0a      	bge.n	8009eb6 <__gethex+0x29e>
 8009ea0:	1a37      	subs	r7, r6, r0
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	ee18 0a10 	vmov	r0, s16
 8009ea8:	463a      	mov	r2, r7
 8009eaa:	f000 fcc1 	bl	800a830 <__lshift>
 8009eae:	1bed      	subs	r5, r5, r7
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	f100 0914 	add.w	r9, r0, #20
 8009eb6:	f04f 0a00 	mov.w	sl, #0
 8009eba:	e7ae      	b.n	8009e1a <__gethex+0x202>
 8009ebc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ec0:	42a8      	cmp	r0, r5
 8009ec2:	dd72      	ble.n	8009faa <__gethex+0x392>
 8009ec4:	1b45      	subs	r5, r0, r5
 8009ec6:	42ae      	cmp	r6, r5
 8009ec8:	dc36      	bgt.n	8009f38 <__gethex+0x320>
 8009eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d02a      	beq.n	8009f28 <__gethex+0x310>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d02c      	beq.n	8009f30 <__gethex+0x318>
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d11c      	bne.n	8009f14 <__gethex+0x2fc>
 8009eda:	42ae      	cmp	r6, r5
 8009edc:	d11a      	bne.n	8009f14 <__gethex+0x2fc>
 8009ede:	2e01      	cmp	r6, #1
 8009ee0:	d112      	bne.n	8009f08 <__gethex+0x2f0>
 8009ee2:	9a04      	ldr	r2, [sp, #16]
 8009ee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ee8:	6013      	str	r3, [r2, #0]
 8009eea:	2301      	movs	r3, #1
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	f8c9 3000 	str.w	r3, [r9]
 8009ef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ef4:	2762      	movs	r7, #98	; 0x62
 8009ef6:	601c      	str	r4, [r3, #0]
 8009ef8:	e723      	b.n	8009d42 <__gethex+0x12a>
 8009efa:	bf00      	nop
 8009efc:	0800c844 	.word	0x0800c844
 8009f00:	0800c768 	.word	0x0800c768
 8009f04:	0800c7dc 	.word	0x0800c7dc
 8009f08:	1e71      	subs	r1, r6, #1
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fed4 	bl	800acb8 <__any_on>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d1e6      	bne.n	8009ee2 <__gethex+0x2ca>
 8009f14:	ee18 0a10 	vmov	r0, s16
 8009f18:	4621      	mov	r1, r4
 8009f1a:	f000 fa6d 	bl	800a3f8 <_Bfree>
 8009f1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f20:	2300      	movs	r3, #0
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	2750      	movs	r7, #80	; 0x50
 8009f26:	e70c      	b.n	8009d42 <__gethex+0x12a>
 8009f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f2      	bne.n	8009f14 <__gethex+0x2fc>
 8009f2e:	e7d8      	b.n	8009ee2 <__gethex+0x2ca>
 8009f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1d5      	bne.n	8009ee2 <__gethex+0x2ca>
 8009f36:	e7ed      	b.n	8009f14 <__gethex+0x2fc>
 8009f38:	1e6f      	subs	r7, r5, #1
 8009f3a:	f1ba 0f00 	cmp.w	sl, #0
 8009f3e:	d131      	bne.n	8009fa4 <__gethex+0x38c>
 8009f40:	b127      	cbz	r7, 8009f4c <__gethex+0x334>
 8009f42:	4639      	mov	r1, r7
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 feb7 	bl	800acb8 <__any_on>
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	117b      	asrs	r3, r7, #5
 8009f4e:	2101      	movs	r1, #1
 8009f50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f54:	f007 071f 	and.w	r7, r7, #31
 8009f58:	fa01 f707 	lsl.w	r7, r1, r7
 8009f5c:	421f      	tst	r7, r3
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4620      	mov	r0, r4
 8009f62:	bf18      	it	ne
 8009f64:	f04a 0a02 	orrne.w	sl, sl, #2
 8009f68:	1b76      	subs	r6, r6, r5
 8009f6a:	f7ff fdee 	bl	8009b4a <rshift>
 8009f6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f72:	2702      	movs	r7, #2
 8009f74:	f1ba 0f00 	cmp.w	sl, #0
 8009f78:	d048      	beq.n	800a00c <__gethex+0x3f4>
 8009f7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d015      	beq.n	8009fae <__gethex+0x396>
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d017      	beq.n	8009fb6 <__gethex+0x39e>
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d109      	bne.n	8009f9e <__gethex+0x386>
 8009f8a:	f01a 0f02 	tst.w	sl, #2
 8009f8e:	d006      	beq.n	8009f9e <__gethex+0x386>
 8009f90:	f8d9 0000 	ldr.w	r0, [r9]
 8009f94:	ea4a 0a00 	orr.w	sl, sl, r0
 8009f98:	f01a 0f01 	tst.w	sl, #1
 8009f9c:	d10e      	bne.n	8009fbc <__gethex+0x3a4>
 8009f9e:	f047 0710 	orr.w	r7, r7, #16
 8009fa2:	e033      	b.n	800a00c <__gethex+0x3f4>
 8009fa4:	f04f 0a01 	mov.w	sl, #1
 8009fa8:	e7d0      	b.n	8009f4c <__gethex+0x334>
 8009faa:	2701      	movs	r7, #1
 8009fac:	e7e2      	b.n	8009f74 <__gethex+0x35c>
 8009fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fb0:	f1c3 0301 	rsb	r3, r3, #1
 8009fb4:	9315      	str	r3, [sp, #84]	; 0x54
 8009fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0f0      	beq.n	8009f9e <__gethex+0x386>
 8009fbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fc0:	f104 0314 	add.w	r3, r4, #20
 8009fc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fcc:	f04f 0c00 	mov.w	ip, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009fda:	d01c      	beq.n	800a016 <__gethex+0x3fe>
 8009fdc:	3201      	adds	r2, #1
 8009fde:	6002      	str	r2, [r0, #0]
 8009fe0:	2f02      	cmp	r7, #2
 8009fe2:	f104 0314 	add.w	r3, r4, #20
 8009fe6:	d13f      	bne.n	800a068 <__gethex+0x450>
 8009fe8:	f8d8 2000 	ldr.w	r2, [r8]
 8009fec:	3a01      	subs	r2, #1
 8009fee:	42b2      	cmp	r2, r6
 8009ff0:	d10a      	bne.n	800a008 <__gethex+0x3f0>
 8009ff2:	1171      	asrs	r1, r6, #5
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ffa:	f006 061f 	and.w	r6, r6, #31
 8009ffe:	fa02 f606 	lsl.w	r6, r2, r6
 800a002:	421e      	tst	r6, r3
 800a004:	bf18      	it	ne
 800a006:	4617      	movne	r7, r2
 800a008:	f047 0720 	orr.w	r7, r7, #32
 800a00c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a00e:	601c      	str	r4, [r3, #0]
 800a010:	9b04      	ldr	r3, [sp, #16]
 800a012:	601d      	str	r5, [r3, #0]
 800a014:	e695      	b.n	8009d42 <__gethex+0x12a>
 800a016:	4299      	cmp	r1, r3
 800a018:	f843 cc04 	str.w	ip, [r3, #-4]
 800a01c:	d8d8      	bhi.n	8009fd0 <__gethex+0x3b8>
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	459b      	cmp	fp, r3
 800a022:	db19      	blt.n	800a058 <__gethex+0x440>
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	ee18 0a10 	vmov	r0, s16
 800a02a:	3101      	adds	r1, #1
 800a02c:	f000 f9a4 	bl	800a378 <_Balloc>
 800a030:	4681      	mov	r9, r0
 800a032:	b918      	cbnz	r0, 800a03c <__gethex+0x424>
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <__gethex+0x488>)
 800a036:	4602      	mov	r2, r0
 800a038:	2184      	movs	r1, #132	; 0x84
 800a03a:	e6a8      	b.n	8009d8e <__gethex+0x176>
 800a03c:	6922      	ldr	r2, [r4, #16]
 800a03e:	3202      	adds	r2, #2
 800a040:	f104 010c 	add.w	r1, r4, #12
 800a044:	0092      	lsls	r2, r2, #2
 800a046:	300c      	adds	r0, #12
 800a048:	f000 f988 	bl	800a35c <memcpy>
 800a04c:	4621      	mov	r1, r4
 800a04e:	ee18 0a10 	vmov	r0, s16
 800a052:	f000 f9d1 	bl	800a3f8 <_Bfree>
 800a056:	464c      	mov	r4, r9
 800a058:	6923      	ldr	r3, [r4, #16]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a060:	6122      	str	r2, [r4, #16]
 800a062:	2201      	movs	r2, #1
 800a064:	615a      	str	r2, [r3, #20]
 800a066:	e7bb      	b.n	8009fe0 <__gethex+0x3c8>
 800a068:	6922      	ldr	r2, [r4, #16]
 800a06a:	455a      	cmp	r2, fp
 800a06c:	dd0b      	ble.n	800a086 <__gethex+0x46e>
 800a06e:	2101      	movs	r1, #1
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff fd6a 	bl	8009b4a <rshift>
 800a076:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a07a:	3501      	adds	r5, #1
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	f6ff aed0 	blt.w	8009e22 <__gethex+0x20a>
 800a082:	2701      	movs	r7, #1
 800a084:	e7c0      	b.n	800a008 <__gethex+0x3f0>
 800a086:	f016 061f 	ands.w	r6, r6, #31
 800a08a:	d0fa      	beq.n	800a082 <__gethex+0x46a>
 800a08c:	4453      	add	r3, sl
 800a08e:	f1c6 0620 	rsb	r6, r6, #32
 800a092:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a096:	f000 fa61 	bl	800a55c <__hi0bits>
 800a09a:	42b0      	cmp	r0, r6
 800a09c:	dbe7      	blt.n	800a06e <__gethex+0x456>
 800a09e:	e7f0      	b.n	800a082 <__gethex+0x46a>
 800a0a0:	0800c768 	.word	0x0800c768

0800a0a4 <L_shift>:
 800a0a4:	f1c2 0208 	rsb	r2, r2, #8
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	b570      	push	{r4, r5, r6, lr}
 800a0ac:	f1c2 0620 	rsb	r6, r2, #32
 800a0b0:	6843      	ldr	r3, [r0, #4]
 800a0b2:	6804      	ldr	r4, [r0, #0]
 800a0b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a0b8:	432c      	orrs	r4, r5
 800a0ba:	40d3      	lsrs	r3, r2
 800a0bc:	6004      	str	r4, [r0, #0]
 800a0be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0c2:	4288      	cmp	r0, r1
 800a0c4:	d3f4      	bcc.n	800a0b0 <L_shift+0xc>
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}

0800a0c8 <__match>:
 800a0c8:	b530      	push	{r4, r5, lr}
 800a0ca:	6803      	ldr	r3, [r0, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0d2:	b914      	cbnz	r4, 800a0da <__match+0x12>
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	bd30      	pop	{r4, r5, pc}
 800a0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a0e2:	2d19      	cmp	r5, #25
 800a0e4:	bf98      	it	ls
 800a0e6:	3220      	addls	r2, #32
 800a0e8:	42a2      	cmp	r2, r4
 800a0ea:	d0f0      	beq.n	800a0ce <__match+0x6>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e7f3      	b.n	800a0d8 <__match+0x10>

0800a0f0 <__hexnan>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	680b      	ldr	r3, [r1, #0]
 800a0f6:	115e      	asrs	r6, r3, #5
 800a0f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0fc:	f013 031f 	ands.w	r3, r3, #31
 800a100:	b087      	sub	sp, #28
 800a102:	bf18      	it	ne
 800a104:	3604      	addne	r6, #4
 800a106:	2500      	movs	r5, #0
 800a108:	1f37      	subs	r7, r6, #4
 800a10a:	4690      	mov	r8, r2
 800a10c:	6802      	ldr	r2, [r0, #0]
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	4682      	mov	sl, r0
 800a112:	f846 5c04 	str.w	r5, [r6, #-4]
 800a116:	46b9      	mov	r9, r7
 800a118:	463c      	mov	r4, r7
 800a11a:	9502      	str	r5, [sp, #8]
 800a11c:	46ab      	mov	fp, r5
 800a11e:	7851      	ldrb	r1, [r2, #1]
 800a120:	1c53      	adds	r3, r2, #1
 800a122:	9303      	str	r3, [sp, #12]
 800a124:	b341      	cbz	r1, 800a178 <__hexnan+0x88>
 800a126:	4608      	mov	r0, r1
 800a128:	9205      	str	r2, [sp, #20]
 800a12a:	9104      	str	r1, [sp, #16]
 800a12c:	f7ff fd5f 	bl	8009bee <__hexdig_fun>
 800a130:	2800      	cmp	r0, #0
 800a132:	d14f      	bne.n	800a1d4 <__hexnan+0xe4>
 800a134:	9904      	ldr	r1, [sp, #16]
 800a136:	9a05      	ldr	r2, [sp, #20]
 800a138:	2920      	cmp	r1, #32
 800a13a:	d818      	bhi.n	800a16e <__hexnan+0x7e>
 800a13c:	9b02      	ldr	r3, [sp, #8]
 800a13e:	459b      	cmp	fp, r3
 800a140:	dd13      	ble.n	800a16a <__hexnan+0x7a>
 800a142:	454c      	cmp	r4, r9
 800a144:	d206      	bcs.n	800a154 <__hexnan+0x64>
 800a146:	2d07      	cmp	r5, #7
 800a148:	dc04      	bgt.n	800a154 <__hexnan+0x64>
 800a14a:	462a      	mov	r2, r5
 800a14c:	4649      	mov	r1, r9
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff ffa8 	bl	800a0a4 <L_shift>
 800a154:	4544      	cmp	r4, r8
 800a156:	d950      	bls.n	800a1fa <__hexnan+0x10a>
 800a158:	2300      	movs	r3, #0
 800a15a:	f1a4 0904 	sub.w	r9, r4, #4
 800a15e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a162:	f8cd b008 	str.w	fp, [sp, #8]
 800a166:	464c      	mov	r4, r9
 800a168:	461d      	mov	r5, r3
 800a16a:	9a03      	ldr	r2, [sp, #12]
 800a16c:	e7d7      	b.n	800a11e <__hexnan+0x2e>
 800a16e:	2929      	cmp	r1, #41	; 0x29
 800a170:	d156      	bne.n	800a220 <__hexnan+0x130>
 800a172:	3202      	adds	r2, #2
 800a174:	f8ca 2000 	str.w	r2, [sl]
 800a178:	f1bb 0f00 	cmp.w	fp, #0
 800a17c:	d050      	beq.n	800a220 <__hexnan+0x130>
 800a17e:	454c      	cmp	r4, r9
 800a180:	d206      	bcs.n	800a190 <__hexnan+0xa0>
 800a182:	2d07      	cmp	r5, #7
 800a184:	dc04      	bgt.n	800a190 <__hexnan+0xa0>
 800a186:	462a      	mov	r2, r5
 800a188:	4649      	mov	r1, r9
 800a18a:	4620      	mov	r0, r4
 800a18c:	f7ff ff8a 	bl	800a0a4 <L_shift>
 800a190:	4544      	cmp	r4, r8
 800a192:	d934      	bls.n	800a1fe <__hexnan+0x10e>
 800a194:	f1a8 0204 	sub.w	r2, r8, #4
 800a198:	4623      	mov	r3, r4
 800a19a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a19e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1a2:	429f      	cmp	r7, r3
 800a1a4:	d2f9      	bcs.n	800a19a <__hexnan+0xaa>
 800a1a6:	1b3b      	subs	r3, r7, r4
 800a1a8:	f023 0303 	bic.w	r3, r3, #3
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	3e03      	subs	r6, #3
 800a1b2:	42b4      	cmp	r4, r6
 800a1b4:	bf88      	it	hi
 800a1b6:	2304      	movhi	r3, #4
 800a1b8:	4443      	add	r3, r8
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f843 2b04 	str.w	r2, [r3], #4
 800a1c0:	429f      	cmp	r7, r3
 800a1c2:	d2fb      	bcs.n	800a1bc <__hexnan+0xcc>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	b91b      	cbnz	r3, 800a1d0 <__hexnan+0xe0>
 800a1c8:	4547      	cmp	r7, r8
 800a1ca:	d127      	bne.n	800a21c <__hexnan+0x12c>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	2005      	movs	r0, #5
 800a1d2:	e026      	b.n	800a222 <__hexnan+0x132>
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	2d08      	cmp	r5, #8
 800a1d8:	f10b 0b01 	add.w	fp, fp, #1
 800a1dc:	dd06      	ble.n	800a1ec <__hexnan+0xfc>
 800a1de:	4544      	cmp	r4, r8
 800a1e0:	d9c3      	bls.n	800a16a <__hexnan+0x7a>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1e8:	2501      	movs	r5, #1
 800a1ea:	3c04      	subs	r4, #4
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	f000 000f 	and.w	r0, r0, #15
 800a1f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a1f6:	6022      	str	r2, [r4, #0]
 800a1f8:	e7b7      	b.n	800a16a <__hexnan+0x7a>
 800a1fa:	2508      	movs	r5, #8
 800a1fc:	e7b5      	b.n	800a16a <__hexnan+0x7a>
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0df      	beq.n	800a1c4 <__hexnan+0xd4>
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	f1c3 0320 	rsb	r3, r3, #32
 800a20c:	fa22 f303 	lsr.w	r3, r2, r3
 800a210:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a214:	401a      	ands	r2, r3
 800a216:	f846 2c04 	str.w	r2, [r6, #-4]
 800a21a:	e7d3      	b.n	800a1c4 <__hexnan+0xd4>
 800a21c:	3f04      	subs	r7, #4
 800a21e:	e7d1      	b.n	800a1c4 <__hexnan+0xd4>
 800a220:	2004      	movs	r0, #4
 800a222:	b007      	add	sp, #28
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a228 <_localeconv_r>:
 800a228:	4800      	ldr	r0, [pc, #0]	; (800a22c <_localeconv_r+0x4>)
 800a22a:	4770      	bx	lr
 800a22c:	20000194 	.word	0x20000194

0800a230 <__retarget_lock_init_recursive>:
 800a230:	4770      	bx	lr

0800a232 <__retarget_lock_acquire_recursive>:
 800a232:	4770      	bx	lr

0800a234 <__retarget_lock_release_recursive>:
 800a234:	4770      	bx	lr
	...

0800a238 <_lseek_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	; (800a258 <_lseek_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f8 faa6 	bl	8002798 <_lseek>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_lseek_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_lseek_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	2000091c 	.word	0x2000091c

0800a25c <__swhatbuf_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	460e      	mov	r6, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	2900      	cmp	r1, #0
 800a266:	b096      	sub	sp, #88	; 0x58
 800a268:	4614      	mov	r4, r2
 800a26a:	461d      	mov	r5, r3
 800a26c:	da08      	bge.n	800a280 <__swhatbuf_r+0x24>
 800a26e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	061a      	lsls	r2, r3, #24
 800a278:	d410      	bmi.n	800a29c <__swhatbuf_r+0x40>
 800a27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a27e:	e00e      	b.n	800a29e <__swhatbuf_r+0x42>
 800a280:	466a      	mov	r2, sp
 800a282:	f001 fda1 	bl	800bdc8 <_fstat_r>
 800a286:	2800      	cmp	r0, #0
 800a288:	dbf1      	blt.n	800a26e <__swhatbuf_r+0x12>
 800a28a:	9a01      	ldr	r2, [sp, #4]
 800a28c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a294:	425a      	negs	r2, r3
 800a296:	415a      	adcs	r2, r3
 800a298:	602a      	str	r2, [r5, #0]
 800a29a:	e7ee      	b.n	800a27a <__swhatbuf_r+0x1e>
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	2000      	movs	r0, #0
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	b016      	add	sp, #88	; 0x58
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2a8 <__smakebuf_r>:
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2ac:	079d      	lsls	r5, r3, #30
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d507      	bpl.n	800a2c4 <__smakebuf_r+0x1c>
 800a2b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6163      	str	r3, [r4, #20]
 800a2c0:	b002      	add	sp, #8
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	ab01      	add	r3, sp, #4
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f7ff ffc8 	bl	800a25c <__swhatbuf_r>
 800a2cc:	9900      	ldr	r1, [sp, #0]
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 fd95 	bl	800ae00 <_malloc_r>
 800a2d6:	b948      	cbnz	r0, 800a2ec <__smakebuf_r+0x44>
 800a2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d4ef      	bmi.n	800a2c0 <__smakebuf_r+0x18>
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	e7e3      	b.n	800a2b4 <__smakebuf_r+0xc>
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <__smakebuf_r+0x7c>)
 800a2ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	6020      	str	r0, [r4, #0]
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	9b00      	ldr	r3, [sp, #0]
 800a2fc:	6163      	str	r3, [r4, #20]
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	6120      	str	r0, [r4, #16]
 800a302:	b15b      	cbz	r3, 800a31c <__smakebuf_r+0x74>
 800a304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a308:	4630      	mov	r0, r6
 800a30a:	f001 fd6f 	bl	800bdec <_isatty_r>
 800a30e:	b128      	cbz	r0, 800a31c <__smakebuf_r+0x74>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f023 0303 	bic.w	r3, r3, #3
 800a316:	f043 0301 	orr.w	r3, r3, #1
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	89a0      	ldrh	r0, [r4, #12]
 800a31e:	4305      	orrs	r5, r0
 800a320:	81a5      	strh	r5, [r4, #12]
 800a322:	e7cd      	b.n	800a2c0 <__smakebuf_r+0x18>
 800a324:	080099a9 	.word	0x080099a9

0800a328 <malloc>:
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <malloc+0xc>)
 800a32a:	4601      	mov	r1, r0
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	f000 bd67 	b.w	800ae00 <_malloc_r>
 800a332:	bf00      	nop
 800a334:	2000003c 	.word	0x2000003c

0800a338 <__ascii_mbtowc>:
 800a338:	b082      	sub	sp, #8
 800a33a:	b901      	cbnz	r1, 800a33e <__ascii_mbtowc+0x6>
 800a33c:	a901      	add	r1, sp, #4
 800a33e:	b142      	cbz	r2, 800a352 <__ascii_mbtowc+0x1a>
 800a340:	b14b      	cbz	r3, 800a356 <__ascii_mbtowc+0x1e>
 800a342:	7813      	ldrb	r3, [r2, #0]
 800a344:	600b      	str	r3, [r1, #0]
 800a346:	7812      	ldrb	r2, [r2, #0]
 800a348:	1e10      	subs	r0, r2, #0
 800a34a:	bf18      	it	ne
 800a34c:	2001      	movne	r0, #1
 800a34e:	b002      	add	sp, #8
 800a350:	4770      	bx	lr
 800a352:	4610      	mov	r0, r2
 800a354:	e7fb      	b.n	800a34e <__ascii_mbtowc+0x16>
 800a356:	f06f 0001 	mvn.w	r0, #1
 800a35a:	e7f8      	b.n	800a34e <__ascii_mbtowc+0x16>

0800a35c <memcpy>:
 800a35c:	440a      	add	r2, r1
 800a35e:	4291      	cmp	r1, r2
 800a360:	f100 33ff 	add.w	r3, r0, #4294967295
 800a364:	d100      	bne.n	800a368 <memcpy+0xc>
 800a366:	4770      	bx	lr
 800a368:	b510      	push	{r4, lr}
 800a36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a36e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a372:	4291      	cmp	r1, r2
 800a374:	d1f9      	bne.n	800a36a <memcpy+0xe>
 800a376:	bd10      	pop	{r4, pc}

0800a378 <_Balloc>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	b976      	cbnz	r6, 800a3a0 <_Balloc+0x28>
 800a382:	2010      	movs	r0, #16
 800a384:	f7ff ffd0 	bl	800a328 <malloc>
 800a388:	4602      	mov	r2, r0
 800a38a:	6260      	str	r0, [r4, #36]	; 0x24
 800a38c:	b920      	cbnz	r0, 800a398 <_Balloc+0x20>
 800a38e:	4b18      	ldr	r3, [pc, #96]	; (800a3f0 <_Balloc+0x78>)
 800a390:	4818      	ldr	r0, [pc, #96]	; (800a3f4 <_Balloc+0x7c>)
 800a392:	2166      	movs	r1, #102	; 0x66
 800a394:	f001 fce8 	bl	800bd68 <__assert_func>
 800a398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a39c:	6006      	str	r6, [r0, #0]
 800a39e:	60c6      	str	r6, [r0, #12]
 800a3a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3a2:	68f3      	ldr	r3, [r6, #12]
 800a3a4:	b183      	cbz	r3, 800a3c8 <_Balloc+0x50>
 800a3a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ae:	b9b8      	cbnz	r0, 800a3e0 <_Balloc+0x68>
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3b6:	1d72      	adds	r2, r6, #5
 800a3b8:	0092      	lsls	r2, r2, #2
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fc9d 	bl	800acfa <_calloc_r>
 800a3c0:	b160      	cbz	r0, 800a3dc <_Balloc+0x64>
 800a3c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3c6:	e00e      	b.n	800a3e6 <_Balloc+0x6e>
 800a3c8:	2221      	movs	r2, #33	; 0x21
 800a3ca:	2104      	movs	r1, #4
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 fc94 	bl	800acfa <_calloc_r>
 800a3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d4:	60f0      	str	r0, [r6, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e4      	bne.n	800a3a6 <_Balloc+0x2e>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
 800a3e0:	6802      	ldr	r2, [r0, #0]
 800a3e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3ec:	e7f7      	b.n	800a3de <_Balloc+0x66>
 800a3ee:	bf00      	nop
 800a3f0:	0800c6f6 	.word	0x0800c6f6
 800a3f4:	0800c858 	.word	0x0800c858

0800a3f8 <_Bfree>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	b976      	cbnz	r6, 800a420 <_Bfree+0x28>
 800a402:	2010      	movs	r0, #16
 800a404:	f7ff ff90 	bl	800a328 <malloc>
 800a408:	4602      	mov	r2, r0
 800a40a:	6268      	str	r0, [r5, #36]	; 0x24
 800a40c:	b920      	cbnz	r0, 800a418 <_Bfree+0x20>
 800a40e:	4b09      	ldr	r3, [pc, #36]	; (800a434 <_Bfree+0x3c>)
 800a410:	4809      	ldr	r0, [pc, #36]	; (800a438 <_Bfree+0x40>)
 800a412:	218a      	movs	r1, #138	; 0x8a
 800a414:	f001 fca8 	bl	800bd68 <__assert_func>
 800a418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a41c:	6006      	str	r6, [r0, #0]
 800a41e:	60c6      	str	r6, [r0, #12]
 800a420:	b13c      	cbz	r4, 800a432 <_Bfree+0x3a>
 800a422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a424:	6862      	ldr	r2, [r4, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a42c:	6021      	str	r1, [r4, #0]
 800a42e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	0800c6f6 	.word	0x0800c6f6
 800a438:	0800c858 	.word	0x0800c858

0800a43c <__multadd>:
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	690d      	ldr	r5, [r1, #16]
 800a442:	4607      	mov	r7, r0
 800a444:	460c      	mov	r4, r1
 800a446:	461e      	mov	r6, r3
 800a448:	f101 0c14 	add.w	ip, r1, #20
 800a44c:	2000      	movs	r0, #0
 800a44e:	f8dc 3000 	ldr.w	r3, [ip]
 800a452:	b299      	uxth	r1, r3
 800a454:	fb02 6101 	mla	r1, r2, r1, r6
 800a458:	0c1e      	lsrs	r6, r3, #16
 800a45a:	0c0b      	lsrs	r3, r1, #16
 800a45c:	fb02 3306 	mla	r3, r2, r6, r3
 800a460:	b289      	uxth	r1, r1
 800a462:	3001      	adds	r0, #1
 800a464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a468:	4285      	cmp	r5, r0
 800a46a:	f84c 1b04 	str.w	r1, [ip], #4
 800a46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a472:	dcec      	bgt.n	800a44e <__multadd+0x12>
 800a474:	b30e      	cbz	r6, 800a4ba <__multadd+0x7e>
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	42ab      	cmp	r3, r5
 800a47a:	dc19      	bgt.n	800a4b0 <__multadd+0x74>
 800a47c:	6861      	ldr	r1, [r4, #4]
 800a47e:	4638      	mov	r0, r7
 800a480:	3101      	adds	r1, #1
 800a482:	f7ff ff79 	bl	800a378 <_Balloc>
 800a486:	4680      	mov	r8, r0
 800a488:	b928      	cbnz	r0, 800a496 <__multadd+0x5a>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <__multadd+0x84>)
 800a48e:	480d      	ldr	r0, [pc, #52]	; (800a4c4 <__multadd+0x88>)
 800a490:	21b5      	movs	r1, #181	; 0xb5
 800a492:	f001 fc69 	bl	800bd68 <__assert_func>
 800a496:	6922      	ldr	r2, [r4, #16]
 800a498:	3202      	adds	r2, #2
 800a49a:	f104 010c 	add.w	r1, r4, #12
 800a49e:	0092      	lsls	r2, r2, #2
 800a4a0:	300c      	adds	r0, #12
 800a4a2:	f7ff ff5b 	bl	800a35c <memcpy>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff ffa5 	bl	800a3f8 <_Bfree>
 800a4ae:	4644      	mov	r4, r8
 800a4b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	615e      	str	r6, [r3, #20]
 800a4b8:	6125      	str	r5, [r4, #16]
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	0800c768 	.word	0x0800c768
 800a4c4:	0800c858 	.word	0x0800c858

0800a4c8 <__s2b>:
 800a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	4615      	mov	r5, r2
 800a4d0:	461f      	mov	r7, r3
 800a4d2:	2209      	movs	r2, #9
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4dc:	2100      	movs	r1, #0
 800a4de:	2201      	movs	r2, #1
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	db09      	blt.n	800a4f8 <__s2b+0x30>
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ff47 	bl	800a378 <_Balloc>
 800a4ea:	b940      	cbnz	r0, 800a4fe <__s2b+0x36>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	4b19      	ldr	r3, [pc, #100]	; (800a554 <__s2b+0x8c>)
 800a4f0:	4819      	ldr	r0, [pc, #100]	; (800a558 <__s2b+0x90>)
 800a4f2:	21ce      	movs	r1, #206	; 0xce
 800a4f4:	f001 fc38 	bl	800bd68 <__assert_func>
 800a4f8:	0052      	lsls	r2, r2, #1
 800a4fa:	3101      	adds	r1, #1
 800a4fc:	e7f0      	b.n	800a4e0 <__s2b+0x18>
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	6143      	str	r3, [r0, #20]
 800a502:	2d09      	cmp	r5, #9
 800a504:	f04f 0301 	mov.w	r3, #1
 800a508:	6103      	str	r3, [r0, #16]
 800a50a:	dd16      	ble.n	800a53a <__s2b+0x72>
 800a50c:	f104 0909 	add.w	r9, r4, #9
 800a510:	46c8      	mov	r8, r9
 800a512:	442c      	add	r4, r5
 800a514:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a518:	4601      	mov	r1, r0
 800a51a:	3b30      	subs	r3, #48	; 0x30
 800a51c:	220a      	movs	r2, #10
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ff8c 	bl	800a43c <__multadd>
 800a524:	45a0      	cmp	r8, r4
 800a526:	d1f5      	bne.n	800a514 <__s2b+0x4c>
 800a528:	f1a5 0408 	sub.w	r4, r5, #8
 800a52c:	444c      	add	r4, r9
 800a52e:	1b2d      	subs	r5, r5, r4
 800a530:	1963      	adds	r3, r4, r5
 800a532:	42bb      	cmp	r3, r7
 800a534:	db04      	blt.n	800a540 <__s2b+0x78>
 800a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53a:	340a      	adds	r4, #10
 800a53c:	2509      	movs	r5, #9
 800a53e:	e7f6      	b.n	800a52e <__s2b+0x66>
 800a540:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a544:	4601      	mov	r1, r0
 800a546:	3b30      	subs	r3, #48	; 0x30
 800a548:	220a      	movs	r2, #10
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7ff ff76 	bl	800a43c <__multadd>
 800a550:	e7ee      	b.n	800a530 <__s2b+0x68>
 800a552:	bf00      	nop
 800a554:	0800c768 	.word	0x0800c768
 800a558:	0800c858 	.word	0x0800c858

0800a55c <__hi0bits>:
 800a55c:	0c03      	lsrs	r3, r0, #16
 800a55e:	041b      	lsls	r3, r3, #16
 800a560:	b9d3      	cbnz	r3, 800a598 <__hi0bits+0x3c>
 800a562:	0400      	lsls	r0, r0, #16
 800a564:	2310      	movs	r3, #16
 800a566:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a56a:	bf04      	itt	eq
 800a56c:	0200      	lsleq	r0, r0, #8
 800a56e:	3308      	addeq	r3, #8
 800a570:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a574:	bf04      	itt	eq
 800a576:	0100      	lsleq	r0, r0, #4
 800a578:	3304      	addeq	r3, #4
 800a57a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a57e:	bf04      	itt	eq
 800a580:	0080      	lsleq	r0, r0, #2
 800a582:	3302      	addeq	r3, #2
 800a584:	2800      	cmp	r0, #0
 800a586:	db05      	blt.n	800a594 <__hi0bits+0x38>
 800a588:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a58c:	f103 0301 	add.w	r3, r3, #1
 800a590:	bf08      	it	eq
 800a592:	2320      	moveq	r3, #32
 800a594:	4618      	mov	r0, r3
 800a596:	4770      	bx	lr
 800a598:	2300      	movs	r3, #0
 800a59a:	e7e4      	b.n	800a566 <__hi0bits+0xa>

0800a59c <__lo0bits>:
 800a59c:	6803      	ldr	r3, [r0, #0]
 800a59e:	f013 0207 	ands.w	r2, r3, #7
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	d00b      	beq.n	800a5be <__lo0bits+0x22>
 800a5a6:	07da      	lsls	r2, r3, #31
 800a5a8:	d423      	bmi.n	800a5f2 <__lo0bits+0x56>
 800a5aa:	0798      	lsls	r0, r3, #30
 800a5ac:	bf49      	itett	mi
 800a5ae:	085b      	lsrmi	r3, r3, #1
 800a5b0:	089b      	lsrpl	r3, r3, #2
 800a5b2:	2001      	movmi	r0, #1
 800a5b4:	600b      	strmi	r3, [r1, #0]
 800a5b6:	bf5c      	itt	pl
 800a5b8:	600b      	strpl	r3, [r1, #0]
 800a5ba:	2002      	movpl	r0, #2
 800a5bc:	4770      	bx	lr
 800a5be:	b298      	uxth	r0, r3
 800a5c0:	b9a8      	cbnz	r0, 800a5ee <__lo0bits+0x52>
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	2010      	movs	r0, #16
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	b90a      	cbnz	r2, 800a5ce <__lo0bits+0x32>
 800a5ca:	3008      	adds	r0, #8
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	071a      	lsls	r2, r3, #28
 800a5d0:	bf04      	itt	eq
 800a5d2:	091b      	lsreq	r3, r3, #4
 800a5d4:	3004      	addeq	r0, #4
 800a5d6:	079a      	lsls	r2, r3, #30
 800a5d8:	bf04      	itt	eq
 800a5da:	089b      	lsreq	r3, r3, #2
 800a5dc:	3002      	addeq	r0, #2
 800a5de:	07da      	lsls	r2, r3, #31
 800a5e0:	d403      	bmi.n	800a5ea <__lo0bits+0x4e>
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	f100 0001 	add.w	r0, r0, #1
 800a5e8:	d005      	beq.n	800a5f6 <__lo0bits+0x5a>
 800a5ea:	600b      	str	r3, [r1, #0]
 800a5ec:	4770      	bx	lr
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	e7e9      	b.n	800a5c6 <__lo0bits+0x2a>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	4770      	bx	lr
 800a5f6:	2020      	movs	r0, #32
 800a5f8:	4770      	bx	lr
	...

0800a5fc <__i2b>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	2101      	movs	r1, #1
 800a602:	f7ff feb9 	bl	800a378 <_Balloc>
 800a606:	4602      	mov	r2, r0
 800a608:	b928      	cbnz	r0, 800a616 <__i2b+0x1a>
 800a60a:	4b05      	ldr	r3, [pc, #20]	; (800a620 <__i2b+0x24>)
 800a60c:	4805      	ldr	r0, [pc, #20]	; (800a624 <__i2b+0x28>)
 800a60e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a612:	f001 fba9 	bl	800bd68 <__assert_func>
 800a616:	2301      	movs	r3, #1
 800a618:	6144      	str	r4, [r0, #20]
 800a61a:	6103      	str	r3, [r0, #16]
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	0800c768 	.word	0x0800c768
 800a624:	0800c858 	.word	0x0800c858

0800a628 <__multiply>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4691      	mov	r9, r2
 800a62e:	690a      	ldr	r2, [r1, #16]
 800a630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a634:	429a      	cmp	r2, r3
 800a636:	bfb8      	it	lt
 800a638:	460b      	movlt	r3, r1
 800a63a:	460c      	mov	r4, r1
 800a63c:	bfbc      	itt	lt
 800a63e:	464c      	movlt	r4, r9
 800a640:	4699      	movlt	r9, r3
 800a642:	6927      	ldr	r7, [r4, #16]
 800a644:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	6861      	ldr	r1, [r4, #4]
 800a64c:	eb07 060a 	add.w	r6, r7, sl
 800a650:	42b3      	cmp	r3, r6
 800a652:	b085      	sub	sp, #20
 800a654:	bfb8      	it	lt
 800a656:	3101      	addlt	r1, #1
 800a658:	f7ff fe8e 	bl	800a378 <_Balloc>
 800a65c:	b930      	cbnz	r0, 800a66c <__multiply+0x44>
 800a65e:	4602      	mov	r2, r0
 800a660:	4b44      	ldr	r3, [pc, #272]	; (800a774 <__multiply+0x14c>)
 800a662:	4845      	ldr	r0, [pc, #276]	; (800a778 <__multiply+0x150>)
 800a664:	f240 115d 	movw	r1, #349	; 0x15d
 800a668:	f001 fb7e 	bl	800bd68 <__assert_func>
 800a66c:	f100 0514 	add.w	r5, r0, #20
 800a670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a674:	462b      	mov	r3, r5
 800a676:	2200      	movs	r2, #0
 800a678:	4543      	cmp	r3, r8
 800a67a:	d321      	bcc.n	800a6c0 <__multiply+0x98>
 800a67c:	f104 0314 	add.w	r3, r4, #20
 800a680:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a684:	f109 0314 	add.w	r3, r9, #20
 800a688:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a68c:	9202      	str	r2, [sp, #8]
 800a68e:	1b3a      	subs	r2, r7, r4
 800a690:	3a15      	subs	r2, #21
 800a692:	f022 0203 	bic.w	r2, r2, #3
 800a696:	3204      	adds	r2, #4
 800a698:	f104 0115 	add.w	r1, r4, #21
 800a69c:	428f      	cmp	r7, r1
 800a69e:	bf38      	it	cc
 800a6a0:	2204      	movcc	r2, #4
 800a6a2:	9201      	str	r2, [sp, #4]
 800a6a4:	9a02      	ldr	r2, [sp, #8]
 800a6a6:	9303      	str	r3, [sp, #12]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d80c      	bhi.n	800a6c6 <__multiply+0x9e>
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	dd03      	ble.n	800a6b8 <__multiply+0x90>
 800a6b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d05a      	beq.n	800a76e <__multiply+0x146>
 800a6b8:	6106      	str	r6, [r0, #16]
 800a6ba:	b005      	add	sp, #20
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	f843 2b04 	str.w	r2, [r3], #4
 800a6c4:	e7d8      	b.n	800a678 <__multiply+0x50>
 800a6c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6ca:	f1ba 0f00 	cmp.w	sl, #0
 800a6ce:	d024      	beq.n	800a71a <__multiply+0xf2>
 800a6d0:	f104 0e14 	add.w	lr, r4, #20
 800a6d4:	46a9      	mov	r9, r5
 800a6d6:	f04f 0c00 	mov.w	ip, #0
 800a6da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6de:	f8d9 1000 	ldr.w	r1, [r9]
 800a6e2:	fa1f fb82 	uxth.w	fp, r2
 800a6e6:	b289      	uxth	r1, r1
 800a6e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6f4:	4461      	add	r1, ip
 800a6f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a702:	b289      	uxth	r1, r1
 800a704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a708:	4577      	cmp	r7, lr
 800a70a:	f849 1b04 	str.w	r1, [r9], #4
 800a70e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a712:	d8e2      	bhi.n	800a6da <__multiply+0xb2>
 800a714:	9a01      	ldr	r2, [sp, #4]
 800a716:	f845 c002 	str.w	ip, [r5, r2]
 800a71a:	9a03      	ldr	r2, [sp, #12]
 800a71c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a720:	3304      	adds	r3, #4
 800a722:	f1b9 0f00 	cmp.w	r9, #0
 800a726:	d020      	beq.n	800a76a <__multiply+0x142>
 800a728:	6829      	ldr	r1, [r5, #0]
 800a72a:	f104 0c14 	add.w	ip, r4, #20
 800a72e:	46ae      	mov	lr, r5
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f8bc b000 	ldrh.w	fp, [ip]
 800a738:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a73c:	fb09 220b 	mla	r2, r9, fp, r2
 800a740:	4492      	add	sl, r2
 800a742:	b289      	uxth	r1, r1
 800a744:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a748:	f84e 1b04 	str.w	r1, [lr], #4
 800a74c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a750:	f8be 1000 	ldrh.w	r1, [lr]
 800a754:	0c12      	lsrs	r2, r2, #16
 800a756:	fb09 1102 	mla	r1, r9, r2, r1
 800a75a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a75e:	4567      	cmp	r7, ip
 800a760:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a764:	d8e6      	bhi.n	800a734 <__multiply+0x10c>
 800a766:	9a01      	ldr	r2, [sp, #4]
 800a768:	50a9      	str	r1, [r5, r2]
 800a76a:	3504      	adds	r5, #4
 800a76c:	e79a      	b.n	800a6a4 <__multiply+0x7c>
 800a76e:	3e01      	subs	r6, #1
 800a770:	e79c      	b.n	800a6ac <__multiply+0x84>
 800a772:	bf00      	nop
 800a774:	0800c768 	.word	0x0800c768
 800a778:	0800c858 	.word	0x0800c858

0800a77c <__pow5mult>:
 800a77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a780:	4615      	mov	r5, r2
 800a782:	f012 0203 	ands.w	r2, r2, #3
 800a786:	4606      	mov	r6, r0
 800a788:	460f      	mov	r7, r1
 800a78a:	d007      	beq.n	800a79c <__pow5mult+0x20>
 800a78c:	4c25      	ldr	r4, [pc, #148]	; (800a824 <__pow5mult+0xa8>)
 800a78e:	3a01      	subs	r2, #1
 800a790:	2300      	movs	r3, #0
 800a792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a796:	f7ff fe51 	bl	800a43c <__multadd>
 800a79a:	4607      	mov	r7, r0
 800a79c:	10ad      	asrs	r5, r5, #2
 800a79e:	d03d      	beq.n	800a81c <__pow5mult+0xa0>
 800a7a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7a2:	b97c      	cbnz	r4, 800a7c4 <__pow5mult+0x48>
 800a7a4:	2010      	movs	r0, #16
 800a7a6:	f7ff fdbf 	bl	800a328 <malloc>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a7ae:	b928      	cbnz	r0, 800a7bc <__pow5mult+0x40>
 800a7b0:	4b1d      	ldr	r3, [pc, #116]	; (800a828 <__pow5mult+0xac>)
 800a7b2:	481e      	ldr	r0, [pc, #120]	; (800a82c <__pow5mult+0xb0>)
 800a7b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7b8:	f001 fad6 	bl	800bd68 <__assert_func>
 800a7bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7c0:	6004      	str	r4, [r0, #0]
 800a7c2:	60c4      	str	r4, [r0, #12]
 800a7c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7cc:	b94c      	cbnz	r4, 800a7e2 <__pow5mult+0x66>
 800a7ce:	f240 2171 	movw	r1, #625	; 0x271
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ff12 	bl	800a5fc <__i2b>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7de:	4604      	mov	r4, r0
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	f04f 0900 	mov.w	r9, #0
 800a7e6:	07eb      	lsls	r3, r5, #31
 800a7e8:	d50a      	bpl.n	800a800 <__pow5mult+0x84>
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7ff ff1a 	bl	800a628 <__multiply>
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff fdfd 	bl	800a3f8 <_Bfree>
 800a7fe:	4647      	mov	r7, r8
 800a800:	106d      	asrs	r5, r5, #1
 800a802:	d00b      	beq.n	800a81c <__pow5mult+0xa0>
 800a804:	6820      	ldr	r0, [r4, #0]
 800a806:	b938      	cbnz	r0, 800a818 <__pow5mult+0x9c>
 800a808:	4622      	mov	r2, r4
 800a80a:	4621      	mov	r1, r4
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff ff0b 	bl	800a628 <__multiply>
 800a812:	6020      	str	r0, [r4, #0]
 800a814:	f8c0 9000 	str.w	r9, [r0]
 800a818:	4604      	mov	r4, r0
 800a81a:	e7e4      	b.n	800a7e6 <__pow5mult+0x6a>
 800a81c:	4638      	mov	r0, r7
 800a81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a822:	bf00      	nop
 800a824:	0800c9a8 	.word	0x0800c9a8
 800a828:	0800c6f6 	.word	0x0800c6f6
 800a82c:	0800c858 	.word	0x0800c858

0800a830 <__lshift>:
 800a830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	6849      	ldr	r1, [r1, #4]
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	4607      	mov	r7, r0
 800a842:	4691      	mov	r9, r2
 800a844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a848:	f108 0601 	add.w	r6, r8, #1
 800a84c:	42b3      	cmp	r3, r6
 800a84e:	db0b      	blt.n	800a868 <__lshift+0x38>
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff fd91 	bl	800a378 <_Balloc>
 800a856:	4605      	mov	r5, r0
 800a858:	b948      	cbnz	r0, 800a86e <__lshift+0x3e>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b2a      	ldr	r3, [pc, #168]	; (800a908 <__lshift+0xd8>)
 800a85e:	482b      	ldr	r0, [pc, #172]	; (800a90c <__lshift+0xdc>)
 800a860:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a864:	f001 fa80 	bl	800bd68 <__assert_func>
 800a868:	3101      	adds	r1, #1
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	e7ee      	b.n	800a84c <__lshift+0x1c>
 800a86e:	2300      	movs	r3, #0
 800a870:	f100 0114 	add.w	r1, r0, #20
 800a874:	f100 0210 	add.w	r2, r0, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	4553      	cmp	r3, sl
 800a87c:	db37      	blt.n	800a8ee <__lshift+0xbe>
 800a87e:	6920      	ldr	r0, [r4, #16]
 800a880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a884:	f104 0314 	add.w	r3, r4, #20
 800a888:	f019 091f 	ands.w	r9, r9, #31
 800a88c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a894:	d02f      	beq.n	800a8f6 <__lshift+0xc6>
 800a896:	f1c9 0e20 	rsb	lr, r9, #32
 800a89a:	468a      	mov	sl, r1
 800a89c:	f04f 0c00 	mov.w	ip, #0
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	fa02 f209 	lsl.w	r2, r2, r9
 800a8a6:	ea42 020c 	orr.w	r2, r2, ip
 800a8aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8b8:	d8f2      	bhi.n	800a8a0 <__lshift+0x70>
 800a8ba:	1b03      	subs	r3, r0, r4
 800a8bc:	3b15      	subs	r3, #21
 800a8be:	f023 0303 	bic.w	r3, r3, #3
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	f104 0215 	add.w	r2, r4, #21
 800a8c8:	4290      	cmp	r0, r2
 800a8ca:	bf38      	it	cc
 800a8cc:	2304      	movcc	r3, #4
 800a8ce:	f841 c003 	str.w	ip, [r1, r3]
 800a8d2:	f1bc 0f00 	cmp.w	ip, #0
 800a8d6:	d001      	beq.n	800a8dc <__lshift+0xac>
 800a8d8:	f108 0602 	add.w	r6, r8, #2
 800a8dc:	3e01      	subs	r6, #1
 800a8de:	4638      	mov	r0, r7
 800a8e0:	612e      	str	r6, [r5, #16]
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	f7ff fd88 	bl	800a3f8 <_Bfree>
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	e7c1      	b.n	800a87a <__lshift+0x4a>
 800a8f6:	3904      	subs	r1, #4
 800a8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a900:	4298      	cmp	r0, r3
 800a902:	d8f9      	bhi.n	800a8f8 <__lshift+0xc8>
 800a904:	e7ea      	b.n	800a8dc <__lshift+0xac>
 800a906:	bf00      	nop
 800a908:	0800c768 	.word	0x0800c768
 800a90c:	0800c858 	.word	0x0800c858

0800a910 <__mcmp>:
 800a910:	b530      	push	{r4, r5, lr}
 800a912:	6902      	ldr	r2, [r0, #16]
 800a914:	690c      	ldr	r4, [r1, #16]
 800a916:	1b12      	subs	r2, r2, r4
 800a918:	d10e      	bne.n	800a938 <__mcmp+0x28>
 800a91a:	f100 0314 	add.w	r3, r0, #20
 800a91e:	3114      	adds	r1, #20
 800a920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a92c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a930:	42a5      	cmp	r5, r4
 800a932:	d003      	beq.n	800a93c <__mcmp+0x2c>
 800a934:	d305      	bcc.n	800a942 <__mcmp+0x32>
 800a936:	2201      	movs	r2, #1
 800a938:	4610      	mov	r0, r2
 800a93a:	bd30      	pop	{r4, r5, pc}
 800a93c:	4283      	cmp	r3, r0
 800a93e:	d3f3      	bcc.n	800a928 <__mcmp+0x18>
 800a940:	e7fa      	b.n	800a938 <__mcmp+0x28>
 800a942:	f04f 32ff 	mov.w	r2, #4294967295
 800a946:	e7f7      	b.n	800a938 <__mcmp+0x28>

0800a948 <__mdiff>:
 800a948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	4606      	mov	r6, r0
 800a950:	4611      	mov	r1, r2
 800a952:	4620      	mov	r0, r4
 800a954:	4690      	mov	r8, r2
 800a956:	f7ff ffdb 	bl	800a910 <__mcmp>
 800a95a:	1e05      	subs	r5, r0, #0
 800a95c:	d110      	bne.n	800a980 <__mdiff+0x38>
 800a95e:	4629      	mov	r1, r5
 800a960:	4630      	mov	r0, r6
 800a962:	f7ff fd09 	bl	800a378 <_Balloc>
 800a966:	b930      	cbnz	r0, 800a976 <__mdiff+0x2e>
 800a968:	4b3a      	ldr	r3, [pc, #232]	; (800aa54 <__mdiff+0x10c>)
 800a96a:	4602      	mov	r2, r0
 800a96c:	f240 2132 	movw	r1, #562	; 0x232
 800a970:	4839      	ldr	r0, [pc, #228]	; (800aa58 <__mdiff+0x110>)
 800a972:	f001 f9f9 	bl	800bd68 <__assert_func>
 800a976:	2301      	movs	r3, #1
 800a978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	bfa4      	itt	ge
 800a982:	4643      	movge	r3, r8
 800a984:	46a0      	movge	r8, r4
 800a986:	4630      	mov	r0, r6
 800a988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a98c:	bfa6      	itte	ge
 800a98e:	461c      	movge	r4, r3
 800a990:	2500      	movge	r5, #0
 800a992:	2501      	movlt	r5, #1
 800a994:	f7ff fcf0 	bl	800a378 <_Balloc>
 800a998:	b920      	cbnz	r0, 800a9a4 <__mdiff+0x5c>
 800a99a:	4b2e      	ldr	r3, [pc, #184]	; (800aa54 <__mdiff+0x10c>)
 800a99c:	4602      	mov	r2, r0
 800a99e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9a2:	e7e5      	b.n	800a970 <__mdiff+0x28>
 800a9a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9a8:	6926      	ldr	r6, [r4, #16]
 800a9aa:	60c5      	str	r5, [r0, #12]
 800a9ac:	f104 0914 	add.w	r9, r4, #20
 800a9b0:	f108 0514 	add.w	r5, r8, #20
 800a9b4:	f100 0e14 	add.w	lr, r0, #20
 800a9b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9c0:	f108 0210 	add.w	r2, r8, #16
 800a9c4:	46f2      	mov	sl, lr
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9d0:	fa1f f883 	uxth.w	r8, r3
 800a9d4:	fa11 f18b 	uxtah	r1, r1, fp
 800a9d8:	0c1b      	lsrs	r3, r3, #16
 800a9da:	eba1 0808 	sub.w	r8, r1, r8
 800a9de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9e6:	fa1f f888 	uxth.w	r8, r8
 800a9ea:	1419      	asrs	r1, r3, #16
 800a9ec:	454e      	cmp	r6, r9
 800a9ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a9f6:	d8e7      	bhi.n	800a9c8 <__mdiff+0x80>
 800a9f8:	1b33      	subs	r3, r6, r4
 800a9fa:	3b15      	subs	r3, #21
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	3304      	adds	r3, #4
 800aa02:	3415      	adds	r4, #21
 800aa04:	42a6      	cmp	r6, r4
 800aa06:	bf38      	it	cc
 800aa08:	2304      	movcc	r3, #4
 800aa0a:	441d      	add	r5, r3
 800aa0c:	4473      	add	r3, lr
 800aa0e:	469e      	mov	lr, r3
 800aa10:	462e      	mov	r6, r5
 800aa12:	4566      	cmp	r6, ip
 800aa14:	d30e      	bcc.n	800aa34 <__mdiff+0xec>
 800aa16:	f10c 0203 	add.w	r2, ip, #3
 800aa1a:	1b52      	subs	r2, r2, r5
 800aa1c:	f022 0203 	bic.w	r2, r2, #3
 800aa20:	3d03      	subs	r5, #3
 800aa22:	45ac      	cmp	ip, r5
 800aa24:	bf38      	it	cc
 800aa26:	2200      	movcc	r2, #0
 800aa28:	441a      	add	r2, r3
 800aa2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa2e:	b17b      	cbz	r3, 800aa50 <__mdiff+0x108>
 800aa30:	6107      	str	r7, [r0, #16]
 800aa32:	e7a3      	b.n	800a97c <__mdiff+0x34>
 800aa34:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa38:	fa11 f288 	uxtah	r2, r1, r8
 800aa3c:	1414      	asrs	r4, r2, #16
 800aa3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa42:	b292      	uxth	r2, r2
 800aa44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa48:	f84e 2b04 	str.w	r2, [lr], #4
 800aa4c:	1421      	asrs	r1, r4, #16
 800aa4e:	e7e0      	b.n	800aa12 <__mdiff+0xca>
 800aa50:	3f01      	subs	r7, #1
 800aa52:	e7ea      	b.n	800aa2a <__mdiff+0xe2>
 800aa54:	0800c768 	.word	0x0800c768
 800aa58:	0800c858 	.word	0x0800c858

0800aa5c <__ulp>:
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	ed8d 0b00 	vstr	d0, [sp]
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	4912      	ldr	r1, [pc, #72]	; (800aab0 <__ulp+0x54>)
 800aa66:	4019      	ands	r1, r3
 800aa68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	dd05      	ble.n	800aa7c <__ulp+0x20>
 800aa70:	2200      	movs	r2, #0
 800aa72:	460b      	mov	r3, r1
 800aa74:	ec43 2b10 	vmov	d0, r2, r3
 800aa78:	b002      	add	sp, #8
 800aa7a:	4770      	bx	lr
 800aa7c:	4249      	negs	r1, r1
 800aa7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa82:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa86:	f04f 0200 	mov.w	r2, #0
 800aa8a:	f04f 0300 	mov.w	r3, #0
 800aa8e:	da04      	bge.n	800aa9a <__ulp+0x3e>
 800aa90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa94:	fa41 f300 	asr.w	r3, r1, r0
 800aa98:	e7ec      	b.n	800aa74 <__ulp+0x18>
 800aa9a:	f1a0 0114 	sub.w	r1, r0, #20
 800aa9e:	291e      	cmp	r1, #30
 800aaa0:	bfda      	itte	le
 800aaa2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aaa6:	fa20 f101 	lsrle.w	r1, r0, r1
 800aaaa:	2101      	movgt	r1, #1
 800aaac:	460a      	mov	r2, r1
 800aaae:	e7e1      	b.n	800aa74 <__ulp+0x18>
 800aab0:	7ff00000 	.word	0x7ff00000

0800aab4 <__b2d>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	6905      	ldr	r5, [r0, #16]
 800aab8:	f100 0714 	add.w	r7, r0, #20
 800aabc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aac0:	1f2e      	subs	r6, r5, #4
 800aac2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7ff fd48 	bl	800a55c <__hi0bits>
 800aacc:	f1c0 0320 	rsb	r3, r0, #32
 800aad0:	280a      	cmp	r0, #10
 800aad2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab50 <__b2d+0x9c>
 800aad6:	600b      	str	r3, [r1, #0]
 800aad8:	dc14      	bgt.n	800ab04 <__b2d+0x50>
 800aada:	f1c0 0e0b 	rsb	lr, r0, #11
 800aade:	fa24 f10e 	lsr.w	r1, r4, lr
 800aae2:	42b7      	cmp	r7, r6
 800aae4:	ea41 030c 	orr.w	r3, r1, ip
 800aae8:	bf34      	ite	cc
 800aaea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aaee:	2100      	movcs	r1, #0
 800aaf0:	3015      	adds	r0, #21
 800aaf2:	fa04 f000 	lsl.w	r0, r4, r0
 800aaf6:	fa21 f10e 	lsr.w	r1, r1, lr
 800aafa:	ea40 0201 	orr.w	r2, r0, r1
 800aafe:	ec43 2b10 	vmov	d0, r2, r3
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab04:	42b7      	cmp	r7, r6
 800ab06:	bf3a      	itte	cc
 800ab08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab10:	2100      	movcs	r1, #0
 800ab12:	380b      	subs	r0, #11
 800ab14:	d017      	beq.n	800ab46 <__b2d+0x92>
 800ab16:	f1c0 0c20 	rsb	ip, r0, #32
 800ab1a:	fa04 f500 	lsl.w	r5, r4, r0
 800ab1e:	42be      	cmp	r6, r7
 800ab20:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab24:	ea45 0504 	orr.w	r5, r5, r4
 800ab28:	bf8c      	ite	hi
 800ab2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ab2e:	2400      	movls	r4, #0
 800ab30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ab34:	fa01 f000 	lsl.w	r0, r1, r0
 800ab38:	fa24 f40c 	lsr.w	r4, r4, ip
 800ab3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab40:	ea40 0204 	orr.w	r2, r0, r4
 800ab44:	e7db      	b.n	800aafe <__b2d+0x4a>
 800ab46:	ea44 030c 	orr.w	r3, r4, ip
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	e7d7      	b.n	800aafe <__b2d+0x4a>
 800ab4e:	bf00      	nop
 800ab50:	3ff00000 	.word	0x3ff00000

0800ab54 <__d2b>:
 800ab54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	4689      	mov	r9, r1
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	ec57 6b10 	vmov	r6, r7, d0
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff fc09 	bl	800a378 <_Balloc>
 800ab66:	4604      	mov	r4, r0
 800ab68:	b930      	cbnz	r0, 800ab78 <__d2b+0x24>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4b25      	ldr	r3, [pc, #148]	; (800ac04 <__d2b+0xb0>)
 800ab6e:	4826      	ldr	r0, [pc, #152]	; (800ac08 <__d2b+0xb4>)
 800ab70:	f240 310a 	movw	r1, #778	; 0x30a
 800ab74:	f001 f8f8 	bl	800bd68 <__assert_func>
 800ab78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab80:	bb35      	cbnz	r5, 800abd0 <__d2b+0x7c>
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	d028      	beq.n	800abda <__d2b+0x86>
 800ab88:	4668      	mov	r0, sp
 800ab8a:	9600      	str	r6, [sp, #0]
 800ab8c:	f7ff fd06 	bl	800a59c <__lo0bits>
 800ab90:	9900      	ldr	r1, [sp, #0]
 800ab92:	b300      	cbz	r0, 800abd6 <__d2b+0x82>
 800ab94:	9a01      	ldr	r2, [sp, #4]
 800ab96:	f1c0 0320 	rsb	r3, r0, #32
 800ab9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9e:	430b      	orrs	r3, r1
 800aba0:	40c2      	lsrs	r2, r0
 800aba2:	6163      	str	r3, [r4, #20]
 800aba4:	9201      	str	r2, [sp, #4]
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	61a3      	str	r3, [r4, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bf14      	ite	ne
 800abae:	2202      	movne	r2, #2
 800abb0:	2201      	moveq	r2, #1
 800abb2:	6122      	str	r2, [r4, #16]
 800abb4:	b1d5      	cbz	r5, 800abec <__d2b+0x98>
 800abb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abba:	4405      	add	r5, r0
 800abbc:	f8c9 5000 	str.w	r5, [r9]
 800abc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abc4:	f8c8 0000 	str.w	r0, [r8]
 800abc8:	4620      	mov	r0, r4
 800abca:	b003      	add	sp, #12
 800abcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abd4:	e7d5      	b.n	800ab82 <__d2b+0x2e>
 800abd6:	6161      	str	r1, [r4, #20]
 800abd8:	e7e5      	b.n	800aba6 <__d2b+0x52>
 800abda:	a801      	add	r0, sp, #4
 800abdc:	f7ff fcde 	bl	800a59c <__lo0bits>
 800abe0:	9b01      	ldr	r3, [sp, #4]
 800abe2:	6163      	str	r3, [r4, #20]
 800abe4:	2201      	movs	r2, #1
 800abe6:	6122      	str	r2, [r4, #16]
 800abe8:	3020      	adds	r0, #32
 800abea:	e7e3      	b.n	800abb4 <__d2b+0x60>
 800abec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abf4:	f8c9 0000 	str.w	r0, [r9]
 800abf8:	6918      	ldr	r0, [r3, #16]
 800abfa:	f7ff fcaf 	bl	800a55c <__hi0bits>
 800abfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac02:	e7df      	b.n	800abc4 <__d2b+0x70>
 800ac04:	0800c768 	.word	0x0800c768
 800ac08:	0800c858 	.word	0x0800c858

0800ac0c <__ratio>:
 800ac0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4688      	mov	r8, r1
 800ac12:	4669      	mov	r1, sp
 800ac14:	4681      	mov	r9, r0
 800ac16:	f7ff ff4d 	bl	800aab4 <__b2d>
 800ac1a:	a901      	add	r1, sp, #4
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	ec55 4b10 	vmov	r4, r5, d0
 800ac22:	f7ff ff47 	bl	800aab4 <__b2d>
 800ac26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac2e:	eba3 0c02 	sub.w	ip, r3, r2
 800ac32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac36:	1a9b      	subs	r3, r3, r2
 800ac38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac3c:	ec51 0b10 	vmov	r0, r1, d0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bfd6      	itet	le
 800ac44:	460a      	movle	r2, r1
 800ac46:	462a      	movgt	r2, r5
 800ac48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac4c:	468b      	mov	fp, r1
 800ac4e:	462f      	mov	r7, r5
 800ac50:	bfd4      	ite	le
 800ac52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	ee10 2a10 	vmov	r2, s0
 800ac60:	465b      	mov	r3, fp
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 fdf2 	bl	800084c <__aeabi_ddiv>
 800ac68:	ec41 0b10 	vmov	d0, r0, r1
 800ac6c:	b003      	add	sp, #12
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac72 <__copybits>:
 800ac72:	3901      	subs	r1, #1
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	1149      	asrs	r1, r1, #5
 800ac78:	6914      	ldr	r4, [r2, #16]
 800ac7a:	3101      	adds	r1, #1
 800ac7c:	f102 0314 	add.w	r3, r2, #20
 800ac80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac88:	1f05      	subs	r5, r0, #4
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	d30c      	bcc.n	800aca8 <__copybits+0x36>
 800ac8e:	1aa3      	subs	r3, r4, r2
 800ac90:	3b11      	subs	r3, #17
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	3211      	adds	r2, #17
 800ac98:	42a2      	cmp	r2, r4
 800ac9a:	bf88      	it	hi
 800ac9c:	2300      	movhi	r3, #0
 800ac9e:	4418      	add	r0, r3
 800aca0:	2300      	movs	r3, #0
 800aca2:	4288      	cmp	r0, r1
 800aca4:	d305      	bcc.n	800acb2 <__copybits+0x40>
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	f853 6b04 	ldr.w	r6, [r3], #4
 800acac:	f845 6f04 	str.w	r6, [r5, #4]!
 800acb0:	e7eb      	b.n	800ac8a <__copybits+0x18>
 800acb2:	f840 3b04 	str.w	r3, [r0], #4
 800acb6:	e7f4      	b.n	800aca2 <__copybits+0x30>

0800acb8 <__any_on>:
 800acb8:	f100 0214 	add.w	r2, r0, #20
 800acbc:	6900      	ldr	r0, [r0, #16]
 800acbe:	114b      	asrs	r3, r1, #5
 800acc0:	4298      	cmp	r0, r3
 800acc2:	b510      	push	{r4, lr}
 800acc4:	db11      	blt.n	800acea <__any_on+0x32>
 800acc6:	dd0a      	ble.n	800acde <__any_on+0x26>
 800acc8:	f011 011f 	ands.w	r1, r1, #31
 800accc:	d007      	beq.n	800acde <__any_on+0x26>
 800acce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acd2:	fa24 f001 	lsr.w	r0, r4, r1
 800acd6:	fa00 f101 	lsl.w	r1, r0, r1
 800acda:	428c      	cmp	r4, r1
 800acdc:	d10b      	bne.n	800acf6 <__any_on+0x3e>
 800acde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d803      	bhi.n	800acee <__any_on+0x36>
 800ace6:	2000      	movs	r0, #0
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	4603      	mov	r3, r0
 800acec:	e7f7      	b.n	800acde <__any_on+0x26>
 800acee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acf2:	2900      	cmp	r1, #0
 800acf4:	d0f5      	beq.n	800ace2 <__any_on+0x2a>
 800acf6:	2001      	movs	r0, #1
 800acf8:	e7f6      	b.n	800ace8 <__any_on+0x30>

0800acfa <_calloc_r>:
 800acfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acfc:	fba1 2402 	umull	r2, r4, r1, r2
 800ad00:	b94c      	cbnz	r4, 800ad16 <_calloc_r+0x1c>
 800ad02:	4611      	mov	r1, r2
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	f000 f87b 	bl	800ae00 <_malloc_r>
 800ad0a:	9a01      	ldr	r2, [sp, #4]
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	b930      	cbnz	r0, 800ad1e <_calloc_r+0x24>
 800ad10:	4628      	mov	r0, r5
 800ad12:	b003      	add	sp, #12
 800ad14:	bd30      	pop	{r4, r5, pc}
 800ad16:	220c      	movs	r2, #12
 800ad18:	6002      	str	r2, [r0, #0]
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	e7f8      	b.n	800ad10 <_calloc_r+0x16>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	f7fb ff78 	bl	8006c14 <memset>
 800ad24:	e7f4      	b.n	800ad10 <_calloc_r+0x16>
	...

0800ad28 <_free_r>:
 800ad28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	d044      	beq.n	800adb8 <_free_r+0x90>
 800ad2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad32:	9001      	str	r0, [sp, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f1a1 0404 	sub.w	r4, r1, #4
 800ad3a:	bfb8      	it	lt
 800ad3c:	18e4      	addlt	r4, r4, r3
 800ad3e:	f001 f87f 	bl	800be40 <__malloc_lock>
 800ad42:	4a1e      	ldr	r2, [pc, #120]	; (800adbc <_free_r+0x94>)
 800ad44:	9801      	ldr	r0, [sp, #4]
 800ad46:	6813      	ldr	r3, [r2, #0]
 800ad48:	b933      	cbnz	r3, 800ad58 <_free_r+0x30>
 800ad4a:	6063      	str	r3, [r4, #4]
 800ad4c:	6014      	str	r4, [r2, #0]
 800ad4e:	b003      	add	sp, #12
 800ad50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad54:	f001 b87a 	b.w	800be4c <__malloc_unlock>
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	d908      	bls.n	800ad6e <_free_r+0x46>
 800ad5c:	6825      	ldr	r5, [r4, #0]
 800ad5e:	1961      	adds	r1, r4, r5
 800ad60:	428b      	cmp	r3, r1
 800ad62:	bf01      	itttt	eq
 800ad64:	6819      	ldreq	r1, [r3, #0]
 800ad66:	685b      	ldreq	r3, [r3, #4]
 800ad68:	1949      	addeq	r1, r1, r5
 800ad6a:	6021      	streq	r1, [r4, #0]
 800ad6c:	e7ed      	b.n	800ad4a <_free_r+0x22>
 800ad6e:	461a      	mov	r2, r3
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	b10b      	cbz	r3, 800ad78 <_free_r+0x50>
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	d9fa      	bls.n	800ad6e <_free_r+0x46>
 800ad78:	6811      	ldr	r1, [r2, #0]
 800ad7a:	1855      	adds	r5, r2, r1
 800ad7c:	42a5      	cmp	r5, r4
 800ad7e:	d10b      	bne.n	800ad98 <_free_r+0x70>
 800ad80:	6824      	ldr	r4, [r4, #0]
 800ad82:	4421      	add	r1, r4
 800ad84:	1854      	adds	r4, r2, r1
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	6011      	str	r1, [r2, #0]
 800ad8a:	d1e0      	bne.n	800ad4e <_free_r+0x26>
 800ad8c:	681c      	ldr	r4, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	6053      	str	r3, [r2, #4]
 800ad92:	4421      	add	r1, r4
 800ad94:	6011      	str	r1, [r2, #0]
 800ad96:	e7da      	b.n	800ad4e <_free_r+0x26>
 800ad98:	d902      	bls.n	800ada0 <_free_r+0x78>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	e7d6      	b.n	800ad4e <_free_r+0x26>
 800ada0:	6825      	ldr	r5, [r4, #0]
 800ada2:	1961      	adds	r1, r4, r5
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf04      	itt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	6063      	str	r3, [r4, #4]
 800adae:	bf04      	itt	eq
 800adb0:	1949      	addeq	r1, r1, r5
 800adb2:	6021      	streq	r1, [r4, #0]
 800adb4:	6054      	str	r4, [r2, #4]
 800adb6:	e7ca      	b.n	800ad4e <_free_r+0x26>
 800adb8:	b003      	add	sp, #12
 800adba:	bd30      	pop	{r4, r5, pc}
 800adbc:	20000914 	.word	0x20000914

0800adc0 <sbrk_aligned>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	4e0e      	ldr	r6, [pc, #56]	; (800adfc <sbrk_aligned+0x3c>)
 800adc4:	460c      	mov	r4, r1
 800adc6:	6831      	ldr	r1, [r6, #0]
 800adc8:	4605      	mov	r5, r0
 800adca:	b911      	cbnz	r1, 800add2 <sbrk_aligned+0x12>
 800adcc:	f000 fec8 	bl	800bb60 <_sbrk_r>
 800add0:	6030      	str	r0, [r6, #0]
 800add2:	4621      	mov	r1, r4
 800add4:	4628      	mov	r0, r5
 800add6:	f000 fec3 	bl	800bb60 <_sbrk_r>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	d00a      	beq.n	800adf4 <sbrk_aligned+0x34>
 800adde:	1cc4      	adds	r4, r0, #3
 800ade0:	f024 0403 	bic.w	r4, r4, #3
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	d007      	beq.n	800adf8 <sbrk_aligned+0x38>
 800ade8:	1a21      	subs	r1, r4, r0
 800adea:	4628      	mov	r0, r5
 800adec:	f000 feb8 	bl	800bb60 <_sbrk_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	d101      	bne.n	800adf8 <sbrk_aligned+0x38>
 800adf4:	f04f 34ff 	mov.w	r4, #4294967295
 800adf8:	4620      	mov	r0, r4
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	20000918 	.word	0x20000918

0800ae00 <_malloc_r>:
 800ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae04:	1ccd      	adds	r5, r1, #3
 800ae06:	f025 0503 	bic.w	r5, r5, #3
 800ae0a:	3508      	adds	r5, #8
 800ae0c:	2d0c      	cmp	r5, #12
 800ae0e:	bf38      	it	cc
 800ae10:	250c      	movcc	r5, #12
 800ae12:	2d00      	cmp	r5, #0
 800ae14:	4607      	mov	r7, r0
 800ae16:	db01      	blt.n	800ae1c <_malloc_r+0x1c>
 800ae18:	42a9      	cmp	r1, r5
 800ae1a:	d905      	bls.n	800ae28 <_malloc_r+0x28>
 800ae1c:	230c      	movs	r3, #12
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	2600      	movs	r6, #0
 800ae22:	4630      	mov	r0, r6
 800ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae28:	4e2e      	ldr	r6, [pc, #184]	; (800aee4 <_malloc_r+0xe4>)
 800ae2a:	f001 f809 	bl	800be40 <__malloc_lock>
 800ae2e:	6833      	ldr	r3, [r6, #0]
 800ae30:	461c      	mov	r4, r3
 800ae32:	bb34      	cbnz	r4, 800ae82 <_malloc_r+0x82>
 800ae34:	4629      	mov	r1, r5
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff ffc2 	bl	800adc0 <sbrk_aligned>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	4604      	mov	r4, r0
 800ae40:	d14d      	bne.n	800aede <_malloc_r+0xde>
 800ae42:	6834      	ldr	r4, [r6, #0]
 800ae44:	4626      	mov	r6, r4
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	d140      	bne.n	800aecc <_malloc_r+0xcc>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4638      	mov	r0, r7
 800ae50:	eb04 0803 	add.w	r8, r4, r3
 800ae54:	f000 fe84 	bl	800bb60 <_sbrk_r>
 800ae58:	4580      	cmp	r8, r0
 800ae5a:	d13a      	bne.n	800aed2 <_malloc_r+0xd2>
 800ae5c:	6821      	ldr	r1, [r4, #0]
 800ae5e:	3503      	adds	r5, #3
 800ae60:	1a6d      	subs	r5, r5, r1
 800ae62:	f025 0503 	bic.w	r5, r5, #3
 800ae66:	3508      	adds	r5, #8
 800ae68:	2d0c      	cmp	r5, #12
 800ae6a:	bf38      	it	cc
 800ae6c:	250c      	movcc	r5, #12
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff ffa5 	bl	800adc0 <sbrk_aligned>
 800ae76:	3001      	adds	r0, #1
 800ae78:	d02b      	beq.n	800aed2 <_malloc_r+0xd2>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	442b      	add	r3, r5
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	e00e      	b.n	800aea0 <_malloc_r+0xa0>
 800ae82:	6822      	ldr	r2, [r4, #0]
 800ae84:	1b52      	subs	r2, r2, r5
 800ae86:	d41e      	bmi.n	800aec6 <_malloc_r+0xc6>
 800ae88:	2a0b      	cmp	r2, #11
 800ae8a:	d916      	bls.n	800aeba <_malloc_r+0xba>
 800ae8c:	1961      	adds	r1, r4, r5
 800ae8e:	42a3      	cmp	r3, r4
 800ae90:	6025      	str	r5, [r4, #0]
 800ae92:	bf18      	it	ne
 800ae94:	6059      	strne	r1, [r3, #4]
 800ae96:	6863      	ldr	r3, [r4, #4]
 800ae98:	bf08      	it	eq
 800ae9a:	6031      	streq	r1, [r6, #0]
 800ae9c:	5162      	str	r2, [r4, r5]
 800ae9e:	604b      	str	r3, [r1, #4]
 800aea0:	4638      	mov	r0, r7
 800aea2:	f104 060b 	add.w	r6, r4, #11
 800aea6:	f000 ffd1 	bl	800be4c <__malloc_unlock>
 800aeaa:	f026 0607 	bic.w	r6, r6, #7
 800aeae:	1d23      	adds	r3, r4, #4
 800aeb0:	1af2      	subs	r2, r6, r3
 800aeb2:	d0b6      	beq.n	800ae22 <_malloc_r+0x22>
 800aeb4:	1b9b      	subs	r3, r3, r6
 800aeb6:	50a3      	str	r3, [r4, r2]
 800aeb8:	e7b3      	b.n	800ae22 <_malloc_r+0x22>
 800aeba:	6862      	ldr	r2, [r4, #4]
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	bf0c      	ite	eq
 800aec0:	6032      	streq	r2, [r6, #0]
 800aec2:	605a      	strne	r2, [r3, #4]
 800aec4:	e7ec      	b.n	800aea0 <_malloc_r+0xa0>
 800aec6:	4623      	mov	r3, r4
 800aec8:	6864      	ldr	r4, [r4, #4]
 800aeca:	e7b2      	b.n	800ae32 <_malloc_r+0x32>
 800aecc:	4634      	mov	r4, r6
 800aece:	6876      	ldr	r6, [r6, #4]
 800aed0:	e7b9      	b.n	800ae46 <_malloc_r+0x46>
 800aed2:	230c      	movs	r3, #12
 800aed4:	603b      	str	r3, [r7, #0]
 800aed6:	4638      	mov	r0, r7
 800aed8:	f000 ffb8 	bl	800be4c <__malloc_unlock>
 800aedc:	e7a1      	b.n	800ae22 <_malloc_r+0x22>
 800aede:	6025      	str	r5, [r4, #0]
 800aee0:	e7de      	b.n	800aea0 <_malloc_r+0xa0>
 800aee2:	bf00      	nop
 800aee4:	20000914 	.word	0x20000914

0800aee8 <__ssputs_r>:
 800aee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeec:	688e      	ldr	r6, [r1, #8]
 800aeee:	429e      	cmp	r6, r3
 800aef0:	4682      	mov	sl, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	4690      	mov	r8, r2
 800aef6:	461f      	mov	r7, r3
 800aef8:	d838      	bhi.n	800af6c <__ssputs_r+0x84>
 800aefa:	898a      	ldrh	r2, [r1, #12]
 800aefc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af00:	d032      	beq.n	800af68 <__ssputs_r+0x80>
 800af02:	6825      	ldr	r5, [r4, #0]
 800af04:	6909      	ldr	r1, [r1, #16]
 800af06:	eba5 0901 	sub.w	r9, r5, r1
 800af0a:	6965      	ldr	r5, [r4, #20]
 800af0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af14:	3301      	adds	r3, #1
 800af16:	444b      	add	r3, r9
 800af18:	106d      	asrs	r5, r5, #1
 800af1a:	429d      	cmp	r5, r3
 800af1c:	bf38      	it	cc
 800af1e:	461d      	movcc	r5, r3
 800af20:	0553      	lsls	r3, r2, #21
 800af22:	d531      	bpl.n	800af88 <__ssputs_r+0xa0>
 800af24:	4629      	mov	r1, r5
 800af26:	f7ff ff6b 	bl	800ae00 <_malloc_r>
 800af2a:	4606      	mov	r6, r0
 800af2c:	b950      	cbnz	r0, 800af44 <__ssputs_r+0x5c>
 800af2e:	230c      	movs	r3, #12
 800af30:	f8ca 3000 	str.w	r3, [sl]
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af44:	6921      	ldr	r1, [r4, #16]
 800af46:	464a      	mov	r2, r9
 800af48:	f7ff fa08 	bl	800a35c <memcpy>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af56:	81a3      	strh	r3, [r4, #12]
 800af58:	6126      	str	r6, [r4, #16]
 800af5a:	6165      	str	r5, [r4, #20]
 800af5c:	444e      	add	r6, r9
 800af5e:	eba5 0509 	sub.w	r5, r5, r9
 800af62:	6026      	str	r6, [r4, #0]
 800af64:	60a5      	str	r5, [r4, #8]
 800af66:	463e      	mov	r6, r7
 800af68:	42be      	cmp	r6, r7
 800af6a:	d900      	bls.n	800af6e <__ssputs_r+0x86>
 800af6c:	463e      	mov	r6, r7
 800af6e:	6820      	ldr	r0, [r4, #0]
 800af70:	4632      	mov	r2, r6
 800af72:	4641      	mov	r1, r8
 800af74:	f000 ff4a 	bl	800be0c <memmove>
 800af78:	68a3      	ldr	r3, [r4, #8]
 800af7a:	1b9b      	subs	r3, r3, r6
 800af7c:	60a3      	str	r3, [r4, #8]
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	4433      	add	r3, r6
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	2000      	movs	r0, #0
 800af86:	e7db      	b.n	800af40 <__ssputs_r+0x58>
 800af88:	462a      	mov	r2, r5
 800af8a:	f000 ff65 	bl	800be58 <_realloc_r>
 800af8e:	4606      	mov	r6, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d1e1      	bne.n	800af58 <__ssputs_r+0x70>
 800af94:	6921      	ldr	r1, [r4, #16]
 800af96:	4650      	mov	r0, sl
 800af98:	f7ff fec6 	bl	800ad28 <_free_r>
 800af9c:	e7c7      	b.n	800af2e <__ssputs_r+0x46>
	...

0800afa0 <_svfiprintf_r>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	4698      	mov	r8, r3
 800afa6:	898b      	ldrh	r3, [r1, #12]
 800afa8:	061b      	lsls	r3, r3, #24
 800afaa:	b09d      	sub	sp, #116	; 0x74
 800afac:	4607      	mov	r7, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	4614      	mov	r4, r2
 800afb2:	d50e      	bpl.n	800afd2 <_svfiprintf_r+0x32>
 800afb4:	690b      	ldr	r3, [r1, #16]
 800afb6:	b963      	cbnz	r3, 800afd2 <_svfiprintf_r+0x32>
 800afb8:	2140      	movs	r1, #64	; 0x40
 800afba:	f7ff ff21 	bl	800ae00 <_malloc_r>
 800afbe:	6028      	str	r0, [r5, #0]
 800afc0:	6128      	str	r0, [r5, #16]
 800afc2:	b920      	cbnz	r0, 800afce <_svfiprintf_r+0x2e>
 800afc4:	230c      	movs	r3, #12
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	e0d1      	b.n	800b172 <_svfiprintf_r+0x1d2>
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	616b      	str	r3, [r5, #20]
 800afd2:	2300      	movs	r3, #0
 800afd4:	9309      	str	r3, [sp, #36]	; 0x24
 800afd6:	2320      	movs	r3, #32
 800afd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe0:	2330      	movs	r3, #48	; 0x30
 800afe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b18c <_svfiprintf_r+0x1ec>
 800afe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afea:	f04f 0901 	mov.w	r9, #1
 800afee:	4623      	mov	r3, r4
 800aff0:	469a      	mov	sl, r3
 800aff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff6:	b10a      	cbz	r2, 800affc <_svfiprintf_r+0x5c>
 800aff8:	2a25      	cmp	r2, #37	; 0x25
 800affa:	d1f9      	bne.n	800aff0 <_svfiprintf_r+0x50>
 800affc:	ebba 0b04 	subs.w	fp, sl, r4
 800b000:	d00b      	beq.n	800b01a <_svfiprintf_r+0x7a>
 800b002:	465b      	mov	r3, fp
 800b004:	4622      	mov	r2, r4
 800b006:	4629      	mov	r1, r5
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff ff6d 	bl	800aee8 <__ssputs_r>
 800b00e:	3001      	adds	r0, #1
 800b010:	f000 80aa 	beq.w	800b168 <_svfiprintf_r+0x1c8>
 800b014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b016:	445a      	add	r2, fp
 800b018:	9209      	str	r2, [sp, #36]	; 0x24
 800b01a:	f89a 3000 	ldrb.w	r3, [sl]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 80a2 	beq.w	800b168 <_svfiprintf_r+0x1c8>
 800b024:	2300      	movs	r3, #0
 800b026:	f04f 32ff 	mov.w	r2, #4294967295
 800b02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b02e:	f10a 0a01 	add.w	sl, sl, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	9307      	str	r3, [sp, #28]
 800b036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b03a:	931a      	str	r3, [sp, #104]	; 0x68
 800b03c:	4654      	mov	r4, sl
 800b03e:	2205      	movs	r2, #5
 800b040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b044:	4851      	ldr	r0, [pc, #324]	; (800b18c <_svfiprintf_r+0x1ec>)
 800b046:	f7f5 f8cb 	bl	80001e0 <memchr>
 800b04a:	9a04      	ldr	r2, [sp, #16]
 800b04c:	b9d8      	cbnz	r0, 800b086 <_svfiprintf_r+0xe6>
 800b04e:	06d0      	lsls	r0, r2, #27
 800b050:	bf44      	itt	mi
 800b052:	2320      	movmi	r3, #32
 800b054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b058:	0711      	lsls	r1, r2, #28
 800b05a:	bf44      	itt	mi
 800b05c:	232b      	movmi	r3, #43	; 0x2b
 800b05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b062:	f89a 3000 	ldrb.w	r3, [sl]
 800b066:	2b2a      	cmp	r3, #42	; 0x2a
 800b068:	d015      	beq.n	800b096 <_svfiprintf_r+0xf6>
 800b06a:	9a07      	ldr	r2, [sp, #28]
 800b06c:	4654      	mov	r4, sl
 800b06e:	2000      	movs	r0, #0
 800b070:	f04f 0c0a 	mov.w	ip, #10
 800b074:	4621      	mov	r1, r4
 800b076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b07a:	3b30      	subs	r3, #48	; 0x30
 800b07c:	2b09      	cmp	r3, #9
 800b07e:	d94e      	bls.n	800b11e <_svfiprintf_r+0x17e>
 800b080:	b1b0      	cbz	r0, 800b0b0 <_svfiprintf_r+0x110>
 800b082:	9207      	str	r2, [sp, #28]
 800b084:	e014      	b.n	800b0b0 <_svfiprintf_r+0x110>
 800b086:	eba0 0308 	sub.w	r3, r0, r8
 800b08a:	fa09 f303 	lsl.w	r3, r9, r3
 800b08e:	4313      	orrs	r3, r2
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	46a2      	mov	sl, r4
 800b094:	e7d2      	b.n	800b03c <_svfiprintf_r+0x9c>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	1d19      	adds	r1, r3, #4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	9103      	str	r1, [sp, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bfbb      	ittet	lt
 800b0a2:	425b      	neglt	r3, r3
 800b0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a8:	9307      	strge	r3, [sp, #28]
 800b0aa:	9307      	strlt	r3, [sp, #28]
 800b0ac:	bfb8      	it	lt
 800b0ae:	9204      	strlt	r2, [sp, #16]
 800b0b0:	7823      	ldrb	r3, [r4, #0]
 800b0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b4:	d10c      	bne.n	800b0d0 <_svfiprintf_r+0x130>
 800b0b6:	7863      	ldrb	r3, [r4, #1]
 800b0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ba:	d135      	bne.n	800b128 <_svfiprintf_r+0x188>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	1d1a      	adds	r2, r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	9203      	str	r2, [sp, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bfb8      	it	lt
 800b0c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0cc:	3402      	adds	r4, #2
 800b0ce:	9305      	str	r3, [sp, #20]
 800b0d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b19c <_svfiprintf_r+0x1fc>
 800b0d4:	7821      	ldrb	r1, [r4, #0]
 800b0d6:	2203      	movs	r2, #3
 800b0d8:	4650      	mov	r0, sl
 800b0da:	f7f5 f881 	bl	80001e0 <memchr>
 800b0de:	b140      	cbz	r0, 800b0f2 <_svfiprintf_r+0x152>
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	eba0 000a 	sub.w	r0, r0, sl
 800b0e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	4303      	orrs	r3, r0
 800b0ee:	3401      	adds	r4, #1
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f6:	4826      	ldr	r0, [pc, #152]	; (800b190 <_svfiprintf_r+0x1f0>)
 800b0f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0fc:	2206      	movs	r2, #6
 800b0fe:	f7f5 f86f 	bl	80001e0 <memchr>
 800b102:	2800      	cmp	r0, #0
 800b104:	d038      	beq.n	800b178 <_svfiprintf_r+0x1d8>
 800b106:	4b23      	ldr	r3, [pc, #140]	; (800b194 <_svfiprintf_r+0x1f4>)
 800b108:	bb1b      	cbnz	r3, 800b152 <_svfiprintf_r+0x1b2>
 800b10a:	9b03      	ldr	r3, [sp, #12]
 800b10c:	3307      	adds	r3, #7
 800b10e:	f023 0307 	bic.w	r3, r3, #7
 800b112:	3308      	adds	r3, #8
 800b114:	9303      	str	r3, [sp, #12]
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	4433      	add	r3, r6
 800b11a:	9309      	str	r3, [sp, #36]	; 0x24
 800b11c:	e767      	b.n	800afee <_svfiprintf_r+0x4e>
 800b11e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b122:	460c      	mov	r4, r1
 800b124:	2001      	movs	r0, #1
 800b126:	e7a5      	b.n	800b074 <_svfiprintf_r+0xd4>
 800b128:	2300      	movs	r3, #0
 800b12a:	3401      	adds	r4, #1
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	4619      	mov	r1, r3
 800b130:	f04f 0c0a 	mov.w	ip, #10
 800b134:	4620      	mov	r0, r4
 800b136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b13a:	3a30      	subs	r2, #48	; 0x30
 800b13c:	2a09      	cmp	r2, #9
 800b13e:	d903      	bls.n	800b148 <_svfiprintf_r+0x1a8>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0c5      	beq.n	800b0d0 <_svfiprintf_r+0x130>
 800b144:	9105      	str	r1, [sp, #20]
 800b146:	e7c3      	b.n	800b0d0 <_svfiprintf_r+0x130>
 800b148:	fb0c 2101 	mla	r1, ip, r1, r2
 800b14c:	4604      	mov	r4, r0
 800b14e:	2301      	movs	r3, #1
 800b150:	e7f0      	b.n	800b134 <_svfiprintf_r+0x194>
 800b152:	ab03      	add	r3, sp, #12
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	462a      	mov	r2, r5
 800b158:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <_svfiprintf_r+0x1f8>)
 800b15a:	a904      	add	r1, sp, #16
 800b15c:	4638      	mov	r0, r7
 800b15e:	f7fb fe01 	bl	8006d64 <_printf_float>
 800b162:	1c42      	adds	r2, r0, #1
 800b164:	4606      	mov	r6, r0
 800b166:	d1d6      	bne.n	800b116 <_svfiprintf_r+0x176>
 800b168:	89ab      	ldrh	r3, [r5, #12]
 800b16a:	065b      	lsls	r3, r3, #25
 800b16c:	f53f af2c 	bmi.w	800afc8 <_svfiprintf_r+0x28>
 800b170:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b172:	b01d      	add	sp, #116	; 0x74
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	ab03      	add	r3, sp, #12
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	462a      	mov	r2, r5
 800b17e:	4b06      	ldr	r3, [pc, #24]	; (800b198 <_svfiprintf_r+0x1f8>)
 800b180:	a904      	add	r1, sp, #16
 800b182:	4638      	mov	r0, r7
 800b184:	f7fc f892 	bl	80072ac <_printf_i>
 800b188:	e7eb      	b.n	800b162 <_svfiprintf_r+0x1c2>
 800b18a:	bf00      	nop
 800b18c:	0800c9b4 	.word	0x0800c9b4
 800b190:	0800c9be 	.word	0x0800c9be
 800b194:	08006d65 	.word	0x08006d65
 800b198:	0800aee9 	.word	0x0800aee9
 800b19c:	0800c9ba 	.word	0x0800c9ba

0800b1a0 <_sungetc_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	1c4b      	adds	r3, r1, #1
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	d103      	bne.n	800b1b0 <_sungetc_r+0x10>
 800b1a8:	f04f 35ff 	mov.w	r5, #4294967295
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	8993      	ldrh	r3, [r2, #12]
 800b1b2:	f023 0320 	bic.w	r3, r3, #32
 800b1b6:	8193      	strh	r3, [r2, #12]
 800b1b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1ba:	6852      	ldr	r2, [r2, #4]
 800b1bc:	b2cd      	uxtb	r5, r1
 800b1be:	b18b      	cbz	r3, 800b1e4 <_sungetc_r+0x44>
 800b1c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	dd08      	ble.n	800b1d8 <_sungetc_r+0x38>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	1e5a      	subs	r2, r3, #1
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b1d0:	6863      	ldr	r3, [r4, #4]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	6063      	str	r3, [r4, #4]
 800b1d6:	e7e9      	b.n	800b1ac <_sungetc_r+0xc>
 800b1d8:	4621      	mov	r1, r4
 800b1da:	f000 fd7d 	bl	800bcd8 <__submore>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0f1      	beq.n	800b1c6 <_sungetc_r+0x26>
 800b1e2:	e7e1      	b.n	800b1a8 <_sungetc_r+0x8>
 800b1e4:	6921      	ldr	r1, [r4, #16]
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	b151      	cbz	r1, 800b200 <_sungetc_r+0x60>
 800b1ea:	4299      	cmp	r1, r3
 800b1ec:	d208      	bcs.n	800b200 <_sungetc_r+0x60>
 800b1ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b1f2:	42a9      	cmp	r1, r5
 800b1f4:	d104      	bne.n	800b200 <_sungetc_r+0x60>
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	3201      	adds	r2, #1
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	6062      	str	r2, [r4, #4]
 800b1fe:	e7d5      	b.n	800b1ac <_sungetc_r+0xc>
 800b200:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b208:	6363      	str	r3, [r4, #52]	; 0x34
 800b20a:	2303      	movs	r3, #3
 800b20c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b20e:	4623      	mov	r3, r4
 800b210:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	2301      	movs	r3, #1
 800b218:	e7dc      	b.n	800b1d4 <_sungetc_r+0x34>

0800b21a <__ssrefill_r>:
 800b21a:	b510      	push	{r4, lr}
 800b21c:	460c      	mov	r4, r1
 800b21e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b220:	b169      	cbz	r1, 800b23e <__ssrefill_r+0x24>
 800b222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b226:	4299      	cmp	r1, r3
 800b228:	d001      	beq.n	800b22e <__ssrefill_r+0x14>
 800b22a:	f7ff fd7d 	bl	800ad28 <_free_r>
 800b22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	2000      	movs	r0, #0
 800b234:	6360      	str	r0, [r4, #52]	; 0x34
 800b236:	b113      	cbz	r3, 800b23e <__ssrefill_r+0x24>
 800b238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b23a:	6023      	str	r3, [r4, #0]
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	6063      	str	r3, [r4, #4]
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f043 0320 	orr.w	r3, r3, #32
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295
 800b252:	e7f3      	b.n	800b23c <__ssrefill_r+0x22>

0800b254 <__ssvfiscanf_r>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	460c      	mov	r4, r1
 800b25a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b25e:	2100      	movs	r1, #0
 800b260:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b264:	49a6      	ldr	r1, [pc, #664]	; (800b500 <__ssvfiscanf_r+0x2ac>)
 800b266:	91a0      	str	r1, [sp, #640]	; 0x280
 800b268:	f10d 0804 	add.w	r8, sp, #4
 800b26c:	49a5      	ldr	r1, [pc, #660]	; (800b504 <__ssvfiscanf_r+0x2b0>)
 800b26e:	4fa6      	ldr	r7, [pc, #664]	; (800b508 <__ssvfiscanf_r+0x2b4>)
 800b270:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b50c <__ssvfiscanf_r+0x2b8>
 800b274:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b278:	4606      	mov	r6, r0
 800b27a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	7813      	ldrb	r3, [r2, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 815a 	beq.w	800b53a <__ssvfiscanf_r+0x2e6>
 800b286:	5dd9      	ldrb	r1, [r3, r7]
 800b288:	f011 0108 	ands.w	r1, r1, #8
 800b28c:	f102 0501 	add.w	r5, r2, #1
 800b290:	d019      	beq.n	800b2c6 <__ssvfiscanf_r+0x72>
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd0f      	ble.n	800b2b8 <__ssvfiscanf_r+0x64>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	5cba      	ldrb	r2, [r7, r2]
 800b29e:	0712      	lsls	r2, r2, #28
 800b2a0:	d401      	bmi.n	800b2a6 <__ssvfiscanf_r+0x52>
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	e7eb      	b.n	800b27e <__ssvfiscanf_r+0x2a>
 800b2a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2a8:	3201      	adds	r2, #1
 800b2aa:	9245      	str	r2, [sp, #276]	; 0x114
 800b2ac:	6862      	ldr	r2, [r4, #4]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	3a01      	subs	r2, #1
 800b2b2:	6062      	str	r2, [r4, #4]
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	e7ec      	b.n	800b292 <__ssvfiscanf_r+0x3e>
 800b2b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4630      	mov	r0, r6
 800b2be:	4798      	blx	r3
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d0e9      	beq.n	800b298 <__ssvfiscanf_r+0x44>
 800b2c4:	e7ed      	b.n	800b2a2 <__ssvfiscanf_r+0x4e>
 800b2c6:	2b25      	cmp	r3, #37	; 0x25
 800b2c8:	d012      	beq.n	800b2f0 <__ssvfiscanf_r+0x9c>
 800b2ca:	469a      	mov	sl, r3
 800b2cc:	6863      	ldr	r3, [r4, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f340 8091 	ble.w	800b3f6 <__ssvfiscanf_r+0x1a2>
 800b2d4:	6822      	ldr	r2, [r4, #0]
 800b2d6:	7813      	ldrb	r3, [r2, #0]
 800b2d8:	4553      	cmp	r3, sl
 800b2da:	f040 812e 	bne.w	800b53a <__ssvfiscanf_r+0x2e6>
 800b2de:	6863      	ldr	r3, [r4, #4]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	6063      	str	r3, [r4, #4]
 800b2e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	6022      	str	r2, [r4, #0]
 800b2ec:	9345      	str	r3, [sp, #276]	; 0x114
 800b2ee:	e7d8      	b.n	800b2a2 <__ssvfiscanf_r+0x4e>
 800b2f0:	9141      	str	r1, [sp, #260]	; 0x104
 800b2f2:	9143      	str	r1, [sp, #268]	; 0x10c
 800b2f4:	7853      	ldrb	r3, [r2, #1]
 800b2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f8:	bf02      	ittt	eq
 800b2fa:	2310      	moveq	r3, #16
 800b2fc:	1c95      	addeq	r5, r2, #2
 800b2fe:	9341      	streq	r3, [sp, #260]	; 0x104
 800b300:	220a      	movs	r2, #10
 800b302:	46aa      	mov	sl, r5
 800b304:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b308:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	d91d      	bls.n	800b34c <__ssvfiscanf_r+0xf8>
 800b310:	487e      	ldr	r0, [pc, #504]	; (800b50c <__ssvfiscanf_r+0x2b8>)
 800b312:	2203      	movs	r2, #3
 800b314:	f7f4 ff64 	bl	80001e0 <memchr>
 800b318:	b140      	cbz	r0, 800b32c <__ssvfiscanf_r+0xd8>
 800b31a:	2301      	movs	r3, #1
 800b31c:	eba0 0009 	sub.w	r0, r0, r9
 800b320:	fa03 f000 	lsl.w	r0, r3, r0
 800b324:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b326:	4318      	orrs	r0, r3
 800b328:	9041      	str	r0, [sp, #260]	; 0x104
 800b32a:	4655      	mov	r5, sl
 800b32c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b330:	2b78      	cmp	r3, #120	; 0x78
 800b332:	d806      	bhi.n	800b342 <__ssvfiscanf_r+0xee>
 800b334:	2b57      	cmp	r3, #87	; 0x57
 800b336:	d810      	bhi.n	800b35a <__ssvfiscanf_r+0x106>
 800b338:	2b25      	cmp	r3, #37	; 0x25
 800b33a:	d0c6      	beq.n	800b2ca <__ssvfiscanf_r+0x76>
 800b33c:	d856      	bhi.n	800b3ec <__ssvfiscanf_r+0x198>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d064      	beq.n	800b40c <__ssvfiscanf_r+0x1b8>
 800b342:	2303      	movs	r3, #3
 800b344:	9347      	str	r3, [sp, #284]	; 0x11c
 800b346:	230a      	movs	r3, #10
 800b348:	9342      	str	r3, [sp, #264]	; 0x108
 800b34a:	e071      	b.n	800b430 <__ssvfiscanf_r+0x1dc>
 800b34c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b34e:	fb02 1103 	mla	r1, r2, r3, r1
 800b352:	3930      	subs	r1, #48	; 0x30
 800b354:	9143      	str	r1, [sp, #268]	; 0x10c
 800b356:	4655      	mov	r5, sl
 800b358:	e7d3      	b.n	800b302 <__ssvfiscanf_r+0xae>
 800b35a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b35e:	2a20      	cmp	r2, #32
 800b360:	d8ef      	bhi.n	800b342 <__ssvfiscanf_r+0xee>
 800b362:	a101      	add	r1, pc, #4	; (adr r1, 800b368 <__ssvfiscanf_r+0x114>)
 800b364:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b368:	0800b41b 	.word	0x0800b41b
 800b36c:	0800b343 	.word	0x0800b343
 800b370:	0800b343 	.word	0x0800b343
 800b374:	0800b479 	.word	0x0800b479
 800b378:	0800b343 	.word	0x0800b343
 800b37c:	0800b343 	.word	0x0800b343
 800b380:	0800b343 	.word	0x0800b343
 800b384:	0800b343 	.word	0x0800b343
 800b388:	0800b343 	.word	0x0800b343
 800b38c:	0800b343 	.word	0x0800b343
 800b390:	0800b343 	.word	0x0800b343
 800b394:	0800b48f 	.word	0x0800b48f
 800b398:	0800b465 	.word	0x0800b465
 800b39c:	0800b3f3 	.word	0x0800b3f3
 800b3a0:	0800b3f3 	.word	0x0800b3f3
 800b3a4:	0800b3f3 	.word	0x0800b3f3
 800b3a8:	0800b343 	.word	0x0800b343
 800b3ac:	0800b469 	.word	0x0800b469
 800b3b0:	0800b343 	.word	0x0800b343
 800b3b4:	0800b343 	.word	0x0800b343
 800b3b8:	0800b343 	.word	0x0800b343
 800b3bc:	0800b343 	.word	0x0800b343
 800b3c0:	0800b49f 	.word	0x0800b49f
 800b3c4:	0800b471 	.word	0x0800b471
 800b3c8:	0800b413 	.word	0x0800b413
 800b3cc:	0800b343 	.word	0x0800b343
 800b3d0:	0800b343 	.word	0x0800b343
 800b3d4:	0800b49b 	.word	0x0800b49b
 800b3d8:	0800b343 	.word	0x0800b343
 800b3dc:	0800b465 	.word	0x0800b465
 800b3e0:	0800b343 	.word	0x0800b343
 800b3e4:	0800b343 	.word	0x0800b343
 800b3e8:	0800b41b 	.word	0x0800b41b
 800b3ec:	3b45      	subs	r3, #69	; 0x45
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d8a7      	bhi.n	800b342 <__ssvfiscanf_r+0xee>
 800b3f2:	2305      	movs	r3, #5
 800b3f4:	e01b      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b3f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4798      	blx	r3
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f43f af68 	beq.w	800b2d4 <__ssvfiscanf_r+0x80>
 800b404:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b406:	2800      	cmp	r0, #0
 800b408:	f040 808d 	bne.w	800b526 <__ssvfiscanf_r+0x2d2>
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	e08f      	b.n	800b532 <__ssvfiscanf_r+0x2de>
 800b412:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b414:	f042 0220 	orr.w	r2, r2, #32
 800b418:	9241      	str	r2, [sp, #260]	; 0x104
 800b41a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b420:	9241      	str	r2, [sp, #260]	; 0x104
 800b422:	2210      	movs	r2, #16
 800b424:	2b6f      	cmp	r3, #111	; 0x6f
 800b426:	9242      	str	r2, [sp, #264]	; 0x108
 800b428:	bf34      	ite	cc
 800b42a:	2303      	movcc	r3, #3
 800b42c:	2304      	movcs	r3, #4
 800b42e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b430:	6863      	ldr	r3, [r4, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd42      	ble.n	800b4bc <__ssvfiscanf_r+0x268>
 800b436:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b438:	0659      	lsls	r1, r3, #25
 800b43a:	d404      	bmi.n	800b446 <__ssvfiscanf_r+0x1f2>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	781a      	ldrb	r2, [r3, #0]
 800b440:	5cba      	ldrb	r2, [r7, r2]
 800b442:	0712      	lsls	r2, r2, #28
 800b444:	d441      	bmi.n	800b4ca <__ssvfiscanf_r+0x276>
 800b446:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b448:	2b02      	cmp	r3, #2
 800b44a:	dc50      	bgt.n	800b4ee <__ssvfiscanf_r+0x29a>
 800b44c:	466b      	mov	r3, sp
 800b44e:	4622      	mov	r2, r4
 800b450:	a941      	add	r1, sp, #260	; 0x104
 800b452:	4630      	mov	r0, r6
 800b454:	f000 f9d0 	bl	800b7f8 <_scanf_chars>
 800b458:	2801      	cmp	r0, #1
 800b45a:	d06e      	beq.n	800b53a <__ssvfiscanf_r+0x2e6>
 800b45c:	2802      	cmp	r0, #2
 800b45e:	f47f af20 	bne.w	800b2a2 <__ssvfiscanf_r+0x4e>
 800b462:	e7cf      	b.n	800b404 <__ssvfiscanf_r+0x1b0>
 800b464:	220a      	movs	r2, #10
 800b466:	e7dd      	b.n	800b424 <__ssvfiscanf_r+0x1d0>
 800b468:	2300      	movs	r3, #0
 800b46a:	9342      	str	r3, [sp, #264]	; 0x108
 800b46c:	2303      	movs	r3, #3
 800b46e:	e7de      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b470:	2308      	movs	r3, #8
 800b472:	9342      	str	r3, [sp, #264]	; 0x108
 800b474:	2304      	movs	r3, #4
 800b476:	e7da      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b478:	4629      	mov	r1, r5
 800b47a:	4640      	mov	r0, r8
 800b47c:	f000 fb80 	bl	800bb80 <__sccl>
 800b480:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b486:	9341      	str	r3, [sp, #260]	; 0x104
 800b488:	4605      	mov	r5, r0
 800b48a:	2301      	movs	r3, #1
 800b48c:	e7cf      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b48e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b494:	9341      	str	r3, [sp, #260]	; 0x104
 800b496:	2300      	movs	r3, #0
 800b498:	e7c9      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e7c7      	b.n	800b42e <__ssvfiscanf_r+0x1da>
 800b49e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b4a0:	06c3      	lsls	r3, r0, #27
 800b4a2:	f53f aefe 	bmi.w	800b2a2 <__ssvfiscanf_r+0x4e>
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4aa:	1d19      	adds	r1, r3, #4
 800b4ac:	9100      	str	r1, [sp, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f010 0f01 	tst.w	r0, #1
 800b4b4:	bf14      	ite	ne
 800b4b6:	801a      	strhne	r2, [r3, #0]
 800b4b8:	601a      	streq	r2, [r3, #0]
 800b4ba:	e6f2      	b.n	800b2a2 <__ssvfiscanf_r+0x4e>
 800b4bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4798      	blx	r3
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d0b6      	beq.n	800b436 <__ssvfiscanf_r+0x1e2>
 800b4c8:	e79c      	b.n	800b404 <__ssvfiscanf_r+0x1b0>
 800b4ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4cc:	3201      	adds	r2, #1
 800b4ce:	9245      	str	r2, [sp, #276]	; 0x114
 800b4d0:	6862      	ldr	r2, [r4, #4]
 800b4d2:	3a01      	subs	r2, #1
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	6062      	str	r2, [r4, #4]
 800b4d8:	dd02      	ble.n	800b4e0 <__ssvfiscanf_r+0x28c>
 800b4da:	3301      	adds	r3, #1
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	e7ad      	b.n	800b43c <__ssvfiscanf_r+0x1e8>
 800b4e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4798      	blx	r3
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0a7      	beq.n	800b43c <__ssvfiscanf_r+0x1e8>
 800b4ec:	e78a      	b.n	800b404 <__ssvfiscanf_r+0x1b0>
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	dc0e      	bgt.n	800b510 <__ssvfiscanf_r+0x2bc>
 800b4f2:	466b      	mov	r3, sp
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	a941      	add	r1, sp, #260	; 0x104
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f9d7 	bl	800b8ac <_scanf_i>
 800b4fe:	e7ab      	b.n	800b458 <__ssvfiscanf_r+0x204>
 800b500:	0800b1a1 	.word	0x0800b1a1
 800b504:	0800b21b 	.word	0x0800b21b
 800b508:	0800c5e9 	.word	0x0800c5e9
 800b50c:	0800c9ba 	.word	0x0800c9ba
 800b510:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <__ssvfiscanf_r+0x2ec>)
 800b512:	2b00      	cmp	r3, #0
 800b514:	f43f aec5 	beq.w	800b2a2 <__ssvfiscanf_r+0x4e>
 800b518:	466b      	mov	r3, sp
 800b51a:	4622      	mov	r2, r4
 800b51c:	a941      	add	r1, sp, #260	; 0x104
 800b51e:	4630      	mov	r0, r6
 800b520:	f7fb ffea 	bl	80074f8 <_scanf_float>
 800b524:	e798      	b.n	800b458 <__ssvfiscanf_r+0x204>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b52c:	bf18      	it	ne
 800b52e:	f04f 30ff 	movne.w	r0, #4294967295
 800b532:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b53c:	e7f9      	b.n	800b532 <__ssvfiscanf_r+0x2de>
 800b53e:	bf00      	nop
 800b540:	080074f9 	.word	0x080074f9

0800b544 <__sfputc_r>:
 800b544:	6893      	ldr	r3, [r2, #8]
 800b546:	3b01      	subs	r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	b410      	push	{r4}
 800b54c:	6093      	str	r3, [r2, #8]
 800b54e:	da08      	bge.n	800b562 <__sfputc_r+0x1e>
 800b550:	6994      	ldr	r4, [r2, #24]
 800b552:	42a3      	cmp	r3, r4
 800b554:	db01      	blt.n	800b55a <__sfputc_r+0x16>
 800b556:	290a      	cmp	r1, #10
 800b558:	d103      	bne.n	800b562 <__sfputc_r+0x1e>
 800b55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b55e:	f7fd b9df 	b.w	8008920 <__swbuf_r>
 800b562:	6813      	ldr	r3, [r2, #0]
 800b564:	1c58      	adds	r0, r3, #1
 800b566:	6010      	str	r0, [r2, #0]
 800b568:	7019      	strb	r1, [r3, #0]
 800b56a:	4608      	mov	r0, r1
 800b56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <__sfputs_r>:
 800b572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	4614      	mov	r4, r2
 800b57a:	18d5      	adds	r5, r2, r3
 800b57c:	42ac      	cmp	r4, r5
 800b57e:	d101      	bne.n	800b584 <__sfputs_r+0x12>
 800b580:	2000      	movs	r0, #0
 800b582:	e007      	b.n	800b594 <__sfputs_r+0x22>
 800b584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b588:	463a      	mov	r2, r7
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff ffda 	bl	800b544 <__sfputc_r>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d1f3      	bne.n	800b57c <__sfputs_r+0xa>
 800b594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b598 <_vfiprintf_r>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	460d      	mov	r5, r1
 800b59e:	b09d      	sub	sp, #116	; 0x74
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4698      	mov	r8, r3
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <_vfiprintf_r+0x18>
 800b5a8:	6983      	ldr	r3, [r0, #24]
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <_vfiprintf_r+0x18>
 800b5ac:	f7fe fa30 	bl	8009a10 <__sinit>
 800b5b0:	4b89      	ldr	r3, [pc, #548]	; (800b7d8 <_vfiprintf_r+0x240>)
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	d11b      	bne.n	800b5ee <_vfiprintf_r+0x56>
 800b5b6:	6875      	ldr	r5, [r6, #4]
 800b5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ba:	07d9      	lsls	r1, r3, #31
 800b5bc:	d405      	bmi.n	800b5ca <_vfiprintf_r+0x32>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	059a      	lsls	r2, r3, #22
 800b5c2:	d402      	bmi.n	800b5ca <_vfiprintf_r+0x32>
 800b5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5c6:	f7fe fe34 	bl	800a232 <__retarget_lock_acquire_recursive>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	071b      	lsls	r3, r3, #28
 800b5ce:	d501      	bpl.n	800b5d4 <_vfiprintf_r+0x3c>
 800b5d0:	692b      	ldr	r3, [r5, #16]
 800b5d2:	b9eb      	cbnz	r3, 800b610 <_vfiprintf_r+0x78>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7fd fa06 	bl	80089e8 <__swsetup_r>
 800b5dc:	b1c0      	cbz	r0, 800b610 <_vfiprintf_r+0x78>
 800b5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5e0:	07dc      	lsls	r4, r3, #31
 800b5e2:	d50e      	bpl.n	800b602 <_vfiprintf_r+0x6a>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b01d      	add	sp, #116	; 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	4b7b      	ldr	r3, [pc, #492]	; (800b7dc <_vfiprintf_r+0x244>)
 800b5f0:	429d      	cmp	r5, r3
 800b5f2:	d101      	bne.n	800b5f8 <_vfiprintf_r+0x60>
 800b5f4:	68b5      	ldr	r5, [r6, #8]
 800b5f6:	e7df      	b.n	800b5b8 <_vfiprintf_r+0x20>
 800b5f8:	4b79      	ldr	r3, [pc, #484]	; (800b7e0 <_vfiprintf_r+0x248>)
 800b5fa:	429d      	cmp	r5, r3
 800b5fc:	bf08      	it	eq
 800b5fe:	68f5      	ldreq	r5, [r6, #12]
 800b600:	e7da      	b.n	800b5b8 <_vfiprintf_r+0x20>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	0598      	lsls	r0, r3, #22
 800b606:	d4ed      	bmi.n	800b5e4 <_vfiprintf_r+0x4c>
 800b608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b60a:	f7fe fe13 	bl	800a234 <__retarget_lock_release_recursive>
 800b60e:	e7e9      	b.n	800b5e4 <_vfiprintf_r+0x4c>
 800b610:	2300      	movs	r3, #0
 800b612:	9309      	str	r3, [sp, #36]	; 0x24
 800b614:	2320      	movs	r3, #32
 800b616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b61e:	2330      	movs	r3, #48	; 0x30
 800b620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7e4 <_vfiprintf_r+0x24c>
 800b624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b628:	f04f 0901 	mov.w	r9, #1
 800b62c:	4623      	mov	r3, r4
 800b62e:	469a      	mov	sl, r3
 800b630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b634:	b10a      	cbz	r2, 800b63a <_vfiprintf_r+0xa2>
 800b636:	2a25      	cmp	r2, #37	; 0x25
 800b638:	d1f9      	bne.n	800b62e <_vfiprintf_r+0x96>
 800b63a:	ebba 0b04 	subs.w	fp, sl, r4
 800b63e:	d00b      	beq.n	800b658 <_vfiprintf_r+0xc0>
 800b640:	465b      	mov	r3, fp
 800b642:	4622      	mov	r2, r4
 800b644:	4629      	mov	r1, r5
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ff93 	bl	800b572 <__sfputs_r>
 800b64c:	3001      	adds	r0, #1
 800b64e:	f000 80aa 	beq.w	800b7a6 <_vfiprintf_r+0x20e>
 800b652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b654:	445a      	add	r2, fp
 800b656:	9209      	str	r2, [sp, #36]	; 0x24
 800b658:	f89a 3000 	ldrb.w	r3, [sl]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 80a2 	beq.w	800b7a6 <_vfiprintf_r+0x20e>
 800b662:	2300      	movs	r3, #0
 800b664:	f04f 32ff 	mov.w	r2, #4294967295
 800b668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b66c:	f10a 0a01 	add.w	sl, sl, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b678:	931a      	str	r3, [sp, #104]	; 0x68
 800b67a:	4654      	mov	r4, sl
 800b67c:	2205      	movs	r2, #5
 800b67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b682:	4858      	ldr	r0, [pc, #352]	; (800b7e4 <_vfiprintf_r+0x24c>)
 800b684:	f7f4 fdac 	bl	80001e0 <memchr>
 800b688:	9a04      	ldr	r2, [sp, #16]
 800b68a:	b9d8      	cbnz	r0, 800b6c4 <_vfiprintf_r+0x12c>
 800b68c:	06d1      	lsls	r1, r2, #27
 800b68e:	bf44      	itt	mi
 800b690:	2320      	movmi	r3, #32
 800b692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b696:	0713      	lsls	r3, r2, #28
 800b698:	bf44      	itt	mi
 800b69a:	232b      	movmi	r3, #43	; 0x2b
 800b69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a6:	d015      	beq.n	800b6d4 <_vfiprintf_r+0x13c>
 800b6a8:	9a07      	ldr	r2, [sp, #28]
 800b6aa:	4654      	mov	r4, sl
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	f04f 0c0a 	mov.w	ip, #10
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b8:	3b30      	subs	r3, #48	; 0x30
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d94e      	bls.n	800b75c <_vfiprintf_r+0x1c4>
 800b6be:	b1b0      	cbz	r0, 800b6ee <_vfiprintf_r+0x156>
 800b6c0:	9207      	str	r2, [sp, #28]
 800b6c2:	e014      	b.n	800b6ee <_vfiprintf_r+0x156>
 800b6c4:	eba0 0308 	sub.w	r3, r0, r8
 800b6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	46a2      	mov	sl, r4
 800b6d2:	e7d2      	b.n	800b67a <_vfiprintf_r+0xe2>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1d19      	adds	r1, r3, #4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	9103      	str	r1, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfbb      	ittet	lt
 800b6e0:	425b      	neglt	r3, r3
 800b6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e6:	9307      	strge	r3, [sp, #28]
 800b6e8:	9307      	strlt	r3, [sp, #28]
 800b6ea:	bfb8      	it	lt
 800b6ec:	9204      	strlt	r2, [sp, #16]
 800b6ee:	7823      	ldrb	r3, [r4, #0]
 800b6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6f2:	d10c      	bne.n	800b70e <_vfiprintf_r+0x176>
 800b6f4:	7863      	ldrb	r3, [r4, #1]
 800b6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f8:	d135      	bne.n	800b766 <_vfiprintf_r+0x1ce>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	1d1a      	adds	r2, r3, #4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	9203      	str	r2, [sp, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	bfb8      	it	lt
 800b706:	f04f 33ff 	movlt.w	r3, #4294967295
 800b70a:	3402      	adds	r4, #2
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7f4 <_vfiprintf_r+0x25c>
 800b712:	7821      	ldrb	r1, [r4, #0]
 800b714:	2203      	movs	r2, #3
 800b716:	4650      	mov	r0, sl
 800b718:	f7f4 fd62 	bl	80001e0 <memchr>
 800b71c:	b140      	cbz	r0, 800b730 <_vfiprintf_r+0x198>
 800b71e:	2340      	movs	r3, #64	; 0x40
 800b720:	eba0 000a 	sub.w	r0, r0, sl
 800b724:	fa03 f000 	lsl.w	r0, r3, r0
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	4303      	orrs	r3, r0
 800b72c:	3401      	adds	r4, #1
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b734:	482c      	ldr	r0, [pc, #176]	; (800b7e8 <_vfiprintf_r+0x250>)
 800b736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b73a:	2206      	movs	r2, #6
 800b73c:	f7f4 fd50 	bl	80001e0 <memchr>
 800b740:	2800      	cmp	r0, #0
 800b742:	d03f      	beq.n	800b7c4 <_vfiprintf_r+0x22c>
 800b744:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <_vfiprintf_r+0x254>)
 800b746:	bb1b      	cbnz	r3, 800b790 <_vfiprintf_r+0x1f8>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	3307      	adds	r3, #7
 800b74c:	f023 0307 	bic.w	r3, r3, #7
 800b750:	3308      	adds	r3, #8
 800b752:	9303      	str	r3, [sp, #12]
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	443b      	add	r3, r7
 800b758:	9309      	str	r3, [sp, #36]	; 0x24
 800b75a:	e767      	b.n	800b62c <_vfiprintf_r+0x94>
 800b75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b760:	460c      	mov	r4, r1
 800b762:	2001      	movs	r0, #1
 800b764:	e7a5      	b.n	800b6b2 <_vfiprintf_r+0x11a>
 800b766:	2300      	movs	r3, #0
 800b768:	3401      	adds	r4, #1
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	4619      	mov	r1, r3
 800b76e:	f04f 0c0a 	mov.w	ip, #10
 800b772:	4620      	mov	r0, r4
 800b774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b778:	3a30      	subs	r2, #48	; 0x30
 800b77a:	2a09      	cmp	r2, #9
 800b77c:	d903      	bls.n	800b786 <_vfiprintf_r+0x1ee>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0c5      	beq.n	800b70e <_vfiprintf_r+0x176>
 800b782:	9105      	str	r1, [sp, #20]
 800b784:	e7c3      	b.n	800b70e <_vfiprintf_r+0x176>
 800b786:	fb0c 2101 	mla	r1, ip, r1, r2
 800b78a:	4604      	mov	r4, r0
 800b78c:	2301      	movs	r3, #1
 800b78e:	e7f0      	b.n	800b772 <_vfiprintf_r+0x1da>
 800b790:	ab03      	add	r3, sp, #12
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	462a      	mov	r2, r5
 800b796:	4b16      	ldr	r3, [pc, #88]	; (800b7f0 <_vfiprintf_r+0x258>)
 800b798:	a904      	add	r1, sp, #16
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7fb fae2 	bl	8006d64 <_printf_float>
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	1c78      	adds	r0, r7, #1
 800b7a4:	d1d6      	bne.n	800b754 <_vfiprintf_r+0x1bc>
 800b7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7a8:	07d9      	lsls	r1, r3, #31
 800b7aa:	d405      	bmi.n	800b7b8 <_vfiprintf_r+0x220>
 800b7ac:	89ab      	ldrh	r3, [r5, #12]
 800b7ae:	059a      	lsls	r2, r3, #22
 800b7b0:	d402      	bmi.n	800b7b8 <_vfiprintf_r+0x220>
 800b7b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7b4:	f7fe fd3e 	bl	800a234 <__retarget_lock_release_recursive>
 800b7b8:	89ab      	ldrh	r3, [r5, #12]
 800b7ba:	065b      	lsls	r3, r3, #25
 800b7bc:	f53f af12 	bmi.w	800b5e4 <_vfiprintf_r+0x4c>
 800b7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7c2:	e711      	b.n	800b5e8 <_vfiprintf_r+0x50>
 800b7c4:	ab03      	add	r3, sp, #12
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <_vfiprintf_r+0x258>)
 800b7cc:	a904      	add	r1, sp, #16
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7fb fd6c 	bl	80072ac <_printf_i>
 800b7d4:	e7e4      	b.n	800b7a0 <_vfiprintf_r+0x208>
 800b7d6:	bf00      	nop
 800b7d8:	0800c79c 	.word	0x0800c79c
 800b7dc:	0800c7bc 	.word	0x0800c7bc
 800b7e0:	0800c77c 	.word	0x0800c77c
 800b7e4:	0800c9b4 	.word	0x0800c9b4
 800b7e8:	0800c9be 	.word	0x0800c9be
 800b7ec:	08006d65 	.word	0x08006d65
 800b7f0:	0800b573 	.word	0x0800b573
 800b7f4:	0800c9ba 	.word	0x0800c9ba

0800b7f8 <_scanf_chars>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	4615      	mov	r5, r2
 800b7fe:	688a      	ldr	r2, [r1, #8]
 800b800:	4680      	mov	r8, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b932      	cbnz	r2, 800b814 <_scanf_chars+0x1c>
 800b806:	698a      	ldr	r2, [r1, #24]
 800b808:	2a00      	cmp	r2, #0
 800b80a:	bf0c      	ite	eq
 800b80c:	2201      	moveq	r2, #1
 800b80e:	f04f 32ff 	movne.w	r2, #4294967295
 800b812:	608a      	str	r2, [r1, #8]
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b8a8 <_scanf_chars+0xb0>
 800b81a:	06d1      	lsls	r1, r2, #27
 800b81c:	bf5f      	itttt	pl
 800b81e:	681a      	ldrpl	r2, [r3, #0]
 800b820:	1d11      	addpl	r1, r2, #4
 800b822:	6019      	strpl	r1, [r3, #0]
 800b824:	6816      	ldrpl	r6, [r2, #0]
 800b826:	2700      	movs	r7, #0
 800b828:	69a0      	ldr	r0, [r4, #24]
 800b82a:	b188      	cbz	r0, 800b850 <_scanf_chars+0x58>
 800b82c:	2801      	cmp	r0, #1
 800b82e:	d107      	bne.n	800b840 <_scanf_chars+0x48>
 800b830:	682a      	ldr	r2, [r5, #0]
 800b832:	7811      	ldrb	r1, [r2, #0]
 800b834:	6962      	ldr	r2, [r4, #20]
 800b836:	5c52      	ldrb	r2, [r2, r1]
 800b838:	b952      	cbnz	r2, 800b850 <_scanf_chars+0x58>
 800b83a:	2f00      	cmp	r7, #0
 800b83c:	d031      	beq.n	800b8a2 <_scanf_chars+0xaa>
 800b83e:	e022      	b.n	800b886 <_scanf_chars+0x8e>
 800b840:	2802      	cmp	r0, #2
 800b842:	d120      	bne.n	800b886 <_scanf_chars+0x8e>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b84c:	071b      	lsls	r3, r3, #28
 800b84e:	d41a      	bmi.n	800b886 <_scanf_chars+0x8e>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	06da      	lsls	r2, r3, #27
 800b854:	bf5e      	ittt	pl
 800b856:	682b      	ldrpl	r3, [r5, #0]
 800b858:	781b      	ldrbpl	r3, [r3, #0]
 800b85a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b85e:	682a      	ldr	r2, [r5, #0]
 800b860:	686b      	ldr	r3, [r5, #4]
 800b862:	3201      	adds	r2, #1
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	68a2      	ldr	r2, [r4, #8]
 800b868:	3b01      	subs	r3, #1
 800b86a:	3a01      	subs	r2, #1
 800b86c:	606b      	str	r3, [r5, #4]
 800b86e:	3701      	adds	r7, #1
 800b870:	60a2      	str	r2, [r4, #8]
 800b872:	b142      	cbz	r2, 800b886 <_scanf_chars+0x8e>
 800b874:	2b00      	cmp	r3, #0
 800b876:	dcd7      	bgt.n	800b828 <_scanf_chars+0x30>
 800b878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b87c:	4629      	mov	r1, r5
 800b87e:	4640      	mov	r0, r8
 800b880:	4798      	blx	r3
 800b882:	2800      	cmp	r0, #0
 800b884:	d0d0      	beq.n	800b828 <_scanf_chars+0x30>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	f013 0310 	ands.w	r3, r3, #16
 800b88c:	d105      	bne.n	800b89a <_scanf_chars+0xa2>
 800b88e:	68e2      	ldr	r2, [r4, #12]
 800b890:	3201      	adds	r2, #1
 800b892:	60e2      	str	r2, [r4, #12]
 800b894:	69a2      	ldr	r2, [r4, #24]
 800b896:	b102      	cbz	r2, 800b89a <_scanf_chars+0xa2>
 800b898:	7033      	strb	r3, [r6, #0]
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	443b      	add	r3, r7
 800b89e:	6123      	str	r3, [r4, #16]
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800c5e9 	.word	0x0800c5e9

0800b8ac <_scanf_i>:
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	4698      	mov	r8, r3
 800b8b2:	4b76      	ldr	r3, [pc, #472]	; (800ba8c <_scanf_i+0x1e0>)
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	4682      	mov	sl, r0
 800b8b8:	4616      	mov	r6, r2
 800b8ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	ab03      	add	r3, sp, #12
 800b8c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8c6:	4b72      	ldr	r3, [pc, #456]	; (800ba90 <_scanf_i+0x1e4>)
 800b8c8:	69a1      	ldr	r1, [r4, #24]
 800b8ca:	4a72      	ldr	r2, [pc, #456]	; (800ba94 <_scanf_i+0x1e8>)
 800b8cc:	2903      	cmp	r1, #3
 800b8ce:	bf18      	it	ne
 800b8d0:	461a      	movne	r2, r3
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	9201      	str	r2, [sp, #4]
 800b8d6:	1e5a      	subs	r2, r3, #1
 800b8d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b8dc:	bf88      	it	hi
 800b8de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b8e2:	4627      	mov	r7, r4
 800b8e4:	bf82      	ittt	hi
 800b8e6:	eb03 0905 	addhi.w	r9, r3, r5
 800b8ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b8ee:	60a3      	strhi	r3, [r4, #8]
 800b8f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b8f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b8f8:	bf98      	it	ls
 800b8fa:	f04f 0900 	movls.w	r9, #0
 800b8fe:	6023      	str	r3, [r4, #0]
 800b900:	463d      	mov	r5, r7
 800b902:	f04f 0b00 	mov.w	fp, #0
 800b906:	6831      	ldr	r1, [r6, #0]
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	7809      	ldrb	r1, [r1, #0]
 800b90c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b910:	2202      	movs	r2, #2
 800b912:	f7f4 fc65 	bl	80001e0 <memchr>
 800b916:	b328      	cbz	r0, 800b964 <_scanf_i+0xb8>
 800b918:	f1bb 0f01 	cmp.w	fp, #1
 800b91c:	d159      	bne.n	800b9d2 <_scanf_i+0x126>
 800b91e:	6862      	ldr	r2, [r4, #4]
 800b920:	b92a      	cbnz	r2, 800b92e <_scanf_i+0x82>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	2308      	movs	r3, #8
 800b926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b92a:	6063      	str	r3, [r4, #4]
 800b92c:	6022      	str	r2, [r4, #0]
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b934:	6022      	str	r2, [r4, #0]
 800b936:	68a2      	ldr	r2, [r4, #8]
 800b938:	1e51      	subs	r1, r2, #1
 800b93a:	60a1      	str	r1, [r4, #8]
 800b93c:	b192      	cbz	r2, 800b964 <_scanf_i+0xb8>
 800b93e:	6832      	ldr	r2, [r6, #0]
 800b940:	1c51      	adds	r1, r2, #1
 800b942:	6031      	str	r1, [r6, #0]
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	f805 2b01 	strb.w	r2, [r5], #1
 800b94a:	6872      	ldr	r2, [r6, #4]
 800b94c:	3a01      	subs	r2, #1
 800b94e:	2a00      	cmp	r2, #0
 800b950:	6072      	str	r2, [r6, #4]
 800b952:	dc07      	bgt.n	800b964 <_scanf_i+0xb8>
 800b954:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b958:	4631      	mov	r1, r6
 800b95a:	4650      	mov	r0, sl
 800b95c:	4790      	blx	r2
 800b95e:	2800      	cmp	r0, #0
 800b960:	f040 8085 	bne.w	800ba6e <_scanf_i+0x1c2>
 800b964:	f10b 0b01 	add.w	fp, fp, #1
 800b968:	f1bb 0f03 	cmp.w	fp, #3
 800b96c:	d1cb      	bne.n	800b906 <_scanf_i+0x5a>
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	b90b      	cbnz	r3, 800b976 <_scanf_i+0xca>
 800b972:	230a      	movs	r3, #10
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	6863      	ldr	r3, [r4, #4]
 800b978:	4947      	ldr	r1, [pc, #284]	; (800ba98 <_scanf_i+0x1ec>)
 800b97a:	6960      	ldr	r0, [r4, #20]
 800b97c:	1ac9      	subs	r1, r1, r3
 800b97e:	f000 f8ff 	bl	800bb80 <__sccl>
 800b982:	f04f 0b00 	mov.w	fp, #0
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d03d      	beq.n	800ba0a <_scanf_i+0x15e>
 800b98e:	6831      	ldr	r1, [r6, #0]
 800b990:	6960      	ldr	r0, [r4, #20]
 800b992:	f891 c000 	ldrb.w	ip, [r1]
 800b996:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d035      	beq.n	800ba0a <_scanf_i+0x15e>
 800b99e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b9a2:	d124      	bne.n	800b9ee <_scanf_i+0x142>
 800b9a4:	0510      	lsls	r0, r2, #20
 800b9a6:	d522      	bpl.n	800b9ee <_scanf_i+0x142>
 800b9a8:	f10b 0b01 	add.w	fp, fp, #1
 800b9ac:	f1b9 0f00 	cmp.w	r9, #0
 800b9b0:	d003      	beq.n	800b9ba <_scanf_i+0x10e>
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	6873      	ldr	r3, [r6, #4]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	6073      	str	r3, [r6, #4]
 800b9c2:	dd1b      	ble.n	800b9fc <_scanf_i+0x150>
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	6033      	str	r3, [r6, #0]
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	60a3      	str	r3, [r4, #8]
 800b9d0:	e7d9      	b.n	800b986 <_scanf_i+0xda>
 800b9d2:	f1bb 0f02 	cmp.w	fp, #2
 800b9d6:	d1ae      	bne.n	800b936 <_scanf_i+0x8a>
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b9de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b9e2:	d1bf      	bne.n	800b964 <_scanf_i+0xb8>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9ec:	e7a2      	b.n	800b934 <_scanf_i+0x88>
 800b9ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b9f2:	6022      	str	r2, [r4, #0]
 800b9f4:	780b      	ldrb	r3, [r1, #0]
 800b9f6:	f805 3b01 	strb.w	r3, [r5], #1
 800b9fa:	e7de      	b.n	800b9ba <_scanf_i+0x10e>
 800b9fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba00:	4631      	mov	r1, r6
 800ba02:	4650      	mov	r0, sl
 800ba04:	4798      	blx	r3
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0df      	beq.n	800b9ca <_scanf_i+0x11e>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	05db      	lsls	r3, r3, #23
 800ba0e:	d50d      	bpl.n	800ba2c <_scanf_i+0x180>
 800ba10:	42bd      	cmp	r5, r7
 800ba12:	d909      	bls.n	800ba28 <_scanf_i+0x17c>
 800ba14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	4650      	mov	r0, sl
 800ba20:	4798      	blx	r3
 800ba22:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba26:	464d      	mov	r5, r9
 800ba28:	42bd      	cmp	r5, r7
 800ba2a:	d02d      	beq.n	800ba88 <_scanf_i+0x1dc>
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	f012 0210 	ands.w	r2, r2, #16
 800ba32:	d113      	bne.n	800ba5c <_scanf_i+0x1b0>
 800ba34:	702a      	strb	r2, [r5, #0]
 800ba36:	6863      	ldr	r3, [r4, #4]
 800ba38:	9e01      	ldr	r6, [sp, #4]
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	47b0      	blx	r6
 800ba40:	6821      	ldr	r1, [r4, #0]
 800ba42:	f8d8 3000 	ldr.w	r3, [r8]
 800ba46:	f011 0f20 	tst.w	r1, #32
 800ba4a:	d013      	beq.n	800ba74 <_scanf_i+0x1c8>
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	f8c8 2000 	str.w	r2, [r8]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6018      	str	r0, [r3, #0]
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60e3      	str	r3, [r4, #12]
 800ba5c:	1bed      	subs	r5, r5, r7
 800ba5e:	44ab      	add	fp, r5
 800ba60:	6925      	ldr	r5, [r4, #16]
 800ba62:	445d      	add	r5, fp
 800ba64:	6125      	str	r5, [r4, #16]
 800ba66:	2000      	movs	r0, #0
 800ba68:	b007      	add	sp, #28
 800ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	f04f 0b00 	mov.w	fp, #0
 800ba72:	e7ca      	b.n	800ba0a <_scanf_i+0x15e>
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	f8c8 2000 	str.w	r2, [r8]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f011 0f01 	tst.w	r1, #1
 800ba80:	bf14      	ite	ne
 800ba82:	8018      	strhne	r0, [r3, #0]
 800ba84:	6018      	streq	r0, [r3, #0]
 800ba86:	e7e6      	b.n	800ba56 <_scanf_i+0x1aa>
 800ba88:	2001      	movs	r0, #1
 800ba8a:	e7ed      	b.n	800ba68 <_scanf_i+0x1bc>
 800ba8c:	0800bf78 	.word	0x0800bf78
 800ba90:	0800bcd5 	.word	0x0800bcd5
 800ba94:	0800891d 	.word	0x0800891d
 800ba98:	0800c9de 	.word	0x0800c9de

0800ba9c <_putc_r>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	460d      	mov	r5, r1
 800baa0:	4614      	mov	r4, r2
 800baa2:	4606      	mov	r6, r0
 800baa4:	b118      	cbz	r0, 800baae <_putc_r+0x12>
 800baa6:	6983      	ldr	r3, [r0, #24]
 800baa8:	b90b      	cbnz	r3, 800baae <_putc_r+0x12>
 800baaa:	f7fd ffb1 	bl	8009a10 <__sinit>
 800baae:	4b1c      	ldr	r3, [pc, #112]	; (800bb20 <_putc_r+0x84>)
 800bab0:	429c      	cmp	r4, r3
 800bab2:	d124      	bne.n	800bafe <_putc_r+0x62>
 800bab4:	6874      	ldr	r4, [r6, #4]
 800bab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bab8:	07d8      	lsls	r0, r3, #31
 800baba:	d405      	bmi.n	800bac8 <_putc_r+0x2c>
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	0599      	lsls	r1, r3, #22
 800bac0:	d402      	bmi.n	800bac8 <_putc_r+0x2c>
 800bac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac4:	f7fe fbb5 	bl	800a232 <__retarget_lock_acquire_recursive>
 800bac8:	68a3      	ldr	r3, [r4, #8]
 800baca:	3b01      	subs	r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	60a3      	str	r3, [r4, #8]
 800bad0:	da05      	bge.n	800bade <_putc_r+0x42>
 800bad2:	69a2      	ldr	r2, [r4, #24]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	db1c      	blt.n	800bb12 <_putc_r+0x76>
 800bad8:	b2eb      	uxtb	r3, r5
 800bada:	2b0a      	cmp	r3, #10
 800badc:	d019      	beq.n	800bb12 <_putc_r+0x76>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	6022      	str	r2, [r4, #0]
 800bae4:	701d      	strb	r5, [r3, #0]
 800bae6:	b2ed      	uxtb	r5, r5
 800bae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baea:	07da      	lsls	r2, r3, #31
 800baec:	d405      	bmi.n	800bafa <_putc_r+0x5e>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	059b      	lsls	r3, r3, #22
 800baf2:	d402      	bmi.n	800bafa <_putc_r+0x5e>
 800baf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baf6:	f7fe fb9d 	bl	800a234 <__retarget_lock_release_recursive>
 800bafa:	4628      	mov	r0, r5
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <_putc_r+0x88>)
 800bb00:	429c      	cmp	r4, r3
 800bb02:	d101      	bne.n	800bb08 <_putc_r+0x6c>
 800bb04:	68b4      	ldr	r4, [r6, #8]
 800bb06:	e7d6      	b.n	800bab6 <_putc_r+0x1a>
 800bb08:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <_putc_r+0x8c>)
 800bb0a:	429c      	cmp	r4, r3
 800bb0c:	bf08      	it	eq
 800bb0e:	68f4      	ldreq	r4, [r6, #12]
 800bb10:	e7d1      	b.n	800bab6 <_putc_r+0x1a>
 800bb12:	4629      	mov	r1, r5
 800bb14:	4622      	mov	r2, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7fc ff02 	bl	8008920 <__swbuf_r>
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	e7e3      	b.n	800bae8 <_putc_r+0x4c>
 800bb20:	0800c79c 	.word	0x0800c79c
 800bb24:	0800c7bc 	.word	0x0800c7bc
 800bb28:	0800c77c 	.word	0x0800c77c

0800bb2c <_read_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d07      	ldr	r5, [pc, #28]	; (800bb4c <_read_r+0x20>)
 800bb30:	4604      	mov	r4, r0
 800bb32:	4608      	mov	r0, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	2200      	movs	r2, #0
 800bb38:	602a      	str	r2, [r5, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f7f6 fe04 	bl	8002748 <_read>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d102      	bne.n	800bb4a <_read_r+0x1e>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	b103      	cbz	r3, 800bb4a <_read_r+0x1e>
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	2000091c 	.word	0x2000091c

0800bb50 <nan>:
 800bb50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb58 <nan+0x8>
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	00000000 	.word	0x00000000
 800bb5c:	7ff80000 	.word	0x7ff80000

0800bb60 <_sbrk_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	; (800bb7c <_sbrk_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f6 fe16 	bl	800279c <_sbrk>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_sbrk_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_sbrk_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	2000091c 	.word	0x2000091c

0800bb80 <__sccl>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	780b      	ldrb	r3, [r1, #0]
 800bb84:	4604      	mov	r4, r0
 800bb86:	2b5e      	cmp	r3, #94	; 0x5e
 800bb88:	bf0b      	itete	eq
 800bb8a:	784b      	ldrbeq	r3, [r1, #1]
 800bb8c:	1c48      	addne	r0, r1, #1
 800bb8e:	1c88      	addeq	r0, r1, #2
 800bb90:	2200      	movne	r2, #0
 800bb92:	bf08      	it	eq
 800bb94:	2201      	moveq	r2, #1
 800bb96:	1e61      	subs	r1, r4, #1
 800bb98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bb9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bba0:	42a9      	cmp	r1, r5
 800bba2:	d1fb      	bne.n	800bb9c <__sccl+0x1c>
 800bba4:	b90b      	cbnz	r3, 800bbaa <__sccl+0x2a>
 800bba6:	3801      	subs	r0, #1
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	f082 0201 	eor.w	r2, r2, #1
 800bbae:	54e2      	strb	r2, [r4, r3]
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbb8:	292d      	cmp	r1, #45	; 0x2d
 800bbba:	d006      	beq.n	800bbca <__sccl+0x4a>
 800bbbc:	295d      	cmp	r1, #93	; 0x5d
 800bbbe:	d0f3      	beq.n	800bba8 <__sccl+0x28>
 800bbc0:	b909      	cbnz	r1, 800bbc6 <__sccl+0x46>
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	e7f0      	b.n	800bba8 <__sccl+0x28>
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	e7f1      	b.n	800bbae <__sccl+0x2e>
 800bbca:	786e      	ldrb	r6, [r5, #1]
 800bbcc:	2e5d      	cmp	r6, #93	; 0x5d
 800bbce:	d0fa      	beq.n	800bbc6 <__sccl+0x46>
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	dcf8      	bgt.n	800bbc6 <__sccl+0x46>
 800bbd4:	3502      	adds	r5, #2
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	3101      	adds	r1, #1
 800bbda:	428e      	cmp	r6, r1
 800bbdc:	5462      	strb	r2, [r4, r1]
 800bbde:	dcfb      	bgt.n	800bbd8 <__sccl+0x58>
 800bbe0:	1af1      	subs	r1, r6, r3
 800bbe2:	3901      	subs	r1, #1
 800bbe4:	1c58      	adds	r0, r3, #1
 800bbe6:	42b3      	cmp	r3, r6
 800bbe8:	bfa8      	it	ge
 800bbea:	2100      	movge	r1, #0
 800bbec:	1843      	adds	r3, r0, r1
 800bbee:	e7e0      	b.n	800bbb2 <__sccl+0x32>

0800bbf0 <_strtoul_l.constprop.0>:
 800bbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4f36      	ldr	r7, [pc, #216]	; (800bcd0 <_strtoul_l.constprop.0+0xe0>)
 800bbf6:	4686      	mov	lr, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc00:	5de6      	ldrb	r6, [r4, r7]
 800bc02:	f016 0608 	ands.w	r6, r6, #8
 800bc06:	d1f8      	bne.n	800bbfa <_strtoul_l.constprop.0+0xa>
 800bc08:	2c2d      	cmp	r4, #45	; 0x2d
 800bc0a:	d12f      	bne.n	800bc6c <_strtoul_l.constprop.0+0x7c>
 800bc0c:	782c      	ldrb	r4, [r5, #0]
 800bc0e:	2601      	movs	r6, #1
 800bc10:	1c85      	adds	r5, r0, #2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d057      	beq.n	800bcc6 <_strtoul_l.constprop.0+0xd6>
 800bc16:	2b10      	cmp	r3, #16
 800bc18:	d109      	bne.n	800bc2e <_strtoul_l.constprop.0+0x3e>
 800bc1a:	2c30      	cmp	r4, #48	; 0x30
 800bc1c:	d107      	bne.n	800bc2e <_strtoul_l.constprop.0+0x3e>
 800bc1e:	7828      	ldrb	r0, [r5, #0]
 800bc20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bc24:	2858      	cmp	r0, #88	; 0x58
 800bc26:	d149      	bne.n	800bcbc <_strtoul_l.constprop.0+0xcc>
 800bc28:	786c      	ldrb	r4, [r5, #1]
 800bc2a:	2310      	movs	r3, #16
 800bc2c:	3502      	adds	r5, #2
 800bc2e:	f04f 38ff 	mov.w	r8, #4294967295
 800bc32:	2700      	movs	r7, #0
 800bc34:	fbb8 f8f3 	udiv	r8, r8, r3
 800bc38:	fb03 f908 	mul.w	r9, r3, r8
 800bc3c:	ea6f 0909 	mvn.w	r9, r9
 800bc40:	4638      	mov	r0, r7
 800bc42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc46:	f1bc 0f09 	cmp.w	ip, #9
 800bc4a:	d814      	bhi.n	800bc76 <_strtoul_l.constprop.0+0x86>
 800bc4c:	4664      	mov	r4, ip
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	dd22      	ble.n	800bc98 <_strtoul_l.constprop.0+0xa8>
 800bc52:	2f00      	cmp	r7, #0
 800bc54:	db1d      	blt.n	800bc92 <_strtoul_l.constprop.0+0xa2>
 800bc56:	4580      	cmp	r8, r0
 800bc58:	d31b      	bcc.n	800bc92 <_strtoul_l.constprop.0+0xa2>
 800bc5a:	d101      	bne.n	800bc60 <_strtoul_l.constprop.0+0x70>
 800bc5c:	45a1      	cmp	r9, r4
 800bc5e:	db18      	blt.n	800bc92 <_strtoul_l.constprop.0+0xa2>
 800bc60:	fb00 4003 	mla	r0, r0, r3, r4
 800bc64:	2701      	movs	r7, #1
 800bc66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc6a:	e7ea      	b.n	800bc42 <_strtoul_l.constprop.0+0x52>
 800bc6c:	2c2b      	cmp	r4, #43	; 0x2b
 800bc6e:	bf04      	itt	eq
 800bc70:	782c      	ldrbeq	r4, [r5, #0]
 800bc72:	1c85      	addeq	r5, r0, #2
 800bc74:	e7cd      	b.n	800bc12 <_strtoul_l.constprop.0+0x22>
 800bc76:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc7a:	f1bc 0f19 	cmp.w	ip, #25
 800bc7e:	d801      	bhi.n	800bc84 <_strtoul_l.constprop.0+0x94>
 800bc80:	3c37      	subs	r4, #55	; 0x37
 800bc82:	e7e4      	b.n	800bc4e <_strtoul_l.constprop.0+0x5e>
 800bc84:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc88:	f1bc 0f19 	cmp.w	ip, #25
 800bc8c:	d804      	bhi.n	800bc98 <_strtoul_l.constprop.0+0xa8>
 800bc8e:	3c57      	subs	r4, #87	; 0x57
 800bc90:	e7dd      	b.n	800bc4e <_strtoul_l.constprop.0+0x5e>
 800bc92:	f04f 37ff 	mov.w	r7, #4294967295
 800bc96:	e7e6      	b.n	800bc66 <_strtoul_l.constprop.0+0x76>
 800bc98:	2f00      	cmp	r7, #0
 800bc9a:	da07      	bge.n	800bcac <_strtoul_l.constprop.0+0xbc>
 800bc9c:	2322      	movs	r3, #34	; 0x22
 800bc9e:	f8ce 3000 	str.w	r3, [lr]
 800bca2:	f04f 30ff 	mov.w	r0, #4294967295
 800bca6:	b932      	cbnz	r2, 800bcb6 <_strtoul_l.constprop.0+0xc6>
 800bca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcac:	b106      	cbz	r6, 800bcb0 <_strtoul_l.constprop.0+0xc0>
 800bcae:	4240      	negs	r0, r0
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d0f9      	beq.n	800bca8 <_strtoul_l.constprop.0+0xb8>
 800bcb4:	b107      	cbz	r7, 800bcb8 <_strtoul_l.constprop.0+0xc8>
 800bcb6:	1e69      	subs	r1, r5, #1
 800bcb8:	6011      	str	r1, [r2, #0]
 800bcba:	e7f5      	b.n	800bca8 <_strtoul_l.constprop.0+0xb8>
 800bcbc:	2430      	movs	r4, #48	; 0x30
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1b5      	bne.n	800bc2e <_strtoul_l.constprop.0+0x3e>
 800bcc2:	2308      	movs	r3, #8
 800bcc4:	e7b3      	b.n	800bc2e <_strtoul_l.constprop.0+0x3e>
 800bcc6:	2c30      	cmp	r4, #48	; 0x30
 800bcc8:	d0a9      	beq.n	800bc1e <_strtoul_l.constprop.0+0x2e>
 800bcca:	230a      	movs	r3, #10
 800bccc:	e7af      	b.n	800bc2e <_strtoul_l.constprop.0+0x3e>
 800bcce:	bf00      	nop
 800bcd0:	0800c5e9 	.word	0x0800c5e9

0800bcd4 <_strtoul_r>:
 800bcd4:	f7ff bf8c 	b.w	800bbf0 <_strtoul_l.constprop.0>

0800bcd8 <__submore>:
 800bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	460c      	mov	r4, r1
 800bcde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bce4:	4299      	cmp	r1, r3
 800bce6:	d11d      	bne.n	800bd24 <__submore+0x4c>
 800bce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bcec:	f7ff f888 	bl	800ae00 <_malloc_r>
 800bcf0:	b918      	cbnz	r0, 800bcfa <__submore+0x22>
 800bcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcfe:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bd04:	6360      	str	r0, [r4, #52]	; 0x34
 800bd06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bd0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bd12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bd16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bd1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bd1e:	6020      	str	r0, [r4, #0]
 800bd20:	2000      	movs	r0, #0
 800bd22:	e7e8      	b.n	800bcf6 <__submore+0x1e>
 800bd24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bd26:	0077      	lsls	r7, r6, #1
 800bd28:	463a      	mov	r2, r7
 800bd2a:	f000 f895 	bl	800be58 <_realloc_r>
 800bd2e:	4605      	mov	r5, r0
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0de      	beq.n	800bcf2 <__submore+0x1a>
 800bd34:	eb00 0806 	add.w	r8, r0, r6
 800bd38:	4601      	mov	r1, r0
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	f7fe fb0d 	bl	800a35c <memcpy>
 800bd42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bd46:	f8c4 8000 	str.w	r8, [r4]
 800bd4a:	e7e9      	b.n	800bd20 <__submore+0x48>

0800bd4c <__ascii_wctomb>:
 800bd4c:	b149      	cbz	r1, 800bd62 <__ascii_wctomb+0x16>
 800bd4e:	2aff      	cmp	r2, #255	; 0xff
 800bd50:	bf85      	ittet	hi
 800bd52:	238a      	movhi	r3, #138	; 0x8a
 800bd54:	6003      	strhi	r3, [r0, #0]
 800bd56:	700a      	strbls	r2, [r1, #0]
 800bd58:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd5c:	bf98      	it	ls
 800bd5e:	2001      	movls	r0, #1
 800bd60:	4770      	bx	lr
 800bd62:	4608      	mov	r0, r1
 800bd64:	4770      	bx	lr
	...

0800bd68 <__assert_func>:
 800bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <__assert_func+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	68d8      	ldr	r0, [r3, #12]
 800bd76:	b14c      	cbz	r4, 800bd8c <__assert_func+0x24>
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <__assert_func+0x30>)
 800bd7a:	9100      	str	r1, [sp, #0]
 800bd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <__assert_func+0x34>)
 800bd82:	462b      	mov	r3, r5
 800bd84:	f000 f80e 	bl	800bda4 <fiprintf>
 800bd88:	f000 f895 	bl	800beb6 <abort>
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <__assert_func+0x38>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e7f3      	b.n	800bd7a <__assert_func+0x12>
 800bd92:	bf00      	nop
 800bd94:	2000003c 	.word	0x2000003c
 800bd98:	0800c9e0 	.word	0x0800c9e0
 800bd9c:	0800c9ed 	.word	0x0800c9ed
 800bda0:	0800ca1b 	.word	0x0800ca1b

0800bda4 <fiprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b503      	push	{r0, r1, lr}
 800bda8:	4601      	mov	r1, r0
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <fiprintf+0x20>)
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	6800      	ldr	r0, [r0, #0]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f7ff fbef 	bl	800b598 <_vfiprintf_r>
 800bdba:	b002      	add	sp, #8
 800bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc0:	b003      	add	sp, #12
 800bdc2:	4770      	bx	lr
 800bdc4:	2000003c 	.word	0x2000003c

0800bdc8 <_fstat_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	; (800bde8 <_fstat_r+0x20>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	f7f6 fcd8 	bl	800278a <_fstat>
 800bdda:	1c43      	adds	r3, r0, #1
 800bddc:	d102      	bne.n	800bde4 <_fstat_r+0x1c>
 800bdde:	682b      	ldr	r3, [r5, #0]
 800bde0:	b103      	cbz	r3, 800bde4 <_fstat_r+0x1c>
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	bf00      	nop
 800bde8:	2000091c 	.word	0x2000091c

0800bdec <_isatty_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d06      	ldr	r5, [pc, #24]	; (800be08 <_isatty_r+0x1c>)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	f7f6 fccc 	bl	8002794 <_isatty>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_isatty_r+0x1a>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_isatty_r+0x1a>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	2000091c 	.word	0x2000091c

0800be0c <memmove>:
 800be0c:	4288      	cmp	r0, r1
 800be0e:	b510      	push	{r4, lr}
 800be10:	eb01 0402 	add.w	r4, r1, r2
 800be14:	d902      	bls.n	800be1c <memmove+0x10>
 800be16:	4284      	cmp	r4, r0
 800be18:	4623      	mov	r3, r4
 800be1a:	d807      	bhi.n	800be2c <memmove+0x20>
 800be1c:	1e43      	subs	r3, r0, #1
 800be1e:	42a1      	cmp	r1, r4
 800be20:	d008      	beq.n	800be34 <memmove+0x28>
 800be22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be2a:	e7f8      	b.n	800be1e <memmove+0x12>
 800be2c:	4402      	add	r2, r0
 800be2e:	4601      	mov	r1, r0
 800be30:	428a      	cmp	r2, r1
 800be32:	d100      	bne.n	800be36 <memmove+0x2a>
 800be34:	bd10      	pop	{r4, pc}
 800be36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be3e:	e7f7      	b.n	800be30 <memmove+0x24>

0800be40 <__malloc_lock>:
 800be40:	4801      	ldr	r0, [pc, #4]	; (800be48 <__malloc_lock+0x8>)
 800be42:	f7fe b9f6 	b.w	800a232 <__retarget_lock_acquire_recursive>
 800be46:	bf00      	nop
 800be48:	20000910 	.word	0x20000910

0800be4c <__malloc_unlock>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__malloc_unlock+0x8>)
 800be4e:	f7fe b9f1 	b.w	800a234 <__retarget_lock_release_recursive>
 800be52:	bf00      	nop
 800be54:	20000910 	.word	0x20000910

0800be58 <_realloc_r>:
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	4680      	mov	r8, r0
 800be5e:	4614      	mov	r4, r2
 800be60:	460e      	mov	r6, r1
 800be62:	b921      	cbnz	r1, 800be6e <_realloc_r+0x16>
 800be64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be68:	4611      	mov	r1, r2
 800be6a:	f7fe bfc9 	b.w	800ae00 <_malloc_r>
 800be6e:	b92a      	cbnz	r2, 800be7c <_realloc_r+0x24>
 800be70:	f7fe ff5a 	bl	800ad28 <_free_r>
 800be74:	4625      	mov	r5, r4
 800be76:	4628      	mov	r0, r5
 800be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7c:	f000 f822 	bl	800bec4 <_malloc_usable_size_r>
 800be80:	4284      	cmp	r4, r0
 800be82:	4607      	mov	r7, r0
 800be84:	d802      	bhi.n	800be8c <_realloc_r+0x34>
 800be86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be8a:	d812      	bhi.n	800beb2 <_realloc_r+0x5a>
 800be8c:	4621      	mov	r1, r4
 800be8e:	4640      	mov	r0, r8
 800be90:	f7fe ffb6 	bl	800ae00 <_malloc_r>
 800be94:	4605      	mov	r5, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d0ed      	beq.n	800be76 <_realloc_r+0x1e>
 800be9a:	42bc      	cmp	r4, r7
 800be9c:	4622      	mov	r2, r4
 800be9e:	4631      	mov	r1, r6
 800bea0:	bf28      	it	cs
 800bea2:	463a      	movcs	r2, r7
 800bea4:	f7fe fa5a 	bl	800a35c <memcpy>
 800bea8:	4631      	mov	r1, r6
 800beaa:	4640      	mov	r0, r8
 800beac:	f7fe ff3c 	bl	800ad28 <_free_r>
 800beb0:	e7e1      	b.n	800be76 <_realloc_r+0x1e>
 800beb2:	4635      	mov	r5, r6
 800beb4:	e7df      	b.n	800be76 <_realloc_r+0x1e>

0800beb6 <abort>:
 800beb6:	b508      	push	{r3, lr}
 800beb8:	2006      	movs	r0, #6
 800beba:	f000 f833 	bl	800bf24 <raise>
 800bebe:	2001      	movs	r0, #1
 800bec0:	f7f6 fc3c 	bl	800273c <_exit>

0800bec4 <_malloc_usable_size_r>:
 800bec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec8:	1f18      	subs	r0, r3, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	bfbc      	itt	lt
 800bece:	580b      	ldrlt	r3, [r1, r0]
 800bed0:	18c0      	addlt	r0, r0, r3
 800bed2:	4770      	bx	lr

0800bed4 <_raise_r>:
 800bed4:	291f      	cmp	r1, #31
 800bed6:	b538      	push	{r3, r4, r5, lr}
 800bed8:	4604      	mov	r4, r0
 800beda:	460d      	mov	r5, r1
 800bedc:	d904      	bls.n	800bee8 <_raise_r+0x14>
 800bede:	2316      	movs	r3, #22
 800bee0:	6003      	str	r3, [r0, #0]
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800beea:	b112      	cbz	r2, 800bef2 <_raise_r+0x1e>
 800beec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef0:	b94b      	cbnz	r3, 800bf06 <_raise_r+0x32>
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f830 	bl	800bf58 <_getpid_r>
 800bef8:	462a      	mov	r2, r5
 800befa:	4601      	mov	r1, r0
 800befc:	4620      	mov	r0, r4
 800befe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf02:	f000 b817 	b.w	800bf34 <_kill_r>
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d00a      	beq.n	800bf20 <_raise_r+0x4c>
 800bf0a:	1c59      	adds	r1, r3, #1
 800bf0c:	d103      	bne.n	800bf16 <_raise_r+0x42>
 800bf0e:	2316      	movs	r3, #22
 800bf10:	6003      	str	r3, [r0, #0]
 800bf12:	2001      	movs	r0, #1
 800bf14:	e7e7      	b.n	800bee6 <_raise_r+0x12>
 800bf16:	2400      	movs	r4, #0
 800bf18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	4798      	blx	r3
 800bf20:	2000      	movs	r0, #0
 800bf22:	e7e0      	b.n	800bee6 <_raise_r+0x12>

0800bf24 <raise>:
 800bf24:	4b02      	ldr	r3, [pc, #8]	; (800bf30 <raise+0xc>)
 800bf26:	4601      	mov	r1, r0
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	f7ff bfd3 	b.w	800bed4 <_raise_r>
 800bf2e:	bf00      	nop
 800bf30:	2000003c 	.word	0x2000003c

0800bf34 <_kill_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d07      	ldr	r5, [pc, #28]	; (800bf54 <_kill_r+0x20>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	4611      	mov	r1, r2
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	f7f6 fbf3 	bl	800272c <_kill>
 800bf46:	1c43      	adds	r3, r0, #1
 800bf48:	d102      	bne.n	800bf50 <_kill_r+0x1c>
 800bf4a:	682b      	ldr	r3, [r5, #0]
 800bf4c:	b103      	cbz	r3, 800bf50 <_kill_r+0x1c>
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	bd38      	pop	{r3, r4, r5, pc}
 800bf52:	bf00      	nop
 800bf54:	2000091c 	.word	0x2000091c

0800bf58 <_getpid_r>:
 800bf58:	f7f6 bbe6 	b.w	8002728 <_getpid>

0800bf5c <_init>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr

0800bf68 <_fini>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	bf00      	nop
 800bf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6e:	bc08      	pop	{r3}
 800bf70:	469e      	mov	lr, r3
 800bf72:	4770      	bx	lr
