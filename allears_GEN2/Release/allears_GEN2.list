
allears_GEN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  0800b188  0800b188  0001b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb7c  0800bb7c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb7c  0800bb7c  0001bb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb84  0800bb84  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb84  0800bb84  0001bb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb88  0800bb88  0001bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800bb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000210  0800bd9c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200008a4  0800bd9c  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249b1  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054e0  00000000  00000000  00044bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000136dd  00000000  00000000  0004a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0005d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e30  00000000  00000000  0005eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad1b  00000000  00000000  00060918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007629  00000000  00000000  0007b633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00082c5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f7c  00000000  00000000  00082cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b16c 	.word	0x0800b16c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800b16c 	.word	0x0800b16c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Echo_Btn_isHandled>:
echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_isHandled(void)
{
	return ECHO_BTN_STATE_HANDLED;
}
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <Echo_Btn_isHandled+0x8>)
 8000ffa:	7898      	ldrb	r0, [r3, #2]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000022c 	.word	0x2000022c

08001004 <Echo_Btn_Handled_clear>:

void Echo_Btn_Handled_clear(void)
{
	ECHO_BTN_STATE_HANDLED = false;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <Echo_Btn_Handled_clear+0x8>)
 8001006:	2200      	movs	r2, #0
 8001008:	709a      	strb	r2, [r3, #2]
}
 800100a:	4770      	bx	lr
 800100c:	2000022c 	.word	0x2000022c

08001010 <Echo_Btn_handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_handle(void)
{
 8001010:	b508      	push	{r3, lr}
	char res_msg[10] =
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 8001012:	2110      	movs	r1, #16
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f002 fcf2 	bl	8003a00 <HAL_GPIO_ReadPin>

	if (pressed != ECHO_BTN_STATE_PRESSED)
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <Echo_Btn_handle+0x44>)
	pressed = ECHO_BTN_IS_PRESSED();
 800101e:	4601      	mov	r1, r0
	if (pressed != ECHO_BTN_STATE_PRESSED)
 8001020:	781a      	ldrb	r2, [r3, #0]
	pressed = ECHO_BTN_IS_PRESSED();
 8001022:	fab0 f080 	clz	r0, r0
 8001026:	0940      	lsrs	r0, r0, #5
	if (pressed != ECHO_BTN_STATE_PRESSED)
 8001028:	4282      	cmp	r2, r0
 800102a:	d005      	beq.n	8001038 <Echo_Btn_handle+0x28>
	{
		ECHO_BTN_STATE_PRESSED = pressed;
 800102c:	7018      	strb	r0, [r3, #0]
#ifdef DEBUG
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
		ECHO_SHELL_PRINT(("%s\n",res_msg));
#endif

		if (ECHO_BTN_STATE_PRESSED == false)
 800102e:	b911      	cbnz	r1, 8001036 <Echo_Btn_handle+0x26>
			//aulLed_enable();
		}
		else
		{
			/* BUTTON PRESSED, Send Signal >> echo_state.c */
			ECHO_BTN_STATE_HANDLED = true;
 8001030:	2201      	movs	r2, #1
 8001032:	709a      	strb	r2, [r3, #2]
			ECHO_BTN_STATE_HELD_TICK = 0;
 8001034:	6059      	str	r1, [r3, #4]
		else
		{
			/* Ignored */
		}
	}
}
 8001036:	bd08      	pop	{r3, pc}
	else if (ECHO_BTN_STATE_PRESSED == true)
 8001038:	2a00      	cmp	r2, #0
 800103a:	d0fc      	beq.n	8001036 <Echo_Btn_handle+0x26>
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8001042:	d103      	bne.n	800104c <Echo_Btn_handle+0x3c>
			ECHO_BTN_STATE_HELD_TICK++;
 8001044:	f240 32e9 	movw	r2, #1001	; 0x3e9
			ECHO_BTN_STATE_HELD_TICK++;
 8001048:	605a      	str	r2, [r3, #4]
}
 800104a:	e7f4      	b.n	8001036 <Echo_Btn_handle+0x26>
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 800104c:	d2f3      	bcs.n	8001036 <Echo_Btn_handle+0x26>
			ECHO_BTN_STATE_HELD_TICK++;
 800104e:	3201      	adds	r2, #1
 8001050:	e7fa      	b.n	8001048 <Echo_Btn_handle+0x38>
 8001052:	bf00      	nop
 8001054:	2000022c 	.word	0x2000022c

08001058 <Echo_Flash_Write>:
{
	return FLASH_BANK_1;
}

HAL_StatusTypeDef Echo_Flash_Write()
{
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800105a:	f002 fab5 	bl	80035c8 <HAL_FLASH_Unlock>
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <Echo_Flash_Write+0xb8>)
 8001060:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001068:	b291      	uxth	r1, r2
 800106a:	4299      	cmp	r1, r3
 800106c:	d035      	beq.n	80010da <Echo_Flash_Write+0x82>
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Echo_Flash_Write+0xbc>)
 8001070:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <Echo_Flash_Write+0xc0>)
 8001076:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800107a:	4293      	cmp	r3, r2
 800107c:	d82d      	bhi.n	80010da <Echo_Flash_Write+0x82>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	0adb      	lsrs	r3, r3, #11

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <Echo_Flash_Write+0xc4>)
 8001084:	6013      	str	r3, [r2, #0]
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <Echo_Flash_Write+0xb8>)
 8001088:	f8d2 15e0 	ldr.w	r1, [r2, #1504]	; 0x5e0
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	b288      	uxth	r0, r1
 8001092:	4290      	cmp	r0, r2
 8001094:	d023      	beq.n	80010de <Echo_Flash_Write+0x86>
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <Echo_Flash_Write+0xbc>)
 8001098:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 800109c:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <Echo_Flash_Write+0xc8>)
 80010a2:	4291      	cmp	r1, r2
 80010a4:	d81b      	bhi.n	80010de <Echo_Flash_Write+0x86>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	0ad2      	lsrs	r2, r2, #11
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80010aa:	f1c3 0101 	rsb	r1, r3, #1
 80010ae:	440a      	add	r2, r1
 80010b0:	491c      	ldr	r1, [pc, #112]	; (8001124 <Echo_Flash_Write+0xcc>)
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <Echo_Flash_Write+0xd0>)
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80010b4:	600a      	str	r2, [r1, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80010b6:	2101      	movs	r1, #1
 80010b8:	6001      	str	r1, [r0, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <Echo_Flash_Write+0xd4>)
 80010bc:	2400      	movs	r4, #0
	EraseInitStruct.Banks = BankNumber;
 80010be:	e9c0 4100 	strd	r4, r1, [r0]
	EraseInitStruct.Page = FirstPage;
	EraseInitStruct.NbPages = NbOfPages;

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80010c2:	491b      	ldr	r1, [pc, #108]	; (8001130 <Echo_Flash_Write+0xd8>)
	EraseInitStruct.NbPages = NbOfPages;
 80010c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80010c8:	f002 fb72 	bl	80037b0 <HAL_FLASHEx_Erase>
 80010cc:	4604      	mov	r4, r0
 80010ce:	b140      	cbz	r0, 80010e2 <Echo_Flash_Write+0x8a>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 80010d0:	f002 fa96 	bl	8003600 <HAL_FLASH_GetError>
 80010d4:	b2c4      	uxtb	r4, r0
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
	return HAL_OK;
}
 80010d6:	4620      	mov	r0, r4
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80010da:	233c      	movs	r3, #60	; 0x3c
 80010dc:	e7d1      	b.n	8001082 <Echo_Flash_Write+0x2a>
 80010de:	223f      	movs	r2, #63	; 0x3f
 80010e0:	e7e3      	b.n	80010aa <Echo_Flash_Write+0x52>
	Address = FLASH_USER_START_ADDR;
 80010e2:	4d14      	ldr	r5, [pc, #80]	; (8001134 <Echo_Flash_Write+0xdc>)
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <Echo_Flash_Write+0xc0>)
	while (Address < FLASH_USER_END_ADDR)
 80010e6:	4e0e      	ldr	r6, [pc, #56]	; (8001120 <Echo_Flash_Write+0xc8>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 80010e8:	4f13      	ldr	r7, [pc, #76]	; (8001138 <Echo_Flash_Write+0xe0>)
	Address = FLASH_USER_START_ADDR;
 80010ea:	602b      	str	r3, [r5, #0]
	while (Address < FLASH_USER_END_ADDR)
 80010ec:	6829      	ldr	r1, [r5, #0]
 80010ee:	42b1      	cmp	r1, r6
 80010f0:	d302      	bcc.n	80010f8 <Echo_Flash_Write+0xa0>
	HAL_FLASH_Lock();
 80010f2:	f002 fa7b 	bl	80035ec <HAL_FLASH_Lock>
	return HAL_OK;
 80010f6:	e7ee      	b.n	80010d6 <Echo_Flash_Write+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2000      	movs	r0, #0
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f002 fab0 	bl	8003664 <HAL_FLASH_Program>
 8001104:	2800      	cmp	r0, #0
 8001106:	d1e3      	bne.n	80010d0 <Echo_Flash_Write+0x78>
			Address = Address + 4;
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	e7ed      	b.n	80010ec <Echo_Flash_Write+0x94>
 8001110:	1fff7000 	.word	0x1fff7000
 8001114:	03fffc00 	.word	0x03fffc00
 8001118:	0801e000 	.word	0x0801e000
 800111c:	2000024c 	.word	0x2000024c
 8001120:	0801ffff 	.word	0x0801ffff
 8001124:	20000250 	.word	0x20000250
 8001128:	20000238 	.word	0x20000238
 800112c:	2000023c 	.word	0x2000023c
 8001130:	20000254 	.word	0x20000254
 8001134:	20000234 	.word	0x20000234
 8001138:	20000008 	.word	0x20000008

0800113c <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <Echo_Flash_Read+0x20>)
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <Echo_Flash_Read+0x24>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6018      	str	r0, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
			&& pwm_param.pulse_width == 0)
 8001148:	8818      	ldrh	r0, [r3, #0]
 800114a:	889a      	ldrh	r2, [r3, #4]
 800114c:	885b      	ldrh	r3, [r3, #2]
 800114e:	4310      	orrs	r0, r2
 8001150:	4318      	orrs	r0, r3
 8001152:	b280      	uxth	r0, r0
	}
	else
	{
		return HAL_OK;
	}
}
 8001154:	fab0 f080 	clz	r0, r0
 8001158:	0940      	lsrs	r0, r0, #5
 800115a:	4770      	bx	lr
 800115c:	0801e000 	.word	0x0801e000
 8001160:	20000394 	.word	0x20000394

08001164 <Echo_LED_Green_Off>:
/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <Echo_LED_Green_Off+0xc>)
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	f002 bc4f 	b.w	8003a0c <HAL_GPIO_WritePin>
 800116e:	bf00      	nop
 8001170:	48000400 	.word	0x48000400

08001174 <Echo_LED_CTRL>:
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
	if (colors == ECHO_LED_COLOR_NONE)
 8001174:	b908      	cbnz	r0, 800117a <Echo_LED_CTRL+0x6>
	{
		Echo_LED_Off_All();
 8001176:	f7ff bff5 	b.w	8001164 <Echo_LED_Green_Off>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 800117a:	0783      	lsls	r3, r0, #30
 800117c:	d504      	bpl.n	8001188 <Echo_LED_CTRL+0x14>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <Echo_LED_CTRL+0x18>)
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	f002 bc42 	b.w	8003a0c <HAL_GPIO_WritePin>
			Echo_LED_Green_On();
		else
			Echo_LED_Green_Off();
 8001188:	f7ff bfec 	b.w	8001164 <Echo_LED_Green_Off>
 800118c:	48000400 	.word	0x48000400

08001190 <Echo_LED_Init>:
#endif
	}
}

void Echo_LED_Init(void)
{
 8001190:	b508      	push	{r3, lr}
	Echo_LED_Off_All();
 8001192:	f7ff ffe7 	bl	8001164 <Echo_LED_Green_Off>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <Echo_LED_Init+0x10>)
 8001198:	2200      	movs	r2, #0
 800119a:	735a      	strb	r2, [r3, #13]
}
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	20000258 	.word	0x20000258

080011a4 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80011a6:	4c04      	ldr	r4, [pc, #16]	; (80011b8 <Echo_LED_Enable+0x14>)
 80011a8:	2500      	movs	r5, #0
 80011aa:	7365      	strb	r5, [r4, #13]
	ECHO_LED_ON = false;
 80011ac:	7025      	strb	r5, [r4, #0]
	Echo_LED_Off_All();
 80011ae:	f7ff ffd9 	bl	8001164 <Echo_LED_Green_Off>
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 80011b2:	60a5      	str	r5, [r4, #8]
 80011b4:	7325      	strb	r5, [r4, #12]
}
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	20000258 	.word	0x20000258

080011bc <Echo_LED_StateSet>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_LED_StateSet(echo_led_sate_t led_state)
{
 80011bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
#endif
	Echo_LED_Enable();

	if (ECHO_LED_IND_DISABLED() == true)
 80011be:	4d13      	ldr	r5, [pc, #76]	; (800120c <Echo_LED_StateSet+0x50>)
{
 80011c0:	4604      	mov	r4, r0
	Echo_LED_Enable();
 80011c2:	f7ff ffef 	bl	80011a4 <Echo_LED_Enable>
	if (ECHO_LED_IND_DISABLED() == true)
 80011c6:	7b2e      	ldrb	r6, [r5, #12]
 80011c8:	b9b6      	cbnz	r6, 80011f8 <Echo_LED_StateSet+0x3c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
		led_state = ECHO_LED_STATE_NONE;
 80011ca:	2c03      	cmp	r4, #3

	if (led_state == ECHO_LED_CUR_STATE)
 80011cc:	7b6b      	ldrb	r3, [r5, #13]
		led_state = ECHO_LED_STATE_NONE;
 80011ce:	bf28      	it	cs
 80011d0:	2400      	movcs	r4, #0
	if (led_state == ECHO_LED_CUR_STATE)
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	d010      	beq.n	80011f8 <Echo_LED_StateSet+0x3c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <Echo_LED_StateSet+0x54>)
 80011d8:	2306      	movs	r3, #6
 80011da:	4363      	muls	r3, r4
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	5cd0      	ldrb	r0, [r2, r3]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 80011e0:	884f      	ldrh	r7, [r1, #2]
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 80011e2:	9001      	str	r0, [sp, #4]
		Echo_LED_Off_All();
 80011e4:	f7ff ffbe 	bl	8001164 <Echo_LED_Green_Off>
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	429f      	cmp	r7, r3
 80011ee:	9801      	ldr	r0, [sp, #4]
 80011f0:	d104      	bne.n	80011fc <Echo_LED_StateSet+0x40>
	{
		ECHO_LED_ON = false;
 80011f2:	702e      	strb	r6, [r5, #0]
		ECHO_LED_TIME_TICK = 0;
 80011f4:	606e      	str	r6, [r5, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 80011f6:	736c      	strb	r4, [r5, #13]

}
 80011f8:	b003      	add	sp, #12
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 80011fc:	f7ff ffba 	bl	8001174 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001200:	2301      	movs	r3, #1
 8001202:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 8001204:	f001 f972 	bl	80024ec <HAL_GetTick>
 8001208:	6068      	str	r0, [r5, #4]
 800120a:	e7f4      	b.n	80011f6 <Echo_LED_StateSet+0x3a>
 800120c:	20000258 	.word	0x20000258
 8001210:	0800b194 	.word	0x0800b194

08001214 <Echo_LED_Handle>:
		Echo_LED_StateSet(ECHO_LED_STATE_NONE);
		break;
	}
}
void Echo_LED_Handle(void)
{
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 8001216:	4c25      	ldr	r4, [pc, #148]	; (80012ac <Echo_LED_Handle+0x98>)
 8001218:	7b63      	ldrb	r3, [r4, #13]
 800121a:	b1a3      	cbz	r3, 8001246 <Echo_LED_Handle+0x32>
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 800121c:	2b02      	cmp	r3, #2
 800121e:	d906      	bls.n	800122e <Echo_LED_Handle+0x1a>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8001224:	7023      	strb	r3, [r4, #0]
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
		ECHO_LED_ON = false;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}
}
 8001226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Echo_LED_Off_All();
 800122a:	f7ff bf9b 	b.w	8001164 <Echo_LED_Green_Off>
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 800122e:	68a2      	ldr	r2, [r4, #8]
 8001230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001234:	428a      	cmp	r2, r1
 8001236:	d107      	bne.n	8001248 <Echo_LED_Handle+0x34>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 800123c:	7023      	strb	r3, [r4, #0]
	Echo_LED_Off_All();
 800123e:	f7ff ff91 	bl	8001164 <Echo_LED_Green_Off>
		ECHO_LED_TIMED_OUT = true;
 8001242:	2301      	movs	r3, #1
 8001244:	7323      	strb	r3, [r4, #12]
}
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 8001248:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800124c:	428a      	cmp	r2, r1
 800124e:	d8fa      	bhi.n	8001246 <Echo_LED_Handle+0x32>
		ECHO_LED_TIMEOUT_TICK++;
 8001250:	3201      	adds	r2, #1
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001252:	4917      	ldr	r1, [pc, #92]	; (80012b0 <Echo_LED_Handle+0x9c>)
		ECHO_LED_TIMEOUT_TICK++;
 8001254:	60a2      	str	r2, [r4, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001256:	2206      	movs	r2, #6
 8001258:	4353      	muls	r3, r2
 800125a:	18c8      	adds	r0, r1, r3
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 800125c:	f64f 76fd 	movw	r6, #65533	; 0xfffd
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001260:	8845      	ldrh	r5, [r0, #2]
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 8001262:	1e6a      	subs	r2, r5, #1
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 8001264:	b292      	uxth	r2, r2
 8001266:	42b2      	cmp	r2, r6
 8001268:	d8ed      	bhi.n	8001246 <Echo_LED_Handle+0x32>
	if (ECHO_LED_ON == false
 800126a:	7822      	ldrb	r2, [r4, #0]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 800126c:	8886      	ldrh	r6, [r0, #4]
	if (ECHO_LED_ON == false
 800126e:	b14a      	cbz	r2, 8001284 <Echo_LED_Handle+0x70>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 8001270:	f001 f93c 	bl	80024ec <HAL_GetTick>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	1ac0      	subs	r0, r0, r3
 8001278:	42b0      	cmp	r0, r6
 800127a:	d3e4      	bcc.n	8001246 <Echo_LED_Handle+0x32>
		Echo_LED_Off_All();
 800127c:	f7ff ff72 	bl	8001164 <Echo_LED_Green_Off>
		ECHO_LED_ON = false;
 8001280:	2300      	movs	r3, #0
 8001282:	e00a      	b.n	800129a <Echo_LED_Handle+0x86>
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 8001284:	5ccf      	ldrb	r7, [r1, r3]
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 8001286:	f001 f931 	bl	80024ec <HAL_GetTick>
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	1ac0      	subs	r0, r0, r3
 800128e:	42a8      	cmp	r0, r5
 8001290:	d308      	bcc.n	80012a4 <Echo_LED_Handle+0x90>
		Echo_LED_CTRL(led_ind.led_colors);
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ff6e 	bl	8001174 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001298:	2301      	movs	r3, #1
		ECHO_LED_ON = false;
 800129a:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800129c:	f001 f926 	bl	80024ec <HAL_GetTick>
 80012a0:	6060      	str	r0, [r4, #4]
 80012a2:	e7d0      	b.n	8001246 <Echo_LED_Handle+0x32>
	else if (ECHO_LED_ON == true
 80012a4:	7823      	ldrb	r3, [r4, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0cd      	beq.n	8001246 <Echo_LED_Handle+0x32>
 80012aa:	e7e1      	b.n	8001270 <Echo_LED_Handle+0x5c>
 80012ac:	20000258 	.word	0x20000258
 80012b0:	0800b194 	.word	0x0800b194

080012b4 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012b4:	b507      	push	{r0, r1, r2, lr}
	if (ch == '\n')
 80012b6:	280a      	cmp	r0, #10
{
 80012b8:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 80012ba:	d106      	bne.n	80012ca <__io_putchar+0x16>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__io_putchar+0x2c>)
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <__io_putchar+0x30>)
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	2201      	movs	r2, #1
 80012c6:	f004 fc3b 	bl	8005b40 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	a901      	add	r1, sp, #4
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <__io_putchar+0x30>)
 80012d4:	f004 fc34 	bl	8005b40 <HAL_UART_Transmit>
	return ch;
}
 80012d8:	9801      	ldr	r0, [sp, #4]
 80012da:	b003      	add	sp, #12
 80012dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e0:	0800b518 	.word	0x0800b518
 80012e4:	20000804 	.word	0x20000804

080012e8 <Echo_ShellPrint_Char>:

	ECHO_SHELL_UART->TDR = st_rcv_byte;
}

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
 80012e8:	b538      	push	{r3, r4, r5, lr}
	uint16_t i;

	if (len == 0)
 80012ea:	b171      	cbz	r1, 800130a <Echo_ShellPrint_Char+0x22>
 80012ec:	3901      	subs	r1, #1
 80012ee:	1e45      	subs	r5, r0, #1
 80012f0:	fa10 f481 	uxtah	r4, r0, r1
		return;

	for (i = 0; i < len; i++)
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 80012f4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80012f8:	f005 fc2c 	bl	8006b54 <putchar>
	for (i = 0; i < len; i++)
 80012fc:	42a5      	cmp	r5, r4
 80012fe:	d1f9      	bne.n	80012f4 <Echo_ShellPrint_Char+0xc>
	}

	ECHO_SHELL_PRINT(("\n"));
}
 8001300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ECHO_SHELL_PRINT(("\n"));
 8001304:	200a      	movs	r0, #10
 8001306:	f005 bc25 	b.w	8006b54 <putchar>
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}

0800130c <Echo_Print_Manual>:
/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <Echo_Print_Manual+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f005 bca4 	b.w	8006c5c <puts>
 8001314:	20000000 	.word	0x20000000

08001318 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001318:	b500      	push	{lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 800131c:	2100      	movs	r1, #0
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	a801      	add	r0, sp, #4
 8001322:	9100      	str	r1, [sp, #0]
 8001324:	f004 fd7c 	bl	8005e20 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <Echo_Print_Version+0x28>)
 800132a:	4906      	ldr	r1, [pc, #24]	; (8001344 <Echo_Print_Version+0x2c>)
 800132c:	4668      	mov	r0, sp
 800132e:	f005 fca3 	bl	8006c78 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 8001332:	4668      	mov	r0, sp
 8001334:	f005 fc92 	bl	8006c5c <puts>
}
 8001338:	b00b      	add	sp, #44	; 0x2c
 800133a:	f85d fb04 	ldr.w	pc, [sp], #4
 800133e:	bf00      	nop
 8001340:	0800b1a6 	.word	0x0800b1a6
 8001344:	0800b1b4 	.word	0x0800b1b4

08001348 <Echo_Shell_Input_Print>:

/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
 8001348:	b510      	push	{r4, lr}
	if (echo_uart2_rcv_byte != 0)
 800134a:	4c06      	ldr	r4, [pc, #24]	; (8001364 <Echo_Shell_Input_Print+0x1c>)
 800134c:	7823      	ldrb	r3, [r4, #0]
 800134e:	b13b      	cbz	r3, 8001360 <Echo_Shell_Input_Print+0x18>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 8001350:	230a      	movs	r3, #10
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <Echo_Shell_Input_Print+0x20>)
 8001354:	2201      	movs	r2, #1
 8001356:	4621      	mov	r1, r4
 8001358:	f004 fbf2 	bl	8005b40 <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	7023      	strb	r3, [r4, #0]
	}
}
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	200004a0 	.word	0x200004a0
 8001368:	20000804 	.word	0x20000804

0800136c <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 800136c:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 800136e:	4c05      	ldr	r4, [pc, #20]	; (8001384 <Echo_Shell_Init+0x18>)
 8001370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001374:	2100      	movs	r1, #0
 8001376:	1c60      	adds	r0, r4, #1
 8001378:	f004 fd52 	bl	8005e20 <memset>
	SHELL_MSG_RCV_POS = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	7023      	strb	r3, [r4, #0]
}
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	20000268 	.word	0x20000268

08001388 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	4e18      	ldr	r6, [pc, #96]	; (80013ec <Echo_AdminCMD_Check+0x64>)
 800138c:	4607      	mov	r7, r0
 800138e:	2500      	movs	r5, #0
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 8001390:	7932      	ldrb	r2, [r6, #4]
 8001392:	6831      	ldr	r1, [r6, #0]
 8001394:	4638      	mov	r0, r7
 8001396:	b2ec      	uxtb	r4, r5
 8001398:	f005 fd07 	bl	8006daa <strncmp>
 800139c:	b128      	cbz	r0, 80013aa <Echo_AdminCMD_Check+0x22>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 800139e:	3501      	adds	r5, #1
 80013a0:	2d06      	cmp	r5, #6
 80013a2:	f106 0608 	add.w	r6, r6, #8
 80013a6:	d1f3      	bne.n	8001390 <Echo_AdminCMD_Check+0x8>
		break;

	default:
		break;
	}
}
 80013a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (admin_cmd_cnt)
 80013aa:	1e63      	subs	r3, r4, #1
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d804      	bhi.n	80013ba <Echo_AdminCMD_Check+0x32>
 80013b0:	e8df f003 	tbb	[pc, r3]
 80013b4:	130f0b07 	.word	0x130f0b07
 80013b8:	17          	.byte	0x17
 80013b9:	00          	.byte	0x00
}
 80013ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_FSM_State_Start();
 80013be:	f000 b8c7 	b.w	8001550 <Echo_Set_FSM_State_Start>
}
 80013c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_FSM_State_Stop();
 80013c6:	f000 b8c9 	b.w	800155c <Echo_Set_FSM_State_Stop>
}
 80013ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Flash_Write();
 80013ce:	f7ff be43 	b.w	8001058 <Echo_Flash_Write>
}
 80013d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Factory_Reset();
 80013d6:	f000 baab 	b.w	8001930 <Echo_Factory_Reset>
}
 80013da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Manual();
 80013de:	f7ff bf95 	b.w	800130c <Echo_Print_Manual>
}
 80013e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Version();
 80013e6:	f7ff bf97 	b.w	8001318 <Echo_Print_Version>
 80013ea:	bf00      	nop
 80013ec:	0800b480 	.word	0x0800b480

080013f0 <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001470 <Echo_ParameterCMD_Check+0x80>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	2700      	movs	r7, #0
	uint8_t param_cmd_cnt = 0;

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 80013fe:	f898 2004 	ldrb.w	r2, [r8, #4]
 8001402:	f8d8 1000 	ldr.w	r1, [r8]
 8001406:	4620      	mov	r0, r4
 8001408:	b2fe      	uxtb	r6, r7
 800140a:	f005 fcce 	bl	8006daa <strncmp>
 800140e:	b130      	cbz	r0, 800141e <Echo_ParameterCMD_Check+0x2e>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 8001410:	3701      	adds	r7, #1
 8001412:	2f09      	cmp	r7, #9
 8001414:	f108 0808 	add.w	r8, r8, #8
 8001418:	d1f1      	bne.n	80013fe <Echo_ParameterCMD_Check+0xe>
		break;

	default:
		break;
	}
}
 800141a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (param_cmd_cnt)
 800141e:	1e73      	subs	r3, r6, #1
 8001420:	2b07      	cmp	r3, #7
 8001422:	d805      	bhi.n	8001430 <Echo_ParameterCMD_Check+0x40>
 8001424:	e8df f003 	tbb	[pc, r3]
 8001428:	1e18100a 	.word	0x1e18100a
 800142c:	1e1e1e1e 	.word	0x1e1e1e1e
		Echo_Set_DT(data, len);
 8001430:	4629      	mov	r1, r5
 8001432:	4620      	mov	r0, r4
}
 8001434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_DT(data, len);
 8001438:	f000 ba34 	b.w	80018a4 <Echo_Set_DT>
		Echo_Set_PW(data, len);
 800143c:	4629      	mov	r1, r5
 800143e:	4620      	mov	r0, r4
}
 8001440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_PW(data, len);
 8001444:	f000 ba3e 	b.w	80018c4 <Echo_Set_PW>
		Echo_Set_FSM_State_Stop();
 8001448:	f000 f888 	bl	800155c <Echo_Set_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 800144c:	4629      	mov	r1, r5
 800144e:	4620      	mov	r0, r4
}
 8001450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_HZ(data, len);
 8001454:	f000 ba46 	b.w	80018e4 <Echo_Set_HZ>
		Echo_Set_V_PW(data, len);
 8001458:	4629      	mov	r1, r5
 800145a:	4620      	mov	r0, r4
}
 800145c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_V_PW(data, len);
 8001460:	f000 b9e0 	b.w	8001824 <Echo_Set_V_PW>
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 8001464:	1f30      	subs	r0, r6, #4
 8001466:	b2c0      	uxtb	r0, r0
}
 8001468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 800146c:	f000 b98e 	b.w	800178c <Echo_Get_Res_Data>
 8001470:	0800b4b0 	.word	0x0800b4b0

08001474 <Echo_Shell_CMD_Handle>:
{
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 8001476:	4e2d      	ldr	r6, [pc, #180]	; (800152c <Echo_Shell_CMD_Handle+0xb8>)
 8001478:	4c2d      	ldr	r4, [pc, #180]	; (8001530 <Echo_Shell_CMD_Handle+0xbc>)
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 800147a:	4f2e      	ldr	r7, [pc, #184]	; (8001534 <Echo_Shell_CMD_Handle+0xc0>)
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 800147c:	482b      	ldr	r0, [pc, #172]	; (800152c <Echo_Shell_CMD_Handle+0xb8>)
 800147e:	f000 fb33 	bl	8001ae8 <Echo_Uart2_Get_RCV_Q>
 8001482:	bb20      	cbnz	r0, 80014ce <Echo_Shell_CMD_Handle+0x5a>
	if (SHELL_MSG_RCV_POS > 0)
 8001484:	7823      	ldrb	r3, [r4, #0]
 8001486:	b183      	cbz	r3, 80014aa <Echo_Shell_CMD_Handle+0x36>
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 8001488:	f001 f830 	bl	80024ec <HAL_GetTick>
 800148c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001490:	1ac0      	subs	r0, r0, r3
 8001492:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001496:	d908      	bls.n	80014aa <Echo_Shell_CMD_Handle+0x36>
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 8001498:	4827      	ldr	r0, [pc, #156]	; (8001538 <Echo_Shell_CMD_Handle+0xc4>)
 800149a:	f005 fbdf 	bl	8006c5c <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 800149e:	7821      	ldrb	r1, [r4, #0]
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 80014a2:	f7ff ff21 	bl	80012e8 <Echo_ShellPrint_Char>
			Echo_Shell_Init();
 80014a6:	f7ff ff61 	bl	800136c <Echo_Shell_Init>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 80014aa:	f000 f84b 	bl	8001544 <Echo_Get_FSM_State>
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d10c      	bne.n	80014cc <Echo_Shell_CMD_Handle+0x58>
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 80014b2:	f001 f81b 	bl	80024ec <HAL_GetTick>
 80014b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80014ba:	1ac0      	subs	r0, r0, r3
 80014bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d903      	bls.n	80014cc <Echo_Shell_CMD_Handle+0x58>
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 80014c4:	f001 f812 	bl	80024ec <HAL_GetTick>
 80014c8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
}
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80014ce:	f001 f80d 	bl	80024ec <HAL_GetTick>
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 80014d2:	7833      	ldrb	r3, [r6, #0]
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80014d4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 80014d8:	2b23      	cmp	r3, #35	; 0x23
 80014da:	d002      	beq.n	80014e2 <Echo_Shell_CMD_Handle+0x6e>
 80014dc:	7822      	ldrb	r2, [r4, #0]
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d0cc      	beq.n	800147c <Echo_Shell_CMD_Handle+0x8>
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 80014e2:	7825      	ldrb	r5, [r4, #0]
 80014e4:	1962      	adds	r2, r4, r5
			SHELL_MSG_RCV_POS++;
 80014e6:	3501      	adds	r5, #1
 80014e8:	b2ed      	uxtb	r5, r5
			if (st_byte == 13)
 80014ea:	2b0d      	cmp	r3, #13
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 80014ec:	7053      	strb	r3, [r2, #1]
			SHELL_MSG_RCV_POS++;
 80014ee:	7025      	strb	r5, [r4, #0]
			if (st_byte == 13)
 80014f0:	d1c4      	bne.n	800147c <Echo_Shell_CMD_Handle+0x8>
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	4639      	mov	r1, r7
 80014f8:	f005 fc57 	bl	8006daa <strncmp>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 80014fc:	b2ad      	uxth	r5, r5
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80014fe:	b128      	cbz	r0, 800150c <Echo_Shell_CMD_Handle+0x98>
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001500:	490f      	ldr	r1, [pc, #60]	; (8001540 <Echo_Shell_CMD_Handle+0xcc>)
 8001502:	480e      	ldr	r0, [pc, #56]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 8001504:	2204      	movs	r2, #4
 8001506:	f005 fc50 	bl	8006daa <strncmp>
 800150a:	b950      	cbnz	r0, 8001522 <Echo_Shell_CMD_Handle+0xae>
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 800150e:	4629      	mov	r1, r5
 8001510:	f7ff ff6e 	bl	80013f0 <Echo_ParameterCMD_Check>
				Echo_Shell_Init();
 8001514:	f7ff ff2a 	bl	800136c <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001518:	f000 ffe8 	bl	80024ec <HAL_GetTick>
 800151c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8001520:	e7ac      	b.n	800147c <Echo_Shell_CMD_Handle+0x8>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff ff2f 	bl	8001388 <Echo_AdminCMD_Check>
 800152a:	e7f3      	b.n	8001514 <Echo_Shell_CMD_Handle+0xa0>
 800152c:	20000374 	.word	0x20000374
 8001530:	20000268 	.word	0x20000268
 8001534:	0800b1ca 	.word	0x0800b1ca
 8001538:	0800b1d4 	.word	0x0800b1d4
 800153c:	20000269 	.word	0x20000269
 8001540:	0800b1cf 	.word	0x0800b1cf

08001544 <Echo_Get_FSM_State>:
}

echo_state_t Echo_Get_FSM_State(void)
{
	return ECHO_CUR_STATE;
}
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <Echo_Get_FSM_State+0x8>)
 8001546:	7818      	ldrb	r0, [r3, #0]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000375 	.word	0x20000375

08001550 <Echo_Set_FSM_State_Start>:

void Echo_Set_FSM_State_Start()
{
	cur_state = ECHO_STATE_RUN;
 8001550:	4b01      	ldr	r3, [pc, #4]	; (8001558 <Echo_Set_FSM_State_Start+0x8>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	4770      	bx	lr
 8001558:	20000004 	.word	0x20000004

0800155c <Echo_Set_FSM_State_Stop>:

void Echo_Set_FSM_State_Stop()
{
	cur_state = ECHO_STATE_IDLE;
 800155c:	4b01      	ldr	r3, [pc, #4]	; (8001564 <Echo_Set_FSM_State_Stop+0x8>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	4770      	bx	lr
 8001564:	20000004 	.word	0x20000004

08001568 <Echo_Set_FSM_State>:
	 If low battery, cover change event for LED is ingnored.
	 */
}

void Echo_Set_FSM_State(echo_state_t state)
{
 8001568:	b538      	push	{r3, r4, r5, lr}
	if (ECHO_CUR_STATE == state || state >= echo_state_max)
 800156a:	4d15      	ldr	r5, [pc, #84]	; (80015c0 <Echo_Set_FSM_State+0x58>)
 800156c:	782b      	ldrb	r3, [r5, #0]
 800156e:	4283      	cmp	r3, r0
{
 8001570:	4604      	mov	r4, r0
	if (ECHO_CUR_STATE == state || state >= echo_state_max)
 8001572:	d00b      	beq.n	800158c <Echo_Set_FSM_State+0x24>
 8001574:	2803      	cmp	r0, #3
 8001576:	d809      	bhi.n	800158c <Echo_Set_FSM_State+0x24>
		return;

	switch (state)
 8001578:	2802      	cmp	r0, #2
 800157a:	d011      	beq.n	80015a0 <Echo_Set_FSM_State+0x38>
 800157c:	2803      	cmp	r0, #3
 800157e:	d018      	beq.n	80015b2 <Echo_Set_FSM_State+0x4a>
 8001580:	2801      	cmp	r0, #1
 8001582:	d004      	beq.n	800158e <Echo_Set_FSM_State+0x26>
	{
	case ECHO_STATE_INIT:
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <Echo_Set_FSM_State+0x5c>)
 8001586:	f005 fb69 	bl	8006c5c <puts>
		/* Cannot be here */
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
		//Echo_LedStateSet(ECHO_LED_NONE);
		break;
	}
	ECHO_CUR_STATE = state;
 800158a:	702c      	strb	r4, [r5, #0]
}
 800158c:	bd38      	pop	{r3, r4, r5, pc}
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <Echo_Set_FSM_State+0x60>)
 8001590:	f005 fb64 	bl	8006c5c <puts>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fe11 	bl	80011bc <Echo_LED_StateSet>
		Echo_Stim_Stop();
 800159a:	f000 f9e9 	bl	8001970 <Echo_Stim_Stop>
		break;
 800159e:	e7f4      	b.n	800158a <Echo_Set_FSM_State+0x22>
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <Echo_Set_FSM_State+0x64>)
 80015a2:	f005 fb5b 	bl	8006c5c <puts>
		Echo_LED_StateSet(ECHO_LED_RUN);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fe08 	bl	80011bc <Echo_LED_StateSet>
		Echo_Stim_Start();
 80015ac:	f000 fa06 	bl	80019bc <Echo_Stim_Start>
		break;
 80015b0:	e7eb      	b.n	800158a <Echo_Set_FSM_State+0x22>
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <Echo_Set_FSM_State+0x68>)
 80015b4:	f005 fb52 	bl	8006c5c <puts>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fdff 	bl	80011bc <Echo_LED_StateSet>
		break;
 80015be:	e7e4      	b.n	800158a <Echo_Set_FSM_State+0x22>
 80015c0:	20000375 	.word	0x20000375
 80015c4:	0800b4f8 	.word	0x0800b4f8
 80015c8:	0800b509 	.word	0x0800b509
 80015cc:	0800b51a 	.word	0x0800b51a
 80015d0:	0800b52a 	.word	0x0800b52a

080015d4 <Echo_FSM_State_Init>:
	ECHO_CUR_STATE = echo_state_max;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <Echo_FSM_State_Init+0xc>)
 80015d6:	2204      	movs	r2, #4
	Echo_Set_FSM_State(ECHO_STATE_INIT);
 80015d8:	2000      	movs	r0, #0
	ECHO_CUR_STATE = echo_state_max;
 80015da:	701a      	strb	r2, [r3, #0]
	Echo_Set_FSM_State(ECHO_STATE_INIT);
 80015dc:	f7ff bfc4 	b.w	8001568 <Echo_Set_FSM_State>
 80015e0:	20000375 	.word	0x20000375

080015e4 <Echo_FSM_State_Handle>:
{
 80015e4:	b510      	push	{r4, lr}
	if (Echo_Btn_isHandled() == true)
 80015e6:	f7ff fd07 	bl	8000ff8 <Echo_Btn_isHandled>
 80015ea:	4c0d      	ldr	r4, [pc, #52]	; (8001620 <Echo_FSM_State_Handle+0x3c>)
 80015ec:	b198      	cbz	r0, 8001616 <Echo_FSM_State_Handle+0x32>
		if (cur_state == ECHO_STATE_IDLE)
 80015ee:	7823      	ldrb	r3, [r4, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <Echo_FSM_State_Handle+0x2a>
			cur_state = ECHO_STATE_RUN;
 80015f4:	2302      	movs	r3, #2
			cur_state = ECHO_STATE_IDLE;
 80015f6:	7023      	strb	r3, [r4, #0]
	if (ECHO_CUR_STATE != cur_state)
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <Echo_FSM_State_Handle+0x40>)
 80015fa:	7820      	ldrb	r0, [r4, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4283      	cmp	r3, r0
 8001600:	d00c      	beq.n	800161c <Echo_FSM_State_Handle+0x38>
		Echo_Set_FSM_State(cur_state);
 8001602:	f7ff ffb1 	bl	8001568 <Echo_Set_FSM_State>
}
 8001606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Echo_Btn_Handled_clear();
 800160a:	f7ff bcfb 	b.w	8001004 <Echo_Btn_Handled_clear>
		else if (cur_state == ECHO_STATE_RUN)
 800160e:	2b02      	cmp	r3, #2
 8001610:	d1f2      	bne.n	80015f8 <Echo_FSM_State_Handle+0x14>
			cur_state = ECHO_STATE_IDLE;
 8001612:	2301      	movs	r3, #1
 8001614:	e7ef      	b.n	80015f6 <Echo_FSM_State_Handle+0x12>
	else if (Echo_Btn_isHandled() == false)
 8001616:	f7ff fcef 	bl	8000ff8 <Echo_Btn_isHandled>
 800161a:	e7ed      	b.n	80015f8 <Echo_FSM_State_Handle+0x14>
}
 800161c:	bd10      	pop	{r4, pc}
 800161e:	bf00      	nop
 8001620:	20000004 	.word	0x20000004
 8001624:	20000375 	.word	0x20000375

08001628 <ADC1_Conv_Waiting>:

#define ADC1_CONV_BUF									get_adc1_buf
uint16_t get_adc1_buf[ADC_CHK_CH_NUM];

static void ADC1_Conv_Waiting(void)
{
 8001628:	b538      	push	{r3, r4, r5, lr}
	uint32_t wait_tick;

	wait_tick = HAL_GetTick();
 800162a:	f000 ff5f 	bl	80024ec <HAL_GetTick>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
 800162e:	4d06      	ldr	r5, [pc, #24]	; (8001648 <ADC1_Conv_Waiting+0x20>)
 8001630:	4604      	mov	r4, r0
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	071b      	lsls	r3, r3, #28
 8001636:	d405      	bmi.n	8001644 <ADC1_Conv_Waiting+0x1c>

	while (LL_ADC_IsActiveFlag_EOS(ADC1) == 0
			&& (HAL_GetTick() - wait_tick < ADC_CONV_WAIT_TIME_MAX))
 8001638:	f000 ff58 	bl	80024ec <HAL_GetTick>
 800163c:	1b03      	subs	r3, r0, r4
 800163e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001642:	d3f6      	bcc.n	8001632 <ADC1_Conv_Waiting+0xa>
		;;
}
 8001644:	bd38      	pop	{r3, r4, r5, pc}
 8001646:	bf00      	nop
 8001648:	50040000 	.word	0x50040000

0800164c <Echo_ADC1_Enable>:

void Echo_ADC1_Enable()
{
 800164c:	b510      	push	{r4, lr}
	// Enable ADC DMA
	HAL_ADC_IRQHandler(&hadc1);
 800164e:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <Echo_ADC1_Enable+0x2c>)
 8001650:	4620      	mov	r0, r4
 8001652:	f001 f85b 	bl	800270c <HAL_ADC_IRQHandler>
	HAL_ADC_Start_IT(&hadc1);
 8001656:	4620      	mov	r0, r4
 8001658:	f001 fbde 	bl	8002e18 <HAL_ADC_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM);
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <Echo_ADC1_Enable+0x30>)
 800165e:	2202      	movs	r2, #2
 8001660:	4620      	mov	r0, r4
 8001662:	f001 fc7f 	bl	8002f64 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001666:	4620      	mov	r0, r4
 8001668:	217f      	movs	r1, #127	; 0x7f
 800166a:	f001 fd2d 	bl	80030c8 <HAL_ADCEx_Calibration_Start>
	ADC1_Conv_Waiting();
}
 800166e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ADC1_Conv_Waiting();
 8001672:	f7ff bfd9 	b.w	8001628 <ADC1_Conv_Waiting>
 8001676:	bf00      	nop
 8001678:	200005a8 	.word	0x200005a8
 800167c:	20000376 	.word	0x20000376

08001680 <Echo_Start_ADC_Conv>:

void Echo_Start_ADC_Conv()
{
 8001680:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <Echo_Start_ADC_Conv+0x2c>)
 8001684:	f001 f842 	bl	800270c <HAL_ADC_IRQHandler>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM);
 8001688:	2202      	movs	r2, #2
 800168a:	4909      	ldr	r1, [pc, #36]	; (80016b0 <Echo_Start_ADC_Conv+0x30>)
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <Echo_Start_ADC_Conv+0x2c>)
 800168e:	f001 fc69 	bl	8002f64 <HAL_ADC_Start_DMA>
  MODIFY_REG(ADCx->CR,
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <Echo_Start_ADC_Conv+0x34>)
 8001694:	6893      	ldr	r3, [r2, #8]
 8001696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6093      	str	r3, [r2, #8]

	LL_ADC_REG_StartConversion(ADC1);

	ADC1_Conv_Waiting();
}
 80016a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ADC1_Conv_Waiting();
 80016a8:	f7ff bfbe 	b.w	8001628 <ADC1_Conv_Waiting>
 80016ac:	200005a8 	.word	0x200005a8
 80016b0:	20000376 	.word	0x20000376
 80016b4:	50040000 	.word	0x50040000

080016b8 <Echo_Get_ADC_ConvVal>:

	for (i = 0; i < ADC_CHK_CH_NUM; i++)
	{
		//AUL_DEBUG_PRINT(("ADCVal[%d] = %u\n", i, ADCVal[i]));

		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <Echo_Get_ADC_ConvVal+0x44>)
 80016ba:	eddf 5a11 	vldr	s11, [pc, #68]	; 8001700 <Echo_Get_ADC_ConvVal+0x48>
 80016be:	881a      	ldrh	r2, [r3, #0]
		temp /= (float) ADC_MAX_VAL;
 80016c0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001704 <Echo_Get_ADC_ConvVal+0x4c>
		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016c4:	ee07 2a10 	vmov	s14, r2
 80016c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80016cc:	ee27 7a25 	vmul.f32	s14, s14, s11
		temp /= (float) ADC_MAX_VAL;
 80016d0:	eec7 6a06 	vdiv.f32	s13, s14, s12
		{
			temp *= (ADC_BAT_R1 + ADC_BAT_R2);
			temp /= ADC_BAT_R2;
		}
#endif
		con_val[i] = (uint16_t) temp;
 80016d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80016d8:	ee16 2a90 	vmov	r2, s13
 80016dc:	8002      	strh	r2, [r0, #0]
		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
		temp /= (float) ADC_MAX_VAL;
 80016ec:	ee87 7a86 	vdiv.f32	s14, s15, s12
		con_val[i] = (uint16_t) temp;
 80016f0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80016f4:	ee17 3a10 	vmov	r3, s14
 80016f8:	8043      	strh	r3, [r0, #2]
	}
}
 80016fa:	4770      	bx	lr
 80016fc:	20000376 	.word	0x20000376
 8001700:	453b8000 	.word	0x453b8000
 8001704:	457ff000 	.word	0x457ff000

08001708 <Echo_Stepup_Handle>:

void Echo_Stepup_Handle(void)
{
 8001708:	b513      	push	{r0, r1, r4, lr}
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 800170a:	f7ff ff1b 	bl	8001544 <Echo_Get_FSM_State>
 800170e:	2802      	cmp	r0, #2
 8001710:	d10f      	bne.n	8001732 <Echo_Stepup_Handle+0x2a>
	{
		static uint32_t st_handle_tick = 0;
		uint16_t convVal[ADC_CHK_CH_NUM];

		if (HAL_GetTick() - st_handle_tick >= PWR_HANDLE_PERIOD)
 8001712:	4c09      	ldr	r4, [pc, #36]	; (8001738 <Echo_Stepup_Handle+0x30>)
 8001714:	f000 feea 	bl	80024ec <HAL_GetTick>
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	1ac0      	subs	r0, r0, r3
 800171c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001720:	d307      	bcc.n	8001732 <Echo_Stepup_Handle+0x2a>
		{
			st_handle_tick = HAL_GetTick();
 8001722:	f000 fee3 	bl	80024ec <HAL_GetTick>
 8001726:	6020      	str	r0, [r4, #0]

			Echo_Start_ADC_Conv();
 8001728:	f7ff ffaa 	bl	8001680 <Echo_Start_ADC_Conv>

			Echo_Get_ADC_ConvVal(convVal);
 800172c:	a801      	add	r0, sp, #4
 800172e:	f7ff ffc3 	bl	80016b8 <Echo_Get_ADC_ConvVal>
		}
	}

}
 8001732:	b002      	add	sp, #8
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop
 8001738:	2000037c 	.word	0x2000037c

0800173c <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b508      	push	{r3, lr}
	if (htim->Instance == TIM16)
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001742:	429a      	cmp	r2, r3
 8001744:	d118      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 8001746:	f7ff fefd 	bl	8001544 <Echo_Get_FSM_State>
 800174a:	2802      	cmp	r0, #2
 800174c:	d114      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			if (v_step_val < v_step_tv)
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	6809      	ldr	r1, [r1, #0]
 8001756:	428b      	cmp	r3, r1
 8001758:	da05      	bge.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x2a>
			{
				v_step_val += 10;
 800175a:	330a      	adds	r3, #10
 800175c:	6013      	str	r3, [r2, #0]
			{
				HAL_TIM_Base_Stop_IT(&htim16);
			}
		}
	}
}
 800175e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				Echo_Pulse_V_PW_Config();
 8001762:	f000 b8db 	b.w	800191c <Echo_Pulse_V_PW_Config>
			else if (v_step_val > v_step_tv)
 8001766:	dd01      	ble.n	800176c <HAL_TIM_PeriodElapsedCallback+0x30>
				v_step_val = v_step_tv;
 8001768:	6011      	str	r1, [r2, #0]
 800176a:	e7f8      	b.n	800175e <HAL_TIM_PeriodElapsedCallback+0x22>
			else if (v_step_val == v_step_tv)
 800176c:	d104      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x3c>
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				HAL_TIM_Base_Stop_IT(&htim16);
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001774:	f002 bff0 	b.w	8004758 <HAL_TIM_Base_Stop_IT>
}
 8001778:	bd08      	pop	{r3, pc}
 800177a:	bf00      	nop
 800177c:	40014400 	.word	0x40014400
 8001780:	2000049c 	.word	0x2000049c
 8001784:	2000000c 	.word	0x2000000c
 8001788:	200006e8 	.word	0x200006e8

0800178c <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b088      	sub	sp, #32
	char mes_head[11] =
 8001790:	2300      	movs	r3, #0
 8001792:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001796:	f8cd 301b 	str.w	r3, [sp, #27]
	{ '\0', };

	//get_prm_cmd_str_table[admin_cmd_cnt].str
	strcpy((char*) mes_head,
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <Echo_Get_Res_Data+0x78>)
{
 800179c:	4604      	mov	r4, r0
	strcpy((char*) mes_head,
 800179e:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 80017a2:	a805      	add	r0, sp, #20
 80017a4:	f005 faf9 	bl	8006d9a <strcpy>
			(const char*) get_prm_cmd_str_table[select_msg].str);

	switch (select_msg)
 80017a8:	2c04      	cmp	r4, #4
 80017aa:	d80b      	bhi.n	80017c4 <Echo_Get_Res_Data+0x38>
 80017ac:	e8df f004 	tbb	[pc, r4]
 80017b0:	18131003 	.word	0x18131003
 80017b4:	1b          	.byte	0x1b
 80017b5:	00          	.byte	0x00
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <Echo_Get_Res_Data+0x7c>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
				pwm_param.dead_time);
		break;
	case RESPONSE_PULSEWIDTH:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80017ba:	4914      	ldr	r1, [pc, #80]	; (800180c <Echo_Get_Res_Data+0x80>)
 80017bc:	aa05      	add	r2, sp, #20
 80017be:	4814      	ldr	r0, [pc, #80]	; (8001810 <Echo_Get_Res_Data+0x84>)
 80017c0:	f005 fa5a 	bl	8006c78 <siprintf>
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
		break;
	default:
		break;
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 80017c4:	4912      	ldr	r1, [pc, #72]	; (8001810 <Echo_Get_Res_Data+0x84>)
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <Echo_Get_Res_Data+0x88>)
 80017c8:	f005 f9ac 	bl	8006b24 <iprintf>
}
 80017cc:	b008      	add	sp, #32
 80017ce:	bd10      	pop	{r4, pc}
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <Echo_Get_Res_Data+0x7c>)
 80017d2:	885b      	ldrh	r3, [r3, #2]
 80017d4:	e7f1      	b.n	80017ba <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <Echo_Get_Res_Data+0x7c>)
 80017d8:	490f      	ldr	r1, [pc, #60]	; (8001818 <Echo_Get_Res_Data+0x8c>)
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	aa05      	add	r2, sp, #20
 80017de:	e7ee      	b.n	80017be <Echo_Get_Res_Data+0x32>
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <Echo_Get_Res_Data+0x90>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e7e9      	b.n	80017ba <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80017e6:	4a0d      	ldr	r2, [pc, #52]	; (800181c <Echo_Get_Res_Data+0x90>)
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <Echo_Get_Res_Data+0x7c>)
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	9202      	str	r2, [sp, #8]
 80017ee:	889a      	ldrh	r2, [r3, #4]
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	885a      	ldrh	r2, [r3, #2]
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4909      	ldr	r1, [pc, #36]	; (8001820 <Echo_Get_Res_Data+0x94>)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <Echo_Get_Res_Data+0x84>)
 80017fc:	aa05      	add	r2, sp, #20
 80017fe:	f005 fa3b 	bl	8006c78 <siprintf>
		break;
 8001802:	e7df      	b.n	80017c4 <Echo_Get_Res_Data+0x38>
 8001804:	0800b60c 	.word	0x0800b60c
 8001808:	20000394 	.word	0x20000394
 800180c:	0800b53c 	.word	0x0800b53c
 8001810:	2000039a 	.word	0x2000039a
 8001814:	0800b58a 	.word	0x0800b58a
 8001818:	0800b549 	.word	0x0800b549
 800181c:	2000000c 	.word	0x2000000c
 8001820:	0800b556 	.word	0x0800b556

08001824 <Echo_Set_V_PW>:
{
 8001824:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step_tv);
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <Echo_Set_V_PW+0x24>)
 8001828:	4908      	ldr	r1, [pc, #32]	; (800184c <Echo_Set_V_PW+0x28>)
 800182a:	f005 fa45 	bl	8006cb8 <siscanf>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 800182e:	f7ff fe89 	bl	8001544 <Echo_Get_FSM_State>
 8001832:	2802      	cmp	r0, #2
 8001834:	d102      	bne.n	800183c <Echo_Set_V_PW+0x18>
		HAL_TIM_Base_Start_IT(&htim16);
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <Echo_Set_V_PW+0x2c>)
 8001838:	f002 ff64 	bl	8004704 <HAL_TIM_Base_Start_IT>
}
 800183c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001840:	2003      	movs	r0, #3
 8001842:	f7ff bfa3 	b.w	800178c <Echo_Get_Res_Data>
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c
 800184c:	0800b58f 	.word	0x0800b58f
 8001850:	200006e8 	.word	0x200006e8

08001854 <Echo_Pulse_Prm_Config>:
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_Prm_Config()
{
	uint32_t arr_data;
	ano_matching_tim1 = pwm_param.pulse_width;
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <Echo_Pulse_Prm_Config+0x38>)
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <Echo_Pulse_Prm_Config+0x3c>)
 8001858:	8851      	ldrh	r1, [r2, #2]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <Echo_Pulse_Prm_Config+0x40>)
{
 800185c:	b530      	push	{r4, r5, lr}
	ano_matching_tim1 = pwm_param.pulse_width;
 800185e:	6019      	str	r1, [r3, #0]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 8001860:	8813      	ldrh	r3, [r2, #0]
 8001862:	440b      	add	r3, r1
 8001864:	6003      	str	r3, [r0, #0]
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 8001866:	480c      	ldr	r0, [pc, #48]	; (8001898 <Echo_Pulse_Prm_Config+0x44>)
 8001868:	18cc      	adds	r4, r1, r3
 800186a:	6004      	str	r4, [r0, #0]

	arr_data = MASTER_ARR / pwm_param.pulse_freq;
 800186c:	8890      	ldrh	r0, [r2, #4]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <Echo_Pulse_Prm_Config+0x48>)
 8001870:	fbb2 f2f0 	udiv	r2, r2, r0
	TIM2->CNT = 0;
 8001874:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM2->ARR = arr_data - 1;
 8001878:	3a01      	subs	r2, #1
	TIM2->CNT = 0;
 800187a:	2500      	movs	r5, #0
 800187c:	6245      	str	r5, [r0, #36]	; 0x24
	TIM2->ARR = arr_data - 1;
 800187e:	62c2      	str	r2, [r0, #44]	; 0x2c
	TIM2->CCR1 = ano_matching_tim1;
	pwm_arr[0] = cat_matching_tim2;
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <Echo_Pulse_Prm_Config+0x4c>)
	TIM2->CCR1 = ano_matching_tim1;
 8001882:	6341      	str	r1, [r0, #52]	; 0x34
	pwm_arr[0] = cat_matching_tim2;
 8001884:	6014      	str	r4, [r2, #0]
	pwm_arr[1] = cat_matching_tim1;
 8001886:	6053      	str	r3, [r2, #4]
}
 8001888:	bd30      	pop	{r4, r5, pc}
 800188a:	bf00      	nop
 800188c:	20000394 	.word	0x20000394
 8001890:	20000380 	.word	0x20000380
 8001894:	20000384 	.word	0x20000384
 8001898:	20000388 	.word	0x20000388
 800189c:	000f4240 	.word	0x000f4240
 80018a0:	2000038c 	.word	0x2000038c

080018a4 <Echo_Set_DT>:
{
 80018a4:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <Echo_Set_DT+0x18>)
 80018a8:	4905      	ldr	r1, [pc, #20]	; (80018c0 <Echo_Set_DT+0x1c>)
 80018aa:	f005 fa05 	bl	8006cb8 <siscanf>
	Echo_Pulse_Prm_Config();
 80018ae:	f7ff ffd1 	bl	8001854 <Echo_Pulse_Prm_Config>
}
 80018b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff bf68 	b.w	800178c <Echo_Get_Res_Data>
 80018bc:	20000394 	.word	0x20000394
 80018c0:	0800b5a0 	.word	0x0800b5a0

080018c4 <Echo_Set_PW>:
{
 80018c4:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <Echo_Set_PW+0x18>)
 80018c8:	4905      	ldr	r1, [pc, #20]	; (80018e0 <Echo_Set_PW+0x1c>)
 80018ca:	f005 f9f5 	bl	8006cb8 <siscanf>
	Echo_Pulse_Prm_Config();
 80018ce:	f7ff ffc1 	bl	8001854 <Echo_Pulse_Prm_Config>
}
 80018d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff bf58 	b.w	800178c <Echo_Get_Res_Data>
 80018dc:	20000396 	.word	0x20000396
 80018e0:	0800b5b1 	.word	0x0800b5b1

080018e4 <Echo_Set_HZ>:
{
 80018e4:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <Echo_Set_HZ+0x30>)
 80018e8:	490b      	ldr	r1, [pc, #44]	; (8001918 <Echo_Set_HZ+0x34>)
 80018ea:	f005 f9e5 	bl	8006cb8 <siscanf>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 80018ee:	f7ff fe29 	bl	8001544 <Echo_Get_FSM_State>
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d10a      	bne.n	800190c <Echo_Set_HZ+0x28>
		Echo_Set_FSM_State_Stop();
 80018f6:	f7ff fe31 	bl	800155c <Echo_Set_FSM_State_Stop>
		Echo_Pulse_Prm_Config();
 80018fa:	f7ff ffab 	bl	8001854 <Echo_Pulse_Prm_Config>
		Echo_Set_FSM_State_Start();
 80018fe:	f7ff fe27 	bl	8001550 <Echo_Set_FSM_State_Start>
}
 8001902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 8001906:	2002      	movs	r0, #2
 8001908:	f7ff bf40 	b.w	800178c <Echo_Get_Res_Data>
		Echo_Pulse_Prm_Config();
 800190c:	f7ff ffa2 	bl	8001854 <Echo_Pulse_Prm_Config>
 8001910:	e7f7      	b.n	8001902 <Echo_Set_HZ+0x1e>
 8001912:	bf00      	nop
 8001914:	20000398 	.word	0x20000398
 8001918:	0800b5c2 	.word	0x0800b5c2

0800191c <Echo_Pulse_V_PW_Config>:

void Echo_Pulse_V_PW_Config()
{
	TIM1->CCR1 = v_step_val;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <Echo_Pulse_V_PW_Config+0xc>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <Echo_Pulse_V_PW_Config+0x10>)
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000049c 	.word	0x2000049c
 800192c:	40012c00 	.word	0x40012c00

08001930 <Echo_Factory_Reset>:
/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
	pwm_param.dead_time = 10;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <Echo_Factory_Reset+0x1c>)
 8001932:	220a      	movs	r2, #10
 8001934:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
 8001936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800193a:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 1;
 800193c:	2201      	movs	r2, #1
 800193e:	809a      	strh	r2, [r3, #4]
	v_step_tv = 5000;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <Echo_Factory_Reset+0x20>)
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 8001948:	f7ff bb86 	b.w	8001058 <Echo_Flash_Write>
 800194c:	20000394 	.word	0x20000394
 8001950:	2000000c 	.word	0x2000000c

08001954 <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting
 * */
void Echo_StepUP_Stop()
{
 8001954:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <Echo_StepUP_Stop+0x14>)
 8001958:	2100      	movs	r1, #0
 800195a:	f003 fad1 	bl	8004f00 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
}
 800195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop_IT(&htim16);
 8001962:	4802      	ldr	r0, [pc, #8]	; (800196c <Echo_StepUP_Stop+0x18>)
 8001964:	f002 bef8 	b.w	8004758 <HAL_TIM_Base_Stop_IT>
 8001968:	2000069c 	.word	0x2000069c
 800196c:	200006e8 	.word	0x200006e8

08001970 <Echo_Stim_Stop>:
{
 8001970:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001972:	4c06      	ldr	r4, [pc, #24]	; (800198c <Echo_Stim_Stop+0x1c>)
 8001974:	2100      	movs	r1, #0
 8001976:	4620      	mov	r0, r4
 8001978:	f003 fac2 	bl	8004f00 <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 800197c:	4620      	mov	r0, r4
 800197e:	2104      	movs	r1, #4
 8001980:	f003 fba8 	bl	80050d4 <HAL_TIM_OC_Stop_DMA>
}
 8001984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_StepUP_Stop();
 8001988:	f7ff bfe4 	b.w	8001954 <Echo_StepUP_Stop>
 800198c:	20000734 	.word	0x20000734

08001990 <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 8001990:	b508      	push	{r3, lr}
	TIM1->CCR1 = v_step_val;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <Echo_StepUP_Start+0x1c>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <Echo_StepUP_Start+0x20>)
	TIM1->CCR1 = v_step_val;
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <Echo_StepUP_Start+0x24>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
	TIM1->CCR1 = v_step_val;
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800199e:	f003 fa5f 	bl	8004e60 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
}
 80019a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim16);
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <Echo_StepUP_Start+0x28>)
 80019a8:	f002 beac 	b.w	8004704 <HAL_TIM_Base_Start_IT>
 80019ac:	2000049c 	.word	0x2000049c
 80019b0:	2000069c 	.word	0x2000069c
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	200006e8 	.word	0x200006e8

080019bc <Echo_Stim_Start>:
{
 80019bc:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019be:	4c0e      	ldr	r4, [pc, #56]	; (80019f8 <Echo_Stim_Start+0x3c>)
	Echo_Pulse_Prm_Config();
 80019c0:	f7ff ff48 	bl	8001854 <Echo_Pulse_Prm_Config>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	4620      	mov	r0, r4
 80019c8:	f003 fa4a 	bl	8004e60 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*) pwm_arr, 2);
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <Echo_Stim_Start+0x40>)
 80019ce:	2302      	movs	r3, #2
 80019d0:	2104      	movs	r1, #4
 80019d2:	4620      	mov	r0, r4
 80019d4:	f003 fa96 	bl	8004f04 <HAL_TIM_OC_Start_DMA>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) pwm_arr, 2);
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <Echo_Stim_Start+0x40>)
 80019da:	2302      	movs	r3, #2
 80019dc:	4620      	mov	r0, r4
 80019de:	210c      	movs	r1, #12
 80019e0:	f003 fa90 	bl	8004f04 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <Echo_Stim_Start+0x44>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6813      	ldr	r3, [r2, #0]
 80019ea:	f023 0306 	bic.w	r3, r3, #6
}
 80019ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 80019f2:	6013      	str	r3, [r2, #0]
	Echo_StepUP_Start();
 80019f4:	f7ff bfcc 	b.w	8001990 <Echo_StepUP_Start>
 80019f8:	20000734 	.word	0x20000734
 80019fc:	2000038c 	.word	0x2000038c
 8001a00:	20000654 	.word	0x20000654

08001a04 <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 8001a04:	b500      	push	{lr}
	HAL_Delay(200);
 8001a06:	20c8      	movs	r0, #200	; 0xc8
{
 8001a08:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001a0a:	f000 fd75 	bl	80024f8 <HAL_Delay>
	char res_msg[55] =
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2233      	movs	r2, #51	; 0x33
 8001a12:	a801      	add	r0, sp, #4
 8001a14:	9100      	str	r1, [sp, #0]
 8001a16:	f004 fa03 	bl	8005e20 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001a1a:	f7ff fb8f 	bl	800113c <Echo_Flash_Read>
 8001a1e:	b158      	cbz	r0, 8001a38 <Echo_PCI_State_Init+0x34>
	{
		pwm_param.dead_time = 10;
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <Echo_PCI_State_Init+0x6c>)
 8001a22:	220a      	movs	r2, #10
 8001a24:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 1;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	809a      	strh	r2, [r3, #4]
		v_step_tv = 5000;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <Echo_PCI_State_Init+0x70>)
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8001a38:	f7ff fc6e 	bl	8001318 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001a3c:	f002 fc42 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 8001a40:	490d      	ldr	r1, [pc, #52]	; (8001a78 <Echo_PCI_State_Init+0x74>)
 8001a42:	4602      	mov	r2, r0
 8001a44:	4668      	mov	r0, sp
 8001a46:	f005 f917 	bl	8006c78 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001a4a:	4668      	mov	r0, sp
 8001a4c:	f005 f906 	bl	8006c5c <puts>
	Echo_ADC1_Enable();
 8001a50:	f7ff fdfc 	bl	800164c <Echo_ADC1_Enable>
	Echo_Print_Manual();
 8001a54:	f7ff fc5a 	bl	800130c <Echo_Print_Manual>
	Echo_LED_Init();
 8001a58:	f7ff fb9a 	bl	8001190 <Echo_LED_Init>
	Echo_FSM_State_Init();
 8001a5c:	f7ff fdba 	bl	80015d4 <Echo_FSM_State_Init>
	Echo_Shell_Init();
 8001a60:	f7ff fc84 	bl	800136c <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 8001a64:	f000 f80a 	bl	8001a7c <Echo_Uart2_INTERRUPT_ENA>
}
 8001a68:	b00f      	add	sp, #60	; 0x3c
 8001a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a6e:	bf00      	nop
 8001a70:	20000394 	.word	0x20000394
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	0800b634 	.word	0x0800b634

08001a7c <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8001a7c:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001a7e:	4c08      	ldr	r4, [pc, #32]	; (8001aa0 <Echo_Uart2_INTERRUPT_ENA+0x24>)
	ECHO_USART2_STATE_RESET();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <Echo_Uart2_INTERRUPT_ENA+0x28>)
 8001a82:	2200      	movs	r2, #0
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001a84:	4620      	mov	r0, r4
	ECHO_USART2_STATE_RESET();
 8001a86:	801a      	strh	r2, [r3, #0]
 8001a88:	805a      	strh	r2, [r3, #2]
 8001a8a:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001a8c:	f003 fc40 	bl	8005310 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001a90:	4620      	mov	r0, r4
 8001a92:	4905      	ldr	r1, [pc, #20]	; (8001aa8 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
}
 8001a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f004 b96d 	b.w	8005d78 <HAL_UART_Receive_IT>
 8001a9e:	bf00      	nop
 8001aa0:	20000804 	.word	0x20000804
 8001aa4:	200004a2 	.word	0x200004a2
 8001aa8:	200004a0 	.word	0x200004a0

08001aac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
	{
	}
	else if (huart->Instance == USART2)
 8001aac:	6802      	ldr	r2, [r0, #0]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_UART_RxCpltCallback+0x2c>)
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d10b      	bne.n	8001acc <HAL_UART_RxCpltCallback+0x20>
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_UART_RxCpltCallback+0x30>)
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_UART_RxCpltCallback+0x34>)
 8001ab8:	7819      	ldrb	r1, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001aba:	8853      	ldrh	r3, [r2, #2]
 8001abc:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001abe:	b2db      	uxtb	r3, r3
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001ac0:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001ac2:	4413      	add	r3, r2
 8001ac4:	7199      	strb	r1, [r3, #6]
	echo_uart2_state.item_num++;
 8001ac6:	8893      	ldrh	r3, [r2, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	8093      	strh	r3, [r2, #4]
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001acc:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <HAL_UART_RxCpltCallback+0x34>)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_RxCpltCallback+0x38>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f004 b951 	b.w	8005d78 <HAL_UART_Receive_IT>
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	200004a2 	.word	0x200004a2
 8001ae0:	200004a0 	.word	0x200004a0
 8001ae4:	20000804 	.word	0x20000804

08001ae8 <Echo_Uart2_Get_RCV_Q>:
}
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 8001ae8:	b510      	push	{r4, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
#endif
	data_valid = false;

	if (echo_uart2_state.item_num > 0)
 8001aea:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <Echo_Uart2_Get_RCV_Q+0x30>)
 8001aec:	88a3      	ldrh	r3, [r4, #4]
 8001aee:	b18b      	cbz	r3, 8001b14 <Echo_Uart2_Get_RCV_Q+0x2c>
	{
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001af0:	8823      	ldrh	r3, [r4, #0]
 8001af2:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 8001af4:	b2db      	uxtb	r3, r3
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001af6:	8023      	strh	r3, [r4, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8001af8:	4423      	add	r3, r4
 8001afa:	799b      	ldrb	r3, [r3, #6]
 8001afc:	7003      	strb	r3, [r0, #0]

		ECHO_USART2_MUTEX_LOCK
 8001afe:	2026      	movs	r0, #38	; 0x26
 8001b00:	f001 fbe6 	bl	80032d0 <HAL_NVIC_DisableIRQ>
		;

		echo_uart2_state.item_num--;
 8001b04:	88a3      	ldrh	r3, [r4, #4]

		ECHO_USART2_MUTEX_UNLOCK
 8001b06:	2026      	movs	r0, #38	; 0x26
		echo_uart2_state.item_num--;
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	80a3      	strh	r3, [r4, #4]
		ECHO_USART2_MUTEX_UNLOCK
 8001b0c:	f001 fbd2 	bl	80032b4 <HAL_NVIC_EnableIRQ>
		;

		data_valid = true;
 8001b10:	2001      	movs	r0, #1
	}
	return data_valid;
}
 8001b12:	bd10      	pop	{r4, pc}
	data_valid = false;
 8001b14:	4618      	mov	r0, r3
 8001b16:	e7fc      	b.n	8001b12 <Echo_Uart2_Get_RCV_Q+0x2a>
 8001b18:	200004a2 	.word	0x200004a2

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b530      	push	{r4, r5, lr}
 8001b1e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b20:	2244      	movs	r2, #68	; 0x44
 8001b22:	2100      	movs	r1, #0
 8001b24:	a805      	add	r0, sp, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b26:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b28:	f004 f97a 	bl	8005e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4668      	mov	r0, sp
 8001b32:	f004 f975 	bl	8005e20 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b3a:	f001 ff7d 	bl	8003a38 <HAL_PWREx_ControlVoltageScaling>
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b108      	cbz	r0, 8001b46 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b42:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b44:	e7fe      	b.n	8001b44 <SystemClock_Config+0x28>
  HAL_PWR_EnableBkUpAccess();
 8001b46:	f001 ff67 	bl	8003a18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <SystemClock_Config+0x8c>)
 8001b4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b50:	f023 0318 	bic.w	r3, r3, #24
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b58:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b5a:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b5c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b64:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b68:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b6a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b6e:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b70:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b74:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b76:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f002 f824 	bl	8003bc4 <HAL_RCC_OscConfig>
 8001b7c:	b108      	cbz	r0, 8001b82 <SystemClock_Config+0x66>
 8001b7e:	b672      	cpsid	i
	while (1)
 8001b80:	e7fe      	b.n	8001b80 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b82:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	220f      	movs	r2, #15
 8001b88:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b94:	f002 faec 	bl	8004170 <HAL_RCC_ClockConfig>
 8001b98:	b108      	cbz	r0, 8001b9e <SystemClock_Config+0x82>
 8001b9a:	b672      	cpsid	i
	while (1)
 8001b9c:	e7fe      	b.n	8001b9c <SystemClock_Config+0x80>
  HAL_RCCEx_EnableMSIPLLMode();
 8001b9e:	f002 fcb1 	bl	8004504 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ba2:	b017      	add	sp, #92	; 0x5c
 8001ba4:	bd30      	pop	{r4, r5, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <main>:
{
 8001bac:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4db5      	ldr	r5, [pc, #724]	; (8001e84 <main+0x2d8>)
{
 8001bb0:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8001bb2:	f000 fc7f 	bl	80024b4 <HAL_Init>
  SystemClock_Config();
 8001bb6:	f7ff ffb1 	bl	8001b1c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	2214      	movs	r2, #20
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	a80f      	add	r0, sp, #60	; 0x3c
 8001bc0:	f004 f92e 	bl	8005e20 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, QCC_CRTL0_Pin|QCC_CRTL1_Pin|LED_Pin|BIPHASIC_SW_Pin
 8001bc6:	48b0      	ldr	r0, [pc, #704]	; (8001e88 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001bce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001be0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001bf2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, QCC_CRTL0_Pin|QCC_CRTL1_Pin|LED_Pin|BIPHASIC_SW_Pin
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	213b      	movs	r1, #59	; 0x3b
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, QCC_CRTL0_Pin|QCC_CRTL1_Pin|LED_Pin|BIPHASIC_SW_Pin
 8001c00:	f001 ff04 	bl	8003a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DAC0_Pin|DAC1_Pin|DAC2_Pin|DAC3_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, DAC0_Pin|DAC1_Pin|DAC2_Pin|DAC3_Pin, GPIO_PIN_RESET);
 8001c10:	f001 fefc 	bl	8003a0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2310      	movs	r3, #16
  HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001c18:	a90f      	add	r1, sp, #60	; 0x3c
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c22:	f04f 080b 	mov.w	r8, #11
 8001c26:	2780      	movs	r7, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c28:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f001 fe2b 	bl	8003884 <HAL_GPIO_Init>
  HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	a90f      	add	r1, sp, #60	; 0x3c
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c34:	e9cd 780f 	strd	r7, r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f001 fe23 	bl	8003884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QCC_CRTL0_Pin|QCC_CRTL1_Pin|LED_Pin|BIPHASIC_SW_Pin
 8001c3e:	233b      	movs	r3, #59	; 0x3b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	4891      	ldr	r0, [pc, #580]	; (8001e88 <main+0x2dc>)
 8001c42:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f001 fe1a 	bl	8003884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC0_Pin|DAC1_Pin|DAC2_Pin|DAC3_Pin;
 8001c50:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	a90f      	add	r1, sp, #60	; 0x3c
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f001 fe0f 	bl	8003884 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c66:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	64ab      	str	r3, [r5, #72]	; 0x48
 8001c6c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim1.Instance = TIM1;
 8001c6e:	4d87      	ldr	r5, [pc, #540]	; (8001e8c <main+0x2e0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c70:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c72:	4622      	mov	r2, r4
 8001c74:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c76:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c78:	4640      	mov	r0, r8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c7a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c7c:	f001 fae8 	bl	8003250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c80:	4640      	mov	r0, r8
 8001c82:	f001 fb17 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001c86:	4622      	mov	r2, r4
 8001c88:	4621      	mov	r1, r4
 8001c8a:	2011      	movs	r0, #17
 8001c8c:	f001 fae0 	bl	8003250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001c90:	2011      	movs	r0, #17
 8001c92:	f001 fb0f 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	221c      	movs	r2, #28
 8001c98:	4621      	mov	r1, r4
 8001c9a:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001ca0:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	f004 f8bd 	bl	8005e20 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca6:	222c      	movs	r2, #44	; 0x2c
 8001ca8:	4621      	mov	r1, r4
 8001caa:	a80f      	add	r0, sp, #60	; 0x3c
 8001cac:	f004 f8b8 	bl	8005e20 <memset>
  htim1.Instance = TIM1;
 8001cb0:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <main+0x2e4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 1;
 8001cb4:	e9c5 3600 	strd	r3, r6, [r5]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cb8:	4628      	mov	r0, r5
  htim1.Init.Period = 9999;
 8001cba:	f242 730f 	movw	r3, #9999	; 0x270f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc2:	e9c5 4705 	strd	r4, r7, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cc6:	f002 ff2d 	bl	8004b24 <HAL_TIM_PWM_Init>
 8001cca:	b108      	cbz	r0, 8001cd0 <main+0x124>
 8001ccc:	b672      	cpsid	i
	while (1)
 8001cce:	e7fe      	b.n	8001cce <main+0x122>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cd0:	e9cd 0005 	strd	r0, r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd6:	a905      	add	r1, sp, #20
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f003 fa71 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	b108      	cbz	r0, 8001ce6 <main+0x13a>
 8001ce2:	b672      	cpsid	i
	while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <main+0x138>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce6:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cea:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cee:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf2:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf4:	a908      	add	r1, sp, #32
 8001cf6:	4628      	mov	r0, r5
  sConfigOC.Pulse = 1;
 8001cf8:	e9cd 8608 	strd	r8, r6, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfc:	f002 ffae 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001d00:	b108      	cbz	r0, 8001d06 <main+0x15a>
 8001d02:	b672      	cpsid	i
	while (1)
 8001d04:	e7fe      	b.n	8001d04 <main+0x158>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0a:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d12:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d16:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1a:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1e:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d20:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d22:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d24:	a90f      	add	r1, sp, #60	; 0x3c
 8001d26:	4628      	mov	r0, r5
 8001d28:	f003 fa7c 	bl	8005224 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2c:	4606      	mov	r6, r0
 8001d2e:	b108      	cbz	r0, 8001d34 <main+0x188>
 8001d30:	b672      	cpsid	i
	while (1)
 8001d32:	e7fe      	b.n	8001d32 <main+0x186>
  HAL_TIM_MspPostInit(&htim1);
 8001d34:	4628      	mov	r0, r5
 8001d36:	f000 f9ff 	bl	8002138 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001d3a:	4c56      	ldr	r4, [pc, #344]	; (8001e94 <main+0x2e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	960a      	str	r6, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3e:	221c      	movs	r2, #28
 8001d40:	4631      	mov	r1, r6
 8001d42:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	e9cd 6608 	strd	r6, r6, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d48:	f004 f86a 	bl	8005e20 <memset>
  htim2.Init.Prescaler = 79;
 8001d4c:	234f      	movs	r3, #79	; 0x4f
 8001d4e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8001d52:	e9c4 e300 	strd	lr, r3, [r4]
  htim2.Init.Period = 999999;
 8001d56:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <main+0x2ec>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d5a:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d60:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d62:	f002 fedf 	bl	8004b24 <HAL_TIM_PWM_Init>
 8001d66:	b108      	cbz	r0, 8001d6c <main+0x1c0>
 8001d68:	b672      	cpsid	i
	while (1)
 8001d6a:	e7fe      	b.n	8001d6a <main+0x1be>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f002 fea9 	bl	8004ac4 <HAL_TIM_OC_Init>
 8001d72:	b108      	cbz	r0, 8001d78 <main+0x1cc>
 8001d74:	b672      	cpsid	i
	while (1)
 8001d76:	e7fe      	b.n	8001d76 <main+0x1ca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7c:	a908      	add	r1, sp, #32
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f003 fa1e 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	4602      	mov	r2, r0
 8001d86:	b108      	cbz	r0, 8001d8c <main+0x1e0>
 8001d88:	b672      	cpsid	i
	while (1)
 8001d8a:	e7fe      	b.n	8001d8a <main+0x1de>
  sConfigOC.Pulse = 1000;
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d96:	a90f      	add	r1, sp, #60	; 0x3c
 8001d98:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	f002 ff5d 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001da2:	b108      	cbz	r0, 8001da8 <main+0x1fc>
 8001da4:	b672      	cpsid	i
	while (1)
 8001da6:	e7fe      	b.n	8001da6 <main+0x1fa>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	6993      	ldr	r3, [r2, #24]
 8001dac:	f023 0308 	bic.w	r3, r3, #8
 8001db0:	6193      	str	r3, [r2, #24]
  sConfigOC.Pulse = 1100;
 8001db2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001db6:	f240 434c 	movw	r3, #1100	; 0x44c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dba:	2204      	movs	r2, #4
 8001dbc:	a90f      	add	r1, sp, #60	; 0x3c
 8001dbe:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1100;
 8001dc0:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc4:	f002 ff16 	bl	8004bf4 <HAL_TIM_OC_ConfigChannel>
 8001dc8:	b108      	cbz	r0, 8001dce <main+0x222>
 8001dca:	b672      	cpsid	i
	while (1)
 8001dcc:	e7fe      	b.n	8001dcc <main+0x220>
  sConfigOC.Pulse = 0;
 8001dce:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dd0:	220c      	movs	r2, #12
 8001dd2:	a90f      	add	r1, sp, #60	; 0x3c
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f002 ff0d 	bl	8004bf4 <HAL_TIM_OC_ConfigChannel>
 8001dda:	b108      	cbz	r0, 8001de0 <main+0x234>
 8001ddc:	b672      	cpsid	i
	while (1)
 8001dde:	e7fe      	b.n	8001dde <main+0x232>
  HAL_TIM_MspPostInit(&htim2);
 8001de0:	482c      	ldr	r0, [pc, #176]	; (8001e94 <main+0x2e8>)
 8001de2:	f000 f9a9 	bl	8002138 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8001de6:	482d      	ldr	r0, [pc, #180]	; (8001e9c <main+0x2f0>)
  huart1.Init.BaudRate = 115200;
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <main+0x2f4>)
 8001dea:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
 8001dee:	e9c0 3400 	strd	r3, r4, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df2:	260c      	movs	r6, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df4:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfe:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e02:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e04:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e06:	f003 ff28 	bl	8005c5a <HAL_UART_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b108      	cbz	r0, 8001e12 <main+0x266>
 8001e0e:	b672      	cpsid	i
	while (1)
 8001e10:	e7fe      	b.n	8001e10 <main+0x264>
  huart2.Instance = USART2;
 8001e12:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <main+0x2f8>)
 8001e14:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <main+0x2fc>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e16:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001e1a:	e9c0 2400 	strd	r2, r4, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e1e:	e9c0 3604 	strd	r3, r6, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e22:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e26:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	f003 ff16 	bl	8005c5a <HAL_UART_Init>
 8001e2e:	4605      	mov	r5, r0
 8001e30:	b108      	cbz	r0, 8001e36 <main+0x28a>
 8001e32:	b672      	cpsid	i
	while (1)
 8001e34:	e7fe      	b.n	8001e34 <main+0x288>
  ADC_MultiModeTypeDef multimode = {0};
 8001e36:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001e3a:	900a      	str	r0, [sp, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3c:	2218      	movs	r2, #24
 8001e3e:	4601      	mov	r1, r0
 8001e40:	a80f      	add	r0, sp, #60	; 0x3c
 8001e42:	f003 ffed 	bl	8005e20 <memset>
  hadc1.Instance = ADC1;
 8001e46:	4c19      	ldr	r4, [pc, #100]	; (8001eac <main+0x300>)
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <main+0x304>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e4a:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e4e:	2208      	movs	r2, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e50:	e9c4 3500 	strd	r3, r5, [r4]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e9c4 3204 	strd	r3, r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5e:	8322      	strh	r2, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e60:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 3;
 8001e62:	2203      	movs	r2, #3
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e64:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e68:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 3;
 8001e6c:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e6e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e72:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001e74:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e78:	f000 fb68 	bl	800254c <HAL_ADC_Init>
 8001e7c:	b1d0      	cbz	r0, 8001eb4 <main+0x308>
 8001e7e:	b672      	cpsid	i
	while (1)
 8001e80:	e7fe      	b.n	8001e80 <main+0x2d4>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	2000069c 	.word	0x2000069c
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	20000734 	.word	0x20000734
 8001e98:	000f423f 	.word	0x000f423f
 8001e9c:	20000780 	.word	0x20000780
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	20000804 	.word	0x20000804
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	200005a8 	.word	0x200005a8
 8001eb0:	50040000 	.word	0x50040000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001eb4:	9008      	str	r0, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001eb6:	a908      	add	r1, sp, #32
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f001 f955 	bl	8003168 <HAL_ADCEx_MultiModeConfigChannel>
 8001ebe:	b108      	cbz	r0, 8001ec4 <main+0x318>
 8001ec0:	b672      	cpsid	i
	while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <main+0x316>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec4:	4d2a      	ldr	r5, [pc, #168]	; (8001f70 <main+0x3c4>)
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ecc:	2702      	movs	r7, #2
 8001ece:	237f      	movs	r3, #127	; 0x7f
 8001ed0:	e9cd 7311 	strd	r7, r3, [sp, #68]	; 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed4:	2304      	movs	r3, #4
  sConfig.Offset = 0;
 8001ed6:	e9cd 3013 	strd	r3, r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eda:	a90f      	add	r1, sp, #60	; 0x3c
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 fd7b 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001ee2:	b108      	cbz	r0, 8001ee8 <main+0x33c>
 8001ee4:	b672      	cpsid	i
	while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <main+0x33a>
  sConfig.Channel = ADC_CHANNEL_12;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <main+0x3c8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eea:	a90f      	add	r1, sp, #60	; 0x3c
 8001eec:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001eee:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef2:	f000 fd71 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001ef6:	b108      	cbz	r0, 8001efc <main+0x350>
 8001ef8:	b672      	cpsid	i
	while (1)
 8001efa:	e7fe      	b.n	8001efa <main+0x34e>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001efc:	481e      	ldr	r0, [pc, #120]	; (8001f78 <main+0x3cc>)
 8001efe:	2312      	movs	r3, #18
 8001f00:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f04:	a90f      	add	r1, sp, #60	; 0x3c
 8001f06:	4620      	mov	r0, r4
 8001f08:	f000 fd66 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b108      	cbz	r0, 8001f14 <main+0x368>
 8001f10:	b672      	cpsid	i
	while (1)
 8001f12:	e7fe      	b.n	8001f12 <main+0x366>
  htim16.Instance = TIM16;
 8001f14:	4819      	ldr	r0, [pc, #100]	; (8001f7c <main+0x3d0>)
  htim16.Init.Prescaler = 79;
 8001f16:	491a      	ldr	r1, [pc, #104]	; (8001f80 <main+0x3d4>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	6083      	str	r3, [r0, #8]
  htim16.Init.Prescaler = 79;
 8001f1a:	224f      	movs	r2, #79	; 0x4f
 8001f1c:	e9c0 1200 	strd	r1, r2, [r0]
  htim16.Init.Period = 99;
 8001f20:	2263      	movs	r2, #99	; 0x63
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim16.Init.RepetitionCounter = 0;
 8001f26:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f2c:	f002 fd9a 	bl	8004a64 <HAL_TIM_Base_Init>
 8001f30:	b108      	cbz	r0, 8001f36 <main+0x38a>
 8001f32:	b672      	cpsid	i
	while (1)
 8001f34:	e7fe      	b.n	8001f34 <main+0x388>
	Echo_PCI_State_Init();
 8001f36:	f7ff fd65 	bl	8001a04 <Echo_PCI_State_Init>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001f3a:	4c12      	ldr	r4, [pc, #72]	; (8001f84 <main+0x3d8>)
		Echo_Shell_CMD_Handle();
 8001f3c:	f7ff fa9a 	bl	8001474 <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001f40:	f000 fad4 	bl	80024ec <HAL_GetTick>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	1ac0      	subs	r0, r0, r3
 8001f48:	2809      	cmp	r0, #9
 8001f4a:	d90c      	bls.n	8001f66 <main+0x3ba>
			Echo_Stepup_Handle();
 8001f4c:	f7ff fbdc 	bl	8001708 <Echo_Stepup_Handle>
			Echo_Shell_Input_Print();
 8001f50:	f7ff f9fa 	bl	8001348 <Echo_Shell_Input_Print>
			Echo_FSM_State_Handle();
 8001f54:	f7ff fb46 	bl	80015e4 <Echo_FSM_State_Handle>
			Echo_Btn_handle();
 8001f58:	f7ff f85a 	bl	8001010 <Echo_Btn_handle>
			Echo_LED_Handle();
 8001f5c:	f7ff f95a 	bl	8001214 <Echo_LED_Handle>
			schdule_tick = HAL_GetTick();
 8001f60:	f000 fac4 	bl	80024ec <HAL_GetTick>
 8001f64:	6020      	str	r0, [r4, #0]
		HAL_Delay(10);
 8001f66:	200a      	movs	r0, #10
 8001f68:	f000 fac6 	bl	80024f8 <HAL_Delay>
		Echo_Shell_CMD_Handle();
 8001f6c:	e7e6      	b.n	8001f3c <main+0x390>
 8001f6e:	bf00      	nop
 8001f70:	2e300800 	.word	0x2e300800
 8001f74:	32601000 	.word	0x32601000
 8001f78:	80000001 	.word	0x80000001
 8001f7c:	200006e8 	.word	0x200006e8
 8001f80:	40014400 	.word	0x40014400
 8001f84:	20000888 	.word	0x20000888

08001f88 <Error_Handler>:
 8001f88:	b672      	cpsid	i
	while (1)
 8001f8a:	e7fe      	b.n	8001f8a <Error_Handler+0x2>

08001f8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_MspInit+0x2c>)
 8001f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	661a      	str	r2, [r3, #96]	; 0x60
 8001f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001f98:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	f002 0201 	and.w	r2, r2, #1
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fa8:	659a      	str	r2, [r3, #88]	; 0x58
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb4:	b002      	add	sp, #8
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b530      	push	{r4, r5, lr}
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	2214      	movs	r2, #20
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	a803      	add	r0, sp, #12
 8001fc8:	f003 ff2a 	bl	8005e20 <memset>
  if(hadc->Instance==ADC1)
 8001fcc:	682a      	ldr	r2, [r5, #0]
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_ADC_MspInit+0x90>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d138      	bne.n	8002046 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001fd4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001fd8:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fdc:	4c1c      	ldr	r4, [pc, #112]	; (8002050 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fec:	9201      	str	r2, [sp, #4]
 8001fee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002000:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002006:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800200c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f001 fc38 	bl	8003884 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002014:	2080      	movs	r0, #128	; 0x80
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <HAL_ADC_MspInit+0x98>)
 800201c:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002022:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002026:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002028:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800202a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800202e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002032:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002036:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002038:	f001 f972 	bl	8003320 <HAL_DMA_Init>
 800203c:	b108      	cbz	r0, 8002042 <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 800203e:	f7ff ffa3 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002042:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002044:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002046:	b009      	add	sp, #36	; 0x24
 8002048:	bd30      	pop	{r4, r5, pc}
 800204a:	bf00      	nop
 800204c:	50040000 	.word	0x50040000
 8002050:	2000060c 	.word	0x2000060c
 8002054:	40020008 	.word	0x40020008

08002058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_pwm->Instance==TIM1)
 800205a:	6803      	ldr	r3, [r0, #0]
 800205c:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 800205e:	4293      	cmp	r3, r2
{
 8002060:	4605      	mov	r5, r0
  if(htim_pwm->Instance==TIM1)
 8002062:	d114      	bne.n	800208e <HAL_TIM_PWM_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_TIM_PWM_MspInit+0x94>)
 8002066:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800206c:	661a      	str	r2, [r3, #96]	; 0x60
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002076:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002078:	4611      	mov	r1, r2
 800207a:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800207e:	f001 f8e7 	bl	8003250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002082:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002084:	b003      	add	sp, #12
 8002086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800208a:	f001 b913 	b.w	80032b4 <HAL_NVIC_EnableIRQ>
  else if(htim_pwm->Instance==TIM2)
 800208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002092:	d127      	bne.n	80020e4 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002094:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002098:	4c15      	ldr	r4, [pc, #84]	; (80020f0 <HAL_TIM_PWM_MspInit+0x98>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <HAL_TIM_PWM_MspInit+0x9c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80020ae:	2304      	movs	r3, #4
 80020b0:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020b4:	2080      	movs	r0, #128	; 0x80
 80020b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	2110      	movs	r1, #16
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80020c2:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 80020c6:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80020c8:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80020ce:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80020d2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80020d4:	f001 f924 	bl	8003320 <HAL_DMA_Init>
 80020d8:	b108      	cbz	r0, 80020de <HAL_TIM_PWM_MspInit+0x86>
      Error_Handler();
 80020da:	f7ff ff55 	bl	8001f88 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80020de:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80020e0:	632c      	str	r4, [r5, #48]	; 0x30
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80020e2:	62a5      	str	r5, [r4, #40]	; 0x28
}
 80020e4:	b003      	add	sp, #12
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	20000654 	.word	0x20000654
 80020f4:	40020080 	.word	0x40020080

080020f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_Base_MspInit+0x3c>)
 80020fc:	6802      	ldr	r2, [r0, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d115      	bne.n	800212e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002102:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002106:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800210a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800210e:	661a      	str	r2, [r3, #96]	; 0x60
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800211a:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800211c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800211e:	f001 f897 	bl	8003250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002122:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002124:	b003      	add	sp, #12
 8002126:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800212a:	f001 b8c3 	b.w	80032b4 <HAL_NVIC_EnableIRQ>
}
 800212e:	b003      	add	sp, #12
 8002130:	f85d fb04 	ldr.w	pc, [sp], #4
 8002134:	40014400 	.word	0x40014400

08002138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002138:	b510      	push	{r4, lr}
 800213a:	4604      	mov	r4, r0
 800213c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213e:	2214      	movs	r2, #20
 8002140:	2100      	movs	r1, #0
 8002142:	a803      	add	r0, sp, #12
 8002144:	f003 fe6c 	bl	8005e20 <memset>
  if(htim->Instance==TIM1)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <HAL_TIM_MspPostInit+0x68>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d117      	bne.n	8002180 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 8002152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 8002164:	f44f 7380 	mov.w	r3, #256	; 0x100
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin|STIM_CTRL_DAC_Pin|STIM_ANODE_Pin;
 8002168:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002170:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002176:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f001 fb84 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800217c:	b008      	add	sp, #32
 800217e:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d1fa      	bne.n	800217c <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800218a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	64da      	str	r2, [r3, #76]	; 0x4c
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin|STIM_CTRL_DAC_Pin|STIM_ANODE_Pin;
 800219c:	232a      	movs	r3, #42	; 0x2a
 800219e:	e7e3      	b.n	8002168 <HAL_TIM_MspPostInit+0x30>
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ae:	2214      	movs	r2, #20
 80021b0:	2100      	movs	r1, #0
 80021b2:	a804      	add	r0, sp, #16
 80021b4:	f003 fe34 	bl	8005e20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b8:	2234      	movs	r2, #52	; 0x34
 80021ba:	2100      	movs	r1, #0
 80021bc:	a809      	add	r0, sp, #36	; 0x24
 80021be:	f003 fe2f 	bl	8005e20 <memset>
  if(huart->Instance==USART1)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_UART_MspInit+0x108>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d132      	bne.n	8002230 <HAL_UART_MspInit+0x88>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021ca:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021cc:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021ce:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d0:	f002 f8a2 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80021d4:	b108      	cbz	r0, 80021da <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80021d6:	f7ff fed7 	bl	8001f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = QCC_UART_TX_Pin|QCC_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	4836      	ldr	r0, [pc, #216]	; (80022b8 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60
 80021e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021e8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f2:	f042 0202 	orr.w	r2, r2, #2
 80021f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2400      	movs	r4, #0
 800220c:	2303      	movs	r3, #3
 800220e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002214:	2307      	movs	r3, #7
 8002216:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f001 fb34 	bl	8003884 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800221c:	2025      	movs	r0, #37	; 0x25
 800221e:	4622      	mov	r2, r4
 8002220:	4621      	mov	r1, r4
 8002222:	f001 f815 	bl	8003250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002226:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002228:	f001 f844 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800222c:	b016      	add	sp, #88	; 0x58
 800222e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_UART_MspInit+0x114>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d1fa      	bne.n	800222c <HAL_UART_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002236:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800223a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	f002 f86c 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	b108      	cbz	r0, 8002246 <HAL_UART_MspInit+0x9e>
      Error_Handler();
 8002242:	f7ff fea1 	bl	8001f88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 8002248:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800224a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800224e:	659a      	str	r2, [r3, #88]	; 0x58
 8002250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002252:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	64da      	str	r2, [r3, #76]	; 0x4c
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	9303      	str	r3, [sp, #12]
 800226a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2602      	movs	r6, #2
 800226e:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2400      	movs	r4, #0
 8002272:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002278:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227a:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002280:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002286:	f001 fafd 	bl	8003884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800228a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800228e:	a904      	add	r1, sp, #16
 8002290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800229c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800229e:	f001 faf1 	bl	8003884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022a2:	2026      	movs	r0, #38	; 0x26
 80022a4:	4622      	mov	r2, r4
 80022a6:	4621      	mov	r1, r4
 80022a8:	f000 ffd2 	bl	8003250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ac:	2026      	movs	r0, #38	; 0x26
 80022ae:	e7bb      	b.n	8002228 <HAL_UART_MspInit+0x80>
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	48000400 	.word	0x48000400
 80022bc:	40004400 	.word	0x40004400

080022c0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022c4:	4905      	ldr	r1, [pc, #20]	; (80022dc <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022c8:	68ca      	ldr	r2, [r1, #12]
 80022ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
 80022d2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022d6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80022d8:	e7fd      	b.n	80022d6 <__NVIC_SystemReset+0x16>
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0004 	.word	0x05fa0004

080022e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80022e8:	f7ff ffea 	bl	80022c0 <__NVIC_SystemReset>

080022ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <MemManage_Handler>

080022ee <BusFault_Handler>:
 80022ee:	b508      	push	{r3, lr}
 80022f0:	f7ff ffe6 	bl	80022c0 <__NVIC_SystemReset>

080022f4 <UsageFault_Handler>:
 80022f4:	b508      	push	{r3, lr}
 80022f6:	f7ff ffe3 	bl	80022c0 <__NVIC_SystemReset>

080022fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	4770      	bx	lr

080022fc <DebugMon_Handler>:
 80022fc:	4770      	bx	lr

080022fe <PendSV_Handler>:
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f000 b8e8 	b.w	80024d4 <HAL_IncTick>

08002304 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002304:	4801      	ldr	r0, [pc, #4]	; (800230c <DMA1_Channel1_IRQHandler+0x8>)
 8002306:	f001 b8ff 	b.w	8003508 <HAL_DMA_IRQHandler>
 800230a:	bf00      	nop
 800230c:	2000060c 	.word	0x2000060c

08002310 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002310:	4801      	ldr	r0, [pc, #4]	; (8002318 <DMA1_Channel7_IRQHandler+0x8>)
 8002312:	f001 b8f9 	b.w	8003508 <HAL_DMA_IRQHandler>
 8002316:	bf00      	nop
 8002318:	20000654 	.word	0x20000654

0800231c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800231c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800231e:	4804      	ldr	r0, [pc, #16]	; (8002330 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002320:	f002 fa89 	bl	8004836 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800232a:	f002 ba84 	b.w	8004836 <HAL_TIM_IRQHandler>
 800232e:	bf00      	nop
 8002330:	2000069c 	.word	0x2000069c
 8002334:	200006e8 	.word	0x200006e8

08002338 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <USART1_IRQHandler+0x8>)
 800233a:	f003 b859 	b.w	80053f0 <HAL_UART_IRQHandler>
 800233e:	bf00      	nop
 8002340:	20000780 	.word	0x20000780

08002344 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002344:	4801      	ldr	r0, [pc, #4]	; (800234c <USART2_IRQHandler+0x8>)
 8002346:	f003 b853 	b.w	80053f0 <HAL_UART_IRQHandler>
 800234a:	bf00      	nop
 800234c:	20000804 	.word	0x20000804

08002350 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002350:	2001      	movs	r0, #1
 8002352:	4770      	bx	lr

08002354 <_kill>:

int _kill(int pid, int sig)
{
 8002354:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002356:	f003 fd39 	bl	8005dcc <__errno>
 800235a:	2316      	movs	r3, #22
 800235c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800235e:	f04f 30ff 	mov.w	r0, #4294967295
 8002362:	bd08      	pop	{r3, pc}

08002364 <_exit>:

void _exit (int status)
{
 8002364:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002366:	f003 fd31 	bl	8005dcc <__errno>
 800236a:	2316      	movs	r3, #22
 800236c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800236e:	e7fe      	b.n	800236e <_exit+0xa>

08002370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	460d      	mov	r5, r1
 8002374:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	460e      	mov	r6, r1
 8002378:	1b73      	subs	r3, r6, r5
 800237a:	429c      	cmp	r4, r3
 800237c:	dc01      	bgt.n	8002382 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800237e:	4620      	mov	r0, r4
 8002380:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002382:	f3af 8000 	nop.w
 8002386:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	e7f5      	b.n	8002378 <_read+0x8>

0800238c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	460d      	mov	r5, r1
 8002390:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	460e      	mov	r6, r1
 8002394:	1b73      	subs	r3, r6, r5
 8002396:	429c      	cmp	r4, r3
 8002398:	dc01      	bgt.n	800239e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800239a:	4620      	mov	r0, r4
 800239c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800239e:	f816 0b01 	ldrb.w	r0, [r6], #1
 80023a2:	f7fe ff87 	bl	80012b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	e7f5      	b.n	8002394 <_write+0x8>

080023a8 <_close>:

int _close(int file)
{
	return -1;
}
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	4770      	bx	lr

080023b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80023b8:	2001      	movs	r0, #1
 80023ba:	4770      	bx	lr

080023bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80023bc:	2000      	movs	r0, #0
 80023be:	4770      	bx	lr

080023c0 <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <_sbrk+0x30>)
 80023c2:	6811      	ldr	r1, [r2, #0]
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4603      	mov	r3, r0
	if (NULL == __sbrk_heap_end)
 80023c8:	b909      	cbnz	r1, 80023ce <_sbrk+0xe>
	{
		__sbrk_heap_end = &_end;
 80023ca:	490a      	ldr	r1, [pc, #40]	; (80023f4 <_sbrk+0x34>)
 80023cc:	6011      	str	r1, [r2, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 80023ce:	6810      	ldr	r0, [r2, #0]
 80023d0:	4909      	ldr	r1, [pc, #36]	; (80023f8 <_sbrk+0x38>)
 80023d2:	4c0a      	ldr	r4, [pc, #40]	; (80023fc <_sbrk+0x3c>)
 80023d4:	4403      	add	r3, r0
 80023d6:	1b09      	subs	r1, r1, r4
 80023d8:	428b      	cmp	r3, r1
 80023da:	d906      	bls.n	80023ea <_sbrk+0x2a>
	{
		errno = ENOMEM;
 80023dc:	f003 fcf6 	bl	8005dcc <__errno>
 80023e0:	230c      	movs	r3, #12
 80023e2:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80023e8:	bd10      	pop	{r4, pc}
	__sbrk_heap_end += incr;
 80023ea:	6013      	str	r3, [r2, #0]
	return (void*) prev_heap_end;
 80023ec:	e7fc      	b.n	80023e8 <_sbrk+0x28>
 80023ee:	bf00      	nop
 80023f0:	2000088c 	.word	0x2000088c
 80023f4:	200008a8 	.word	0x200008a8
 80023f8:	2000a000 	.word	0x2000a000
 80023fc:	00000800 	.word	0x00000800

08002400 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002400:	4a03      	ldr	r2, [pc, #12]	; (8002410 <SystemInit+0x10>)
 8002402:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff fff2 	bl	8002400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f003 fcc9 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7ff fbb1 	bl	8001bac <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002458:	0800bb8c 	.word	0x0800bb8c
  ldr r2, =_sbss
 800245c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002460:	200008a4 	.word	0x200008a4

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>
	...

08002468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_InitTick+0x40>)
{
 800246c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800246e:	7818      	ldrb	r0, [r3, #0]
 8002470:	b908      	cbnz	r0, 8002476 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002472:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002474:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002476:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_InitTick+0x44>)
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002480:	6810      	ldr	r0, [r2, #0]
 8002482:	fbb0 f0f3 	udiv	r0, r0, r3
 8002486:	f000 ff37 	bl	80032f8 <HAL_SYSTICK_Config>
 800248a:	4604      	mov	r4, r0
 800248c:	2800      	cmp	r0, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002490:	2d0f      	cmp	r5, #15
 8002492:	d8ee      	bhi.n	8002472 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	4602      	mov	r2, r0
 8002496:	4629      	mov	r1, r5
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 fed8 	bl	8003250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_InitTick+0x48>)
 80024a2:	4620      	mov	r0, r4
 80024a4:	601d      	str	r5, [r3, #0]
  return status;
 80024a6:	e7e5      	b.n	8002474 <HAL_InitTick+0xc>
 80024a8:	20000014 	.word	0x20000014
 80024ac:	20000010 	.word	0x20000010
 80024b0:	20000018 	.word	0x20000018

080024b4 <HAL_Init>:
{
 80024b4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b6:	2003      	movs	r0, #3
 80024b8:	f000 feb8 	bl	800322c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff ffd3 	bl	8002468 <HAL_InitTick>
 80024c2:	4604      	mov	r4, r0
 80024c4:	b918      	cbnz	r0, 80024ce <HAL_Init+0x1a>
    HAL_MspInit();
 80024c6:	f7ff fd61 	bl	8001f8c <HAL_MspInit>
}
 80024ca:	4620      	mov	r0, r4
 80024cc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80024ce:	2401      	movs	r4, #1
 80024d0:	e7fb      	b.n	80024ca <HAL_Init+0x16>
	...

080024d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_IncTick+0x10>)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_IncTick+0x14>)
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	440b      	add	r3, r1
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000890 	.word	0x20000890
 80024e8:	20000014 	.word	0x20000014

080024ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <HAL_GetTick+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000890 	.word	0x20000890

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fff6 	bl	80024ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002500:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8002502:	bf1c      	itt	ne
 8002504:	4b05      	ldrne	r3, [pc, #20]	; (800251c <HAL_Delay+0x24>)
 8002506:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002508:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800250a:	bf18      	it	ne
 800250c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	f7ff ffed 	bl	80024ec <HAL_GetTick>
 8002512:	1b43      	subs	r3, r0, r5
 8002514:	42a3      	cmp	r3, r4
 8002516:	d3fa      	bcc.n	800250e <HAL_Delay+0x16>
  {
  }
}
 8002518:	bd38      	pop	{r3, r4, r5, pc}
 800251a:	bf00      	nop
 800251c:	20000014 	.word	0x20000014

08002520 <LL_ADC_SetChannelSamplingTime>:
{
 8002520:	b530      	push	{r4, r5, lr}
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002522:	0dcc      	lsrs	r4, r1, #23
 8002524:	f004 0404 	and.w	r4, r4, #4
 8002528:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 800252a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800252e:	5823      	ldr	r3, [r4, r0]
 8002530:	2507      	movs	r5, #7
 8002532:	408d      	lsls	r5, r1
 8002534:	ea23 0305 	bic.w	r3, r3, r5
 8002538:	fa02 f101 	lsl.w	r1, r2, r1
 800253c:	430b      	orrs	r3, r1
 800253e:	5023      	str	r3, [r4, r0]
}
 8002540:	bd30      	pop	{r4, r5, pc}

08002542 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002542:	6880      	ldr	r0, [r0, #8]
}
 8002544:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002548:	4770      	bx	lr
	...

0800254c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002552:	4604      	mov	r4, r0
 8002554:	2800      	cmp	r0, #0
 8002556:	f000 80c3 	beq.w	80026e0 <HAL_ADC_Init+0x194>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800255a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800255c:	b925      	cbnz	r5, 8002568 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255e:	f7ff fd2d 	bl	8001fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002562:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002564:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002568:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800256a:	6883      	ldr	r3, [r0, #8]
 800256c:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800256e:	bf41      	itttt	mi
 8002570:	6883      	ldrmi	r3, [r0, #8]
 8002572:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8002576:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 800257a:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800257c:	6883      	ldr	r3, [r0, #8]
 800257e:	00dd      	lsls	r5, r3, #3
 8002580:	f140 808e 	bpl.w	80026a0 <HAL_ADC_Init+0x154>
 8002584:	6883      	ldr	r3, [r0, #8]
 8002586:	00d9      	lsls	r1, r3, #3
 8002588:	f100 80a1 	bmi.w	80026ce <HAL_ADC_Init+0x182>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800259c:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259e:	f7ff ffd0 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ac:	f040 8095 	bne.w	80026da <HAL_ADC_Init+0x18e>
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025b4:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b8:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025bc:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025be:	07da      	lsls	r2, r3, #31
 80025c0:	d40e      	bmi.n	80025e0 <HAL_ADC_Init+0x94>
 80025c2:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <HAL_ADC_Init+0x198>)
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025ca:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	07db      	lsls	r3, r3, #31
 80025d0:	d406      	bmi.n	80025e0 <HAL_ADC_Init+0x94>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025d2:	4a45      	ldr	r2, [pc, #276]	; (80026e8 <HAL_ADC_Init+0x19c>)
 80025d4:	6865      	ldr	r5, [r4, #4]
 80025d6:	6893      	ldr	r3, [r2, #8]
 80025d8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025dc:	432b      	orrs	r3, r5
 80025de:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80025e0:	68e5      	ldr	r5, [r4, #12]
 80025e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e4:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80025e8:	432b      	orrs	r3, r5
 80025ea:	68a5      	ldr	r5, [r4, #8]
 80025ec:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ee:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f0:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80025f2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fa:	bf02      	ittt	eq
 80025fc:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80025fe:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002602:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002608:	b122      	cbz	r2, 8002614 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800260a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002610:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002612:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002614:	68c5      	ldr	r5, [r0, #12]
 8002616:	4a35      	ldr	r2, [pc, #212]	; (80026ec <HAL_ADC_Init+0x1a0>)
 8002618:	402a      	ands	r2, r5
 800261a:	4313      	orrs	r3, r2
 800261c:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800261e:	f7ff ff90 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002622:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	f002 0208 	and.w	r2, r2, #8
 800262a:	4302      	orrs	r2, r0
 800262c:	d120      	bne.n	8002670 <HAL_ADC_Init+0x124>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262e:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002630:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002634:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002636:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002638:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800263c:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002640:	f020 0002 	bic.w	r0, r0, #2
 8002644:	4302      	orrs	r2, r0
 8002646:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002648:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800264c:	2a01      	cmp	r2, #1
 800264e:	d140      	bne.n	80026d2 <HAL_ADC_Init+0x186>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002650:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8002654:	6918      	ldr	r0, [r3, #16]
 8002656:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800265a:	f020 0004 	bic.w	r0, r0, #4
 800265e:	432a      	orrs	r2, r5
 8002660:	4302      	orrs	r2, r0
 8002662:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002664:	4302      	orrs	r2, r0
 8002666:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002668:	4302      	orrs	r2, r0
 800266a:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800266e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002670:	6922      	ldr	r2, [r4, #16]
 8002672:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002674:	bf05      	ittet	eq
 8002676:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002678:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267a:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002680:	bf06      	itte	eq
 8002682:	f020 000f 	biceq.w	r0, r0, #15
 8002686:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002688:	f022 020f 	bicne.w	r2, r2, #15
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800268e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002690:	f023 0303 	bic.w	r3, r3, #3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800269a:	4608      	mov	r0, r1
 800269c:	b003      	add	sp, #12
 800269e:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80026a0:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <HAL_ADC_Init+0x1a4>)
 80026a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6083      	str	r3, [r0, #8]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_ADC_Init+0x1a8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 80026be:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80026c0:	9b01      	ldr	r3, [sp, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f43f af5e 	beq.w	8002584 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	e7f7      	b.n	80026be <HAL_ADC_Init+0x172>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2100      	movs	r1, #0
 80026d0:	e765      	b.n	800259e <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	e7c9      	b.n	800266e <HAL_ADC_Init+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80026e0:	2101      	movs	r1, #1
 80026e2:	e7da      	b.n	800269a <HAL_ADC_Init+0x14e>
 80026e4:	50040000 	.word	0x50040000
 80026e8:	50040300 	.word	0x50040300
 80026ec:	fff0c007 	.word	0xfff0c007
 80026f0:	00030d40 	.word	0x00030d40
 80026f4:	20000010 	.word	0x20000010

080026f8 <HAL_ADC_ConvCpltCallback>:
 80026f8:	4770      	bx	lr

080026fa <HAL_ADC_ConvHalfCpltCallback>:
 80026fa:	4770      	bx	lr

080026fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026fc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002700:	f7ff fffb 	bl	80026fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002704:	bd08      	pop	{r3, pc}

08002706 <HAL_ADC_LevelOutOfWindowCallback>:
 8002706:	4770      	bx	lr

08002708 <HAL_ADC_ErrorCallback>:
 8002708:	4770      	bx	lr
	...

0800270c <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 800270c:	6803      	ldr	r3, [r0, #0]
{
 800270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002712:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8002950 <HAL_ADC_IRQHandler+0x244>
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002716:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002718:	685e      	ldr	r6, [r3, #4]
 800271a:	f8d8 7008 	ldr.w	r7, [r8, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800271e:	07ab      	lsls	r3, r5, #30
{
 8002720:	4604      	mov	r4, r0
 8002722:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002726:	d50e      	bpl.n	8002746 <HAL_ADC_IRQHandler+0x3a>
 8002728:	07b0      	lsls	r0, r6, #30
 800272a:	d50c      	bpl.n	8002746 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800272c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800272e:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002730:	bf5e      	ittt	pl
 8002732:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 8002734:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 8002738:	6563      	strpl	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800273a:	4620      	mov	r0, r4
 800273c:	f000 fd12 	bl	8003164 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	2202      	movs	r2, #2
 8002744:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002746:	076a      	lsls	r2, r5, #29
 8002748:	d501      	bpl.n	800274e <HAL_ADC_IRQHandler+0x42>
 800274a:	0773      	lsls	r3, r6, #29
 800274c:	d403      	bmi.n	8002756 <HAL_ADC_IRQHandler+0x4a>
 800274e:	0728      	lsls	r0, r5, #28
 8002750:	d532      	bpl.n	80027b8 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002752:	0731      	lsls	r1, r6, #28
 8002754:	d530      	bpl.n	80027b8 <HAL_ADC_IRQHandler+0xac>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002756:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002758:	6820      	ldr	r0, [r4, #0]
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275a:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275c:	bf5e      	ittt	pl
 800275e:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 8002760:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 8002764:	6563      	strpl	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002766:	68c3      	ldr	r3, [r0, #12]
 8002768:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800276c:	d11e      	bne.n	80027ac <HAL_ADC_IRQHandler+0xa0>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_ADC_IRQHandler+0x23c>)
 8002770:	4298      	cmp	r0, r3
 8002772:	f000 80db 	beq.w	800292c <HAL_ADC_IRQHandler+0x220>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002776:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002778:	049b      	lsls	r3, r3, #18
 800277a:	d417      	bmi.n	80027ac <HAL_ADC_IRQHandler+0xa0>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	0719      	lsls	r1, r3, #28
 8002780:	d514      	bpl.n	80027ac <HAL_ADC_IRQHandler+0xa0>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002782:	f7ff fede 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002786:	2800      	cmp	r0, #0
 8002788:	f040 80b1 	bne.w	80028ee <HAL_ADC_IRQHandler+0x1e2>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800278c:	6822      	ldr	r2, [r4, #0]
 800278e:	6853      	ldr	r3, [r2, #4]
 8002790:	f023 030c 	bic.w	r3, r3, #12
 8002794:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002796:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800279c:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800279e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a0:	04da      	lsls	r2, r3, #19
 80027a2:	d403      	bmi.n	80027ac <HAL_ADC_IRQHandler+0xa0>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ffa3 	bl	80026f8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	220c      	movs	r2, #12
 80027b6:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027b8:	06ab      	lsls	r3, r5, #26
 80027ba:	d501      	bpl.n	80027c0 <HAL_ADC_IRQHandler+0xb4>
 80027bc:	06b0      	lsls	r0, r6, #26
 80027be:	d403      	bmi.n	80027c8 <HAL_ADC_IRQHandler+0xbc>
 80027c0:	0669      	lsls	r1, r5, #25
 80027c2:	d538      	bpl.n	8002836 <HAL_ADC_IRQHandler+0x12a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027c4:	0672      	lsls	r2, r6, #25
 80027c6:	d536      	bpl.n	8002836 <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ca:	4a5f      	ldr	r2, [pc, #380]	; (8002948 <HAL_ADC_IRQHandler+0x23c>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027cc:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027ce:	bf5e      	ittt	pl
 80027d0:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80027d2:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80027d6:	6563      	strpl	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027dc:	68d9      	ldr	r1, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027de:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027e0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80027e4:	d104      	bne.n	80027f0 <HAL_ADC_IRQHandler+0xe4>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027e6:	b11f      	cbz	r7, 80027f0 <HAL_ADC_IRQHandler+0xe4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027e8:	1fba      	subs	r2, r7, #6
 80027ea:	2a01      	cmp	r2, #1
 80027ec:	f200 8088 	bhi.w	8002900 <HAL_ADC_IRQHandler+0x1f4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027f0:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027f2:	b9d0      	cbnz	r0, 800282a <HAL_ADC_IRQHandler+0x11e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027f4:	0190      	lsls	r0, r2, #6
 80027f6:	d505      	bpl.n	8002804 <HAL_ADC_IRQHandler+0xf8>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027f8:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027fc:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002800:	4301      	orrs	r1, r0
 8002802:	d112      	bne.n	800282a <HAL_ADC_IRQHandler+0x11e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	0648      	lsls	r0, r1, #25
 8002808:	d50f      	bpl.n	800282a <HAL_ADC_IRQHandler+0x11e>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800280a:	0291      	lsls	r1, r2, #10
 800280c:	d40d      	bmi.n	800282a <HAL_ADC_IRQHandler+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	0712      	lsls	r2, r2, #28
 8002812:	d478      	bmi.n	8002906 <HAL_ADC_IRQHandler+0x1fa>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800281a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800281c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800281e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002822:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002824:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002826:	05d8      	lsls	r0, r3, #23
 8002828:	d576      	bpl.n	8002918 <HAL_ADC_IRQHandler+0x20c>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800282a:	4620      	mov	r0, r4
 800282c:	f000 fc96 	bl	800315c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	2260      	movs	r2, #96	; 0x60
 8002834:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002836:	0629      	lsls	r1, r5, #24
 8002838:	d50b      	bpl.n	8002852 <HAL_ADC_IRQHandler+0x146>
 800283a:	0632      	lsls	r2, r6, #24
 800283c:	d509      	bpl.n	8002852 <HAL_ADC_IRQHandler+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800283e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff ff5d 	bl	8002706 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002852:	05eb      	lsls	r3, r5, #23
 8002854:	d50c      	bpl.n	8002870 <HAL_ADC_IRQHandler+0x164>
 8002856:	05f0      	lsls	r0, r6, #23
 8002858:	d50a      	bpl.n	8002870 <HAL_ADC_IRQHandler+0x164>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800285a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002862:	4620      	mov	r0, r4
 8002864:	f000 fc7c 	bl	8003160 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002870:	05a9      	lsls	r1, r5, #22
 8002872:	d50c      	bpl.n	800288e <HAL_ADC_IRQHandler+0x182>
 8002874:	05b2      	lsls	r2, r6, #22
 8002876:	d50a      	bpl.n	800288e <HAL_ADC_IRQHandler+0x182>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002878:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800287a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002880:	4620      	mov	r0, r4
 8002882:	f000 fc6e 	bl	8003162 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800288e:	06eb      	lsls	r3, r5, #27
 8002890:	d518      	bpl.n	80028c4 <HAL_ADC_IRQHandler+0x1b8>
 8002892:	06f0      	lsls	r0, r6, #27
 8002894:	d516      	bpl.n	80028c4 <HAL_ADC_IRQHandler+0x1b8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002898:	b133      	cbz	r3, 80028a8 <HAL_ADC_IRQHandler+0x19c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800289a:	2f00      	cmp	r7, #0
 800289c:	d041      	beq.n	8002922 <HAL_ADC_IRQHandler+0x216>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800289e:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028a2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028a6:	d00a      	beq.n	80028be <HAL_ADC_IRQHandler+0x1b2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff ff25 	bl	8002708 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	2210      	movs	r2, #16
 80028c2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028c4:	0569      	lsls	r1, r5, #21
 80028c6:	d53c      	bpl.n	8002942 <HAL_ADC_IRQHandler+0x236>
 80028c8:	0572      	lsls	r2, r6, #21
 80028ca:	d53a      	bpl.n	8002942 <HAL_ADC_IRQHandler+0x236>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d2:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028e2:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028ea:	f000 bc38 	b.w	800315e <HAL_ADCEx_InjectedQueueOverflowCallback>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80028fe:	e755      	b.n	80027ac <HAL_ADC_IRQHandler+0xa0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_ADC_IRQHandler+0x240>)
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	e775      	b.n	80027f2 <HAL_ADC_IRQHandler+0xe6>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002906:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	65a3      	str	r3, [r4, #88]	; 0x58
 8002916:	e788      	b.n	800282a <HAL_ADC_IRQHandler+0x11e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002918:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6563      	str	r3, [r4, #84]	; 0x54
 8002920:	e783      	b.n	800282a <HAL_ADC_IRQHandler+0x11e>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f013 0f01 	tst.w	r3, #1
 800292a:	e7bc      	b.n	80028a6 <HAL_ADC_IRQHandler+0x19a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292c:	2f09      	cmp	r7, #9
 800292e:	d805      	bhi.n	800293c <HAL_ADC_IRQHandler+0x230>
 8002930:	f240 2321 	movw	r3, #545	; 0x221
 8002934:	40fb      	lsrs	r3, r7
 8002936:	07db      	lsls	r3, r3, #31
 8002938:	f53f af1d 	bmi.w	8002776 <HAL_ADC_IRQHandler+0x6a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_ADC_IRQHandler+0x240>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	e71a      	b.n	8002778 <HAL_ADC_IRQHandler+0x6c>
}
 8002942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002946:	bf00      	nop
 8002948:	50040100 	.word	0x50040100
 800294c:	50040000 	.word	0x50040000
 8002950:	50040300 	.word	0x50040300

08002954 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002958:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800295c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002960:	d121      	bne.n	80029a6 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	0708      	lsls	r0, r1, #28
 800296e:	d516      	bpl.n	800299e <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002970:	68d1      	ldr	r1, [r2, #12]
 8002972:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8002976:	d10e      	bne.n	8002996 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800297e:	d10a      	bne.n	8002996 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800298a:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298c:	bf5e      	ittt	pl
 800298e:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8002990:	f042 0201 	orrpl.w	r2, r2, #1
 8002994:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff feae 	bl	80026f8 <HAL_ADC_ConvCpltCallback>
}
 800299c:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800299e:	68d2      	ldr	r2, [r2, #12]
 80029a0:	f012 0f02 	tst.w	r2, #2
 80029a4:	e7eb      	b.n	800297e <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029a6:	06d2      	lsls	r2, r2, #27
 80029a8:	d503      	bpl.n	80029b2 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff feac 	bl	8002708 <HAL_ADC_ErrorCallback>
 80029b0:	e7f4      	b.n	800299c <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4718      	bx	r3

080029bc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80029be:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80029c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d0:	f7ff fe9a 	bl	8002708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d4:	bd08      	pop	{r3, pc}
	...

080029d8 <HAL_ADC_ConfigChannel>:
{
 80029d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80029da:	2300      	movs	r3, #0
 80029dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80029de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80029e2:	2b01      	cmp	r3, #1
{
 80029e4:	4605      	mov	r5, r0
 80029e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80029e8:	f000 81a5 	beq.w	8002d36 <HAL_ADC_ConfigChannel+0x35e>
 80029ec:	2301      	movs	r3, #1
 80029ee:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f2:	6800      	ldr	r0, [r0, #0]
 80029f4:	f7ff fda5 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f040 8196 	bne.w	8002d2a <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank <= 5U)
 80029fe:	684b      	ldr	r3, [r1, #4]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d809      	bhi.n	8002a18 <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 8002a04:	3b02      	subs	r3, #2
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	f200 8094 	bhi.w	8002b34 <HAL_ADC_ConfigChannel+0x15c>
 8002a0c:	e8df f003 	tbb	[pc, r3]
 8002a10:	8f8d8b02 	.word	0x8f8d8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a14:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a16:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a18:	6862      	ldr	r2, [r4, #4]
 8002a1a:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002a1c:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a1e:	0991      	lsrs	r1, r2, #6
 8002a20:	f001 010c 	and.w	r1, r1, #12
 8002a24:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	59ce      	ldr	r6, [r1, r7]
 8002a2e:	f04f 0c1f 	mov.w	ip, #31
 8002a32:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002a36:	4093      	lsls	r3, r2
 8002a38:	fa0c f202 	lsl.w	r2, ip, r2
 8002a3c:	ea26 0202 	bic.w	r2, r6, r2
 8002a40:	4313      	orrs	r3, r2
 8002a42:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a44:	f7ff fd7d 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a4a:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a4c:	6882      	ldr	r2, [r0, #8]
 8002a4e:	f002 0208 	and.w	r2, r2, #8
 8002a52:	430a      	orrs	r2, r1
 8002a54:	d124      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0xc8>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a56:	68a3      	ldr	r3, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a58:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a5e:	d16b      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a60:	f7ff fd5e 	bl	8002520 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a64:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a66:	6953      	ldr	r3, [r2, #20]
 8002a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a6e:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a70:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a72:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a74:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a76:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a78:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8002a7c:	d064      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a7e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002a82:	0048      	lsls	r0, r1, #1
 8002a84:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8002a86:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8002a8a:	4081      	lsls	r1, r0
 8002a8c:	48ab      	ldr	r0, [pc, #684]	; (8002d3c <HAL_ADC_ConfigChannel+0x364>)
 8002a8e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002a92:	4038      	ands	r0, r7
 8002a94:	4310      	orrs	r0, r2
 8002a96:	4301      	orrs	r1, r0
 8002a98:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002a9c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa0:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa2:	6883      	ldr	r3, [r0, #8]
 8002aa4:	07d9      	lsls	r1, r3, #31
 8002aa6:	d433      	bmi.n	8002b10 <HAL_ADC_ConfigChannel+0x138>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002aa8:	68e7      	ldr	r7, [r4, #12]
 8002aaa:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002aac:	4aa4      	ldr	r2, [pc, #656]	; (8002d40 <HAL_ADC_ConfigChannel+0x368>)
 8002aae:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8002ab2:	f007 0c18 	and.w	ip, r7, #24
 8002ab6:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002aba:	fa22 f20c 	lsr.w	r2, r2, ip
 8002abe:	401a      	ands	r2, r3
 8002ac0:	ea21 0106 	bic.w	r1, r1, r6
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aca:	4a9e      	ldr	r2, [pc, #632]	; (8002d44 <HAL_ADC_ConfigChannel+0x36c>)
 8002acc:	4297      	cmp	r7, r2
 8002ace:	d11f      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x138>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad0:	2e00      	cmp	r6, #0
 8002ad2:	f040 808e 	bne.w	8002bf2 <HAL_ADC_ConfigChannel+0x21a>
 8002ad6:	0e9a      	lsrs	r2, r3, #26
 8002ad8:	3201      	adds	r2, #1
 8002ada:	f002 071f 	and.w	r7, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae2:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002ae8:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	f200 80b3 	bhi.w	8002c56 <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af0:	430a      	orrs	r2, r1
 8002af2:	2e00      	cmp	r6, #0
 8002af4:	f040 8099 	bne.w	8002c2a <HAL_ADC_ConfigChannel+0x252>
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002b04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b06:	ea42 0103 	orr.w	r1, r2, r3
 8002b0a:	68a2      	ldr	r2, [r4, #8]
 8002b0c:	f7ff fd08 	bl	8002520 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b10:	6821      	ldr	r1, [r4, #0]
 8002b12:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <HAL_ADC_ConfigChannel+0x370>)
 8002b14:	4219      	tst	r1, r3
 8002b16:	f040 80b9 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x2b4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002b22:	b003      	add	sp, #12
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b26:	2312      	movs	r3, #18
 8002b28:	e775      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b2a:	2318      	movs	r3, #24
 8002b2c:	e773      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b32:	e770      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b34:	2306      	movs	r3, #6
 8002b36:	e76e      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f7ff fcf1 	bl	8002520 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b3e:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b40:	6953      	ldr	r3, [r2, #20]
 8002b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b46:	e791      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b48:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8002b4a:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4c:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b50:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b54:	2e00      	cmp	r6, #0
 8002b56:	d138      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x1f2>
 8002b58:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b5c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002b5e:	bf02      	ittt	eq
 8002b60:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8002b62:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002b66:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b68:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b72:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b76:	bb68      	cbnz	r0, 8002bd4 <HAL_ADC_ConfigChannel+0x1fc>
 8002b78:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b7c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002b7e:	bf02      	ittt	eq
 8002b80:	685a      	ldreq	r2, [r3, #4]
 8002b82:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002b86:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b88:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b96:	bb10      	cbnz	r0, 8002bde <HAL_ADC_ConfigChannel+0x206>
 8002b98:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b9c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002b9e:	bf02      	ittt	eq
 8002ba0:	689a      	ldreq	r2, [r3, #8]
 8002ba2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002ba6:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ba8:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb2:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bb6:	b9b8      	cbnz	r0, 8002be8 <HAL_ADC_ConfigChannel+0x210>
 8002bb8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bbc:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002bbe:	bf02      	ittt	eq
 8002bc0:	68da      	ldreq	r2, [r3, #12]
 8002bc2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002bc6:	60da      	streq	r2, [r3, #12]
}
 8002bc8:	e76a      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	e7c3      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	e7ce      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	e7d9      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	e7e4      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002bf6:	b132      	cbz	r2, 8002c06 <HAL_ADC_ConfigChannel+0x22e>
  return __builtin_clz(value);
 8002bf8:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfc:	3201      	adds	r2, #1
 8002bfe:	f002 021f 	and.w	r2, r2, #31
 8002c02:	2a09      	cmp	r2, #9
 8002c04:	d816      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002c0a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c0e:	3201      	adds	r2, #1
 8002c10:	0692      	lsls	r2, r2, #26
 8002c12:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002c1a:	fab1 f181 	clz	r1, r1
 8002c1e:	3101      	adds	r1, #1
 8002c20:	f001 071f 	and.w	r7, r1, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	40b9      	lsls	r1, r7
 8002c28:	e762      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	e762      	b.n	8002afa <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	3201      	adds	r2, #1
 8002c3e:	0692      	lsls	r2, r2, #26
 8002c40:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002c48:	fab1 f181 	clz	r1, r1
 8002c4c:	3101      	adds	r1, #1
 8002c4e:	f001 071f 	and.w	r7, r1, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	40b9      	lsls	r1, r7
 8002c56:	430a      	orrs	r2, r1
 8002c58:	b95e      	cbnz	r6, 8002c72 <HAL_ADC_ConfigChannel+0x29a>
 8002c5a:	0e9e      	lsrs	r6, r3, #26
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	f006 061f 	and.w	r6, r6, #31
 8002c62:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002c66:	391e      	subs	r1, #30
 8002c68:	0509      	lsls	r1, r1, #20
 8002c6a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	e74b      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002c76:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c7a:	3101      	adds	r1, #1
 8002c7c:	f001 031f 	and.w	r3, r1, #31
 8002c80:	f06f 061d 	mvn.w	r6, #29
 8002c84:	2103      	movs	r1, #3
 8002c86:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002c8a:	e7ed      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x290>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8e:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_ADC_ConfigChannel+0x378>)
 8002c90:	6898      	ldr	r0, [r3, #8]
 8002c92:	4291      	cmp	r1, r2
 8002c94:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8002c98:	d11e      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x300>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c9a:	0202      	lsls	r2, r0, #8
 8002c9c:	f53f af3d 	bmi.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca0:	6829      	ldr	r1, [r5, #0]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_ADC_ConfigChannel+0x37c>)
 8002ca4:	4291      	cmp	r1, r2
 8002ca6:	f47f af38 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002cb0:	4322      	orrs	r2, r4
 8002cb2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cb6:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_ADC_ConfigChannel+0x380>)
 8002cba:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <HAL_ADC_ConfigChannel+0x384>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002cc8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f43f af24 	beq.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 8002cd2:	9b01      	ldr	r3, [sp, #4]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	e7f7      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x2f0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd8:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_ADC_ConfigChannel+0x388>)
 8002cda:	4291      	cmp	r1, r2
 8002cdc:	d111      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x32a>
 8002cde:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002ce2:	f47f af1a 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce6:	6829      	ldr	r1, [r5, #0]
 8002ce8:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8002cec:	4291      	cmp	r1, r2
 8002cee:	f47f af14 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002cf8:	4322      	orrs	r2, r4
 8002cfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	e70c      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_ADC_ConfigChannel+0x38c>)
 8002d04:	4291      	cmp	r1, r2
 8002d06:	f47f af08 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d0a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002d0e:	f47f af04 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d12:	6829      	ldr	r1, [r5, #0]
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_ADC_ConfigChannel+0x37c>)
 8002d16:	4291      	cmp	r1, r2
 8002d18:	f47f aeff 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d22:	4322      	orrs	r2, r4
 8002d24:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d28:	e7e9      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002d2c:	f042 0220 	orr.w	r2, r2, #32
 8002d30:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002d32:	4618      	mov	r0, r3
 8002d34:	e6f2      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 8002d36:	2002      	movs	r0, #2
 8002d38:	e6f3      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x14a>
 8002d3a:	bf00      	nop
 8002d3c:	03fff000 	.word	0x03fff000
 8002d40:	0007ffff 	.word	0x0007ffff
 8002d44:	407f0000 	.word	0x407f0000
 8002d48:	80080000 	.word	0x80080000
 8002d4c:	50040300 	.word	0x50040300
 8002d50:	c7520000 	.word	0xc7520000
 8002d54:	50040000 	.word	0x50040000
 8002d58:	20000010 	.word	0x20000010
 8002d5c:	00030d40 	.word	0x00030d40
 8002d60:	cb840000 	.word	0xcb840000
 8002d64:	80000001 	.word	0x80000001

08002d68 <ADC_Enable>:
{
 8002d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002d6a:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002d6e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d70:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d72:	07dd      	lsls	r5, r3, #31
{
 8002d74:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d76:	d502      	bpl.n	8002d7e <ADC_Enable+0x16>
  return HAL_OK;
 8002d78:	2000      	movs	r0, #0
}
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d7e:	6891      	ldr	r1, [r2, #8]
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <ADC_Enable+0x9c>)
 8002d82:	4219      	tst	r1, r3
 8002d84:	d009      	beq.n	8002d9a <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7ef      	b.n	8002d7a <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8002d9a:	6893      	ldr	r3, [r2, #8]
 8002d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <ADC_Enable+0xa0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dae:	0218      	lsls	r0, r3, #8
 8002db0:	d419      	bmi.n	8002de6 <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 8002db2:	f7ff fb9b 	bl	80024ec <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8002db6:	4e15      	ldr	r6, [pc, #84]	; (8002e0c <ADC_Enable+0xa4>)
 8002db8:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	6813      	ldr	r3, [r2, #0]
 8002dbe:	07db      	lsls	r3, r3, #31
 8002dc0:	d4da      	bmi.n	8002d78 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dc2:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc4:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8002dc6:	bf5f      	itttt	pl
 8002dc8:	6893      	ldrpl	r3, [r2, #8]
 8002dca:	4033      	andpl	r3, r6
 8002dcc:	f043 0301 	orrpl.w	r3, r3, #1
 8002dd0:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dd2:	f7ff fb8b 	bl	80024ec <HAL_GetTick>
 8002dd6:	1b40      	subs	r0, r0, r5
 8002dd8:	2802      	cmp	r0, #2
 8002dda:	d9ee      	bls.n	8002dba <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	07da      	lsls	r2, r3, #31
 8002de2:	d4ea      	bmi.n	8002dba <ADC_Enable+0x52>
 8002de4:	e7cf      	b.n	8002d86 <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <ADC_Enable+0xa8>)
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <ADC_Enable+0xac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fbb3 f2f2 	udiv	r2, r3, r2
 8002df0:	230c      	movs	r3, #12
 8002df2:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8002df6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002df8:	9b01      	ldr	r3, [sp, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0d9      	beq.n	8002db2 <ADC_Enable+0x4a>
        wait_loop_index--;
 8002dfe:	9b01      	ldr	r3, [sp, #4]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	e7f8      	b.n	8002df6 <ADC_Enable+0x8e>
 8002e04:	8000003f 	.word	0x8000003f
 8002e08:	50040300 	.word	0x50040300
 8002e0c:	7fffffc0 	.word	0x7fffffc0
 8002e10:	20000010 	.word	0x20000010
 8002e14:	00030d40 	.word	0x00030d40

08002e18 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e18:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_ADC_Start_IT+0x140>)
{
 8002e1a:	b570      	push	{r4, r5, r6, lr}
 8002e1c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	689e      	ldr	r6, [r3, #8]
 8002e22:	f7ff fb8e 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002e26:	4605      	mov	r5, r0
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	f040 808f 	bne.w	8002f4c <HAL_ADC_Start_IT+0x134>
    __HAL_LOCK(hadc);
 8002e2e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	f000 808a 	beq.w	8002f4c <HAL_ADC_Start_IT+0x134>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff ff92 	bl	8002d68 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d17e      	bne.n	8002f46 <HAL_ADC_Start_IT+0x12e>
      ADC_STATE_CLR_SET(hadc->State,
 8002e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e4a:	4944      	ldr	r1, [pc, #272]	; (8002f5c <HAL_ADC_Start_IT+0x144>)
      ADC_STATE_CLR_SET(hadc->State,
 8002e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	f006 021f 	and.w	r2, r6, #31
 8002e62:	d075      	beq.n	8002f50 <HAL_ADC_Start_IT+0x138>
 8002e64:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e66:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002e68:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8002e6c:	6565      	str	r5, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e6e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002e70:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e74:	bf1c      	itt	ne
 8002e76:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 8002e78:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e7e:	251c      	movs	r5, #28
 8002e80:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002e82:	2500      	movs	r5, #0
 8002e84:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e88:	685d      	ldr	r5, [r3, #4]
 8002e8a:	f025 051c 	bic.w	r5, r5, #28
 8002e8e:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002e90:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002e92:	685e      	ldr	r6, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002e94:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002e96:	bf0c      	ite	eq
 8002e98:	f046 0608 	orreq.w	r6, r6, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002e9c:	f046 0604 	orrne.w	r6, r6, #4
 8002ea0:	605e      	str	r6, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ea2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002ea4:	b91e      	cbnz	r6, 8002eae <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea6:	685e      	ldr	r6, [r3, #4]
 8002ea8:	f046 0610 	orr.w	r6, r6, #16
 8002eac:	605e      	str	r6, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d007      	beq.n	8002ec2 <HAL_ADC_Start_IT+0xaa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb2:	2a09      	cmp	r2, #9
 8002eb4:	d828      	bhi.n	8002f08 <HAL_ADC_Start_IT+0xf0>
 8002eb6:	f240 2621 	movw	r6, #545	; 0x221
 8002eba:	fa26 f202 	lsr.w	r2, r6, r2
 8002ebe:	07d6      	lsls	r6, r2, #31
 8002ec0:	d522      	bpl.n	8002f08 <HAL_ADC_Start_IT+0xf0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	0191      	lsls	r1, r2, #6
 8002ec6:	d516      	bpl.n	8002ef6 <HAL_ADC_Start_IT+0xde>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ec8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002eca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ece:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ed2:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ed4:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002ed6:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ed8:	bf0b      	itete	eq
 8002eda:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ede:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ee2:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ee4:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002ee6:	bf0b      	itete	eq
 8002ee8:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002eea:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002eec:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002ef0:	f042 0220 	orrne.w	r2, r2, #32
 8002ef4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f00:	f042 0204 	orr.w	r2, r2, #4
 8002f04:	609a      	str	r2, [r3, #8]
}
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f08:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f0e:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f10:	68ca      	ldr	r2, [r1, #12]
 8002f12:	0192      	lsls	r2, r2, #6
 8002f14:	d5f7      	bpl.n	8002f06 <HAL_ADC_Start_IT+0xee>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f16:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f20:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f22:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002f24:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f26:	bf0b      	itete	eq
 8002f28:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f2c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f30:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f32:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f34:	bf0b      	itete	eq
 8002f36:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f38:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f3a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f3e:	f042 0220 	orrne.w	r2, r2, #32
 8002f42:	605a      	str	r2, [r3, #4]
              break;
 8002f44:	e7df      	b.n	8002f06 <HAL_ADC_Start_IT+0xee>
      __HAL_UNLOCK(hadc);
 8002f46:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002f4a:	e7dc      	b.n	8002f06 <HAL_ADC_Start_IT+0xee>
    tmp_hal_status = HAL_BUSY;
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	e7da      	b.n	8002f06 <HAL_ADC_Start_IT+0xee>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_ADC_Start_IT+0x148>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d087      	beq.n	8002e66 <HAL_ADC_Start_IT+0x4e>
 8002f56:	e78a      	b.n	8002e6e <HAL_ADC_Start_IT+0x56>
 8002f58:	50040300 	.word	0x50040300
 8002f5c:	50040100 	.word	0x50040100
 8002f60:	50040000 	.word	0x50040000

08002f64 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_ADC_Start_DMA+0xe0>)
{
 8002f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6a:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f6c:	6800      	ldr	r0, [r0, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
{
 8002f70:	460e      	mov	r6, r1
 8002f72:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f74:	f7ff fae5 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d15d      	bne.n	8003038 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002f7c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002f80:	2a01      	cmp	r2, #1
 8002f82:	d059      	beq.n	8003038 <HAL_ADC_Start_DMA+0xd4>
 8002f84:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f88:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002f8c:	f04f 0301 	mov.w	r3, #1
 8002f90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f94:	d84b      	bhi.n	800302e <HAL_ADC_Start_DMA+0xca>
 8002f96:	f240 2021 	movw	r0, #545	; 0x221
 8002f9a:	fa20 f008 	lsr.w	r0, r0, r8
 8002f9e:	43c0      	mvns	r0, r0
 8002fa0:	ea10 0503 	ands.w	r5, r0, r3
 8002fa4:	d143      	bne.n	800302e <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f7ff fede 	bl	8002d68 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d13b      	bne.n	8003028 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 8002fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fb2:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_ADC_Start_DMA+0xe4>)
 8002fc4:	4299      	cmp	r1, r3
 8002fc6:	d039      	beq.n	800303c <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002fce:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fd4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fd8:	bf1c      	itt	ne
 8002fda:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8002fdc:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_ADC_Start_DMA+0xe8>)
 8002fe4:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_ADC_Start_DMA+0xec>)
 8002fe8:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_ADC_Start_DMA+0xf0>)
 8002fec:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fee:	231c      	movs	r3, #28
 8002ff0:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ff8:	684b      	ldr	r3, [r1, #4]
 8002ffa:	f043 0310 	orr.w	r3, r3, #16
 8002ffe:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003000:	68cb      	ldr	r3, [r1, #12]
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003008:	4632      	mov	r2, r6
 800300a:	463b      	mov	r3, r7
 800300c:	3140      	adds	r1, #64	; 0x40
 800300e:	f000 f9f3 	bl	80033f8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003012:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003014:	6893      	ldr	r3, [r2, #8]
 8003016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6093      	str	r3, [r2, #8]
}
 8003024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003028:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800302c:	e7fa      	b.n	8003024 <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 800302e:	2300      	movs	r3, #0
 8003030:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8003034:	2001      	movs	r0, #1
 8003036:	e7f5      	b.n	8003024 <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 8003038:	2002      	movs	r0, #2
 800303a:	e7f3      	b.n	8003024 <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800303c:	f1b8 0f00 	cmp.w	r8, #0
 8003040:	d0c2      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0x64>
 8003042:	e7c5      	b.n	8002fd0 <HAL_ADC_Start_DMA+0x6c>
 8003044:	50040300 	.word	0x50040300
 8003048:	50040100 	.word	0x50040100
 800304c:	08002955 	.word	0x08002955
 8003050:	080026fd 	.word	0x080026fd
 8003054:	080029bd 	.word	0x080029bd

08003058 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003058:	6802      	ldr	r2, [r0, #0]
{
 800305a:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800305c:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305e:	6891      	ldr	r1, [r2, #8]
 8003060:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003062:	07c8      	lsls	r0, r1, #31
 8003064:	d401      	bmi.n	800306a <ADC_Disable+0x12>
  return HAL_OK;
 8003066:	2000      	movs	r0, #0
}
 8003068:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800306a:	0799      	lsls	r1, r3, #30
 800306c:	d4fb      	bmi.n	8003066 <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800306e:	6893      	ldr	r3, [r2, #8]
 8003070:	f003 030d 	and.w	r3, r3, #13
 8003074:	2b01      	cmp	r3, #1
 8003076:	d119      	bne.n	80030ac <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8003078:	6893      	ldr	r3, [r2, #8]
 800307a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800307e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003088:	2303      	movs	r3, #3
 800308a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800308c:	f7ff fa2e 	bl	80024ec <HAL_GetTick>
 8003090:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	07db      	lsls	r3, r3, #31
 8003098:	d5e5      	bpl.n	8003066 <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800309a:	f7ff fa27 	bl	80024ec <HAL_GetTick>
 800309e:	1b40      	subs	r0, r0, r5
 80030a0:	2802      	cmp	r0, #2
 80030a2:	d9f6      	bls.n	8003092 <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	07da      	lsls	r2, r3, #31
 80030aa:	d5f2      	bpl.n	8003092 <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
 80030be:	e7d3      	b.n	8003068 <ADC_Disable+0x10>

080030c0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030c0:	6880      	ldr	r0, [r0, #8]
}
 80030c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80030d2:	2b01      	cmp	r3, #1
{
 80030d4:	4604      	mov	r4, r0
 80030d6:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80030d8:	d03e      	beq.n	8003158 <HAL_ADCEx_Calibration_Start+0x90>
 80030da:	2301      	movs	r3, #1
 80030dc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030e0:	f7ff ffba 	bl	8003058 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d133      	bne.n	8003150 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030ea:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80030f0:	f022 0202 	bic.w	r2, r2, #2
 80030f4:	f042 0202 	orr.w	r2, r2, #2
 80030f8:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80030fa:	68b3      	ldr	r3, [r6, #8]
 80030fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003104:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8003108:	432b      	orrs	r3, r5
 800310a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800310e:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003110:	68b3      	ldr	r3, [r6, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da12      	bge.n	800313c <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8003116:	9b01      	ldr	r3, [sp, #4]
 8003118:	3301      	adds	r3, #1
 800311a:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003122:	d3f5      	bcc.n	8003110 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003124:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003126:	f023 0312 	bic.w	r3, r3, #18
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8003136:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003138:	b002      	add	sp, #8
 800313a:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800313c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003148:	2300      	movs	r3, #0
 800314a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 800314e:	e7f3      	b.n	8003138 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003150:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	e7f6      	b.n	8003146 <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8003158:	2002      	movs	r0, #2
 800315a:	e7ed      	b.n	8003138 <HAL_ADCEx_Calibration_Start+0x70>

0800315c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800315c:	4770      	bx	lr

0800315e <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800315e:	4770      	bx	lr

08003160 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8003160:	4770      	bx	lr

08003162 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8003162:	4770      	bx	lr

08003164 <HAL_ADCEx_EndOfSamplingCallback>:
 8003164:	4770      	bx	lr
	...

08003168 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003168:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800316a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
{
 8003170:	b09b      	sub	sp, #108	; 0x6c
 8003172:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003174:	d052      	beq.n	800321c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003176:	2301      	movs	r3, #1
 8003178:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800317c:	6817      	ldr	r7, [r2, #0]
 800317e:	4c28      	ldr	r4, [pc, #160]	; (8003220 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003180:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003182:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003184:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003186:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003188:	d008      	beq.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318a:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800318c:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	f041 0120 	orr.w	r1, r1, #32
 8003194:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 8003196:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003198:	b01b      	add	sp, #108	; 0x6c
 800319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800319c:	4e21      	ldr	r6, [pc, #132]	; (8003224 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff ff8e 	bl	80030c0 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a6:	6810      	ldr	r0, [r2, #0]
 80031a8:	f7ff ff8a 	bl	80030c0 <LL_ADC_REG_IsConversionOngoing>
 80031ac:	4320      	orrs	r0, r4
 80031ae:	d130      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b0:	4c1d      	ldr	r4, [pc, #116]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80031b2:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031b4:	68a3      	ldr	r3, [r4, #8]
 80031b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ba:	b1e5      	cbz	r5, 80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031bc:	6848      	ldr	r0, [r1, #4]
 80031be:	4303      	orrs	r3, r0
 80031c0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80031c4:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80031c8:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ce:	4303      	orrs	r3, r0
 80031d0:	f013 0301 	ands.w	r3, r3, #1
 80031d4:	d004      	beq.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80031d8:	2300      	movs	r3, #0
 80031da:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80031de:	e7db      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 80031e0:	6889      	ldr	r1, [r1, #8]
 80031e2:	68a0      	ldr	r0, [r4, #8]
 80031e4:	430d      	orrs	r5, r1
 80031e6:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80031ea:	f021 010f 	bic.w	r1, r1, #15
 80031ee:	430d      	orrs	r5, r1
 80031f0:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80031f2:	4618      	mov	r0, r3
 80031f4:	e7f0      	b.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031f6:	60a3      	str	r3, [r4, #8]
 80031f8:	68b8      	ldr	r0, [r7, #8]
 80031fa:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fc:	4303      	orrs	r3, r0
 80031fe:	f013 0301 	ands.w	r3, r3, #1
 8003202:	d1e8      	bne.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003204:	68a1      	ldr	r1, [r4, #8]
 8003206:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800320a:	f021 010f 	bic.w	r1, r1, #15
 800320e:	60a1      	str	r1, [r4, #8]
 8003210:	e7ef      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003212:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003214:	f041 0120 	orr.w	r1, r1, #32
 8003218:	6551      	str	r1, [r2, #84]	; 0x54
 800321a:	e7ea      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 800321c:	2002      	movs	r0, #2
 800321e:	e7bb      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8003220:	50040000 	.word	0x50040000
 8003224:	50040100 	.word	0x50040100
 8003228:	50040300 	.word	0x50040300

0800322c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800322e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003248:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003252:	b530      	push	{r4, r5, lr}
 8003254:	68dc      	ldr	r4, [r3, #12]
 8003256:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800325a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003260:	2d04      	cmp	r5, #4
 8003262:	bf28      	it	cs
 8003264:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326c:	bf8c      	ite	hi
 800326e:	3c03      	subhi	r4, #3
 8003270:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003272:	fa03 f505 	lsl.w	r5, r3, r5
 8003276:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327a:	40a3      	lsls	r3, r4
 800327c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8003282:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	bfac      	ite	ge
 800328a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	4a08      	ldrlt	r2, [pc, #32]	; (80032b0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	bfb8      	it	lt
 8003296:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	b2db      	uxtb	r3, r3
 800329c:	bfaa      	itet	ge
 800329e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80032a8:	bd30      	pop	{r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00
 80032b0:	e000ed14 	.word	0xe000ed14

080032b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032b4:	2800      	cmp	r0, #0
 80032b6:	db08      	blt.n	80032ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b8:	2301      	movs	r3, #1
 80032ba:	0942      	lsrs	r2, r0, #5
 80032bc:	f000 001f 	and.w	r0, r0, #31
 80032c0:	fa03 f000 	lsl.w	r0, r3, r0
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <HAL_NVIC_EnableIRQ+0x18>)
 80032c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032d0:	2800      	cmp	r0, #0
 80032d2:	db0d      	blt.n	80032f0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d4:	0943      	lsrs	r3, r0, #5
 80032d6:	2201      	movs	r2, #1
 80032d8:	f000 001f 	and.w	r0, r0, #31
 80032dc:	fa02 f000 	lsl.w	r0, r2, r0
 80032e0:	3320      	adds	r3, #32
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_NVIC_DisableIRQ+0x24>)
 80032e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032ec:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f8:	3801      	subs	r0, #1
 80032fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80032fe:	d20b      	bcs.n	8003318 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003306:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	21f0      	movs	r1, #240	; 0xf0
 800330a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003310:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003312:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003314:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003316:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003318:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003320:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003322:	2800      	cmp	r0, #0
 8003324:	d05b      	beq.n	80033de <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003326:	6801      	ldr	r1, [r0, #0]
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_DMA_Init+0xc4>)
 800332a:	4299      	cmp	r1, r3
 800332c:	f04f 0414 	mov.w	r4, #20
 8003330:	d842      	bhi.n	80033b8 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003332:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_DMA_Init+0xc8>)
 8003334:	440a      	add	r2, r1
 8003336:	fbb2 f2f4 	udiv	r2, r2, r4
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800333e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8003342:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003344:	2302      	movs	r3, #2
 8003346:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800334a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003350:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003352:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	432b      	orrs	r3, r5
 8003356:	6945      	ldr	r5, [r0, #20]
 8003358:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	6985      	ldr	r5, [r0, #24]
 800335c:	432b      	orrs	r3, r5
 800335e:	69c5      	ldr	r5, [r0, #28]
 8003360:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003364:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800336e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003370:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8003374:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003376:	d016      	beq.n	80033a6 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003378:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 800337a:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800337c:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003380:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003382:	230f      	movs	r3, #15
 8003384:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003386:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_DMA_Init+0xcc>)
 800338a:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800338c:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8003390:	d11a      	bne.n	80033c8 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003392:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 8003396:	4013      	ands	r3, r2
 8003398:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800339c:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 80033a0:	431c      	orrs	r4, r3
 80033a2:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033a8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033aa:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80033b0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80033b4:	4618      	mov	r0, r3
}
 80033b6:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_DMA_Init+0xd0>)
 80033ba:	440b      	add	r3, r1
 80033bc:	fbb3 f3f4 	udiv	r3, r3, r4
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_DMA_Init+0xd4>)
 80033c6:	e7bc      	b.n	8003342 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033c8:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 80033cc:	400b      	ands	r3, r1
 80033ce:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033d2:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 80033d6:	431c      	orrs	r4, r3
 80033d8:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 80033dc:	e7e3      	b.n	80033a6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80033de:	2001      	movs	r0, #1
 80033e0:	e7e9      	b.n	80033b6 <HAL_DMA_Init+0x96>
 80033e2:	bf00      	nop
 80033e4:	40020407 	.word	0x40020407
 80033e8:	bffdfff8 	.word	0xbffdfff8
 80033ec:	40020000 	.word	0x40020000
 80033f0:	bffdfbf8 	.word	0xbffdfbf8
 80033f4:	40020400 	.word	0x40020400

080033f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033fa:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80033fe:	2c01      	cmp	r4, #1
 8003400:	d037      	beq.n	8003472 <HAL_DMA_Start_IT+0x7a>
 8003402:	2401      	movs	r4, #1
 8003404:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003408:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800340c:	2c01      	cmp	r4, #1
 800340e:	b2e5      	uxtb	r5, r4
 8003410:	f04f 0600 	mov.w	r6, #0
 8003414:	f04f 0402 	mov.w	r4, #2
 8003418:	d129      	bne.n	800346e <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800341a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800341e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003420:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003422:	6826      	ldr	r6, [r4, #0]
 8003424:	f026 0601 	bic.w	r6, r6, #1
 8003428:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342a:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 800342e:	f007 071c 	and.w	r7, r7, #28
 8003432:	40bd      	lsls	r5, r7
 8003434:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003436:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003438:	6883      	ldr	r3, [r0, #8]
 800343a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800343c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800343e:	bf0b      	itete	eq
 8003440:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003442:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003444:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003446:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003448:	b14b      	cbz	r3, 800345e <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003450:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2000      	movs	r0, #0
}
 800345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f043 030a 	orr.w	r3, r3, #10
 800346c:	e7f0      	b.n	8003450 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 800346e:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003472:	2002      	movs	r0, #2
 8003474:	e7f2      	b.n	800345c <HAL_DMA_Start_IT+0x64>

08003476 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800347a:	2b02      	cmp	r3, #2
 800347c:	d006      	beq.n	800348c <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347e:	2304      	movs	r3, #4
 8003480:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003482:	2300      	movs	r3, #0
 8003484:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003488:	2001      	movs	r0, #1
 800348a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	f022 020e 	bic.w	r2, r2, #14
 8003494:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800349e:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 80034a2:	2201      	movs	r2, #1
 80034a4:	f003 031c 	and.w	r3, r3, #28
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80034ae:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80034b0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 80034b8:	4618      	mov	r0, r3
}
 80034ba:	4770      	bx	lr

080034bc <HAL_DMA_Abort_IT>:
{
 80034bc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034be:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80034c2:	2a02      	cmp	r2, #2
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	2204      	movs	r2, #4
 80034c8:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
}
 80034cc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ce:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80034d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	6811      	ldr	r1, [r2, #0]
 80034d4:	f021 010e 	bic.w	r1, r1, #14
 80034d8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034da:	6811      	ldr	r1, [r2, #0]
 80034dc:	f021 0101 	bic.w	r1, r1, #1
 80034e0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80034e6:	2101      	movs	r1, #1
 80034e8:	f002 021c 	and.w	r2, r2, #28
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80034f2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80034f4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034f8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80034fc:	b113      	cbz	r3, 8003504 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80034fe:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	4620      	mov	r0, r4
 8003502:	e7e3      	b.n	80034cc <HAL_DMA_Abort_IT+0x10>
 8003504:	4618      	mov	r0, r3
 8003506:	e7e1      	b.n	80034cc <HAL_DMA_Abort_IT+0x10>

08003508 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003508:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800350a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800350c:	6803      	ldr	r3, [r0, #0]
{
 800350e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003510:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003514:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003516:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003518:	2404      	movs	r4, #4
 800351a:	4094      	lsls	r4, r2
 800351c:	4234      	tst	r4, r6
 800351e:	d00e      	beq.n	800353e <HAL_DMA_IRQHandler+0x36>
 8003520:	f015 0f04 	tst.w	r5, #4
 8003524:	d00b      	beq.n	800353e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352a:	bf5e      	ittt	pl
 800352c:	681a      	ldrpl	r2, [r3, #0]
 800352e:	f022 0204 	bicpl.w	r2, r2, #4
 8003532:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003534:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003536:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8003538:	b373      	cbz	r3, 8003598 <HAL_DMA_IRQHandler+0x90>
}
 800353a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800353c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800353e:	2402      	movs	r4, #2
 8003540:	4094      	lsls	r4, r2
 8003542:	4234      	tst	r4, r6
 8003544:	d012      	beq.n	800356c <HAL_DMA_IRQHandler+0x64>
 8003546:	f015 0f02 	tst.w	r5, #2
 800354a:	d00f      	beq.n	800356c <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	0695      	lsls	r5, r2, #26
 8003550:	d406      	bmi.n	8003560 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f022 020a 	bic.w	r2, r2, #10
 8003558:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800355a:	2301      	movs	r3, #1
 800355c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003560:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003562:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003564:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003568:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800356a:	e7e5      	b.n	8003538 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800356c:	2408      	movs	r4, #8
 800356e:	4094      	lsls	r4, r2
 8003570:	4234      	tst	r4, r6
 8003572:	d011      	beq.n	8003598 <HAL_DMA_IRQHandler+0x90>
 8003574:	072c      	lsls	r4, r5, #28
 8003576:	d50f      	bpl.n	8003598 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003578:	681c      	ldr	r4, [r3, #0]
 800357a:	f024 040e 	bic.w	r4, r4, #14
 800357e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003580:	2301      	movs	r3, #1
 8003582:	fa03 f202 	lsl.w	r2, r3, r2
 8003586:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003588:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800358a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800358e:	2300      	movs	r3, #0
 8003590:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003594:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003596:	e7cf      	b.n	8003538 <HAL_DMA_IRQHandler+0x30>
}
 8003598:	bc70      	pop	{r4, r5, r6}
 800359a:	4770      	bx	lr

0800359c <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800359c:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <FLASH_Program_Fast+0x28>)
 800359e:	6953      	ldr	r3, [r2, #20]
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 80035a4:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80035a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80035ac:	b672      	cpsid	i
}
 80035ae:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80035b0:	58cc      	ldr	r4, [r1, r3]
 80035b2:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 80035b4:	3304      	adds	r3, #4
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ba:	d1f9      	bne.n	80035b0 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80035c0:	bd10      	pop	{r4, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000

080035c8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_FLASH_Unlock+0x1c>)
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80035ce:	bfbf      	itttt	lt
 80035d0:	4a05      	ldrlt	r2, [pc, #20]	; (80035e8 <HAL_FLASH_Unlock+0x20>)
 80035d2:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80035d4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80035d8:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80035da:	bfba      	itte	lt
 80035dc:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	0fc0      	lsrlt	r0, r0, #31
 80035e0:	2000      	movge	r0, #0
}
 80035e2:	4770      	bx	lr
 80035e4:	40022000 	.word	0x40022000
 80035e8:	45670123 	.word	0x45670123

080035ec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80035ec:	4a03      	ldr	r2, [pc, #12]	; (80035fc <HAL_FLASH_Lock+0x10>)
 80035ee:	6953      	ldr	r3, [r2, #20]
 80035f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035f4:	6153      	str	r3, [r2, #20]
}
 80035f6:	2000      	movs	r0, #0
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <HAL_FLASH_GetError+0x8>)
 8003602:	6858      	ldr	r0, [r3, #4]
}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000001c 	.word	0x2000001c

0800360c <FLASH_WaitForLastOperation>:
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7fe ff6c 	bl	80024ec <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003614:	4c10      	ldr	r4, [pc, #64]	; (8003658 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8003616:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	03db      	lsls	r3, r3, #15
 800361c:	d40a      	bmi.n	8003634 <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800361e:	6920      	ldr	r0, [r4, #16]
 8003620:	4a0e      	ldr	r2, [pc, #56]	; (800365c <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 8003622:	4002      	ands	r2, r0
 8003624:	d00f      	beq.n	8003646 <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <FLASH_WaitForLastOperation+0x54>)
 8003628:	684b      	ldr	r3, [r1, #4]
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 800362e:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8003630:	6122      	str	r2, [r4, #16]
}
 8003632:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003634:	1c6a      	adds	r2, r5, #1
 8003636:	d0ef      	beq.n	8003618 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003638:	f7fe ff58 	bl	80024ec <HAL_GetTick>
 800363c:	1b80      	subs	r0, r0, r6
 800363e:	42a8      	cmp	r0, r5
 8003640:	d3ea      	bcc.n	8003618 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8003642:	2003      	movs	r0, #3
 8003644:	e7f5      	b.n	8003632 <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003646:	6920      	ldr	r0, [r4, #16]
 8003648:	f010 0001 	ands.w	r0, r0, #1
 800364c:	d0f1      	beq.n	8003632 <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800364e:	2301      	movs	r3, #1
 8003650:	6123      	str	r3, [r4, #16]
 8003652:	4610      	mov	r0, r2
 8003654:	e7ed      	b.n	8003632 <FLASH_WaitForLastOperation+0x26>
 8003656:	bf00      	nop
 8003658:	40022000 	.word	0x40022000
 800365c:	0002c3fa 	.word	0x0002c3fa
 8003660:	2000001c 	.word	0x2000001c

08003664 <HAL_FLASH_Program>:
{
 8003664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8003668:	4c25      	ldr	r4, [pc, #148]	; (8003700 <HAL_FLASH_Program+0x9c>)
{
 800366a:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800366c:	7823      	ldrb	r3, [r4, #0]
 800366e:	2b01      	cmp	r3, #1
{
 8003670:	4606      	mov	r6, r0
 8003672:	460f      	mov	r7, r1
 8003674:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8003676:	d041      	beq.n	80036fc <HAL_FLASH_Program+0x98>
 8003678:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800367a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800367e:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003680:	f7ff ffc4 	bl	800360c <FLASH_WaitForLastOperation>
 8003684:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8003686:	bb30      	cbnz	r0, 80036d6 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003688:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <HAL_FLASH_Program+0xa0>)
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003692:	bf17      	itett	ne
 8003694:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003696:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003698:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800369c:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800369e:	bf1c      	itt	ne
 80036a0:	2302      	movne	r3, #2
 80036a2:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80036a4:	b9e6      	cbnz	r6, 80036e0 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80036a6:	6943      	ldr	r3, [r0, #20]
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6143      	str	r3, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80036ae:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 80036b2:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 80036b6:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80036b8:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036c0:	f7ff ffa4 	bl	800360c <FLASH_WaitForLastOperation>
 80036c4:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 80036c6:	b126      	cbz	r6, 80036d2 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80036c8:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <HAL_FLASH_Program+0xa0>)
 80036ca:	6953      	ldr	r3, [r2, #20]
 80036cc:	ea23 0606 	bic.w	r6, r3, r6
 80036d0:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 80036d2:	f000 f83d 	bl	8003750 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80036d6:	2300      	movs	r3, #0
 80036d8:	7023      	strb	r3, [r4, #0]
}
 80036da:	4628      	mov	r0, r5
 80036dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80036e0:	1e73      	subs	r3, r6, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d901      	bls.n	80036ea <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 80036e6:	2600      	movs	r6, #0
 80036e8:	e7e8      	b.n	80036bc <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80036ea:	4641      	mov	r1, r8
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7ff ff55 	bl	800359c <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80036f2:	2e02      	cmp	r6, #2
 80036f4:	d1f7      	bne.n	80036e6 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 80036f6:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80036fa:	e7df      	b.n	80036bc <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 80036fc:	2502      	movs	r5, #2
 80036fe:	e7ec      	b.n	80036da <HAL_FLASH_Program+0x76>
 8003700:	2000001c 	.word	0x2000001c
 8003704:	40022000 	.word	0x40022000

08003708 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <FLASH_MassErase+0x1c>)
 800370a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800370e:	bf1e      	ittt	ne
 8003710:	695a      	ldrne	r2, [r3, #20]
 8003712:	f042 0204 	orrne.w	r2, r2, #4
 8003716:	615a      	strne	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800371e:	615a      	str	r2, [r3, #20]
}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40022000 	.word	0x40022000

08003728 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <FLASH_PageErase+0x24>)
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	00c0      	lsls	r0, r0, #3
 800372e:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8003732:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8003736:	4310      	orrs	r0, r2
 8003738:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	f042 0202 	orr.w	r2, r2, #2
 8003740:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003748:	615a      	str	r2, [r3, #20]
}
 800374a:	4770      	bx	lr
 800374c:	40022000 	.word	0x40022000

08003750 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003750:	4815      	ldr	r0, [pc, #84]	; (80037a8 <FLASH_FlushCaches+0x58>)
 8003752:	7f03      	ldrb	r3, [r0, #28]
 8003754:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003756:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800375a:	2b01      	cmp	r3, #1
 800375c:	d110      	bne.n	8003780 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <FLASH_FlushCaches+0x5c>)
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003766:	6019      	str	r1, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800376e:	6019      	str	r1, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003776:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800377e:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003780:	1e93      	subs	r3, r2, #2
 8003782:	2b01      	cmp	r3, #1
 8003784:	d80c      	bhi.n	80037a0 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <FLASH_FlushCaches+0x5c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003796:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80037a0:	2300      	movs	r3, #0
 80037a2:	7703      	strb	r3, [r0, #28]
}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000001c 	.word	0x2000001c
 80037ac:	40022000 	.word	0x40022000

080037b0 <HAL_FLASHEx_Erase>:
{
 80037b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80037b4:	4d31      	ldr	r5, [pc, #196]	; (800387c <HAL_FLASHEx_Erase+0xcc>)
 80037b6:	782b      	ldrb	r3, [r5, #0]
 80037b8:	2b01      	cmp	r3, #1
{
 80037ba:	4606      	mov	r6, r0
 80037bc:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80037be:	d05a      	beq.n	8003876 <HAL_FLASHEx_Erase+0xc6>
 80037c0:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80037c6:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037c8:	f7ff ff20 	bl	800360c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80037cc:	4604      	mov	r4, r0
 80037ce:	bb10      	cbnz	r0, 8003816 <HAL_FLASHEx_Erase+0x66>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_FLASHEx_Erase+0xd0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037d2:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80037da:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80037dc:	d020      	beq.n	8003820 <HAL_FLASHEx_Erase+0x70>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80037de:	0551      	lsls	r1, r2, #21
 80037e0:	d506      	bpl.n	80037f0 <HAL_FLASHEx_Erase+0x40>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80037ea:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80037ec:	772b      	strb	r3, [r5, #28]
 80037ee:	e000      	b.n	80037f2 <HAL_FLASHEx_Erase+0x42>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80037f0:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80037f2:	6833      	ldr	r3, [r6, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d11d      	bne.n	8003834 <HAL_FLASHEx_Erase+0x84>
      FLASH_MassErase(pEraseInit->Banks);
 80037f8:	6870      	ldr	r0, [r6, #4]
 80037fa:	f7ff ff85 	bl	8003708 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003802:	f7ff ff03 	bl	800360c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_FLASHEx_Erase+0xd0>)
 8003808:	6953      	ldr	r3, [r2, #20]
 800380a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800380e:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003810:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8003812:	f7ff ff9d 	bl	8003750 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003816:	2300      	movs	r3, #0
 8003818:	702b      	strb	r3, [r5, #0]
}
 800381a:	4620      	mov	r0, r4
 800381c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003820:	0552      	lsls	r2, r2, #21
 8003822:	d505      	bpl.n	8003830 <HAL_FLASHEx_Erase+0x80>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800382c:	2302      	movs	r3, #2
 800382e:	e7dd      	b.n	80037ec <HAL_FLASHEx_Erase+0x3c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003830:	7728      	strb	r0, [r5, #28]
 8003832:	e7de      	b.n	80037f2 <HAL_FLASHEx_Erase+0x42>
      *PageError = 0xFFFFFFFFU;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800383c:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800383e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003880 <HAL_FLASHEx_Erase+0xd0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003842:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003846:	4413      	add	r3, r2
 8003848:	42bb      	cmp	r3, r7
 800384a:	d9e2      	bls.n	8003812 <HAL_FLASHEx_Erase+0x62>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800384c:	6871      	ldr	r1, [r6, #4]
 800384e:	4638      	mov	r0, r7
 8003850:	f7ff ff6a 	bl	8003728 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003854:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003858:	f7ff fed8 	bl	800360c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800385c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003860:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8003864:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8003868:	b118      	cbz	r0, 8003872 <HAL_FLASHEx_Erase+0xc2>
          *PageError = page_index;
 800386a:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800386e:	4604      	mov	r4, r0
          break;
 8003870:	e7cf      	b.n	8003812 <HAL_FLASHEx_Erase+0x62>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003872:	3701      	adds	r7, #1
 8003874:	e7e5      	b.n	8003842 <HAL_FLASHEx_Erase+0x92>
  __HAL_LOCK(&pFlash);
 8003876:	2402      	movs	r4, #2
 8003878:	e7cf      	b.n	800381a <HAL_FLASHEx_Erase+0x6a>
 800387a:	bf00      	nop
 800387c:	2000001c 	.word	0x2000001c
 8003880:	40022000 	.word	0x40022000

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003888:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80039fc <HAL_GPIO_Init+0x178>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800388c:	4c59      	ldr	r4, [pc, #356]	; (80039f4 <HAL_GPIO_Init+0x170>)
  uint32_t position = 0x00u;
 800388e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003890:	680a      	ldr	r2, [r1, #0]
 8003892:	fa32 f503 	lsrs.w	r5, r2, r3
 8003896:	d102      	bne.n	800389e <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003898:	b003      	add	sp, #12
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800389e:	2501      	movs	r5, #1
 80038a0:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80038a4:	ea18 0202 	ands.w	r2, r8, r2
 80038a8:	f000 809c 	beq.w	80039e4 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ac:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ae:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b0:	f006 0503 	and.w	r5, r6, #3
 80038b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038b8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038bc:	1e6f      	subs	r7, r5, #1
 80038be:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038c0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c4:	d834      	bhi.n	8003930 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80038c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038c8:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038cc:	68cf      	ldr	r7, [r1, #12]
 80038ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80038d2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80038d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80038d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038da:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038de:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80038e2:	409f      	lsls	r7, r3
 80038e4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80038e8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80038ea:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ec:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f0:	688f      	ldr	r7, [r1, #8]
 80038f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80038f6:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fa:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80038fc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	d119      	bne.n	8003934 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003900:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003904:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003908:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800390c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003910:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003914:	f04f 0b0f 	mov.w	fp, #15
 8003918:	fa0b fb0a 	lsl.w	fp, fp, sl
 800391c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003920:	690f      	ldr	r7, [r1, #16]
 8003922:	fa07 f70a 	lsl.w	r7, r7, sl
 8003926:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800392a:	f8c8 7020 	str.w	r7, [r8, #32]
 800392e:	e001      	b.n	8003934 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	2d03      	cmp	r5, #3
 8003932:	d1da      	bne.n	80038ea <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003934:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003936:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800393a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393e:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003940:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003944:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003946:	d04d      	beq.n	80039e4 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003948:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800394c:	f045 0501 	orr.w	r5, r5, #1
 8003950:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8003954:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003958:	f023 0703 	bic.w	r7, r3, #3
 800395c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003960:	f005 0501 	and.w	r5, r5, #1
 8003964:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003968:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800396a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003970:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003972:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003976:	f04f 0e0f 	mov.w	lr, #15
 800397a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800397e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003982:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003986:	d02f      	beq.n	80039e8 <HAL_GPIO_Init+0x164>
 8003988:	4d1b      	ldr	r5, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x174>)
 800398a:	42a8      	cmp	r0, r5
 800398c:	d02e      	beq.n	80039ec <HAL_GPIO_Init+0x168>
 800398e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003992:	42a8      	cmp	r0, r5
 8003994:	d02c      	beq.n	80039f0 <HAL_GPIO_Init+0x16c>
 8003996:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800399a:	42a8      	cmp	r0, r5
 800399c:	bf0c      	ite	eq
 800399e:	2503      	moveq	r5, #3
 80039a0:	2507      	movne	r5, #7
 80039a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80039a6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039aa:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 80039ac:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80039ae:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80039b4:	bf0c      	ite	eq
 80039b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80039b8:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80039ba:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80039bc:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039be:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80039c2:	bf0c      	ite	eq
 80039c4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80039c6:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 80039c8:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 80039ca:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039cc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 80039d0:	bf0c      	ite	eq
 80039d2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80039d4:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 80039d6:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 80039d8:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039da:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80039dc:	bf54      	ite	pl
 80039de:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80039e0:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 80039e2:	6025      	str	r5, [r4, #0]
    position++;
 80039e4:	3301      	adds	r3, #1
 80039e6:	e753      	b.n	8003890 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e8:	2500      	movs	r5, #0
 80039ea:	e7da      	b.n	80039a2 <HAL_GPIO_Init+0x11e>
 80039ec:	2501      	movs	r5, #1
 80039ee:	e7d8      	b.n	80039a2 <HAL_GPIO_Init+0x11e>
 80039f0:	2502      	movs	r5, #2
 80039f2:	e7d6      	b.n	80039a2 <HAL_GPIO_Init+0x11e>
 80039f4:	40010400 	.word	0x40010400
 80039f8:	48000400 	.word	0x48000400
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a00:	6903      	ldr	r3, [r0, #16]
 8003a02:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a04:	bf14      	ite	ne
 8003a06:	2001      	movne	r0, #1
 8003a08:	2000      	moveq	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	b10a      	cbz	r2, 8003a12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a0e:	6181      	str	r1, [r0, #24]
 8003a10:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a12:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4a02      	ldr	r2, [pc, #8]	; (8003a24 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	4770      	bx	lr
 8003a24:	40007000 	.word	0x40007000

08003a28 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <HAL_PWREx_GetVoltageRange+0xc>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a2c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000

08003a38 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a38:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a44:	d11d      	bne.n	8003a82 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d101      	bne.n	8003a50 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2132      	movs	r1, #50	; 0x32
 8003a62:	434b      	muls	r3, r1
 8003a64:	490e      	ldr	r1, [pc, #56]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a6a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6c:	6951      	ldr	r1, [r2, #20]
 8003a6e:	0549      	lsls	r1, r1, #21
 8003a70:	d500      	bpl.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8003a72:	b923      	cbnz	r3, 8003a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a74:	6953      	ldr	r3, [r2, #20]
 8003a76:	055b      	lsls	r3, r3, #21
 8003a78:	d5e8      	bpl.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8003a7a:	2003      	movs	r0, #3
}
 8003a7c:	4770      	bx	lr
        wait_loop_index--;
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	e7f4      	b.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a86:	bf1f      	itttt	ne
 8003a88:	6813      	ldrne	r3, [r2, #0]
 8003a8a:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8003a8e:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8003a92:	6013      	strne	r3, [r2, #0]
 8003a94:	e7da      	b.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x14>
 8003a96:	bf00      	nop
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	000f4240 	.word	0x000f4240

08003aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aa6:	4d1e      	ldr	r5, [pc, #120]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003aa8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003aaa:	00da      	lsls	r2, r3, #3
{
 8003aac:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aae:	d518      	bpl.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ab0:	f7ff ffba 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003ab8:	d123      	bne.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aba:	2c80      	cmp	r4, #128	; 0x80
 8003abc:	d929      	bls.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003abe:	2ca0      	cmp	r4, #160	; 0xa0
 8003ac0:	bf8c      	ite	hi
 8003ac2:	2002      	movhi	r0, #2
 8003ac4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003ac8:	6813      	ldr	r3, [r2, #0]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	4303      	orrs	r3, r0
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003ad8:	1a18      	subs	r0, r3, r0
 8003ada:	bf18      	it	ne
 8003adc:	2001      	movne	r0, #1
 8003ade:	b003      	add	sp, #12
 8003ae0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	65ab      	str	r3, [r5, #88]	; 0x58
 8003aea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff ff98 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	65ab      	str	r3, [r5, #88]	; 0x58
 8003b00:	e7d8      	b.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003b02:	2c80      	cmp	r4, #128	; 0x80
 8003b04:	d807      	bhi.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003b06:	d008      	beq.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003b08:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003b0c:	4258      	negs	r0, r3
 8003b0e:	4158      	adcs	r0, r3
 8003b10:	e7d9      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b12:	2000      	movs	r0, #0
 8003b14:	e7d7      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b16:	2003      	movs	r0, #3
 8003b18:	e7d5      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	e7d3      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40022000 	.word	0x40022000

08003b28 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b2c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2e:	f012 020c 	ands.w	r2, r2, #12
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x18>
 8003b34:	2a0c      	cmp	r2, #12
 8003b36:	d115      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b38:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b3c:	2901      	cmp	r1, #1
 8003b3e:	d118      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b40:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003b42:	481d      	ldr	r0, [pc, #116]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b44:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b46:	bf55      	itete	pl
 8003b48:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b4c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b4e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b52:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003b56:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5a:	b34a      	cbz	r2, 8003bb0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b5c:	2a0c      	cmp	r2, #12
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x4c>
 8003b60:	2000      	movs	r0, #0
  return sysclockfreq;
 8003b62:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b64:	2a04      	cmp	r2, #4
 8003b66:	d022      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b68:	2a08      	cmp	r2, #8
 8003b6a:	4814      	ldr	r0, [pc, #80]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b6c:	bf18      	it	ne
 8003b6e:	2000      	movne	r0, #0
 8003b70:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b72:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003b7a:	2a02      	cmp	r2, #2
 8003b7c:	d015      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x82>
 8003b7e:	490f      	ldr	r1, [pc, #60]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b80:	2a03      	cmp	r2, #3
 8003b82:	bf08      	it	eq
 8003b84:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b86:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003b8e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b90:	68d8      	ldr	r0, [r3, #12]
 8003b92:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b96:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b9c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ba0:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003ba4:	fbb2 f0f0 	udiv	r0, r2, r0
 8003ba8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bac:	e7eb      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003bae:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800b67c 	.word	0x0800b67c
 8003bbc:	007a1200 	.word	0x007a1200
 8003bc0:	00f42400 	.word	0x00f42400

08003bc4 <HAL_RCC_OscConfig>:
{
 8003bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003bc8:	4605      	mov	r5, r0
 8003bca:	b918      	cbnz	r0, 8003bd4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003bcc:	2001      	movs	r0, #1
}
 8003bce:	b003      	add	sp, #12
 8003bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd4:	4c94      	ldr	r4, [pc, #592]	; (8003e28 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bda:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bdc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003be6:	d53d      	bpl.n	8003c64 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be8:	b11e      	cbz	r6, 8003bf2 <HAL_RCC_OscConfig+0x2e>
 8003bea:	2e0c      	cmp	r6, #12
 8003bec:	d16a      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x100>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bee:	2f01      	cmp	r7, #1
 8003bf0:	d168      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x100>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	0798      	lsls	r0, r3, #30
 8003bf6:	d502      	bpl.n	8003bfe <HAL_RCC_OscConfig+0x3a>
 8003bf8:	69eb      	ldr	r3, [r5, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0e6      	beq.n	8003bcc <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c02:	0719      	lsls	r1, r3, #28
 8003c04:	bf56      	itet	pl
 8003c06:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003c0a:	6823      	ldrmi	r3, [r4, #0]
 8003c0c:	091b      	lsrpl	r3, r3, #4
 8003c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c12:	4298      	cmp	r0, r3
 8003c14:	d93f      	bls.n	8003c96 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c16:	f7ff ff45 	bl	8003aa4 <RCC_SetFlashLatencyFromMSIRange>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d1d6      	bne.n	8003bcc <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	6a2a      	ldr	r2, [r5, #32]
 8003c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c3e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c40:	f7ff ff72 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003c44:	68a3      	ldr	r3, [r4, #8]
 8003c46:	4a79      	ldr	r2, [pc, #484]	; (8003e2c <HAL_RCC_OscConfig+0x268>)
 8003c48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c4c:	5cd3      	ldrb	r3, [r2, r3]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	40d8      	lsrs	r0, r3
 8003c54:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003c58:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f7fe fc04 	bl	8002468 <HAL_InitTick>
        if(status != HAL_OK)
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1b4      	bne.n	8003bce <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	07d8      	lsls	r0, r3, #31
 8003c68:	d463      	bmi.n	8003d32 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	0799      	lsls	r1, r3, #30
 8003c6e:	f100 80a2 	bmi.w	8003db6 <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	0718      	lsls	r0, r3, #28
 8003c76:	f100 80df 	bmi.w	8003e38 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	0759      	lsls	r1, r3, #29
 8003c7e:	f100 812f 	bmi.w	8003ee0 <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	0699      	lsls	r1, r3, #26
 8003c86:	f100 81ab 	bmi.w	8003fe0 <HAL_RCC_OscConfig+0x41c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 81d1 	bne.w	8004034 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8003c92:	2000      	movs	r0, #0
 8003c94:	e79b      	b.n	8003bce <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca4:	4303      	orrs	r3, r0
 8003ca6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	6a2a      	ldr	r2, [r5, #32]
 8003cac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003cb4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb6:	2e00      	cmp	r6, #0
 8003cb8:	d1c2      	bne.n	8003c40 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cba:	f7ff fef3 	bl	8003aa4 <RCC_SetFlashLatencyFromMSIRange>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d0be      	beq.n	8003c40 <HAL_RCC_OscConfig+0x7c>
 8003cc2:	e783      	b.n	8003bcc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cc4:	69eb      	ldr	r3, [r5, #28]
 8003cc6:	b31b      	cbz	r3, 8003d10 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fc0c 	bl	80024ec <HAL_GetTick>
 8003cd4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	079a      	lsls	r2, r3, #30
 8003cda:	d511      	bpl.n	8003d00 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	6023      	str	r3, [r4, #0]
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cec:	4313      	orrs	r3, r2
 8003cee:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	6a2a      	ldr	r2, [r5, #32]
 8003cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003cfc:	6063      	str	r3, [r4, #4]
 8003cfe:	e7b1      	b.n	8003c64 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d00:	f7fe fbf4 	bl	80024ec <HAL_GetTick>
 8003d04:	eba0 0008 	sub.w	r0, r0, r8
 8003d08:	2802      	cmp	r0, #2
 8003d0a:	d9e4      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8003d0c:	2003      	movs	r0, #3
 8003d0e:	e75e      	b.n	8003bce <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d18:	f7fe fbe8 	bl	80024ec <HAL_GetTick>
 8003d1c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	079b      	lsls	r3, r3, #30
 8003d22:	d59f      	bpl.n	8003c64 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d24:	f7fe fbe2 	bl	80024ec <HAL_GetTick>
 8003d28:	eba0 0008 	sub.w	r0, r0, r8
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d9f6      	bls.n	8003d1e <HAL_RCC_OscConfig+0x15a>
 8003d30:	e7ec      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d32:	2e08      	cmp	r6, #8
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_OscConfig+0x17a>
 8003d36:	2e0c      	cmp	r6, #12
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d3a:	2f03      	cmp	r7, #3
 8003d3c:	d106      	bne.n	8003d4c <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	039a      	lsls	r2, r3, #14
 8003d42:	d592      	bpl.n	8003c6a <HAL_RCC_OscConfig+0xa6>
 8003d44:	686b      	ldr	r3, [r5, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d18f      	bne.n	8003c6a <HAL_RCC_OscConfig+0xa6>
 8003d4a:	e73f      	b.n	8003bcc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	686b      	ldr	r3, [r5, #4]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d110      	bne.n	8003d76 <HAL_RCC_OscConfig+0x1b2>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fbc6 	bl	80024ec <HAL_GetTick>
 8003d60:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	039b      	lsls	r3, r3, #14
 8003d66:	d480      	bmi.n	8003c6a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fe fbc0 	bl	80024ec <HAL_GetTick>
 8003d6c:	eba0 0008 	sub.w	r0, r0, r8
 8003d70:	2864      	cmp	r0, #100	; 0x64
 8003d72:	d9f6      	bls.n	8003d62 <HAL_RCC_OscConfig+0x19e>
 8003d74:	e7ca      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d7a:	d104      	bne.n	8003d86 <HAL_RCC_OscConfig+0x1c2>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	e7e6      	b.n	8003d54 <HAL_RCC_OscConfig+0x190>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d8c:	6022      	str	r2, [r4, #0]
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d94:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fba7 	bl	80024ec <HAL_GetTick>
 8003d9e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	0398      	lsls	r0, r3, #14
 8003da4:	f57f af61 	bpl.w	8003c6a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fba0 	bl	80024ec <HAL_GetTick>
 8003dac:	eba0 0008 	sub.w	r0, r0, r8
 8003db0:	2864      	cmp	r0, #100	; 0x64
 8003db2:	d9f5      	bls.n	8003da0 <HAL_RCC_OscConfig+0x1dc>
 8003db4:	e7aa      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003db6:	2e04      	cmp	r6, #4
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1fe>
 8003dba:	2e0c      	cmp	r6, #12
 8003dbc:	d110      	bne.n	8003de0 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dbe:	2f02      	cmp	r7, #2
 8003dc0:	d10e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0559      	lsls	r1, r3, #21
 8003dc6:	d503      	bpl.n	8003dd0 <HAL_RCC_OscConfig+0x20c>
 8003dc8:	68eb      	ldr	r3, [r5, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f43f aefe 	beq.w	8003bcc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	692a      	ldr	r2, [r5, #16]
 8003dd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003dd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	e748      	b.n	8003c72 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de0:	68eb      	ldr	r3, [r5, #12]
 8003de2:	b17b      	cbz	r3, 8003e04 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dec:	f7fe fb7e 	bl	80024ec <HAL_GetTick>
 8003df0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	055a      	lsls	r2, r3, #21
 8003df6:	d4eb      	bmi.n	8003dd0 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fe fb78 	bl	80024ec <HAL_GetTick>
 8003dfc:	1bc0      	subs	r0, r0, r7
 8003dfe:	2802      	cmp	r0, #2
 8003e00:	d9f7      	bls.n	8003df2 <HAL_RCC_OscConfig+0x22e>
 8003e02:	e783      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fb6e 	bl	80024ec <HAL_GetTick>
 8003e10:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	055b      	lsls	r3, r3, #21
 8003e16:	f57f af2c 	bpl.w	8003c72 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fe fb67 	bl	80024ec <HAL_GetTick>
 8003e1e:	1bc0      	subs	r0, r0, r7
 8003e20:	2802      	cmp	r0, #2
 8003e22:	d9f6      	bls.n	8003e12 <HAL_RCC_OscConfig+0x24e>
 8003e24:	e772      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	0800b663 	.word	0x0800b663
 8003e30:	20000010 	.word	0x20000010
 8003e34:	20000018 	.word	0x20000018
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e38:	696b      	ldr	r3, [r5, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2f4>
      uint32_t csr_temp = RCC->CSR;
 8003e3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003e42:	69a9      	ldr	r1, [r5, #24]
 8003e44:	f003 0210 	and.w	r2, r3, #16
 8003e48:	4291      	cmp	r1, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2a6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003e4c:	f003 0203 	and.w	r2, r3, #3
 8003e50:	2a02      	cmp	r2, #2
 8003e52:	f43f aebb 	beq.w	8003bcc <HAL_RCC_OscConfig+0x8>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003e56:	07da      	lsls	r2, r3, #31
 8003e58:	d41b      	bmi.n	8003e92 <HAL_RCC_OscConfig+0x2ce>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003e5a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e5e:	69aa      	ldr	r2, [r5, #24]
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003e6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003e76:	f7fe fb39 	bl	80024ec <HAL_GetTick>
 8003e7a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e80:	0798      	lsls	r0, r3, #30
 8003e82:	f53f aefa 	bmi.w	8003c7a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe fb31 	bl	80024ec <HAL_GetTick>
 8003e8a:	1bc0      	subs	r0, r0, r7
 8003e8c:	2811      	cmp	r0, #17
 8003e8e:	d9f5      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2b8>
 8003e90:	e73c      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
          __HAL_RCC_LSI_DISABLE();
 8003e92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003e9e:	f7fe fb25 	bl	80024ec <HAL_GetTick>
 8003ea2:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ea8:	079b      	lsls	r3, r3, #30
 8003eaa:	d5d6      	bpl.n	8003e5a <HAL_RCC_OscConfig+0x296>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fe fb1e 	bl	80024ec <HAL_GetTick>
 8003eb0:	1bc0      	subs	r0, r0, r7
 8003eb2:	2811      	cmp	r0, #17
 8003eb4:	d9f6      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2e0>
 8003eb6:	e729      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003ec4:	f7fe fb12 	bl	80024ec <HAL_GetTick>
 8003ec8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ece:	0799      	lsls	r1, r3, #30
 8003ed0:	f57f aed3 	bpl.w	8003c7a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fe fb0a 	bl	80024ec <HAL_GetTick>
 8003ed8:	1bc0      	subs	r0, r0, r7
 8003eda:	2811      	cmp	r0, #17
 8003edc:	d9f5      	bls.n	8003eca <HAL_RCC_OscConfig+0x306>
 8003ede:	e715      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	d430      	bmi.n	8003f48 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	65a3      	str	r3, [r4, #88]	; 0x58
 8003eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ef8:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800416c <HAL_RCC_OscConfig+0x5a8>
 8003efe:	f8d8 3000 	ldr.w	r3, [r8]
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	d522      	bpl.n	8003f4c <HAL_RCC_OscConfig+0x388>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003f06:	68aa      	ldr	r2, [r5, #8]
 8003f08:	07d0      	lsls	r0, r2, #31
 8003f0a:	d433      	bmi.n	8003f74 <HAL_RCC_OscConfig+0x3b0>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d13c      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3de>
      tickstart = HAL_GetTick();
 8003f28:	f7fe fae0 	bl	80024ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f30:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f36:	0798      	lsls	r0, r3, #30
 8003f38:	d44b      	bmi.n	8003fd2 <HAL_RCC_OscConfig+0x40e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003f3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003f46:	e035      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3f0>
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2700      	movs	r7, #0
 8003f4a:	e7d6      	b.n	8003efa <HAL_RCC_OscConfig+0x336>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	f8c8 3000 	str.w	r3, [r8]
      tickstart = HAL_GetTick();
 8003f58:	f7fe fac8 	bl	80024ec <HAL_GetTick>
 8003f5c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f62:	05d9      	lsls	r1, r3, #23
 8003f64:	d4cf      	bmi.n	8003f06 <HAL_RCC_OscConfig+0x342>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f66:	f7fe fac1 	bl	80024ec <HAL_GetTick>
 8003f6a:	eba0 0009 	sub.w	r0, r0, r9
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9f5      	bls.n	8003f5e <HAL_RCC_OscConfig+0x39a>
 8003f72:	e6cb      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003f74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f78:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8003f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f80:	430b      	orrs	r3, r1
 8003f82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003f8a:	0752      	lsls	r2, r2, #29
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f8c:	bf42      	ittt	mi
 8003f8e:	f043 0304 	orrmi.w	r3, r3, #4
 8003f92:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f96:	f8d4 3090 	ldrmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003fa2:	f7fe faa3 	bl	80024ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003faa:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fb0:	079b      	lsls	r3, r3, #30
 8003fb2:	d507      	bpl.n	8003fc4 <HAL_RCC_OscConfig+0x400>
    if(pwrclkchanged == SET)
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f43f ae64 	beq.w	8003c82 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fc2:	e65e      	b.n	8003c82 <HAL_RCC_OscConfig+0xbe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fa92 	bl	80024ec <HAL_GetTick>
 8003fc8:	eba0 0008 	sub.w	r0, r0, r8
 8003fcc:	4548      	cmp	r0, r9
 8003fce:	d9ed      	bls.n	8003fac <HAL_RCC_OscConfig+0x3e8>
 8003fd0:	e69c      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fe fa8b 	bl	80024ec <HAL_GetTick>
 8003fd6:	eba0 0008 	sub.w	r0, r0, r8
 8003fda:	4548      	cmp	r0, r9
 8003fdc:	d9a9      	bls.n	8003f32 <HAL_RCC_OscConfig+0x36e>
 8003fde:	e695      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003fe2:	b19b      	cbz	r3, 800400c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI48_ENABLE();
 8003fe4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fa7c 	bl	80024ec <HAL_GetTick>
 8003ff4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ff6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003ffa:	079a      	lsls	r2, r3, #30
 8003ffc:	f53f ae45 	bmi.w	8003c8a <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004000:	f7fe fa74 	bl	80024ec <HAL_GetTick>
 8004004:	1bc0      	subs	r0, r0, r7
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f5      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x432>
 800400a:	e67f      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 800400c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004018:	f7fe fa68 	bl	80024ec <HAL_GetTick>
 800401c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800401e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004022:	079b      	lsls	r3, r3, #30
 8004024:	f57f ae31 	bpl.w	8003c8a <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004028:	f7fe fa60 	bl	80024ec <HAL_GetTick>
 800402c:	1bc0      	subs	r0, r0, r7
 800402e:	2802      	cmp	r0, #2
 8004030:	d9f5      	bls.n	800401e <HAL_RCC_OscConfig+0x45a>
 8004032:	e66b      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004034:	2b02      	cmp	r3, #2
 8004036:	d17a      	bne.n	800412e <HAL_RCC_OscConfig+0x56a>
      pll_config = RCC->PLLCFGR;
 8004038:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800403c:	f003 0103 	and.w	r1, r3, #3
 8004040:	4291      	cmp	r1, r2
 8004042:	d11c      	bne.n	800407e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004044:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800404a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800404c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004050:	d115      	bne.n	800407e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004054:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004058:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004060:	0852      	lsrs	r2, r2, #1
 8004062:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004066:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004068:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800406c:	d107      	bne.n	800407e <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004070:	0852      	lsrs	r2, r2, #1
 8004072:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004076:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800407c:	d03e      	beq.n	80040fc <HAL_RCC_OscConfig+0x538>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	2e0c      	cmp	r6, #12
 8004080:	f43f ada4 	beq.w	8003bcc <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800408c:	f7fe fa2e 	bl	80024ec <HAL_GetTick>
 8004090:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	0198      	lsls	r0, r3, #6
 8004096:	d42b      	bmi.n	80040f0 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004098:	68e2      	ldr	r2, [r4, #12]
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_RCC_OscConfig+0x5a4>)
 800409c:	4013      	ands	r3, r2
 800409e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040a0:	4313      	orrs	r3, r2
 80040a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80040a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040aa:	3a01      	subs	r2, #1
 80040ac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80040ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80040bc:	0852      	lsrs	r2, r2, #1
 80040be:	3a01      	subs	r2, #1
 80040c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80040c4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040cc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80040d6:	f7fe fa09 	bl	80024ec <HAL_GetTick>
 80040da:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	0199      	lsls	r1, r3, #6
 80040e0:	f53f add7 	bmi.w	8003c92 <HAL_RCC_OscConfig+0xce>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe fa02 	bl	80024ec <HAL_GetTick>
 80040e8:	1b40      	subs	r0, r0, r5
 80040ea:	2802      	cmp	r0, #2
 80040ec:	d9f6      	bls.n	80040dc <HAL_RCC_OscConfig+0x518>
 80040ee:	e60d      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe f9fc 	bl	80024ec <HAL_GetTick>
 80040f4:	1b80      	subs	r0, r0, r6
 80040f6:	2802      	cmp	r0, #2
 80040f8:	d9cb      	bls.n	8004092 <HAL_RCC_OscConfig+0x4ce>
 80040fa:	e607      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	f53f adc7 	bmi.w	8003c92 <HAL_RCC_OscConfig+0xce>
          __HAL_RCC_PLL_ENABLE();
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004112:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8004114:	f7fe f9ea 	bl	80024ec <HAL_GetTick>
 8004118:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	f53f adb8 	bmi.w	8003c92 <HAL_RCC_OscConfig+0xce>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe f9e3 	bl	80024ec <HAL_GetTick>
 8004126:	1b40      	subs	r0, r0, r5
 8004128:	2802      	cmp	r0, #2
 800412a:	d9f6      	bls.n	800411a <HAL_RCC_OscConfig+0x556>
 800412c:	e5ee      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412e:	2e0c      	cmp	r6, #12
 8004130:	f43f ad4c 	beq.w	8003bcc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800413c:	f7fe f9d6 	bl	80024ec <HAL_GetTick>
 8004140:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004148:	d107      	bne.n	800415a <HAL_RCC_OscConfig+0x596>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800414a:	68e2      	ldr	r2, [r4, #12]
 800414c:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004150:	f022 0203 	bic.w	r2, r2, #3
 8004154:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8004156:	4618      	mov	r0, r3
 8004158:	e539      	b.n	8003bce <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe f9c7 	bl	80024ec <HAL_GetTick>
 800415e:	1b40      	subs	r0, r0, r5
 8004160:	2802      	cmp	r0, #2
 8004162:	d9ee      	bls.n	8004142 <HAL_RCC_OscConfig+0x57e>
 8004164:	e5d2      	b.n	8003d0c <HAL_RCC_OscConfig+0x148>
 8004166:	bf00      	nop
 8004168:	f99f808c 	.word	0xf99f808c
 800416c:	40007000 	.word	0x40007000

08004170 <HAL_RCC_ClockConfig>:
{
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004176:	4604      	mov	r4, r0
 8004178:	b910      	cbnz	r0, 8004180 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800417a:	2001      	movs	r0, #1
}
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4a4b      	ldr	r2, [pc, #300]	; (80042b0 <HAL_RCC_ClockConfig+0x140>)
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	428b      	cmp	r3, r1
 800418a:	d32c      	bcc.n	80041e6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	0786      	lsls	r6, r0, #30
 8004190:	d434      	bmi.n	80041fc <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	07c1      	lsls	r1, r0, #31
 8004194:	d43f      	bmi.n	8004216 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	6821      	ldr	r1, [r4, #0]
 8004198:	078a      	lsls	r2, r1, #30
 800419a:	d468      	bmi.n	800426e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <HAL_RCC_ClockConfig+0x140>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	42ab      	cmp	r3, r5
 80041a6:	d86f      	bhi.n	8004288 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	f011 0f04 	tst.w	r1, #4
 80041ac:	4d41      	ldr	r5, [pc, #260]	; (80042b4 <HAL_RCC_ClockConfig+0x144>)
 80041ae:	d177      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	070b      	lsls	r3, r1, #28
 80041b2:	d506      	bpl.n	80041c2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b4:	68ab      	ldr	r3, [r5, #8]
 80041b6:	6922      	ldr	r2, [r4, #16]
 80041b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80041c0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c2:	f7ff fcb1 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80041c6:	68ab      	ldr	r3, [r5, #8]
 80041c8:	4a3b      	ldr	r2, [pc, #236]	; (80042b8 <HAL_RCC_ClockConfig+0x148>)
 80041ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80041ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	40d8      	lsrs	r0, r3
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_RCC_ClockConfig+0x14c>)
 80041dc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCC_ClockConfig+0x150>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f7fe b941 	b.w	8002468 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	428b      	cmp	r3, r1
 80041f8:	d1bf      	bne.n	800417a <HAL_RCC_ClockConfig+0xa>
 80041fa:	e7c7      	b.n	800418c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <HAL_RCC_ClockConfig+0x144>)
 80041fe:	68a6      	ldr	r6, [r4, #8]
 8004200:	6891      	ldr	r1, [r2, #8]
 8004202:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8004206:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	bf81      	itttt	hi
 800420a:	6893      	ldrhi	r3, [r2, #8]
 800420c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8004210:	4333      	orrhi	r3, r6
 8004212:	6093      	strhi	r3, [r2, #8]
 8004214:	e7bd      	b.n	8004192 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	4e26      	ldr	r6, [pc, #152]	; (80042b4 <HAL_RCC_ClockConfig+0x144>)
 800421a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	d11a      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004220:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004224:	d0a9      	beq.n	800417a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004226:	68b3      	ldr	r3, [r6, #8]
 8004228:	f023 0303 	bic.w	r3, r3, #3
 800422c:	4313      	orrs	r3, r2
 800422e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004230:	f7fe f95c 	bl	80024ec <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004238:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	68b3      	ldr	r3, [r6, #8]
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004246:	d0a6      	beq.n	8004196 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fe f950 	bl	80024ec <HAL_GetTick>
 800424c:	1bc0      	subs	r0, r0, r7
 800424e:	4540      	cmp	r0, r8
 8004250:	d9f3      	bls.n	800423a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8004252:	2003      	movs	r0, #3
 8004254:	e792      	b.n	800417c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	2a02      	cmp	r2, #2
 8004258:	d102      	bne.n	8004260 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800425e:	e7e1      	b.n	8004224 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004260:	b912      	cbnz	r2, 8004268 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004262:	f013 0f02 	tst.w	r3, #2
 8004266:	e7dd      	b.n	8004224 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800426c:	e7da      	b.n	8004224 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800426e:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <HAL_RCC_ClockConfig+0x144>)
 8004270:	68a6      	ldr	r6, [r4, #8]
 8004272:	6890      	ldr	r0, [r2, #8]
 8004274:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004278:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427a:	bf3f      	itttt	cc
 800427c:	6893      	ldrcc	r3, [r2, #8]
 800427e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8004282:	4333      	orrcc	r3, r6
 8004284:	6093      	strcc	r3, [r2, #8]
 8004286:	e789      	b.n	800419c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	432b      	orrs	r3, r5
 8004290:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	42ab      	cmp	r3, r5
 800429a:	f47f af6e 	bne.w	800417a <HAL_RCC_ClockConfig+0xa>
 800429e:	e783      	b.n	80041a8 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	68ab      	ldr	r3, [r5, #8]
 80042a2:	68e2      	ldr	r2, [r4, #12]
 80042a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60ab      	str	r3, [r5, #8]
 80042ac:	e780      	b.n	80041b0 <HAL_RCC_ClockConfig+0x40>
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800b663 	.word	0x0800b663
 80042bc:	20000010 	.word	0x20000010
 80042c0:	20000018 	.word	0x20000018

080042c4 <HAL_RCC_GetHCLKFreq>:
}
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <HAL_RCC_GetHCLKFreq+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000010 	.word	0x20000010

080042d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042d2:	4a06      	ldr	r2, [pc, #24]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042da:	5cd3      	ldrb	r3, [r2, r3]
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042de:	6810      	ldr	r0, [r2, #0]
 80042e0:	f003 031f 	and.w	r3, r3, #31
}
 80042e4:	40d8      	lsrs	r0, r3
 80042e6:	4770      	bx	lr
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800b673 	.word	0x0800b673
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK2Freq+0x18>)
 80042f6:	4a06      	ldr	r2, [pc, #24]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004302:	6810      	ldr	r0, [r2, #0]
 8004304:	f003 031f 	and.w	r3, r3, #31
}
 8004308:	40d8      	lsrs	r0, r3
 800430a:	4770      	bx	lr
 800430c:	40021000 	.word	0x40021000
 8004310:	0800b673 	.word	0x0800b673
 8004314:	20000010 	.word	0x20000010

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800431c:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800431e:	6800      	ldr	r0, [r0, #0]
 8004320:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004324:	d039      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004326:	4d75      	ldr	r5, [pc, #468]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004328:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800432a:	00d8      	lsls	r0, r3, #3
 800432c:	d427      	bmi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	65ab      	str	r3, [r5, #88]	; 0x58
 8004336:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004340:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004342:	4f6f      	ldr	r7, [pc, #444]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800434c:	f7fe f8ce 	bl	80024ec <HAL_GetTick>
 8004350:	4680      	mov	r8, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	05d9      	lsls	r1, r3, #23
 8004356:	d514      	bpl.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004358:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800435c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004360:	d003      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004362:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004364:	4293      	cmp	r3, r2
 8004366:	f040 80a3 	bne.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800436e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2600      	movs	r6, #0
 8004380:	e7df      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fe f8b3 	bl	80024ec <HAL_GetTick>
 8004386:	eba0 0008 	sub.w	r0, r0, r8
 800438a:	2802      	cmp	r0, #2
 800438c:	d9e1      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 800438e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004390:	b11e      	cbz	r6, 800439a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004392:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004398:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	07df      	lsls	r7, r3, #31
 800439e:	d508      	bpl.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a0:	4956      	ldr	r1, [pc, #344]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043a2:	6865      	ldr	r5, [r4, #4]
 80043a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80043a8:	f022 0203 	bic.w	r2, r2, #3
 80043ac:	432a      	orrs	r2, r5
 80043ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043b2:	079e      	lsls	r6, r3, #30
 80043b4:	d508      	bpl.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b6:	4951      	ldr	r1, [pc, #324]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043b8:	68a5      	ldr	r5, [r4, #8]
 80043ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80043be:	f022 020c 	bic.w	r2, r2, #12
 80043c2:	432a      	orrs	r2, r5
 80043c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043c8:	075d      	lsls	r5, r3, #29
 80043ca:	d508      	bpl.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043cc:	494b      	ldr	r1, [pc, #300]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043ce:	68e5      	ldr	r5, [r4, #12]
 80043d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80043d4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80043d8:	432a      	orrs	r2, r5
 80043da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043de:	0699      	lsls	r1, r3, #26
 80043e0:	d508      	bpl.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e2:	4946      	ldr	r1, [pc, #280]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043e4:	6925      	ldr	r5, [r4, #16]
 80043e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80043ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043ee:	432a      	orrs	r2, r5
 80043f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f4:	059a      	lsls	r2, r3, #22
 80043f6:	d508      	bpl.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f8:	4940      	ldr	r1, [pc, #256]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043fa:	6a25      	ldr	r5, [r4, #32]
 80043fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004400:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004404:	432a      	orrs	r2, r5
 8004406:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800440a:	055f      	lsls	r7, r3, #21
 800440c:	d508      	bpl.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800440e:	493b      	ldr	r1, [pc, #236]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004410:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004412:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004416:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800441a:	432a      	orrs	r2, r5
 800441c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004420:	065e      	lsls	r6, r3, #25
 8004422:	d508      	bpl.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004424:	4935      	ldr	r1, [pc, #212]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004426:	6965      	ldr	r5, [r4, #20]
 8004428:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800442c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004430:	432a      	orrs	r2, r5
 8004432:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004436:	061d      	lsls	r5, r3, #24
 8004438:	d508      	bpl.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800443a:	4930      	ldr	r1, [pc, #192]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800443c:	69a5      	ldr	r5, [r4, #24]
 800443e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004442:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004446:	432a      	orrs	r2, r5
 8004448:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800444c:	05d9      	lsls	r1, r3, #23
 800444e:	d508      	bpl.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004450:	492a      	ldr	r1, [pc, #168]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004452:	69e5      	ldr	r5, [r4, #28]
 8004454:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004458:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800445c:	432a      	orrs	r2, r5
 800445e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004462:	049a      	lsls	r2, r3, #18
 8004464:	d50f      	bpl.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004468:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800446a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800446e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004472:	432a      	orrs	r2, r5
 8004474:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004478:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	bf02      	ittt	eq
 800447e:	68ca      	ldreq	r2, [r1, #12]
 8004480:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8004484:	60ca      	streq	r2, [r1, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004486:	035b      	lsls	r3, r3, #13
 8004488:	d50f      	bpl.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800448e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004492:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004496:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004498:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800449c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a0:	d103      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a2:	68d3      	ldr	r3, [r2, #12]
 80044a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a8:	60d3      	str	r3, [r2, #12]
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 80044aa:	b002      	add	sp, #8
 80044ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044b0:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80044b4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c4:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044cc:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ce:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80044d2:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044d6:	f57f af48 	bpl.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80044da:	f7fe f807 	bl	80024ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80044e2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	f53f af3e 	bmi.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fd fffd 	bl	80024ec <HAL_GetTick>
 80044f2:	1bc0      	subs	r0, r0, r7
 80044f4:	4540      	cmp	r0, r8
 80044f6:	d9f5      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044f8:	e749      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000

08004504 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004504:	4a02      	ldr	r2, [pc, #8]	; (8004510 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	6013      	str	r3, [r2, #0]
}
 800450e:	4770      	bx	lr
 8004510:	40021000 	.word	0x40021000

08004514 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004514:	6a03      	ldr	r3, [r0, #32]
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451c:	6a03      	ldr	r3, [r0, #32]
{
 800451e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004526:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800452a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800452e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004530:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004532:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004536:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004538:	4d12      	ldr	r5, [pc, #72]	; (8004584 <TIM_OC1_SetConfig+0x70>)
 800453a:	42a8      	cmp	r0, r5
 800453c:	d006      	beq.n	800454c <TIM_OC1_SetConfig+0x38>
 800453e:	4e12      	ldr	r6, [pc, #72]	; (8004588 <TIM_OC1_SetConfig+0x74>)
 8004540:	42b0      	cmp	r0, r6
 8004542:	d003      	beq.n	800454c <TIM_OC1_SetConfig+0x38>
 8004544:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004548:	42b0      	cmp	r0, r6
 800454a:	d114      	bne.n	8004576 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800454e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004552:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004556:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455a:	d006      	beq.n	800456a <TIM_OC1_SetConfig+0x56>
 800455c:	4d0a      	ldr	r5, [pc, #40]	; (8004588 <TIM_OC1_SetConfig+0x74>)
 800455e:	42a8      	cmp	r0, r5
 8004560:	d003      	beq.n	800456a <TIM_OC1_SetConfig+0x56>
 8004562:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004566:	42a8      	cmp	r0, r5
 8004568:	d105      	bne.n	8004576 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800456a:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800456e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8004572:	4334      	orrs	r4, r6
 8004574:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004578:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800457a:	684a      	ldr	r2, [r1, #4]
 800457c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457e:	6203      	str	r3, [r0, #32]
}
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40014000 	.word	0x40014000

0800458c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800458c:	6a03      	ldr	r3, [r0, #32]
 800458e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004592:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004594:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004596:	6842      	ldr	r2, [r0, #4]
{
 8004598:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800459a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800459c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800459e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80045a2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80045a6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80045aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	4d0f      	ldr	r5, [pc, #60]	; (80045f0 <TIM_OC3_SetConfig+0x64>)
 80045b4:	42a8      	cmp	r0, r5
 80045b6:	d10e      	bne.n	80045d6 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045c6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ce:	4335      	orrs	r5, r6
 80045d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80045d4:	e005      	b.n	80045e2 <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	4d07      	ldr	r5, [pc, #28]	; (80045f4 <TIM_OC3_SetConfig+0x68>)
 80045d8:	42a8      	cmp	r0, r5
 80045da:	d0f4      	beq.n	80045c6 <TIM_OC3_SetConfig+0x3a>
 80045dc:	4d06      	ldr	r5, [pc, #24]	; (80045f8 <TIM_OC3_SetConfig+0x6c>)
 80045de:	42a8      	cmp	r0, r5
 80045e0:	d0f1      	beq.n	80045c6 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045e4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045e6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045e8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	6203      	str	r3, [r0, #32]
}
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400

080045fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045fc:	6a03      	ldr	r3, [r0, #32]
 80045fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004602:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004604:	6a02      	ldr	r2, [r0, #32]
{
 8004606:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800460e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004612:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004616:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800461a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800461c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004620:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	4d0a      	ldr	r5, [pc, #40]	; (8004650 <TIM_OC4_SetConfig+0x54>)
 8004626:	42a8      	cmp	r0, r5
 8004628:	d007      	beq.n	800463a <TIM_OC4_SetConfig+0x3e>
 800462a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800462e:	42a8      	cmp	r0, r5
 8004630:	d003      	beq.n	800463a <TIM_OC4_SetConfig+0x3e>
 8004632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004636:	42a8      	cmp	r0, r5
 8004638:	d104      	bne.n	8004644 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800463a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800463c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004640:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004646:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004648:	684b      	ldr	r3, [r1, #4]
 800464a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464c:	6202      	str	r2, [r0, #32]
}
 800464e:	bd30      	pop	{r4, r5, pc}
 8004650:	40012c00 	.word	0x40012c00

08004654 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004654:	6a03      	ldr	r3, [r0, #32]
 8004656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465c:	6a02      	ldr	r2, [r0, #32]
{
 800465e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004662:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004664:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800466e:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004670:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8004672:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004676:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	4d0b      	ldr	r5, [pc, #44]	; (80046a8 <TIM_OC5_SetConfig+0x54>)
 800467c:	42a8      	cmp	r0, r5
 800467e:	d007      	beq.n	8004690 <TIM_OC5_SetConfig+0x3c>
 8004680:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004684:	42a8      	cmp	r0, r5
 8004686:	d003      	beq.n	8004690 <TIM_OC5_SetConfig+0x3c>
 8004688:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800468c:	42a8      	cmp	r0, r5
 800468e:	d104      	bne.n	800469a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004690:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004692:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004696:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800469c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800469e:	684b      	ldr	r3, [r1, #4]
 80046a0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	6202      	str	r2, [r0, #32]
}
 80046a4:	bd30      	pop	{r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00

080046ac <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b4:	6a02      	ldr	r2, [r0, #32]
{
 80046b6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ba:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046cc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046d0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	4d0a      	ldr	r5, [pc, #40]	; (8004700 <TIM_OC6_SetConfig+0x54>)
 80046d6:	42a8      	cmp	r0, r5
 80046d8:	d007      	beq.n	80046ea <TIM_OC6_SetConfig+0x3e>
 80046da:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80046de:	42a8      	cmp	r0, r5
 80046e0:	d003      	beq.n	80046ea <TIM_OC6_SetConfig+0x3e>
 80046e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	d104      	bne.n	80046f4 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046ea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046ec:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046f0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046f8:	684b      	ldr	r3, [r1, #4]
 80046fa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fc:	6202      	str	r2, [r0, #32]
}
 80046fe:	bd30      	pop	{r4, r5, pc}
 8004700:	40012c00 	.word	0x40012c00

08004704 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004704:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004708:	2b01      	cmp	r3, #1
 800470a:	d11f      	bne.n	800474c <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004712:	6803      	ldr	r3, [r0, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <HAL_TIM_Base_Start_IT+0x4c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d006      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x2c>
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d003      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x2c>
 8004728:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800472c:	4293      	cmp	r3, r2
 800472e:	d107      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_TIM_Base_Start_IT+0x50>)
 8004734:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	2a06      	cmp	r2, #6
 8004738:	d006      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x44>
 800473a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800473e:	d003      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004748:	2000      	movs	r0, #0
}
 800474a:	4770      	bx	lr
    return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	00010007 	.word	0x00010007

08004758 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	6803      	ldr	r3, [r0, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8004762:	6a19      	ldr	r1, [r3, #32]
 8004764:	f241 1211 	movw	r2, #4369	; 0x1111
 8004768:	4211      	tst	r1, r2
 800476a:	d108      	bne.n	800477e <HAL_TIM_Base_Stop_IT+0x26>
 800476c:	6a19      	ldr	r1, [r3, #32]
 800476e:	f240 4244 	movw	r2, #1092	; 0x444
 8004772:	4211      	tst	r1, r2
 8004774:	bf02      	ittt	eq
 8004776:	681a      	ldreq	r2, [r3, #0]
 8004778:	f022 0201 	biceq.w	r2, r2, #1
 800477c:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800477e:	2301      	movs	r3, #1
 8004780:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004784:	2000      	movs	r0, #0
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_OC_MspInit>:
 8004788:	4770      	bx	lr

0800478a <HAL_TIM_OC_DelayElapsedCallback>:
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_IC_CaptureCallback>:
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_PWM_PulseFinishedCallback>:
 800478e:	4770      	bx	lr

08004790 <TIM_DMADelayPulseCplt>:
{
 8004790:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004796:	4282      	cmp	r2, r0
 8004798:	d10b      	bne.n	80047b2 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479a:	2301      	movs	r3, #1
 800479c:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800479e:	69d2      	ldr	r2, [r2, #28]
 80047a0:	b90a      	cbnz	r2, 80047a6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7ff fff1 	bl	800478e <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	2300      	movs	r3, #0
 80047ae:	7723      	strb	r3, [r4, #28]
}
 80047b0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047b4:	4283      	cmp	r3, r0
 80047b6:	d108      	bne.n	80047ca <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b8:	2202      	movs	r2, #2
 80047ba:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f1      	bne.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	2301      	movs	r3, #1
 80047c4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80047c8:	e7ed      	b.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047cc:	4283      	cmp	r3, r0
 80047ce:	d108      	bne.n	80047e2 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d0:	2204      	movs	r2, #4
 80047d2:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	2301      	movs	r3, #1
 80047dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80047e0:	e7e1      	b.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047e4:	4283      	cmp	r3, r0
 80047e6:	d1de      	bne.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e8:	2208      	movs	r2, #8
 80047ea:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1d9      	bne.n	80047a6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	2301      	movs	r3, #1
 80047f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80047f8:	e7d5      	b.n	80047a6 <TIM_DMADelayPulseCplt+0x16>

080047fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 80047fa:	4770      	bx	lr

080047fc <TIM_DMADelayPulseHalfCplt>:
{
 80047fc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004802:	4283      	cmp	r3, r0
 8004804:	d107      	bne.n	8004816 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004806:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004808:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff fff5 	bl	80047fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004810:	2300      	movs	r3, #0
 8004812:	7723      	strb	r3, [r4, #28]
}
 8004814:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004818:	4283      	cmp	r3, r0
 800481a:	d101      	bne.n	8004820 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800481c:	2302      	movs	r3, #2
 800481e:	e7f3      	b.n	8004808 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004822:	4283      	cmp	r3, r0
 8004824:	d101      	bne.n	800482a <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004826:	2304      	movs	r3, #4
 8004828:	e7ee      	b.n	8004808 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800482a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800482c:	4283      	cmp	r3, r0
 800482e:	d1ec      	bne.n	800480a <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004830:	2308      	movs	r3, #8
 8004832:	e7e9      	b.n	8004808 <TIM_DMADelayPulseHalfCplt+0xc>

08004834 <HAL_TIM_TriggerCallback>:
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004836:	6803      	ldr	r3, [r0, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	0791      	lsls	r1, r2, #30
{
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	d50f      	bpl.n	8004862 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	0792      	lsls	r2, r2, #30
 8004846:	d50c      	bpl.n	8004862 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004848:	f06f 0202 	mvn.w	r2, #2
 800484c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	2201      	movs	r2, #1
 8004850:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	0799      	lsls	r1, r3, #30
 8004856:	f000 8085 	beq.w	8004964 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	f7ff ff97 	bl	800478c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	2300      	movs	r3, #0
 8004860:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	0752      	lsls	r2, r2, #29
 8004868:	d510      	bpl.n	800488c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	0750      	lsls	r0, r2, #29
 800486e:	d50d      	bpl.n	800488c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	2202      	movs	r2, #2
 8004878:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004880:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004882:	d075      	beq.n	8004970 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004884:	f7ff ff82 	bl	800478c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004888:	2300      	movs	r3, #0
 800488a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	0711      	lsls	r1, r2, #28
 8004892:	d50f      	bpl.n	80048b4 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	0712      	lsls	r2, r2, #28
 8004898:	d50c      	bpl.n	80048b4 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800489a:	f06f 0208 	mvn.w	r2, #8
 800489e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a0:	2204      	movs	r2, #4
 80048a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80048a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048aa:	d067      	beq.n	800497c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	f7ff ff6e 	bl	800478c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	2300      	movs	r3, #0
 80048b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	06d0      	lsls	r0, r2, #27
 80048ba:	d510      	bpl.n	80048de <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	06d1      	lsls	r1, r2, #27
 80048c0:	d50d      	bpl.n	80048de <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048c2:	f06f 0210 	mvn.w	r2, #16
 80048c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c8:	2208      	movs	r2, #8
 80048ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d4:	d058      	beq.n	8004988 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	f7ff ff59 	bl	800478c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	2300      	movs	r3, #0
 80048dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	07d2      	lsls	r2, r2, #31
 80048e4:	d508      	bpl.n	80048f8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	07d0      	lsls	r0, r2, #31
 80048ea:	d505      	bpl.n	80048f8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	f06f 0201 	mvn.w	r2, #1
 80048f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7fc ff22 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	0611      	lsls	r1, r2, #24
 80048fe:	d508      	bpl.n	8004912 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	0612      	lsls	r2, r2, #24
 8004904:	d505      	bpl.n	8004912 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800490c:	4620      	mov	r0, r4
 800490e:	f000 fcc8 	bl	80052a2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	05d0      	lsls	r0, r2, #23
 8004918:	d508      	bpl.n	800492c <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	0611      	lsls	r1, r2, #24
 800491e:	d505      	bpl.n	800492c <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004920:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004924:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004926:	4620      	mov	r0, r4
 8004928:	f000 fcbc 	bl	80052a4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	0652      	lsls	r2, r2, #25
 8004932:	d508      	bpl.n	8004946 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	0650      	lsls	r0, r2, #25
 8004938:	d505      	bpl.n	8004946 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800493e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff ff77 	bl	8004834 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	0691      	lsls	r1, r2, #26
 800494c:	d522      	bpl.n	8004994 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	0692      	lsls	r2, r2, #26
 8004952:	d51f      	bpl.n	8004994 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004954:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004958:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495a:	611a      	str	r2, [r3, #16]
}
 800495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004960:	f000 bc9e 	b.w	80052a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004964:	f7ff ff11 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff ff10 	bl	800478e <HAL_TIM_PWM_PulseFinishedCallback>
 800496e:	e776      	b.n	800485e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004970:	f7ff ff0b 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	4620      	mov	r0, r4
 8004976:	f7ff ff0a 	bl	800478e <HAL_TIM_PWM_PulseFinishedCallback>
 800497a:	e785      	b.n	8004888 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497c:	f7ff ff05 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff ff04 	bl	800478e <HAL_TIM_PWM_PulseFinishedCallback>
 8004986:	e793      	b.n	80048b0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004988:	f7ff feff 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	4620      	mov	r0, r4
 800498e:	f7ff fefe 	bl	800478e <HAL_TIM_PWM_PulseFinishedCallback>
 8004992:	e7a2      	b.n	80048da <HAL_TIM_IRQHandler+0xa4>
}
 8004994:	bd10      	pop	{r4, pc}

08004996 <HAL_TIM_ErrorCallback>:
 8004996:	4770      	bx	lr

08004998 <TIM_DMAError>:
{
 8004998:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800499a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800499c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499e:	4283      	cmp	r3, r0
 80049a0:	d109      	bne.n	80049b6 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7ff fff3 	bl	8004996 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	2300      	movs	r3, #0
 80049b2:	7723      	strb	r3, [r4, #28]
}
 80049b4:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049b8:	4283      	cmp	r3, r0
 80049ba:	d105      	bne.n	80049c8 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049bc:	2302      	movs	r3, #2
 80049be:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	2301      	movs	r3, #1
 80049c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049c6:	e7f0      	b.n	80049aa <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049ca:	4283      	cmp	r3, r0
 80049cc:	f04f 0301 	mov.w	r3, #1
 80049d0:	d104      	bne.n	80049dc <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	2204      	movs	r2, #4
 80049d4:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049da:	e7e6      	b.n	80049aa <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049de:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e0:	bf03      	ittte	eq
 80049e2:	2208      	moveq	r2, #8
 80049e4:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 80049ea:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 80049ee:	e7dc      	b.n	80049aa <TIM_DMAError+0x12>

080049f0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80049f2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	4290      	cmp	r0, r2
{
 80049f6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	d002      	beq.n	8004a00 <TIM_Base_SetConfig+0x10>
 80049fa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049fe:	d109      	bne.n	8004a14 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8004a00:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a06:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004a08:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0c:	d009      	beq.n	8004a22 <TIM_Base_SetConfig+0x32>
 8004a0e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a12:	d006      	beq.n	8004a22 <TIM_Base_SetConfig+0x32>
 8004a14:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <TIM_Base_SetConfig+0x70>)
 8004a16:	4290      	cmp	r0, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0x32>
 8004a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a1e:	4290      	cmp	r0, r2
 8004a20:	d103      	bne.n	8004a2a <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a22:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2a:	694a      	ldr	r2, [r1, #20]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	688b      	ldr	r3, [r1, #8]
 8004a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a38:	680b      	ldr	r3, [r1, #0]
 8004a3a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <TIM_Base_SetConfig+0x6c>)
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x62>
 8004a42:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004a46:	4298      	cmp	r0, r3
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x62>
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d101      	bne.n	8004a56 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004a56:	2301      	movs	r3, #1
 8004a58:	6143      	str	r3, [r0, #20]
}
 8004a5a:	bd10      	pop	{r4, pc}
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40014000 	.word	0x40014000

08004a64 <HAL_TIM_Base_Init>:
{
 8004a64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004a66:	4604      	mov	r4, r0
 8004a68:	b350      	cbz	r0, 8004ac0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a72:	b91b      	cbnz	r3, 8004a7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004a74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a78:	f7fd fb3e 	bl	80020f8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	1d21      	adds	r1, r4, #4
 8004a86:	f7ff ffb3 	bl	80049f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004a90:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004ab6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004abe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7fc      	b.n	8004abe <HAL_TIM_Base_Init+0x5a>

08004ac4 <HAL_TIM_OC_Init>:
{
 8004ac4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	b350      	cbz	r0, 8004b20 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ace:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ad2:	b91b      	cbnz	r3, 8004adc <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004ad4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004ad8:	f7ff fe56 	bl	8004788 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ade:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ae4:	1d21      	adds	r1, r4, #4
 8004ae6:	f7ff ff83 	bl	80049f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004af0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004af6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004afa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004afe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b16:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004b1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
 8004b22:	e7fc      	b.n	8004b1e <HAL_TIM_OC_Init+0x5a>

08004b24 <HAL_TIM_PWM_Init>:
{
 8004b24:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004b26:	4604      	mov	r4, r0
 8004b28:	b350      	cbz	r0, 8004b80 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b32:	b91b      	cbnz	r3, 8004b3c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004b34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004b38:	f7fd fa8e 	bl	8002058 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	1d21      	adds	r1, r4, #4
 8004b46:	f7ff ff53 	bl	80049f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004b50:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b76:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004b7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b80:	2001      	movs	r0, #1
 8004b82:	e7fc      	b.n	8004b7e <HAL_TIM_PWM_Init+0x5a>

08004b84 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b84:	6a03      	ldr	r3, [r0, #32]
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b8c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b8e:	6842      	ldr	r2, [r0, #4]
{
 8004b90:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8004b92:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b96:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004b9a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	4d0e      	ldr	r5, [pc, #56]	; (8004be8 <TIM_OC2_SetConfig+0x64>)
 8004bae:	42a8      	cmp	r0, r5
 8004bb0:	d10e      	bne.n	8004bd0 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc8:	4335      	orrs	r5, r6
 8004bca:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004bce:	e005      	b.n	8004bdc <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	4d06      	ldr	r5, [pc, #24]	; (8004bec <TIM_OC2_SetConfig+0x68>)
 8004bd2:	42a8      	cmp	r0, r5
 8004bd4:	d0f4      	beq.n	8004bc0 <TIM_OC2_SetConfig+0x3c>
 8004bd6:	4d06      	ldr	r5, [pc, #24]	; (8004bf0 <TIM_OC2_SetConfig+0x6c>)
 8004bd8:	42a8      	cmp	r0, r5
 8004bda:	d0f1      	beq.n	8004bc0 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8004bdc:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004bde:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004be0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004be2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004be4:	6203      	str	r3, [r0, #32]
}
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400

08004bf4 <HAL_TIM_OC_ConfigChannel>:
{
 8004bf4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004bf6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
{
 8004bfc:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004bfe:	d02b      	beq.n	8004c58 <HAL_TIM_OC_ConfigChannel+0x64>
 8004c00:	2001      	movs	r0, #1
  switch (Channel)
 8004c02:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004c04:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004c08:	d01e      	beq.n	8004c48 <HAL_TIM_OC_ConfigChannel+0x54>
 8004c0a:	d808      	bhi.n	8004c1e <HAL_TIM_OC_ConfigChannel+0x2a>
 8004c0c:	2a04      	cmp	r2, #4
 8004c0e:	d013      	beq.n	8004c38 <HAL_TIM_OC_ConfigChannel+0x44>
 8004c10:	2a08      	cmp	r2, #8
 8004c12:	d015      	beq.n	8004c40 <HAL_TIM_OC_ConfigChannel+0x4c>
 8004c14:	b15a      	cbz	r2, 8004c2e <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8004c16:	2300      	movs	r3, #0
 8004c18:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004c1e:	2a10      	cmp	r2, #16
 8004c20:	d016      	beq.n	8004c50 <HAL_TIM_OC_ConfigChannel+0x5c>
 8004c22:	2a14      	cmp	r2, #20
 8004c24:	d1f7      	bne.n	8004c16 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c26:	6828      	ldr	r0, [r5, #0]
 8004c28:	f7ff fd40 	bl	80046ac <TIM_OC6_SetConfig>
 8004c2c:	e002      	b.n	8004c34 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c2e:	6828      	ldr	r0, [r5, #0]
 8004c30:	f7ff fc70 	bl	8004514 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2000      	movs	r0, #0
      break;
 8004c36:	e7ee      	b.n	8004c16 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c38:	6828      	ldr	r0, [r5, #0]
 8004c3a:	f7ff ffa3 	bl	8004b84 <TIM_OC2_SetConfig>
      break;
 8004c3e:	e7f9      	b.n	8004c34 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c40:	6828      	ldr	r0, [r5, #0]
 8004c42:	f7ff fca3 	bl	800458c <TIM_OC3_SetConfig>
      break;
 8004c46:	e7f5      	b.n	8004c34 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c48:	6828      	ldr	r0, [r5, #0]
 8004c4a:	f7ff fcd7 	bl	80045fc <TIM_OC4_SetConfig>
      break;
 8004c4e:	e7f1      	b.n	8004c34 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c50:	6828      	ldr	r0, [r5, #0]
 8004c52:	f7ff fcff 	bl	8004654 <TIM_OC5_SetConfig>
      break;
 8004c56:	e7ed      	b.n	8004c34 <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8004c58:	2002      	movs	r0, #2
 8004c5a:	e7df      	b.n	8004c1c <HAL_TIM_OC_ConfigChannel+0x28>

08004c5c <HAL_TIM_PWM_ConfigChannel>:
{
 8004c5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004c5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
{
 8004c64:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004c66:	d079      	beq.n	8004d5c <HAL_TIM_PWM_ConfigChannel+0x100>
 8004c68:	2001      	movs	r0, #1
  switch (Channel)
 8004c6a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004c6c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004c70:	d052      	beq.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004c72:	d808      	bhi.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004c74:	2a04      	cmp	r2, #4
 8004c76:	d02d      	beq.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x78>
 8004c78:	2a08      	cmp	r2, #8
 8004c7a:	d03c      	beq.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x9a>
 8004c7c:	b1c2      	cbz	r2, 8004cb0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004c86:	2a10      	cmp	r2, #16
 8004c88:	d057      	beq.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004c8a:	2a14      	cmp	r2, #20
 8004c8c:	d1f7      	bne.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c8e:	6828      	ldr	r0, [r5, #0]
 8004c90:	f7ff fd0c 	bl	80046ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c94:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c96:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cae:	e053      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb0:	6828      	ldr	r0, [r5, #0]
 8004cb2:	f7ff fc2f 	bl	8004514 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	f042 0208 	orr.w	r2, r2, #8
 8004cc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc2:	699a      	ldr	r2, [r3, #24]
 8004cc4:	f022 0204 	bic.w	r2, r2, #4
 8004cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cce:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2000      	movs	r0, #0
      break;
 8004cd2:	e7d4      	b.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd4:	6828      	ldr	r0, [r5, #0]
 8004cd6:	f7ff ff55 	bl	8004b84 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cda:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cdc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cf4:	e7eb      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cf6:	6828      	ldr	r0, [r5, #0]
 8004cf8:	f7ff fc48 	bl	800458c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d14:	61da      	str	r2, [r3, #28]
      break;
 8004d16:	e7db      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d18:	6828      	ldr	r0, [r5, #0]
 8004d1a:	f7ff fc6f 	bl	80045fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d38:	e7ec      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d3a:	6828      	ldr	r0, [r5, #0]
 8004d3c:	f7ff fc8a 	bl	8004654 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d40:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d42:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d56:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
 8004d5a:	e7b9      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	e791      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x28>

08004d60 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d60:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d62:	f001 011f 	and.w	r1, r1, #31
{
 8004d66:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d68:	2401      	movs	r4, #1
 8004d6a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004d6c:	ea23 0304 	bic.w	r3, r3, r4
 8004d70:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d72:	6a03      	ldr	r3, [r0, #32]
 8004d74:	408a      	lsls	r2, r1
 8004d76:	431a      	orrs	r2, r3
 8004d78:	6202      	str	r2, [r0, #32]
}
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <HAL_TIM_OC_Start>:
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d80:	b929      	cbnz	r1, 8004d8e <HAL_TIM_OC_Start+0x12>
 8004d82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d027      	beq.n	8004dda <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e043      	b.n	8004e16 <HAL_TIM_OC_Start+0x9a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	2904      	cmp	r1, #4
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_OC_Start+0x26>
 8004d92:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d1f7      	bne.n	8004d8a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004da0:	e01e      	b.n	8004de0 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	2908      	cmp	r1, #8
 8004da4:	d10d      	bne.n	8004dc2 <HAL_TIM_OC_Start+0x46>
 8004da6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004daa:	3b01      	subs	r3, #1
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ea      	bne.n	8004d8a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db4:	2908      	cmp	r1, #8
 8004db6:	f04f 0302 	mov.w	r3, #2
 8004dba:	d12d      	bne.n	8004e18 <HAL_TIM_OC_Start+0x9c>
 8004dbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004dc0:	e00e      	b.n	8004de0 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dc2:	290c      	cmp	r1, #12
 8004dc4:	d102      	bne.n	8004dcc <HAL_TIM_OC_Start+0x50>
 8004dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004dca:	e7ee      	b.n	8004daa <HAL_TIM_OC_Start+0x2e>
 8004dcc:	2910      	cmp	r1, #16
 8004dce:	bf0c      	ite	eq
 8004dd0:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8004dd4:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8004dd8:	e7e7      	b.n	8004daa <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f7ff ffbc 	bl	8004d60 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	491a      	ldr	r1, [pc, #104]	; (8004e54 <HAL_TIM_OC_Start+0xd8>)
 8004dec:	428b      	cmp	r3, r1
 8004dee:	d006      	beq.n	8004dfe <HAL_TIM_OC_Start+0x82>
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_TIM_OC_Start+0xdc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_OC_Start+0x82>
 8004df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d127      	bne.n	8004e4e <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e00:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 8004e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e08:	d112      	bne.n	8004e30 <HAL_TIM_OC_Start+0xb4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <HAL_TIM_OC_Start+0xe0>)
 8004e0e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e10:	2a06      	cmp	r2, #6
 8004e12:	d114      	bne.n	8004e3e <HAL_TIM_OC_Start+0xc2>
  return HAL_OK;
 8004e14:	2000      	movs	r0, #0
}
 8004e16:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e18:	290c      	cmp	r1, #12
 8004e1a:	d102      	bne.n	8004e22 <HAL_TIM_OC_Start+0xa6>
 8004e1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004e20:	e7de      	b.n	8004de0 <HAL_TIM_OC_Start+0x64>
 8004e22:	2910      	cmp	r1, #16
 8004e24:	bf0c      	ite	eq
 8004e26:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004e2a:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004e2e:	e7d7      	b.n	8004de0 <HAL_TIM_OC_Start+0x64>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d0e9      	beq.n	8004e0a <HAL_TIM_OC_Start+0x8e>
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <HAL_TIM_OC_Start+0xdc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d103      	bne.n	8004e44 <HAL_TIM_OC_Start+0xc8>
 8004e3c:	e7e5      	b.n	8004e0a <HAL_TIM_OC_Start+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004e42:	d0e7      	beq.n	8004e14 <HAL_TIM_OC_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e7e2      	b.n	8004e14 <HAL_TIM_OC_Start+0x98>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	e7f2      	b.n	8004e3a <HAL_TIM_OC_Start+0xbe>
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	00010007 	.word	0x00010007

08004e60 <HAL_TIM_PWM_Start>:
 8004e60:	f7ff bf8c 	b.w	8004d7c <HAL_TIM_OC_Start>

08004e64 <HAL_TIM_OC_Stop>:
{
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	6800      	ldr	r0, [r0, #0]
{
 8004e6c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e6e:	f7ff ff77 	bl	8004d60 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	4a21      	ldr	r2, [pc, #132]	; (8004efc <HAL_TIM_OC_Stop+0x98>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <HAL_TIM_OC_Stop+0x26>
 8004e7a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_OC_Stop+0x26>
 8004e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10d      	bne.n	8004ea6 <HAL_TIM_OC_Stop+0x42>
    __HAL_TIM_MOE_DISABLE(htim);
 8004e8a:	6a19      	ldr	r1, [r3, #32]
 8004e8c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004e90:	4211      	tst	r1, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_TIM_OC_Stop+0x42>
 8004e94:	6a19      	ldr	r1, [r3, #32]
 8004e96:	f240 4244 	movw	r2, #1092	; 0x444
 8004e9a:	4211      	tst	r1, r2
 8004e9c:	bf02      	ittt	eq
 8004e9e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004ea0:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004ea4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8004ea6:	6a19      	ldr	r1, [r3, #32]
 8004ea8:	f241 1211 	movw	r2, #4369	; 0x1111
 8004eac:	4211      	tst	r1, r2
 8004eae:	d108      	bne.n	8004ec2 <HAL_TIM_OC_Stop+0x5e>
 8004eb0:	6a19      	ldr	r1, [r3, #32]
 8004eb2:	f240 4244 	movw	r2, #1092	; 0x444
 8004eb6:	4211      	tst	r1, r2
 8004eb8:	bf02      	ittt	eq
 8004eba:	681a      	ldreq	r2, [r3, #0]
 8004ebc:	f022 0201 	biceq.w	r2, r2, #1
 8004ec0:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	b91d      	cbnz	r5, 8004ece <HAL_TIM_OC_Stop+0x6a>
 8004ec6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004eca:	2000      	movs	r0, #0
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	2d04      	cmp	r5, #4
 8004ed0:	d102      	bne.n	8004ed8 <HAL_TIM_OC_Stop+0x74>
 8004ed2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ed6:	e7f8      	b.n	8004eca <HAL_TIM_OC_Stop+0x66>
 8004ed8:	2d08      	cmp	r5, #8
 8004eda:	d102      	bne.n	8004ee2 <HAL_TIM_OC_Stop+0x7e>
 8004edc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004ee0:	e7f3      	b.n	8004eca <HAL_TIM_OC_Stop+0x66>
 8004ee2:	2d0c      	cmp	r5, #12
 8004ee4:	d102      	bne.n	8004eec <HAL_TIM_OC_Stop+0x88>
 8004ee6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004eea:	e7ee      	b.n	8004eca <HAL_TIM_OC_Stop+0x66>
 8004eec:	2d10      	cmp	r5, #16
 8004eee:	bf0c      	ite	eq
 8004ef0:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004ef4:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004ef8:	e7e7      	b.n	8004eca <HAL_TIM_OC_Stop+0x66>
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00

08004f00 <HAL_TIM_PWM_Stop>:
 8004f00:	f7ff bfb0 	b.w	8004e64 <HAL_TIM_OC_Stop>

08004f04 <HAL_TIM_OC_Start_DMA>:
{
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	460d      	mov	r5, r1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004f0c:	b955      	cbnz	r5, 8004f24 <HAL_TIM_OC_Start_DMA+0x20>
 8004f0e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004f12:	f1a0 0c02 	sub.w	ip, r0, #2
 8004f16:	f1dc 0000 	rsbs	r0, ip, #0
 8004f1a:	eb40 000c 	adc.w	r0, r0, ip
 8004f1e:	b1c0      	cbz	r0, 8004f52 <HAL_TIM_OC_Start_DMA+0x4e>
    return HAL_BUSY;
 8004f20:	2002      	movs	r0, #2
 8004f22:	e01e      	b.n	8004f62 <HAL_TIM_OC_Start_DMA+0x5e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004f24:	2d04      	cmp	r5, #4
 8004f26:	d102      	bne.n	8004f2e <HAL_TIM_OC_Start_DMA+0x2a>
 8004f28:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004f2c:	e7f1      	b.n	8004f12 <HAL_TIM_OC_Start_DMA+0xe>
 8004f2e:	2d08      	cmp	r5, #8
 8004f30:	d102      	bne.n	8004f38 <HAL_TIM_OC_Start_DMA+0x34>
 8004f32:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8004f36:	e7ec      	b.n	8004f12 <HAL_TIM_OC_Start_DMA+0xe>
 8004f38:	2d0c      	cmp	r5, #12
 8004f3a:	d102      	bne.n	8004f42 <HAL_TIM_OC_Start_DMA+0x3e>
 8004f3c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004f40:	e7e7      	b.n	8004f12 <HAL_TIM_OC_Start_DMA+0xe>
 8004f42:	2d10      	cmp	r5, #16
 8004f44:	d102      	bne.n	8004f4c <HAL_TIM_OC_Start_DMA+0x48>
 8004f46:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004f4a:	e7e2      	b.n	8004f12 <HAL_TIM_OC_Start_DMA+0xe>
 8004f4c:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8004f50:	e7df      	b.n	8004f12 <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004f52:	b93d      	cbnz	r5, 8004f64 <HAL_TIM_OC_Start_DMA+0x60>
 8004f54:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004f58:	1e50      	subs	r0, r2, #1
 8004f5a:	4242      	negs	r2, r0
 8004f5c:	4142      	adcs	r2, r0
 8004f5e:	b9c2      	cbnz	r2, 8004f92 <HAL_TIM_OC_Start_DMA+0x8e>
      status = HAL_ERROR;
 8004f60:	2001      	movs	r0, #1
}
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004f64:	2d04      	cmp	r5, #4
 8004f66:	d102      	bne.n	8004f6e <HAL_TIM_OC_Start_DMA+0x6a>
 8004f68:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8004f6c:	e7f4      	b.n	8004f58 <HAL_TIM_OC_Start_DMA+0x54>
 8004f6e:	2d08      	cmp	r5, #8
 8004f70:	d102      	bne.n	8004f78 <HAL_TIM_OC_Start_DMA+0x74>
 8004f72:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004f76:	e7ef      	b.n	8004f58 <HAL_TIM_OC_Start_DMA+0x54>
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	d102      	bne.n	8004f82 <HAL_TIM_OC_Start_DMA+0x7e>
 8004f7c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004f80:	e7ea      	b.n	8004f58 <HAL_TIM_OC_Start_DMA+0x54>
 8004f82:	2d10      	cmp	r5, #16
 8004f84:	bf0c      	ite	eq
 8004f86:	f894 2042 	ldrbeq.w	r2, [r4, #66]	; 0x42
 8004f8a:	f894 2043 	ldrbne.w	r2, [r4, #67]	; 0x43
 8004f8e:	2a01      	cmp	r2, #1
 8004f90:	d1e6      	bne.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
    if ((pData == NULL) || (Length == 0U))
 8004f92:	2900      	cmp	r1, #0
 8004f94:	d0e4      	beq.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0e2      	beq.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	d130      	bne.n	8005002 <HAL_TIM_OC_Start_DMA+0xfe>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fa6:	4a45      	ldr	r2, [pc, #276]	; (80050bc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004fa8:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004faa:	4a45      	ldr	r2, [pc, #276]	; (80050c0 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004fac:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004fae:	4a45      	ldr	r2, [pc, #276]	; (80050c4 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004fb0:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	3234      	adds	r2, #52	; 0x34
 8004fb6:	f7fe fa1f 	bl	80033f8 <HAL_DMA_Start_IT>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d1d0      	bne.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	68d3      	ldr	r3, [r2, #12]
 8004fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004fc6:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc8:	4629      	mov	r1, r5
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f7ff fec7 	bl	8004d60 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	493c      	ldr	r1, [pc, #240]	; (80050c8 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	d006      	beq.n	8004fe8 <HAL_TIM_OC_Start_DMA+0xe4>
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_OC_Start_DMA+0xe4>
 8004fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d166      	bne.n	80050b6 <HAL_TIM_OC_Start_DMA+0x1b2>
      __HAL_TIM_MOE_ENABLE(htim);
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fea:	428b      	cmp	r3, r1
      __HAL_TIM_MOE_ENABLE(htim);
 8004fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff2:	d151      	bne.n	8005098 <HAL_TIM_OC_Start_DMA+0x194>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	6899      	ldr	r1, [r3, #8]
 8004ff6:	4a36      	ldr	r2, [pc, #216]	; (80050d0 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004ff8:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	2a06      	cmp	r2, #6
 8004ffc:	d153      	bne.n	80050a6 <HAL_TIM_OC_Start_DMA+0x1a2>
 8004ffe:	2000      	movs	r0, #0
 8005000:	e7af      	b.n	8004f62 <HAL_TIM_OC_Start_DMA+0x5e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	2d04      	cmp	r5, #4
 8005004:	d113      	bne.n	800502e <HAL_TIM_OC_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005006:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005008:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <HAL_TIM_OC_Start_DMA+0x1b8>)
 800500e:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005010:	4a2b      	ldr	r2, [pc, #172]	; (80050c0 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8005012:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005014:	4a2b      	ldr	r2, [pc, #172]	; (80050c4 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8005016:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	3238      	adds	r2, #56	; 0x38
 800501c:	f7fe f9ec 	bl	80033f8 <HAL_DMA_Start_IT>
 8005020:	2800      	cmp	r0, #0
 8005022:	d19d      	bne.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	68d3      	ldr	r3, [r2, #12]
 8005028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800502c:	e7cb      	b.n	8004fc6 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	2d08      	cmp	r5, #8
 8005030:	d113      	bne.n	800505a <HAL_TIM_OC_Start_DMA+0x156>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005032:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005034:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <HAL_TIM_OC_Start_DMA+0x1b8>)
 800503a:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800503c:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <HAL_TIM_OC_Start_DMA+0x1bc>)
 800503e:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8005042:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	323c      	adds	r2, #60	; 0x3c
 8005048:	f7fe f9d6 	bl	80033f8 <HAL_DMA_Start_IT>
 800504c:	2800      	cmp	r0, #0
 800504e:	d187      	bne.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	68d3      	ldr	r3, [r2, #12]
 8005054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005058:	e7b5      	b.n	8004fc6 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	2d0c      	cmp	r5, #12
 800505c:	d114      	bne.n	8005088 <HAL_TIM_OC_Start_DMA+0x184>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800505e:	6b20      	ldr	r0, [r4, #48]	; 0x30
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005060:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8005066:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005068:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_TIM_OC_Start_DMA+0x1bc>)
 800506a:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <HAL_TIM_OC_Start_DMA+0x1c0>)
 800506e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	3240      	adds	r2, #64	; 0x40
 8005074:	f7fe f9c0 	bl	80033f8 <HAL_DMA_Start_IT>
 8005078:	2800      	cmp	r0, #0
 800507a:	f47f af71 	bne.w	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	68d3      	ldr	r3, [r2, #12]
 8005082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005086:	e79e      	b.n	8004fc6 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005088:	2d10      	cmp	r5, #16
 800508a:	d102      	bne.n	8005092 <HAL_TIM_OC_Start_DMA+0x18e>
 800508c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005090:	e766      	b.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
 8005092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  switch (Channel)
 8005096:	e763      	b.n	8004f60 <HAL_TIM_OC_Start_DMA+0x5c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509c:	d0aa      	beq.n	8004ff4 <HAL_TIM_OC_Start_DMA+0xf0>
 800509e:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_TIM_OC_Start_DMA+0x1c8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <HAL_TIM_OC_Start_DMA+0x1a8>
 80050a4:	e7a6      	b.n	8004ff4 <HAL_TIM_OC_Start_DMA+0xf0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80050aa:	d0a8      	beq.n	8004ffe <HAL_TIM_OC_Start_DMA+0xfa>
      __HAL_TIM_ENABLE(htim);
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e7a3      	b.n	8004ffe <HAL_TIM_OC_Start_DMA+0xfa>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	e7f2      	b.n	80050a2 <HAL_TIM_OC_Start_DMA+0x19e>
 80050bc:	08004791 	.word	0x08004791
 80050c0:	080047fd 	.word	0x080047fd
 80050c4:	08004999 	.word	0x08004999
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40014000 	.word	0x40014000
 80050d0:	00010007 	.word	0x00010007

080050d4 <HAL_TIM_OC_Stop_DMA>:
  switch (Channel)
 80050d4:	2908      	cmp	r1, #8
{
 80050d6:	b538      	push	{r3, r4, r5, lr}
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
  switch (Channel)
 80050dc:	d050      	beq.n	8005180 <HAL_TIM_OC_Stop_DMA+0xac>
 80050de:	d804      	bhi.n	80050ea <HAL_TIM_OC_Stop_DMA+0x16>
 80050e0:	b161      	cbz	r1, 80050fc <HAL_TIM_OC_Stop_DMA+0x28>
 80050e2:	2904      	cmp	r1, #4
 80050e4:	d045      	beq.n	8005172 <HAL_TIM_OC_Stop_DMA+0x9e>
 80050e6:	2001      	movs	r0, #1
}
 80050e8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80050ea:	290c      	cmp	r1, #12
 80050ec:	d1fb      	bne.n	80050e6 <HAL_TIM_OC_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80050ee:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80050f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80050f2:	68d3      	ldr	r3, [r2, #12]
 80050f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80050fa:	e005      	b.n	8005108 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80050fc:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80050fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005100:	68d3      	ldr	r3, [r2, #12]
 8005102:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005106:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005108:	f7fe f9d8 	bl	80034bc <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800510c:	2200      	movs	r2, #0
 800510e:	6828      	ldr	r0, [r5, #0]
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff fe25 	bl	8004d60 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <HAL_TIM_OC_Stop_DMA+0xe8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <HAL_TIM_OC_Stop_DMA+0x5a>
 800511e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <HAL_TIM_OC_Stop_DMA+0x5a>
 8005126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <HAL_TIM_OC_Stop_DMA+0x76>
      __HAL_TIM_MOE_DISABLE(htim);
 800512e:	6a19      	ldr	r1, [r3, #32]
 8005130:	f241 1211 	movw	r2, #4369	; 0x1111
 8005134:	4211      	tst	r1, r2
 8005136:	d108      	bne.n	800514a <HAL_TIM_OC_Stop_DMA+0x76>
 8005138:	6a19      	ldr	r1, [r3, #32]
 800513a:	f240 4244 	movw	r2, #1092	; 0x444
 800513e:	4211      	tst	r1, r2
 8005140:	bf02      	ittt	eq
 8005142:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8005144:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8005148:	645a      	streq	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800514a:	6a19      	ldr	r1, [r3, #32]
 800514c:	f241 1211 	movw	r2, #4369	; 0x1111
 8005150:	4211      	tst	r1, r2
 8005152:	d108      	bne.n	8005166 <HAL_TIM_OC_Stop_DMA+0x92>
 8005154:	6a19      	ldr	r1, [r3, #32]
 8005156:	f240 4244 	movw	r2, #1092	; 0x444
 800515a:	4211      	tst	r1, r2
 800515c:	bf02      	ittt	eq
 800515e:	681a      	ldreq	r2, [r3, #0]
 8005160:	f022 0201 	biceq.w	r2, r2, #1
 8005164:	601a      	streq	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	2301      	movs	r3, #1
 8005168:	b98c      	cbnz	r4, 800518e <HAL_TIM_OC_Stop_DMA+0xba>
 800516a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 800516e:	2000      	movs	r0, #0
 8005170:	e7ba      	b.n	80050e8 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005172:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005174:	6a80      	ldr	r0, [r0, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005176:	68d3      	ldr	r3, [r2, #12]
 8005178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800517e:	e7c3      	b.n	8005108 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005180:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005182:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005184:	68d3      	ldr	r3, [r2, #12]
 8005186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800518c:	e7bc      	b.n	8005108 <HAL_TIM_OC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	2c04      	cmp	r4, #4
 8005190:	d102      	bne.n	8005198 <HAL_TIM_OC_Stop_DMA+0xc4>
 8005192:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8005196:	e7ea      	b.n	800516e <HAL_TIM_OC_Stop_DMA+0x9a>
 8005198:	2c08      	cmp	r4, #8
 800519a:	d102      	bne.n	80051a2 <HAL_TIM_OC_Stop_DMA+0xce>
 800519c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80051a0:	e7e5      	b.n	800516e <HAL_TIM_OC_Stop_DMA+0x9a>
 80051a2:	2c0c      	cmp	r4, #12
 80051a4:	d102      	bne.n	80051ac <HAL_TIM_OC_Stop_DMA+0xd8>
 80051a6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80051aa:	e7e0      	b.n	800516e <HAL_TIM_OC_Stop_DMA+0x9a>
 80051ac:	2c10      	cmp	r4, #16
 80051ae:	bf0c      	ite	eq
 80051b0:	f885 3042 	strbeq.w	r3, [r5, #66]	; 0x42
 80051b4:	f885 3043 	strbne.w	r3, [r5, #67]	; 0x43
 80051b8:	e7d9      	b.n	800516e <HAL_TIM_OC_Stop_DMA+0x9a>
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f04f 0302 	mov.w	r3, #2
 80051cc:	d023      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051d0:	4d12      	ldr	r5, [pc, #72]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80051d6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051da:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051dc:	bf02      	ittt	eq
 80051de:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e0:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e4:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e6:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ec:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 80051f0:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	d005      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80051f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051f8:	d002      	beq.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d104      	bne.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005200:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005202:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005206:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005208:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800520a:	2301      	movs	r3, #1
 800520c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	2300      	movs	r3, #0
 8005212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005216:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40014000 	.word	0x40014000

08005224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005224:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d034      	beq.n	8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800522e:	68cb      	ldr	r3, [r1, #12]
 8005230:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005232:	4c1a      	ldr	r4, [pc, #104]	; (800529c <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800523a:	684a      	ldr	r2, [r1, #4]
 800523c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005240:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005242:	680a      	ldr	r2, [r1, #0]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800524a:	690a      	ldr	r2, [r1, #16]
 800524c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005250:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005252:	694a      	ldr	r2, [r1, #20]
 8005254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005258:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800525a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800525c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005260:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005262:	698a      	ldr	r2, [r1, #24]
 8005264:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800526c:	6802      	ldr	r2, [r0, #0]
 800526e:	42a2      	cmp	r2, r4
 8005270:	d10c      	bne.n	800528c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005272:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005274:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005278:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800527c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800527e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005284:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005286:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800528a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800528c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800528e:	2300      	movs	r3, #0
 8005290:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005294:	4618      	mov	r0, r3
}
 8005296:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005298:	2002      	movs	r0, #2
 800529a:	e7fc      	b.n	8005296 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 800529c:	40012c00 	.word	0x40012c00

080052a0 <HAL_TIMEx_CommutCallback>:
 80052a0:	4770      	bx	lr

080052a2 <HAL_TIMEx_BreakCallback>:
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIMEx_Break2Callback>:
 80052a4:	4770      	bx	lr

080052a6 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	e852 3f00 	ldrex	r3, [r2]
 80052ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80052b4:	6802      	ldr	r2, [r0, #0]
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d1f5      	bne.n	80052a6 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	f102 0308 	add.w	r3, r2, #8
 80052be:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	f102 0c08 	add.w	ip, r2, #8
 80052ca:	e84c 3100 	strex	r1, r3, [ip]
 80052ce:	2900      	cmp	r1, #0
 80052d0:	d1f3      	bne.n	80052ba <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	e842 3100 	strex	r1, r3, [r2]
 80052e4:	2900      	cmp	r1, #0
 80052e6:	d1f7      	bne.n	80052d8 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	2320      	movs	r3, #32
 80052ea:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ec:	2300      	movs	r3, #0
 80052ee:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052f0:	6643      	str	r3, [r0, #100]	; 0x64
}
 80052f2:	4770      	bx	lr

080052f4 <HAL_UART_TxCpltCallback>:
 80052f4:	4770      	bx	lr

080052f6 <HAL_UART_ErrorCallback>:
 80052f6:	4770      	bx	lr

080052f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005302:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005306:	f7ff fff6 	bl	80052f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800530a:	bd08      	pop	{r3, pc}

0800530c <HAL_UART_AbortReceiveCpltCallback>:
 800530c:	4770      	bx	lr
	...

08005310 <HAL_UART_AbortReceive_IT>:
{
 8005310:	b510      	push	{r4, lr}
 8005312:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005314:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	e852 3f00 	ldrex	r3, [r2]
 800531a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	2900      	cmp	r1, #0
 8005326:	d1f5      	bne.n	8005314 <HAL_UART_AbortReceive_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	f103 0008 	add.w	r0, r3, #8
 8005338:	e840 2100 	strex	r1, r2, [r0]
 800533c:	2900      	cmp	r1, #0
 800533e:	d1f3      	bne.n	8005328 <HAL_UART_AbortReceive_IT+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005342:	2a01      	cmp	r2, #1
 8005344:	d107      	bne.n	8005356 <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800534a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	e843 2100 	strex	r1, r2, [r3]
 8005352:	2900      	cmp	r1, #0
 8005354:	d1f7      	bne.n	8005346 <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800535c:	d028      	beq.n	80053b0 <HAL_UART_AbortReceive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	f103 0008 	add.w	r0, r3, #8
 800536e:	e840 2100 	strex	r1, r2, [r0]
 8005372:	2900      	cmp	r1, #0
 8005374:	d1f3      	bne.n	800535e <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 8005376:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005378:	b148      	cbz	r0, 800538e <HAL_UART_AbortReceive_IT+0x7e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_UART_AbortReceive_IT+0xb4>)
 800537c:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537e:	f7fe f89d 	bl	80034bc <HAL_DMA_Abort_IT>
 8005382:	b110      	cbz	r0, 800538a <HAL_UART_AbortReceive_IT+0x7a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005384:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005386:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005388:	4798      	blx	r3
}
 800538a:	2000      	movs	r0, #0
 800538c:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800538e:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8005390:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 8005394:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005396:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005398:	8b1a      	ldrh	r2, [r3, #24]
 800539a:	b292      	uxth	r2, r2
 800539c:	f042 0208 	orr.w	r2, r2, #8
 80053a0:	831a      	strh	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 80053a2:	2320      	movs	r3, #32
 80053a4:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	6620      	str	r0, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff ffaf 	bl	800530c <HAL_UART_AbortReceiveCpltCallback>
 80053ae:	e7ec      	b.n	800538a <HAL_UART_AbortReceive_IT+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053b0:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 80053b2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 80053b6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053b8:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 80053ba:	2320      	movs	r3, #32
 80053bc:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	6622      	str	r2, [r4, #96]	; 0x60
 80053c0:	e7f2      	b.n	80053a8 <HAL_UART_AbortReceive_IT+0x98>
 80053c2:	bf00      	nop
 80053c4:	080053c9 	.word	0x080053c9

080053c8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053ca:	6802      	ldr	r2, [r0, #0]
{
 80053cc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80053ce:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053d0:	230f      	movs	r3, #15
  huart->RxXferCount = 0U;
 80053d2:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053d6:	6213      	str	r3, [r2, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053d8:	8b13      	ldrh	r3, [r2, #24]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	8313      	strh	r3, [r2, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	2320      	movs	r3, #32
 80053e4:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80053e8:	f7ff ff90 	bl	800530c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ec:	bd08      	pop	{r3, pc}

080053ee <HAL_UARTEx_RxEventCallback>:
}
 80053ee:	4770      	bx	lr

080053f0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053f0:	6803      	ldr	r3, [r0, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f4:	6819      	ldr	r1, [r3, #0]
{
 80053f6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 80053f8:	f640 060f 	movw	r6, #2063	; 0x80f
 80053fc:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053fe:	689d      	ldr	r5, [r3, #8]
{
 8005400:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005402:	d10b      	bne.n	800541c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005404:	0696      	lsls	r6, r2, #26
 8005406:	f140 8088 	bpl.w	800551a <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800540a:	068e      	lsls	r6, r1, #26
 800540c:	f140 8085 	bpl.w	800551a <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8005410:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005412:	2b00      	cmp	r3, #0
 8005414:	d07b      	beq.n	800550e <HAL_UART_IRQHandler+0x11e>
}
 8005416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800541a:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800541c:	4e95      	ldr	r6, [pc, #596]	; (8005674 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800541e:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005422:	400e      	ands	r6, r1
 8005424:	4306      	orrs	r6, r0
 8005426:	d078      	beq.n	800551a <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005428:	07d5      	lsls	r5, r2, #31
 800542a:	d509      	bpl.n	8005440 <HAL_UART_IRQHandler+0x50>
 800542c:	05ce      	lsls	r6, r1, #23
 800542e:	d507      	bpl.n	8005440 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005430:	2501      	movs	r5, #1
 8005432:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005434:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005438:	f045 0501 	orr.w	r5, r5, #1
 800543c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005440:	0795      	lsls	r5, r2, #30
 8005442:	d508      	bpl.n	8005456 <HAL_UART_IRQHandler+0x66>
 8005444:	b138      	cbz	r0, 8005456 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005446:	2502      	movs	r5, #2
 8005448:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800544a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800544e:	f045 0504 	orr.w	r5, r5, #4
 8005452:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005456:	0756      	lsls	r6, r2, #29
 8005458:	d508      	bpl.n	800546c <HAL_UART_IRQHandler+0x7c>
 800545a:	b138      	cbz	r0, 800546c <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800545c:	2504      	movs	r5, #4
 800545e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005460:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005464:	f045 0502 	orr.w	r5, r5, #2
 8005468:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800546c:	0715      	lsls	r5, r2, #28
 800546e:	d50b      	bpl.n	8005488 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005470:	f001 0520 	and.w	r5, r1, #32
 8005474:	4328      	orrs	r0, r5
 8005476:	d007      	beq.n	8005488 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005478:	2008      	movs	r0, #8
 800547a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800547c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005480:	f040 0008 	orr.w	r0, r0, #8
 8005484:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005488:	0516      	lsls	r6, r2, #20
 800548a:	d50a      	bpl.n	80054a2 <HAL_UART_IRQHandler+0xb2>
 800548c:	014d      	lsls	r5, r1, #5
 800548e:	d508      	bpl.n	80054a2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005494:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005496:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800549a:	f043 0320 	orr.w	r3, r3, #32
 800549e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d031      	beq.n	800550e <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054aa:	0690      	lsls	r0, r2, #26
 80054ac:	d505      	bpl.n	80054ba <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ae:	068a      	lsls	r2, r1, #26
 80054b0:	d503      	bpl.n	80054ba <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 80054b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b4:	b10b      	cbz	r3, 80054ba <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 80054b6:	4620      	mov	r0, r4
 80054b8:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ba:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80054bc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c0:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054c2:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80054cc:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ce:	d01f      	beq.n	8005510 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 80054d0:	f7ff fee9 	bl	80052a6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	6893      	ldr	r3, [r2, #8]
 80054d8:	065b      	lsls	r3, r3, #25
 80054da:	d515      	bpl.n	8005508 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	f102 0308 	add.w	r3, r2, #8
 80054e0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	f102 0008 	add.w	r0, r2, #8
 80054ec:	e840 3100 	strex	r1, r3, [r0]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d1f3      	bne.n	80054dc <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 80054f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80054f6:	b138      	cbz	r0, 8005508 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054f8:	4b5f      	ldr	r3, [pc, #380]	; (8005678 <HAL_UART_IRQHandler+0x288>)
 80054fa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054fc:	f7fd ffde 	bl	80034bc <HAL_DMA_Abort_IT>
 8005500:	b128      	cbz	r0, 800550e <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005502:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005504:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005506:	e786      	b.n	8005416 <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8005508:	4620      	mov	r0, r4
 800550a:	f7ff fef4 	bl	80052f6 <HAL_UART_ErrorCallback>
}
 800550e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005510:	f7ff fef1 	bl	80052f6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8005518:	e7f9      	b.n	800550e <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800551c:	2801      	cmp	r0, #1
 800551e:	d17e      	bne.n	800561e <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005520:	06d6      	lsls	r6, r2, #27
 8005522:	d57c      	bpl.n	800561e <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005524:	06c8      	lsls	r0, r1, #27
 8005526:	d57a      	bpl.n	800561e <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005528:	2210      	movs	r2, #16
 800552a:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	0651      	lsls	r1, r2, #25
 8005530:	d546      	bpl.n	80055c0 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005532:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	684a      	ldr	r2, [r1, #4]
 8005538:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800553a:	2a00      	cmp	r2, #0
 800553c:	d0e7      	beq.n	800550e <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800553e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8005542:	4290      	cmp	r0, r2
 8005544:	d9e3      	bls.n	800550e <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 8005546:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800554a:	680a      	ldr	r2, [r1, #0]
 800554c:	0692      	lsls	r2, r2, #26
 800554e:	d42d      	bmi.n	80055ac <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	e843 2100 	strex	r1, r2, [r3]
 800555c:	2900      	cmp	r1, #0
 800555e:	d1f7      	bne.n	8005550 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	f103 0208 	add.w	r2, r3, #8
 8005564:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	f103 0008 	add.w	r0, r3, #8
 8005570:	e840 2100 	strex	r1, r2, [r0]
 8005574:	2900      	cmp	r1, #0
 8005576:	d1f3      	bne.n	8005560 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f103 0208 	add.w	r2, r3, #8
 800557c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	f103 0008 	add.w	r0, r3, #8
 8005588:	e840 2100 	strex	r1, r2, [r0]
 800558c:	2900      	cmp	r1, #0
 800558e:	d1f3      	bne.n	8005578 <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8005590:	2220      	movs	r2, #32
 8005592:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	e843 2100 	strex	r1, r2, [r3]
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d1f7      	bne.n	8005596 <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80055a8:	f7fd ff65 	bl	8003476 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ac:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80055b0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80055b4:	1ac9      	subs	r1, r1, r3
 80055b6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7ff ff18 	bl	80053ee <HAL_UARTEx_RxEventCallback>
 80055be:	e7a6      	b.n	800550e <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c0:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 80055c4:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80055c6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 80055ca:	b289      	uxth	r1, r1
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d09e      	beq.n	800550e <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055d0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80055d4:	1a89      	subs	r1, r1, r2
 80055d6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80055d8:	2900      	cmp	r1, #0
 80055da:	d098      	beq.n	800550e <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	e843 2000 	strex	r0, r2, [r3]
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d1f7      	bne.n	80055dc <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	f103 0508 	add.w	r5, r3, #8
 80055fc:	e845 2000 	strex	r0, r2, [r5]
 8005600:	2800      	cmp	r0, #0
 8005602:	d1f3      	bne.n	80055ec <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 8005604:	2220      	movs	r2, #32
 8005606:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005608:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	e843 2000 	strex	r0, r2, [r3]
 8005618:	2800      	cmp	r0, #0
 800561a:	d1f7      	bne.n	800560c <HAL_UART_IRQHandler+0x21c>
 800561c:	e7cc      	b.n	80055b8 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800561e:	02d6      	lsls	r6, r2, #11
 8005620:	d509      	bpl.n	8005636 <HAL_UART_IRQHandler+0x246>
 8005622:	0268      	lsls	r0, r5, #9
 8005624:	d507      	bpl.n	8005636 <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800562a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005632:	f000 bbc9 	b.w	8005dc8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005636:	0616      	lsls	r6, r2, #24
 8005638:	d507      	bpl.n	800564a <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800563a:	060d      	lsls	r5, r1, #24
 800563c:	d505      	bpl.n	800564a <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 800563e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005640:	2b00      	cmp	r3, #0
 8005642:	f43f af64 	beq.w	800550e <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 8005646:	4620      	mov	r0, r4
 8005648:	e6e5      	b.n	8005416 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800564a:	0650      	lsls	r0, r2, #25
 800564c:	f57f af5f 	bpl.w	800550e <HAL_UART_IRQHandler+0x11e>
 8005650:	064a      	lsls	r2, r1, #25
 8005652:	f57f af5c 	bpl.w	800550e <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	e843 2100 	strex	r1, r2, [r3]
 8005662:	2900      	cmp	r1, #0
 8005664:	d1f7      	bne.n	8005656 <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005666:	2320      	movs	r3, #32
 8005668:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800566a:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800566c:	4620      	mov	r0, r4
 800566e:	f7ff fe41 	bl	80052f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	e74c      	b.n	800550e <HAL_UART_IRQHandler+0x11e>
 8005674:	04000120 	.word	0x04000120
 8005678:	080052f9 	.word	0x080052f9

0800567c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800567c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800567e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005680:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005682:	2b22      	cmp	r3, #34	; 0x22
 8005684:	d144      	bne.n	8005710 <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005686:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005688:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800568c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800568e:	400b      	ands	r3, r1
 8005690:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005692:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005694:	3301      	adds	r3, #1
 8005696:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005698:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800569c:	3b01      	subs	r3, #1
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056a4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	bb6b      	cbnz	r3, 8005708 <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	e852 3f00 	ldrex	r3, [r2]
 80056b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	2900      	cmp	r1, #0
 80056be:	d1f5      	bne.n	80056ac <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f103 0208 	add.w	r2, r3, #8
 80056c4:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	f103 0c08 	add.w	ip, r3, #8
 80056d0:	e84c 2100 	strex	r1, r2, [ip]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d1f3      	bne.n	80056c0 <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056d8:	2220      	movs	r2, #32
 80056da:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80056de:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	2a01      	cmp	r2, #1
 80056e2:	d112      	bne.n	800570a <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e4:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	e843 2100 	strex	r1, r2, [r3]
 80056f2:	2900      	cmp	r1, #0
 80056f4:	d1f7      	bne.n	80056e6 <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056f6:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056fc:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056fe:	bf44      	itt	mi
 8005700:	2210      	movmi	r2, #16
 8005702:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005704:	f7ff fe73 	bl	80053ee <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005708:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800570a:	f7fc f9cf 	bl	8001aac <HAL_UART_RxCpltCallback>
 800570e:	e7fb      	b.n	8005708 <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005710:	8b13      	ldrh	r3, [r2, #24]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f043 0308 	orr.w	r3, r3, #8
 8005718:	8313      	strh	r3, [r2, #24]
}
 800571a:	e7f5      	b.n	8005708 <UART_RxISR_8BIT+0x8c>

0800571c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800571c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800571e:	2a22      	cmp	r2, #34	; 0x22
{
 8005720:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005722:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005724:	d141      	bne.n	80057aa <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005726:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005728:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800572c:	4011      	ands	r1, r2
 800572e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005730:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8005734:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005736:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800573a:	3a01      	subs	r2, #1
 800573c:	b292      	uxth	r2, r2
 800573e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005742:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8005746:	b292      	uxth	r2, r2
 8005748:	bb5a      	cbnz	r2, 80057a2 <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	e843 2100 	strex	r1, r2, [r3]
 8005756:	2900      	cmp	r1, #0
 8005758:	d1f7      	bne.n	800574a <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	f103 0208 	add.w	r2, r3, #8
 800575e:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	f103 0c08 	add.w	ip, r3, #8
 800576a:	e84c 2100 	strex	r1, r2, [ip]
 800576e:	2900      	cmp	r1, #0
 8005770:	d1f3      	bne.n	800575a <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005772:	2220      	movs	r2, #32
 8005774:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005776:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005778:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800577a:	2a01      	cmp	r2, #1
 800577c:	d112      	bne.n	80057a4 <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005784:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	e843 2100 	strex	r1, r2, [r3]
 800578c:	2900      	cmp	r1, #0
 800578e:	d1f7      	bne.n	8005780 <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005790:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005792:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005796:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005798:	bf44      	itt	mi
 800579a:	2210      	movmi	r2, #16
 800579c:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800579e:	f7ff fe26 	bl	80053ee <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057a2:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80057a4:	f7fc f982 	bl	8001aac <HAL_UART_RxCpltCallback>
 80057a8:	e7fb      	b.n	80057a2 <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057aa:	8b1a      	ldrh	r2, [r3, #24]
 80057ac:	b292      	uxth	r2, r2
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	831a      	strh	r2, [r3, #24]
}
 80057b4:	e7f5      	b.n	80057a2 <UART_RxISR_16BIT+0x86>
	...

080057b8 <UART_SetConfig>:
{
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80057bc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057be:	6921      	ldr	r1, [r4, #16]
 80057c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c4:	69c0      	ldr	r0, [r0, #28]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	6961      	ldr	r1, [r4, #20]
 80057ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	4979      	ldr	r1, [pc, #484]	; (80059b4 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d0:	4029      	ands	r1, r5
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68e1      	ldr	r1, [r4, #12]
 80057da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e2:	4a75      	ldr	r2, [pc, #468]	; (80059b8 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e6:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80057e8:	bf1c      	itt	ne
 80057ea:	6a22      	ldrne	r2, [r4, #32]
 80057ec:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80057f4:	430a      	orrs	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057f8:	4a70      	ldr	r2, [pc, #448]	; (80059bc <UART_SetConfig+0x204>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d117      	bne.n	800582e <UART_SetConfig+0x76>
 80057fe:	4b70      	ldr	r3, [pc, #448]	; (80059c0 <UART_SetConfig+0x208>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	3b01      	subs	r3, #1
 800580a:	2b02      	cmp	r3, #2
 800580c:	f200 80b0 	bhi.w	8005970 <UART_SetConfig+0x1b8>
 8005810:	4a6c      	ldr	r2, [pc, #432]	; (80059c4 <UART_SetConfig+0x20c>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005818:	f040 808b 	bne.w	8005932 <UART_SetConfig+0x17a>
    switch (clocksource)
 800581c:	2b08      	cmp	r3, #8
 800581e:	d822      	bhi.n	8005866 <UART_SetConfig+0xae>
 8005820:	e8df f003 	tbb	[pc, r3]
 8005824:	2185a969 	.word	0x2185a969
 8005828:	21212182 	.word	0x21212182
 800582c:	6d          	.byte	0x6d
 800582d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582e:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <UART_SetConfig+0x210>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d106      	bne.n	8005842 <UART_SetConfig+0x8a>
 8005834:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <UART_SetConfig+0x208>)
 8005836:	4a65      	ldr	r2, [pc, #404]	; (80059cc <UART_SetConfig+0x214>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	e7e7      	b.n	8005812 <UART_SetConfig+0x5a>
 8005842:	4a63      	ldr	r2, [pc, #396]	; (80059d0 <UART_SetConfig+0x218>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d118      	bne.n	800587a <UART_SetConfig+0xc2>
 8005848:	4b5d      	ldr	r3, [pc, #372]	; (80059c0 <UART_SetConfig+0x208>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005852:	2b20      	cmp	r3, #32
 8005854:	f000 8087 	beq.w	8005966 <UART_SetConfig+0x1ae>
 8005858:	d807      	bhi.n	800586a <UART_SetConfig+0xb2>
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8094 	beq.w	8005988 <UART_SetConfig+0x1d0>
 8005860:	2b10      	cmp	r3, #16
 8005862:	f000 808b 	beq.w	800597c <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	2001      	movs	r0, #1
 8005868:	e024      	b.n	80058b4 <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800586a:	2b30      	cmp	r3, #48	; 0x30
 800586c:	d1fb      	bne.n	8005866 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005872:	d044      	beq.n	80058fe <UART_SetConfig+0x146>
 8005874:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005878:	e08d      	b.n	8005996 <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800587a:	4a4f      	ldr	r2, [pc, #316]	; (80059b8 <UART_SetConfig+0x200>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d1f2      	bne.n	8005866 <UART_SetConfig+0xae>
 8005880:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <UART_SetConfig+0x208>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d015      	beq.n	80058bc <UART_SetConfig+0x104>
 8005890:	d806      	bhi.n	80058a0 <UART_SetConfig+0xe8>
 8005892:	b15b      	cbz	r3, 80058ac <UART_SetConfig+0xf4>
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d1e5      	bne.n	8005866 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 800589a:	f7fe f945 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
        break;
 800589e:	e007      	b.n	80058b0 <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a4:	d1df      	bne.n	8005866 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058aa:	e008      	b.n	80058be <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fe fd10 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80058b0:	b928      	cbnz	r0, 80058be <UART_SetConfig+0x106>
 80058b2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80058b4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80058b6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80058bc:	4845      	ldr	r0, [pc, #276]	; (80059d4 <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80058c4:	4283      	cmp	r3, r0
 80058c6:	d8ce      	bhi.n	8005866 <UART_SetConfig+0xae>
 80058c8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80058cc:	d8cb      	bhi.n	8005866 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058ce:	0851      	lsrs	r1, r2, #1
 80058d0:	2500      	movs	r5, #0
 80058d2:	468c      	mov	ip, r1
 80058d4:	f44f 7680 	mov.w	r6, #256	; 0x100
 80058d8:	4629      	mov	r1, r5
 80058da:	fbe0 c106 	umlal	ip, r1, r0, r6
 80058de:	462b      	mov	r3, r5
 80058e0:	4660      	mov	r0, ip
 80058e2:	f7fb f9d1 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <UART_SetConfig+0x220>)
 80058e8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d8ba      	bhi.n	8005866 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	60d8      	str	r0, [r3, #12]
 80058f4:	e7dd      	b.n	80058b2 <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f6:	f7fe fceb 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0d9      	beq.n	80058b2 <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058fe:	6862      	ldr	r2, [r4, #4]
 8005900:	0853      	lsrs	r3, r2, #1
 8005902:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005906:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590e:	f1a0 0210 	sub.w	r2, r0, #16
 8005912:	429a      	cmp	r2, r3
 8005914:	d8a7      	bhi.n	8005866 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005916:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800591a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800591c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800591e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8005922:	4318      	orrs	r0, r3
 8005924:	60d0      	str	r0, [r2, #12]
 8005926:	e7c4      	b.n	80058b2 <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005928:	f7fe f8fe 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
        break;
 800592c:	e7e5      	b.n	80058fa <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 800592e:	4829      	ldr	r0, [pc, #164]	; (80059d4 <UART_SetConfig+0x21c>)
 8005930:	e7e5      	b.n	80058fe <UART_SetConfig+0x146>
    switch (clocksource)
 8005932:	2b08      	cmp	r3, #8
 8005934:	d897      	bhi.n	8005866 <UART_SetConfig+0xae>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x184>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800598f 	.word	0x0800598f
 8005940:	08005961 	.word	0x08005961
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005867 	.word	0x08005867
 800594c:	08005983 	.word	0x08005983
 8005950:	08005867 	.word	0x08005867
 8005954:	08005867 	.word	0x08005867
 8005958:	08005867 	.word	0x08005867
 800595c:	08005875 	.word	0x08005875
        pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fe fcc8 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005964:	e015      	b.n	8005992 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800596a:	d0e0      	beq.n	800592e <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 800596c:	4819      	ldr	r0, [pc, #100]	; (80059d4 <UART_SetConfig+0x21c>)
 800596e:	e012      	b.n	8005996 <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005970:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005974:	d1f4      	bne.n	8005960 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005976:	f7fe fcbd 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
        break;
 800597a:	e7be      	b.n	80058fa <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005980:	d0d2      	beq.n	8005928 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fe f8d1 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
        break;
 8005986:	e004      	b.n	8005992 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005988:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800598c:	d0b3      	beq.n	80058f6 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800598e:	f7fe fc9f 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005992:	2800      	cmp	r0, #0
 8005994:	d08d      	beq.n	80058b2 <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800599c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80059a4:	f1a3 0110 	sub.w	r1, r3, #16
 80059a8:	4291      	cmp	r1, r2
 80059aa:	f63f af5c 	bhi.w	8005866 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	60d3      	str	r3, [r2, #12]
 80059b2:	e77e      	b.n	80058b2 <UART_SetConfig+0xfa>
 80059b4:	efff69f3 	.word	0xefff69f3
 80059b8:	40008000 	.word	0x40008000
 80059bc:	40013800 	.word	0x40013800
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0800b6ac 	.word	0x0800b6ac
 80059c8:	40004400 	.word	0x40004400
 80059cc:	0800b6af 	.word	0x0800b6af
 80059d0:	40004800 	.word	0x40004800
 80059d4:	00f42400 	.word	0x00f42400
 80059d8:	000ffcff 	.word	0x000ffcff

080059dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059de:	07da      	lsls	r2, r3, #31
{
 80059e0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e2:	d506      	bpl.n	80059f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e4:	6801      	ldr	r1, [r0, #0]
 80059e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80059e8:	684a      	ldr	r2, [r1, #4]
 80059ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80059ee:	4322      	orrs	r2, r4
 80059f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f2:	079c      	lsls	r4, r3, #30
 80059f4:	d506      	bpl.n	8005a04 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f6:	6801      	ldr	r1, [r0, #0]
 80059f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80059fa:	684a      	ldr	r2, [r1, #4]
 80059fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a00:	4322      	orrs	r2, r4
 8005a02:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a04:	0759      	lsls	r1, r3, #29
 8005a06:	d506      	bpl.n	8005a16 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a08:	6801      	ldr	r1, [r0, #0]
 8005a0a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a0c:	684a      	ldr	r2, [r1, #4]
 8005a0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a12:	4322      	orrs	r2, r4
 8005a14:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a16:	071a      	lsls	r2, r3, #28
 8005a18:	d506      	bpl.n	8005a28 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a1a:	6801      	ldr	r1, [r0, #0]
 8005a1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a1e:	684a      	ldr	r2, [r1, #4]
 8005a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a24:	4322      	orrs	r2, r4
 8005a26:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	06dc      	lsls	r4, r3, #27
 8005a2a:	d506      	bpl.n	8005a3a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a2c:	6801      	ldr	r1, [r0, #0]
 8005a2e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a30:	688a      	ldr	r2, [r1, #8]
 8005a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a36:	4322      	orrs	r2, r4
 8005a38:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a3a:	0699      	lsls	r1, r3, #26
 8005a3c:	d506      	bpl.n	8005a4c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3e:	6801      	ldr	r1, [r0, #0]
 8005a40:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a42:	688a      	ldr	r2, [r1, #8]
 8005a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a48:	4322      	orrs	r2, r4
 8005a4a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a4c:	065a      	lsls	r2, r3, #25
 8005a4e:	d50f      	bpl.n	8005a70 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a50:	6801      	ldr	r1, [r0, #0]
 8005a52:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a54:	684a      	ldr	r2, [r1, #4]
 8005a56:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005a5a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a60:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	d105      	bne.n	8005a70 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a64:	684a      	ldr	r2, [r1, #4]
 8005a66:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a68:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005a6c:	4322      	orrs	r2, r4
 8005a6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	d506      	bpl.n	8005a82 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a74:	6802      	ldr	r2, [r0, #0]
 8005a76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a78:	6853      	ldr	r3, [r2, #4]
 8005a7a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	6053      	str	r3, [r2, #4]
}
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <UART_WaitOnFlagUntilTimeout>:
{
 8005a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	460e      	mov	r6, r1
 8005a90:	4615      	mov	r5, r2
 8005a92:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	69d3      	ldr	r3, [r2, #28]
 8005a98:	ea36 0303 	bics.w	r3, r6, r3
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	d001      	beq.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e025      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005aae:	d0f2      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fc fd1c 	bl	80024ec <HAL_GetTick>
 8005ab4:	1bc0      	subs	r0, r0, r7
 8005ab6:	4540      	cmp	r0, r8
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	d802      	bhi.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x3e>
 8005abc:	f1b8 0f00 	cmp.w	r8, #0
 8005ac0:	d11b      	bne.n	8005afa <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	e840 3200 	strex	r2, r3, [r0]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	d1f7      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	f100 0308 	add.w	r3, r0, #8
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	f100 0108 	add.w	r1, r0, #8
 8005ae2:	e841 3200 	strex	r2, r3, [r1]
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1f3      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005aea:	2320      	movs	r3, #32
 8005aec:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005aee:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005af0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005af4:	2003      	movs	r0, #3
}
 8005af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005afa:	6803      	ldr	r3, [r0, #0]
 8005afc:	075a      	lsls	r2, r3, #29
 8005afe:	d5c9      	bpl.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b00:	69c3      	ldr	r3, [r0, #28]
 8005b02:	051b      	lsls	r3, r3, #20
 8005b04:	d5c6      	bpl.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b0a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	e840 3200 	strex	r2, r3, [r0]
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	d1f7      	bne.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f100 0308 	add.w	r3, r0, #8
 8005b20:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	f100 0108 	add.w	r1, r0, #8
 8005b2c:	e841 3200 	strex	r2, r3, [r1]
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d1f3      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8005b34:	2320      	movs	r3, #32
 8005b36:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b38:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b3a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005b3e:	e7d7      	b.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x6c>

08005b40 <HAL_UART_Transmit>:
{
 8005b40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b44:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005b46:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b48:	2b20      	cmp	r3, #32
{
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	460e      	mov	r6, r1
 8005b4e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005b50:	d14e      	bne.n	8005bf0 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8005b52:	2900      	cmp	r1, #0
 8005b54:	d04a      	beq.n	8005bec <HAL_UART_Transmit+0xac>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d048      	beq.n	8005bec <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8005b5a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d046      	beq.n	8005bf0 <HAL_UART_Transmit+0xb0>
 8005b62:	2301      	movs	r3, #1
 8005b64:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b70:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005b72:	f7fc fcbb 	bl	80024ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8005b78:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005b80:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8005b82:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b86:	d103      	bne.n	8005b90 <HAL_UART_Transmit+0x50>
 8005b88:	6922      	ldr	r2, [r4, #16]
 8005b8a:	b90a      	cbnz	r2, 8005b90 <HAL_UART_Transmit+0x50>
 8005b8c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005b8e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8005b90:	2200      	movs	r2, #0
 8005b92:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005b96:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b9a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	b93a      	cbnz	r2, 8005bb2 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7ff ff6d 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005baa:	b950      	cbnz	r0, 8005bc2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005bac:	2320      	movs	r3, #32
 8005bae:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005bb0:	e008      	b.n	8005bc4 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	f7ff ff63 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	b118      	cbz	r0, 8005bca <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8005bc2:	2003      	movs	r0, #3
}
 8005bc4:	b004      	add	sp, #16
 8005bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bca:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005bcc:	b95e      	cbnz	r6, 8005be6 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bce:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bd6:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005bd8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005bdc:	3a01      	subs	r2, #1
 8005bde:	b292      	uxth	r2, r2
 8005be0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005be4:	e7d7      	b.n	8005b96 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be6:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005bea:	e7f4      	b.n	8005bd6 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
 8005bee:	e7e9      	b.n	8005bc4 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005bf0:	2002      	movs	r0, #2
 8005bf2:	e7e7      	b.n	8005bc4 <HAL_UART_Transmit+0x84>

08005bf4 <UART_CheckIdleState>:
{
 8005bf4:	b530      	push	{r4, r5, lr}
 8005bf6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	2500      	movs	r5, #0
{
 8005bfa:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005c00:	f7fc fc74 	bl	80024ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005c0a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0c:	d415      	bmi.n	8005c3a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	0752      	lsls	r2, r2, #29
 8005c14:	d509      	bpl.n	8005c2a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c16:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005c1a:	9200      	str	r2, [sp, #0]
 8005c1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c20:	2200      	movs	r2, #0
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff ff2e 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005c28:	b9a0      	cbnz	r0, 8005c54 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005c2a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005c30:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c34:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8005c38:	e00d      	b.n	8005c56 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005c3e:	9200      	str	r2, [sp, #0]
 8005c40:	9003      	str	r0, [sp, #12]
 8005c42:	462a      	mov	r2, r5
 8005c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7ff ff1b 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0dc      	beq.n	8005c0e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005c54:	2003      	movs	r0, #3
}
 8005c56:	b005      	add	sp, #20
 8005c58:	bd30      	pop	{r4, r5, pc}

08005c5a <HAL_UART_Init>:
{
 8005c5a:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	b340      	cbz	r0, 8005cb2 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c60:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c62:	b91b      	cbnz	r3, 8005c6c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005c64:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005c68:	f7fc fa9e 	bl	80021a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005c6c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c6e:	2324      	movs	r3, #36	; 0x24
 8005c70:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff fd9c 	bl	80057b8 <UART_SetConfig>
 8005c80:	2801      	cmp	r0, #1
 8005c82:	d016      	beq.n	8005cb2 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c86:	b113      	cbz	r3, 8005c8e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff fea7 	bl	80059dc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005ca6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005ca8:	601a      	str	r2, [r3, #0]
}
 8005caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005cae:	f7ff bfa1 	b.w	8005bf4 <UART_CheckIdleState>
}
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	bd10      	pop	{r4, pc}
	...

08005cb8 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8005cb8:	6883      	ldr	r3, [r0, #8]
{
 8005cba:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8005cc0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8005cc4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005cc8:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 8005ccc:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8005cce:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005cd0:	d132      	bne.n	8005d38 <UART_Start_Receive_IT+0x80>
 8005cd2:	6903      	ldr	r3, [r0, #16]
 8005cd4:	bb73      	cbnz	r3, 8005d34 <UART_Start_Receive_IT+0x7c>
 8005cd6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005cda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce4:	2322      	movs	r3, #34	; 0x22
 8005ce6:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	f102 0308 	add.w	r3, r2, #8
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	3208      	adds	r2, #8
 8005cf8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005cfc:	6802      	ldr	r2, [r0, #0]
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d1f2      	bne.n	8005ce8 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d02:	6883      	ldr	r3, [r0, #8]
 8005d04:	6901      	ldr	r1, [r0, #16]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d126      	bne.n	8005d5a <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <UART_Start_Receive_IT+0xb8>)
 8005d0e:	4c19      	ldr	r4, [pc, #100]	; (8005d74 <UART_Start_Receive_IT+0xbc>)
 8005d10:	2900      	cmp	r1, #0
 8005d12:	bf18      	it	ne
 8005d14:	4623      	movne	r3, r4
 8005d16:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d1e:	b1f1      	cbz	r1, 8005d5e <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d24:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	e842 3100 	strex	r1, r3, [r2]
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d1f7      	bne.n	8005d20 <UART_Start_Receive_IT+0x68>
}
 8005d30:	2000      	movs	r0, #0
 8005d32:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005d34:	23ff      	movs	r3, #255	; 0xff
 8005d36:	e7d0      	b.n	8005cda <UART_Start_Receive_IT+0x22>
 8005d38:	b923      	cbnz	r3, 8005d44 <UART_Start_Receive_IT+0x8c>
 8005d3a:	6903      	ldr	r3, [r0, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f9      	beq.n	8005d34 <UART_Start_Receive_IT+0x7c>
 8005d40:	237f      	movs	r3, #127	; 0x7f
 8005d42:	e7ca      	b.n	8005cda <UART_Start_Receive_IT+0x22>
 8005d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d48:	d104      	bne.n	8005d54 <UART_Start_Receive_IT+0x9c>
 8005d4a:	6903      	ldr	r3, [r0, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f7      	beq.n	8005d40 <UART_Start_Receive_IT+0x88>
 8005d50:	233f      	movs	r3, #63	; 0x3f
 8005d52:	e7c2      	b.n	8005cda <UART_Start_Receive_IT+0x22>
 8005d54:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8005d58:	e7c1      	b.n	8005cde <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <UART_Start_Receive_IT+0xbc>)
 8005d5c:	e7db      	b.n	8005d16 <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d62:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	e842 3100 	strex	r1, r3, [r2]
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	d1f7      	bne.n	8005d5e <UART_Start_Receive_IT+0xa6>
 8005d6e:	e7df      	b.n	8005d30 <UART_Start_Receive_IT+0x78>
 8005d70:	0800571d 	.word	0x0800571d
 8005d74:	0800567d 	.word	0x0800567d

08005d78 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d78:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005d7a:	2b20      	cmp	r3, #32
{
 8005d7c:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7e:	d11f      	bne.n	8005dc0 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005d80:	b1d9      	cbz	r1, 8005dba <HAL_UART_Receive_IT+0x42>
 8005d82:	b1d2      	cbz	r2, 8005dba <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8005d84:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d019      	beq.n	8005dc0 <HAL_UART_Receive_IT+0x48>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d94:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <HAL_UART_Receive_IT+0x4c>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d00a      	beq.n	8005db4 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	d507      	bpl.n	8005db4 <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	e844 3500 	strex	r5, r3, [r4]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	d1f7      	bne.n	8005da4 <HAL_UART_Receive_IT+0x2c>
}
 8005db4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005db6:	f7ff bf7f 	b.w	8005cb8 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8005dba:	2001      	movs	r0, #1
}
 8005dbc:	bc30      	pop	{r4, r5}
 8005dbe:	4770      	bx	lr
    return HAL_BUSY;
 8005dc0:	2002      	movs	r0, #2
 8005dc2:	e7fb      	b.n	8005dbc <HAL_UART_Receive_IT+0x44>
 8005dc4:	40008000 	.word	0x40008000

08005dc8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dc8:	4770      	bx	lr
	...

08005dcc <__errno>:
 8005dcc:	4b01      	ldr	r3, [pc, #4]	; (8005dd4 <__errno+0x8>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000003c 	.word	0x2000003c

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4d0d      	ldr	r5, [pc, #52]	; (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	; (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2600      	movs	r6, #0
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4d0b      	ldr	r5, [pc, #44]	; (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	; (8005e1c <__libc_init_array+0x44>)
 8005dec:	f005 f9be 	bl	800b16c <_init>
 8005df0:	1b64      	subs	r4, r4, r5
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2600      	movs	r6, #0
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	0800bb84 	.word	0x0800bb84
 8005e14:	0800bb84 	.word	0x0800bb84
 8005e18:	0800bb84 	.word	0x0800bb84
 8005e1c:	0800bb88 	.word	0x0800bb88

08005e20 <memset>:
 8005e20:	4402      	add	r2, r0
 8005e22:	4603      	mov	r3, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d100      	bne.n	8005e2a <memset+0xa>
 8005e28:	4770      	bx	lr
 8005e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2e:	e7f9      	b.n	8005e24 <memset+0x4>

08005e30 <__cvt>:
 8005e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	ec55 4b10 	vmov	r4, r5, d0
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	462b      	mov	r3, r5
 8005e40:	bfbb      	ittet	lt
 8005e42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e46:	461d      	movlt	r5, r3
 8005e48:	2300      	movge	r3, #0
 8005e4a:	232d      	movlt	r3, #45	; 0x2d
 8005e4c:	700b      	strb	r3, [r1, #0]
 8005e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e54:	4691      	mov	r9, r2
 8005e56:	f023 0820 	bic.w	r8, r3, #32
 8005e5a:	bfbc      	itt	lt
 8005e5c:	4622      	movlt	r2, r4
 8005e5e:	4614      	movlt	r4, r2
 8005e60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e64:	d005      	beq.n	8005e72 <__cvt+0x42>
 8005e66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e6a:	d100      	bne.n	8005e6e <__cvt+0x3e>
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	2102      	movs	r1, #2
 8005e70:	e000      	b.n	8005e74 <__cvt+0x44>
 8005e72:	2103      	movs	r1, #3
 8005e74:	ab03      	add	r3, sp, #12
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	ab02      	add	r3, sp, #8
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	ec45 4b10 	vmov	d0, r4, r5
 8005e80:	4653      	mov	r3, sl
 8005e82:	4632      	mov	r2, r6
 8005e84:	f001 ffc4 	bl	8007e10 <_dtoa_r>
 8005e88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	d102      	bne.n	8005e96 <__cvt+0x66>
 8005e90:	f019 0f01 	tst.w	r9, #1
 8005e94:	d022      	beq.n	8005edc <__cvt+0xac>
 8005e96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e9a:	eb07 0906 	add.w	r9, r7, r6
 8005e9e:	d110      	bne.n	8005ec2 <__cvt+0x92>
 8005ea0:	783b      	ldrb	r3, [r7, #0]
 8005ea2:	2b30      	cmp	r3, #48	; 0x30
 8005ea4:	d10a      	bne.n	8005ebc <__cvt+0x8c>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7fa fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eb2:	b918      	cbnz	r0, 8005ebc <__cvt+0x8c>
 8005eb4:	f1c6 0601 	rsb	r6, r6, #1
 8005eb8:	f8ca 6000 	str.w	r6, [sl]
 8005ebc:	f8da 3000 	ldr.w	r3, [sl]
 8005ec0:	4499      	add	r9, r3
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ece:	b108      	cbz	r0, 8005ed4 <__cvt+0xa4>
 8005ed0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ed4:	2230      	movs	r2, #48	; 0x30
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	454b      	cmp	r3, r9
 8005eda:	d307      	bcc.n	8005eec <__cvt+0xbc>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ee0:	1bdb      	subs	r3, r3, r7
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	b004      	add	sp, #16
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	9103      	str	r1, [sp, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e7f0      	b.n	8005ed6 <__cvt+0xa6>

08005ef4 <__exponent>:
 8005ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	bfb8      	it	lt
 8005efc:	4249      	neglt	r1, r1
 8005efe:	f803 2b02 	strb.w	r2, [r3], #2
 8005f02:	bfb4      	ite	lt
 8005f04:	222d      	movlt	r2, #45	; 0x2d
 8005f06:	222b      	movge	r2, #43	; 0x2b
 8005f08:	2909      	cmp	r1, #9
 8005f0a:	7042      	strb	r2, [r0, #1]
 8005f0c:	dd2a      	ble.n	8005f64 <__exponent+0x70>
 8005f0e:	f10d 0407 	add.w	r4, sp, #7
 8005f12:	46a4      	mov	ip, r4
 8005f14:	270a      	movs	r7, #10
 8005f16:	46a6      	mov	lr, r4
 8005f18:	460a      	mov	r2, r1
 8005f1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f1e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f22:	3530      	adds	r5, #48	; 0x30
 8005f24:	2a63      	cmp	r2, #99	; 0x63
 8005f26:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	dcf1      	bgt.n	8005f16 <__exponent+0x22>
 8005f32:	3130      	adds	r1, #48	; 0x30
 8005f34:	f1ae 0502 	sub.w	r5, lr, #2
 8005f38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f3c:	1c44      	adds	r4, r0, #1
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4561      	cmp	r1, ip
 8005f42:	d30a      	bcc.n	8005f5a <__exponent+0x66>
 8005f44:	f10d 0209 	add.w	r2, sp, #9
 8005f48:	eba2 020e 	sub.w	r2, r2, lr
 8005f4c:	4565      	cmp	r5, ip
 8005f4e:	bf88      	it	hi
 8005f50:	2200      	movhi	r2, #0
 8005f52:	4413      	add	r3, r2
 8005f54:	1a18      	subs	r0, r3, r0
 8005f56:	b003      	add	sp, #12
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f62:	e7ed      	b.n	8005f40 <__exponent+0x4c>
 8005f64:	2330      	movs	r3, #48	; 0x30
 8005f66:	3130      	adds	r1, #48	; 0x30
 8005f68:	7083      	strb	r3, [r0, #2]
 8005f6a:	70c1      	strb	r1, [r0, #3]
 8005f6c:	1d03      	adds	r3, r0, #4
 8005f6e:	e7f1      	b.n	8005f54 <__exponent+0x60>

08005f70 <_printf_float>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b02 	vpush	{d8}
 8005f78:	b08d      	sub	sp, #52	; 0x34
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f80:	4616      	mov	r6, r2
 8005f82:	461f      	mov	r7, r3
 8005f84:	4605      	mov	r5, r0
 8005f86:	f003 fa57 	bl	8009438 <_localeconv_r>
 8005f8a:	f8d0 a000 	ldr.w	sl, [r0]
 8005f8e:	4650      	mov	r0, sl
 8005f90:	f7fa f91e 	bl	80001d0 <strlen>
 8005f94:	2300      	movs	r3, #0
 8005f96:	930a      	str	r3, [sp, #40]	; 0x28
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fa4:	3307      	adds	r3, #7
 8005fa6:	f023 0307 	bic.w	r3, r3, #7
 8005faa:	f103 0208 	add.w	r2, r3, #8
 8005fae:	f8c8 2000 	str.w	r2, [r8]
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fc2:	9307      	str	r3, [sp, #28]
 8005fc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fc8:	ee08 0a10 	vmov	s16, r0
 8005fcc:	4b9f      	ldr	r3, [pc, #636]	; (800624c <_printf_float+0x2dc>)
 8005fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd6:	f7fa fda9 	bl	8000b2c <__aeabi_dcmpun>
 8005fda:	bb88      	cbnz	r0, 8006040 <_printf_float+0xd0>
 8005fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe0:	4b9a      	ldr	r3, [pc, #616]	; (800624c <_printf_float+0x2dc>)
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	f7fa fd83 	bl	8000af0 <__aeabi_dcmple>
 8005fea:	bb48      	cbnz	r0, 8006040 <_printf_float+0xd0>
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fd72 	bl	8000adc <__aeabi_dcmplt>
 8005ff8:	b110      	cbz	r0, 8006000 <_printf_float+0x90>
 8005ffa:	232d      	movs	r3, #45	; 0x2d
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006000:	4b93      	ldr	r3, [pc, #588]	; (8006250 <_printf_float+0x2e0>)
 8006002:	4894      	ldr	r0, [pc, #592]	; (8006254 <_printf_float+0x2e4>)
 8006004:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006008:	bf94      	ite	ls
 800600a:	4698      	movls	r8, r3
 800600c:	4680      	movhi	r8, r0
 800600e:	2303      	movs	r3, #3
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	f023 0204 	bic.w	r2, r3, #4
 8006018:	6022      	str	r2, [r4, #0]
 800601a:	f04f 0900 	mov.w	r9, #0
 800601e:	9700      	str	r7, [sp, #0]
 8006020:	4633      	mov	r3, r6
 8006022:	aa0b      	add	r2, sp, #44	; 0x2c
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f000 f9d8 	bl	80063dc <_printf_common>
 800602c:	3001      	adds	r0, #1
 800602e:	f040 8090 	bne.w	8006152 <_printf_float+0x1e2>
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	b00d      	add	sp, #52	; 0x34
 8006038:	ecbd 8b02 	vpop	{d8}
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa fd70 	bl	8000b2c <__aeabi_dcmpun>
 800604c:	b140      	cbz	r0, 8006060 <_printf_float+0xf0>
 800604e:	464b      	mov	r3, r9
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfbc      	itt	lt
 8006054:	232d      	movlt	r3, #45	; 0x2d
 8006056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800605a:	487f      	ldr	r0, [pc, #508]	; (8006258 <_printf_float+0x2e8>)
 800605c:	4b7f      	ldr	r3, [pc, #508]	; (800625c <_printf_float+0x2ec>)
 800605e:	e7d1      	b.n	8006004 <_printf_float+0x94>
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006066:	9206      	str	r2, [sp, #24]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	d13f      	bne.n	80060ec <_printf_float+0x17c>
 800606c:	2306      	movs	r3, #6
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	6861      	ldr	r1, [r4, #4]
 8006074:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006078:	2300      	movs	r3, #0
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	ab0a      	add	r3, sp, #40	; 0x28
 800607e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006082:	ab09      	add	r3, sp, #36	; 0x24
 8006084:	ec49 8b10 	vmov	d0, r8, r9
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff fecd 	bl	8005e30 <__cvt>
 8006096:	9b06      	ldr	r3, [sp, #24]
 8006098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800609a:	2b47      	cmp	r3, #71	; 0x47
 800609c:	4680      	mov	r8, r0
 800609e:	d108      	bne.n	80060b2 <_printf_float+0x142>
 80060a0:	1cc8      	adds	r0, r1, #3
 80060a2:	db02      	blt.n	80060aa <_printf_float+0x13a>
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	4299      	cmp	r1, r3
 80060a8:	dd41      	ble.n	800612e <_printf_float+0x1be>
 80060aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80060ae:	fa5f fb8b 	uxtb.w	fp, fp
 80060b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060b6:	d820      	bhi.n	80060fa <_printf_float+0x18a>
 80060b8:	3901      	subs	r1, #1
 80060ba:	465a      	mov	r2, fp
 80060bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060c0:	9109      	str	r1, [sp, #36]	; 0x24
 80060c2:	f7ff ff17 	bl	8005ef4 <__exponent>
 80060c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c8:	1813      	adds	r3, r2, r0
 80060ca:	2a01      	cmp	r2, #1
 80060cc:	4681      	mov	r9, r0
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	dc02      	bgt.n	80060d8 <_printf_float+0x168>
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	07d2      	lsls	r2, r2, #31
 80060d6:	d501      	bpl.n	80060dc <_printf_float+0x16c>
 80060d8:	3301      	adds	r3, #1
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d09c      	beq.n	800601e <_printf_float+0xae>
 80060e4:	232d      	movs	r3, #45	; 0x2d
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ea:	e798      	b.n	800601e <_printf_float+0xae>
 80060ec:	9a06      	ldr	r2, [sp, #24]
 80060ee:	2a47      	cmp	r2, #71	; 0x47
 80060f0:	d1be      	bne.n	8006070 <_printf_float+0x100>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1bc      	bne.n	8006070 <_printf_float+0x100>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7b9      	b.n	800606e <_printf_float+0xfe>
 80060fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060fe:	d118      	bne.n	8006132 <_printf_float+0x1c2>
 8006100:	2900      	cmp	r1, #0
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	dd0b      	ble.n	800611e <_printf_float+0x1ae>
 8006106:	6121      	str	r1, [r4, #16]
 8006108:	b913      	cbnz	r3, 8006110 <_printf_float+0x1a0>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	07d0      	lsls	r0, r2, #31
 800610e:	d502      	bpl.n	8006116 <_printf_float+0x1a6>
 8006110:	3301      	adds	r3, #1
 8006112:	440b      	add	r3, r1
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	65a1      	str	r1, [r4, #88]	; 0x58
 8006118:	f04f 0900 	mov.w	r9, #0
 800611c:	e7de      	b.n	80060dc <_printf_float+0x16c>
 800611e:	b913      	cbnz	r3, 8006126 <_printf_float+0x1b6>
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	07d2      	lsls	r2, r2, #31
 8006124:	d501      	bpl.n	800612a <_printf_float+0x1ba>
 8006126:	3302      	adds	r3, #2
 8006128:	e7f4      	b.n	8006114 <_printf_float+0x1a4>
 800612a:	2301      	movs	r3, #1
 800612c:	e7f2      	b.n	8006114 <_printf_float+0x1a4>
 800612e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006134:	4299      	cmp	r1, r3
 8006136:	db05      	blt.n	8006144 <_printf_float+0x1d4>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	6121      	str	r1, [r4, #16]
 800613c:	07d8      	lsls	r0, r3, #31
 800613e:	d5ea      	bpl.n	8006116 <_printf_float+0x1a6>
 8006140:	1c4b      	adds	r3, r1, #1
 8006142:	e7e7      	b.n	8006114 <_printf_float+0x1a4>
 8006144:	2900      	cmp	r1, #0
 8006146:	bfd4      	ite	le
 8006148:	f1c1 0202 	rsble	r2, r1, #2
 800614c:	2201      	movgt	r2, #1
 800614e:	4413      	add	r3, r2
 8006150:	e7e0      	b.n	8006114 <_printf_float+0x1a4>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	055a      	lsls	r2, r3, #21
 8006156:	d407      	bmi.n	8006168 <_printf_float+0x1f8>
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	4642      	mov	r2, r8
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	d12c      	bne.n	80061c0 <_printf_float+0x250>
 8006166:	e764      	b.n	8006032 <_printf_float+0xc2>
 8006168:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800616c:	f240 80e0 	bls.w	8006330 <_printf_float+0x3c0>
 8006170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	f7fa fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800617c:	2800      	cmp	r0, #0
 800617e:	d034      	beq.n	80061ea <_printf_float+0x27a>
 8006180:	4a37      	ldr	r2, [pc, #220]	; (8006260 <_printf_float+0x2f0>)
 8006182:	2301      	movs	r3, #1
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af51 	beq.w	8006032 <_printf_float+0xc2>
 8006190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006194:	429a      	cmp	r2, r3
 8006196:	db02      	blt.n	800619e <_printf_float+0x22e>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07d8      	lsls	r0, r3, #31
 800619c:	d510      	bpl.n	80061c0 <_printf_float+0x250>
 800619e:	ee18 3a10 	vmov	r3, s16
 80061a2:	4652      	mov	r2, sl
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f af41 	beq.w	8006032 <_printf_float+0xc2>
 80061b0:	f04f 0800 	mov.w	r8, #0
 80061b4:	f104 091a 	add.w	r9, r4, #26
 80061b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ba:	3b01      	subs	r3, #1
 80061bc:	4543      	cmp	r3, r8
 80061be:	dc09      	bgt.n	80061d4 <_printf_float+0x264>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	079b      	lsls	r3, r3, #30
 80061c4:	f100 8105 	bmi.w	80063d2 <_printf_float+0x462>
 80061c8:	68e0      	ldr	r0, [r4, #12]
 80061ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061cc:	4298      	cmp	r0, r3
 80061ce:	bfb8      	it	lt
 80061d0:	4618      	movlt	r0, r3
 80061d2:	e730      	b.n	8006036 <_printf_float+0xc6>
 80061d4:	2301      	movs	r3, #1
 80061d6:	464a      	mov	r2, r9
 80061d8:	4631      	mov	r1, r6
 80061da:	4628      	mov	r0, r5
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	f43f af27 	beq.w	8006032 <_printf_float+0xc2>
 80061e4:	f108 0801 	add.w	r8, r8, #1
 80061e8:	e7e6      	b.n	80061b8 <_printf_float+0x248>
 80061ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	dc39      	bgt.n	8006264 <_printf_float+0x2f4>
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <_printf_float+0x2f0>)
 80061f2:	2301      	movs	r3, #1
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f af19 	beq.w	8006032 <_printf_float+0xc2>
 8006200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006204:	4313      	orrs	r3, r2
 8006206:	d102      	bne.n	800620e <_printf_float+0x29e>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	07d9      	lsls	r1, r3, #31
 800620c:	d5d8      	bpl.n	80061c0 <_printf_float+0x250>
 800620e:	ee18 3a10 	vmov	r3, s16
 8006212:	4652      	mov	r2, sl
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	f43f af09 	beq.w	8006032 <_printf_float+0xc2>
 8006220:	f04f 0900 	mov.w	r9, #0
 8006224:	f104 0a1a 	add.w	sl, r4, #26
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	425b      	negs	r3, r3
 800622c:	454b      	cmp	r3, r9
 800622e:	dc01      	bgt.n	8006234 <_printf_float+0x2c4>
 8006230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006232:	e792      	b.n	800615a <_printf_float+0x1ea>
 8006234:	2301      	movs	r3, #1
 8006236:	4652      	mov	r2, sl
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	f43f aef7 	beq.w	8006032 <_printf_float+0xc2>
 8006244:	f109 0901 	add.w	r9, r9, #1
 8006248:	e7ee      	b.n	8006228 <_printf_float+0x2b8>
 800624a:	bf00      	nop
 800624c:	7fefffff 	.word	0x7fefffff
 8006250:	0800b6c0 	.word	0x0800b6c0
 8006254:	0800b6c4 	.word	0x0800b6c4
 8006258:	0800b6cc 	.word	0x0800b6cc
 800625c:	0800b6c8 	.word	0x0800b6c8
 8006260:	0800bb29 	.word	0x0800bb29
 8006264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006268:	429a      	cmp	r2, r3
 800626a:	bfa8      	it	ge
 800626c:	461a      	movge	r2, r3
 800626e:	2a00      	cmp	r2, #0
 8006270:	4691      	mov	r9, r2
 8006272:	dc37      	bgt.n	80062e4 <_printf_float+0x374>
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800627c:	f104 021a 	add.w	r2, r4, #26
 8006280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006282:	9305      	str	r3, [sp, #20]
 8006284:	eba3 0309 	sub.w	r3, r3, r9
 8006288:	455b      	cmp	r3, fp
 800628a:	dc33      	bgt.n	80062f4 <_printf_float+0x384>
 800628c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006290:	429a      	cmp	r2, r3
 8006292:	db3b      	blt.n	800630c <_printf_float+0x39c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	07da      	lsls	r2, r3, #31
 8006298:	d438      	bmi.n	800630c <_printf_float+0x39c>
 800629a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629c:	9a05      	ldr	r2, [sp, #20]
 800629e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062a0:	1a9a      	subs	r2, r3, r2
 80062a2:	eba3 0901 	sub.w	r9, r3, r1
 80062a6:	4591      	cmp	r9, r2
 80062a8:	bfa8      	it	ge
 80062aa:	4691      	movge	r9, r2
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	dc35      	bgt.n	800631e <_printf_float+0x3ae>
 80062b2:	f04f 0800 	mov.w	r8, #0
 80062b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ba:	f104 0a1a 	add.w	sl, r4, #26
 80062be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	eba3 0309 	sub.w	r3, r3, r9
 80062c8:	4543      	cmp	r3, r8
 80062ca:	f77f af79 	ble.w	80061c0 <_printf_float+0x250>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4652      	mov	r2, sl
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f aeaa 	beq.w	8006032 <_printf_float+0xc2>
 80062de:	f108 0801 	add.w	r8, r8, #1
 80062e2:	e7ec      	b.n	80062be <_printf_float+0x34e>
 80062e4:	4613      	mov	r3, r2
 80062e6:	4631      	mov	r1, r6
 80062e8:	4642      	mov	r2, r8
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	d1c0      	bne.n	8006274 <_printf_float+0x304>
 80062f2:	e69e      	b.n	8006032 <_printf_float+0xc2>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	9205      	str	r2, [sp, #20]
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f ae97 	beq.w	8006032 <_printf_float+0xc2>
 8006304:	9a05      	ldr	r2, [sp, #20]
 8006306:	f10b 0b01 	add.w	fp, fp, #1
 800630a:	e7b9      	b.n	8006280 <_printf_float+0x310>
 800630c:	ee18 3a10 	vmov	r3, s16
 8006310:	4652      	mov	r2, sl
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d1be      	bne.n	800629a <_printf_float+0x32a>
 800631c:	e689      	b.n	8006032 <_printf_float+0xc2>
 800631e:	9a05      	ldr	r2, [sp, #20]
 8006320:	464b      	mov	r3, r9
 8006322:	4442      	add	r2, r8
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	d1c1      	bne.n	80062b2 <_printf_float+0x342>
 800632e:	e680      	b.n	8006032 <_printf_float+0xc2>
 8006330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006332:	2a01      	cmp	r2, #1
 8006334:	dc01      	bgt.n	800633a <_printf_float+0x3ca>
 8006336:	07db      	lsls	r3, r3, #31
 8006338:	d538      	bpl.n	80063ac <_printf_float+0x43c>
 800633a:	2301      	movs	r3, #1
 800633c:	4642      	mov	r2, r8
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f ae74 	beq.w	8006032 <_printf_float+0xc2>
 800634a:	ee18 3a10 	vmov	r3, s16
 800634e:	4652      	mov	r2, sl
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f ae6b 	beq.w	8006032 <_printf_float+0xc2>
 800635c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006360:	2200      	movs	r2, #0
 8006362:	2300      	movs	r3, #0
 8006364:	f7fa fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006368:	b9d8      	cbnz	r0, 80063a2 <_printf_float+0x432>
 800636a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636c:	f108 0201 	add.w	r2, r8, #1
 8006370:	3b01      	subs	r3, #1
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	d10e      	bne.n	800639a <_printf_float+0x42a>
 800637c:	e659      	b.n	8006032 <_printf_float+0xc2>
 800637e:	2301      	movs	r3, #1
 8006380:	4652      	mov	r2, sl
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f ae52 	beq.w	8006032 <_printf_float+0xc2>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	4543      	cmp	r3, r8
 8006398:	dcf1      	bgt.n	800637e <_printf_float+0x40e>
 800639a:	464b      	mov	r3, r9
 800639c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063a0:	e6dc      	b.n	800615c <_printf_float+0x1ec>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	f104 0a1a 	add.w	sl, r4, #26
 80063aa:	e7f2      	b.n	8006392 <_printf_float+0x422>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4642      	mov	r2, r8
 80063b0:	e7df      	b.n	8006372 <_printf_float+0x402>
 80063b2:	2301      	movs	r3, #1
 80063b4:	464a      	mov	r2, r9
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f ae38 	beq.w	8006032 <_printf_float+0xc2>
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	4543      	cmp	r3, r8
 80063ce:	dcf0      	bgt.n	80063b2 <_printf_float+0x442>
 80063d0:	e6fa      	b.n	80061c8 <_printf_float+0x258>
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	f104 0919 	add.w	r9, r4, #25
 80063da:	e7f4      	b.n	80063c6 <_printf_float+0x456>

080063dc <_printf_common>:
 80063dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e0:	4616      	mov	r6, r2
 80063e2:	4699      	mov	r9, r3
 80063e4:	688a      	ldr	r2, [r1, #8]
 80063e6:	690b      	ldr	r3, [r1, #16]
 80063e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bfb8      	it	lt
 80063f0:	4613      	movlt	r3, r2
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063f8:	4607      	mov	r7, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b10a      	cbz	r2, 8006402 <_printf_common+0x26>
 80063fe:	3301      	adds	r3, #1
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	0699      	lsls	r1, r3, #26
 8006406:	bf42      	ittt	mi
 8006408:	6833      	ldrmi	r3, [r6, #0]
 800640a:	3302      	addmi	r3, #2
 800640c:	6033      	strmi	r3, [r6, #0]
 800640e:	6825      	ldr	r5, [r4, #0]
 8006410:	f015 0506 	ands.w	r5, r5, #6
 8006414:	d106      	bne.n	8006424 <_printf_common+0x48>
 8006416:	f104 0a19 	add.w	sl, r4, #25
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	6832      	ldr	r2, [r6, #0]
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	42ab      	cmp	r3, r5
 8006422:	dc26      	bgt.n	8006472 <_printf_common+0x96>
 8006424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006428:	1e13      	subs	r3, r2, #0
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	bf18      	it	ne
 800642e:	2301      	movne	r3, #1
 8006430:	0692      	lsls	r2, r2, #26
 8006432:	d42b      	bmi.n	800648c <_printf_common+0xb0>
 8006434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006438:	4649      	mov	r1, r9
 800643a:	4638      	mov	r0, r7
 800643c:	47c0      	blx	r8
 800643e:	3001      	adds	r0, #1
 8006440:	d01e      	beq.n	8006480 <_printf_common+0xa4>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	68e5      	ldr	r5, [r4, #12]
 8006446:	6832      	ldr	r2, [r6, #0]
 8006448:	f003 0306 	and.w	r3, r3, #6
 800644c:	2b04      	cmp	r3, #4
 800644e:	bf08      	it	eq
 8006450:	1aad      	subeq	r5, r5, r2
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	6922      	ldr	r2, [r4, #16]
 8006456:	bf0c      	ite	eq
 8006458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800645c:	2500      	movne	r5, #0
 800645e:	4293      	cmp	r3, r2
 8006460:	bfc4      	itt	gt
 8006462:	1a9b      	subgt	r3, r3, r2
 8006464:	18ed      	addgt	r5, r5, r3
 8006466:	2600      	movs	r6, #0
 8006468:	341a      	adds	r4, #26
 800646a:	42b5      	cmp	r5, r6
 800646c:	d11a      	bne.n	80064a4 <_printf_common+0xc8>
 800646e:	2000      	movs	r0, #0
 8006470:	e008      	b.n	8006484 <_printf_common+0xa8>
 8006472:	2301      	movs	r3, #1
 8006474:	4652      	mov	r2, sl
 8006476:	4649      	mov	r1, r9
 8006478:	4638      	mov	r0, r7
 800647a:	47c0      	blx	r8
 800647c:	3001      	adds	r0, #1
 800647e:	d103      	bne.n	8006488 <_printf_common+0xac>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	3501      	adds	r5, #1
 800648a:	e7c6      	b.n	800641a <_printf_common+0x3e>
 800648c:	18e1      	adds	r1, r4, r3
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	2030      	movs	r0, #48	; 0x30
 8006492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006496:	4422      	add	r2, r4
 8006498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800649c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a0:	3302      	adds	r3, #2
 80064a2:	e7c7      	b.n	8006434 <_printf_common+0x58>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4622      	mov	r2, r4
 80064a8:	4649      	mov	r1, r9
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa4>
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7d9      	b.n	800646a <_printf_common+0x8e>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	7e0f      	ldrb	r7, [r1, #24]
 80064be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064c0:	2f78      	cmp	r7, #120	; 0x78
 80064c2:	4691      	mov	r9, r2
 80064c4:	4680      	mov	r8, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	469a      	mov	sl, r3
 80064ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ce:	d807      	bhi.n	80064e0 <_printf_i+0x28>
 80064d0:	2f62      	cmp	r7, #98	; 0x62
 80064d2:	d80a      	bhi.n	80064ea <_printf_i+0x32>
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	f000 80d8 	beq.w	800668a <_printf_i+0x1d2>
 80064da:	2f58      	cmp	r7, #88	; 0x58
 80064dc:	f000 80a3 	beq.w	8006626 <_printf_i+0x16e>
 80064e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064e8:	e03a      	b.n	8006560 <_printf_i+0xa8>
 80064ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ee:	2b15      	cmp	r3, #21
 80064f0:	d8f6      	bhi.n	80064e0 <_printf_i+0x28>
 80064f2:	a101      	add	r1, pc, #4	; (adr r1, 80064f8 <_printf_i+0x40>)
 80064f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f8:	08006551 	.word	0x08006551
 80064fc:	08006565 	.word	0x08006565
 8006500:	080064e1 	.word	0x080064e1
 8006504:	080064e1 	.word	0x080064e1
 8006508:	080064e1 	.word	0x080064e1
 800650c:	080064e1 	.word	0x080064e1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064e1 	.word	0x080064e1
 8006518:	080064e1 	.word	0x080064e1
 800651c:	080064e1 	.word	0x080064e1
 8006520:	080064e1 	.word	0x080064e1
 8006524:	08006671 	.word	0x08006671
 8006528:	08006595 	.word	0x08006595
 800652c:	08006653 	.word	0x08006653
 8006530:	080064e1 	.word	0x080064e1
 8006534:	080064e1 	.word	0x080064e1
 8006538:	08006693 	.word	0x08006693
 800653c:	080064e1 	.word	0x080064e1
 8006540:	08006595 	.word	0x08006595
 8006544:	080064e1 	.word	0x080064e1
 8006548:	080064e1 	.word	0x080064e1
 800654c:	0800665b 	.word	0x0800665b
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	602a      	str	r2, [r5, #0]
 8006558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800655c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006560:	2301      	movs	r3, #1
 8006562:	e0a3      	b.n	80066ac <_printf_i+0x1f4>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	6829      	ldr	r1, [r5, #0]
 8006568:	0606      	lsls	r6, r0, #24
 800656a:	f101 0304 	add.w	r3, r1, #4
 800656e:	d50a      	bpl.n	8006586 <_printf_i+0xce>
 8006570:	680e      	ldr	r6, [r1, #0]
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	2e00      	cmp	r6, #0
 8006576:	da03      	bge.n	8006580 <_printf_i+0xc8>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	4276      	negs	r6, r6
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006580:	485e      	ldr	r0, [pc, #376]	; (80066fc <_printf_i+0x244>)
 8006582:	230a      	movs	r3, #10
 8006584:	e019      	b.n	80065ba <_printf_i+0x102>
 8006586:	680e      	ldr	r6, [r1, #0]
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800658e:	bf18      	it	ne
 8006590:	b236      	sxthne	r6, r6
 8006592:	e7ef      	b.n	8006574 <_printf_i+0xbc>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1d19      	adds	r1, r3, #4
 800659a:	6029      	str	r1, [r5, #0]
 800659c:	0601      	lsls	r1, r0, #24
 800659e:	d501      	bpl.n	80065a4 <_printf_i+0xec>
 80065a0:	681e      	ldr	r6, [r3, #0]
 80065a2:	e002      	b.n	80065aa <_printf_i+0xf2>
 80065a4:	0646      	lsls	r6, r0, #25
 80065a6:	d5fb      	bpl.n	80065a0 <_printf_i+0xe8>
 80065a8:	881e      	ldrh	r6, [r3, #0]
 80065aa:	4854      	ldr	r0, [pc, #336]	; (80066fc <_printf_i+0x244>)
 80065ac:	2f6f      	cmp	r7, #111	; 0x6f
 80065ae:	bf0c      	ite	eq
 80065b0:	2308      	moveq	r3, #8
 80065b2:	230a      	movne	r3, #10
 80065b4:	2100      	movs	r1, #0
 80065b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ba:	6865      	ldr	r5, [r4, #4]
 80065bc:	60a5      	str	r5, [r4, #8]
 80065be:	2d00      	cmp	r5, #0
 80065c0:	bfa2      	ittt	ge
 80065c2:	6821      	ldrge	r1, [r4, #0]
 80065c4:	f021 0104 	bicge.w	r1, r1, #4
 80065c8:	6021      	strge	r1, [r4, #0]
 80065ca:	b90e      	cbnz	r6, 80065d0 <_printf_i+0x118>
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	d04d      	beq.n	800666c <_printf_i+0x1b4>
 80065d0:	4615      	mov	r5, r2
 80065d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80065d6:	fb03 6711 	mls	r7, r3, r1, r6
 80065da:	5dc7      	ldrb	r7, [r0, r7]
 80065dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e0:	4637      	mov	r7, r6
 80065e2:	42bb      	cmp	r3, r7
 80065e4:	460e      	mov	r6, r1
 80065e6:	d9f4      	bls.n	80065d2 <_printf_i+0x11a>
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d10b      	bne.n	8006604 <_printf_i+0x14c>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07de      	lsls	r6, r3, #31
 80065f0:	d508      	bpl.n	8006604 <_printf_i+0x14c>
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	6861      	ldr	r1, [r4, #4]
 80065f6:	4299      	cmp	r1, r3
 80065f8:	bfde      	ittt	le
 80065fa:	2330      	movle	r3, #48	; 0x30
 80065fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006604:	1b52      	subs	r2, r2, r5
 8006606:	6122      	str	r2, [r4, #16]
 8006608:	f8cd a000 	str.w	sl, [sp]
 800660c:	464b      	mov	r3, r9
 800660e:	aa03      	add	r2, sp, #12
 8006610:	4621      	mov	r1, r4
 8006612:	4640      	mov	r0, r8
 8006614:	f7ff fee2 	bl	80063dc <_printf_common>
 8006618:	3001      	adds	r0, #1
 800661a:	d14c      	bne.n	80066b6 <_printf_i+0x1fe>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	b004      	add	sp, #16
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	4835      	ldr	r0, [pc, #212]	; (80066fc <_printf_i+0x244>)
 8006628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800662c:	6829      	ldr	r1, [r5, #0]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f851 6b04 	ldr.w	r6, [r1], #4
 8006634:	6029      	str	r1, [r5, #0]
 8006636:	061d      	lsls	r5, r3, #24
 8006638:	d514      	bpl.n	8006664 <_printf_i+0x1ac>
 800663a:	07df      	lsls	r7, r3, #31
 800663c:	bf44      	itt	mi
 800663e:	f043 0320 	orrmi.w	r3, r3, #32
 8006642:	6023      	strmi	r3, [r4, #0]
 8006644:	b91e      	cbnz	r6, 800664e <_printf_i+0x196>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f023 0320 	bic.w	r3, r3, #32
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	2310      	movs	r3, #16
 8006650:	e7b0      	b.n	80065b4 <_printf_i+0xfc>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f043 0320 	orr.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	2378      	movs	r3, #120	; 0x78
 800665c:	4828      	ldr	r0, [pc, #160]	; (8006700 <_printf_i+0x248>)
 800665e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006662:	e7e3      	b.n	800662c <_printf_i+0x174>
 8006664:	0659      	lsls	r1, r3, #25
 8006666:	bf48      	it	mi
 8006668:	b2b6      	uxthmi	r6, r6
 800666a:	e7e6      	b.n	800663a <_printf_i+0x182>
 800666c:	4615      	mov	r5, r2
 800666e:	e7bb      	b.n	80065e8 <_printf_i+0x130>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	6826      	ldr	r6, [r4, #0]
 8006674:	6961      	ldr	r1, [r4, #20]
 8006676:	1d18      	adds	r0, r3, #4
 8006678:	6028      	str	r0, [r5, #0]
 800667a:	0635      	lsls	r5, r6, #24
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	d501      	bpl.n	8006684 <_printf_i+0x1cc>
 8006680:	6019      	str	r1, [r3, #0]
 8006682:	e002      	b.n	800668a <_printf_i+0x1d2>
 8006684:	0670      	lsls	r0, r6, #25
 8006686:	d5fb      	bpl.n	8006680 <_printf_i+0x1c8>
 8006688:	8019      	strh	r1, [r3, #0]
 800668a:	2300      	movs	r3, #0
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	4615      	mov	r5, r2
 8006690:	e7ba      	b.n	8006608 <_printf_i+0x150>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	1d1a      	adds	r2, r3, #4
 8006696:	602a      	str	r2, [r5, #0]
 8006698:	681d      	ldr	r5, [r3, #0]
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	2100      	movs	r1, #0
 800669e:	4628      	mov	r0, r5
 80066a0:	f7f9 fd9e 	bl	80001e0 <memchr>
 80066a4:	b108      	cbz	r0, 80066aa <_printf_i+0x1f2>
 80066a6:	1b40      	subs	r0, r0, r5
 80066a8:	6060      	str	r0, [r4, #4]
 80066aa:	6863      	ldr	r3, [r4, #4]
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	2300      	movs	r3, #0
 80066b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b4:	e7a8      	b.n	8006608 <_printf_i+0x150>
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4649      	mov	r1, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	47d0      	blx	sl
 80066c0:	3001      	adds	r0, #1
 80066c2:	d0ab      	beq.n	800661c <_printf_i+0x164>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	079b      	lsls	r3, r3, #30
 80066c8:	d413      	bmi.n	80066f2 <_printf_i+0x23a>
 80066ca:	68e0      	ldr	r0, [r4, #12]
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	4298      	cmp	r0, r3
 80066d0:	bfb8      	it	lt
 80066d2:	4618      	movlt	r0, r3
 80066d4:	e7a4      	b.n	8006620 <_printf_i+0x168>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4632      	mov	r2, r6
 80066da:	4649      	mov	r1, r9
 80066dc:	4640      	mov	r0, r8
 80066de:	47d0      	blx	sl
 80066e0:	3001      	adds	r0, #1
 80066e2:	d09b      	beq.n	800661c <_printf_i+0x164>
 80066e4:	3501      	adds	r5, #1
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	9903      	ldr	r1, [sp, #12]
 80066ea:	1a5b      	subs	r3, r3, r1
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dcf2      	bgt.n	80066d6 <_printf_i+0x21e>
 80066f0:	e7eb      	b.n	80066ca <_printf_i+0x212>
 80066f2:	2500      	movs	r5, #0
 80066f4:	f104 0619 	add.w	r6, r4, #25
 80066f8:	e7f5      	b.n	80066e6 <_printf_i+0x22e>
 80066fa:	bf00      	nop
 80066fc:	0800b6d0 	.word	0x0800b6d0
 8006700:	0800b6e1 	.word	0x0800b6e1

08006704 <_scanf_float>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	b087      	sub	sp, #28
 800670a:	4617      	mov	r7, r2
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	688b      	ldr	r3, [r1, #8]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006716:	bf83      	ittte	hi
 8006718:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800671c:	195b      	addhi	r3, r3, r5
 800671e:	9302      	strhi	r3, [sp, #8]
 8006720:	2300      	movls	r3, #0
 8006722:	bf86      	itte	hi
 8006724:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006728:	608b      	strhi	r3, [r1, #8]
 800672a:	9302      	strls	r3, [sp, #8]
 800672c:	680b      	ldr	r3, [r1, #0]
 800672e:	468b      	mov	fp, r1
 8006730:	2500      	movs	r5, #0
 8006732:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006736:	f84b 3b1c 	str.w	r3, [fp], #28
 800673a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800673e:	4680      	mov	r8, r0
 8006740:	460c      	mov	r4, r1
 8006742:	465e      	mov	r6, fp
 8006744:	46aa      	mov	sl, r5
 8006746:	46a9      	mov	r9, r5
 8006748:	9501      	str	r5, [sp, #4]
 800674a:	68a2      	ldr	r2, [r4, #8]
 800674c:	b152      	cbz	r2, 8006764 <_scanf_float+0x60>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b4e      	cmp	r3, #78	; 0x4e
 8006754:	d864      	bhi.n	8006820 <_scanf_float+0x11c>
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d83c      	bhi.n	80067d4 <_scanf_float+0xd0>
 800675a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800675e:	b2c8      	uxtb	r0, r1
 8006760:	280e      	cmp	r0, #14
 8006762:	d93a      	bls.n	80067da <_scanf_float+0xd6>
 8006764:	f1b9 0f00 	cmp.w	r9, #0
 8006768:	d003      	beq.n	8006772 <_scanf_float+0x6e>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006776:	f1ba 0f01 	cmp.w	sl, #1
 800677a:	f200 8113 	bhi.w	80069a4 <_scanf_float+0x2a0>
 800677e:	455e      	cmp	r6, fp
 8006780:	f200 8105 	bhi.w	800698e <_scanf_float+0x28a>
 8006784:	2501      	movs	r5, #1
 8006786:	4628      	mov	r0, r5
 8006788:	b007      	add	sp, #28
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006792:	2a0d      	cmp	r2, #13
 8006794:	d8e6      	bhi.n	8006764 <_scanf_float+0x60>
 8006796:	a101      	add	r1, pc, #4	; (adr r1, 800679c <_scanf_float+0x98>)
 8006798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800679c:	080068db 	.word	0x080068db
 80067a0:	08006765 	.word	0x08006765
 80067a4:	08006765 	.word	0x08006765
 80067a8:	08006765 	.word	0x08006765
 80067ac:	0800693b 	.word	0x0800693b
 80067b0:	08006913 	.word	0x08006913
 80067b4:	08006765 	.word	0x08006765
 80067b8:	08006765 	.word	0x08006765
 80067bc:	080068e9 	.word	0x080068e9
 80067c0:	08006765 	.word	0x08006765
 80067c4:	08006765 	.word	0x08006765
 80067c8:	08006765 	.word	0x08006765
 80067cc:	08006765 	.word	0x08006765
 80067d0:	080068a1 	.word	0x080068a1
 80067d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067d8:	e7db      	b.n	8006792 <_scanf_float+0x8e>
 80067da:	290e      	cmp	r1, #14
 80067dc:	d8c2      	bhi.n	8006764 <_scanf_float+0x60>
 80067de:	a001      	add	r0, pc, #4	; (adr r0, 80067e4 <_scanf_float+0xe0>)
 80067e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067e4:	08006893 	.word	0x08006893
 80067e8:	08006765 	.word	0x08006765
 80067ec:	08006893 	.word	0x08006893
 80067f0:	08006927 	.word	0x08006927
 80067f4:	08006765 	.word	0x08006765
 80067f8:	08006841 	.word	0x08006841
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	0800687d 	.word	0x0800687d
 8006804:	0800687d 	.word	0x0800687d
 8006808:	0800687d 	.word	0x0800687d
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	2b6e      	cmp	r3, #110	; 0x6e
 8006822:	d809      	bhi.n	8006838 <_scanf_float+0x134>
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d8b2      	bhi.n	800678e <_scanf_float+0x8a>
 8006828:	2b54      	cmp	r3, #84	; 0x54
 800682a:	d077      	beq.n	800691c <_scanf_float+0x218>
 800682c:	2b59      	cmp	r3, #89	; 0x59
 800682e:	d199      	bne.n	8006764 <_scanf_float+0x60>
 8006830:	2d07      	cmp	r5, #7
 8006832:	d197      	bne.n	8006764 <_scanf_float+0x60>
 8006834:	2508      	movs	r5, #8
 8006836:	e029      	b.n	800688c <_scanf_float+0x188>
 8006838:	2b74      	cmp	r3, #116	; 0x74
 800683a:	d06f      	beq.n	800691c <_scanf_float+0x218>
 800683c:	2b79      	cmp	r3, #121	; 0x79
 800683e:	e7f6      	b.n	800682e <_scanf_float+0x12a>
 8006840:	6821      	ldr	r1, [r4, #0]
 8006842:	05c8      	lsls	r0, r1, #23
 8006844:	d51a      	bpl.n	800687c <_scanf_float+0x178>
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800684c:	6021      	str	r1, [r4, #0]
 800684e:	f109 0901 	add.w	r9, r9, #1
 8006852:	b11b      	cbz	r3, 800685c <_scanf_float+0x158>
 8006854:	3b01      	subs	r3, #1
 8006856:	3201      	adds	r2, #1
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	60a2      	str	r2, [r4, #8]
 800685c:	68a3      	ldr	r3, [r4, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3b01      	subs	r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	f340 8084 	ble.w	800697c <_scanf_float+0x278>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	e766      	b.n	800674a <_scanf_float+0x46>
 800687c:	eb1a 0f05 	cmn.w	sl, r5
 8006880:	f47f af70 	bne.w	8006764 <_scanf_float+0x60>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800688a:	6022      	str	r2, [r4, #0]
 800688c:	f806 3b01 	strb.w	r3, [r6], #1
 8006890:	e7e4      	b.n	800685c <_scanf_float+0x158>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	0610      	lsls	r0, r2, #24
 8006896:	f57f af65 	bpl.w	8006764 <_scanf_float+0x60>
 800689a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689e:	e7f4      	b.n	800688a <_scanf_float+0x186>
 80068a0:	f1ba 0f00 	cmp.w	sl, #0
 80068a4:	d10e      	bne.n	80068c4 <_scanf_float+0x1c0>
 80068a6:	f1b9 0f00 	cmp.w	r9, #0
 80068aa:	d10e      	bne.n	80068ca <_scanf_float+0x1c6>
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068b6:	d108      	bne.n	80068ca <_scanf_float+0x1c6>
 80068b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068bc:	6022      	str	r2, [r4, #0]
 80068be:	f04f 0a01 	mov.w	sl, #1
 80068c2:	e7e3      	b.n	800688c <_scanf_float+0x188>
 80068c4:	f1ba 0f02 	cmp.w	sl, #2
 80068c8:	d055      	beq.n	8006976 <_scanf_float+0x272>
 80068ca:	2d01      	cmp	r5, #1
 80068cc:	d002      	beq.n	80068d4 <_scanf_float+0x1d0>
 80068ce:	2d04      	cmp	r5, #4
 80068d0:	f47f af48 	bne.w	8006764 <_scanf_float+0x60>
 80068d4:	3501      	adds	r5, #1
 80068d6:	b2ed      	uxtb	r5, r5
 80068d8:	e7d8      	b.n	800688c <_scanf_float+0x188>
 80068da:	f1ba 0f01 	cmp.w	sl, #1
 80068de:	f47f af41 	bne.w	8006764 <_scanf_float+0x60>
 80068e2:	f04f 0a02 	mov.w	sl, #2
 80068e6:	e7d1      	b.n	800688c <_scanf_float+0x188>
 80068e8:	b97d      	cbnz	r5, 800690a <_scanf_float+0x206>
 80068ea:	f1b9 0f00 	cmp.w	r9, #0
 80068ee:	f47f af3c 	bne.w	800676a <_scanf_float+0x66>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068fc:	f47f af39 	bne.w	8006772 <_scanf_float+0x6e>
 8006900:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006904:	6022      	str	r2, [r4, #0]
 8006906:	2501      	movs	r5, #1
 8006908:	e7c0      	b.n	800688c <_scanf_float+0x188>
 800690a:	2d03      	cmp	r5, #3
 800690c:	d0e2      	beq.n	80068d4 <_scanf_float+0x1d0>
 800690e:	2d05      	cmp	r5, #5
 8006910:	e7de      	b.n	80068d0 <_scanf_float+0x1cc>
 8006912:	2d02      	cmp	r5, #2
 8006914:	f47f af26 	bne.w	8006764 <_scanf_float+0x60>
 8006918:	2503      	movs	r5, #3
 800691a:	e7b7      	b.n	800688c <_scanf_float+0x188>
 800691c:	2d06      	cmp	r5, #6
 800691e:	f47f af21 	bne.w	8006764 <_scanf_float+0x60>
 8006922:	2507      	movs	r5, #7
 8006924:	e7b2      	b.n	800688c <_scanf_float+0x188>
 8006926:	6822      	ldr	r2, [r4, #0]
 8006928:	0591      	lsls	r1, r2, #22
 800692a:	f57f af1b 	bpl.w	8006764 <_scanf_float+0x60>
 800692e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	f8cd 9004 	str.w	r9, [sp, #4]
 8006938:	e7a8      	b.n	800688c <_scanf_float+0x188>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006940:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006944:	d006      	beq.n	8006954 <_scanf_float+0x250>
 8006946:	0550      	lsls	r0, r2, #21
 8006948:	f57f af0c 	bpl.w	8006764 <_scanf_float+0x60>
 800694c:	f1b9 0f00 	cmp.w	r9, #0
 8006950:	f43f af0f 	beq.w	8006772 <_scanf_float+0x6e>
 8006954:	0591      	lsls	r1, r2, #22
 8006956:	bf58      	it	pl
 8006958:	9901      	ldrpl	r1, [sp, #4]
 800695a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800695e:	bf58      	it	pl
 8006960:	eba9 0101 	subpl.w	r1, r9, r1
 8006964:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006968:	bf58      	it	pl
 800696a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800696e:	6022      	str	r2, [r4, #0]
 8006970:	f04f 0900 	mov.w	r9, #0
 8006974:	e78a      	b.n	800688c <_scanf_float+0x188>
 8006976:	f04f 0a03 	mov.w	sl, #3
 800697a:	e787      	b.n	800688c <_scanf_float+0x188>
 800697c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006980:	4639      	mov	r1, r7
 8006982:	4640      	mov	r0, r8
 8006984:	4798      	blx	r3
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aedf 	beq.w	800674a <_scanf_float+0x46>
 800698c:	e6ea      	b.n	8006764 <_scanf_float+0x60>
 800698e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006996:	463a      	mov	r2, r7
 8006998:	4640      	mov	r0, r8
 800699a:	4798      	blx	r3
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	e6ec      	b.n	800677e <_scanf_float+0x7a>
 80069a4:	1e6b      	subs	r3, r5, #1
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d825      	bhi.n	80069f6 <_scanf_float+0x2f2>
 80069aa:	2d02      	cmp	r5, #2
 80069ac:	d836      	bhi.n	8006a1c <_scanf_float+0x318>
 80069ae:	455e      	cmp	r6, fp
 80069b0:	f67f aee8 	bls.w	8006784 <_scanf_float+0x80>
 80069b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069bc:	463a      	mov	r2, r7
 80069be:	4640      	mov	r0, r8
 80069c0:	4798      	blx	r3
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	e7f1      	b.n	80069ae <_scanf_float+0x2aa>
 80069ca:	9802      	ldr	r0, [sp, #8]
 80069cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069d4:	9002      	str	r0, [sp, #8]
 80069d6:	463a      	mov	r2, r7
 80069d8:	4640      	mov	r0, r8
 80069da:	4798      	blx	r3
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	3b01      	subs	r3, #1
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e6:	fa5f fa8a 	uxtb.w	sl, sl
 80069ea:	f1ba 0f02 	cmp.w	sl, #2
 80069ee:	d1ec      	bne.n	80069ca <_scanf_float+0x2c6>
 80069f0:	3d03      	subs	r5, #3
 80069f2:	b2ed      	uxtb	r5, r5
 80069f4:	1b76      	subs	r6, r6, r5
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	05da      	lsls	r2, r3, #23
 80069fa:	d52f      	bpl.n	8006a5c <_scanf_float+0x358>
 80069fc:	055b      	lsls	r3, r3, #21
 80069fe:	d510      	bpl.n	8006a22 <_scanf_float+0x31e>
 8006a00:	455e      	cmp	r6, fp
 8006a02:	f67f aebf 	bls.w	8006784 <_scanf_float+0x80>
 8006a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a0e:	463a      	mov	r2, r7
 8006a10:	4640      	mov	r0, r8
 8006a12:	4798      	blx	r3
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	e7f1      	b.n	8006a00 <_scanf_float+0x2fc>
 8006a1c:	46aa      	mov	sl, r5
 8006a1e:	9602      	str	r6, [sp, #8]
 8006a20:	e7df      	b.n	80069e2 <_scanf_float+0x2de>
 8006a22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	2965      	cmp	r1, #101	; 0x65
 8006a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	d00c      	beq.n	8006a50 <_scanf_float+0x34c>
 8006a36:	2945      	cmp	r1, #69	; 0x45
 8006a38:	d00a      	beq.n	8006a50 <_scanf_float+0x34c>
 8006a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a3e:	463a      	mov	r2, r7
 8006a40:	4640      	mov	r0, r8
 8006a42:	4798      	blx	r3
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	1eb5      	subs	r5, r6, #2
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a54:	463a      	mov	r2, r7
 8006a56:	4640      	mov	r0, r8
 8006a58:	4798      	blx	r3
 8006a5a:	462e      	mov	r6, r5
 8006a5c:	6825      	ldr	r5, [r4, #0]
 8006a5e:	f015 0510 	ands.w	r5, r5, #16
 8006a62:	d159      	bne.n	8006b18 <_scanf_float+0x414>
 8006a64:	7035      	strb	r5, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d11b      	bne.n	8006aaa <_scanf_float+0x3a6>
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	454b      	cmp	r3, r9
 8006a76:	eba3 0209 	sub.w	r2, r3, r9
 8006a7a:	d123      	bne.n	8006ac4 <_scanf_float+0x3c0>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4659      	mov	r1, fp
 8006a80:	4640      	mov	r0, r8
 8006a82:	f000 ffcb 	bl	8007a1c <_strtod_r>
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	9b03      	ldr	r3, [sp, #12]
 8006a8a:	f012 0f02 	tst.w	r2, #2
 8006a8e:	ec57 6b10 	vmov	r6, r7, d0
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	d021      	beq.n	8006ada <_scanf_float+0x3d6>
 8006a96:	9903      	ldr	r1, [sp, #12]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	600a      	str	r2, [r1, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	e9c3 6700 	strd	r6, r7, [r3]
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60e3      	str	r3, [r4, #12]
 8006aa8:	e66d      	b.n	8006786 <_scanf_float+0x82>
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0e5      	beq.n	8006a7c <_scanf_float+0x378>
 8006ab0:	9905      	ldr	r1, [sp, #20]
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	3101      	adds	r1, #1
 8006ab8:	4640      	mov	r0, r8
 8006aba:	f001 f837 	bl	8007b2c <_strtol_r>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	9e05      	ldr	r6, [sp, #20]
 8006ac2:	1ac2      	subs	r2, r0, r3
 8006ac4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ac8:	429e      	cmp	r6, r3
 8006aca:	bf28      	it	cs
 8006acc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ad0:	4912      	ldr	r1, [pc, #72]	; (8006b1c <_scanf_float+0x418>)
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f000 f8d0 	bl	8006c78 <siprintf>
 8006ad8:	e7d0      	b.n	8006a7c <_scanf_float+0x378>
 8006ada:	9903      	ldr	r1, [sp, #12]
 8006adc:	f012 0f04 	tst.w	r2, #4
 8006ae0:	f103 0204 	add.w	r2, r3, #4
 8006ae4:	600a      	str	r2, [r1, #0]
 8006ae6:	d1d9      	bne.n	8006a9c <_scanf_float+0x398>
 8006ae8:	f8d3 8000 	ldr.w	r8, [r3]
 8006aec:	ee10 2a10 	vmov	r2, s0
 8006af0:	ee10 0a10 	vmov	r0, s0
 8006af4:	463b      	mov	r3, r7
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7fa f818 	bl	8000b2c <__aeabi_dcmpun>
 8006afc:	b128      	cbz	r0, 8006b0a <_scanf_float+0x406>
 8006afe:	4808      	ldr	r0, [pc, #32]	; (8006b20 <_scanf_float+0x41c>)
 8006b00:	f000 f8b4 	bl	8006c6c <nanf>
 8006b04:	ed88 0a00 	vstr	s0, [r8]
 8006b08:	e7cb      	b.n	8006aa2 <_scanf_float+0x39e>
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7fa f86b 	bl	8000be8 <__aeabi_d2f>
 8006b12:	f8c8 0000 	str.w	r0, [r8]
 8006b16:	e7c4      	b.n	8006aa2 <_scanf_float+0x39e>
 8006b18:	2500      	movs	r5, #0
 8006b1a:	e634      	b.n	8006786 <_scanf_float+0x82>
 8006b1c:	0800b6f2 	.word	0x0800b6f2
 8006b20:	0800b47f 	.word	0x0800b47f

08006b24 <iprintf>:
 8006b24:	b40f      	push	{r0, r1, r2, r3}
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <iprintf+0x2c>)
 8006b28:	b513      	push	{r0, r1, r4, lr}
 8006b2a:	681c      	ldr	r4, [r3, #0]
 8006b2c:	b124      	cbz	r4, 8006b38 <iprintf+0x14>
 8006b2e:	69a3      	ldr	r3, [r4, #24]
 8006b30:	b913      	cbnz	r3, 8006b38 <iprintf+0x14>
 8006b32:	4620      	mov	r0, r4
 8006b34:	f002 f874 	bl	8008c20 <__sinit>
 8006b38:	ab05      	add	r3, sp, #20
 8006b3a:	9a04      	ldr	r2, [sp, #16]
 8006b3c:	68a1      	ldr	r1, [r4, #8]
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	4620      	mov	r0, r4
 8006b42:	f003 fe31 	bl	800a7a8 <_vfiprintf_r>
 8006b46:	b002      	add	sp, #8
 8006b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b4c:	b004      	add	sp, #16
 8006b4e:	4770      	bx	lr
 8006b50:	2000003c 	.word	0x2000003c

08006b54 <putchar>:
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <putchar+0x28>)
 8006b56:	b513      	push	{r0, r1, r4, lr}
 8006b58:	681c      	ldr	r4, [r3, #0]
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	b134      	cbz	r4, 8006b6c <putchar+0x18>
 8006b5e:	69a3      	ldr	r3, [r4, #24]
 8006b60:	b923      	cbnz	r3, 8006b6c <putchar+0x18>
 8006b62:	9001      	str	r0, [sp, #4]
 8006b64:	4620      	mov	r0, r4
 8006b66:	f002 f85b 	bl	8008c20 <__sinit>
 8006b6a:	9901      	ldr	r1, [sp, #4]
 8006b6c:	68a2      	ldr	r2, [r4, #8]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	b002      	add	sp, #8
 8006b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b76:	f004 b899 	b.w	800acac <_putc_r>
 8006b7a:	bf00      	nop
 8006b7c:	2000003c 	.word	0x2000003c

08006b80 <_puts_r>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4605      	mov	r5, r0
 8006b86:	b118      	cbz	r0, 8006b90 <_puts_r+0x10>
 8006b88:	6983      	ldr	r3, [r0, #24]
 8006b8a:	b90b      	cbnz	r3, 8006b90 <_puts_r+0x10>
 8006b8c:	f002 f848 	bl	8008c20 <__sinit>
 8006b90:	69ab      	ldr	r3, [r5, #24]
 8006b92:	68ac      	ldr	r4, [r5, #8]
 8006b94:	b913      	cbnz	r3, 8006b9c <_puts_r+0x1c>
 8006b96:	4628      	mov	r0, r5
 8006b98:	f002 f842 	bl	8008c20 <__sinit>
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <_puts_r+0xd0>)
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d120      	bne.n	8006be4 <_puts_r+0x64>
 8006ba2:	686c      	ldr	r4, [r5, #4]
 8006ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba6:	07db      	lsls	r3, r3, #31
 8006ba8:	d405      	bmi.n	8006bb6 <_puts_r+0x36>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	0598      	lsls	r0, r3, #22
 8006bae:	d402      	bmi.n	8006bb6 <_puts_r+0x36>
 8006bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb2:	f002 fc46 	bl	8009442 <__retarget_lock_acquire_recursive>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	0719      	lsls	r1, r3, #28
 8006bba:	d51d      	bpl.n	8006bf8 <_puts_r+0x78>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	b1db      	cbz	r3, 8006bf8 <_puts_r+0x78>
 8006bc0:	3e01      	subs	r6, #1
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	60a3      	str	r3, [r4, #8]
 8006bcc:	bb39      	cbnz	r1, 8006c1e <_puts_r+0x9e>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da38      	bge.n	8006c44 <_puts_r+0xc4>
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	210a      	movs	r1, #10
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 ffaa 	bl	8007b30 <__swbuf_r>
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d011      	beq.n	8006c04 <_puts_r+0x84>
 8006be0:	250a      	movs	r5, #10
 8006be2:	e011      	b.n	8006c08 <_puts_r+0x88>
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <_puts_r+0xd4>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <_puts_r+0x6e>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7da      	b.n	8006ba4 <_puts_r+0x24>
 8006bee:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <_puts_r+0xd8>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7d5      	b.n	8006ba4 <_puts_r+0x24>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 fffc 	bl	8007bf8 <__swsetup_r>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d0dd      	beq.n	8006bc0 <_puts_r+0x40>
 8006c04:	f04f 35ff 	mov.w	r5, #4294967295
 8006c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0a:	07da      	lsls	r2, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_puts_r+0x9a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	059b      	lsls	r3, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_puts_r+0x9a>
 8006c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c16:	f002 fc15 	bl	8009444 <__retarget_lock_release_recursive>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da04      	bge.n	8006c2c <_puts_r+0xac>
 8006c22:	69a2      	ldr	r2, [r4, #24]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	dc06      	bgt.n	8006c36 <_puts_r+0xb6>
 8006c28:	290a      	cmp	r1, #10
 8006c2a:	d004      	beq.n	8006c36 <_puts_r+0xb6>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	7019      	strb	r1, [r3, #0]
 8006c34:	e7c5      	b.n	8006bc2 <_puts_r+0x42>
 8006c36:	4622      	mov	r2, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 ff79 	bl	8007b30 <__swbuf_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d1bf      	bne.n	8006bc2 <_puts_r+0x42>
 8006c42:	e7df      	b.n	8006c04 <_puts_r+0x84>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	250a      	movs	r5, #10
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	701d      	strb	r5, [r3, #0]
 8006c4e:	e7db      	b.n	8006c08 <_puts_r+0x88>
 8006c50:	0800b8fc 	.word	0x0800b8fc
 8006c54:	0800b91c 	.word	0x0800b91c
 8006c58:	0800b8dc 	.word	0x0800b8dc

08006c5c <puts>:
 8006c5c:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <puts+0xc>)
 8006c5e:	4601      	mov	r1, r0
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f7ff bf8d 	b.w	8006b80 <_puts_r>
 8006c66:	bf00      	nop
 8006c68:	2000003c 	.word	0x2000003c

08006c6c <nanf>:
 8006c6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c74 <nanf+0x8>
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	7fc00000 	.word	0x7fc00000

08006c78 <siprintf>:
 8006c78:	b40e      	push	{r1, r2, r3}
 8006c7a:	b500      	push	{lr}
 8006c7c:	b09c      	sub	sp, #112	; 0x70
 8006c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c80:	9002      	str	r0, [sp, #8]
 8006c82:	9006      	str	r0, [sp, #24]
 8006c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c88:	4809      	ldr	r0, [pc, #36]	; (8006cb0 <siprintf+0x38>)
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	9104      	str	r1, [sp, #16]
 8006c8e:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <siprintf+0x3c>)
 8006c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	f003 fa88 	bl	800a1b0 <_svfiprintf_r>
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	b01c      	add	sp, #112	; 0x70
 8006ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cac:	b003      	add	sp, #12
 8006cae:	4770      	bx	lr
 8006cb0:	2000003c 	.word	0x2000003c
 8006cb4:	ffff0208 	.word	0xffff0208

08006cb8 <siscanf>:
 8006cb8:	b40e      	push	{r1, r2, r3}
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	b09f      	sub	sp, #124	; 0x7c
 8006cbe:	ac21      	add	r4, sp, #132	; 0x84
 8006cc0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006cc4:	f854 2b04 	ldr.w	r2, [r4], #4
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006cce:	9004      	str	r0, [sp, #16]
 8006cd0:	9008      	str	r0, [sp, #32]
 8006cd2:	f7f9 fa7d 	bl	80001d0 <strlen>
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <siscanf+0x50>)
 8006cd8:	9005      	str	r0, [sp, #20]
 8006cda:	9009      	str	r0, [sp, #36]	; 0x24
 8006cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8006cde:	480b      	ldr	r0, [pc, #44]	; (8006d0c <siscanf+0x54>)
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	6800      	ldr	r0, [r0, #0]
 8006ce4:	9403      	str	r4, [sp, #12]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8006cea:	9316      	str	r3, [sp, #88]	; 0x58
 8006cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006cf4:	a904      	add	r1, sp, #16
 8006cf6:	4623      	mov	r3, r4
 8006cf8:	f003 fbb4 	bl	800a464 <__ssvfiscanf_r>
 8006cfc:	b01f      	add	sp, #124	; 0x7c
 8006cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d02:	b003      	add	sp, #12
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	2000003c 	.word	0x2000003c

08006d10 <__sread>:
 8006d10:	b510      	push	{r4, lr}
 8006d12:	460c      	mov	r4, r1
 8006d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d18:	f004 f810 	bl	800ad3c <_read_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	bfab      	itete	ge
 8006d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d22:	89a3      	ldrhlt	r3, [r4, #12]
 8006d24:	181b      	addge	r3, r3, r0
 8006d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d2a:	bfac      	ite	ge
 8006d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d2e:	81a3      	strhlt	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__seofread>:
 8006d32:	2000      	movs	r0, #0
 8006d34:	4770      	bx	lr

08006d36 <__swrite>:
 8006d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	898b      	ldrh	r3, [r1, #12]
 8006d3e:	05db      	lsls	r3, r3, #23
 8006d40:	4605      	mov	r5, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	4616      	mov	r6, r2
 8006d46:	d505      	bpl.n	8006d54 <__swrite+0x1e>
 8006d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f002 fb7a 	bl	8009448 <_lseek_r>
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d5e:	81a3      	strh	r3, [r4, #12]
 8006d60:	4632      	mov	r2, r6
 8006d62:	463b      	mov	r3, r7
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	f000 bf33 	b.w	8007bd4 <_write_r>

08006d6e <__sseek>:
 8006d6e:	b510      	push	{r4, lr}
 8006d70:	460c      	mov	r4, r1
 8006d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d76:	f002 fb67 	bl	8009448 <_lseek_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	bf15      	itete	ne
 8006d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d8a:	81a3      	strheq	r3, [r4, #12]
 8006d8c:	bf18      	it	ne
 8006d8e:	81a3      	strhne	r3, [r4, #12]
 8006d90:	bd10      	pop	{r4, pc}

08006d92 <__sclose>:
 8006d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d96:	f000 bf9d 	b.w	8007cd4 <_close_r>

08006d9a <strcpy>:
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006da0:	f803 2b01 	strb.w	r2, [r3], #1
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d1f9      	bne.n	8006d9c <strcpy+0x2>
 8006da8:	4770      	bx	lr

08006daa <strncmp>:
 8006daa:	b510      	push	{r4, lr}
 8006dac:	b17a      	cbz	r2, 8006dce <strncmp+0x24>
 8006dae:	4603      	mov	r3, r0
 8006db0:	3901      	subs	r1, #1
 8006db2:	1884      	adds	r4, r0, r2
 8006db4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006db8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006dbc:	4290      	cmp	r0, r2
 8006dbe:	d101      	bne.n	8006dc4 <strncmp+0x1a>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d101      	bne.n	8006dc8 <strncmp+0x1e>
 8006dc4:	1a80      	subs	r0, r0, r2
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d1f3      	bne.n	8006db4 <strncmp+0xa>
 8006dcc:	e7fa      	b.n	8006dc4 <strncmp+0x1a>
 8006dce:	4610      	mov	r0, r2
 8006dd0:	e7f9      	b.n	8006dc6 <strncmp+0x1c>

08006dd2 <sulp>:
 8006dd2:	b570      	push	{r4, r5, r6, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	ec45 4b10 	vmov	d0, r4, r5
 8006ddc:	4616      	mov	r6, r2
 8006dde:	f002 ff45 	bl	8009c6c <__ulp>
 8006de2:	ec51 0b10 	vmov	r0, r1, d0
 8006de6:	b17e      	cbz	r6, 8006e08 <sulp+0x36>
 8006de8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006dec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd09      	ble.n	8006e08 <sulp+0x36>
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	f7f9 fbf8 	bl	80005f8 <__aeabi_dmul>
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	0000      	movs	r0, r0
 8006e0c:	0000      	movs	r0, r0
	...

08006e10 <_strtod_l>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	ed2d 8b02 	vpush	{d8}
 8006e18:	b09d      	sub	sp, #116	; 0x74
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9318      	str	r3, [sp, #96]	; 0x60
 8006e20:	4ba2      	ldr	r3, [pc, #648]	; (80070ac <_strtod_l+0x29c>)
 8006e22:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	4688      	mov	r8, r1
 8006e2e:	f7f9 f9cf 	bl	80001d0 <strlen>
 8006e32:	f04f 0a00 	mov.w	sl, #0
 8006e36:	4605      	mov	r5, r0
 8006e38:	f04f 0b00 	mov.w	fp, #0
 8006e3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	2a2b      	cmp	r2, #43	; 0x2b
 8006e46:	d04e      	beq.n	8006ee6 <_strtod_l+0xd6>
 8006e48:	d83b      	bhi.n	8006ec2 <_strtod_l+0xb2>
 8006e4a:	2a0d      	cmp	r2, #13
 8006e4c:	d834      	bhi.n	8006eb8 <_strtod_l+0xa8>
 8006e4e:	2a08      	cmp	r2, #8
 8006e50:	d834      	bhi.n	8006ebc <_strtod_l+0xac>
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d03e      	beq.n	8006ed4 <_strtod_l+0xc4>
 8006e56:	2300      	movs	r3, #0
 8006e58:	930a      	str	r3, [sp, #40]	; 0x28
 8006e5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e5c:	7833      	ldrb	r3, [r6, #0]
 8006e5e:	2b30      	cmp	r3, #48	; 0x30
 8006e60:	f040 80b0 	bne.w	8006fc4 <_strtod_l+0x1b4>
 8006e64:	7873      	ldrb	r3, [r6, #1]
 8006e66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e6a:	2b58      	cmp	r3, #88	; 0x58
 8006e6c:	d168      	bne.n	8006f40 <_strtod_l+0x130>
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	ab18      	add	r3, sp, #96	; 0x60
 8006e74:	9702      	str	r7, [sp, #8]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4a8d      	ldr	r2, [pc, #564]	; (80070b0 <_strtod_l+0x2a0>)
 8006e7a:	ab19      	add	r3, sp, #100	; 0x64
 8006e7c:	a917      	add	r1, sp, #92	; 0x5c
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f001 ffd2 	bl	8008e28 <__gethex>
 8006e84:	f010 0707 	ands.w	r7, r0, #7
 8006e88:	4605      	mov	r5, r0
 8006e8a:	d005      	beq.n	8006e98 <_strtod_l+0x88>
 8006e8c:	2f06      	cmp	r7, #6
 8006e8e:	d12c      	bne.n	8006eea <_strtod_l+0xda>
 8006e90:	3601      	adds	r6, #1
 8006e92:	2300      	movs	r3, #0
 8006e94:	9617      	str	r6, [sp, #92]	; 0x5c
 8006e96:	930a      	str	r3, [sp, #40]	; 0x28
 8006e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 8590 	bne.w	80079c0 <_strtod_l+0xbb0>
 8006ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea2:	b1eb      	cbz	r3, 8006ee0 <_strtod_l+0xd0>
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006eaa:	ec43 2b10 	vmov	d0, r2, r3
 8006eae:	b01d      	add	sp, #116	; 0x74
 8006eb0:	ecbd 8b02 	vpop	{d8}
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	2a20      	cmp	r2, #32
 8006eba:	d1cc      	bne.n	8006e56 <_strtod_l+0x46>
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ec0:	e7be      	b.n	8006e40 <_strtod_l+0x30>
 8006ec2:	2a2d      	cmp	r2, #45	; 0x2d
 8006ec4:	d1c7      	bne.n	8006e56 <_strtod_l+0x46>
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1c2      	bne.n	8006e5a <_strtod_l+0x4a>
 8006ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 856e 	bne.w	80079bc <_strtod_l+0xbac>
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	465b      	mov	r3, fp
 8006ee4:	e7e1      	b.n	8006eaa <_strtod_l+0x9a>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	e7ee      	b.n	8006ec8 <_strtod_l+0xb8>
 8006eea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006eec:	b13a      	cbz	r2, 8006efe <_strtod_l+0xee>
 8006eee:	2135      	movs	r1, #53	; 0x35
 8006ef0:	a81a      	add	r0, sp, #104	; 0x68
 8006ef2:	f002 ffc6 	bl	8009e82 <__copybits>
 8006ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f002 fb85 	bl	8009608 <_Bfree>
 8006efe:	3f01      	subs	r7, #1
 8006f00:	2f04      	cmp	r7, #4
 8006f02:	d806      	bhi.n	8006f12 <_strtod_l+0x102>
 8006f04:	e8df f007 	tbb	[pc, r7]
 8006f08:	1714030a 	.word	0x1714030a
 8006f0c:	0a          	.byte	0x0a
 8006f0d:	00          	.byte	0x00
 8006f0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f12:	0728      	lsls	r0, r5, #28
 8006f14:	d5c0      	bpl.n	8006e98 <_strtod_l+0x88>
 8006f16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f1a:	e7bd      	b.n	8006e98 <_strtod_l+0x88>
 8006f1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f2e:	e7f0      	b.n	8006f12 <_strtod_l+0x102>
 8006f30:	f8df b180 	ldr.w	fp, [pc, #384]	; 80070b4 <_strtod_l+0x2a4>
 8006f34:	e7ed      	b.n	8006f12 <_strtod_l+0x102>
 8006f36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f3a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f3e:	e7e8      	b.n	8006f12 <_strtod_l+0x102>
 8006f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b30      	cmp	r3, #48	; 0x30
 8006f4a:	d0f9      	beq.n	8006f40 <_strtod_l+0x130>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0a3      	beq.n	8006e98 <_strtod_l+0x88>
 8006f50:	2301      	movs	r3, #1
 8006f52:	f04f 0900 	mov.w	r9, #0
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f5a:	9308      	str	r3, [sp, #32]
 8006f5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f60:	464f      	mov	r7, r9
 8006f62:	220a      	movs	r2, #10
 8006f64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006f66:	7806      	ldrb	r6, [r0, #0]
 8006f68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f6c:	b2d9      	uxtb	r1, r3
 8006f6e:	2909      	cmp	r1, #9
 8006f70:	d92a      	bls.n	8006fc8 <_strtod_l+0x1b8>
 8006f72:	9905      	ldr	r1, [sp, #20]
 8006f74:	462a      	mov	r2, r5
 8006f76:	f7ff ff18 	bl	8006daa <strncmp>
 8006f7a:	b398      	cbz	r0, 8006fe4 <_strtod_l+0x1d4>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	4632      	mov	r2, r6
 8006f80:	463d      	mov	r5, r7
 8006f82:	9005      	str	r0, [sp, #20]
 8006f84:	4603      	mov	r3, r0
 8006f86:	2a65      	cmp	r2, #101	; 0x65
 8006f88:	d001      	beq.n	8006f8e <_strtod_l+0x17e>
 8006f8a:	2a45      	cmp	r2, #69	; 0x45
 8006f8c:	d118      	bne.n	8006fc0 <_strtod_l+0x1b0>
 8006f8e:	b91d      	cbnz	r5, 8006f98 <_strtod_l+0x188>
 8006f90:	9a04      	ldr	r2, [sp, #16]
 8006f92:	4302      	orrs	r2, r0
 8006f94:	d09e      	beq.n	8006ed4 <_strtod_l+0xc4>
 8006f96:	2500      	movs	r5, #0
 8006f98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006f9c:	f108 0201 	add.w	r2, r8, #1
 8006fa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006fa6:	2a2b      	cmp	r2, #43	; 0x2b
 8006fa8:	d075      	beq.n	8007096 <_strtod_l+0x286>
 8006faa:	2a2d      	cmp	r2, #45	; 0x2d
 8006fac:	d07b      	beq.n	80070a6 <_strtod_l+0x296>
 8006fae:	f04f 0c00 	mov.w	ip, #0
 8006fb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fb6:	2909      	cmp	r1, #9
 8006fb8:	f240 8082 	bls.w	80070c0 <_strtod_l+0x2b0>
 8006fbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	e09d      	b.n	8007100 <_strtod_l+0x2f0>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e7c4      	b.n	8006f52 <_strtod_l+0x142>
 8006fc8:	2f08      	cmp	r7, #8
 8006fca:	bfd8      	it	le
 8006fcc:	9907      	ldrle	r1, [sp, #28]
 8006fce:	f100 0001 	add.w	r0, r0, #1
 8006fd2:	bfda      	itte	le
 8006fd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fd8:	9307      	strle	r3, [sp, #28]
 8006fda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006fde:	3701      	adds	r7, #1
 8006fe0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006fe2:	e7bf      	b.n	8006f64 <_strtod_l+0x154>
 8006fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fe6:	195a      	adds	r2, r3, r5
 8006fe8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fea:	5d5a      	ldrb	r2, [r3, r5]
 8006fec:	2f00      	cmp	r7, #0
 8006fee:	d037      	beq.n	8007060 <_strtod_l+0x250>
 8006ff0:	9005      	str	r0, [sp, #20]
 8006ff2:	463d      	mov	r5, r7
 8006ff4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d912      	bls.n	8007022 <_strtod_l+0x212>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e7c2      	b.n	8006f86 <_strtod_l+0x176>
 8007000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	9217      	str	r2, [sp, #92]	; 0x5c
 8007006:	785a      	ldrb	r2, [r3, #1]
 8007008:	3001      	adds	r0, #1
 800700a:	2a30      	cmp	r2, #48	; 0x30
 800700c:	d0f8      	beq.n	8007000 <_strtod_l+0x1f0>
 800700e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007012:	2b08      	cmp	r3, #8
 8007014:	f200 84d9 	bhi.w	80079ca <_strtod_l+0xbba>
 8007018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800701a:	9005      	str	r0, [sp, #20]
 800701c:	2000      	movs	r0, #0
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	4605      	mov	r5, r0
 8007022:	3a30      	subs	r2, #48	; 0x30
 8007024:	f100 0301 	add.w	r3, r0, #1
 8007028:	d014      	beq.n	8007054 <_strtod_l+0x244>
 800702a:	9905      	ldr	r1, [sp, #20]
 800702c:	4419      	add	r1, r3
 800702e:	9105      	str	r1, [sp, #20]
 8007030:	462b      	mov	r3, r5
 8007032:	eb00 0e05 	add.w	lr, r0, r5
 8007036:	210a      	movs	r1, #10
 8007038:	4573      	cmp	r3, lr
 800703a:	d113      	bne.n	8007064 <_strtod_l+0x254>
 800703c:	182b      	adds	r3, r5, r0
 800703e:	2b08      	cmp	r3, #8
 8007040:	f105 0501 	add.w	r5, r5, #1
 8007044:	4405      	add	r5, r0
 8007046:	dc1c      	bgt.n	8007082 <_strtod_l+0x272>
 8007048:	9907      	ldr	r1, [sp, #28]
 800704a:	230a      	movs	r3, #10
 800704c:	fb03 2301 	mla	r3, r3, r1, r2
 8007050:	9307      	str	r3, [sp, #28]
 8007052:	2300      	movs	r3, #0
 8007054:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007056:	1c51      	adds	r1, r2, #1
 8007058:	9117      	str	r1, [sp, #92]	; 0x5c
 800705a:	7852      	ldrb	r2, [r2, #1]
 800705c:	4618      	mov	r0, r3
 800705e:	e7c9      	b.n	8006ff4 <_strtod_l+0x1e4>
 8007060:	4638      	mov	r0, r7
 8007062:	e7d2      	b.n	800700a <_strtod_l+0x1fa>
 8007064:	2b08      	cmp	r3, #8
 8007066:	dc04      	bgt.n	8007072 <_strtod_l+0x262>
 8007068:	9e07      	ldr	r6, [sp, #28]
 800706a:	434e      	muls	r6, r1
 800706c:	9607      	str	r6, [sp, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	e7e2      	b.n	8007038 <_strtod_l+0x228>
 8007072:	f103 0c01 	add.w	ip, r3, #1
 8007076:	f1bc 0f10 	cmp.w	ip, #16
 800707a:	bfd8      	it	le
 800707c:	fb01 f909 	mulle.w	r9, r1, r9
 8007080:	e7f5      	b.n	800706e <_strtod_l+0x25e>
 8007082:	2d10      	cmp	r5, #16
 8007084:	bfdc      	itt	le
 8007086:	230a      	movle	r3, #10
 8007088:	fb03 2909 	mlale	r9, r3, r9, r2
 800708c:	e7e1      	b.n	8007052 <_strtod_l+0x242>
 800708e:	2300      	movs	r3, #0
 8007090:	9305      	str	r3, [sp, #20]
 8007092:	2301      	movs	r3, #1
 8007094:	e77c      	b.n	8006f90 <_strtod_l+0x180>
 8007096:	f04f 0c00 	mov.w	ip, #0
 800709a:	f108 0202 	add.w	r2, r8, #2
 800709e:	9217      	str	r2, [sp, #92]	; 0x5c
 80070a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80070a4:	e785      	b.n	8006fb2 <_strtod_l+0x1a2>
 80070a6:	f04f 0c01 	mov.w	ip, #1
 80070aa:	e7f6      	b.n	800709a <_strtod_l+0x28a>
 80070ac:	0800b9a4 	.word	0x0800b9a4
 80070b0:	0800b6f8 	.word	0x0800b6f8
 80070b4:	7ff00000 	.word	0x7ff00000
 80070b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070ba:	1c51      	adds	r1, r2, #1
 80070bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80070be:	7852      	ldrb	r2, [r2, #1]
 80070c0:	2a30      	cmp	r2, #48	; 0x30
 80070c2:	d0f9      	beq.n	80070b8 <_strtod_l+0x2a8>
 80070c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070c8:	2908      	cmp	r1, #8
 80070ca:	f63f af79 	bhi.w	8006fc0 <_strtod_l+0x1b0>
 80070ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80070d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070d4:	9206      	str	r2, [sp, #24]
 80070d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070d8:	1c51      	adds	r1, r2, #1
 80070da:	9117      	str	r1, [sp, #92]	; 0x5c
 80070dc:	7852      	ldrb	r2, [r2, #1]
 80070de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80070e2:	2e09      	cmp	r6, #9
 80070e4:	d937      	bls.n	8007156 <_strtod_l+0x346>
 80070e6:	9e06      	ldr	r6, [sp, #24]
 80070e8:	1b89      	subs	r1, r1, r6
 80070ea:	2908      	cmp	r1, #8
 80070ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80070f0:	dc02      	bgt.n	80070f8 <_strtod_l+0x2e8>
 80070f2:	4576      	cmp	r6, lr
 80070f4:	bfa8      	it	ge
 80070f6:	4676      	movge	r6, lr
 80070f8:	f1bc 0f00 	cmp.w	ip, #0
 80070fc:	d000      	beq.n	8007100 <_strtod_l+0x2f0>
 80070fe:	4276      	negs	r6, r6
 8007100:	2d00      	cmp	r5, #0
 8007102:	d14d      	bne.n	80071a0 <_strtod_l+0x390>
 8007104:	9904      	ldr	r1, [sp, #16]
 8007106:	4301      	orrs	r1, r0
 8007108:	f47f aec6 	bne.w	8006e98 <_strtod_l+0x88>
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f aee1 	bne.w	8006ed4 <_strtod_l+0xc4>
 8007112:	2a69      	cmp	r2, #105	; 0x69
 8007114:	d027      	beq.n	8007166 <_strtod_l+0x356>
 8007116:	dc24      	bgt.n	8007162 <_strtod_l+0x352>
 8007118:	2a49      	cmp	r2, #73	; 0x49
 800711a:	d024      	beq.n	8007166 <_strtod_l+0x356>
 800711c:	2a4e      	cmp	r2, #78	; 0x4e
 800711e:	f47f aed9 	bne.w	8006ed4 <_strtod_l+0xc4>
 8007122:	499f      	ldr	r1, [pc, #636]	; (80073a0 <_strtod_l+0x590>)
 8007124:	a817      	add	r0, sp, #92	; 0x5c
 8007126:	f002 f8d7 	bl	80092d8 <__match>
 800712a:	2800      	cmp	r0, #0
 800712c:	f43f aed2 	beq.w	8006ed4 <_strtod_l+0xc4>
 8007130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b28      	cmp	r3, #40	; 0x28
 8007136:	d12d      	bne.n	8007194 <_strtod_l+0x384>
 8007138:	499a      	ldr	r1, [pc, #616]	; (80073a4 <_strtod_l+0x594>)
 800713a:	aa1a      	add	r2, sp, #104	; 0x68
 800713c:	a817      	add	r0, sp, #92	; 0x5c
 800713e:	f002 f8df 	bl	8009300 <__hexnan>
 8007142:	2805      	cmp	r0, #5
 8007144:	d126      	bne.n	8007194 <_strtod_l+0x384>
 8007146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007148:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800714c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007150:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007154:	e6a0      	b.n	8006e98 <_strtod_l+0x88>
 8007156:	210a      	movs	r1, #10
 8007158:	fb01 2e0e 	mla	lr, r1, lr, r2
 800715c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007160:	e7b9      	b.n	80070d6 <_strtod_l+0x2c6>
 8007162:	2a6e      	cmp	r2, #110	; 0x6e
 8007164:	e7db      	b.n	800711e <_strtod_l+0x30e>
 8007166:	4990      	ldr	r1, [pc, #576]	; (80073a8 <_strtod_l+0x598>)
 8007168:	a817      	add	r0, sp, #92	; 0x5c
 800716a:	f002 f8b5 	bl	80092d8 <__match>
 800716e:	2800      	cmp	r0, #0
 8007170:	f43f aeb0 	beq.w	8006ed4 <_strtod_l+0xc4>
 8007174:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007176:	498d      	ldr	r1, [pc, #564]	; (80073ac <_strtod_l+0x59c>)
 8007178:	3b01      	subs	r3, #1
 800717a:	a817      	add	r0, sp, #92	; 0x5c
 800717c:	9317      	str	r3, [sp, #92]	; 0x5c
 800717e:	f002 f8ab 	bl	80092d8 <__match>
 8007182:	b910      	cbnz	r0, 800718a <_strtod_l+0x37a>
 8007184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007186:	3301      	adds	r3, #1
 8007188:	9317      	str	r3, [sp, #92]	; 0x5c
 800718a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80073bc <_strtod_l+0x5ac>
 800718e:	f04f 0a00 	mov.w	sl, #0
 8007192:	e681      	b.n	8006e98 <_strtod_l+0x88>
 8007194:	4886      	ldr	r0, [pc, #536]	; (80073b0 <_strtod_l+0x5a0>)
 8007196:	f003 fde3 	bl	800ad60 <nan>
 800719a:	ec5b ab10 	vmov	sl, fp, d0
 800719e:	e67b      	b.n	8006e98 <_strtod_l+0x88>
 80071a0:	9b05      	ldr	r3, [sp, #20]
 80071a2:	9807      	ldr	r0, [sp, #28]
 80071a4:	1af3      	subs	r3, r6, r3
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	bf08      	it	eq
 80071aa:	462f      	moveq	r7, r5
 80071ac:	2d10      	cmp	r5, #16
 80071ae:	9306      	str	r3, [sp, #24]
 80071b0:	46a8      	mov	r8, r5
 80071b2:	bfa8      	it	ge
 80071b4:	f04f 0810 	movge.w	r8, #16
 80071b8:	f7f9 f9a4 	bl	8000504 <__aeabi_ui2d>
 80071bc:	2d09      	cmp	r5, #9
 80071be:	4682      	mov	sl, r0
 80071c0:	468b      	mov	fp, r1
 80071c2:	dd13      	ble.n	80071ec <_strtod_l+0x3dc>
 80071c4:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <_strtod_l+0x5a4>)
 80071c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071ce:	f7f9 fa13 	bl	80005f8 <__aeabi_dmul>
 80071d2:	4682      	mov	sl, r0
 80071d4:	4648      	mov	r0, r9
 80071d6:	468b      	mov	fp, r1
 80071d8:	f7f9 f994 	bl	8000504 <__aeabi_ui2d>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4650      	mov	r0, sl
 80071e2:	4659      	mov	r1, fp
 80071e4:	f7f9 f852 	bl	800028c <__adddf3>
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	2d0f      	cmp	r5, #15
 80071ee:	dc38      	bgt.n	8007262 <_strtod_l+0x452>
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f43f ae50 	beq.w	8006e98 <_strtod_l+0x88>
 80071f8:	dd24      	ble.n	8007244 <_strtod_l+0x434>
 80071fa:	2b16      	cmp	r3, #22
 80071fc:	dc0b      	bgt.n	8007216 <_strtod_l+0x406>
 80071fe:	496d      	ldr	r1, [pc, #436]	; (80073b4 <_strtod_l+0x5a4>)
 8007200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007208:	4652      	mov	r2, sl
 800720a:	465b      	mov	r3, fp
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	4682      	mov	sl, r0
 8007212:	468b      	mov	fp, r1
 8007214:	e640      	b.n	8006e98 <_strtod_l+0x88>
 8007216:	9a06      	ldr	r2, [sp, #24]
 8007218:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800721c:	4293      	cmp	r3, r2
 800721e:	db20      	blt.n	8007262 <_strtod_l+0x452>
 8007220:	4c64      	ldr	r4, [pc, #400]	; (80073b4 <_strtod_l+0x5a4>)
 8007222:	f1c5 050f 	rsb	r5, r5, #15
 8007226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800722a:	4652      	mov	r2, sl
 800722c:	465b      	mov	r3, fp
 800722e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007232:	f7f9 f9e1 	bl	80005f8 <__aeabi_dmul>
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	1b5d      	subs	r5, r3, r5
 800723a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800723e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007242:	e7e3      	b.n	800720c <_strtod_l+0x3fc>
 8007244:	9b06      	ldr	r3, [sp, #24]
 8007246:	3316      	adds	r3, #22
 8007248:	db0b      	blt.n	8007262 <_strtod_l+0x452>
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	1b9e      	subs	r6, r3, r6
 800724e:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <_strtod_l+0x5a4>)
 8007250:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007254:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007258:	4650      	mov	r0, sl
 800725a:	4659      	mov	r1, fp
 800725c:	f7f9 faf6 	bl	800084c <__aeabi_ddiv>
 8007260:	e7d6      	b.n	8007210 <_strtod_l+0x400>
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	eba5 0808 	sub.w	r8, r5, r8
 8007268:	4498      	add	r8, r3
 800726a:	f1b8 0f00 	cmp.w	r8, #0
 800726e:	dd74      	ble.n	800735a <_strtod_l+0x54a>
 8007270:	f018 030f 	ands.w	r3, r8, #15
 8007274:	d00a      	beq.n	800728c <_strtod_l+0x47c>
 8007276:	494f      	ldr	r1, [pc, #316]	; (80073b4 <_strtod_l+0x5a4>)
 8007278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800727c:	4652      	mov	r2, sl
 800727e:	465b      	mov	r3, fp
 8007280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007284:	f7f9 f9b8 	bl	80005f8 <__aeabi_dmul>
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	f038 080f 	bics.w	r8, r8, #15
 8007290:	d04f      	beq.n	8007332 <_strtod_l+0x522>
 8007292:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007296:	dd22      	ble.n	80072de <_strtod_l+0x4ce>
 8007298:	2500      	movs	r5, #0
 800729a:	462e      	mov	r6, r5
 800729c:	9507      	str	r5, [sp, #28]
 800729e:	9505      	str	r5, [sp, #20]
 80072a0:	2322      	movs	r3, #34	; 0x22
 80072a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80073bc <_strtod_l+0x5ac>
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	f04f 0a00 	mov.w	sl, #0
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f43f adf2 	beq.w	8006e98 <_strtod_l+0x88>
 80072b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072b6:	4620      	mov	r0, r4
 80072b8:	f002 f9a6 	bl	8009608 <_Bfree>
 80072bc:	9905      	ldr	r1, [sp, #20]
 80072be:	4620      	mov	r0, r4
 80072c0:	f002 f9a2 	bl	8009608 <_Bfree>
 80072c4:	4631      	mov	r1, r6
 80072c6:	4620      	mov	r0, r4
 80072c8:	f002 f99e 	bl	8009608 <_Bfree>
 80072cc:	9907      	ldr	r1, [sp, #28]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f002 f99a 	bl	8009608 <_Bfree>
 80072d4:	4629      	mov	r1, r5
 80072d6:	4620      	mov	r0, r4
 80072d8:	f002 f996 	bl	8009608 <_Bfree>
 80072dc:	e5dc      	b.n	8006e98 <_strtod_l+0x88>
 80072de:	4b36      	ldr	r3, [pc, #216]	; (80073b8 <_strtod_l+0x5a8>)
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	2300      	movs	r3, #0
 80072e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80072e8:	4650      	mov	r0, sl
 80072ea:	4659      	mov	r1, fp
 80072ec:	4699      	mov	r9, r3
 80072ee:	f1b8 0f01 	cmp.w	r8, #1
 80072f2:	dc21      	bgt.n	8007338 <_strtod_l+0x528>
 80072f4:	b10b      	cbz	r3, 80072fa <_strtod_l+0x4ea>
 80072f6:	4682      	mov	sl, r0
 80072f8:	468b      	mov	fp, r1
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <_strtod_l+0x5a8>)
 80072fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007300:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007304:	4652      	mov	r2, sl
 8007306:	465b      	mov	r3, fp
 8007308:	e9d9 0100 	ldrd	r0, r1, [r9]
 800730c:	f7f9 f974 	bl	80005f8 <__aeabi_dmul>
 8007310:	4b2a      	ldr	r3, [pc, #168]	; (80073bc <_strtod_l+0x5ac>)
 8007312:	460a      	mov	r2, r1
 8007314:	400b      	ands	r3, r1
 8007316:	492a      	ldr	r1, [pc, #168]	; (80073c0 <_strtod_l+0x5b0>)
 8007318:	428b      	cmp	r3, r1
 800731a:	4682      	mov	sl, r0
 800731c:	d8bc      	bhi.n	8007298 <_strtod_l+0x488>
 800731e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007322:	428b      	cmp	r3, r1
 8007324:	bf86      	itte	hi
 8007326:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80073c4 <_strtod_l+0x5b4>
 800732a:	f04f 3aff 	movhi.w	sl, #4294967295
 800732e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007332:	2300      	movs	r3, #0
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	e084      	b.n	8007442 <_strtod_l+0x632>
 8007338:	f018 0f01 	tst.w	r8, #1
 800733c:	d005      	beq.n	800734a <_strtod_l+0x53a>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f9 f958 	bl	80005f8 <__aeabi_dmul>
 8007348:	2301      	movs	r3, #1
 800734a:	9a04      	ldr	r2, [sp, #16]
 800734c:	3208      	adds	r2, #8
 800734e:	f109 0901 	add.w	r9, r9, #1
 8007352:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007356:	9204      	str	r2, [sp, #16]
 8007358:	e7c9      	b.n	80072ee <_strtod_l+0x4de>
 800735a:	d0ea      	beq.n	8007332 <_strtod_l+0x522>
 800735c:	f1c8 0800 	rsb	r8, r8, #0
 8007360:	f018 020f 	ands.w	r2, r8, #15
 8007364:	d00a      	beq.n	800737c <_strtod_l+0x56c>
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <_strtod_l+0x5a4>)
 8007368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800736c:	4650      	mov	r0, sl
 800736e:	4659      	mov	r1, fp
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f7f9 fa6a 	bl	800084c <__aeabi_ddiv>
 8007378:	4682      	mov	sl, r0
 800737a:	468b      	mov	fp, r1
 800737c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007380:	d0d7      	beq.n	8007332 <_strtod_l+0x522>
 8007382:	f1b8 0f1f 	cmp.w	r8, #31
 8007386:	dd1f      	ble.n	80073c8 <_strtod_l+0x5b8>
 8007388:	2500      	movs	r5, #0
 800738a:	462e      	mov	r6, r5
 800738c:	9507      	str	r5, [sp, #28]
 800738e:	9505      	str	r5, [sp, #20]
 8007390:	2322      	movs	r3, #34	; 0x22
 8007392:	f04f 0a00 	mov.w	sl, #0
 8007396:	f04f 0b00 	mov.w	fp, #0
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	e786      	b.n	80072ac <_strtod_l+0x49c>
 800739e:	bf00      	nop
 80073a0:	0800b6cd 	.word	0x0800b6cd
 80073a4:	0800b70c 	.word	0x0800b70c
 80073a8:	0800b6c5 	.word	0x0800b6c5
 80073ac:	0800b84c 	.word	0x0800b84c
 80073b0:	0800b47f 	.word	0x0800b47f
 80073b4:	0800ba40 	.word	0x0800ba40
 80073b8:	0800ba18 	.word	0x0800ba18
 80073bc:	7ff00000 	.word	0x7ff00000
 80073c0:	7ca00000 	.word	0x7ca00000
 80073c4:	7fefffff 	.word	0x7fefffff
 80073c8:	f018 0310 	ands.w	r3, r8, #16
 80073cc:	bf18      	it	ne
 80073ce:	236a      	movne	r3, #106	; 0x6a
 80073d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007780 <_strtod_l+0x970>
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	4650      	mov	r0, sl
 80073d8:	4659      	mov	r1, fp
 80073da:	2300      	movs	r3, #0
 80073dc:	f018 0f01 	tst.w	r8, #1
 80073e0:	d004      	beq.n	80073ec <_strtod_l+0x5dc>
 80073e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	2301      	movs	r3, #1
 80073ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80073f0:	f109 0908 	add.w	r9, r9, #8
 80073f4:	d1f2      	bne.n	80073dc <_strtod_l+0x5cc>
 80073f6:	b10b      	cbz	r3, 80073fc <_strtod_l+0x5ec>
 80073f8:	4682      	mov	sl, r0
 80073fa:	468b      	mov	fp, r1
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	b1c3      	cbz	r3, 8007432 <_strtod_l+0x622>
 8007400:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007404:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007408:	2b00      	cmp	r3, #0
 800740a:	4659      	mov	r1, fp
 800740c:	dd11      	ble.n	8007432 <_strtod_l+0x622>
 800740e:	2b1f      	cmp	r3, #31
 8007410:	f340 8124 	ble.w	800765c <_strtod_l+0x84c>
 8007414:	2b34      	cmp	r3, #52	; 0x34
 8007416:	bfde      	ittt	le
 8007418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800741c:	f04f 33ff 	movle.w	r3, #4294967295
 8007420:	fa03 f202 	lslle.w	r2, r3, r2
 8007424:	f04f 0a00 	mov.w	sl, #0
 8007428:	bfcc      	ite	gt
 800742a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800742e:	ea02 0b01 	andle.w	fp, r2, r1
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4650      	mov	r0, sl
 8007438:	4659      	mov	r1, fp
 800743a:	f7f9 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800743e:	2800      	cmp	r0, #0
 8007440:	d1a2      	bne.n	8007388 <_strtod_l+0x578>
 8007442:	9b07      	ldr	r3, [sp, #28]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	9908      	ldr	r1, [sp, #32]
 8007448:	462b      	mov	r3, r5
 800744a:	463a      	mov	r2, r7
 800744c:	4620      	mov	r0, r4
 800744e:	f002 f943 	bl	80096d8 <__s2b>
 8007452:	9007      	str	r0, [sp, #28]
 8007454:	2800      	cmp	r0, #0
 8007456:	f43f af1f 	beq.w	8007298 <_strtod_l+0x488>
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	1b9e      	subs	r6, r3, r6
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	bfb4      	ite	lt
 8007464:	4633      	movlt	r3, r6
 8007466:	2300      	movge	r3, #0
 8007468:	930c      	str	r3, [sp, #48]	; 0x30
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	2500      	movs	r5, #0
 800746e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007472:	9312      	str	r3, [sp, #72]	; 0x48
 8007474:	462e      	mov	r6, r5
 8007476:	9b07      	ldr	r3, [sp, #28]
 8007478:	4620      	mov	r0, r4
 800747a:	6859      	ldr	r1, [r3, #4]
 800747c:	f002 f884 	bl	8009588 <_Balloc>
 8007480:	9005      	str	r0, [sp, #20]
 8007482:	2800      	cmp	r0, #0
 8007484:	f43f af0c 	beq.w	80072a0 <_strtod_l+0x490>
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	3202      	adds	r2, #2
 800748e:	f103 010c 	add.w	r1, r3, #12
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	300c      	adds	r0, #12
 8007496:	f002 f869 	bl	800956c <memcpy>
 800749a:	ec4b ab10 	vmov	d0, sl, fp
 800749e:	aa1a      	add	r2, sp, #104	; 0x68
 80074a0:	a919      	add	r1, sp, #100	; 0x64
 80074a2:	4620      	mov	r0, r4
 80074a4:	f002 fc5e 	bl	8009d64 <__d2b>
 80074a8:	ec4b ab18 	vmov	d8, sl, fp
 80074ac:	9018      	str	r0, [sp, #96]	; 0x60
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f43f aef6 	beq.w	80072a0 <_strtod_l+0x490>
 80074b4:	2101      	movs	r1, #1
 80074b6:	4620      	mov	r0, r4
 80074b8:	f002 f9a8 	bl	800980c <__i2b>
 80074bc:	4606      	mov	r6, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f aeee 	beq.w	80072a0 <_strtod_l+0x490>
 80074c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074c6:	9904      	ldr	r1, [sp, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfab      	itete	ge
 80074cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80074ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80074d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80074d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80074d6:	bfac      	ite	ge
 80074d8:	eb03 0902 	addge.w	r9, r3, r2
 80074dc:	1ad7      	sublt	r7, r2, r3
 80074de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074e0:	eba3 0801 	sub.w	r8, r3, r1
 80074e4:	4490      	add	r8, r2
 80074e6:	4ba1      	ldr	r3, [pc, #644]	; (800776c <_strtod_l+0x95c>)
 80074e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80074ec:	4598      	cmp	r8, r3
 80074ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074f2:	f280 80c7 	bge.w	8007684 <_strtod_l+0x874>
 80074f6:	eba3 0308 	sub.w	r3, r3, r8
 80074fa:	2b1f      	cmp	r3, #31
 80074fc:	eba2 0203 	sub.w	r2, r2, r3
 8007500:	f04f 0101 	mov.w	r1, #1
 8007504:	f300 80b1 	bgt.w	800766a <_strtod_l+0x85a>
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	930d      	str	r3, [sp, #52]	; 0x34
 800750e:	2300      	movs	r3, #0
 8007510:	9308      	str	r3, [sp, #32]
 8007512:	eb09 0802 	add.w	r8, r9, r2
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	45c1      	cmp	r9, r8
 800751a:	4417      	add	r7, r2
 800751c:	441f      	add	r7, r3
 800751e:	464b      	mov	r3, r9
 8007520:	bfa8      	it	ge
 8007522:	4643      	movge	r3, r8
 8007524:	42bb      	cmp	r3, r7
 8007526:	bfa8      	it	ge
 8007528:	463b      	movge	r3, r7
 800752a:	2b00      	cmp	r3, #0
 800752c:	bfc2      	ittt	gt
 800752e:	eba8 0803 	subgt.w	r8, r8, r3
 8007532:	1aff      	subgt	r7, r7, r3
 8007534:	eba9 0903 	subgt.w	r9, r9, r3
 8007538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800753a:	2b00      	cmp	r3, #0
 800753c:	dd17      	ble.n	800756e <_strtod_l+0x75e>
 800753e:	4631      	mov	r1, r6
 8007540:	461a      	mov	r2, r3
 8007542:	4620      	mov	r0, r4
 8007544:	f002 fa22 	bl	800998c <__pow5mult>
 8007548:	4606      	mov	r6, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	f43f aea8 	beq.w	80072a0 <_strtod_l+0x490>
 8007550:	4601      	mov	r1, r0
 8007552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007554:	4620      	mov	r0, r4
 8007556:	f002 f96f 	bl	8009838 <__multiply>
 800755a:	900b      	str	r0, [sp, #44]	; 0x2c
 800755c:	2800      	cmp	r0, #0
 800755e:	f43f ae9f 	beq.w	80072a0 <_strtod_l+0x490>
 8007562:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007564:	4620      	mov	r0, r4
 8007566:	f002 f84f 	bl	8009608 <_Bfree>
 800756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756c:	9318      	str	r3, [sp, #96]	; 0x60
 800756e:	f1b8 0f00 	cmp.w	r8, #0
 8007572:	f300 808c 	bgt.w	800768e <_strtod_l+0x87e>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	dd08      	ble.n	800758e <_strtod_l+0x77e>
 800757c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800757e:	9905      	ldr	r1, [sp, #20]
 8007580:	4620      	mov	r0, r4
 8007582:	f002 fa03 	bl	800998c <__pow5mult>
 8007586:	9005      	str	r0, [sp, #20]
 8007588:	2800      	cmp	r0, #0
 800758a:	f43f ae89 	beq.w	80072a0 <_strtod_l+0x490>
 800758e:	2f00      	cmp	r7, #0
 8007590:	dd08      	ble.n	80075a4 <_strtod_l+0x794>
 8007592:	9905      	ldr	r1, [sp, #20]
 8007594:	463a      	mov	r2, r7
 8007596:	4620      	mov	r0, r4
 8007598:	f002 fa52 	bl	8009a40 <__lshift>
 800759c:	9005      	str	r0, [sp, #20]
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f ae7e 	beq.w	80072a0 <_strtod_l+0x490>
 80075a4:	f1b9 0f00 	cmp.w	r9, #0
 80075a8:	dd08      	ble.n	80075bc <_strtod_l+0x7ac>
 80075aa:	4631      	mov	r1, r6
 80075ac:	464a      	mov	r2, r9
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 fa46 	bl	8009a40 <__lshift>
 80075b4:	4606      	mov	r6, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f ae72 	beq.w	80072a0 <_strtod_l+0x490>
 80075bc:	9a05      	ldr	r2, [sp, #20]
 80075be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075c0:	4620      	mov	r0, r4
 80075c2:	f002 fac9 	bl	8009b58 <__mdiff>
 80075c6:	4605      	mov	r5, r0
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f43f ae69 	beq.w	80072a0 <_strtod_l+0x490>
 80075ce:	68c3      	ldr	r3, [r0, #12]
 80075d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d2:	2300      	movs	r3, #0
 80075d4:	60c3      	str	r3, [r0, #12]
 80075d6:	4631      	mov	r1, r6
 80075d8:	f002 faa2 	bl	8009b20 <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	da60      	bge.n	80076a2 <_strtod_l+0x892>
 80075e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e2:	ea53 030a 	orrs.w	r3, r3, sl
 80075e6:	f040 8082 	bne.w	80076ee <_strtod_l+0x8de>
 80075ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d17d      	bne.n	80076ee <_strtod_l+0x8de>
 80075f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075f6:	0d1b      	lsrs	r3, r3, #20
 80075f8:	051b      	lsls	r3, r3, #20
 80075fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075fe:	d976      	bls.n	80076ee <_strtod_l+0x8de>
 8007600:	696b      	ldr	r3, [r5, #20]
 8007602:	b913      	cbnz	r3, 800760a <_strtod_l+0x7fa>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	2b01      	cmp	r3, #1
 8007608:	dd71      	ble.n	80076ee <_strtod_l+0x8de>
 800760a:	4629      	mov	r1, r5
 800760c:	2201      	movs	r2, #1
 800760e:	4620      	mov	r0, r4
 8007610:	f002 fa16 	bl	8009a40 <__lshift>
 8007614:	4631      	mov	r1, r6
 8007616:	4605      	mov	r5, r0
 8007618:	f002 fa82 	bl	8009b20 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	dd66      	ble.n	80076ee <_strtod_l+0x8de>
 8007620:	9904      	ldr	r1, [sp, #16]
 8007622:	4a53      	ldr	r2, [pc, #332]	; (8007770 <_strtod_l+0x960>)
 8007624:	465b      	mov	r3, fp
 8007626:	2900      	cmp	r1, #0
 8007628:	f000 8081 	beq.w	800772e <_strtod_l+0x91e>
 800762c:	ea02 010b 	and.w	r1, r2, fp
 8007630:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007634:	dc7b      	bgt.n	800772e <_strtod_l+0x91e>
 8007636:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800763a:	f77f aea9 	ble.w	8007390 <_strtod_l+0x580>
 800763e:	4b4d      	ldr	r3, [pc, #308]	; (8007774 <_strtod_l+0x964>)
 8007640:	4650      	mov	r0, sl
 8007642:	4659      	mov	r1, fp
 8007644:	2200      	movs	r2, #0
 8007646:	f7f8 ffd7 	bl	80005f8 <__aeabi_dmul>
 800764a:	460b      	mov	r3, r1
 800764c:	4303      	orrs	r3, r0
 800764e:	bf08      	it	eq
 8007650:	2322      	moveq	r3, #34	; 0x22
 8007652:	4682      	mov	sl, r0
 8007654:	468b      	mov	fp, r1
 8007656:	bf08      	it	eq
 8007658:	6023      	streq	r3, [r4, #0]
 800765a:	e62b      	b.n	80072b4 <_strtod_l+0x4a4>
 800765c:	f04f 32ff 	mov.w	r2, #4294967295
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	ea03 0a0a 	and.w	sl, r3, sl
 8007668:	e6e3      	b.n	8007432 <_strtod_l+0x622>
 800766a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800766e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007672:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007676:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800767a:	fa01 f308 	lsl.w	r3, r1, r8
 800767e:	9308      	str	r3, [sp, #32]
 8007680:	910d      	str	r1, [sp, #52]	; 0x34
 8007682:	e746      	b.n	8007512 <_strtod_l+0x702>
 8007684:	2300      	movs	r3, #0
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	2301      	movs	r3, #1
 800768a:	930d      	str	r3, [sp, #52]	; 0x34
 800768c:	e741      	b.n	8007512 <_strtod_l+0x702>
 800768e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007690:	4642      	mov	r2, r8
 8007692:	4620      	mov	r0, r4
 8007694:	f002 f9d4 	bl	8009a40 <__lshift>
 8007698:	9018      	str	r0, [sp, #96]	; 0x60
 800769a:	2800      	cmp	r0, #0
 800769c:	f47f af6b 	bne.w	8007576 <_strtod_l+0x766>
 80076a0:	e5fe      	b.n	80072a0 <_strtod_l+0x490>
 80076a2:	465f      	mov	r7, fp
 80076a4:	d16e      	bne.n	8007784 <_strtod_l+0x974>
 80076a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076ac:	b342      	cbz	r2, 8007700 <_strtod_l+0x8f0>
 80076ae:	4a32      	ldr	r2, [pc, #200]	; (8007778 <_strtod_l+0x968>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d128      	bne.n	8007706 <_strtod_l+0x8f6>
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	4651      	mov	r1, sl
 80076b8:	b1eb      	cbz	r3, 80076f6 <_strtod_l+0x8e6>
 80076ba:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <_strtod_l+0x960>)
 80076bc:	403b      	ands	r3, r7
 80076be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	d819      	bhi.n	80076fc <_strtod_l+0x8ec>
 80076c8:	0d1b      	lsrs	r3, r3, #20
 80076ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d117      	bne.n	8007706 <_strtod_l+0x8f6>
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <_strtod_l+0x96c>)
 80076d8:	429f      	cmp	r7, r3
 80076da:	d102      	bne.n	80076e2 <_strtod_l+0x8d2>
 80076dc:	3101      	adds	r1, #1
 80076de:	f43f addf 	beq.w	80072a0 <_strtod_l+0x490>
 80076e2:	4b23      	ldr	r3, [pc, #140]	; (8007770 <_strtod_l+0x960>)
 80076e4:	403b      	ands	r3, r7
 80076e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1a4      	bne.n	800763e <_strtod_l+0x82e>
 80076f4:	e5de      	b.n	80072b4 <_strtod_l+0x4a4>
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e7ea      	b.n	80076d2 <_strtod_l+0x8c2>
 80076fc:	4613      	mov	r3, r2
 80076fe:	e7e8      	b.n	80076d2 <_strtod_l+0x8c2>
 8007700:	ea53 030a 	orrs.w	r3, r3, sl
 8007704:	d08c      	beq.n	8007620 <_strtod_l+0x810>
 8007706:	9b08      	ldr	r3, [sp, #32]
 8007708:	b1db      	cbz	r3, 8007742 <_strtod_l+0x932>
 800770a:	423b      	tst	r3, r7
 800770c:	d0ef      	beq.n	80076ee <_strtod_l+0x8de>
 800770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007710:	9a04      	ldr	r2, [sp, #16]
 8007712:	4650      	mov	r0, sl
 8007714:	4659      	mov	r1, fp
 8007716:	b1c3      	cbz	r3, 800774a <_strtod_l+0x93a>
 8007718:	f7ff fb5b 	bl	8006dd2 <sulp>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	ec51 0b18 	vmov	r0, r1, d8
 8007724:	f7f8 fdb2 	bl	800028c <__adddf3>
 8007728:	4682      	mov	sl, r0
 800772a:	468b      	mov	fp, r1
 800772c:	e7df      	b.n	80076ee <_strtod_l+0x8de>
 800772e:	4013      	ands	r3, r2
 8007730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007734:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007738:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800773c:	f04f 3aff 	mov.w	sl, #4294967295
 8007740:	e7d5      	b.n	80076ee <_strtod_l+0x8de>
 8007742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007744:	ea13 0f0a 	tst.w	r3, sl
 8007748:	e7e0      	b.n	800770c <_strtod_l+0x8fc>
 800774a:	f7ff fb42 	bl	8006dd2 <sulp>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	ec51 0b18 	vmov	r0, r1, d8
 8007756:	f7f8 fd97 	bl	8000288 <__aeabi_dsub>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4682      	mov	sl, r0
 8007760:	468b      	mov	fp, r1
 8007762:	f7f9 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0c1      	beq.n	80076ee <_strtod_l+0x8de>
 800776a:	e611      	b.n	8007390 <_strtod_l+0x580>
 800776c:	fffffc02 	.word	0xfffffc02
 8007770:	7ff00000 	.word	0x7ff00000
 8007774:	39500000 	.word	0x39500000
 8007778:	000fffff 	.word	0x000fffff
 800777c:	7fefffff 	.word	0x7fefffff
 8007780:	0800b720 	.word	0x0800b720
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	f002 fb48 	bl	8009e1c <__ratio>
 800778c:	ec59 8b10 	vmov	r8, r9, d0
 8007790:	ee10 0a10 	vmov	r0, s0
 8007794:	2200      	movs	r2, #0
 8007796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800779a:	4649      	mov	r1, r9
 800779c:	f7f9 f9a8 	bl	8000af0 <__aeabi_dcmple>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d07a      	beq.n	800789a <_strtod_l+0xa8a>
 80077a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d04a      	beq.n	8007840 <_strtod_l+0xa30>
 80077aa:	4b95      	ldr	r3, [pc, #596]	; (8007a00 <_strtod_l+0xbf0>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a00 <_strtod_l+0xbf0>
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	4b92      	ldr	r3, [pc, #584]	; (8007a04 <_strtod_l+0xbf4>)
 80077bc:	403b      	ands	r3, r7
 80077be:	930d      	str	r3, [sp, #52]	; 0x34
 80077c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c2:	4b91      	ldr	r3, [pc, #580]	; (8007a08 <_strtod_l+0xbf8>)
 80077c4:	429a      	cmp	r2, r3
 80077c6:	f040 80b0 	bne.w	800792a <_strtod_l+0xb1a>
 80077ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80077d2:	ec4b ab10 	vmov	d0, sl, fp
 80077d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077da:	f002 fa47 	bl	8009c6c <__ulp>
 80077de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077e2:	ec53 2b10 	vmov	r2, r3, d0
 80077e6:	f7f8 ff07 	bl	80005f8 <__aeabi_dmul>
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	f7f8 fd4d 	bl	800028c <__adddf3>
 80077f2:	460b      	mov	r3, r1
 80077f4:	4983      	ldr	r1, [pc, #524]	; (8007a04 <_strtod_l+0xbf4>)
 80077f6:	4a85      	ldr	r2, [pc, #532]	; (8007a0c <_strtod_l+0xbfc>)
 80077f8:	4019      	ands	r1, r3
 80077fa:	4291      	cmp	r1, r2
 80077fc:	4682      	mov	sl, r0
 80077fe:	d960      	bls.n	80078c2 <_strtod_l+0xab2>
 8007800:	ee18 3a90 	vmov	r3, s17
 8007804:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007808:	4293      	cmp	r3, r2
 800780a:	d104      	bne.n	8007816 <_strtod_l+0xa06>
 800780c:	ee18 3a10 	vmov	r3, s16
 8007810:	3301      	adds	r3, #1
 8007812:	f43f ad45 	beq.w	80072a0 <_strtod_l+0x490>
 8007816:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a18 <_strtod_l+0xc08>
 800781a:	f04f 3aff 	mov.w	sl, #4294967295
 800781e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007820:	4620      	mov	r0, r4
 8007822:	f001 fef1 	bl	8009608 <_Bfree>
 8007826:	9905      	ldr	r1, [sp, #20]
 8007828:	4620      	mov	r0, r4
 800782a:	f001 feed 	bl	8009608 <_Bfree>
 800782e:	4631      	mov	r1, r6
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fee9 	bl	8009608 <_Bfree>
 8007836:	4629      	mov	r1, r5
 8007838:	4620      	mov	r0, r4
 800783a:	f001 fee5 	bl	8009608 <_Bfree>
 800783e:	e61a      	b.n	8007476 <_strtod_l+0x666>
 8007840:	f1ba 0f00 	cmp.w	sl, #0
 8007844:	d11b      	bne.n	800787e <_strtod_l+0xa6e>
 8007846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800784a:	b9f3      	cbnz	r3, 800788a <_strtod_l+0xa7a>
 800784c:	4b6c      	ldr	r3, [pc, #432]	; (8007a00 <_strtod_l+0xbf0>)
 800784e:	2200      	movs	r2, #0
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	f7f9 f942 	bl	8000adc <__aeabi_dcmplt>
 8007858:	b9d0      	cbnz	r0, 8007890 <_strtod_l+0xa80>
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	4b6c      	ldr	r3, [pc, #432]	; (8007a10 <_strtod_l+0xc00>)
 8007860:	2200      	movs	r2, #0
 8007862:	f7f8 fec9 	bl	80005f8 <__aeabi_dmul>
 8007866:	4680      	mov	r8, r0
 8007868:	4689      	mov	r9, r1
 800786a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800786e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007872:	9315      	str	r3, [sp, #84]	; 0x54
 8007874:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007878:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800787c:	e79d      	b.n	80077ba <_strtod_l+0x9aa>
 800787e:	f1ba 0f01 	cmp.w	sl, #1
 8007882:	d102      	bne.n	800788a <_strtod_l+0xa7a>
 8007884:	2f00      	cmp	r7, #0
 8007886:	f43f ad83 	beq.w	8007390 <_strtod_l+0x580>
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <_strtod_l+0xc04>)
 800788c:	2200      	movs	r2, #0
 800788e:	e78e      	b.n	80077ae <_strtod_l+0x99e>
 8007890:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a10 <_strtod_l+0xc00>
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	e7e7      	b.n	800786a <_strtod_l+0xa5a>
 800789a:	4b5d      	ldr	r3, [pc, #372]	; (8007a10 <_strtod_l+0xc00>)
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	2200      	movs	r2, #0
 80078a2:	f7f8 fea9 	bl	80005f8 <__aeabi_dmul>
 80078a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	b933      	cbnz	r3, 80078bc <_strtod_l+0xaac>
 80078ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078b2:	900e      	str	r0, [sp, #56]	; 0x38
 80078b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80078ba:	e7dd      	b.n	8007878 <_strtod_l+0xa68>
 80078bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80078c0:	e7f9      	b.n	80078b6 <_strtod_l+0xaa6>
 80078c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1a8      	bne.n	800781e <_strtod_l+0xa0e>
 80078cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078d2:	0d1b      	lsrs	r3, r3, #20
 80078d4:	051b      	lsls	r3, r3, #20
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d1a1      	bne.n	800781e <_strtod_l+0xa0e>
 80078da:	4640      	mov	r0, r8
 80078dc:	4649      	mov	r1, r9
 80078de:	f7f9 f9eb 	bl	8000cb8 <__aeabi_d2lz>
 80078e2:	f7f8 fe5b 	bl	800059c <__aeabi_l2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f8 fccb 	bl	8000288 <__aeabi_dsub>
 80078f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f8:	ea43 030a 	orr.w	r3, r3, sl
 80078fc:	4313      	orrs	r3, r2
 80078fe:	4680      	mov	r8, r0
 8007900:	4689      	mov	r9, r1
 8007902:	d055      	beq.n	80079b0 <_strtod_l+0xba0>
 8007904:	a336      	add	r3, pc, #216	; (adr r3, 80079e0 <_strtod_l+0xbd0>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f9 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	f47f acd0 	bne.w	80072b4 <_strtod_l+0x4a4>
 8007914:	a334      	add	r3, pc, #208	; (adr r3, 80079e8 <_strtod_l+0xbd8>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f9 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 8007922:	2800      	cmp	r0, #0
 8007924:	f43f af7b 	beq.w	800781e <_strtod_l+0xa0e>
 8007928:	e4c4      	b.n	80072b4 <_strtod_l+0x4a4>
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	b333      	cbz	r3, 800797c <_strtod_l+0xb6c>
 800792e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007930:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007934:	d822      	bhi.n	800797c <_strtod_l+0xb6c>
 8007936:	a32e      	add	r3, pc, #184	; (adr r3, 80079f0 <_strtod_l+0xbe0>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f8d6 	bl	8000af0 <__aeabi_dcmple>
 8007944:	b1a0      	cbz	r0, 8007970 <_strtod_l+0xb60>
 8007946:	4649      	mov	r1, r9
 8007948:	4640      	mov	r0, r8
 800794a:	f7f9 f92d 	bl	8000ba8 <__aeabi_d2uiz>
 800794e:	2801      	cmp	r0, #1
 8007950:	bf38      	it	cc
 8007952:	2001      	movcc	r0, #1
 8007954:	f7f8 fdd6 	bl	8000504 <__aeabi_ui2d>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	4680      	mov	r8, r0
 800795c:	4689      	mov	r9, r1
 800795e:	bb23      	cbnz	r3, 80079aa <_strtod_l+0xb9a>
 8007960:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007964:	9010      	str	r0, [sp, #64]	; 0x40
 8007966:	9311      	str	r3, [sp, #68]	; 0x44
 8007968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800796c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007974:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007980:	eeb0 0a48 	vmov.f32	s0, s16
 8007984:	eef0 0a68 	vmov.f32	s1, s17
 8007988:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800798c:	f002 f96e 	bl	8009c6c <__ulp>
 8007990:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007994:	ec53 2b10 	vmov	r2, r3, d0
 8007998:	f7f8 fe2e 	bl	80005f8 <__aeabi_dmul>
 800799c:	ec53 2b18 	vmov	r2, r3, d8
 80079a0:	f7f8 fc74 	bl	800028c <__adddf3>
 80079a4:	4682      	mov	sl, r0
 80079a6:	468b      	mov	fp, r1
 80079a8:	e78d      	b.n	80078c6 <_strtod_l+0xab6>
 80079aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80079ae:	e7db      	b.n	8007968 <_strtod_l+0xb58>
 80079b0:	a311      	add	r3, pc, #68	; (adr r3, 80079f8 <_strtod_l+0xbe8>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f9 f891 	bl	8000adc <__aeabi_dcmplt>
 80079ba:	e7b2      	b.n	8007922 <_strtod_l+0xb12>
 80079bc:	2300      	movs	r3, #0
 80079be:	930a      	str	r3, [sp, #40]	; 0x28
 80079c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	f7ff ba6b 	b.w	8006ea0 <_strtod_l+0x90>
 80079ca:	2a65      	cmp	r2, #101	; 0x65
 80079cc:	f43f ab5f 	beq.w	800708e <_strtod_l+0x27e>
 80079d0:	2a45      	cmp	r2, #69	; 0x45
 80079d2:	f43f ab5c 	beq.w	800708e <_strtod_l+0x27e>
 80079d6:	2301      	movs	r3, #1
 80079d8:	f7ff bb94 	b.w	8007104 <_strtod_l+0x2f4>
 80079dc:	f3af 8000 	nop.w
 80079e0:	94a03595 	.word	0x94a03595
 80079e4:	3fdfffff 	.word	0x3fdfffff
 80079e8:	35afe535 	.word	0x35afe535
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	ffc00000 	.word	0xffc00000
 80079f4:	41dfffff 	.word	0x41dfffff
 80079f8:	94a03595 	.word	0x94a03595
 80079fc:	3fcfffff 	.word	0x3fcfffff
 8007a00:	3ff00000 	.word	0x3ff00000
 8007a04:	7ff00000 	.word	0x7ff00000
 8007a08:	7fe00000 	.word	0x7fe00000
 8007a0c:	7c9fffff 	.word	0x7c9fffff
 8007a10:	3fe00000 	.word	0x3fe00000
 8007a14:	bff00000 	.word	0xbff00000
 8007a18:	7fefffff 	.word	0x7fefffff

08007a1c <_strtod_r>:
 8007a1c:	4b01      	ldr	r3, [pc, #4]	; (8007a24 <_strtod_r+0x8>)
 8007a1e:	f7ff b9f7 	b.w	8006e10 <_strtod_l>
 8007a22:	bf00      	nop
 8007a24:	200000a4 	.word	0x200000a4

08007a28 <_strtol_l.constprop.0>:
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2e:	d001      	beq.n	8007a34 <_strtol_l.constprop.0+0xc>
 8007a30:	2b24      	cmp	r3, #36	; 0x24
 8007a32:	d906      	bls.n	8007a42 <_strtol_l.constprop.0+0x1a>
 8007a34:	f7fe f9ca 	bl	8005dcc <__errno>
 8007a38:	2316      	movs	r3, #22
 8007a3a:	6003      	str	r3, [r0, #0]
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b28 <_strtol_l.constprop.0+0x100>
 8007a46:	460d      	mov	r5, r1
 8007a48:	462e      	mov	r6, r5
 8007a4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007a52:	f017 0708 	ands.w	r7, r7, #8
 8007a56:	d1f7      	bne.n	8007a48 <_strtol_l.constprop.0+0x20>
 8007a58:	2c2d      	cmp	r4, #45	; 0x2d
 8007a5a:	d132      	bne.n	8007ac2 <_strtol_l.constprop.0+0x9a>
 8007a5c:	782c      	ldrb	r4, [r5, #0]
 8007a5e:	2701      	movs	r7, #1
 8007a60:	1cb5      	adds	r5, r6, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d05b      	beq.n	8007b1e <_strtol_l.constprop.0+0xf6>
 8007a66:	2b10      	cmp	r3, #16
 8007a68:	d109      	bne.n	8007a7e <_strtol_l.constprop.0+0x56>
 8007a6a:	2c30      	cmp	r4, #48	; 0x30
 8007a6c:	d107      	bne.n	8007a7e <_strtol_l.constprop.0+0x56>
 8007a6e:	782c      	ldrb	r4, [r5, #0]
 8007a70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a74:	2c58      	cmp	r4, #88	; 0x58
 8007a76:	d14d      	bne.n	8007b14 <_strtol_l.constprop.0+0xec>
 8007a78:	786c      	ldrb	r4, [r5, #1]
 8007a7a:	2310      	movs	r3, #16
 8007a7c:	3502      	adds	r5, #2
 8007a7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a86:	f04f 0c00 	mov.w	ip, #0
 8007a8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007a8e:	4666      	mov	r6, ip
 8007a90:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007a98:	f1be 0f09 	cmp.w	lr, #9
 8007a9c:	d816      	bhi.n	8007acc <_strtol_l.constprop.0+0xa4>
 8007a9e:	4674      	mov	r4, lr
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	dd24      	ble.n	8007aee <_strtol_l.constprop.0+0xc6>
 8007aa4:	f1bc 0f00 	cmp.w	ip, #0
 8007aa8:	db1e      	blt.n	8007ae8 <_strtol_l.constprop.0+0xc0>
 8007aaa:	45b1      	cmp	r9, r6
 8007aac:	d31c      	bcc.n	8007ae8 <_strtol_l.constprop.0+0xc0>
 8007aae:	d101      	bne.n	8007ab4 <_strtol_l.constprop.0+0x8c>
 8007ab0:	45a2      	cmp	sl, r4
 8007ab2:	db19      	blt.n	8007ae8 <_strtol_l.constprop.0+0xc0>
 8007ab4:	fb06 4603 	mla	r6, r6, r3, r4
 8007ab8:	f04f 0c01 	mov.w	ip, #1
 8007abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ac0:	e7e8      	b.n	8007a94 <_strtol_l.constprop.0+0x6c>
 8007ac2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ac4:	bf04      	itt	eq
 8007ac6:	782c      	ldrbeq	r4, [r5, #0]
 8007ac8:	1cb5      	addeq	r5, r6, #2
 8007aca:	e7ca      	b.n	8007a62 <_strtol_l.constprop.0+0x3a>
 8007acc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ad0:	f1be 0f19 	cmp.w	lr, #25
 8007ad4:	d801      	bhi.n	8007ada <_strtol_l.constprop.0+0xb2>
 8007ad6:	3c37      	subs	r4, #55	; 0x37
 8007ad8:	e7e2      	b.n	8007aa0 <_strtol_l.constprop.0+0x78>
 8007ada:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ade:	f1be 0f19 	cmp.w	lr, #25
 8007ae2:	d804      	bhi.n	8007aee <_strtol_l.constprop.0+0xc6>
 8007ae4:	3c57      	subs	r4, #87	; 0x57
 8007ae6:	e7db      	b.n	8007aa0 <_strtol_l.constprop.0+0x78>
 8007ae8:	f04f 3cff 	mov.w	ip, #4294967295
 8007aec:	e7e6      	b.n	8007abc <_strtol_l.constprop.0+0x94>
 8007aee:	f1bc 0f00 	cmp.w	ip, #0
 8007af2:	da05      	bge.n	8007b00 <_strtol_l.constprop.0+0xd8>
 8007af4:	2322      	movs	r3, #34	; 0x22
 8007af6:	6003      	str	r3, [r0, #0]
 8007af8:	4646      	mov	r6, r8
 8007afa:	b942      	cbnz	r2, 8007b0e <_strtol_l.constprop.0+0xe6>
 8007afc:	4630      	mov	r0, r6
 8007afe:	e79e      	b.n	8007a3e <_strtol_l.constprop.0+0x16>
 8007b00:	b107      	cbz	r7, 8007b04 <_strtol_l.constprop.0+0xdc>
 8007b02:	4276      	negs	r6, r6
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d0f9      	beq.n	8007afc <_strtol_l.constprop.0+0xd4>
 8007b08:	f1bc 0f00 	cmp.w	ip, #0
 8007b0c:	d000      	beq.n	8007b10 <_strtol_l.constprop.0+0xe8>
 8007b0e:	1e69      	subs	r1, r5, #1
 8007b10:	6011      	str	r1, [r2, #0]
 8007b12:	e7f3      	b.n	8007afc <_strtol_l.constprop.0+0xd4>
 8007b14:	2430      	movs	r4, #48	; 0x30
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1b1      	bne.n	8007a7e <_strtol_l.constprop.0+0x56>
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	e7af      	b.n	8007a7e <_strtol_l.constprop.0+0x56>
 8007b1e:	2c30      	cmp	r4, #48	; 0x30
 8007b20:	d0a5      	beq.n	8007a6e <_strtol_l.constprop.0+0x46>
 8007b22:	230a      	movs	r3, #10
 8007b24:	e7ab      	b.n	8007a7e <_strtol_l.constprop.0+0x56>
 8007b26:	bf00      	nop
 8007b28:	0800b749 	.word	0x0800b749

08007b2c <_strtol_r>:
 8007b2c:	f7ff bf7c 	b.w	8007a28 <_strtol_l.constprop.0>

08007b30 <__swbuf_r>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	460e      	mov	r6, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	4605      	mov	r5, r0
 8007b38:	b118      	cbz	r0, 8007b42 <__swbuf_r+0x12>
 8007b3a:	6983      	ldr	r3, [r0, #24]
 8007b3c:	b90b      	cbnz	r3, 8007b42 <__swbuf_r+0x12>
 8007b3e:	f001 f86f 	bl	8008c20 <__sinit>
 8007b42:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <__swbuf_r+0x98>)
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d12b      	bne.n	8007ba0 <__swbuf_r+0x70>
 8007b48:	686c      	ldr	r4, [r5, #4]
 8007b4a:	69a3      	ldr	r3, [r4, #24]
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	071a      	lsls	r2, r3, #28
 8007b52:	d52f      	bpl.n	8007bb4 <__swbuf_r+0x84>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b36b      	cbz	r3, 8007bb4 <__swbuf_r+0x84>
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	1ac0      	subs	r0, r0, r3
 8007b5e:	6963      	ldr	r3, [r4, #20]
 8007b60:	b2f6      	uxtb	r6, r6
 8007b62:	4283      	cmp	r3, r0
 8007b64:	4637      	mov	r7, r6
 8007b66:	dc04      	bgt.n	8007b72 <__swbuf_r+0x42>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 ffc4 	bl	8008af8 <_fflush_r>
 8007b70:	bb30      	cbnz	r0, 8007bc0 <__swbuf_r+0x90>
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	6022      	str	r2, [r4, #0]
 8007b7e:	701e      	strb	r6, [r3, #0]
 8007b80:	6963      	ldr	r3, [r4, #20]
 8007b82:	3001      	adds	r0, #1
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d004      	beq.n	8007b92 <__swbuf_r+0x62>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d506      	bpl.n	8007b9c <__swbuf_r+0x6c>
 8007b8e:	2e0a      	cmp	r6, #10
 8007b90:	d104      	bne.n	8007b9c <__swbuf_r+0x6c>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 ffaf 	bl	8008af8 <_fflush_r>
 8007b9a:	b988      	cbnz	r0, 8007bc0 <__swbuf_r+0x90>
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <__swbuf_r+0x9c>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swbuf_r+0x7a>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7cf      	b.n	8007b4a <__swbuf_r+0x1a>
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <__swbuf_r+0xa0>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7ca      	b.n	8007b4a <__swbuf_r+0x1a>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f81e 	bl	8007bf8 <__swsetup_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0cb      	beq.n	8007b58 <__swbuf_r+0x28>
 8007bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc4:	e7ea      	b.n	8007b9c <__swbuf_r+0x6c>
 8007bc6:	bf00      	nop
 8007bc8:	0800b8fc 	.word	0x0800b8fc
 8007bcc:	0800b91c 	.word	0x0800b91c
 8007bd0:	0800b8dc 	.word	0x0800b8dc

08007bd4 <_write_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_write_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7fa fbd2 	bl	800238c <_write>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_write_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_write_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200008a0 	.word	0x200008a0

08007bf8 <__swsetup_r>:
 8007bf8:	4b32      	ldr	r3, [pc, #200]	; (8007cc4 <__swsetup_r+0xcc>)
 8007bfa:	b570      	push	{r4, r5, r6, lr}
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	b125      	cbz	r5, 8007c0e <__swsetup_r+0x16>
 8007c04:	69ab      	ldr	r3, [r5, #24]
 8007c06:	b913      	cbnz	r3, 8007c0e <__swsetup_r+0x16>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f001 f809 	bl	8008c20 <__sinit>
 8007c0e:	4b2e      	ldr	r3, [pc, #184]	; (8007cc8 <__swsetup_r+0xd0>)
 8007c10:	429c      	cmp	r4, r3
 8007c12:	d10f      	bne.n	8007c34 <__swsetup_r+0x3c>
 8007c14:	686c      	ldr	r4, [r5, #4]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d42c      	bmi.n	8007c7a <__swsetup_r+0x82>
 8007c20:	06dd      	lsls	r5, r3, #27
 8007c22:	d411      	bmi.n	8007c48 <__swsetup_r+0x50>
 8007c24:	2309      	movs	r3, #9
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c32:	e03e      	b.n	8007cb2 <__swsetup_r+0xba>
 8007c34:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <__swsetup_r+0xd4>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swsetup_r+0x46>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7eb      	b.n	8007c16 <__swsetup_r+0x1e>
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <__swsetup_r+0xd8>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7e6      	b.n	8007c16 <__swsetup_r+0x1e>
 8007c48:	0758      	lsls	r0, r3, #29
 8007c4a:	d512      	bpl.n	8007c72 <__swsetup_r+0x7a>
 8007c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4e:	b141      	cbz	r1, 8007c62 <__swsetup_r+0x6a>
 8007c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c54:	4299      	cmp	r1, r3
 8007c56:	d002      	beq.n	8007c5e <__swsetup_r+0x66>
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f002 f96d 	bl	8009f38 <_free_r>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6363      	str	r3, [r4, #52]	; 0x34
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f043 0308 	orr.w	r3, r3, #8
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	b94b      	cbnz	r3, 8007c92 <__swsetup_r+0x9a>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c88:	d003      	beq.n	8007c92 <__swsetup_r+0x9a>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f001 fc13 	bl	80094b8 <__smakebuf_r>
 8007c92:	89a0      	ldrh	r0, [r4, #12]
 8007c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c98:	f010 0301 	ands.w	r3, r0, #1
 8007c9c:	d00a      	beq.n	8007cb4 <__swsetup_r+0xbc>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	6963      	ldr	r3, [r4, #20]
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	61a3      	str	r3, [r4, #24]
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	b943      	cbnz	r3, 8007cbe <__swsetup_r+0xc6>
 8007cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cb0:	d1ba      	bne.n	8007c28 <__swsetup_r+0x30>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	0781      	lsls	r1, r0, #30
 8007cb6:	bf58      	it	pl
 8007cb8:	6963      	ldrpl	r3, [r4, #20]
 8007cba:	60a3      	str	r3, [r4, #8]
 8007cbc:	e7f4      	b.n	8007ca8 <__swsetup_r+0xb0>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e7f7      	b.n	8007cb2 <__swsetup_r+0xba>
 8007cc2:	bf00      	nop
 8007cc4:	2000003c 	.word	0x2000003c
 8007cc8:	0800b8fc 	.word	0x0800b8fc
 8007ccc:	0800b91c 	.word	0x0800b91c
 8007cd0:	0800b8dc 	.word	0x0800b8dc

08007cd4 <_close_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	; (8007cf0 <_close_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7fa fb62 	bl	80023a8 <_close>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_close_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_close_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200008a0 	.word	0x200008a0

08007cf4 <quorem>:
 8007cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	6903      	ldr	r3, [r0, #16]
 8007cfa:	690c      	ldr	r4, [r1, #16]
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f2c0 8081 	blt.w	8007e06 <quorem+0x112>
 8007d04:	3c01      	subs	r4, #1
 8007d06:	f101 0814 	add.w	r8, r1, #20
 8007d0a:	f100 0514 	add.w	r5, r0, #20
 8007d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d2c:	d331      	bcc.n	8007d92 <quorem+0x9e>
 8007d2e:	f04f 0e00 	mov.w	lr, #0
 8007d32:	4640      	mov	r0, r8
 8007d34:	46ac      	mov	ip, r5
 8007d36:	46f2      	mov	sl, lr
 8007d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d3c:	b293      	uxth	r3, r2
 8007d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ebaa 0303 	sub.w	r3, sl, r3
 8007d4c:	f8dc a000 	ldr.w	sl, [ip]
 8007d50:	0c12      	lsrs	r2, r2, #16
 8007d52:	fa13 f38a 	uxtah	r3, r3, sl
 8007d56:	fb06 e202 	mla	r2, r6, r2, lr
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d62:	b292      	uxth	r2, r2
 8007d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d70:	4581      	cmp	r9, r0
 8007d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d76:	f84c 3b04 	str.w	r3, [ip], #4
 8007d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d7e:	d2db      	bcs.n	8007d38 <quorem+0x44>
 8007d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d84:	b92b      	cbnz	r3, 8007d92 <quorem+0x9e>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	429d      	cmp	r5, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	d32e      	bcc.n	8007dee <quorem+0xfa>
 8007d90:	613c      	str	r4, [r7, #16]
 8007d92:	4638      	mov	r0, r7
 8007d94:	f001 fec4 	bl	8009b20 <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	db24      	blt.n	8007de6 <quorem+0xf2>
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f04f 0c00 	mov.w	ip, #0
 8007da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007da8:	f8d0 e000 	ldr.w	lr, [r0]
 8007dac:	b293      	uxth	r3, r2
 8007dae:	ebac 0303 	sub.w	r3, ip, r3
 8007db2:	0c12      	lsrs	r2, r2, #16
 8007db4:	fa13 f38e 	uxtah	r3, r3, lr
 8007db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc6:	45c1      	cmp	r9, r8
 8007dc8:	f840 3b04 	str.w	r3, [r0], #4
 8007dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dd0:	d2e8      	bcs.n	8007da4 <quorem+0xb0>
 8007dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dda:	b922      	cbnz	r2, 8007de6 <quorem+0xf2>
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	429d      	cmp	r5, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	d30a      	bcc.n	8007dfa <quorem+0x106>
 8007de4:	613c      	str	r4, [r7, #16]
 8007de6:	4630      	mov	r0, r6
 8007de8:	b003      	add	sp, #12
 8007dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	d1cc      	bne.n	8007d90 <quorem+0x9c>
 8007df6:	3c01      	subs	r4, #1
 8007df8:	e7c7      	b.n	8007d8a <quorem+0x96>
 8007dfa:	6812      	ldr	r2, [r2, #0]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	d1f0      	bne.n	8007de4 <quorem+0xf0>
 8007e02:	3c01      	subs	r4, #1
 8007e04:	e7eb      	b.n	8007dde <quorem+0xea>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e7ee      	b.n	8007de8 <quorem+0xf4>
 8007e0a:	0000      	movs	r0, r0
 8007e0c:	0000      	movs	r0, r0
	...

08007e10 <_dtoa_r>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	ed2d 8b04 	vpush	{d8-d9}
 8007e18:	ec57 6b10 	vmov	r6, r7, d0
 8007e1c:	b093      	sub	sp, #76	; 0x4c
 8007e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e24:	9106      	str	r1, [sp, #24]
 8007e26:	ee10 aa10 	vmov	sl, s0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e30:	46bb      	mov	fp, r7
 8007e32:	b975      	cbnz	r5, 8007e52 <_dtoa_r+0x42>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f001 fb7f 	bl	8009538 <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e3e:	b920      	cbnz	r0, 8007e4a <_dtoa_r+0x3a>
 8007e40:	4ba7      	ldr	r3, [pc, #668]	; (80080e0 <_dtoa_r+0x2d0>)
 8007e42:	21ea      	movs	r1, #234	; 0xea
 8007e44:	48a7      	ldr	r0, [pc, #668]	; (80080e4 <_dtoa_r+0x2d4>)
 8007e46:	f003 f897 	bl	800af78 <__assert_func>
 8007e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e4e:	6005      	str	r5, [r0, #0]
 8007e50:	60c5      	str	r5, [r0, #12]
 8007e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	b151      	cbz	r1, 8007e6e <_dtoa_r+0x5e>
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	604a      	str	r2, [r1, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4093      	lsls	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f001 fbd0 	bl	8009608 <_Bfree>
 8007e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	1e3b      	subs	r3, r7, #0
 8007e70:	bfaa      	itet	ge
 8007e72:	2300      	movge	r3, #0
 8007e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e78:	f8c8 3000 	strge.w	r3, [r8]
 8007e7c:	4b9a      	ldr	r3, [pc, #616]	; (80080e8 <_dtoa_r+0x2d8>)
 8007e7e:	bfbc      	itt	lt
 8007e80:	2201      	movlt	r2, #1
 8007e82:	f8c8 2000 	strlt.w	r2, [r8]
 8007e86:	ea33 030b 	bics.w	r3, r3, fp
 8007e8a:	d11b      	bne.n	8007ec4 <_dtoa_r+0xb4>
 8007e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e98:	4333      	orrs	r3, r6
 8007e9a:	f000 8592 	beq.w	80089c2 <_dtoa_r+0xbb2>
 8007e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea0:	b963      	cbnz	r3, 8007ebc <_dtoa_r+0xac>
 8007ea2:	4b92      	ldr	r3, [pc, #584]	; (80080ec <_dtoa_r+0x2dc>)
 8007ea4:	e022      	b.n	8007eec <_dtoa_r+0xdc>
 8007ea6:	4b92      	ldr	r3, [pc, #584]	; (80080f0 <_dtoa_r+0x2e0>)
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	9801      	ldr	r0, [sp, #4]
 8007eb2:	b013      	add	sp, #76	; 0x4c
 8007eb4:	ecbd 8b04 	vpop	{d8-d9}
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <_dtoa_r+0x2dc>)
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	e7f3      	b.n	8007eac <_dtoa_r+0x9c>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ed0:	ec4b ab19 	vmov	d9, sl, fp
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	b158      	cbz	r0, 8007ef0 <_dtoa_r+0xe0>
 8007ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eda:	2301      	movs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 856b 	beq.w	80089bc <_dtoa_r+0xbac>
 8007ee6:	4883      	ldr	r0, [pc, #524]	; (80080f4 <_dtoa_r+0x2e4>)
 8007ee8:	6018      	str	r0, [r3, #0]
 8007eea:	1e43      	subs	r3, r0, #1
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	e7df      	b.n	8007eb0 <_dtoa_r+0xa0>
 8007ef0:	ec4b ab10 	vmov	d0, sl, fp
 8007ef4:	aa10      	add	r2, sp, #64	; 0x40
 8007ef6:	a911      	add	r1, sp, #68	; 0x44
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 ff33 	bl	8009d64 <__d2b>
 8007efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f02:	ee08 0a10 	vmov	s16, r0
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	f000 8084 	beq.w	8008014 <_dtoa_r+0x204>
 8007f0c:	ee19 3a90 	vmov	r3, s19
 8007f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f18:	4656      	mov	r6, sl
 8007f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f26:	4b74      	ldr	r3, [pc, #464]	; (80080f8 <_dtoa_r+0x2e8>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 f9ab 	bl	8000288 <__aeabi_dsub>
 8007f32:	a365      	add	r3, pc, #404	; (adr r3, 80080c8 <_dtoa_r+0x2b8>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb5e 	bl	80005f8 <__aeabi_dmul>
 8007f3c:	a364      	add	r3, pc, #400	; (adr r3, 80080d0 <_dtoa_r+0x2c0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f9a3 	bl	800028c <__adddf3>
 8007f46:	4606      	mov	r6, r0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	f7f8 faea 	bl	8000524 <__aeabi_i2d>
 8007f50:	a361      	add	r3, pc, #388	; (adr r3, 80080d8 <_dtoa_r+0x2c8>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 f993 	bl	800028c <__adddf3>
 8007f66:	4606      	mov	r6, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	f7f8 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	9000      	str	r0, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8007f7c:	b150      	cbz	r0, 8007f94 <_dtoa_r+0x184>
 8007f7e:	9800      	ldr	r0, [sp, #0]
 8007f80:	f7f8 fad0 	bl	8000524 <__aeabi_i2d>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8c:	b910      	cbnz	r0, 8007f94 <_dtoa_r+0x184>
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	d85a      	bhi.n	8008050 <_dtoa_r+0x240>
 8007f9a:	9a00      	ldr	r2, [sp, #0]
 8007f9c:	4b57      	ldr	r3, [pc, #348]	; (80080fc <_dtoa_r+0x2ec>)
 8007f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	ec51 0b19 	vmov	r0, r1, d9
 8007faa:	f7f8 fd97 	bl	8000adc <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d050      	beq.n	8008054 <_dtoa_r+0x244>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbe:	1b5d      	subs	r5, r3, r5
 8007fc0:	1e6b      	subs	r3, r5, #1
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	bf45      	ittet	mi
 8007fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fca:	9304      	strmi	r3, [sp, #16]
 8007fcc:	2300      	movpl	r3, #0
 8007fce:	2300      	movmi	r3, #0
 8007fd0:	bf4c      	ite	mi
 8007fd2:	9305      	strmi	r3, [sp, #20]
 8007fd4:	9304      	strpl	r3, [sp, #16]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db3d      	blt.n	8008058 <_dtoa_r+0x248>
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	9a00      	ldr	r2, [sp, #0]
 8007fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	f200 8089 	bhi.w	8008104 <_dtoa_r+0x2f4>
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	bfc4      	itt	gt
 8007ff6:	3b04      	subgt	r3, #4
 8007ff8:	9306      	strgt	r3, [sp, #24]
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	f1a3 0302 	sub.w	r3, r3, #2
 8008000:	bfcc      	ite	gt
 8008002:	2500      	movgt	r5, #0
 8008004:	2501      	movle	r5, #1
 8008006:	2b03      	cmp	r3, #3
 8008008:	f200 8087 	bhi.w	800811a <_dtoa_r+0x30a>
 800800c:	e8df f003 	tbb	[pc, r3]
 8008010:	59383a2d 	.word	0x59383a2d
 8008014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008018:	441d      	add	r5, r3
 800801a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800801e:	2b20      	cmp	r3, #32
 8008020:	bfc1      	itttt	gt
 8008022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800802a:	fa0b f303 	lslgt.w	r3, fp, r3
 800802e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008032:	bfda      	itte	le
 8008034:	f1c3 0320 	rsble	r3, r3, #32
 8008038:	fa06 f003 	lslle.w	r0, r6, r3
 800803c:	4318      	orrgt	r0, r3
 800803e:	f7f8 fa61 	bl	8000504 <__aeabi_ui2d>
 8008042:	2301      	movs	r3, #1
 8008044:	4606      	mov	r6, r0
 8008046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800804a:	3d01      	subs	r5, #1
 800804c:	930e      	str	r3, [sp, #56]	; 0x38
 800804e:	e76a      	b.n	8007f26 <_dtoa_r+0x116>
 8008050:	2301      	movs	r3, #1
 8008052:	e7b2      	b.n	8007fba <_dtoa_r+0x1aa>
 8008054:	900b      	str	r0, [sp, #44]	; 0x2c
 8008056:	e7b1      	b.n	8007fbc <_dtoa_r+0x1ac>
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	9a00      	ldr	r2, [sp, #0]
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	4253      	negs	r3, r2
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	2300      	movs	r3, #0
 8008066:	930a      	str	r3, [sp, #40]	; 0x28
 8008068:	e7bf      	b.n	8007fea <_dtoa_r+0x1da>
 800806a:	2300      	movs	r3, #0
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc55      	bgt.n	8008120 <_dtoa_r+0x310>
 8008074:	2301      	movs	r3, #1
 8008076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800807a:	461a      	mov	r2, r3
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	e00c      	b.n	800809a <_dtoa_r+0x28a>
 8008080:	2301      	movs	r3, #1
 8008082:	e7f3      	b.n	800806c <_dtoa_r+0x25c>
 8008084:	2300      	movs	r3, #0
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	4413      	add	r3, r2
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	3301      	adds	r3, #1
 8008092:	2b01      	cmp	r3, #1
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	bfb8      	it	lt
 8008098:	2301      	movlt	r3, #1
 800809a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800809c:	2200      	movs	r2, #0
 800809e:	6042      	str	r2, [r0, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	f102 0614 	add.w	r6, r2, #20
 80080a6:	429e      	cmp	r6, r3
 80080a8:	6841      	ldr	r1, [r0, #4]
 80080aa:	d93d      	bls.n	8008128 <_dtoa_r+0x318>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f001 fa6b 	bl	8009588 <_Balloc>
 80080b2:	9001      	str	r0, [sp, #4]
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d13b      	bne.n	8008130 <_dtoa_r+0x320>
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <_dtoa_r+0x2f0>)
 80080ba:	4602      	mov	r2, r0
 80080bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080c0:	e6c0      	b.n	8007e44 <_dtoa_r+0x34>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7df      	b.n	8008086 <_dtoa_r+0x276>
 80080c6:	bf00      	nop
 80080c8:	636f4361 	.word	0x636f4361
 80080cc:	3fd287a7 	.word	0x3fd287a7
 80080d0:	8b60c8b3 	.word	0x8b60c8b3
 80080d4:	3fc68a28 	.word	0x3fc68a28
 80080d8:	509f79fb 	.word	0x509f79fb
 80080dc:	3fd34413 	.word	0x3fd34413
 80080e0:	0800b856 	.word	0x0800b856
 80080e4:	0800b86d 	.word	0x0800b86d
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	0800b852 	.word	0x0800b852
 80080f0:	0800b849 	.word	0x0800b849
 80080f4:	0800bb2a 	.word	0x0800bb2a
 80080f8:	3ff80000 	.word	0x3ff80000
 80080fc:	0800ba40 	.word	0x0800ba40
 8008100:	0800b8c8 	.word	0x0800b8c8
 8008104:	2501      	movs	r5, #1
 8008106:	2300      	movs	r3, #0
 8008108:	9306      	str	r3, [sp, #24]
 800810a:	9508      	str	r5, [sp, #32]
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2312      	movs	r3, #18
 8008118:	e7b0      	b.n	800807c <_dtoa_r+0x26c>
 800811a:	2301      	movs	r3, #1
 800811c:	9308      	str	r3, [sp, #32]
 800811e:	e7f5      	b.n	800810c <_dtoa_r+0x2fc>
 8008120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008126:	e7b8      	b.n	800809a <_dtoa_r+0x28a>
 8008128:	3101      	adds	r1, #1
 800812a:	6041      	str	r1, [r0, #4]
 800812c:	0052      	lsls	r2, r2, #1
 800812e:	e7b8      	b.n	80080a2 <_dtoa_r+0x292>
 8008130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	2b0e      	cmp	r3, #14
 800813a:	f200 809d 	bhi.w	8008278 <_dtoa_r+0x468>
 800813e:	2d00      	cmp	r5, #0
 8008140:	f000 809a 	beq.w	8008278 <_dtoa_r+0x468>
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd32      	ble.n	80081b0 <_dtoa_r+0x3a0>
 800814a:	4ab7      	ldr	r2, [pc, #732]	; (8008428 <_dtoa_r+0x618>)
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	05d8      	lsls	r0, r3, #23
 800815c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008160:	d516      	bpl.n	8008190 <_dtoa_r+0x380>
 8008162:	4bb2      	ldr	r3, [pc, #712]	; (800842c <_dtoa_r+0x61c>)
 8008164:	ec51 0b19 	vmov	r0, r1, d9
 8008168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	f007 070f 	and.w	r7, r7, #15
 8008174:	4682      	mov	sl, r0
 8008176:	468b      	mov	fp, r1
 8008178:	2503      	movs	r5, #3
 800817a:	4eac      	ldr	r6, [pc, #688]	; (800842c <_dtoa_r+0x61c>)
 800817c:	b957      	cbnz	r7, 8008194 <_dtoa_r+0x384>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	4650      	mov	r0, sl
 8008184:	4659      	mov	r1, fp
 8008186:	f7f8 fb61 	bl	800084c <__aeabi_ddiv>
 800818a:	4682      	mov	sl, r0
 800818c:	468b      	mov	fp, r1
 800818e:	e028      	b.n	80081e2 <_dtoa_r+0x3d2>
 8008190:	2502      	movs	r5, #2
 8008192:	e7f2      	b.n	800817a <_dtoa_r+0x36a>
 8008194:	07f9      	lsls	r1, r7, #31
 8008196:	d508      	bpl.n	80081aa <_dtoa_r+0x39a>
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	3501      	adds	r5, #1
 80081a6:	4680      	mov	r8, r0
 80081a8:	4689      	mov	r9, r1
 80081aa:	107f      	asrs	r7, r7, #1
 80081ac:	3608      	adds	r6, #8
 80081ae:	e7e5      	b.n	800817c <_dtoa_r+0x36c>
 80081b0:	f000 809b 	beq.w	80082ea <_dtoa_r+0x4da>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	4f9d      	ldr	r7, [pc, #628]	; (800842c <_dtoa_r+0x61c>)
 80081b8:	425e      	negs	r6, r3
 80081ba:	4b9b      	ldr	r3, [pc, #620]	; (8008428 <_dtoa_r+0x618>)
 80081bc:	f006 020f 	and.w	r2, r6, #15
 80081c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	ec51 0b19 	vmov	r0, r1, d9
 80081cc:	f7f8 fa14 	bl	80005f8 <__aeabi_dmul>
 80081d0:	1136      	asrs	r6, r6, #4
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	2300      	movs	r3, #0
 80081d8:	2502      	movs	r5, #2
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d17a      	bne.n	80082d4 <_dtoa_r+0x4c4>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1d3      	bne.n	800818a <_dtoa_r+0x37a>
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8082 	beq.w	80082ee <_dtoa_r+0x4de>
 80081ea:	4b91      	ldr	r3, [pc, #580]	; (8008430 <_dtoa_r+0x620>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	f7f8 fc73 	bl	8000adc <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d079      	beq.n	80082ee <_dtoa_r+0x4de>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d076      	beq.n	80082ee <_dtoa_r+0x4de>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dd36      	ble.n	8008274 <_dtoa_r+0x464>
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	1e5f      	subs	r7, r3, #1
 800820e:	2200      	movs	r2, #0
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <_dtoa_r+0x624>)
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	9e02      	ldr	r6, [sp, #8]
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	3501      	adds	r5, #1
 800821e:	4628      	mov	r0, r5
 8008220:	f7f8 f980 	bl	8000524 <__aeabi_i2d>
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	f7f8 f9e6 	bl	80005f8 <__aeabi_dmul>
 800822c:	4b82      	ldr	r3, [pc, #520]	; (8008438 <_dtoa_r+0x628>)
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 f82c 	bl	800028c <__adddf3>
 8008234:	46d0      	mov	r8, sl
 8008236:	46d9      	mov	r9, fp
 8008238:	4682      	mov	sl, r0
 800823a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800823e:	2e00      	cmp	r6, #0
 8008240:	d158      	bne.n	80082f4 <_dtoa_r+0x4e4>
 8008242:	4b7e      	ldr	r3, [pc, #504]	; (800843c <_dtoa_r+0x62c>)
 8008244:	2200      	movs	r2, #0
 8008246:	4640      	mov	r0, r8
 8008248:	4649      	mov	r1, r9
 800824a:	f7f8 f81d 	bl	8000288 <__aeabi_dsub>
 800824e:	4652      	mov	r2, sl
 8008250:	465b      	mov	r3, fp
 8008252:	4680      	mov	r8, r0
 8008254:	4689      	mov	r9, r1
 8008256:	f7f8 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f040 8295 	bne.w	800878a <_dtoa_r+0x97a>
 8008260:	4652      	mov	r2, sl
 8008262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 fc37 	bl	8000adc <__aeabi_dcmplt>
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 8289 	bne.w	8008786 <_dtoa_r+0x976>
 8008274:	ec5b ab19 	vmov	sl, fp, d9
 8008278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800827a:	2b00      	cmp	r3, #0
 800827c:	f2c0 8148 	blt.w	8008510 <_dtoa_r+0x700>
 8008280:	9a00      	ldr	r2, [sp, #0]
 8008282:	2a0e      	cmp	r2, #14
 8008284:	f300 8144 	bgt.w	8008510 <_dtoa_r+0x700>
 8008288:	4b67      	ldr	r3, [pc, #412]	; (8008428 <_dtoa_r+0x618>)
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	f280 80d5 	bge.w	8008444 <_dtoa_r+0x634>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f300 80d1 	bgt.w	8008444 <_dtoa_r+0x634>
 80082a2:	f040 826f 	bne.w	8008784 <_dtoa_r+0x974>
 80082a6:	4b65      	ldr	r3, [pc, #404]	; (800843c <_dtoa_r+0x62c>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	f7f8 fc25 	bl	8000b04 <__aeabi_dcmpge>
 80082ba:	9e03      	ldr	r6, [sp, #12]
 80082bc:	4637      	mov	r7, r6
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8245 	bne.w	800874e <_dtoa_r+0x93e>
 80082c4:	9d01      	ldr	r5, [sp, #4]
 80082c6:	2331      	movs	r3, #49	; 0x31
 80082c8:	f805 3b01 	strb.w	r3, [r5], #1
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	e240      	b.n	8008756 <_dtoa_r+0x946>
 80082d4:	07f2      	lsls	r2, r6, #31
 80082d6:	d505      	bpl.n	80082e4 <_dtoa_r+0x4d4>
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	3501      	adds	r5, #1
 80082e2:	2301      	movs	r3, #1
 80082e4:	1076      	asrs	r6, r6, #1
 80082e6:	3708      	adds	r7, #8
 80082e8:	e777      	b.n	80081da <_dtoa_r+0x3ca>
 80082ea:	2502      	movs	r5, #2
 80082ec:	e779      	b.n	80081e2 <_dtoa_r+0x3d2>
 80082ee:	9f00      	ldr	r7, [sp, #0]
 80082f0:	9e03      	ldr	r6, [sp, #12]
 80082f2:	e794      	b.n	800821e <_dtoa_r+0x40e>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <_dtoa_r+0x618>)
 80082f8:	4431      	add	r1, r6
 80082fa:	910d      	str	r1, [sp, #52]	; 0x34
 80082fc:	9908      	ldr	r1, [sp, #32]
 80082fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008306:	2900      	cmp	r1, #0
 8008308:	d043      	beq.n	8008392 <_dtoa_r+0x582>
 800830a:	494d      	ldr	r1, [pc, #308]	; (8008440 <_dtoa_r+0x630>)
 800830c:	2000      	movs	r0, #0
 800830e:	f7f8 fa9d 	bl	800084c <__aeabi_ddiv>
 8008312:	4652      	mov	r2, sl
 8008314:	465b      	mov	r3, fp
 8008316:	f7f7 ffb7 	bl	8000288 <__aeabi_dsub>
 800831a:	9d01      	ldr	r5, [sp, #4]
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	4649      	mov	r1, r9
 8008322:	4640      	mov	r0, r8
 8008324:	f7f8 fc18 	bl	8000b58 <__aeabi_d2iz>
 8008328:	4606      	mov	r6, r0
 800832a:	f7f8 f8fb 	bl	8000524 <__aeabi_i2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffa7 	bl	8000288 <__aeabi_dsub>
 800833a:	3630      	adds	r6, #48	; 0x30
 800833c:	f805 6b01 	strb.w	r6, [r5], #1
 8008340:	4652      	mov	r2, sl
 8008342:	465b      	mov	r3, fp
 8008344:	4680      	mov	r8, r0
 8008346:	4689      	mov	r9, r1
 8008348:	f7f8 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	d163      	bne.n	8008418 <_dtoa_r+0x608>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4936      	ldr	r1, [pc, #216]	; (8008430 <_dtoa_r+0x620>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ff96 	bl	8000288 <__aeabi_dsub>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	f7f8 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80b5 	bne.w	80084d4 <_dtoa_r+0x6c4>
 800836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836c:	429d      	cmp	r5, r3
 800836e:	d081      	beq.n	8008274 <_dtoa_r+0x464>
 8008370:	4b30      	ldr	r3, [pc, #192]	; (8008434 <_dtoa_r+0x624>)
 8008372:	2200      	movs	r2, #0
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <_dtoa_r+0x624>)
 800837e:	4682      	mov	sl, r0
 8008380:	468b      	mov	fp, r1
 8008382:	4640      	mov	r0, r8
 8008384:	4649      	mov	r1, r9
 8008386:	2200      	movs	r2, #0
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	e7c6      	b.n	8008320 <_dtoa_r+0x510>
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f8 f92f 	bl	80005f8 <__aeabi_dmul>
 800839a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839c:	9d01      	ldr	r5, [sp, #4]
 800839e:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7f8 fbd6 	bl	8000b58 <__aeabi_d2iz>
 80083ac:	4606      	mov	r6, r0
 80083ae:	f7f8 f8b9 	bl	8000524 <__aeabi_i2d>
 80083b2:	3630      	adds	r6, #48	; 0x30
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 ff64 	bl	8000288 <__aeabi_dsub>
 80083c0:	f805 6b01 	strb.w	r6, [r5], #1
 80083c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c6:	429d      	cmp	r5, r3
 80083c8:	4680      	mov	r8, r0
 80083ca:	4689      	mov	r9, r1
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	d124      	bne.n	800841c <_dtoa_r+0x60c>
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <_dtoa_r+0x630>)
 80083d4:	4650      	mov	r0, sl
 80083d6:	4659      	mov	r1, fp
 80083d8:	f7f7 ff58 	bl	800028c <__adddf3>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f8 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d173      	bne.n	80084d4 <_dtoa_r+0x6c4>
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	4913      	ldr	r1, [pc, #76]	; (8008440 <_dtoa_r+0x630>)
 80083f2:	2000      	movs	r0, #0
 80083f4:	f7f7 ff48 	bl	8000288 <__aeabi_dsub>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f8 fb6c 	bl	8000adc <__aeabi_dcmplt>
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f af35 	beq.w	8008274 <_dtoa_r+0x464>
 800840a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800840c:	1e6b      	subs	r3, r5, #1
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008414:	2b30      	cmp	r3, #48	; 0x30
 8008416:	d0f8      	beq.n	800840a <_dtoa_r+0x5fa>
 8008418:	9700      	str	r7, [sp, #0]
 800841a:	e049      	b.n	80084b0 <_dtoa_r+0x6a0>
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <_dtoa_r+0x624>)
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	4680      	mov	r8, r0
 8008424:	4689      	mov	r9, r1
 8008426:	e7bd      	b.n	80083a4 <_dtoa_r+0x594>
 8008428:	0800ba40 	.word	0x0800ba40
 800842c:	0800ba18 	.word	0x0800ba18
 8008430:	3ff00000 	.word	0x3ff00000
 8008434:	40240000 	.word	0x40240000
 8008438:	401c0000 	.word	0x401c0000
 800843c:	40140000 	.word	0x40140000
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	9d01      	ldr	r5, [sp, #4]
 8008446:	4656      	mov	r6, sl
 8008448:	465f      	mov	r7, fp
 800844a:	4642      	mov	r2, r8
 800844c:	464b      	mov	r3, r9
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 f9fb 	bl	800084c <__aeabi_ddiv>
 8008456:	f7f8 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800845a:	4682      	mov	sl, r0
 800845c:	f7f8 f862 	bl	8000524 <__aeabi_i2d>
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	f7f8 f8c8 	bl	80005f8 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008474:	f7f7 ff08 	bl	8000288 <__aeabi_dsub>
 8008478:	f805 6b01 	strb.w	r6, [r5], #1
 800847c:	9e01      	ldr	r6, [sp, #4]
 800847e:	9f03      	ldr	r7, [sp, #12]
 8008480:	1bae      	subs	r6, r5, r6
 8008482:	42b7      	cmp	r7, r6
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	d135      	bne.n	80084f6 <_dtoa_r+0x6e6>
 800848a:	f7f7 feff 	bl	800028c <__adddf3>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f7f8 fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800849a:	b9d0      	cbnz	r0, 80084d2 <_dtoa_r+0x6c2>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f8 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a8:	b110      	cbz	r0, 80084b0 <_dtoa_r+0x6a0>
 80084aa:	f01a 0f01 	tst.w	sl, #1
 80084ae:	d110      	bne.n	80084d2 <_dtoa_r+0x6c2>
 80084b0:	4620      	mov	r0, r4
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	f001 f8a7 	bl	8009608 <_Bfree>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9800      	ldr	r0, [sp, #0]
 80084be:	702b      	strb	r3, [r5, #0]
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	3001      	adds	r0, #1
 80084c4:	6018      	str	r0, [r3, #0]
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f43f acf1 	beq.w	8007eb0 <_dtoa_r+0xa0>
 80084ce:	601d      	str	r5, [r3, #0]
 80084d0:	e4ee      	b.n	8007eb0 <_dtoa_r+0xa0>
 80084d2:	9f00      	ldr	r7, [sp, #0]
 80084d4:	462b      	mov	r3, r5
 80084d6:	461d      	mov	r5, r3
 80084d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084dc:	2a39      	cmp	r2, #57	; 0x39
 80084de:	d106      	bne.n	80084ee <_dtoa_r+0x6de>
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1f7      	bne.n	80084d6 <_dtoa_r+0x6c6>
 80084e6:	9901      	ldr	r1, [sp, #4]
 80084e8:	2230      	movs	r2, #48	; 0x30
 80084ea:	3701      	adds	r7, #1
 80084ec:	700a      	strb	r2, [r1, #0]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	3201      	adds	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e790      	b.n	8008418 <_dtoa_r+0x608>
 80084f6:	4ba6      	ldr	r3, [pc, #664]	; (8008790 <_dtoa_r+0x980>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	f7f8 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d09d      	beq.n	800844a <_dtoa_r+0x63a>
 800850e:	e7cf      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008510:	9a08      	ldr	r2, [sp, #32]
 8008512:	2a00      	cmp	r2, #0
 8008514:	f000 80d7 	beq.w	80086c6 <_dtoa_r+0x8b6>
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2a01      	cmp	r2, #1
 800851c:	f300 80ba 	bgt.w	8008694 <_dtoa_r+0x884>
 8008520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008522:	2a00      	cmp	r2, #0
 8008524:	f000 80b2 	beq.w	800868c <_dtoa_r+0x87c>
 8008528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800852c:	9e07      	ldr	r6, [sp, #28]
 800852e:	9d04      	ldr	r5, [sp, #16]
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	441a      	add	r2, r3
 8008534:	9204      	str	r2, [sp, #16]
 8008536:	9a05      	ldr	r2, [sp, #20]
 8008538:	2101      	movs	r1, #1
 800853a:	441a      	add	r2, r3
 800853c:	4620      	mov	r0, r4
 800853e:	9205      	str	r2, [sp, #20]
 8008540:	f001 f964 	bl	800980c <__i2b>
 8008544:	4607      	mov	r7, r0
 8008546:	2d00      	cmp	r5, #0
 8008548:	dd0c      	ble.n	8008564 <_dtoa_r+0x754>
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd09      	ble.n	8008564 <_dtoa_r+0x754>
 8008550:	42ab      	cmp	r3, r5
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	bfa8      	it	ge
 8008556:	462b      	movge	r3, r5
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	9204      	str	r2, [sp, #16]
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	1aed      	subs	r5, r5, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	b31b      	cbz	r3, 80085b0 <_dtoa_r+0x7a0>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80af 	beq.w	80086ce <_dtoa_r+0x8be>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd13      	ble.n	800859c <_dtoa_r+0x78c>
 8008574:	4639      	mov	r1, r7
 8008576:	4632      	mov	r2, r6
 8008578:	4620      	mov	r0, r4
 800857a:	f001 fa07 	bl	800998c <__pow5mult>
 800857e:	ee18 2a10 	vmov	r2, s16
 8008582:	4601      	mov	r1, r0
 8008584:	4607      	mov	r7, r0
 8008586:	4620      	mov	r0, r4
 8008588:	f001 f956 	bl	8009838 <__multiply>
 800858c:	ee18 1a10 	vmov	r1, s16
 8008590:	4680      	mov	r8, r0
 8008592:	4620      	mov	r0, r4
 8008594:	f001 f838 	bl	8009608 <_Bfree>
 8008598:	ee08 8a10 	vmov	s16, r8
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	1b9a      	subs	r2, r3, r6
 80085a0:	d006      	beq.n	80085b0 <_dtoa_r+0x7a0>
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 f9f0 	bl	800998c <__pow5mult>
 80085ac:	ee08 0a10 	vmov	s16, r0
 80085b0:	2101      	movs	r1, #1
 80085b2:	4620      	mov	r0, r4
 80085b4:	f001 f92a 	bl	800980c <__i2b>
 80085b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	4606      	mov	r6, r0
 80085be:	f340 8088 	ble.w	80086d2 <_dtoa_r+0x8c2>
 80085c2:	461a      	mov	r2, r3
 80085c4:	4601      	mov	r1, r0
 80085c6:	4620      	mov	r0, r4
 80085c8:	f001 f9e0 	bl	800998c <__pow5mult>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	4606      	mov	r6, r0
 80085d2:	f340 8081 	ble.w	80086d8 <_dtoa_r+0x8c8>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	6933      	ldr	r3, [r6, #16]
 80085dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085e0:	6918      	ldr	r0, [r3, #16]
 80085e2:	f001 f8c3 	bl	800976c <__hi0bits>
 80085e6:	f1c0 0020 	rsb	r0, r0, #32
 80085ea:	9b05      	ldr	r3, [sp, #20]
 80085ec:	4418      	add	r0, r3
 80085ee:	f010 001f 	ands.w	r0, r0, #31
 80085f2:	f000 8092 	beq.w	800871a <_dtoa_r+0x90a>
 80085f6:	f1c0 0320 	rsb	r3, r0, #32
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	f340 808a 	ble.w	8008714 <_dtoa_r+0x904>
 8008600:	f1c0 001c 	rsb	r0, r0, #28
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	4403      	add	r3, r0
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	4403      	add	r3, r0
 800860e:	4405      	add	r5, r0
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd07      	ble.n	8008628 <_dtoa_r+0x818>
 8008618:	ee18 1a10 	vmov	r1, s16
 800861c:	461a      	mov	r2, r3
 800861e:	4620      	mov	r0, r4
 8008620:	f001 fa0e 	bl	8009a40 <__lshift>
 8008624:	ee08 0a10 	vmov	s16, r0
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dd05      	ble.n	800863a <_dtoa_r+0x82a>
 800862e:	4631      	mov	r1, r6
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f001 fa04 	bl	8009a40 <__lshift>
 8008638:	4606      	mov	r6, r0
 800863a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d06e      	beq.n	800871e <_dtoa_r+0x90e>
 8008640:	ee18 0a10 	vmov	r0, s16
 8008644:	4631      	mov	r1, r6
 8008646:	f001 fa6b 	bl	8009b20 <__mcmp>
 800864a:	2800      	cmp	r0, #0
 800864c:	da67      	bge.n	800871e <_dtoa_r+0x90e>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	220a      	movs	r2, #10
 800865a:	2300      	movs	r3, #0
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fff5 	bl	800964c <__multadd>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	ee08 0a10 	vmov	s16, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 81b1 	beq.w	80089d0 <_dtoa_r+0xbc0>
 800866e:	2300      	movs	r3, #0
 8008670:	4639      	mov	r1, r7
 8008672:	220a      	movs	r2, #10
 8008674:	4620      	mov	r0, r4
 8008676:	f000 ffe9 	bl	800964c <__multadd>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	4607      	mov	r7, r0
 8008680:	f300 808e 	bgt.w	80087a0 <_dtoa_r+0x990>
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	2b02      	cmp	r3, #2
 8008688:	dc51      	bgt.n	800872e <_dtoa_r+0x91e>
 800868a:	e089      	b.n	80087a0 <_dtoa_r+0x990>
 800868c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800868e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008692:	e74b      	b.n	800852c <_dtoa_r+0x71c>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1e5e      	subs	r6, r3, #1
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	42b3      	cmp	r3, r6
 800869c:	bfbf      	itttt	lt
 800869e:	9b07      	ldrlt	r3, [sp, #28]
 80086a0:	9607      	strlt	r6, [sp, #28]
 80086a2:	1af2      	sublt	r2, r6, r3
 80086a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086a6:	bfb6      	itet	lt
 80086a8:	189b      	addlt	r3, r3, r2
 80086aa:	1b9e      	subge	r6, r3, r6
 80086ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	bfb8      	it	lt
 80086b2:	2600      	movlt	r6, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfb7      	itett	lt
 80086b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086c0:	1a9d      	sublt	r5, r3, r2
 80086c2:	2300      	movlt	r3, #0
 80086c4:	e734      	b.n	8008530 <_dtoa_r+0x720>
 80086c6:	9e07      	ldr	r6, [sp, #28]
 80086c8:	9d04      	ldr	r5, [sp, #16]
 80086ca:	9f08      	ldr	r7, [sp, #32]
 80086cc:	e73b      	b.n	8008546 <_dtoa_r+0x736>
 80086ce:	9a07      	ldr	r2, [sp, #28]
 80086d0:	e767      	b.n	80085a2 <_dtoa_r+0x792>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	dc18      	bgt.n	800870a <_dtoa_r+0x8fa>
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d115      	bne.n	800870a <_dtoa_r+0x8fa>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	b993      	cbnz	r3, 800870a <_dtoa_r+0x8fa>
 80086e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	051b      	lsls	r3, r3, #20
 80086ec:	b183      	cbz	r3, 8008710 <_dtoa_r+0x900>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9b05      	ldr	r3, [sp, #20]
 80086f6:	3301      	adds	r3, #1
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f04f 0801 	mov.w	r8, #1
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af6a 	bne.w	80085da <_dtoa_r+0x7ca>
 8008706:	2001      	movs	r0, #1
 8008708:	e76f      	b.n	80085ea <_dtoa_r+0x7da>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	e7f6      	b.n	80086fe <_dtoa_r+0x8ee>
 8008710:	4698      	mov	r8, r3
 8008712:	e7f4      	b.n	80086fe <_dtoa_r+0x8ee>
 8008714:	f43f af7d 	beq.w	8008612 <_dtoa_r+0x802>
 8008718:	4618      	mov	r0, r3
 800871a:	301c      	adds	r0, #28
 800871c:	e772      	b.n	8008604 <_dtoa_r+0x7f4>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc37      	bgt.n	8008794 <_dtoa_r+0x984>
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	2b02      	cmp	r3, #2
 8008728:	dd34      	ble.n	8008794 <_dtoa_r+0x984>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	b96b      	cbnz	r3, 800874e <_dtoa_r+0x93e>
 8008732:	4631      	mov	r1, r6
 8008734:	2205      	movs	r2, #5
 8008736:	4620      	mov	r0, r4
 8008738:	f000 ff88 	bl	800964c <__multadd>
 800873c:	4601      	mov	r1, r0
 800873e:	4606      	mov	r6, r0
 8008740:	ee18 0a10 	vmov	r0, s16
 8008744:	f001 f9ec 	bl	8009b20 <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	f73f adbb 	bgt.w	80082c4 <_dtoa_r+0x4b4>
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	9d01      	ldr	r5, [sp, #4]
 8008752:	43db      	mvns	r3, r3
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	4631      	mov	r1, r6
 800875c:	4620      	mov	r0, r4
 800875e:	f000 ff53 	bl	8009608 <_Bfree>
 8008762:	2f00      	cmp	r7, #0
 8008764:	f43f aea4 	beq.w	80084b0 <_dtoa_r+0x6a0>
 8008768:	f1b8 0f00 	cmp.w	r8, #0
 800876c:	d005      	beq.n	800877a <_dtoa_r+0x96a>
 800876e:	45b8      	cmp	r8, r7
 8008770:	d003      	beq.n	800877a <_dtoa_r+0x96a>
 8008772:	4641      	mov	r1, r8
 8008774:	4620      	mov	r0, r4
 8008776:	f000 ff47 	bl	8009608 <_Bfree>
 800877a:	4639      	mov	r1, r7
 800877c:	4620      	mov	r0, r4
 800877e:	f000 ff43 	bl	8009608 <_Bfree>
 8008782:	e695      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008784:	2600      	movs	r6, #0
 8008786:	4637      	mov	r7, r6
 8008788:	e7e1      	b.n	800874e <_dtoa_r+0x93e>
 800878a:	9700      	str	r7, [sp, #0]
 800878c:	4637      	mov	r7, r6
 800878e:	e599      	b.n	80082c4 <_dtoa_r+0x4b4>
 8008790:	40240000 	.word	0x40240000
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80ca 	beq.w	8008930 <_dtoa_r+0xb20>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	9302      	str	r3, [sp, #8]
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x9a0>
 80087a4:	4639      	mov	r1, r7
 80087a6:	462a      	mov	r2, r5
 80087a8:	4620      	mov	r0, r4
 80087aa:	f001 f949 	bl	8009a40 <__lshift>
 80087ae:	4607      	mov	r7, r0
 80087b0:	f1b8 0f00 	cmp.w	r8, #0
 80087b4:	d05b      	beq.n	800886e <_dtoa_r+0xa5e>
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fee5 	bl	8009588 <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b928      	cbnz	r0, 80087ce <_dtoa_r+0x9be>
 80087c2:	4b87      	ldr	r3, [pc, #540]	; (80089e0 <_dtoa_r+0xbd0>)
 80087c4:	4602      	mov	r2, r0
 80087c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ca:	f7ff bb3b 	b.w	8007e44 <_dtoa_r+0x34>
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	f107 010c 	add.w	r1, r7, #12
 80087d8:	300c      	adds	r0, #12
 80087da:	f000 fec7 	bl	800956c <memcpy>
 80087de:	2201      	movs	r2, #1
 80087e0:	4629      	mov	r1, r5
 80087e2:	4620      	mov	r0, r4
 80087e4:	f001 f92c 	bl	8009a40 <__lshift>
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f103 0901 	add.w	r9, r3, #1
 80087ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f00a 0301 	and.w	r3, sl, #1
 80087fa:	46b8      	mov	r8, r7
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	4607      	mov	r7, r0
 8008800:	4631      	mov	r1, r6
 8008802:	ee18 0a10 	vmov	r0, s16
 8008806:	f7ff fa75 	bl	8007cf4 <quorem>
 800880a:	4641      	mov	r1, r8
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008812:	ee18 0a10 	vmov	r0, s16
 8008816:	f001 f983 	bl	8009b20 <__mcmp>
 800881a:	463a      	mov	r2, r7
 800881c:	9003      	str	r0, [sp, #12]
 800881e:	4631      	mov	r1, r6
 8008820:	4620      	mov	r0, r4
 8008822:	f001 f999 	bl	8009b58 <__mdiff>
 8008826:	68c2      	ldr	r2, [r0, #12]
 8008828:	f109 3bff 	add.w	fp, r9, #4294967295
 800882c:	4605      	mov	r5, r0
 800882e:	bb02      	cbnz	r2, 8008872 <_dtoa_r+0xa62>
 8008830:	4601      	mov	r1, r0
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f001 f973 	bl	8009b20 <__mcmp>
 800883a:	4602      	mov	r2, r0
 800883c:	4629      	mov	r1, r5
 800883e:	4620      	mov	r0, r4
 8008840:	9207      	str	r2, [sp, #28]
 8008842:	f000 fee1 	bl	8009608 <_Bfree>
 8008846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800884a:	ea43 0102 	orr.w	r1, r3, r2
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	430b      	orrs	r3, r1
 8008852:	464d      	mov	r5, r9
 8008854:	d10f      	bne.n	8008876 <_dtoa_r+0xa66>
 8008856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800885a:	d02a      	beq.n	80088b2 <_dtoa_r+0xaa2>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd02      	ble.n	8008868 <_dtoa_r+0xa58>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008868:	f88b a000 	strb.w	sl, [fp]
 800886c:	e775      	b.n	800875a <_dtoa_r+0x94a>
 800886e:	4638      	mov	r0, r7
 8008870:	e7ba      	b.n	80087e8 <_dtoa_r+0x9d8>
 8008872:	2201      	movs	r2, #1
 8008874:	e7e2      	b.n	800883c <_dtoa_r+0xa2c>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	db04      	blt.n	8008886 <_dtoa_r+0xa76>
 800887c:	9906      	ldr	r1, [sp, #24]
 800887e:	430b      	orrs	r3, r1
 8008880:	9904      	ldr	r1, [sp, #16]
 8008882:	430b      	orrs	r3, r1
 8008884:	d122      	bne.n	80088cc <_dtoa_r+0xabc>
 8008886:	2a00      	cmp	r2, #0
 8008888:	ddee      	ble.n	8008868 <_dtoa_r+0xa58>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	2201      	movs	r2, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f001 f8d5 	bl	8009a40 <__lshift>
 8008896:	4631      	mov	r1, r6
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	f001 f940 	bl	8009b20 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dc03      	bgt.n	80088ac <_dtoa_r+0xa9c>
 80088a4:	d1e0      	bne.n	8008868 <_dtoa_r+0xa58>
 80088a6:	f01a 0f01 	tst.w	sl, #1
 80088aa:	d0dd      	beq.n	8008868 <_dtoa_r+0xa58>
 80088ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088b0:	d1d7      	bne.n	8008862 <_dtoa_r+0xa52>
 80088b2:	2339      	movs	r3, #57	; 0x39
 80088b4:	f88b 3000 	strb.w	r3, [fp]
 80088b8:	462b      	mov	r3, r5
 80088ba:	461d      	mov	r5, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088c2:	2a39      	cmp	r2, #57	; 0x39
 80088c4:	d071      	beq.n	80089aa <_dtoa_r+0xb9a>
 80088c6:	3201      	adds	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e746      	b.n	800875a <_dtoa_r+0x94a>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	dd07      	ble.n	80088e0 <_dtoa_r+0xad0>
 80088d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088d4:	d0ed      	beq.n	80088b2 <_dtoa_r+0xaa2>
 80088d6:	f10a 0301 	add.w	r3, sl, #1
 80088da:	f88b 3000 	strb.w	r3, [fp]
 80088de:	e73c      	b.n	800875a <_dtoa_r+0x94a>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80088e6:	4599      	cmp	r9, r3
 80088e8:	d047      	beq.n	800897a <_dtoa_r+0xb6a>
 80088ea:	ee18 1a10 	vmov	r1, s16
 80088ee:	2300      	movs	r3, #0
 80088f0:	220a      	movs	r2, #10
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 feaa 	bl	800964c <__multadd>
 80088f8:	45b8      	cmp	r8, r7
 80088fa:	ee08 0a10 	vmov	s16, r0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	f04f 020a 	mov.w	r2, #10
 8008906:	4641      	mov	r1, r8
 8008908:	4620      	mov	r0, r4
 800890a:	d106      	bne.n	800891a <_dtoa_r+0xb0a>
 800890c:	f000 fe9e 	bl	800964c <__multadd>
 8008910:	4680      	mov	r8, r0
 8008912:	4607      	mov	r7, r0
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	e772      	b.n	8008800 <_dtoa_r+0x9f0>
 800891a:	f000 fe97 	bl	800964c <__multadd>
 800891e:	4639      	mov	r1, r7
 8008920:	4680      	mov	r8, r0
 8008922:	2300      	movs	r3, #0
 8008924:	220a      	movs	r2, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fe90 	bl	800964c <__multadd>
 800892c:	4607      	mov	r7, r0
 800892e:	e7f1      	b.n	8008914 <_dtoa_r+0xb04>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	9302      	str	r3, [sp, #8]
 8008934:	9d01      	ldr	r5, [sp, #4]
 8008936:	ee18 0a10 	vmov	r0, s16
 800893a:	4631      	mov	r1, r6
 800893c:	f7ff f9da 	bl	8007cf4 <quorem>
 8008940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	f805 ab01 	strb.w	sl, [r5], #1
 800894a:	1aea      	subs	r2, r5, r3
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	4293      	cmp	r3, r2
 8008950:	dd09      	ble.n	8008966 <_dtoa_r+0xb56>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fe76 	bl	800964c <__multadd>
 8008960:	ee08 0a10 	vmov	s16, r0
 8008964:	e7e7      	b.n	8008936 <_dtoa_r+0xb26>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfc8      	it	gt
 800896c:	461d      	movgt	r5, r3
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	bfd8      	it	le
 8008972:	2501      	movle	r5, #1
 8008974:	441d      	add	r5, r3
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f001 f85d 	bl	8009a40 <__lshift>
 8008986:	4631      	mov	r1, r6
 8008988:	ee08 0a10 	vmov	s16, r0
 800898c:	f001 f8c8 	bl	8009b20 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dc91      	bgt.n	80088b8 <_dtoa_r+0xaa8>
 8008994:	d102      	bne.n	800899c <_dtoa_r+0xb8c>
 8008996:	f01a 0f01 	tst.w	sl, #1
 800899a:	d18d      	bne.n	80088b8 <_dtoa_r+0xaa8>
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	d0fa      	beq.n	800899e <_dtoa_r+0xb8e>
 80089a8:	e6d7      	b.n	800875a <_dtoa_r+0x94a>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d184      	bne.n	80088ba <_dtoa_r+0xaaa>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	2331      	movs	r3, #49	; 0x31
 80089b8:	7013      	strb	r3, [r2, #0]
 80089ba:	e6ce      	b.n	800875a <_dtoa_r+0x94a>
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <_dtoa_r+0xbd4>)
 80089be:	f7ff ba95 	b.w	8007eec <_dtoa_r+0xdc>
 80089c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f47f aa6e 	bne.w	8007ea6 <_dtoa_r+0x96>
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <_dtoa_r+0xbd8>)
 80089cc:	f7ff ba8e 	b.w	8007eec <_dtoa_r+0xdc>
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dcae      	bgt.n	8008934 <_dtoa_r+0xb24>
 80089d6:	9b06      	ldr	r3, [sp, #24]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	f73f aea8 	bgt.w	800872e <_dtoa_r+0x91e>
 80089de:	e7a9      	b.n	8008934 <_dtoa_r+0xb24>
 80089e0:	0800b8c8 	.word	0x0800b8c8
 80089e4:	0800bb29 	.word	0x0800bb29
 80089e8:	0800b849 	.word	0x0800b849

080089ec <__sflush_r>:
 80089ec:	898a      	ldrh	r2, [r1, #12]
 80089ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f2:	4605      	mov	r5, r0
 80089f4:	0710      	lsls	r0, r2, #28
 80089f6:	460c      	mov	r4, r1
 80089f8:	d458      	bmi.n	8008aac <__sflush_r+0xc0>
 80089fa:	684b      	ldr	r3, [r1, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc05      	bgt.n	8008a0c <__sflush_r+0x20>
 8008a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dc02      	bgt.n	8008a0c <__sflush_r+0x20>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d0f9      	beq.n	8008a06 <__sflush_r+0x1a>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a18:	682f      	ldr	r7, [r5, #0]
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	d032      	beq.n	8008a84 <__sflush_r+0x98>
 8008a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	075a      	lsls	r2, r3, #29
 8008a24:	d505      	bpl.n	8008a32 <__sflush_r+0x46>
 8008a26:	6863      	ldr	r3, [r4, #4]
 8008a28:	1ac0      	subs	r0, r0, r3
 8008a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a2c:	b10b      	cbz	r3, 8008a32 <__sflush_r+0x46>
 8008a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a30:	1ac0      	subs	r0, r0, r3
 8008a32:	2300      	movs	r3, #0
 8008a34:	4602      	mov	r2, r0
 8008a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a38:	6a21      	ldr	r1, [r4, #32]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b0      	blx	r6
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	d106      	bne.n	8008a52 <__sflush_r+0x66>
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	291d      	cmp	r1, #29
 8008a48:	d82c      	bhi.n	8008aa4 <__sflush_r+0xb8>
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <__sflush_r+0x108>)
 8008a4c:	40ca      	lsrs	r2, r1
 8008a4e:	07d6      	lsls	r6, r2, #31
 8008a50:	d528      	bpl.n	8008aa4 <__sflush_r+0xb8>
 8008a52:	2200      	movs	r2, #0
 8008a54:	6062      	str	r2, [r4, #4]
 8008a56:	04d9      	lsls	r1, r3, #19
 8008a58:	6922      	ldr	r2, [r4, #16]
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	d504      	bpl.n	8008a68 <__sflush_r+0x7c>
 8008a5e:	1c42      	adds	r2, r0, #1
 8008a60:	d101      	bne.n	8008a66 <__sflush_r+0x7a>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b903      	cbnz	r3, 8008a68 <__sflush_r+0x7c>
 8008a66:	6560      	str	r0, [r4, #84]	; 0x54
 8008a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	d0ca      	beq.n	8008a06 <__sflush_r+0x1a>
 8008a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a74:	4299      	cmp	r1, r3
 8008a76:	d002      	beq.n	8008a7e <__sflush_r+0x92>
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f001 fa5d 	bl	8009f38 <_free_r>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	6360      	str	r0, [r4, #52]	; 0x34
 8008a82:	e7c1      	b.n	8008a08 <__sflush_r+0x1c>
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	2301      	movs	r3, #1
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b0      	blx	r6
 8008a8c:	1c41      	adds	r1, r0, #1
 8008a8e:	d1c7      	bne.n	8008a20 <__sflush_r+0x34>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0c4      	beq.n	8008a20 <__sflush_r+0x34>
 8008a96:	2b1d      	cmp	r3, #29
 8008a98:	d001      	beq.n	8008a9e <__sflush_r+0xb2>
 8008a9a:	2b16      	cmp	r3, #22
 8008a9c:	d101      	bne.n	8008aa2 <__sflush_r+0xb6>
 8008a9e:	602f      	str	r7, [r5, #0]
 8008aa0:	e7b1      	b.n	8008a06 <__sflush_r+0x1a>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7ad      	b.n	8008a08 <__sflush_r+0x1c>
 8008aac:	690f      	ldr	r7, [r1, #16]
 8008aae:	2f00      	cmp	r7, #0
 8008ab0:	d0a9      	beq.n	8008a06 <__sflush_r+0x1a>
 8008ab2:	0793      	lsls	r3, r2, #30
 8008ab4:	680e      	ldr	r6, [r1, #0]
 8008ab6:	bf08      	it	eq
 8008ab8:	694b      	ldreq	r3, [r1, #20]
 8008aba:	600f      	str	r7, [r1, #0]
 8008abc:	bf18      	it	ne
 8008abe:	2300      	movne	r3, #0
 8008ac0:	eba6 0807 	sub.w	r8, r6, r7
 8008ac4:	608b      	str	r3, [r1, #8]
 8008ac6:	f1b8 0f00 	cmp.w	r8, #0
 8008aca:	dd9c      	ble.n	8008a06 <__sflush_r+0x1a>
 8008acc:	6a21      	ldr	r1, [r4, #32]
 8008ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ad0:	4643      	mov	r3, r8
 8008ad2:	463a      	mov	r2, r7
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b0      	blx	r6
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dc06      	bgt.n	8008aea <__sflush_r+0xfe>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	e78e      	b.n	8008a08 <__sflush_r+0x1c>
 8008aea:	4407      	add	r7, r0
 8008aec:	eba8 0800 	sub.w	r8, r8, r0
 8008af0:	e7e9      	b.n	8008ac6 <__sflush_r+0xda>
 8008af2:	bf00      	nop
 8008af4:	20400001 	.word	0x20400001

08008af8 <_fflush_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	690b      	ldr	r3, [r1, #16]
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	b913      	cbnz	r3, 8008b08 <_fflush_r+0x10>
 8008b02:	2500      	movs	r5, #0
 8008b04:	4628      	mov	r0, r5
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	b118      	cbz	r0, 8008b12 <_fflush_r+0x1a>
 8008b0a:	6983      	ldr	r3, [r0, #24]
 8008b0c:	b90b      	cbnz	r3, 8008b12 <_fflush_r+0x1a>
 8008b0e:	f000 f887 	bl	8008c20 <__sinit>
 8008b12:	4b14      	ldr	r3, [pc, #80]	; (8008b64 <_fflush_r+0x6c>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	d11b      	bne.n	8008b50 <_fflush_r+0x58>
 8008b18:	686c      	ldr	r4, [r5, #4]
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0ef      	beq.n	8008b02 <_fflush_r+0xa>
 8008b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b24:	07d0      	lsls	r0, r2, #31
 8008b26:	d404      	bmi.n	8008b32 <_fflush_r+0x3a>
 8008b28:	0599      	lsls	r1, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_fflush_r+0x3a>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2e:	f000 fc88 	bl	8009442 <__retarget_lock_acquire_recursive>
 8008b32:	4628      	mov	r0, r5
 8008b34:	4621      	mov	r1, r4
 8008b36:	f7ff ff59 	bl	80089ec <__sflush_r>
 8008b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	4605      	mov	r5, r0
 8008b40:	d4e0      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	059b      	lsls	r3, r3, #22
 8008b46:	d4dd      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4a:	f000 fc7b 	bl	8009444 <__retarget_lock_release_recursive>
 8008b4e:	e7d9      	b.n	8008b04 <_fflush_r+0xc>
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <_fflush_r+0x70>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d101      	bne.n	8008b5a <_fflush_r+0x62>
 8008b56:	68ac      	ldr	r4, [r5, #8]
 8008b58:	e7df      	b.n	8008b1a <_fflush_r+0x22>
 8008b5a:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <_fflush_r+0x74>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	bf08      	it	eq
 8008b60:	68ec      	ldreq	r4, [r5, #12]
 8008b62:	e7da      	b.n	8008b1a <_fflush_r+0x22>
 8008b64:	0800b8fc 	.word	0x0800b8fc
 8008b68:	0800b91c 	.word	0x0800b91c
 8008b6c:	0800b8dc 	.word	0x0800b8dc

08008b70 <std>:
 8008b70:	2300      	movs	r3, #0
 8008b72:	b510      	push	{r4, lr}
 8008b74:	4604      	mov	r4, r0
 8008b76:	e9c0 3300 	strd	r3, r3, [r0]
 8008b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b7e:	6083      	str	r3, [r0, #8]
 8008b80:	8181      	strh	r1, [r0, #12]
 8008b82:	6643      	str	r3, [r0, #100]	; 0x64
 8008b84:	81c2      	strh	r2, [r0, #14]
 8008b86:	6183      	str	r3, [r0, #24]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	305c      	adds	r0, #92	; 0x5c
 8008b8e:	f7fd f947 	bl	8005e20 <memset>
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <std+0x38>)
 8008b94:	6263      	str	r3, [r4, #36]	; 0x24
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <std+0x3c>)
 8008b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <std+0x40>)
 8008b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <std+0x44>)
 8008ba0:	6224      	str	r4, [r4, #32]
 8008ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08006d11 	.word	0x08006d11
 8008bac:	08006d37 	.word	0x08006d37
 8008bb0:	08006d6f 	.word	0x08006d6f
 8008bb4:	08006d93 	.word	0x08006d93

08008bb8 <_cleanup_r>:
 8008bb8:	4901      	ldr	r1, [pc, #4]	; (8008bc0 <_cleanup_r+0x8>)
 8008bba:	f000 b8af 	b.w	8008d1c <_fwalk_reent>
 8008bbe:	bf00      	nop
 8008bc0:	08008af9 	.word	0x08008af9

08008bc4 <__sfmoreglue>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	2268      	movs	r2, #104	; 0x68
 8008bc8:	1e4d      	subs	r5, r1, #1
 8008bca:	4355      	muls	r5, r2
 8008bcc:	460e      	mov	r6, r1
 8008bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bd2:	f001 fa1d 	bl	800a010 <_malloc_r>
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	b140      	cbz	r0, 8008bec <__sfmoreglue+0x28>
 8008bda:	2100      	movs	r1, #0
 8008bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8008be0:	300c      	adds	r0, #12
 8008be2:	60a0      	str	r0, [r4, #8]
 8008be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008be8:	f7fd f91a 	bl	8005e20 <memset>
 8008bec:	4620      	mov	r0, r4
 8008bee:	bd70      	pop	{r4, r5, r6, pc}

08008bf0 <__sfp_lock_acquire>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sfp_lock_acquire+0x8>)
 8008bf2:	f000 bc26 	b.w	8009442 <__retarget_lock_acquire_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000895 	.word	0x20000895

08008bfc <__sfp_lock_release>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sfp_lock_release+0x8>)
 8008bfe:	f000 bc21 	b.w	8009444 <__retarget_lock_release_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000895 	.word	0x20000895

08008c08 <__sinit_lock_acquire>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sinit_lock_acquire+0x8>)
 8008c0a:	f000 bc1a 	b.w	8009442 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000896 	.word	0x20000896

08008c14 <__sinit_lock_release>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sinit_lock_release+0x8>)
 8008c16:	f000 bc15 	b.w	8009444 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000896 	.word	0x20000896

08008c20 <__sinit>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	f7ff fff0 	bl	8008c08 <__sinit_lock_acquire>
 8008c28:	69a3      	ldr	r3, [r4, #24]
 8008c2a:	b11b      	cbz	r3, 8008c34 <__sinit+0x14>
 8008c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c30:	f7ff bff0 	b.w	8008c14 <__sinit_lock_release>
 8008c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c38:	6523      	str	r3, [r4, #80]	; 0x50
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <__sinit+0x68>)
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <__sinit+0x6c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	bf04      	itt	eq
 8008c46:	2301      	moveq	r3, #1
 8008c48:	61a3      	streq	r3, [r4, #24]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f820 	bl	8008c90 <__sfp>
 8008c50:	6060      	str	r0, [r4, #4]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f81c 	bl	8008c90 <__sfp>
 8008c58:	60a0      	str	r0, [r4, #8]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 f818 	bl	8008c90 <__sfp>
 8008c60:	2200      	movs	r2, #0
 8008c62:	60e0      	str	r0, [r4, #12]
 8008c64:	2104      	movs	r1, #4
 8008c66:	6860      	ldr	r0, [r4, #4]
 8008c68:	f7ff ff82 	bl	8008b70 <std>
 8008c6c:	68a0      	ldr	r0, [r4, #8]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	2109      	movs	r1, #9
 8008c72:	f7ff ff7d 	bl	8008b70 <std>
 8008c76:	68e0      	ldr	r0, [r4, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	2112      	movs	r1, #18
 8008c7c:	f7ff ff78 	bl	8008b70 <std>
 8008c80:	2301      	movs	r3, #1
 8008c82:	61a3      	str	r3, [r4, #24]
 8008c84:	e7d2      	b.n	8008c2c <__sinit+0xc>
 8008c86:	bf00      	nop
 8008c88:	0800b6bc 	.word	0x0800b6bc
 8008c8c:	08008bb9 	.word	0x08008bb9

08008c90 <__sfp>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	4607      	mov	r7, r0
 8008c94:	f7ff ffac 	bl	8008bf0 <__sfp_lock_acquire>
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <__sfp+0x84>)
 8008c9a:	681e      	ldr	r6, [r3, #0]
 8008c9c:	69b3      	ldr	r3, [r6, #24]
 8008c9e:	b913      	cbnz	r3, 8008ca6 <__sfp+0x16>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7ff ffbd 	bl	8008c20 <__sinit>
 8008ca6:	3648      	adds	r6, #72	; 0x48
 8008ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	d503      	bpl.n	8008cb8 <__sfp+0x28>
 8008cb0:	6833      	ldr	r3, [r6, #0]
 8008cb2:	b30b      	cbz	r3, 8008cf8 <__sfp+0x68>
 8008cb4:	6836      	ldr	r6, [r6, #0]
 8008cb6:	e7f7      	b.n	8008ca8 <__sfp+0x18>
 8008cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cbc:	b9d5      	cbnz	r5, 8008cf4 <__sfp+0x64>
 8008cbe:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <__sfp+0x88>)
 8008cc0:	60e3      	str	r3, [r4, #12]
 8008cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8008cc8:	f000 fbba 	bl	8009440 <__retarget_lock_init_recursive>
 8008ccc:	f7ff ff96 	bl	8008bfc <__sfp_lock_release>
 8008cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cd8:	6025      	str	r5, [r4, #0]
 8008cda:	61a5      	str	r5, [r4, #24]
 8008cdc:	2208      	movs	r2, #8
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ce4:	f7fd f89c 	bl	8005e20 <memset>
 8008ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf4:	3468      	adds	r4, #104	; 0x68
 8008cf6:	e7d9      	b.n	8008cac <__sfp+0x1c>
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7ff ff62 	bl	8008bc4 <__sfmoreglue>
 8008d00:	4604      	mov	r4, r0
 8008d02:	6030      	str	r0, [r6, #0]
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d1d5      	bne.n	8008cb4 <__sfp+0x24>
 8008d08:	f7ff ff78 	bl	8008bfc <__sfp_lock_release>
 8008d0c:	230c      	movs	r3, #12
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	e7ee      	b.n	8008cf0 <__sfp+0x60>
 8008d12:	bf00      	nop
 8008d14:	0800b6bc 	.word	0x0800b6bc
 8008d18:	ffff0001 	.word	0xffff0001

08008d1c <_fwalk_reent>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4606      	mov	r6, r0
 8008d22:	4688      	mov	r8, r1
 8008d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d28:	2700      	movs	r7, #0
 8008d2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008d32:	d505      	bpl.n	8008d40 <_fwalk_reent+0x24>
 8008d34:	6824      	ldr	r4, [r4, #0]
 8008d36:	2c00      	cmp	r4, #0
 8008d38:	d1f7      	bne.n	8008d2a <_fwalk_reent+0xe>
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d40:	89ab      	ldrh	r3, [r5, #12]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d907      	bls.n	8008d56 <_fwalk_reent+0x3a>
 8008d46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	d003      	beq.n	8008d56 <_fwalk_reent+0x3a>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4630      	mov	r0, r6
 8008d52:	47c0      	blx	r8
 8008d54:	4307      	orrs	r7, r0
 8008d56:	3568      	adds	r5, #104	; 0x68
 8008d58:	e7e9      	b.n	8008d2e <_fwalk_reent+0x12>

08008d5a <rshift>:
 8008d5a:	6903      	ldr	r3, [r0, #16]
 8008d5c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d64:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d68:	f100 0414 	add.w	r4, r0, #20
 8008d6c:	dd45      	ble.n	8008dfa <rshift+0xa0>
 8008d6e:	f011 011f 	ands.w	r1, r1, #31
 8008d72:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d76:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d7a:	d10c      	bne.n	8008d96 <rshift+0x3c>
 8008d7c:	f100 0710 	add.w	r7, r0, #16
 8008d80:	4629      	mov	r1, r5
 8008d82:	42b1      	cmp	r1, r6
 8008d84:	d334      	bcc.n	8008df0 <rshift+0x96>
 8008d86:	1a9b      	subs	r3, r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	1eea      	subs	r2, r5, #3
 8008d8c:	4296      	cmp	r6, r2
 8008d8e:	bf38      	it	cc
 8008d90:	2300      	movcc	r3, #0
 8008d92:	4423      	add	r3, r4
 8008d94:	e015      	b.n	8008dc2 <rshift+0x68>
 8008d96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d9a:	f1c1 0820 	rsb	r8, r1, #32
 8008d9e:	40cf      	lsrs	r7, r1
 8008da0:	f105 0e04 	add.w	lr, r5, #4
 8008da4:	46a1      	mov	r9, r4
 8008da6:	4576      	cmp	r6, lr
 8008da8:	46f4      	mov	ip, lr
 8008daa:	d815      	bhi.n	8008dd8 <rshift+0x7e>
 8008dac:	1a9a      	subs	r2, r3, r2
 8008dae:	0092      	lsls	r2, r2, #2
 8008db0:	3a04      	subs	r2, #4
 8008db2:	3501      	adds	r5, #1
 8008db4:	42ae      	cmp	r6, r5
 8008db6:	bf38      	it	cc
 8008db8:	2200      	movcc	r2, #0
 8008dba:	18a3      	adds	r3, r4, r2
 8008dbc:	50a7      	str	r7, [r4, r2]
 8008dbe:	b107      	cbz	r7, 8008dc2 <rshift+0x68>
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	1b1a      	subs	r2, r3, r4
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dca:	bf08      	it	eq
 8008dcc:	2300      	moveq	r3, #0
 8008dce:	6102      	str	r2, [r0, #16]
 8008dd0:	bf08      	it	eq
 8008dd2:	6143      	streq	r3, [r0, #20]
 8008dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	f8dc c000 	ldr.w	ip, [ip]
 8008ddc:	fa0c fc08 	lsl.w	ip, ip, r8
 8008de0:	ea4c 0707 	orr.w	r7, ip, r7
 8008de4:	f849 7b04 	str.w	r7, [r9], #4
 8008de8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dec:	40cf      	lsrs	r7, r1
 8008dee:	e7da      	b.n	8008da6 <rshift+0x4c>
 8008df0:	f851 cb04 	ldr.w	ip, [r1], #4
 8008df4:	f847 cf04 	str.w	ip, [r7, #4]!
 8008df8:	e7c3      	b.n	8008d82 <rshift+0x28>
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	e7e1      	b.n	8008dc2 <rshift+0x68>

08008dfe <__hexdig_fun>:
 8008dfe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d802      	bhi.n	8008e0c <__hexdig_fun+0xe>
 8008e06:	3820      	subs	r0, #32
 8008e08:	b2c0      	uxtb	r0, r0
 8008e0a:	4770      	bx	lr
 8008e0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d801      	bhi.n	8008e18 <__hexdig_fun+0x1a>
 8008e14:	3847      	subs	r0, #71	; 0x47
 8008e16:	e7f7      	b.n	8008e08 <__hexdig_fun+0xa>
 8008e18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	d801      	bhi.n	8008e24 <__hexdig_fun+0x26>
 8008e20:	3827      	subs	r0, #39	; 0x27
 8008e22:	e7f1      	b.n	8008e08 <__hexdig_fun+0xa>
 8008e24:	2000      	movs	r0, #0
 8008e26:	4770      	bx	lr

08008e28 <__gethex>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ed2d 8b02 	vpush	{d8}
 8008e30:	b089      	sub	sp, #36	; 0x24
 8008e32:	ee08 0a10 	vmov	s16, r0
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	4bb4      	ldr	r3, [pc, #720]	; (800910c <__gethex+0x2e4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	468b      	mov	fp, r1
 8008e42:	4690      	mov	r8, r2
 8008e44:	f7f7 f9c4 	bl	80001d0 <strlen>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	f8db 2000 	ldr.w	r2, [fp]
 8008e4e:	4403      	add	r3, r0
 8008e50:	4682      	mov	sl, r0
 8008e52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	1c93      	adds	r3, r2, #2
 8008e5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e62:	32fe      	adds	r2, #254	; 0xfe
 8008e64:	18d1      	adds	r1, r2, r3
 8008e66:	461f      	mov	r7, r3
 8008e68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e6c:	9100      	str	r1, [sp, #0]
 8008e6e:	2830      	cmp	r0, #48	; 0x30
 8008e70:	d0f8      	beq.n	8008e64 <__gethex+0x3c>
 8008e72:	f7ff ffc4 	bl	8008dfe <__hexdig_fun>
 8008e76:	4604      	mov	r4, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d13a      	bne.n	8008ef2 <__gethex+0xca>
 8008e7c:	9901      	ldr	r1, [sp, #4]
 8008e7e:	4652      	mov	r2, sl
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7fd ff92 	bl	8006daa <strncmp>
 8008e86:	4605      	mov	r5, r0
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d168      	bne.n	8008f5e <__gethex+0x136>
 8008e8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e90:	eb07 060a 	add.w	r6, r7, sl
 8008e94:	f7ff ffb3 	bl	8008dfe <__hexdig_fun>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d062      	beq.n	8008f62 <__gethex+0x13a>
 8008e9c:	4633      	mov	r3, r6
 8008e9e:	7818      	ldrb	r0, [r3, #0]
 8008ea0:	2830      	cmp	r0, #48	; 0x30
 8008ea2:	461f      	mov	r7, r3
 8008ea4:	f103 0301 	add.w	r3, r3, #1
 8008ea8:	d0f9      	beq.n	8008e9e <__gethex+0x76>
 8008eaa:	f7ff ffa8 	bl	8008dfe <__hexdig_fun>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	fab0 f480 	clz	r4, r0
 8008eb4:	0964      	lsrs	r4, r4, #5
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	463a      	mov	r2, r7
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	7830      	ldrb	r0, [r6, #0]
 8008ec2:	f7ff ff9c 	bl	8008dfe <__hexdig_fun>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d1f8      	bne.n	8008ebc <__gethex+0x94>
 8008eca:	9901      	ldr	r1, [sp, #4]
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7fd ff6b 	bl	8006daa <strncmp>
 8008ed4:	b980      	cbnz	r0, 8008ef8 <__gethex+0xd0>
 8008ed6:	b94d      	cbnz	r5, 8008eec <__gethex+0xc4>
 8008ed8:	eb06 050a 	add.w	r5, r6, sl
 8008edc:	462a      	mov	r2, r5
 8008ede:	4616      	mov	r6, r2
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	7830      	ldrb	r0, [r6, #0]
 8008ee4:	f7ff ff8b 	bl	8008dfe <__hexdig_fun>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d1f8      	bne.n	8008ede <__gethex+0xb6>
 8008eec:	1bad      	subs	r5, r5, r6
 8008eee:	00ad      	lsls	r5, r5, #2
 8008ef0:	e004      	b.n	8008efc <__gethex+0xd4>
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	4625      	mov	r5, r4
 8008ef6:	e7e0      	b.n	8008eba <__gethex+0x92>
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d1f7      	bne.n	8008eec <__gethex+0xc4>
 8008efc:	7833      	ldrb	r3, [r6, #0]
 8008efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f02:	2b50      	cmp	r3, #80	; 0x50
 8008f04:	d13b      	bne.n	8008f7e <__gethex+0x156>
 8008f06:	7873      	ldrb	r3, [r6, #1]
 8008f08:	2b2b      	cmp	r3, #43	; 0x2b
 8008f0a:	d02c      	beq.n	8008f66 <__gethex+0x13e>
 8008f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f0e:	d02e      	beq.n	8008f6e <__gethex+0x146>
 8008f10:	1c71      	adds	r1, r6, #1
 8008f12:	f04f 0900 	mov.w	r9, #0
 8008f16:	7808      	ldrb	r0, [r1, #0]
 8008f18:	f7ff ff71 	bl	8008dfe <__hexdig_fun>
 8008f1c:	1e43      	subs	r3, r0, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b18      	cmp	r3, #24
 8008f22:	d82c      	bhi.n	8008f7e <__gethex+0x156>
 8008f24:	f1a0 0210 	sub.w	r2, r0, #16
 8008f28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f2c:	f7ff ff67 	bl	8008dfe <__hexdig_fun>
 8008f30:	1e43      	subs	r3, r0, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b18      	cmp	r3, #24
 8008f36:	d91d      	bls.n	8008f74 <__gethex+0x14c>
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	d000      	beq.n	8008f40 <__gethex+0x118>
 8008f3e:	4252      	negs	r2, r2
 8008f40:	4415      	add	r5, r2
 8008f42:	f8cb 1000 	str.w	r1, [fp]
 8008f46:	b1e4      	cbz	r4, 8008f82 <__gethex+0x15a>
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf14      	ite	ne
 8008f4e:	2700      	movne	r7, #0
 8008f50:	2706      	moveq	r7, #6
 8008f52:	4638      	mov	r0, r7
 8008f54:	b009      	add	sp, #36	; 0x24
 8008f56:	ecbd 8b02 	vpop	{d8}
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	463e      	mov	r6, r7
 8008f60:	4625      	mov	r5, r4
 8008f62:	2401      	movs	r4, #1
 8008f64:	e7ca      	b.n	8008efc <__gethex+0xd4>
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	1cb1      	adds	r1, r6, #2
 8008f6c:	e7d3      	b.n	8008f16 <__gethex+0xee>
 8008f6e:	f04f 0901 	mov.w	r9, #1
 8008f72:	e7fa      	b.n	8008f6a <__gethex+0x142>
 8008f74:	230a      	movs	r3, #10
 8008f76:	fb03 0202 	mla	r2, r3, r2, r0
 8008f7a:	3a10      	subs	r2, #16
 8008f7c:	e7d4      	b.n	8008f28 <__gethex+0x100>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	e7df      	b.n	8008f42 <__gethex+0x11a>
 8008f82:	1bf3      	subs	r3, r6, r7
 8008f84:	3b01      	subs	r3, #1
 8008f86:	4621      	mov	r1, r4
 8008f88:	2b07      	cmp	r3, #7
 8008f8a:	dc0b      	bgt.n	8008fa4 <__gethex+0x17c>
 8008f8c:	ee18 0a10 	vmov	r0, s16
 8008f90:	f000 fafa 	bl	8009588 <_Balloc>
 8008f94:	4604      	mov	r4, r0
 8008f96:	b940      	cbnz	r0, 8008faa <__gethex+0x182>
 8008f98:	4b5d      	ldr	r3, [pc, #372]	; (8009110 <__gethex+0x2e8>)
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	21de      	movs	r1, #222	; 0xde
 8008f9e:	485d      	ldr	r0, [pc, #372]	; (8009114 <__gethex+0x2ec>)
 8008fa0:	f001 ffea 	bl	800af78 <__assert_func>
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	105b      	asrs	r3, r3, #1
 8008fa8:	e7ee      	b.n	8008f88 <__gethex+0x160>
 8008faa:	f100 0914 	add.w	r9, r0, #20
 8008fae:	f04f 0b00 	mov.w	fp, #0
 8008fb2:	f1ca 0301 	rsb	r3, sl, #1
 8008fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fba:	f8cd b000 	str.w	fp, [sp]
 8008fbe:	9306      	str	r3, [sp, #24]
 8008fc0:	42b7      	cmp	r7, r6
 8008fc2:	d340      	bcc.n	8009046 <__gethex+0x21e>
 8008fc4:	9802      	ldr	r0, [sp, #8]
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	f840 3b04 	str.w	r3, [r0], #4
 8008fcc:	eba0 0009 	sub.w	r0, r0, r9
 8008fd0:	1080      	asrs	r0, r0, #2
 8008fd2:	0146      	lsls	r6, r0, #5
 8008fd4:	6120      	str	r0, [r4, #16]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fbc8 	bl	800976c <__hi0bits>
 8008fdc:	1a30      	subs	r0, r6, r0
 8008fde:	f8d8 6000 	ldr.w	r6, [r8]
 8008fe2:	42b0      	cmp	r0, r6
 8008fe4:	dd63      	ble.n	80090ae <__gethex+0x286>
 8008fe6:	1b87      	subs	r7, r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 ff6c 	bl	8009ec8 <__any_on>
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	b1a8      	cbz	r0, 8009020 <__gethex+0x1f8>
 8008ff4:	1e7b      	subs	r3, r7, #1
 8008ff6:	1159      	asrs	r1, r3, #5
 8008ff8:	f003 021f 	and.w	r2, r3, #31
 8008ffc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009000:	f04f 0a01 	mov.w	sl, #1
 8009004:	fa0a f202 	lsl.w	r2, sl, r2
 8009008:	420a      	tst	r2, r1
 800900a:	d009      	beq.n	8009020 <__gethex+0x1f8>
 800900c:	4553      	cmp	r3, sl
 800900e:	dd05      	ble.n	800901c <__gethex+0x1f4>
 8009010:	1eb9      	subs	r1, r7, #2
 8009012:	4620      	mov	r0, r4
 8009014:	f000 ff58 	bl	8009ec8 <__any_on>
 8009018:	2800      	cmp	r0, #0
 800901a:	d145      	bne.n	80090a8 <__gethex+0x280>
 800901c:	f04f 0a02 	mov.w	sl, #2
 8009020:	4639      	mov	r1, r7
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff fe99 	bl	8008d5a <rshift>
 8009028:	443d      	add	r5, r7
 800902a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800902e:	42ab      	cmp	r3, r5
 8009030:	da4c      	bge.n	80090cc <__gethex+0x2a4>
 8009032:	ee18 0a10 	vmov	r0, s16
 8009036:	4621      	mov	r1, r4
 8009038:	f000 fae6 	bl	8009608 <_Bfree>
 800903c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800903e:	2300      	movs	r3, #0
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	27a3      	movs	r7, #163	; 0xa3
 8009044:	e785      	b.n	8008f52 <__gethex+0x12a>
 8009046:	1e73      	subs	r3, r6, #1
 8009048:	9a05      	ldr	r2, [sp, #20]
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009050:	4293      	cmp	r3, r2
 8009052:	d019      	beq.n	8009088 <__gethex+0x260>
 8009054:	f1bb 0f20 	cmp.w	fp, #32
 8009058:	d107      	bne.n	800906a <__gethex+0x242>
 800905a:	9b02      	ldr	r3, [sp, #8]
 800905c:	9a00      	ldr	r2, [sp, #0]
 800905e:	f843 2b04 	str.w	r2, [r3], #4
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	469b      	mov	fp, r3
 800906a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800906e:	f7ff fec6 	bl	8008dfe <__hexdig_fun>
 8009072:	9b00      	ldr	r3, [sp, #0]
 8009074:	f000 000f 	and.w	r0, r0, #15
 8009078:	fa00 f00b 	lsl.w	r0, r0, fp
 800907c:	4303      	orrs	r3, r0
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	f10b 0b04 	add.w	fp, fp, #4
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	e00d      	b.n	80090a4 <__gethex+0x27c>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	9a06      	ldr	r2, [sp, #24]
 800908c:	4413      	add	r3, r2
 800908e:	42bb      	cmp	r3, r7
 8009090:	d3e0      	bcc.n	8009054 <__gethex+0x22c>
 8009092:	4618      	mov	r0, r3
 8009094:	9901      	ldr	r1, [sp, #4]
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	4652      	mov	r2, sl
 800909a:	f7fd fe86 	bl	8006daa <strncmp>
 800909e:	9b07      	ldr	r3, [sp, #28]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d1d7      	bne.n	8009054 <__gethex+0x22c>
 80090a4:	461e      	mov	r6, r3
 80090a6:	e78b      	b.n	8008fc0 <__gethex+0x198>
 80090a8:	f04f 0a03 	mov.w	sl, #3
 80090ac:	e7b8      	b.n	8009020 <__gethex+0x1f8>
 80090ae:	da0a      	bge.n	80090c6 <__gethex+0x29e>
 80090b0:	1a37      	subs	r7, r6, r0
 80090b2:	4621      	mov	r1, r4
 80090b4:	ee18 0a10 	vmov	r0, s16
 80090b8:	463a      	mov	r2, r7
 80090ba:	f000 fcc1 	bl	8009a40 <__lshift>
 80090be:	1bed      	subs	r5, r5, r7
 80090c0:	4604      	mov	r4, r0
 80090c2:	f100 0914 	add.w	r9, r0, #20
 80090c6:	f04f 0a00 	mov.w	sl, #0
 80090ca:	e7ae      	b.n	800902a <__gethex+0x202>
 80090cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80090d0:	42a8      	cmp	r0, r5
 80090d2:	dd72      	ble.n	80091ba <__gethex+0x392>
 80090d4:	1b45      	subs	r5, r0, r5
 80090d6:	42ae      	cmp	r6, r5
 80090d8:	dc36      	bgt.n	8009148 <__gethex+0x320>
 80090da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d02a      	beq.n	8009138 <__gethex+0x310>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d02c      	beq.n	8009140 <__gethex+0x318>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d11c      	bne.n	8009124 <__gethex+0x2fc>
 80090ea:	42ae      	cmp	r6, r5
 80090ec:	d11a      	bne.n	8009124 <__gethex+0x2fc>
 80090ee:	2e01      	cmp	r6, #1
 80090f0:	d112      	bne.n	8009118 <__gethex+0x2f0>
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	2301      	movs	r3, #1
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	f8c9 3000 	str.w	r3, [r9]
 8009102:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009104:	2762      	movs	r7, #98	; 0x62
 8009106:	601c      	str	r4, [r3, #0]
 8009108:	e723      	b.n	8008f52 <__gethex+0x12a>
 800910a:	bf00      	nop
 800910c:	0800b9a4 	.word	0x0800b9a4
 8009110:	0800b8c8 	.word	0x0800b8c8
 8009114:	0800b93c 	.word	0x0800b93c
 8009118:	1e71      	subs	r1, r6, #1
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fed4 	bl	8009ec8 <__any_on>
 8009120:	2800      	cmp	r0, #0
 8009122:	d1e6      	bne.n	80090f2 <__gethex+0x2ca>
 8009124:	ee18 0a10 	vmov	r0, s16
 8009128:	4621      	mov	r1, r4
 800912a:	f000 fa6d 	bl	8009608 <_Bfree>
 800912e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009130:	2300      	movs	r3, #0
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	2750      	movs	r7, #80	; 0x50
 8009136:	e70c      	b.n	8008f52 <__gethex+0x12a>
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f2      	bne.n	8009124 <__gethex+0x2fc>
 800913e:	e7d8      	b.n	80090f2 <__gethex+0x2ca>
 8009140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1d5      	bne.n	80090f2 <__gethex+0x2ca>
 8009146:	e7ed      	b.n	8009124 <__gethex+0x2fc>
 8009148:	1e6f      	subs	r7, r5, #1
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d131      	bne.n	80091b4 <__gethex+0x38c>
 8009150:	b127      	cbz	r7, 800915c <__gethex+0x334>
 8009152:	4639      	mov	r1, r7
 8009154:	4620      	mov	r0, r4
 8009156:	f000 feb7 	bl	8009ec8 <__any_on>
 800915a:	4682      	mov	sl, r0
 800915c:	117b      	asrs	r3, r7, #5
 800915e:	2101      	movs	r1, #1
 8009160:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009164:	f007 071f 	and.w	r7, r7, #31
 8009168:	fa01 f707 	lsl.w	r7, r1, r7
 800916c:	421f      	tst	r7, r3
 800916e:	4629      	mov	r1, r5
 8009170:	4620      	mov	r0, r4
 8009172:	bf18      	it	ne
 8009174:	f04a 0a02 	orrne.w	sl, sl, #2
 8009178:	1b76      	subs	r6, r6, r5
 800917a:	f7ff fdee 	bl	8008d5a <rshift>
 800917e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009182:	2702      	movs	r7, #2
 8009184:	f1ba 0f00 	cmp.w	sl, #0
 8009188:	d048      	beq.n	800921c <__gethex+0x3f4>
 800918a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d015      	beq.n	80091be <__gethex+0x396>
 8009192:	2b03      	cmp	r3, #3
 8009194:	d017      	beq.n	80091c6 <__gethex+0x39e>
 8009196:	2b01      	cmp	r3, #1
 8009198:	d109      	bne.n	80091ae <__gethex+0x386>
 800919a:	f01a 0f02 	tst.w	sl, #2
 800919e:	d006      	beq.n	80091ae <__gethex+0x386>
 80091a0:	f8d9 0000 	ldr.w	r0, [r9]
 80091a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80091a8:	f01a 0f01 	tst.w	sl, #1
 80091ac:	d10e      	bne.n	80091cc <__gethex+0x3a4>
 80091ae:	f047 0710 	orr.w	r7, r7, #16
 80091b2:	e033      	b.n	800921c <__gethex+0x3f4>
 80091b4:	f04f 0a01 	mov.w	sl, #1
 80091b8:	e7d0      	b.n	800915c <__gethex+0x334>
 80091ba:	2701      	movs	r7, #1
 80091bc:	e7e2      	b.n	8009184 <__gethex+0x35c>
 80091be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c0:	f1c3 0301 	rsb	r3, r3, #1
 80091c4:	9315      	str	r3, [sp, #84]	; 0x54
 80091c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0f0      	beq.n	80091ae <__gethex+0x386>
 80091cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091d0:	f104 0314 	add.w	r3, r4, #20
 80091d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091dc:	f04f 0c00 	mov.w	ip, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091ea:	d01c      	beq.n	8009226 <__gethex+0x3fe>
 80091ec:	3201      	adds	r2, #1
 80091ee:	6002      	str	r2, [r0, #0]
 80091f0:	2f02      	cmp	r7, #2
 80091f2:	f104 0314 	add.w	r3, r4, #20
 80091f6:	d13f      	bne.n	8009278 <__gethex+0x450>
 80091f8:	f8d8 2000 	ldr.w	r2, [r8]
 80091fc:	3a01      	subs	r2, #1
 80091fe:	42b2      	cmp	r2, r6
 8009200:	d10a      	bne.n	8009218 <__gethex+0x3f0>
 8009202:	1171      	asrs	r1, r6, #5
 8009204:	2201      	movs	r2, #1
 8009206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800920a:	f006 061f 	and.w	r6, r6, #31
 800920e:	fa02 f606 	lsl.w	r6, r2, r6
 8009212:	421e      	tst	r6, r3
 8009214:	bf18      	it	ne
 8009216:	4617      	movne	r7, r2
 8009218:	f047 0720 	orr.w	r7, r7, #32
 800921c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800921e:	601c      	str	r4, [r3, #0]
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	601d      	str	r5, [r3, #0]
 8009224:	e695      	b.n	8008f52 <__gethex+0x12a>
 8009226:	4299      	cmp	r1, r3
 8009228:	f843 cc04 	str.w	ip, [r3, #-4]
 800922c:	d8d8      	bhi.n	80091e0 <__gethex+0x3b8>
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	459b      	cmp	fp, r3
 8009232:	db19      	blt.n	8009268 <__gethex+0x440>
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	ee18 0a10 	vmov	r0, s16
 800923a:	3101      	adds	r1, #1
 800923c:	f000 f9a4 	bl	8009588 <_Balloc>
 8009240:	4681      	mov	r9, r0
 8009242:	b918      	cbnz	r0, 800924c <__gethex+0x424>
 8009244:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <__gethex+0x488>)
 8009246:	4602      	mov	r2, r0
 8009248:	2184      	movs	r1, #132	; 0x84
 800924a:	e6a8      	b.n	8008f9e <__gethex+0x176>
 800924c:	6922      	ldr	r2, [r4, #16]
 800924e:	3202      	adds	r2, #2
 8009250:	f104 010c 	add.w	r1, r4, #12
 8009254:	0092      	lsls	r2, r2, #2
 8009256:	300c      	adds	r0, #12
 8009258:	f000 f988 	bl	800956c <memcpy>
 800925c:	4621      	mov	r1, r4
 800925e:	ee18 0a10 	vmov	r0, s16
 8009262:	f000 f9d1 	bl	8009608 <_Bfree>
 8009266:	464c      	mov	r4, r9
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009270:	6122      	str	r2, [r4, #16]
 8009272:	2201      	movs	r2, #1
 8009274:	615a      	str	r2, [r3, #20]
 8009276:	e7bb      	b.n	80091f0 <__gethex+0x3c8>
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	455a      	cmp	r2, fp
 800927c:	dd0b      	ble.n	8009296 <__gethex+0x46e>
 800927e:	2101      	movs	r1, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fd6a 	bl	8008d5a <rshift>
 8009286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800928a:	3501      	adds	r5, #1
 800928c:	42ab      	cmp	r3, r5
 800928e:	f6ff aed0 	blt.w	8009032 <__gethex+0x20a>
 8009292:	2701      	movs	r7, #1
 8009294:	e7c0      	b.n	8009218 <__gethex+0x3f0>
 8009296:	f016 061f 	ands.w	r6, r6, #31
 800929a:	d0fa      	beq.n	8009292 <__gethex+0x46a>
 800929c:	4453      	add	r3, sl
 800929e:	f1c6 0620 	rsb	r6, r6, #32
 80092a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092a6:	f000 fa61 	bl	800976c <__hi0bits>
 80092aa:	42b0      	cmp	r0, r6
 80092ac:	dbe7      	blt.n	800927e <__gethex+0x456>
 80092ae:	e7f0      	b.n	8009292 <__gethex+0x46a>
 80092b0:	0800b8c8 	.word	0x0800b8c8

080092b4 <L_shift>:
 80092b4:	f1c2 0208 	rsb	r2, r2, #8
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	f1c2 0620 	rsb	r6, r2, #32
 80092c0:	6843      	ldr	r3, [r0, #4]
 80092c2:	6804      	ldr	r4, [r0, #0]
 80092c4:	fa03 f506 	lsl.w	r5, r3, r6
 80092c8:	432c      	orrs	r4, r5
 80092ca:	40d3      	lsrs	r3, r2
 80092cc:	6004      	str	r4, [r0, #0]
 80092ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80092d2:	4288      	cmp	r0, r1
 80092d4:	d3f4      	bcc.n	80092c0 <L_shift+0xc>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <__match>:
 80092d8:	b530      	push	{r4, r5, lr}
 80092da:	6803      	ldr	r3, [r0, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e2:	b914      	cbnz	r4, 80092ea <__match+0x12>
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	2001      	movs	r0, #1
 80092e8:	bd30      	pop	{r4, r5, pc}
 80092ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092f2:	2d19      	cmp	r5, #25
 80092f4:	bf98      	it	ls
 80092f6:	3220      	addls	r2, #32
 80092f8:	42a2      	cmp	r2, r4
 80092fa:	d0f0      	beq.n	80092de <__match+0x6>
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7f3      	b.n	80092e8 <__match+0x10>

08009300 <__hexnan>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	115e      	asrs	r6, r3, #5
 8009308:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800930c:	f013 031f 	ands.w	r3, r3, #31
 8009310:	b087      	sub	sp, #28
 8009312:	bf18      	it	ne
 8009314:	3604      	addne	r6, #4
 8009316:	2500      	movs	r5, #0
 8009318:	1f37      	subs	r7, r6, #4
 800931a:	4690      	mov	r8, r2
 800931c:	6802      	ldr	r2, [r0, #0]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	4682      	mov	sl, r0
 8009322:	f846 5c04 	str.w	r5, [r6, #-4]
 8009326:	46b9      	mov	r9, r7
 8009328:	463c      	mov	r4, r7
 800932a:	9502      	str	r5, [sp, #8]
 800932c:	46ab      	mov	fp, r5
 800932e:	7851      	ldrb	r1, [r2, #1]
 8009330:	1c53      	adds	r3, r2, #1
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	b341      	cbz	r1, 8009388 <__hexnan+0x88>
 8009336:	4608      	mov	r0, r1
 8009338:	9205      	str	r2, [sp, #20]
 800933a:	9104      	str	r1, [sp, #16]
 800933c:	f7ff fd5f 	bl	8008dfe <__hexdig_fun>
 8009340:	2800      	cmp	r0, #0
 8009342:	d14f      	bne.n	80093e4 <__hexnan+0xe4>
 8009344:	9904      	ldr	r1, [sp, #16]
 8009346:	9a05      	ldr	r2, [sp, #20]
 8009348:	2920      	cmp	r1, #32
 800934a:	d818      	bhi.n	800937e <__hexnan+0x7e>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	459b      	cmp	fp, r3
 8009350:	dd13      	ble.n	800937a <__hexnan+0x7a>
 8009352:	454c      	cmp	r4, r9
 8009354:	d206      	bcs.n	8009364 <__hexnan+0x64>
 8009356:	2d07      	cmp	r5, #7
 8009358:	dc04      	bgt.n	8009364 <__hexnan+0x64>
 800935a:	462a      	mov	r2, r5
 800935c:	4649      	mov	r1, r9
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff ffa8 	bl	80092b4 <L_shift>
 8009364:	4544      	cmp	r4, r8
 8009366:	d950      	bls.n	800940a <__hexnan+0x10a>
 8009368:	2300      	movs	r3, #0
 800936a:	f1a4 0904 	sub.w	r9, r4, #4
 800936e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009372:	f8cd b008 	str.w	fp, [sp, #8]
 8009376:	464c      	mov	r4, r9
 8009378:	461d      	mov	r5, r3
 800937a:	9a03      	ldr	r2, [sp, #12]
 800937c:	e7d7      	b.n	800932e <__hexnan+0x2e>
 800937e:	2929      	cmp	r1, #41	; 0x29
 8009380:	d156      	bne.n	8009430 <__hexnan+0x130>
 8009382:	3202      	adds	r2, #2
 8009384:	f8ca 2000 	str.w	r2, [sl]
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	d050      	beq.n	8009430 <__hexnan+0x130>
 800938e:	454c      	cmp	r4, r9
 8009390:	d206      	bcs.n	80093a0 <__hexnan+0xa0>
 8009392:	2d07      	cmp	r5, #7
 8009394:	dc04      	bgt.n	80093a0 <__hexnan+0xa0>
 8009396:	462a      	mov	r2, r5
 8009398:	4649      	mov	r1, r9
 800939a:	4620      	mov	r0, r4
 800939c:	f7ff ff8a 	bl	80092b4 <L_shift>
 80093a0:	4544      	cmp	r4, r8
 80093a2:	d934      	bls.n	800940e <__hexnan+0x10e>
 80093a4:	f1a8 0204 	sub.w	r2, r8, #4
 80093a8:	4623      	mov	r3, r4
 80093aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80093b2:	429f      	cmp	r7, r3
 80093b4:	d2f9      	bcs.n	80093aa <__hexnan+0xaa>
 80093b6:	1b3b      	subs	r3, r7, r4
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	3304      	adds	r3, #4
 80093be:	3401      	adds	r4, #1
 80093c0:	3e03      	subs	r6, #3
 80093c2:	42b4      	cmp	r4, r6
 80093c4:	bf88      	it	hi
 80093c6:	2304      	movhi	r3, #4
 80093c8:	4443      	add	r3, r8
 80093ca:	2200      	movs	r2, #0
 80093cc:	f843 2b04 	str.w	r2, [r3], #4
 80093d0:	429f      	cmp	r7, r3
 80093d2:	d2fb      	bcs.n	80093cc <__hexnan+0xcc>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	b91b      	cbnz	r3, 80093e0 <__hexnan+0xe0>
 80093d8:	4547      	cmp	r7, r8
 80093da:	d127      	bne.n	800942c <__hexnan+0x12c>
 80093dc:	2301      	movs	r3, #1
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	2005      	movs	r0, #5
 80093e2:	e026      	b.n	8009432 <__hexnan+0x132>
 80093e4:	3501      	adds	r5, #1
 80093e6:	2d08      	cmp	r5, #8
 80093e8:	f10b 0b01 	add.w	fp, fp, #1
 80093ec:	dd06      	ble.n	80093fc <__hexnan+0xfc>
 80093ee:	4544      	cmp	r4, r8
 80093f0:	d9c3      	bls.n	800937a <__hexnan+0x7a>
 80093f2:	2300      	movs	r3, #0
 80093f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f8:	2501      	movs	r5, #1
 80093fa:	3c04      	subs	r4, #4
 80093fc:	6822      	ldr	r2, [r4, #0]
 80093fe:	f000 000f 	and.w	r0, r0, #15
 8009402:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009406:	6022      	str	r2, [r4, #0]
 8009408:	e7b7      	b.n	800937a <__hexnan+0x7a>
 800940a:	2508      	movs	r5, #8
 800940c:	e7b5      	b.n	800937a <__hexnan+0x7a>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0df      	beq.n	80093d4 <__hexnan+0xd4>
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	f1c3 0320 	rsb	r3, r3, #32
 800941c:	fa22 f303 	lsr.w	r3, r2, r3
 8009420:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009424:	401a      	ands	r2, r3
 8009426:	f846 2c04 	str.w	r2, [r6, #-4]
 800942a:	e7d3      	b.n	80093d4 <__hexnan+0xd4>
 800942c:	3f04      	subs	r7, #4
 800942e:	e7d1      	b.n	80093d4 <__hexnan+0xd4>
 8009430:	2004      	movs	r0, #4
 8009432:	b007      	add	sp, #28
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009438 <_localeconv_r>:
 8009438:	4800      	ldr	r0, [pc, #0]	; (800943c <_localeconv_r+0x4>)
 800943a:	4770      	bx	lr
 800943c:	20000194 	.word	0x20000194

08009440 <__retarget_lock_init_recursive>:
 8009440:	4770      	bx	lr

08009442 <__retarget_lock_acquire_recursive>:
 8009442:	4770      	bx	lr

08009444 <__retarget_lock_release_recursive>:
 8009444:	4770      	bx	lr
	...

08009448 <_lseek_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_lseek_r+0x20>)
 800944c:	4604      	mov	r4, r0
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	2200      	movs	r2, #0
 8009454:	602a      	str	r2, [r5, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f7f8 ffb0 	bl	80023bc <_lseek>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_lseek_r+0x1e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_lseek_r+0x1e>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	200008a0 	.word	0x200008a0

0800946c <__swhatbuf_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	460e      	mov	r6, r1
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	2900      	cmp	r1, #0
 8009476:	b096      	sub	sp, #88	; 0x58
 8009478:	4614      	mov	r4, r2
 800947a:	461d      	mov	r5, r3
 800947c:	da08      	bge.n	8009490 <__swhatbuf_r+0x24>
 800947e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	061a      	lsls	r2, r3, #24
 8009488:	d410      	bmi.n	80094ac <__swhatbuf_r+0x40>
 800948a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800948e:	e00e      	b.n	80094ae <__swhatbuf_r+0x42>
 8009490:	466a      	mov	r2, sp
 8009492:	f001 fda1 	bl	800afd8 <_fstat_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	dbf1      	blt.n	800947e <__swhatbuf_r+0x12>
 800949a:	9a01      	ldr	r2, [sp, #4]
 800949c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094a4:	425a      	negs	r2, r3
 80094a6:	415a      	adcs	r2, r3
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	e7ee      	b.n	800948a <__swhatbuf_r+0x1e>
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	2000      	movs	r0, #0
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	b016      	add	sp, #88	; 0x58
 80094b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080094b8 <__smakebuf_r>:
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094bc:	079d      	lsls	r5, r3, #30
 80094be:	4606      	mov	r6, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	d507      	bpl.n	80094d4 <__smakebuf_r+0x1c>
 80094c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	2301      	movs	r3, #1
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	b002      	add	sp, #8
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	ab01      	add	r3, sp, #4
 80094d6:	466a      	mov	r2, sp
 80094d8:	f7ff ffc8 	bl	800946c <__swhatbuf_r>
 80094dc:	9900      	ldr	r1, [sp, #0]
 80094de:	4605      	mov	r5, r0
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 fd95 	bl	800a010 <_malloc_r>
 80094e6:	b948      	cbnz	r0, 80094fc <__smakebuf_r+0x44>
 80094e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ec:	059a      	lsls	r2, r3, #22
 80094ee:	d4ef      	bmi.n	80094d0 <__smakebuf_r+0x18>
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7e3      	b.n	80094c4 <__smakebuf_r+0xc>
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <__smakebuf_r+0x7c>)
 80094fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	6020      	str	r0, [r4, #0]
 8009504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	6163      	str	r3, [r4, #20]
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	6120      	str	r0, [r4, #16]
 8009512:	b15b      	cbz	r3, 800952c <__smakebuf_r+0x74>
 8009514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009518:	4630      	mov	r0, r6
 800951a:	f001 fd6f 	bl	800affc <_isatty_r>
 800951e:	b128      	cbz	r0, 800952c <__smakebuf_r+0x74>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	89a0      	ldrh	r0, [r4, #12]
 800952e:	4305      	orrs	r5, r0
 8009530:	81a5      	strh	r5, [r4, #12]
 8009532:	e7cd      	b.n	80094d0 <__smakebuf_r+0x18>
 8009534:	08008bb9 	.word	0x08008bb9

08009538 <malloc>:
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <malloc+0xc>)
 800953a:	4601      	mov	r1, r0
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	f000 bd67 	b.w	800a010 <_malloc_r>
 8009542:	bf00      	nop
 8009544:	2000003c 	.word	0x2000003c

08009548 <__ascii_mbtowc>:
 8009548:	b082      	sub	sp, #8
 800954a:	b901      	cbnz	r1, 800954e <__ascii_mbtowc+0x6>
 800954c:	a901      	add	r1, sp, #4
 800954e:	b142      	cbz	r2, 8009562 <__ascii_mbtowc+0x1a>
 8009550:	b14b      	cbz	r3, 8009566 <__ascii_mbtowc+0x1e>
 8009552:	7813      	ldrb	r3, [r2, #0]
 8009554:	600b      	str	r3, [r1, #0]
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	1e10      	subs	r0, r2, #0
 800955a:	bf18      	it	ne
 800955c:	2001      	movne	r0, #1
 800955e:	b002      	add	sp, #8
 8009560:	4770      	bx	lr
 8009562:	4610      	mov	r0, r2
 8009564:	e7fb      	b.n	800955e <__ascii_mbtowc+0x16>
 8009566:	f06f 0001 	mvn.w	r0, #1
 800956a:	e7f8      	b.n	800955e <__ascii_mbtowc+0x16>

0800956c <memcpy>:
 800956c:	440a      	add	r2, r1
 800956e:	4291      	cmp	r1, r2
 8009570:	f100 33ff 	add.w	r3, r0, #4294967295
 8009574:	d100      	bne.n	8009578 <memcpy+0xc>
 8009576:	4770      	bx	lr
 8009578:	b510      	push	{r4, lr}
 800957a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009582:	4291      	cmp	r1, r2
 8009584:	d1f9      	bne.n	800957a <memcpy+0xe>
 8009586:	bd10      	pop	{r4, pc}

08009588 <_Balloc>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800958c:	4604      	mov	r4, r0
 800958e:	460d      	mov	r5, r1
 8009590:	b976      	cbnz	r6, 80095b0 <_Balloc+0x28>
 8009592:	2010      	movs	r0, #16
 8009594:	f7ff ffd0 	bl	8009538 <malloc>
 8009598:	4602      	mov	r2, r0
 800959a:	6260      	str	r0, [r4, #36]	; 0x24
 800959c:	b920      	cbnz	r0, 80095a8 <_Balloc+0x20>
 800959e:	4b18      	ldr	r3, [pc, #96]	; (8009600 <_Balloc+0x78>)
 80095a0:	4818      	ldr	r0, [pc, #96]	; (8009604 <_Balloc+0x7c>)
 80095a2:	2166      	movs	r1, #102	; 0x66
 80095a4:	f001 fce8 	bl	800af78 <__assert_func>
 80095a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095ac:	6006      	str	r6, [r0, #0]
 80095ae:	60c6      	str	r6, [r0, #12]
 80095b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095b2:	68f3      	ldr	r3, [r6, #12]
 80095b4:	b183      	cbz	r3, 80095d8 <_Balloc+0x50>
 80095b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095be:	b9b8      	cbnz	r0, 80095f0 <_Balloc+0x68>
 80095c0:	2101      	movs	r1, #1
 80095c2:	fa01 f605 	lsl.w	r6, r1, r5
 80095c6:	1d72      	adds	r2, r6, #5
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fc9d 	bl	8009f0a <_calloc_r>
 80095d0:	b160      	cbz	r0, 80095ec <_Balloc+0x64>
 80095d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095d6:	e00e      	b.n	80095f6 <_Balloc+0x6e>
 80095d8:	2221      	movs	r2, #33	; 0x21
 80095da:	2104      	movs	r1, #4
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fc94 	bl	8009f0a <_calloc_r>
 80095e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e4:	60f0      	str	r0, [r6, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e4      	bne.n	80095b6 <_Balloc+0x2e>
 80095ec:	2000      	movs	r0, #0
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	6802      	ldr	r2, [r0, #0]
 80095f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095f6:	2300      	movs	r3, #0
 80095f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095fc:	e7f7      	b.n	80095ee <_Balloc+0x66>
 80095fe:	bf00      	nop
 8009600:	0800b856 	.word	0x0800b856
 8009604:	0800b9b8 	.word	0x0800b9b8

08009608 <_Bfree>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800960c:	4605      	mov	r5, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b976      	cbnz	r6, 8009630 <_Bfree+0x28>
 8009612:	2010      	movs	r0, #16
 8009614:	f7ff ff90 	bl	8009538 <malloc>
 8009618:	4602      	mov	r2, r0
 800961a:	6268      	str	r0, [r5, #36]	; 0x24
 800961c:	b920      	cbnz	r0, 8009628 <_Bfree+0x20>
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <_Bfree+0x3c>)
 8009620:	4809      	ldr	r0, [pc, #36]	; (8009648 <_Bfree+0x40>)
 8009622:	218a      	movs	r1, #138	; 0x8a
 8009624:	f001 fca8 	bl	800af78 <__assert_func>
 8009628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800962c:	6006      	str	r6, [r0, #0]
 800962e:	60c6      	str	r6, [r0, #12]
 8009630:	b13c      	cbz	r4, 8009642 <_Bfree+0x3a>
 8009632:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009634:	6862      	ldr	r2, [r4, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800963c:	6021      	str	r1, [r4, #0]
 800963e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	0800b856 	.word	0x0800b856
 8009648:	0800b9b8 	.word	0x0800b9b8

0800964c <__multadd>:
 800964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009650:	690d      	ldr	r5, [r1, #16]
 8009652:	4607      	mov	r7, r0
 8009654:	460c      	mov	r4, r1
 8009656:	461e      	mov	r6, r3
 8009658:	f101 0c14 	add.w	ip, r1, #20
 800965c:	2000      	movs	r0, #0
 800965e:	f8dc 3000 	ldr.w	r3, [ip]
 8009662:	b299      	uxth	r1, r3
 8009664:	fb02 6101 	mla	r1, r2, r1, r6
 8009668:	0c1e      	lsrs	r6, r3, #16
 800966a:	0c0b      	lsrs	r3, r1, #16
 800966c:	fb02 3306 	mla	r3, r2, r6, r3
 8009670:	b289      	uxth	r1, r1
 8009672:	3001      	adds	r0, #1
 8009674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009678:	4285      	cmp	r5, r0
 800967a:	f84c 1b04 	str.w	r1, [ip], #4
 800967e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009682:	dcec      	bgt.n	800965e <__multadd+0x12>
 8009684:	b30e      	cbz	r6, 80096ca <__multadd+0x7e>
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	42ab      	cmp	r3, r5
 800968a:	dc19      	bgt.n	80096c0 <__multadd+0x74>
 800968c:	6861      	ldr	r1, [r4, #4]
 800968e:	4638      	mov	r0, r7
 8009690:	3101      	adds	r1, #1
 8009692:	f7ff ff79 	bl	8009588 <_Balloc>
 8009696:	4680      	mov	r8, r0
 8009698:	b928      	cbnz	r0, 80096a6 <__multadd+0x5a>
 800969a:	4602      	mov	r2, r0
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <__multadd+0x84>)
 800969e:	480d      	ldr	r0, [pc, #52]	; (80096d4 <__multadd+0x88>)
 80096a0:	21b5      	movs	r1, #181	; 0xb5
 80096a2:	f001 fc69 	bl	800af78 <__assert_func>
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	3202      	adds	r2, #2
 80096aa:	f104 010c 	add.w	r1, r4, #12
 80096ae:	0092      	lsls	r2, r2, #2
 80096b0:	300c      	adds	r0, #12
 80096b2:	f7ff ff5b 	bl	800956c <memcpy>
 80096b6:	4621      	mov	r1, r4
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff ffa5 	bl	8009608 <_Bfree>
 80096be:	4644      	mov	r4, r8
 80096c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096c4:	3501      	adds	r5, #1
 80096c6:	615e      	str	r6, [r3, #20]
 80096c8:	6125      	str	r5, [r4, #16]
 80096ca:	4620      	mov	r0, r4
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	0800b8c8 	.word	0x0800b8c8
 80096d4:	0800b9b8 	.word	0x0800b9b8

080096d8 <__s2b>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	460c      	mov	r4, r1
 80096de:	4615      	mov	r5, r2
 80096e0:	461f      	mov	r7, r3
 80096e2:	2209      	movs	r2, #9
 80096e4:	3308      	adds	r3, #8
 80096e6:	4606      	mov	r6, r0
 80096e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ec:	2100      	movs	r1, #0
 80096ee:	2201      	movs	r2, #1
 80096f0:	429a      	cmp	r2, r3
 80096f2:	db09      	blt.n	8009708 <__s2b+0x30>
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff ff47 	bl	8009588 <_Balloc>
 80096fa:	b940      	cbnz	r0, 800970e <__s2b+0x36>
 80096fc:	4602      	mov	r2, r0
 80096fe:	4b19      	ldr	r3, [pc, #100]	; (8009764 <__s2b+0x8c>)
 8009700:	4819      	ldr	r0, [pc, #100]	; (8009768 <__s2b+0x90>)
 8009702:	21ce      	movs	r1, #206	; 0xce
 8009704:	f001 fc38 	bl	800af78 <__assert_func>
 8009708:	0052      	lsls	r2, r2, #1
 800970a:	3101      	adds	r1, #1
 800970c:	e7f0      	b.n	80096f0 <__s2b+0x18>
 800970e:	9b08      	ldr	r3, [sp, #32]
 8009710:	6143      	str	r3, [r0, #20]
 8009712:	2d09      	cmp	r5, #9
 8009714:	f04f 0301 	mov.w	r3, #1
 8009718:	6103      	str	r3, [r0, #16]
 800971a:	dd16      	ble.n	800974a <__s2b+0x72>
 800971c:	f104 0909 	add.w	r9, r4, #9
 8009720:	46c8      	mov	r8, r9
 8009722:	442c      	add	r4, r5
 8009724:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009728:	4601      	mov	r1, r0
 800972a:	3b30      	subs	r3, #48	; 0x30
 800972c:	220a      	movs	r2, #10
 800972e:	4630      	mov	r0, r6
 8009730:	f7ff ff8c 	bl	800964c <__multadd>
 8009734:	45a0      	cmp	r8, r4
 8009736:	d1f5      	bne.n	8009724 <__s2b+0x4c>
 8009738:	f1a5 0408 	sub.w	r4, r5, #8
 800973c:	444c      	add	r4, r9
 800973e:	1b2d      	subs	r5, r5, r4
 8009740:	1963      	adds	r3, r4, r5
 8009742:	42bb      	cmp	r3, r7
 8009744:	db04      	blt.n	8009750 <__s2b+0x78>
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	340a      	adds	r4, #10
 800974c:	2509      	movs	r5, #9
 800974e:	e7f6      	b.n	800973e <__s2b+0x66>
 8009750:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009754:	4601      	mov	r1, r0
 8009756:	3b30      	subs	r3, #48	; 0x30
 8009758:	220a      	movs	r2, #10
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff76 	bl	800964c <__multadd>
 8009760:	e7ee      	b.n	8009740 <__s2b+0x68>
 8009762:	bf00      	nop
 8009764:	0800b8c8 	.word	0x0800b8c8
 8009768:	0800b9b8 	.word	0x0800b9b8

0800976c <__hi0bits>:
 800976c:	0c03      	lsrs	r3, r0, #16
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	b9d3      	cbnz	r3, 80097a8 <__hi0bits+0x3c>
 8009772:	0400      	lsls	r0, r0, #16
 8009774:	2310      	movs	r3, #16
 8009776:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800977a:	bf04      	itt	eq
 800977c:	0200      	lsleq	r0, r0, #8
 800977e:	3308      	addeq	r3, #8
 8009780:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009784:	bf04      	itt	eq
 8009786:	0100      	lsleq	r0, r0, #4
 8009788:	3304      	addeq	r3, #4
 800978a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800978e:	bf04      	itt	eq
 8009790:	0080      	lsleq	r0, r0, #2
 8009792:	3302      	addeq	r3, #2
 8009794:	2800      	cmp	r0, #0
 8009796:	db05      	blt.n	80097a4 <__hi0bits+0x38>
 8009798:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800979c:	f103 0301 	add.w	r3, r3, #1
 80097a0:	bf08      	it	eq
 80097a2:	2320      	moveq	r3, #32
 80097a4:	4618      	mov	r0, r3
 80097a6:	4770      	bx	lr
 80097a8:	2300      	movs	r3, #0
 80097aa:	e7e4      	b.n	8009776 <__hi0bits+0xa>

080097ac <__lo0bits>:
 80097ac:	6803      	ldr	r3, [r0, #0]
 80097ae:	f013 0207 	ands.w	r2, r3, #7
 80097b2:	4601      	mov	r1, r0
 80097b4:	d00b      	beq.n	80097ce <__lo0bits+0x22>
 80097b6:	07da      	lsls	r2, r3, #31
 80097b8:	d423      	bmi.n	8009802 <__lo0bits+0x56>
 80097ba:	0798      	lsls	r0, r3, #30
 80097bc:	bf49      	itett	mi
 80097be:	085b      	lsrmi	r3, r3, #1
 80097c0:	089b      	lsrpl	r3, r3, #2
 80097c2:	2001      	movmi	r0, #1
 80097c4:	600b      	strmi	r3, [r1, #0]
 80097c6:	bf5c      	itt	pl
 80097c8:	600b      	strpl	r3, [r1, #0]
 80097ca:	2002      	movpl	r0, #2
 80097cc:	4770      	bx	lr
 80097ce:	b298      	uxth	r0, r3
 80097d0:	b9a8      	cbnz	r0, 80097fe <__lo0bits+0x52>
 80097d2:	0c1b      	lsrs	r3, r3, #16
 80097d4:	2010      	movs	r0, #16
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	b90a      	cbnz	r2, 80097de <__lo0bits+0x32>
 80097da:	3008      	adds	r0, #8
 80097dc:	0a1b      	lsrs	r3, r3, #8
 80097de:	071a      	lsls	r2, r3, #28
 80097e0:	bf04      	itt	eq
 80097e2:	091b      	lsreq	r3, r3, #4
 80097e4:	3004      	addeq	r0, #4
 80097e6:	079a      	lsls	r2, r3, #30
 80097e8:	bf04      	itt	eq
 80097ea:	089b      	lsreq	r3, r3, #2
 80097ec:	3002      	addeq	r0, #2
 80097ee:	07da      	lsls	r2, r3, #31
 80097f0:	d403      	bmi.n	80097fa <__lo0bits+0x4e>
 80097f2:	085b      	lsrs	r3, r3, #1
 80097f4:	f100 0001 	add.w	r0, r0, #1
 80097f8:	d005      	beq.n	8009806 <__lo0bits+0x5a>
 80097fa:	600b      	str	r3, [r1, #0]
 80097fc:	4770      	bx	lr
 80097fe:	4610      	mov	r0, r2
 8009800:	e7e9      	b.n	80097d6 <__lo0bits+0x2a>
 8009802:	2000      	movs	r0, #0
 8009804:	4770      	bx	lr
 8009806:	2020      	movs	r0, #32
 8009808:	4770      	bx	lr
	...

0800980c <__i2b>:
 800980c:	b510      	push	{r4, lr}
 800980e:	460c      	mov	r4, r1
 8009810:	2101      	movs	r1, #1
 8009812:	f7ff feb9 	bl	8009588 <_Balloc>
 8009816:	4602      	mov	r2, r0
 8009818:	b928      	cbnz	r0, 8009826 <__i2b+0x1a>
 800981a:	4b05      	ldr	r3, [pc, #20]	; (8009830 <__i2b+0x24>)
 800981c:	4805      	ldr	r0, [pc, #20]	; (8009834 <__i2b+0x28>)
 800981e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009822:	f001 fba9 	bl	800af78 <__assert_func>
 8009826:	2301      	movs	r3, #1
 8009828:	6144      	str	r4, [r0, #20]
 800982a:	6103      	str	r3, [r0, #16]
 800982c:	bd10      	pop	{r4, pc}
 800982e:	bf00      	nop
 8009830:	0800b8c8 	.word	0x0800b8c8
 8009834:	0800b9b8 	.word	0x0800b9b8

08009838 <__multiply>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	4691      	mov	r9, r2
 800983e:	690a      	ldr	r2, [r1, #16]
 8009840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009844:	429a      	cmp	r2, r3
 8009846:	bfb8      	it	lt
 8009848:	460b      	movlt	r3, r1
 800984a:	460c      	mov	r4, r1
 800984c:	bfbc      	itt	lt
 800984e:	464c      	movlt	r4, r9
 8009850:	4699      	movlt	r9, r3
 8009852:	6927      	ldr	r7, [r4, #16]
 8009854:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	6861      	ldr	r1, [r4, #4]
 800985c:	eb07 060a 	add.w	r6, r7, sl
 8009860:	42b3      	cmp	r3, r6
 8009862:	b085      	sub	sp, #20
 8009864:	bfb8      	it	lt
 8009866:	3101      	addlt	r1, #1
 8009868:	f7ff fe8e 	bl	8009588 <_Balloc>
 800986c:	b930      	cbnz	r0, 800987c <__multiply+0x44>
 800986e:	4602      	mov	r2, r0
 8009870:	4b44      	ldr	r3, [pc, #272]	; (8009984 <__multiply+0x14c>)
 8009872:	4845      	ldr	r0, [pc, #276]	; (8009988 <__multiply+0x150>)
 8009874:	f240 115d 	movw	r1, #349	; 0x15d
 8009878:	f001 fb7e 	bl	800af78 <__assert_func>
 800987c:	f100 0514 	add.w	r5, r0, #20
 8009880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009884:	462b      	mov	r3, r5
 8009886:	2200      	movs	r2, #0
 8009888:	4543      	cmp	r3, r8
 800988a:	d321      	bcc.n	80098d0 <__multiply+0x98>
 800988c:	f104 0314 	add.w	r3, r4, #20
 8009890:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009894:	f109 0314 	add.w	r3, r9, #20
 8009898:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800989c:	9202      	str	r2, [sp, #8]
 800989e:	1b3a      	subs	r2, r7, r4
 80098a0:	3a15      	subs	r2, #21
 80098a2:	f022 0203 	bic.w	r2, r2, #3
 80098a6:	3204      	adds	r2, #4
 80098a8:	f104 0115 	add.w	r1, r4, #21
 80098ac:	428f      	cmp	r7, r1
 80098ae:	bf38      	it	cc
 80098b0:	2204      	movcc	r2, #4
 80098b2:	9201      	str	r2, [sp, #4]
 80098b4:	9a02      	ldr	r2, [sp, #8]
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d80c      	bhi.n	80098d6 <__multiply+0x9e>
 80098bc:	2e00      	cmp	r6, #0
 80098be:	dd03      	ble.n	80098c8 <__multiply+0x90>
 80098c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d05a      	beq.n	800997e <__multiply+0x146>
 80098c8:	6106      	str	r6, [r0, #16]
 80098ca:	b005      	add	sp, #20
 80098cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	f843 2b04 	str.w	r2, [r3], #4
 80098d4:	e7d8      	b.n	8009888 <__multiply+0x50>
 80098d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80098da:	f1ba 0f00 	cmp.w	sl, #0
 80098de:	d024      	beq.n	800992a <__multiply+0xf2>
 80098e0:	f104 0e14 	add.w	lr, r4, #20
 80098e4:	46a9      	mov	r9, r5
 80098e6:	f04f 0c00 	mov.w	ip, #0
 80098ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098ee:	f8d9 1000 	ldr.w	r1, [r9]
 80098f2:	fa1f fb82 	uxth.w	fp, r2
 80098f6:	b289      	uxth	r1, r1
 80098f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80098fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009900:	f8d9 2000 	ldr.w	r2, [r9]
 8009904:	4461      	add	r1, ip
 8009906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800990a:	fb0a c20b 	mla	r2, sl, fp, ip
 800990e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009912:	b289      	uxth	r1, r1
 8009914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009918:	4577      	cmp	r7, lr
 800991a:	f849 1b04 	str.w	r1, [r9], #4
 800991e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009922:	d8e2      	bhi.n	80098ea <__multiply+0xb2>
 8009924:	9a01      	ldr	r2, [sp, #4]
 8009926:	f845 c002 	str.w	ip, [r5, r2]
 800992a:	9a03      	ldr	r2, [sp, #12]
 800992c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009930:	3304      	adds	r3, #4
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	d020      	beq.n	800997a <__multiply+0x142>
 8009938:	6829      	ldr	r1, [r5, #0]
 800993a:	f104 0c14 	add.w	ip, r4, #20
 800993e:	46ae      	mov	lr, r5
 8009940:	f04f 0a00 	mov.w	sl, #0
 8009944:	f8bc b000 	ldrh.w	fp, [ip]
 8009948:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800994c:	fb09 220b 	mla	r2, r9, fp, r2
 8009950:	4492      	add	sl, r2
 8009952:	b289      	uxth	r1, r1
 8009954:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009958:	f84e 1b04 	str.w	r1, [lr], #4
 800995c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009960:	f8be 1000 	ldrh.w	r1, [lr]
 8009964:	0c12      	lsrs	r2, r2, #16
 8009966:	fb09 1102 	mla	r1, r9, r2, r1
 800996a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800996e:	4567      	cmp	r7, ip
 8009970:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009974:	d8e6      	bhi.n	8009944 <__multiply+0x10c>
 8009976:	9a01      	ldr	r2, [sp, #4]
 8009978:	50a9      	str	r1, [r5, r2]
 800997a:	3504      	adds	r5, #4
 800997c:	e79a      	b.n	80098b4 <__multiply+0x7c>
 800997e:	3e01      	subs	r6, #1
 8009980:	e79c      	b.n	80098bc <__multiply+0x84>
 8009982:	bf00      	nop
 8009984:	0800b8c8 	.word	0x0800b8c8
 8009988:	0800b9b8 	.word	0x0800b9b8

0800998c <__pow5mult>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4615      	mov	r5, r2
 8009992:	f012 0203 	ands.w	r2, r2, #3
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	d007      	beq.n	80099ac <__pow5mult+0x20>
 800999c:	4c25      	ldr	r4, [pc, #148]	; (8009a34 <__pow5mult+0xa8>)
 800999e:	3a01      	subs	r2, #1
 80099a0:	2300      	movs	r3, #0
 80099a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099a6:	f7ff fe51 	bl	800964c <__multadd>
 80099aa:	4607      	mov	r7, r0
 80099ac:	10ad      	asrs	r5, r5, #2
 80099ae:	d03d      	beq.n	8009a2c <__pow5mult+0xa0>
 80099b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099b2:	b97c      	cbnz	r4, 80099d4 <__pow5mult+0x48>
 80099b4:	2010      	movs	r0, #16
 80099b6:	f7ff fdbf 	bl	8009538 <malloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6270      	str	r0, [r6, #36]	; 0x24
 80099be:	b928      	cbnz	r0, 80099cc <__pow5mult+0x40>
 80099c0:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <__pow5mult+0xac>)
 80099c2:	481e      	ldr	r0, [pc, #120]	; (8009a3c <__pow5mult+0xb0>)
 80099c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099c8:	f001 fad6 	bl	800af78 <__assert_func>
 80099cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d0:	6004      	str	r4, [r0, #0]
 80099d2:	60c4      	str	r4, [r0, #12]
 80099d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099dc:	b94c      	cbnz	r4, 80099f2 <__pow5mult+0x66>
 80099de:	f240 2171 	movw	r1, #625	; 0x271
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7ff ff12 	bl	800980c <__i2b>
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ee:	4604      	mov	r4, r0
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	07eb      	lsls	r3, r5, #31
 80099f8:	d50a      	bpl.n	8009a10 <__pow5mult+0x84>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ff1a 	bl	8009838 <__multiply>
 8009a04:	4639      	mov	r1, r7
 8009a06:	4680      	mov	r8, r0
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fdfd 	bl	8009608 <_Bfree>
 8009a0e:	4647      	mov	r7, r8
 8009a10:	106d      	asrs	r5, r5, #1
 8009a12:	d00b      	beq.n	8009a2c <__pow5mult+0xa0>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	b938      	cbnz	r0, 8009a28 <__pow5mult+0x9c>
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff0b 	bl	8009838 <__multiply>
 8009a22:	6020      	str	r0, [r4, #0]
 8009a24:	f8c0 9000 	str.w	r9, [r0]
 8009a28:	4604      	mov	r4, r0
 8009a2a:	e7e4      	b.n	80099f6 <__pow5mult+0x6a>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	bf00      	nop
 8009a34:	0800bb08 	.word	0x0800bb08
 8009a38:	0800b856 	.word	0x0800b856
 8009a3c:	0800b9b8 	.word	0x0800b9b8

08009a40 <__lshift>:
 8009a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	6849      	ldr	r1, [r1, #4]
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	4607      	mov	r7, r0
 8009a52:	4691      	mov	r9, r2
 8009a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a58:	f108 0601 	add.w	r6, r8, #1
 8009a5c:	42b3      	cmp	r3, r6
 8009a5e:	db0b      	blt.n	8009a78 <__lshift+0x38>
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff fd91 	bl	8009588 <_Balloc>
 8009a66:	4605      	mov	r5, r0
 8009a68:	b948      	cbnz	r0, 8009a7e <__lshift+0x3e>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <__lshift+0xd8>)
 8009a6e:	482b      	ldr	r0, [pc, #172]	; (8009b1c <__lshift+0xdc>)
 8009a70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a74:	f001 fa80 	bl	800af78 <__assert_func>
 8009a78:	3101      	adds	r1, #1
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	e7ee      	b.n	8009a5c <__lshift+0x1c>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f100 0114 	add.w	r1, r0, #20
 8009a84:	f100 0210 	add.w	r2, r0, #16
 8009a88:	4618      	mov	r0, r3
 8009a8a:	4553      	cmp	r3, sl
 8009a8c:	db37      	blt.n	8009afe <__lshift+0xbe>
 8009a8e:	6920      	ldr	r0, [r4, #16]
 8009a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a94:	f104 0314 	add.w	r3, r4, #20
 8009a98:	f019 091f 	ands.w	r9, r9, #31
 8009a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aa4:	d02f      	beq.n	8009b06 <__lshift+0xc6>
 8009aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aaa:	468a      	mov	sl, r1
 8009aac:	f04f 0c00 	mov.w	ip, #0
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	fa02 f209 	lsl.w	r2, r2, r9
 8009ab6:	ea42 020c 	orr.w	r2, r2, ip
 8009aba:	f84a 2b04 	str.w	r2, [sl], #4
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ac8:	d8f2      	bhi.n	8009ab0 <__lshift+0x70>
 8009aca:	1b03      	subs	r3, r0, r4
 8009acc:	3b15      	subs	r3, #21
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	f104 0215 	add.w	r2, r4, #21
 8009ad8:	4290      	cmp	r0, r2
 8009ada:	bf38      	it	cc
 8009adc:	2304      	movcc	r3, #4
 8009ade:	f841 c003 	str.w	ip, [r1, r3]
 8009ae2:	f1bc 0f00 	cmp.w	ip, #0
 8009ae6:	d001      	beq.n	8009aec <__lshift+0xac>
 8009ae8:	f108 0602 	add.w	r6, r8, #2
 8009aec:	3e01      	subs	r6, #1
 8009aee:	4638      	mov	r0, r7
 8009af0:	612e      	str	r6, [r5, #16]
 8009af2:	4621      	mov	r1, r4
 8009af4:	f7ff fd88 	bl	8009608 <_Bfree>
 8009af8:	4628      	mov	r0, r5
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b02:	3301      	adds	r3, #1
 8009b04:	e7c1      	b.n	8009a8a <__lshift+0x4a>
 8009b06:	3904      	subs	r1, #4
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b10:	4298      	cmp	r0, r3
 8009b12:	d8f9      	bhi.n	8009b08 <__lshift+0xc8>
 8009b14:	e7ea      	b.n	8009aec <__lshift+0xac>
 8009b16:	bf00      	nop
 8009b18:	0800b8c8 	.word	0x0800b8c8
 8009b1c:	0800b9b8 	.word	0x0800b9b8

08009b20 <__mcmp>:
 8009b20:	b530      	push	{r4, r5, lr}
 8009b22:	6902      	ldr	r2, [r0, #16]
 8009b24:	690c      	ldr	r4, [r1, #16]
 8009b26:	1b12      	subs	r2, r2, r4
 8009b28:	d10e      	bne.n	8009b48 <__mcmp+0x28>
 8009b2a:	f100 0314 	add.w	r3, r0, #20
 8009b2e:	3114      	adds	r1, #20
 8009b30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b40:	42a5      	cmp	r5, r4
 8009b42:	d003      	beq.n	8009b4c <__mcmp+0x2c>
 8009b44:	d305      	bcc.n	8009b52 <__mcmp+0x32>
 8009b46:	2201      	movs	r2, #1
 8009b48:	4610      	mov	r0, r2
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	4283      	cmp	r3, r0
 8009b4e:	d3f3      	bcc.n	8009b38 <__mcmp+0x18>
 8009b50:	e7fa      	b.n	8009b48 <__mcmp+0x28>
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	e7f7      	b.n	8009b48 <__mcmp+0x28>

08009b58 <__mdiff>:
 8009b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	4606      	mov	r6, r0
 8009b60:	4611      	mov	r1, r2
 8009b62:	4620      	mov	r0, r4
 8009b64:	4690      	mov	r8, r2
 8009b66:	f7ff ffdb 	bl	8009b20 <__mcmp>
 8009b6a:	1e05      	subs	r5, r0, #0
 8009b6c:	d110      	bne.n	8009b90 <__mdiff+0x38>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff fd09 	bl	8009588 <_Balloc>
 8009b76:	b930      	cbnz	r0, 8009b86 <__mdiff+0x2e>
 8009b78:	4b3a      	ldr	r3, [pc, #232]	; (8009c64 <__mdiff+0x10c>)
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f240 2132 	movw	r1, #562	; 0x232
 8009b80:	4839      	ldr	r0, [pc, #228]	; (8009c68 <__mdiff+0x110>)
 8009b82:	f001 f9f9 	bl	800af78 <__assert_func>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	bfa4      	itt	ge
 8009b92:	4643      	movge	r3, r8
 8009b94:	46a0      	movge	r8, r4
 8009b96:	4630      	mov	r0, r6
 8009b98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b9c:	bfa6      	itte	ge
 8009b9e:	461c      	movge	r4, r3
 8009ba0:	2500      	movge	r5, #0
 8009ba2:	2501      	movlt	r5, #1
 8009ba4:	f7ff fcf0 	bl	8009588 <_Balloc>
 8009ba8:	b920      	cbnz	r0, 8009bb4 <__mdiff+0x5c>
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <__mdiff+0x10c>)
 8009bac:	4602      	mov	r2, r0
 8009bae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bb2:	e7e5      	b.n	8009b80 <__mdiff+0x28>
 8009bb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bb8:	6926      	ldr	r6, [r4, #16]
 8009bba:	60c5      	str	r5, [r0, #12]
 8009bbc:	f104 0914 	add.w	r9, r4, #20
 8009bc0:	f108 0514 	add.w	r5, r8, #20
 8009bc4:	f100 0e14 	add.w	lr, r0, #20
 8009bc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bd0:	f108 0210 	add.w	r2, r8, #16
 8009bd4:	46f2      	mov	sl, lr
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009be0:	fa1f f883 	uxth.w	r8, r3
 8009be4:	fa11 f18b 	uxtah	r1, r1, fp
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	eba1 0808 	sub.w	r8, r1, r8
 8009bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bf6:	fa1f f888 	uxth.w	r8, r8
 8009bfa:	1419      	asrs	r1, r3, #16
 8009bfc:	454e      	cmp	r6, r9
 8009bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c02:	f84a 3b04 	str.w	r3, [sl], #4
 8009c06:	d8e7      	bhi.n	8009bd8 <__mdiff+0x80>
 8009c08:	1b33      	subs	r3, r6, r4
 8009c0a:	3b15      	subs	r3, #21
 8009c0c:	f023 0303 	bic.w	r3, r3, #3
 8009c10:	3304      	adds	r3, #4
 8009c12:	3415      	adds	r4, #21
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	bf38      	it	cc
 8009c18:	2304      	movcc	r3, #4
 8009c1a:	441d      	add	r5, r3
 8009c1c:	4473      	add	r3, lr
 8009c1e:	469e      	mov	lr, r3
 8009c20:	462e      	mov	r6, r5
 8009c22:	4566      	cmp	r6, ip
 8009c24:	d30e      	bcc.n	8009c44 <__mdiff+0xec>
 8009c26:	f10c 0203 	add.w	r2, ip, #3
 8009c2a:	1b52      	subs	r2, r2, r5
 8009c2c:	f022 0203 	bic.w	r2, r2, #3
 8009c30:	3d03      	subs	r5, #3
 8009c32:	45ac      	cmp	ip, r5
 8009c34:	bf38      	it	cc
 8009c36:	2200      	movcc	r2, #0
 8009c38:	441a      	add	r2, r3
 8009c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c3e:	b17b      	cbz	r3, 8009c60 <__mdiff+0x108>
 8009c40:	6107      	str	r7, [r0, #16]
 8009c42:	e7a3      	b.n	8009b8c <__mdiff+0x34>
 8009c44:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c48:	fa11 f288 	uxtah	r2, r1, r8
 8009c4c:	1414      	asrs	r4, r2, #16
 8009c4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c52:	b292      	uxth	r2, r2
 8009c54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c58:	f84e 2b04 	str.w	r2, [lr], #4
 8009c5c:	1421      	asrs	r1, r4, #16
 8009c5e:	e7e0      	b.n	8009c22 <__mdiff+0xca>
 8009c60:	3f01      	subs	r7, #1
 8009c62:	e7ea      	b.n	8009c3a <__mdiff+0xe2>
 8009c64:	0800b8c8 	.word	0x0800b8c8
 8009c68:	0800b9b8 	.word	0x0800b9b8

08009c6c <__ulp>:
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	ed8d 0b00 	vstr	d0, [sp]
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	4912      	ldr	r1, [pc, #72]	; (8009cc0 <__ulp+0x54>)
 8009c76:	4019      	ands	r1, r3
 8009c78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	dd05      	ble.n	8009c8c <__ulp+0x20>
 8009c80:	2200      	movs	r2, #0
 8009c82:	460b      	mov	r3, r1
 8009c84:	ec43 2b10 	vmov	d0, r2, r3
 8009c88:	b002      	add	sp, #8
 8009c8a:	4770      	bx	lr
 8009c8c:	4249      	negs	r1, r1
 8009c8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009c92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009c96:	f04f 0200 	mov.w	r2, #0
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	da04      	bge.n	8009caa <__ulp+0x3e>
 8009ca0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ca4:	fa41 f300 	asr.w	r3, r1, r0
 8009ca8:	e7ec      	b.n	8009c84 <__ulp+0x18>
 8009caa:	f1a0 0114 	sub.w	r1, r0, #20
 8009cae:	291e      	cmp	r1, #30
 8009cb0:	bfda      	itte	le
 8009cb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cba:	2101      	movgt	r1, #1
 8009cbc:	460a      	mov	r2, r1
 8009cbe:	e7e1      	b.n	8009c84 <__ulp+0x18>
 8009cc0:	7ff00000 	.word	0x7ff00000

08009cc4 <__b2d>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	6905      	ldr	r5, [r0, #16]
 8009cc8:	f100 0714 	add.w	r7, r0, #20
 8009ccc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009cd0:	1f2e      	subs	r6, r5, #4
 8009cd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff fd48 	bl	800976c <__hi0bits>
 8009cdc:	f1c0 0320 	rsb	r3, r0, #32
 8009ce0:	280a      	cmp	r0, #10
 8009ce2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d60 <__b2d+0x9c>
 8009ce6:	600b      	str	r3, [r1, #0]
 8009ce8:	dc14      	bgt.n	8009d14 <__b2d+0x50>
 8009cea:	f1c0 0e0b 	rsb	lr, r0, #11
 8009cee:	fa24 f10e 	lsr.w	r1, r4, lr
 8009cf2:	42b7      	cmp	r7, r6
 8009cf4:	ea41 030c 	orr.w	r3, r1, ip
 8009cf8:	bf34      	ite	cc
 8009cfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cfe:	2100      	movcs	r1, #0
 8009d00:	3015      	adds	r0, #21
 8009d02:	fa04 f000 	lsl.w	r0, r4, r0
 8009d06:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d0a:	ea40 0201 	orr.w	r2, r0, r1
 8009d0e:	ec43 2b10 	vmov	d0, r2, r3
 8009d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d14:	42b7      	cmp	r7, r6
 8009d16:	bf3a      	itte	cc
 8009d18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d20:	2100      	movcs	r1, #0
 8009d22:	380b      	subs	r0, #11
 8009d24:	d017      	beq.n	8009d56 <__b2d+0x92>
 8009d26:	f1c0 0c20 	rsb	ip, r0, #32
 8009d2a:	fa04 f500 	lsl.w	r5, r4, r0
 8009d2e:	42be      	cmp	r6, r7
 8009d30:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d34:	ea45 0504 	orr.w	r5, r5, r4
 8009d38:	bf8c      	ite	hi
 8009d3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d3e:	2400      	movls	r4, #0
 8009d40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d44:	fa01 f000 	lsl.w	r0, r1, r0
 8009d48:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d50:	ea40 0204 	orr.w	r2, r0, r4
 8009d54:	e7db      	b.n	8009d0e <__b2d+0x4a>
 8009d56:	ea44 030c 	orr.w	r3, r4, ip
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	e7d7      	b.n	8009d0e <__b2d+0x4a>
 8009d5e:	bf00      	nop
 8009d60:	3ff00000 	.word	0x3ff00000

08009d64 <__d2b>:
 8009d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	4689      	mov	r9, r1
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	ec57 6b10 	vmov	r6, r7, d0
 8009d70:	4690      	mov	r8, r2
 8009d72:	f7ff fc09 	bl	8009588 <_Balloc>
 8009d76:	4604      	mov	r4, r0
 8009d78:	b930      	cbnz	r0, 8009d88 <__d2b+0x24>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <__d2b+0xb0>)
 8009d7e:	4826      	ldr	r0, [pc, #152]	; (8009e18 <__d2b+0xb4>)
 8009d80:	f240 310a 	movw	r1, #778	; 0x30a
 8009d84:	f001 f8f8 	bl	800af78 <__assert_func>
 8009d88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d90:	bb35      	cbnz	r5, 8009de0 <__d2b+0x7c>
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	d028      	beq.n	8009dea <__d2b+0x86>
 8009d98:	4668      	mov	r0, sp
 8009d9a:	9600      	str	r6, [sp, #0]
 8009d9c:	f7ff fd06 	bl	80097ac <__lo0bits>
 8009da0:	9900      	ldr	r1, [sp, #0]
 8009da2:	b300      	cbz	r0, 8009de6 <__d2b+0x82>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	f1c0 0320 	rsb	r3, r0, #32
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	430b      	orrs	r3, r1
 8009db0:	40c2      	lsrs	r2, r0
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	9201      	str	r2, [sp, #4]
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	61a3      	str	r3, [r4, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2202      	movne	r2, #2
 8009dc0:	2201      	moveq	r2, #1
 8009dc2:	6122      	str	r2, [r4, #16]
 8009dc4:	b1d5      	cbz	r5, 8009dfc <__d2b+0x98>
 8009dc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dca:	4405      	add	r5, r0
 8009dcc:	f8c9 5000 	str.w	r5, [r9]
 8009dd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dd4:	f8c8 0000 	str.w	r0, [r8]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	b003      	add	sp, #12
 8009ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de4:	e7d5      	b.n	8009d92 <__d2b+0x2e>
 8009de6:	6161      	str	r1, [r4, #20]
 8009de8:	e7e5      	b.n	8009db6 <__d2b+0x52>
 8009dea:	a801      	add	r0, sp, #4
 8009dec:	f7ff fcde 	bl	80097ac <__lo0bits>
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	6163      	str	r3, [r4, #20]
 8009df4:	2201      	movs	r2, #1
 8009df6:	6122      	str	r2, [r4, #16]
 8009df8:	3020      	adds	r0, #32
 8009dfa:	e7e3      	b.n	8009dc4 <__d2b+0x60>
 8009dfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e04:	f8c9 0000 	str.w	r0, [r9]
 8009e08:	6918      	ldr	r0, [r3, #16]
 8009e0a:	f7ff fcaf 	bl	800976c <__hi0bits>
 8009e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e12:	e7df      	b.n	8009dd4 <__d2b+0x70>
 8009e14:	0800b8c8 	.word	0x0800b8c8
 8009e18:	0800b9b8 	.word	0x0800b9b8

08009e1c <__ratio>:
 8009e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4688      	mov	r8, r1
 8009e22:	4669      	mov	r1, sp
 8009e24:	4681      	mov	r9, r0
 8009e26:	f7ff ff4d 	bl	8009cc4 <__b2d>
 8009e2a:	a901      	add	r1, sp, #4
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	ec55 4b10 	vmov	r4, r5, d0
 8009e32:	f7ff ff47 	bl	8009cc4 <__b2d>
 8009e36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e3e:	eba3 0c02 	sub.w	ip, r3, r2
 8009e42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e4c:	ec51 0b10 	vmov	r0, r1, d0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfd6      	itet	le
 8009e54:	460a      	movle	r2, r1
 8009e56:	462a      	movgt	r2, r5
 8009e58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e5c:	468b      	mov	fp, r1
 8009e5e:	462f      	mov	r7, r5
 8009e60:	bfd4      	ite	le
 8009e62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	ee10 2a10 	vmov	r2, s0
 8009e70:	465b      	mov	r3, fp
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fcea 	bl	800084c <__aeabi_ddiv>
 8009e78:	ec41 0b10 	vmov	d0, r0, r1
 8009e7c:	b003      	add	sp, #12
 8009e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e82 <__copybits>:
 8009e82:	3901      	subs	r1, #1
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	1149      	asrs	r1, r1, #5
 8009e88:	6914      	ldr	r4, [r2, #16]
 8009e8a:	3101      	adds	r1, #1
 8009e8c:	f102 0314 	add.w	r3, r2, #20
 8009e90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e98:	1f05      	subs	r5, r0, #4
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	d30c      	bcc.n	8009eb8 <__copybits+0x36>
 8009e9e:	1aa3      	subs	r3, r4, r2
 8009ea0:	3b11      	subs	r3, #17
 8009ea2:	f023 0303 	bic.w	r3, r3, #3
 8009ea6:	3211      	adds	r2, #17
 8009ea8:	42a2      	cmp	r2, r4
 8009eaa:	bf88      	it	hi
 8009eac:	2300      	movhi	r3, #0
 8009eae:	4418      	add	r0, r3
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4288      	cmp	r0, r1
 8009eb4:	d305      	bcc.n	8009ec2 <__copybits+0x40>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ebc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ec0:	e7eb      	b.n	8009e9a <__copybits+0x18>
 8009ec2:	f840 3b04 	str.w	r3, [r0], #4
 8009ec6:	e7f4      	b.n	8009eb2 <__copybits+0x30>

08009ec8 <__any_on>:
 8009ec8:	f100 0214 	add.w	r2, r0, #20
 8009ecc:	6900      	ldr	r0, [r0, #16]
 8009ece:	114b      	asrs	r3, r1, #5
 8009ed0:	4298      	cmp	r0, r3
 8009ed2:	b510      	push	{r4, lr}
 8009ed4:	db11      	blt.n	8009efa <__any_on+0x32>
 8009ed6:	dd0a      	ble.n	8009eee <__any_on+0x26>
 8009ed8:	f011 011f 	ands.w	r1, r1, #31
 8009edc:	d007      	beq.n	8009eee <__any_on+0x26>
 8009ede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ee2:	fa24 f001 	lsr.w	r0, r4, r1
 8009ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8009eea:	428c      	cmp	r4, r1
 8009eec:	d10b      	bne.n	8009f06 <__any_on+0x3e>
 8009eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d803      	bhi.n	8009efe <__any_on+0x36>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	bd10      	pop	{r4, pc}
 8009efa:	4603      	mov	r3, r0
 8009efc:	e7f7      	b.n	8009eee <__any_on+0x26>
 8009efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f02:	2900      	cmp	r1, #0
 8009f04:	d0f5      	beq.n	8009ef2 <__any_on+0x2a>
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7f6      	b.n	8009ef8 <__any_on+0x30>

08009f0a <_calloc_r>:
 8009f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0c:	fba1 2402 	umull	r2, r4, r1, r2
 8009f10:	b94c      	cbnz	r4, 8009f26 <_calloc_r+0x1c>
 8009f12:	4611      	mov	r1, r2
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	f000 f87b 	bl	800a010 <_malloc_r>
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b930      	cbnz	r0, 8009f2e <_calloc_r+0x24>
 8009f20:	4628      	mov	r0, r5
 8009f22:	b003      	add	sp, #12
 8009f24:	bd30      	pop	{r4, r5, pc}
 8009f26:	220c      	movs	r2, #12
 8009f28:	6002      	str	r2, [r0, #0]
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	e7f8      	b.n	8009f20 <_calloc_r+0x16>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f7fb ff76 	bl	8005e20 <memset>
 8009f34:	e7f4      	b.n	8009f20 <_calloc_r+0x16>
	...

08009f38 <_free_r>:
 8009f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	d044      	beq.n	8009fc8 <_free_r+0x90>
 8009f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f42:	9001      	str	r0, [sp, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f1a1 0404 	sub.w	r4, r1, #4
 8009f4a:	bfb8      	it	lt
 8009f4c:	18e4      	addlt	r4, r4, r3
 8009f4e:	f001 f87f 	bl	800b050 <__malloc_lock>
 8009f52:	4a1e      	ldr	r2, [pc, #120]	; (8009fcc <_free_r+0x94>)
 8009f54:	9801      	ldr	r0, [sp, #4]
 8009f56:	6813      	ldr	r3, [r2, #0]
 8009f58:	b933      	cbnz	r3, 8009f68 <_free_r+0x30>
 8009f5a:	6063      	str	r3, [r4, #4]
 8009f5c:	6014      	str	r4, [r2, #0]
 8009f5e:	b003      	add	sp, #12
 8009f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f64:	f001 b87a 	b.w	800b05c <__malloc_unlock>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d908      	bls.n	8009f7e <_free_r+0x46>
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	1961      	adds	r1, r4, r5
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf01      	itttt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	1949      	addeq	r1, r1, r5
 8009f7a:	6021      	streq	r1, [r4, #0]
 8009f7c:	e7ed      	b.n	8009f5a <_free_r+0x22>
 8009f7e:	461a      	mov	r2, r3
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	b10b      	cbz	r3, 8009f88 <_free_r+0x50>
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d9fa      	bls.n	8009f7e <_free_r+0x46>
 8009f88:	6811      	ldr	r1, [r2, #0]
 8009f8a:	1855      	adds	r5, r2, r1
 8009f8c:	42a5      	cmp	r5, r4
 8009f8e:	d10b      	bne.n	8009fa8 <_free_r+0x70>
 8009f90:	6824      	ldr	r4, [r4, #0]
 8009f92:	4421      	add	r1, r4
 8009f94:	1854      	adds	r4, r2, r1
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	d1e0      	bne.n	8009f5e <_free_r+0x26>
 8009f9c:	681c      	ldr	r4, [r3, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	6053      	str	r3, [r2, #4]
 8009fa2:	4421      	add	r1, r4
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	e7da      	b.n	8009f5e <_free_r+0x26>
 8009fa8:	d902      	bls.n	8009fb0 <_free_r+0x78>
 8009faa:	230c      	movs	r3, #12
 8009fac:	6003      	str	r3, [r0, #0]
 8009fae:	e7d6      	b.n	8009f5e <_free_r+0x26>
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	1961      	adds	r1, r4, r5
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf04      	itt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	6063      	str	r3, [r4, #4]
 8009fbe:	bf04      	itt	eq
 8009fc0:	1949      	addeq	r1, r1, r5
 8009fc2:	6021      	streq	r1, [r4, #0]
 8009fc4:	6054      	str	r4, [r2, #4]
 8009fc6:	e7ca      	b.n	8009f5e <_free_r+0x26>
 8009fc8:	b003      	add	sp, #12
 8009fca:	bd30      	pop	{r4, r5, pc}
 8009fcc:	20000898 	.word	0x20000898

08009fd0 <sbrk_aligned>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4e0e      	ldr	r6, [pc, #56]	; (800a00c <sbrk_aligned+0x3c>)
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	6831      	ldr	r1, [r6, #0]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b911      	cbnz	r1, 8009fe2 <sbrk_aligned+0x12>
 8009fdc:	f000 fec8 	bl	800ad70 <_sbrk_r>
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 fec3 	bl	800ad70 <_sbrk_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d00a      	beq.n	800a004 <sbrk_aligned+0x34>
 8009fee:	1cc4      	adds	r4, r0, #3
 8009ff0:	f024 0403 	bic.w	r4, r4, #3
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d007      	beq.n	800a008 <sbrk_aligned+0x38>
 8009ff8:	1a21      	subs	r1, r4, r0
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 feb8 	bl	800ad70 <_sbrk_r>
 800a000:	3001      	adds	r0, #1
 800a002:	d101      	bne.n	800a008 <sbrk_aligned+0x38>
 800a004:	f04f 34ff 	mov.w	r4, #4294967295
 800a008:	4620      	mov	r0, r4
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	2000089c 	.word	0x2000089c

0800a010 <_malloc_r>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	1ccd      	adds	r5, r1, #3
 800a016:	f025 0503 	bic.w	r5, r5, #3
 800a01a:	3508      	adds	r5, #8
 800a01c:	2d0c      	cmp	r5, #12
 800a01e:	bf38      	it	cc
 800a020:	250c      	movcc	r5, #12
 800a022:	2d00      	cmp	r5, #0
 800a024:	4607      	mov	r7, r0
 800a026:	db01      	blt.n	800a02c <_malloc_r+0x1c>
 800a028:	42a9      	cmp	r1, r5
 800a02a:	d905      	bls.n	800a038 <_malloc_r+0x28>
 800a02c:	230c      	movs	r3, #12
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	2600      	movs	r6, #0
 800a032:	4630      	mov	r0, r6
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	4e2e      	ldr	r6, [pc, #184]	; (800a0f4 <_malloc_r+0xe4>)
 800a03a:	f001 f809 	bl	800b050 <__malloc_lock>
 800a03e:	6833      	ldr	r3, [r6, #0]
 800a040:	461c      	mov	r4, r3
 800a042:	bb34      	cbnz	r4, 800a092 <_malloc_r+0x82>
 800a044:	4629      	mov	r1, r5
 800a046:	4638      	mov	r0, r7
 800a048:	f7ff ffc2 	bl	8009fd0 <sbrk_aligned>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	4604      	mov	r4, r0
 800a050:	d14d      	bne.n	800a0ee <_malloc_r+0xde>
 800a052:	6834      	ldr	r4, [r6, #0]
 800a054:	4626      	mov	r6, r4
 800a056:	2e00      	cmp	r6, #0
 800a058:	d140      	bne.n	800a0dc <_malloc_r+0xcc>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4638      	mov	r0, r7
 800a060:	eb04 0803 	add.w	r8, r4, r3
 800a064:	f000 fe84 	bl	800ad70 <_sbrk_r>
 800a068:	4580      	cmp	r8, r0
 800a06a:	d13a      	bne.n	800a0e2 <_malloc_r+0xd2>
 800a06c:	6821      	ldr	r1, [r4, #0]
 800a06e:	3503      	adds	r5, #3
 800a070:	1a6d      	subs	r5, r5, r1
 800a072:	f025 0503 	bic.w	r5, r5, #3
 800a076:	3508      	adds	r5, #8
 800a078:	2d0c      	cmp	r5, #12
 800a07a:	bf38      	it	cc
 800a07c:	250c      	movcc	r5, #12
 800a07e:	4629      	mov	r1, r5
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ffa5 	bl	8009fd0 <sbrk_aligned>
 800a086:	3001      	adds	r0, #1
 800a088:	d02b      	beq.n	800a0e2 <_malloc_r+0xd2>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	442b      	add	r3, r5
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	e00e      	b.n	800a0b0 <_malloc_r+0xa0>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	1b52      	subs	r2, r2, r5
 800a096:	d41e      	bmi.n	800a0d6 <_malloc_r+0xc6>
 800a098:	2a0b      	cmp	r2, #11
 800a09a:	d916      	bls.n	800a0ca <_malloc_r+0xba>
 800a09c:	1961      	adds	r1, r4, r5
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	6025      	str	r5, [r4, #0]
 800a0a2:	bf18      	it	ne
 800a0a4:	6059      	strne	r1, [r3, #4]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	bf08      	it	eq
 800a0aa:	6031      	streq	r1, [r6, #0]
 800a0ac:	5162      	str	r2, [r4, r5]
 800a0ae:	604b      	str	r3, [r1, #4]
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f104 060b 	add.w	r6, r4, #11
 800a0b6:	f000 ffd1 	bl	800b05c <__malloc_unlock>
 800a0ba:	f026 0607 	bic.w	r6, r6, #7
 800a0be:	1d23      	adds	r3, r4, #4
 800a0c0:	1af2      	subs	r2, r6, r3
 800a0c2:	d0b6      	beq.n	800a032 <_malloc_r+0x22>
 800a0c4:	1b9b      	subs	r3, r3, r6
 800a0c6:	50a3      	str	r3, [r4, r2]
 800a0c8:	e7b3      	b.n	800a032 <_malloc_r+0x22>
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	bf0c      	ite	eq
 800a0d0:	6032      	streq	r2, [r6, #0]
 800a0d2:	605a      	strne	r2, [r3, #4]
 800a0d4:	e7ec      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	6864      	ldr	r4, [r4, #4]
 800a0da:	e7b2      	b.n	800a042 <_malloc_r+0x32>
 800a0dc:	4634      	mov	r4, r6
 800a0de:	6876      	ldr	r6, [r6, #4]
 800a0e0:	e7b9      	b.n	800a056 <_malloc_r+0x46>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	603b      	str	r3, [r7, #0]
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f000 ffb8 	bl	800b05c <__malloc_unlock>
 800a0ec:	e7a1      	b.n	800a032 <_malloc_r+0x22>
 800a0ee:	6025      	str	r5, [r4, #0]
 800a0f0:	e7de      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0f2:	bf00      	nop
 800a0f4:	20000898 	.word	0x20000898

0800a0f8 <__ssputs_r>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	688e      	ldr	r6, [r1, #8]
 800a0fe:	429e      	cmp	r6, r3
 800a100:	4682      	mov	sl, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4690      	mov	r8, r2
 800a106:	461f      	mov	r7, r3
 800a108:	d838      	bhi.n	800a17c <__ssputs_r+0x84>
 800a10a:	898a      	ldrh	r2, [r1, #12]
 800a10c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a110:	d032      	beq.n	800a178 <__ssputs_r+0x80>
 800a112:	6825      	ldr	r5, [r4, #0]
 800a114:	6909      	ldr	r1, [r1, #16]
 800a116:	eba5 0901 	sub.w	r9, r5, r1
 800a11a:	6965      	ldr	r5, [r4, #20]
 800a11c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a124:	3301      	adds	r3, #1
 800a126:	444b      	add	r3, r9
 800a128:	106d      	asrs	r5, r5, #1
 800a12a:	429d      	cmp	r5, r3
 800a12c:	bf38      	it	cc
 800a12e:	461d      	movcc	r5, r3
 800a130:	0553      	lsls	r3, r2, #21
 800a132:	d531      	bpl.n	800a198 <__ssputs_r+0xa0>
 800a134:	4629      	mov	r1, r5
 800a136:	f7ff ff6b 	bl	800a010 <_malloc_r>
 800a13a:	4606      	mov	r6, r0
 800a13c:	b950      	cbnz	r0, 800a154 <__ssputs_r+0x5c>
 800a13e:	230c      	movs	r3, #12
 800a140:	f8ca 3000 	str.w	r3, [sl]
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a154:	6921      	ldr	r1, [r4, #16]
 800a156:	464a      	mov	r2, r9
 800a158:	f7ff fa08 	bl	800956c <memcpy>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	6126      	str	r6, [r4, #16]
 800a16a:	6165      	str	r5, [r4, #20]
 800a16c:	444e      	add	r6, r9
 800a16e:	eba5 0509 	sub.w	r5, r5, r9
 800a172:	6026      	str	r6, [r4, #0]
 800a174:	60a5      	str	r5, [r4, #8]
 800a176:	463e      	mov	r6, r7
 800a178:	42be      	cmp	r6, r7
 800a17a:	d900      	bls.n	800a17e <__ssputs_r+0x86>
 800a17c:	463e      	mov	r6, r7
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	4632      	mov	r2, r6
 800a182:	4641      	mov	r1, r8
 800a184:	f000 ff4a 	bl	800b01c <memmove>
 800a188:	68a3      	ldr	r3, [r4, #8]
 800a18a:	1b9b      	subs	r3, r3, r6
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	4433      	add	r3, r6
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	2000      	movs	r0, #0
 800a196:	e7db      	b.n	800a150 <__ssputs_r+0x58>
 800a198:	462a      	mov	r2, r5
 800a19a:	f000 ff65 	bl	800b068 <_realloc_r>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d1e1      	bne.n	800a168 <__ssputs_r+0x70>
 800a1a4:	6921      	ldr	r1, [r4, #16]
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f7ff fec6 	bl	8009f38 <_free_r>
 800a1ac:	e7c7      	b.n	800a13e <__ssputs_r+0x46>
	...

0800a1b0 <_svfiprintf_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4698      	mov	r8, r3
 800a1b6:	898b      	ldrh	r3, [r1, #12]
 800a1b8:	061b      	lsls	r3, r3, #24
 800a1ba:	b09d      	sub	sp, #116	; 0x74
 800a1bc:	4607      	mov	r7, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	d50e      	bpl.n	800a1e2 <_svfiprintf_r+0x32>
 800a1c4:	690b      	ldr	r3, [r1, #16]
 800a1c6:	b963      	cbnz	r3, 800a1e2 <_svfiprintf_r+0x32>
 800a1c8:	2140      	movs	r1, #64	; 0x40
 800a1ca:	f7ff ff21 	bl	800a010 <_malloc_r>
 800a1ce:	6028      	str	r0, [r5, #0]
 800a1d0:	6128      	str	r0, [r5, #16]
 800a1d2:	b920      	cbnz	r0, 800a1de <_svfiprintf_r+0x2e>
 800a1d4:	230c      	movs	r3, #12
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e0d1      	b.n	800a382 <_svfiprintf_r+0x1d2>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	616b      	str	r3, [r5, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f0:	2330      	movs	r3, #48	; 0x30
 800a1f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a39c <_svfiprintf_r+0x1ec>
 800a1f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1fa:	f04f 0901 	mov.w	r9, #1
 800a1fe:	4623      	mov	r3, r4
 800a200:	469a      	mov	sl, r3
 800a202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a206:	b10a      	cbz	r2, 800a20c <_svfiprintf_r+0x5c>
 800a208:	2a25      	cmp	r2, #37	; 0x25
 800a20a:	d1f9      	bne.n	800a200 <_svfiprintf_r+0x50>
 800a20c:	ebba 0b04 	subs.w	fp, sl, r4
 800a210:	d00b      	beq.n	800a22a <_svfiprintf_r+0x7a>
 800a212:	465b      	mov	r3, fp
 800a214:	4622      	mov	r2, r4
 800a216:	4629      	mov	r1, r5
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ff6d 	bl	800a0f8 <__ssputs_r>
 800a21e:	3001      	adds	r0, #1
 800a220:	f000 80aa 	beq.w	800a378 <_svfiprintf_r+0x1c8>
 800a224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a226:	445a      	add	r2, fp
 800a228:	9209      	str	r2, [sp, #36]	; 0x24
 800a22a:	f89a 3000 	ldrb.w	r3, [sl]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 80a2 	beq.w	800a378 <_svfiprintf_r+0x1c8>
 800a234:	2300      	movs	r3, #0
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23e:	f10a 0a01 	add.w	sl, sl, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9307      	str	r3, [sp, #28]
 800a246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a24a:	931a      	str	r3, [sp, #104]	; 0x68
 800a24c:	4654      	mov	r4, sl
 800a24e:	2205      	movs	r2, #5
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	4851      	ldr	r0, [pc, #324]	; (800a39c <_svfiprintf_r+0x1ec>)
 800a256:	f7f5 ffc3 	bl	80001e0 <memchr>
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	b9d8      	cbnz	r0, 800a296 <_svfiprintf_r+0xe6>
 800a25e:	06d0      	lsls	r0, r2, #27
 800a260:	bf44      	itt	mi
 800a262:	2320      	movmi	r3, #32
 800a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a268:	0711      	lsls	r1, r2, #28
 800a26a:	bf44      	itt	mi
 800a26c:	232b      	movmi	r3, #43	; 0x2b
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b2a      	cmp	r3, #42	; 0x2a
 800a278:	d015      	beq.n	800a2a6 <_svfiprintf_r+0xf6>
 800a27a:	9a07      	ldr	r2, [sp, #28]
 800a27c:	4654      	mov	r4, sl
 800a27e:	2000      	movs	r0, #0
 800a280:	f04f 0c0a 	mov.w	ip, #10
 800a284:	4621      	mov	r1, r4
 800a286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28a:	3b30      	subs	r3, #48	; 0x30
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d94e      	bls.n	800a32e <_svfiprintf_r+0x17e>
 800a290:	b1b0      	cbz	r0, 800a2c0 <_svfiprintf_r+0x110>
 800a292:	9207      	str	r2, [sp, #28]
 800a294:	e014      	b.n	800a2c0 <_svfiprintf_r+0x110>
 800a296:	eba0 0308 	sub.w	r3, r0, r8
 800a29a:	fa09 f303 	lsl.w	r3, r9, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	46a2      	mov	sl, r4
 800a2a4:	e7d2      	b.n	800a24c <_svfiprintf_r+0x9c>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	9103      	str	r1, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfbb      	ittet	lt
 800a2b2:	425b      	neglt	r3, r3
 800a2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b8:	9307      	strge	r3, [sp, #28]
 800a2ba:	9307      	strlt	r3, [sp, #28]
 800a2bc:	bfb8      	it	lt
 800a2be:	9204      	strlt	r2, [sp, #16]
 800a2c0:	7823      	ldrb	r3, [r4, #0]
 800a2c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c4:	d10c      	bne.n	800a2e0 <_svfiprintf_r+0x130>
 800a2c6:	7863      	ldrb	r3, [r4, #1]
 800a2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ca:	d135      	bne.n	800a338 <_svfiprintf_r+0x188>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	9203      	str	r2, [sp, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bfb8      	it	lt
 800a2d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2dc:	3402      	adds	r4, #2
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3ac <_svfiprintf_r+0x1fc>
 800a2e4:	7821      	ldrb	r1, [r4, #0]
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f7f5 ff79 	bl	80001e0 <memchr>
 800a2ee:	b140      	cbz	r0, 800a302 <_svfiprintf_r+0x152>
 800a2f0:	2340      	movs	r3, #64	; 0x40
 800a2f2:	eba0 000a 	sub.w	r0, r0, sl
 800a2f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	4303      	orrs	r3, r0
 800a2fe:	3401      	adds	r4, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a306:	4826      	ldr	r0, [pc, #152]	; (800a3a0 <_svfiprintf_r+0x1f0>)
 800a308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a30c:	2206      	movs	r2, #6
 800a30e:	f7f5 ff67 	bl	80001e0 <memchr>
 800a312:	2800      	cmp	r0, #0
 800a314:	d038      	beq.n	800a388 <_svfiprintf_r+0x1d8>
 800a316:	4b23      	ldr	r3, [pc, #140]	; (800a3a4 <_svfiprintf_r+0x1f4>)
 800a318:	bb1b      	cbnz	r3, 800a362 <_svfiprintf_r+0x1b2>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	3307      	adds	r3, #7
 800a31e:	f023 0307 	bic.w	r3, r3, #7
 800a322:	3308      	adds	r3, #8
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	4433      	add	r3, r6
 800a32a:	9309      	str	r3, [sp, #36]	; 0x24
 800a32c:	e767      	b.n	800a1fe <_svfiprintf_r+0x4e>
 800a32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a332:	460c      	mov	r4, r1
 800a334:	2001      	movs	r0, #1
 800a336:	e7a5      	b.n	800a284 <_svfiprintf_r+0xd4>
 800a338:	2300      	movs	r3, #0
 800a33a:	3401      	adds	r4, #1
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	4619      	mov	r1, r3
 800a340:	f04f 0c0a 	mov.w	ip, #10
 800a344:	4620      	mov	r0, r4
 800a346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34a:	3a30      	subs	r2, #48	; 0x30
 800a34c:	2a09      	cmp	r2, #9
 800a34e:	d903      	bls.n	800a358 <_svfiprintf_r+0x1a8>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0c5      	beq.n	800a2e0 <_svfiprintf_r+0x130>
 800a354:	9105      	str	r1, [sp, #20]
 800a356:	e7c3      	b.n	800a2e0 <_svfiprintf_r+0x130>
 800a358:	fb0c 2101 	mla	r1, ip, r1, r2
 800a35c:	4604      	mov	r4, r0
 800a35e:	2301      	movs	r3, #1
 800a360:	e7f0      	b.n	800a344 <_svfiprintf_r+0x194>
 800a362:	ab03      	add	r3, sp, #12
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	462a      	mov	r2, r5
 800a368:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <_svfiprintf_r+0x1f8>)
 800a36a:	a904      	add	r1, sp, #16
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7fb fdff 	bl	8005f70 <_printf_float>
 800a372:	1c42      	adds	r2, r0, #1
 800a374:	4606      	mov	r6, r0
 800a376:	d1d6      	bne.n	800a326 <_svfiprintf_r+0x176>
 800a378:	89ab      	ldrh	r3, [r5, #12]
 800a37a:	065b      	lsls	r3, r3, #25
 800a37c:	f53f af2c 	bmi.w	800a1d8 <_svfiprintf_r+0x28>
 800a380:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a382:	b01d      	add	sp, #116	; 0x74
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	ab03      	add	r3, sp, #12
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	462a      	mov	r2, r5
 800a38e:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <_svfiprintf_r+0x1f8>)
 800a390:	a904      	add	r1, sp, #16
 800a392:	4638      	mov	r0, r7
 800a394:	f7fc f890 	bl	80064b8 <_printf_i>
 800a398:	e7eb      	b.n	800a372 <_svfiprintf_r+0x1c2>
 800a39a:	bf00      	nop
 800a39c:	0800bb14 	.word	0x0800bb14
 800a3a0:	0800bb1e 	.word	0x0800bb1e
 800a3a4:	08005f71 	.word	0x08005f71
 800a3a8:	0800a0f9 	.word	0x0800a0f9
 800a3ac:	0800bb1a 	.word	0x0800bb1a

0800a3b0 <_sungetc_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	1c4b      	adds	r3, r1, #1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	d103      	bne.n	800a3c0 <_sungetc_r+0x10>
 800a3b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3bc:	4628      	mov	r0, r5
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	8993      	ldrh	r3, [r2, #12]
 800a3c2:	f023 0320 	bic.w	r3, r3, #32
 800a3c6:	8193      	strh	r3, [r2, #12]
 800a3c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ca:	6852      	ldr	r2, [r2, #4]
 800a3cc:	b2cd      	uxtb	r5, r1
 800a3ce:	b18b      	cbz	r3, 800a3f4 <_sungetc_r+0x44>
 800a3d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	dd08      	ble.n	800a3e8 <_sungetc_r+0x38>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	1e5a      	subs	r2, r3, #1
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	6063      	str	r3, [r4, #4]
 800a3e6:	e7e9      	b.n	800a3bc <_sungetc_r+0xc>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	f000 fd7d 	bl	800aee8 <__submore>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d0f1      	beq.n	800a3d6 <_sungetc_r+0x26>
 800a3f2:	e7e1      	b.n	800a3b8 <_sungetc_r+0x8>
 800a3f4:	6921      	ldr	r1, [r4, #16]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	b151      	cbz	r1, 800a410 <_sungetc_r+0x60>
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	d208      	bcs.n	800a410 <_sungetc_r+0x60>
 800a3fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a402:	42a9      	cmp	r1, r5
 800a404:	d104      	bne.n	800a410 <_sungetc_r+0x60>
 800a406:	3b01      	subs	r3, #1
 800a408:	3201      	adds	r2, #1
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	6062      	str	r2, [r4, #4]
 800a40e:	e7d5      	b.n	800a3bc <_sungetc_r+0xc>
 800a410:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a418:	6363      	str	r3, [r4, #52]	; 0x34
 800a41a:	2303      	movs	r3, #3
 800a41c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a41e:	4623      	mov	r3, r4
 800a420:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	2301      	movs	r3, #1
 800a428:	e7dc      	b.n	800a3e4 <_sungetc_r+0x34>

0800a42a <__ssrefill_r>:
 800a42a:	b510      	push	{r4, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a430:	b169      	cbz	r1, 800a44e <__ssrefill_r+0x24>
 800a432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a436:	4299      	cmp	r1, r3
 800a438:	d001      	beq.n	800a43e <__ssrefill_r+0x14>
 800a43a:	f7ff fd7d 	bl	8009f38 <_free_r>
 800a43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	2000      	movs	r0, #0
 800a444:	6360      	str	r0, [r4, #52]	; 0x34
 800a446:	b113      	cbz	r3, 800a44e <__ssrefill_r+0x24>
 800a448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	2300      	movs	r3, #0
 800a454:	6063      	str	r3, [r4, #4]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0320 	orr.w	r3, r3, #32
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295
 800a462:	e7f3      	b.n	800a44c <__ssrefill_r+0x22>

0800a464 <__ssvfiscanf_r>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	460c      	mov	r4, r1
 800a46a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a46e:	2100      	movs	r1, #0
 800a470:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a474:	49a6      	ldr	r1, [pc, #664]	; (800a710 <__ssvfiscanf_r+0x2ac>)
 800a476:	91a0      	str	r1, [sp, #640]	; 0x280
 800a478:	f10d 0804 	add.w	r8, sp, #4
 800a47c:	49a5      	ldr	r1, [pc, #660]	; (800a714 <__ssvfiscanf_r+0x2b0>)
 800a47e:	4fa6      	ldr	r7, [pc, #664]	; (800a718 <__ssvfiscanf_r+0x2b4>)
 800a480:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a71c <__ssvfiscanf_r+0x2b8>
 800a484:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a488:	4606      	mov	r6, r0
 800a48a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	7813      	ldrb	r3, [r2, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 815a 	beq.w	800a74a <__ssvfiscanf_r+0x2e6>
 800a496:	5dd9      	ldrb	r1, [r3, r7]
 800a498:	f011 0108 	ands.w	r1, r1, #8
 800a49c:	f102 0501 	add.w	r5, r2, #1
 800a4a0:	d019      	beq.n	800a4d6 <__ssvfiscanf_r+0x72>
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dd0f      	ble.n	800a4c8 <__ssvfiscanf_r+0x64>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	5cba      	ldrb	r2, [r7, r2]
 800a4ae:	0712      	lsls	r2, r2, #28
 800a4b0:	d401      	bmi.n	800a4b6 <__ssvfiscanf_r+0x52>
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	e7eb      	b.n	800a48e <__ssvfiscanf_r+0x2a>
 800a4b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	9245      	str	r2, [sp, #276]	; 0x114
 800a4bc:	6862      	ldr	r2, [r4, #4]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	3a01      	subs	r2, #1
 800a4c2:	6062      	str	r2, [r4, #4]
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	e7ec      	b.n	800a4a2 <__ssvfiscanf_r+0x3e>
 800a4c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4798      	blx	r3
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0e9      	beq.n	800a4a8 <__ssvfiscanf_r+0x44>
 800a4d4:	e7ed      	b.n	800a4b2 <__ssvfiscanf_r+0x4e>
 800a4d6:	2b25      	cmp	r3, #37	; 0x25
 800a4d8:	d012      	beq.n	800a500 <__ssvfiscanf_r+0x9c>
 800a4da:	469a      	mov	sl, r3
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f340 8091 	ble.w	800a606 <__ssvfiscanf_r+0x1a2>
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	7813      	ldrb	r3, [r2, #0]
 800a4e8:	4553      	cmp	r3, sl
 800a4ea:	f040 812e 	bne.w	800a74a <__ssvfiscanf_r+0x2e6>
 800a4ee:	6863      	ldr	r3, [r4, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	6063      	str	r3, [r4, #4]
 800a4f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a4f6:	3201      	adds	r2, #1
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	9345      	str	r3, [sp, #276]	; 0x114
 800a4fe:	e7d8      	b.n	800a4b2 <__ssvfiscanf_r+0x4e>
 800a500:	9141      	str	r1, [sp, #260]	; 0x104
 800a502:	9143      	str	r1, [sp, #268]	; 0x10c
 800a504:	7853      	ldrb	r3, [r2, #1]
 800a506:	2b2a      	cmp	r3, #42	; 0x2a
 800a508:	bf02      	ittt	eq
 800a50a:	2310      	moveq	r3, #16
 800a50c:	1c95      	addeq	r5, r2, #2
 800a50e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a510:	220a      	movs	r2, #10
 800a512:	46aa      	mov	sl, r5
 800a514:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a518:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d91d      	bls.n	800a55c <__ssvfiscanf_r+0xf8>
 800a520:	487e      	ldr	r0, [pc, #504]	; (800a71c <__ssvfiscanf_r+0x2b8>)
 800a522:	2203      	movs	r2, #3
 800a524:	f7f5 fe5c 	bl	80001e0 <memchr>
 800a528:	b140      	cbz	r0, 800a53c <__ssvfiscanf_r+0xd8>
 800a52a:	2301      	movs	r3, #1
 800a52c:	eba0 0009 	sub.w	r0, r0, r9
 800a530:	fa03 f000 	lsl.w	r0, r3, r0
 800a534:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a536:	4318      	orrs	r0, r3
 800a538:	9041      	str	r0, [sp, #260]	; 0x104
 800a53a:	4655      	mov	r5, sl
 800a53c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a540:	2b78      	cmp	r3, #120	; 0x78
 800a542:	d806      	bhi.n	800a552 <__ssvfiscanf_r+0xee>
 800a544:	2b57      	cmp	r3, #87	; 0x57
 800a546:	d810      	bhi.n	800a56a <__ssvfiscanf_r+0x106>
 800a548:	2b25      	cmp	r3, #37	; 0x25
 800a54a:	d0c6      	beq.n	800a4da <__ssvfiscanf_r+0x76>
 800a54c:	d856      	bhi.n	800a5fc <__ssvfiscanf_r+0x198>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d064      	beq.n	800a61c <__ssvfiscanf_r+0x1b8>
 800a552:	2303      	movs	r3, #3
 800a554:	9347      	str	r3, [sp, #284]	; 0x11c
 800a556:	230a      	movs	r3, #10
 800a558:	9342      	str	r3, [sp, #264]	; 0x108
 800a55a:	e071      	b.n	800a640 <__ssvfiscanf_r+0x1dc>
 800a55c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a55e:	fb02 1103 	mla	r1, r2, r3, r1
 800a562:	3930      	subs	r1, #48	; 0x30
 800a564:	9143      	str	r1, [sp, #268]	; 0x10c
 800a566:	4655      	mov	r5, sl
 800a568:	e7d3      	b.n	800a512 <__ssvfiscanf_r+0xae>
 800a56a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a56e:	2a20      	cmp	r2, #32
 800a570:	d8ef      	bhi.n	800a552 <__ssvfiscanf_r+0xee>
 800a572:	a101      	add	r1, pc, #4	; (adr r1, 800a578 <__ssvfiscanf_r+0x114>)
 800a574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a578:	0800a62b 	.word	0x0800a62b
 800a57c:	0800a553 	.word	0x0800a553
 800a580:	0800a553 	.word	0x0800a553
 800a584:	0800a689 	.word	0x0800a689
 800a588:	0800a553 	.word	0x0800a553
 800a58c:	0800a553 	.word	0x0800a553
 800a590:	0800a553 	.word	0x0800a553
 800a594:	0800a553 	.word	0x0800a553
 800a598:	0800a553 	.word	0x0800a553
 800a59c:	0800a553 	.word	0x0800a553
 800a5a0:	0800a553 	.word	0x0800a553
 800a5a4:	0800a69f 	.word	0x0800a69f
 800a5a8:	0800a675 	.word	0x0800a675
 800a5ac:	0800a603 	.word	0x0800a603
 800a5b0:	0800a603 	.word	0x0800a603
 800a5b4:	0800a603 	.word	0x0800a603
 800a5b8:	0800a553 	.word	0x0800a553
 800a5bc:	0800a679 	.word	0x0800a679
 800a5c0:	0800a553 	.word	0x0800a553
 800a5c4:	0800a553 	.word	0x0800a553
 800a5c8:	0800a553 	.word	0x0800a553
 800a5cc:	0800a553 	.word	0x0800a553
 800a5d0:	0800a6af 	.word	0x0800a6af
 800a5d4:	0800a681 	.word	0x0800a681
 800a5d8:	0800a623 	.word	0x0800a623
 800a5dc:	0800a553 	.word	0x0800a553
 800a5e0:	0800a553 	.word	0x0800a553
 800a5e4:	0800a6ab 	.word	0x0800a6ab
 800a5e8:	0800a553 	.word	0x0800a553
 800a5ec:	0800a675 	.word	0x0800a675
 800a5f0:	0800a553 	.word	0x0800a553
 800a5f4:	0800a553 	.word	0x0800a553
 800a5f8:	0800a62b 	.word	0x0800a62b
 800a5fc:	3b45      	subs	r3, #69	; 0x45
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d8a7      	bhi.n	800a552 <__ssvfiscanf_r+0xee>
 800a602:	2305      	movs	r3, #5
 800a604:	e01b      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a606:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a608:	4621      	mov	r1, r4
 800a60a:	4630      	mov	r0, r6
 800a60c:	4798      	blx	r3
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f af68 	beq.w	800a4e4 <__ssvfiscanf_r+0x80>
 800a614:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a616:	2800      	cmp	r0, #0
 800a618:	f040 808d 	bne.w	800a736 <__ssvfiscanf_r+0x2d2>
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	e08f      	b.n	800a742 <__ssvfiscanf_r+0x2de>
 800a622:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a624:	f042 0220 	orr.w	r2, r2, #32
 800a628:	9241      	str	r2, [sp, #260]	; 0x104
 800a62a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a62c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a630:	9241      	str	r2, [sp, #260]	; 0x104
 800a632:	2210      	movs	r2, #16
 800a634:	2b6f      	cmp	r3, #111	; 0x6f
 800a636:	9242      	str	r2, [sp, #264]	; 0x108
 800a638:	bf34      	ite	cc
 800a63a:	2303      	movcc	r3, #3
 800a63c:	2304      	movcs	r3, #4
 800a63e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dd42      	ble.n	800a6cc <__ssvfiscanf_r+0x268>
 800a646:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a648:	0659      	lsls	r1, r3, #25
 800a64a:	d404      	bmi.n	800a656 <__ssvfiscanf_r+0x1f2>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	781a      	ldrb	r2, [r3, #0]
 800a650:	5cba      	ldrb	r2, [r7, r2]
 800a652:	0712      	lsls	r2, r2, #28
 800a654:	d441      	bmi.n	800a6da <__ssvfiscanf_r+0x276>
 800a656:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a658:	2b02      	cmp	r3, #2
 800a65a:	dc50      	bgt.n	800a6fe <__ssvfiscanf_r+0x29a>
 800a65c:	466b      	mov	r3, sp
 800a65e:	4622      	mov	r2, r4
 800a660:	a941      	add	r1, sp, #260	; 0x104
 800a662:	4630      	mov	r0, r6
 800a664:	f000 f9d0 	bl	800aa08 <_scanf_chars>
 800a668:	2801      	cmp	r0, #1
 800a66a:	d06e      	beq.n	800a74a <__ssvfiscanf_r+0x2e6>
 800a66c:	2802      	cmp	r0, #2
 800a66e:	f47f af20 	bne.w	800a4b2 <__ssvfiscanf_r+0x4e>
 800a672:	e7cf      	b.n	800a614 <__ssvfiscanf_r+0x1b0>
 800a674:	220a      	movs	r2, #10
 800a676:	e7dd      	b.n	800a634 <__ssvfiscanf_r+0x1d0>
 800a678:	2300      	movs	r3, #0
 800a67a:	9342      	str	r3, [sp, #264]	; 0x108
 800a67c:	2303      	movs	r3, #3
 800a67e:	e7de      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a680:	2308      	movs	r3, #8
 800a682:	9342      	str	r3, [sp, #264]	; 0x108
 800a684:	2304      	movs	r3, #4
 800a686:	e7da      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a688:	4629      	mov	r1, r5
 800a68a:	4640      	mov	r0, r8
 800a68c:	f000 fb80 	bl	800ad90 <__sccl>
 800a690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a696:	9341      	str	r3, [sp, #260]	; 0x104
 800a698:	4605      	mov	r5, r0
 800a69a:	2301      	movs	r3, #1
 800a69c:	e7cf      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a69e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a4:	9341      	str	r3, [sp, #260]	; 0x104
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e7c9      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e7c7      	b.n	800a63e <__ssvfiscanf_r+0x1da>
 800a6ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a6b0:	06c3      	lsls	r3, r0, #27
 800a6b2:	f53f aefe 	bmi.w	800a4b2 <__ssvfiscanf_r+0x4e>
 800a6b6:	9b00      	ldr	r3, [sp, #0]
 800a6b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6ba:	1d19      	adds	r1, r3, #4
 800a6bc:	9100      	str	r1, [sp, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f010 0f01 	tst.w	r0, #1
 800a6c4:	bf14      	ite	ne
 800a6c6:	801a      	strhne	r2, [r3, #0]
 800a6c8:	601a      	streq	r2, [r3, #0]
 800a6ca:	e6f2      	b.n	800a4b2 <__ssvfiscanf_r+0x4e>
 800a6cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4798      	blx	r3
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0b6      	beq.n	800a646 <__ssvfiscanf_r+0x1e2>
 800a6d8:	e79c      	b.n	800a614 <__ssvfiscanf_r+0x1b0>
 800a6da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6dc:	3201      	adds	r2, #1
 800a6de:	9245      	str	r2, [sp, #276]	; 0x114
 800a6e0:	6862      	ldr	r2, [r4, #4]
 800a6e2:	3a01      	subs	r2, #1
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	6062      	str	r2, [r4, #4]
 800a6e8:	dd02      	ble.n	800a6f0 <__ssvfiscanf_r+0x28c>
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	e7ad      	b.n	800a64c <__ssvfiscanf_r+0x1e8>
 800a6f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4798      	blx	r3
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0a7      	beq.n	800a64c <__ssvfiscanf_r+0x1e8>
 800a6fc:	e78a      	b.n	800a614 <__ssvfiscanf_r+0x1b0>
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	dc0e      	bgt.n	800a720 <__ssvfiscanf_r+0x2bc>
 800a702:	466b      	mov	r3, sp
 800a704:	4622      	mov	r2, r4
 800a706:	a941      	add	r1, sp, #260	; 0x104
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f9d7 	bl	800aabc <_scanf_i>
 800a70e:	e7ab      	b.n	800a668 <__ssvfiscanf_r+0x204>
 800a710:	0800a3b1 	.word	0x0800a3b1
 800a714:	0800a42b 	.word	0x0800a42b
 800a718:	0800b749 	.word	0x0800b749
 800a71c:	0800bb1a 	.word	0x0800bb1a
 800a720:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <__ssvfiscanf_r+0x2ec>)
 800a722:	2b00      	cmp	r3, #0
 800a724:	f43f aec5 	beq.w	800a4b2 <__ssvfiscanf_r+0x4e>
 800a728:	466b      	mov	r3, sp
 800a72a:	4622      	mov	r2, r4
 800a72c:	a941      	add	r1, sp, #260	; 0x104
 800a72e:	4630      	mov	r0, r6
 800a730:	f7fb ffe8 	bl	8006704 <_scanf_float>
 800a734:	e798      	b.n	800a668 <__ssvfiscanf_r+0x204>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a73c:	bf18      	it	ne
 800a73e:	f04f 30ff 	movne.w	r0, #4294967295
 800a742:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a74c:	e7f9      	b.n	800a742 <__ssvfiscanf_r+0x2de>
 800a74e:	bf00      	nop
 800a750:	08006705 	.word	0x08006705

0800a754 <__sfputc_r>:
 800a754:	6893      	ldr	r3, [r2, #8]
 800a756:	3b01      	subs	r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	b410      	push	{r4}
 800a75c:	6093      	str	r3, [r2, #8]
 800a75e:	da08      	bge.n	800a772 <__sfputc_r+0x1e>
 800a760:	6994      	ldr	r4, [r2, #24]
 800a762:	42a3      	cmp	r3, r4
 800a764:	db01      	blt.n	800a76a <__sfputc_r+0x16>
 800a766:	290a      	cmp	r1, #10
 800a768:	d103      	bne.n	800a772 <__sfputc_r+0x1e>
 800a76a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a76e:	f7fd b9df 	b.w	8007b30 <__swbuf_r>
 800a772:	6813      	ldr	r3, [r2, #0]
 800a774:	1c58      	adds	r0, r3, #1
 800a776:	6010      	str	r0, [r2, #0]
 800a778:	7019      	strb	r1, [r3, #0]
 800a77a:	4608      	mov	r0, r1
 800a77c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <__sfputs_r>:
 800a782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a784:	4606      	mov	r6, r0
 800a786:	460f      	mov	r7, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	18d5      	adds	r5, r2, r3
 800a78c:	42ac      	cmp	r4, r5
 800a78e:	d101      	bne.n	800a794 <__sfputs_r+0x12>
 800a790:	2000      	movs	r0, #0
 800a792:	e007      	b.n	800a7a4 <__sfputs_r+0x22>
 800a794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a798:	463a      	mov	r2, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ffda 	bl	800a754 <__sfputc_r>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d1f3      	bne.n	800a78c <__sfputs_r+0xa>
 800a7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7a8 <_vfiprintf_r>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	b09d      	sub	sp, #116	; 0x74
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	4698      	mov	r8, r3
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	b118      	cbz	r0, 800a7c0 <_vfiprintf_r+0x18>
 800a7b8:	6983      	ldr	r3, [r0, #24]
 800a7ba:	b90b      	cbnz	r3, 800a7c0 <_vfiprintf_r+0x18>
 800a7bc:	f7fe fa30 	bl	8008c20 <__sinit>
 800a7c0:	4b89      	ldr	r3, [pc, #548]	; (800a9e8 <_vfiprintf_r+0x240>)
 800a7c2:	429d      	cmp	r5, r3
 800a7c4:	d11b      	bne.n	800a7fe <_vfiprintf_r+0x56>
 800a7c6:	6875      	ldr	r5, [r6, #4]
 800a7c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	d405      	bmi.n	800a7da <_vfiprintf_r+0x32>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_vfiprintf_r+0x32>
 800a7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7d6:	f7fe fe34 	bl	8009442 <__retarget_lock_acquire_recursive>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	071b      	lsls	r3, r3, #28
 800a7de:	d501      	bpl.n	800a7e4 <_vfiprintf_r+0x3c>
 800a7e0:	692b      	ldr	r3, [r5, #16]
 800a7e2:	b9eb      	cbnz	r3, 800a820 <_vfiprintf_r+0x78>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fd fa06 	bl	8007bf8 <__swsetup_r>
 800a7ec:	b1c0      	cbz	r0, 800a820 <_vfiprintf_r+0x78>
 800a7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f0:	07dc      	lsls	r4, r3, #31
 800a7f2:	d50e      	bpl.n	800a812 <_vfiprintf_r+0x6a>
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	b01d      	add	sp, #116	; 0x74
 800a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fe:	4b7b      	ldr	r3, [pc, #492]	; (800a9ec <_vfiprintf_r+0x244>)
 800a800:	429d      	cmp	r5, r3
 800a802:	d101      	bne.n	800a808 <_vfiprintf_r+0x60>
 800a804:	68b5      	ldr	r5, [r6, #8]
 800a806:	e7df      	b.n	800a7c8 <_vfiprintf_r+0x20>
 800a808:	4b79      	ldr	r3, [pc, #484]	; (800a9f0 <_vfiprintf_r+0x248>)
 800a80a:	429d      	cmp	r5, r3
 800a80c:	bf08      	it	eq
 800a80e:	68f5      	ldreq	r5, [r6, #12]
 800a810:	e7da      	b.n	800a7c8 <_vfiprintf_r+0x20>
 800a812:	89ab      	ldrh	r3, [r5, #12]
 800a814:	0598      	lsls	r0, r3, #22
 800a816:	d4ed      	bmi.n	800a7f4 <_vfiprintf_r+0x4c>
 800a818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81a:	f7fe fe13 	bl	8009444 <__retarget_lock_release_recursive>
 800a81e:	e7e9      	b.n	800a7f4 <_vfiprintf_r+0x4c>
 800a820:	2300      	movs	r3, #0
 800a822:	9309      	str	r3, [sp, #36]	; 0x24
 800a824:	2320      	movs	r3, #32
 800a826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a82a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a82e:	2330      	movs	r3, #48	; 0x30
 800a830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9f4 <_vfiprintf_r+0x24c>
 800a834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a838:	f04f 0901 	mov.w	r9, #1
 800a83c:	4623      	mov	r3, r4
 800a83e:	469a      	mov	sl, r3
 800a840:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a844:	b10a      	cbz	r2, 800a84a <_vfiprintf_r+0xa2>
 800a846:	2a25      	cmp	r2, #37	; 0x25
 800a848:	d1f9      	bne.n	800a83e <_vfiprintf_r+0x96>
 800a84a:	ebba 0b04 	subs.w	fp, sl, r4
 800a84e:	d00b      	beq.n	800a868 <_vfiprintf_r+0xc0>
 800a850:	465b      	mov	r3, fp
 800a852:	4622      	mov	r2, r4
 800a854:	4629      	mov	r1, r5
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff93 	bl	800a782 <__sfputs_r>
 800a85c:	3001      	adds	r0, #1
 800a85e:	f000 80aa 	beq.w	800a9b6 <_vfiprintf_r+0x20e>
 800a862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a864:	445a      	add	r2, fp
 800a866:	9209      	str	r2, [sp, #36]	; 0x24
 800a868:	f89a 3000 	ldrb.w	r3, [sl]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80a2 	beq.w	800a9b6 <_vfiprintf_r+0x20e>
 800a872:	2300      	movs	r3, #0
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a87c:	f10a 0a01 	add.w	sl, sl, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	9307      	str	r3, [sp, #28]
 800a884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a888:	931a      	str	r3, [sp, #104]	; 0x68
 800a88a:	4654      	mov	r4, sl
 800a88c:	2205      	movs	r2, #5
 800a88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a892:	4858      	ldr	r0, [pc, #352]	; (800a9f4 <_vfiprintf_r+0x24c>)
 800a894:	f7f5 fca4 	bl	80001e0 <memchr>
 800a898:	9a04      	ldr	r2, [sp, #16]
 800a89a:	b9d8      	cbnz	r0, 800a8d4 <_vfiprintf_r+0x12c>
 800a89c:	06d1      	lsls	r1, r2, #27
 800a89e:	bf44      	itt	mi
 800a8a0:	2320      	movmi	r3, #32
 800a8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8a6:	0713      	lsls	r3, r2, #28
 800a8a8:	bf44      	itt	mi
 800a8aa:	232b      	movmi	r3, #43	; 0x2b
 800a8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8b6:	d015      	beq.n	800a8e4 <_vfiprintf_r+0x13c>
 800a8b8:	9a07      	ldr	r2, [sp, #28]
 800a8ba:	4654      	mov	r4, sl
 800a8bc:	2000      	movs	r0, #0
 800a8be:	f04f 0c0a 	mov.w	ip, #10
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8c8:	3b30      	subs	r3, #48	; 0x30
 800a8ca:	2b09      	cmp	r3, #9
 800a8cc:	d94e      	bls.n	800a96c <_vfiprintf_r+0x1c4>
 800a8ce:	b1b0      	cbz	r0, 800a8fe <_vfiprintf_r+0x156>
 800a8d0:	9207      	str	r2, [sp, #28]
 800a8d2:	e014      	b.n	800a8fe <_vfiprintf_r+0x156>
 800a8d4:	eba0 0308 	sub.w	r3, r0, r8
 800a8d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	9304      	str	r3, [sp, #16]
 800a8e0:	46a2      	mov	sl, r4
 800a8e2:	e7d2      	b.n	800a88a <_vfiprintf_r+0xe2>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	1d19      	adds	r1, r3, #4
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	9103      	str	r1, [sp, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bfbb      	ittet	lt
 800a8f0:	425b      	neglt	r3, r3
 800a8f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f6:	9307      	strge	r3, [sp, #28]
 800a8f8:	9307      	strlt	r3, [sp, #28]
 800a8fa:	bfb8      	it	lt
 800a8fc:	9204      	strlt	r2, [sp, #16]
 800a8fe:	7823      	ldrb	r3, [r4, #0]
 800a900:	2b2e      	cmp	r3, #46	; 0x2e
 800a902:	d10c      	bne.n	800a91e <_vfiprintf_r+0x176>
 800a904:	7863      	ldrb	r3, [r4, #1]
 800a906:	2b2a      	cmp	r3, #42	; 0x2a
 800a908:	d135      	bne.n	800a976 <_vfiprintf_r+0x1ce>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	9203      	str	r2, [sp, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	bfb8      	it	lt
 800a916:	f04f 33ff 	movlt.w	r3, #4294967295
 800a91a:	3402      	adds	r4, #2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa04 <_vfiprintf_r+0x25c>
 800a922:	7821      	ldrb	r1, [r4, #0]
 800a924:	2203      	movs	r2, #3
 800a926:	4650      	mov	r0, sl
 800a928:	f7f5 fc5a 	bl	80001e0 <memchr>
 800a92c:	b140      	cbz	r0, 800a940 <_vfiprintf_r+0x198>
 800a92e:	2340      	movs	r3, #64	; 0x40
 800a930:	eba0 000a 	sub.w	r0, r0, sl
 800a934:	fa03 f000 	lsl.w	r0, r3, r0
 800a938:	9b04      	ldr	r3, [sp, #16]
 800a93a:	4303      	orrs	r3, r0
 800a93c:	3401      	adds	r4, #1
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a944:	482c      	ldr	r0, [pc, #176]	; (800a9f8 <_vfiprintf_r+0x250>)
 800a946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94a:	2206      	movs	r2, #6
 800a94c:	f7f5 fc48 	bl	80001e0 <memchr>
 800a950:	2800      	cmp	r0, #0
 800a952:	d03f      	beq.n	800a9d4 <_vfiprintf_r+0x22c>
 800a954:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <_vfiprintf_r+0x254>)
 800a956:	bb1b      	cbnz	r3, 800a9a0 <_vfiprintf_r+0x1f8>
 800a958:	9b03      	ldr	r3, [sp, #12]
 800a95a:	3307      	adds	r3, #7
 800a95c:	f023 0307 	bic.w	r3, r3, #7
 800a960:	3308      	adds	r3, #8
 800a962:	9303      	str	r3, [sp, #12]
 800a964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a966:	443b      	add	r3, r7
 800a968:	9309      	str	r3, [sp, #36]	; 0x24
 800a96a:	e767      	b.n	800a83c <_vfiprintf_r+0x94>
 800a96c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a970:	460c      	mov	r4, r1
 800a972:	2001      	movs	r0, #1
 800a974:	e7a5      	b.n	800a8c2 <_vfiprintf_r+0x11a>
 800a976:	2300      	movs	r3, #0
 800a978:	3401      	adds	r4, #1
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	4619      	mov	r1, r3
 800a97e:	f04f 0c0a 	mov.w	ip, #10
 800a982:	4620      	mov	r0, r4
 800a984:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a988:	3a30      	subs	r2, #48	; 0x30
 800a98a:	2a09      	cmp	r2, #9
 800a98c:	d903      	bls.n	800a996 <_vfiprintf_r+0x1ee>
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0c5      	beq.n	800a91e <_vfiprintf_r+0x176>
 800a992:	9105      	str	r1, [sp, #20]
 800a994:	e7c3      	b.n	800a91e <_vfiprintf_r+0x176>
 800a996:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99a:	4604      	mov	r4, r0
 800a99c:	2301      	movs	r3, #1
 800a99e:	e7f0      	b.n	800a982 <_vfiprintf_r+0x1da>
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	4b16      	ldr	r3, [pc, #88]	; (800aa00 <_vfiprintf_r+0x258>)
 800a9a8:	a904      	add	r1, sp, #16
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7fb fae0 	bl	8005f70 <_printf_float>
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	1c78      	adds	r0, r7, #1
 800a9b4:	d1d6      	bne.n	800a964 <_vfiprintf_r+0x1bc>
 800a9b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b8:	07d9      	lsls	r1, r3, #31
 800a9ba:	d405      	bmi.n	800a9c8 <_vfiprintf_r+0x220>
 800a9bc:	89ab      	ldrh	r3, [r5, #12]
 800a9be:	059a      	lsls	r2, r3, #22
 800a9c0:	d402      	bmi.n	800a9c8 <_vfiprintf_r+0x220>
 800a9c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c4:	f7fe fd3e 	bl	8009444 <__retarget_lock_release_recursive>
 800a9c8:	89ab      	ldrh	r3, [r5, #12]
 800a9ca:	065b      	lsls	r3, r3, #25
 800a9cc:	f53f af12 	bmi.w	800a7f4 <_vfiprintf_r+0x4c>
 800a9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d2:	e711      	b.n	800a7f8 <_vfiprintf_r+0x50>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <_vfiprintf_r+0x258>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7fb fd6a 	bl	80064b8 <_printf_i>
 800a9e4:	e7e4      	b.n	800a9b0 <_vfiprintf_r+0x208>
 800a9e6:	bf00      	nop
 800a9e8:	0800b8fc 	.word	0x0800b8fc
 800a9ec:	0800b91c 	.word	0x0800b91c
 800a9f0:	0800b8dc 	.word	0x0800b8dc
 800a9f4:	0800bb14 	.word	0x0800bb14
 800a9f8:	0800bb1e 	.word	0x0800bb1e
 800a9fc:	08005f71 	.word	0x08005f71
 800aa00:	0800a783 	.word	0x0800a783
 800aa04:	0800bb1a 	.word	0x0800bb1a

0800aa08 <_scanf_chars>:
 800aa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	688a      	ldr	r2, [r1, #8]
 800aa10:	4680      	mov	r8, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	b932      	cbnz	r2, 800aa24 <_scanf_chars+0x1c>
 800aa16:	698a      	ldr	r2, [r1, #24]
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2201      	moveq	r2, #1
 800aa1e:	f04f 32ff 	movne.w	r2, #4294967295
 800aa22:	608a      	str	r2, [r1, #8]
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aab8 <_scanf_chars+0xb0>
 800aa2a:	06d1      	lsls	r1, r2, #27
 800aa2c:	bf5f      	itttt	pl
 800aa2e:	681a      	ldrpl	r2, [r3, #0]
 800aa30:	1d11      	addpl	r1, r2, #4
 800aa32:	6019      	strpl	r1, [r3, #0]
 800aa34:	6816      	ldrpl	r6, [r2, #0]
 800aa36:	2700      	movs	r7, #0
 800aa38:	69a0      	ldr	r0, [r4, #24]
 800aa3a:	b188      	cbz	r0, 800aa60 <_scanf_chars+0x58>
 800aa3c:	2801      	cmp	r0, #1
 800aa3e:	d107      	bne.n	800aa50 <_scanf_chars+0x48>
 800aa40:	682a      	ldr	r2, [r5, #0]
 800aa42:	7811      	ldrb	r1, [r2, #0]
 800aa44:	6962      	ldr	r2, [r4, #20]
 800aa46:	5c52      	ldrb	r2, [r2, r1]
 800aa48:	b952      	cbnz	r2, 800aa60 <_scanf_chars+0x58>
 800aa4a:	2f00      	cmp	r7, #0
 800aa4c:	d031      	beq.n	800aab2 <_scanf_chars+0xaa>
 800aa4e:	e022      	b.n	800aa96 <_scanf_chars+0x8e>
 800aa50:	2802      	cmp	r0, #2
 800aa52:	d120      	bne.n	800aa96 <_scanf_chars+0x8e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aa5c:	071b      	lsls	r3, r3, #28
 800aa5e:	d41a      	bmi.n	800aa96 <_scanf_chars+0x8e>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	06da      	lsls	r2, r3, #27
 800aa64:	bf5e      	ittt	pl
 800aa66:	682b      	ldrpl	r3, [r5, #0]
 800aa68:	781b      	ldrbpl	r3, [r3, #0]
 800aa6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aa6e:	682a      	ldr	r2, [r5, #0]
 800aa70:	686b      	ldr	r3, [r5, #4]
 800aa72:	3201      	adds	r2, #1
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	68a2      	ldr	r2, [r4, #8]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	3a01      	subs	r2, #1
 800aa7c:	606b      	str	r3, [r5, #4]
 800aa7e:	3701      	adds	r7, #1
 800aa80:	60a2      	str	r2, [r4, #8]
 800aa82:	b142      	cbz	r2, 800aa96 <_scanf_chars+0x8e>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dcd7      	bgt.n	800aa38 <_scanf_chars+0x30>
 800aa88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4640      	mov	r0, r8
 800aa90:	4798      	blx	r3
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0d0      	beq.n	800aa38 <_scanf_chars+0x30>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	f013 0310 	ands.w	r3, r3, #16
 800aa9c:	d105      	bne.n	800aaaa <_scanf_chars+0xa2>
 800aa9e:	68e2      	ldr	r2, [r4, #12]
 800aaa0:	3201      	adds	r2, #1
 800aaa2:	60e2      	str	r2, [r4, #12]
 800aaa4:	69a2      	ldr	r2, [r4, #24]
 800aaa6:	b102      	cbz	r2, 800aaaa <_scanf_chars+0xa2>
 800aaa8:	7033      	strb	r3, [r6, #0]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	443b      	add	r3, r7
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	2000      	movs	r0, #0
 800aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab6:	bf00      	nop
 800aab8:	0800b749 	.word	0x0800b749

0800aabc <_scanf_i>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	4698      	mov	r8, r3
 800aac2:	4b76      	ldr	r3, [pc, #472]	; (800ac9c <_scanf_i+0x1e0>)
 800aac4:	460c      	mov	r4, r1
 800aac6:	4682      	mov	sl, r0
 800aac8:	4616      	mov	r6, r2
 800aaca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aace:	b087      	sub	sp, #28
 800aad0:	ab03      	add	r3, sp, #12
 800aad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aad6:	4b72      	ldr	r3, [pc, #456]	; (800aca0 <_scanf_i+0x1e4>)
 800aad8:	69a1      	ldr	r1, [r4, #24]
 800aada:	4a72      	ldr	r2, [pc, #456]	; (800aca4 <_scanf_i+0x1e8>)
 800aadc:	2903      	cmp	r1, #3
 800aade:	bf18      	it	ne
 800aae0:	461a      	movne	r2, r3
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	9201      	str	r2, [sp, #4]
 800aae6:	1e5a      	subs	r2, r3, #1
 800aae8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aaec:	bf88      	it	hi
 800aaee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aaf2:	4627      	mov	r7, r4
 800aaf4:	bf82      	ittt	hi
 800aaf6:	eb03 0905 	addhi.w	r9, r3, r5
 800aafa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aafe:	60a3      	strhi	r3, [r4, #8]
 800ab00:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab04:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ab08:	bf98      	it	ls
 800ab0a:	f04f 0900 	movls.w	r9, #0
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	463d      	mov	r5, r7
 800ab12:	f04f 0b00 	mov.w	fp, #0
 800ab16:	6831      	ldr	r1, [r6, #0]
 800ab18:	ab03      	add	r3, sp, #12
 800ab1a:	7809      	ldrb	r1, [r1, #0]
 800ab1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab20:	2202      	movs	r2, #2
 800ab22:	f7f5 fb5d 	bl	80001e0 <memchr>
 800ab26:	b328      	cbz	r0, 800ab74 <_scanf_i+0xb8>
 800ab28:	f1bb 0f01 	cmp.w	fp, #1
 800ab2c:	d159      	bne.n	800abe2 <_scanf_i+0x126>
 800ab2e:	6862      	ldr	r2, [r4, #4]
 800ab30:	b92a      	cbnz	r2, 800ab3e <_scanf_i+0x82>
 800ab32:	6822      	ldr	r2, [r4, #0]
 800ab34:	2308      	movs	r3, #8
 800ab36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab3a:	6063      	str	r3, [r4, #4]
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	6822      	ldr	r2, [r4, #0]
 800ab40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab44:	6022      	str	r2, [r4, #0]
 800ab46:	68a2      	ldr	r2, [r4, #8]
 800ab48:	1e51      	subs	r1, r2, #1
 800ab4a:	60a1      	str	r1, [r4, #8]
 800ab4c:	b192      	cbz	r2, 800ab74 <_scanf_i+0xb8>
 800ab4e:	6832      	ldr	r2, [r6, #0]
 800ab50:	1c51      	adds	r1, r2, #1
 800ab52:	6031      	str	r1, [r6, #0]
 800ab54:	7812      	ldrb	r2, [r2, #0]
 800ab56:	f805 2b01 	strb.w	r2, [r5], #1
 800ab5a:	6872      	ldr	r2, [r6, #4]
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	6072      	str	r2, [r6, #4]
 800ab62:	dc07      	bgt.n	800ab74 <_scanf_i+0xb8>
 800ab64:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	4790      	blx	r2
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f040 8085 	bne.w	800ac7e <_scanf_i+0x1c2>
 800ab74:	f10b 0b01 	add.w	fp, fp, #1
 800ab78:	f1bb 0f03 	cmp.w	fp, #3
 800ab7c:	d1cb      	bne.n	800ab16 <_scanf_i+0x5a>
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	b90b      	cbnz	r3, 800ab86 <_scanf_i+0xca>
 800ab82:	230a      	movs	r3, #10
 800ab84:	6063      	str	r3, [r4, #4]
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	4947      	ldr	r1, [pc, #284]	; (800aca8 <_scanf_i+0x1ec>)
 800ab8a:	6960      	ldr	r0, [r4, #20]
 800ab8c:	1ac9      	subs	r1, r1, r3
 800ab8e:	f000 f8ff 	bl	800ad90 <__sccl>
 800ab92:	f04f 0b00 	mov.w	fp, #0
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d03d      	beq.n	800ac1a <_scanf_i+0x15e>
 800ab9e:	6831      	ldr	r1, [r6, #0]
 800aba0:	6960      	ldr	r0, [r4, #20]
 800aba2:	f891 c000 	ldrb.w	ip, [r1]
 800aba6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800abaa:	2800      	cmp	r0, #0
 800abac:	d035      	beq.n	800ac1a <_scanf_i+0x15e>
 800abae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800abb2:	d124      	bne.n	800abfe <_scanf_i+0x142>
 800abb4:	0510      	lsls	r0, r2, #20
 800abb6:	d522      	bpl.n	800abfe <_scanf_i+0x142>
 800abb8:	f10b 0b01 	add.w	fp, fp, #1
 800abbc:	f1b9 0f00 	cmp.w	r9, #0
 800abc0:	d003      	beq.n	800abca <_scanf_i+0x10e>
 800abc2:	3301      	adds	r3, #1
 800abc4:	f109 39ff 	add.w	r9, r9, #4294967295
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6873      	ldr	r3, [r6, #4]
 800abcc:	3b01      	subs	r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	6073      	str	r3, [r6, #4]
 800abd2:	dd1b      	ble.n	800ac0c <_scanf_i+0x150>
 800abd4:	6833      	ldr	r3, [r6, #0]
 800abd6:	3301      	adds	r3, #1
 800abd8:	6033      	str	r3, [r6, #0]
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	3b01      	subs	r3, #1
 800abde:	60a3      	str	r3, [r4, #8]
 800abe0:	e7d9      	b.n	800ab96 <_scanf_i+0xda>
 800abe2:	f1bb 0f02 	cmp.w	fp, #2
 800abe6:	d1ae      	bne.n	800ab46 <_scanf_i+0x8a>
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800abee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800abf2:	d1bf      	bne.n	800ab74 <_scanf_i+0xb8>
 800abf4:	2310      	movs	r3, #16
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abfc:	e7a2      	b.n	800ab44 <_scanf_i+0x88>
 800abfe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ac02:	6022      	str	r2, [r4, #0]
 800ac04:	780b      	ldrb	r3, [r1, #0]
 800ac06:	f805 3b01 	strb.w	r3, [r5], #1
 800ac0a:	e7de      	b.n	800abca <_scanf_i+0x10e>
 800ac0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac10:	4631      	mov	r1, r6
 800ac12:	4650      	mov	r0, sl
 800ac14:	4798      	blx	r3
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0df      	beq.n	800abda <_scanf_i+0x11e>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	05db      	lsls	r3, r3, #23
 800ac1e:	d50d      	bpl.n	800ac3c <_scanf_i+0x180>
 800ac20:	42bd      	cmp	r5, r7
 800ac22:	d909      	bls.n	800ac38 <_scanf_i+0x17c>
 800ac24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4798      	blx	r3
 800ac32:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac36:	464d      	mov	r5, r9
 800ac38:	42bd      	cmp	r5, r7
 800ac3a:	d02d      	beq.n	800ac98 <_scanf_i+0x1dc>
 800ac3c:	6822      	ldr	r2, [r4, #0]
 800ac3e:	f012 0210 	ands.w	r2, r2, #16
 800ac42:	d113      	bne.n	800ac6c <_scanf_i+0x1b0>
 800ac44:	702a      	strb	r2, [r5, #0]
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	9e01      	ldr	r6, [sp, #4]
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	47b0      	blx	r6
 800ac50:	6821      	ldr	r1, [r4, #0]
 800ac52:	f8d8 3000 	ldr.w	r3, [r8]
 800ac56:	f011 0f20 	tst.w	r1, #32
 800ac5a:	d013      	beq.n	800ac84 <_scanf_i+0x1c8>
 800ac5c:	1d1a      	adds	r2, r3, #4
 800ac5e:	f8c8 2000 	str.w	r2, [r8]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6018      	str	r0, [r3, #0]
 800ac66:	68e3      	ldr	r3, [r4, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60e3      	str	r3, [r4, #12]
 800ac6c:	1bed      	subs	r5, r5, r7
 800ac6e:	44ab      	add	fp, r5
 800ac70:	6925      	ldr	r5, [r4, #16]
 800ac72:	445d      	add	r5, fp
 800ac74:	6125      	str	r5, [r4, #16]
 800ac76:	2000      	movs	r0, #0
 800ac78:	b007      	add	sp, #28
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	f04f 0b00 	mov.w	fp, #0
 800ac82:	e7ca      	b.n	800ac1a <_scanf_i+0x15e>
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	f8c8 2000 	str.w	r2, [r8]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f011 0f01 	tst.w	r1, #1
 800ac90:	bf14      	ite	ne
 800ac92:	8018      	strhne	r0, [r3, #0]
 800ac94:	6018      	streq	r0, [r3, #0]
 800ac96:	e7e6      	b.n	800ac66 <_scanf_i+0x1aa>
 800ac98:	2001      	movs	r0, #1
 800ac9a:	e7ed      	b.n	800ac78 <_scanf_i+0x1bc>
 800ac9c:	0800b188 	.word	0x0800b188
 800aca0:	0800aee5 	.word	0x0800aee5
 800aca4:	08007b2d 	.word	0x08007b2d
 800aca8:	0800bb3e 	.word	0x0800bb3e

0800acac <_putc_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	460d      	mov	r5, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	4606      	mov	r6, r0
 800acb4:	b118      	cbz	r0, 800acbe <_putc_r+0x12>
 800acb6:	6983      	ldr	r3, [r0, #24]
 800acb8:	b90b      	cbnz	r3, 800acbe <_putc_r+0x12>
 800acba:	f7fd ffb1 	bl	8008c20 <__sinit>
 800acbe:	4b1c      	ldr	r3, [pc, #112]	; (800ad30 <_putc_r+0x84>)
 800acc0:	429c      	cmp	r4, r3
 800acc2:	d124      	bne.n	800ad0e <_putc_r+0x62>
 800acc4:	6874      	ldr	r4, [r6, #4]
 800acc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc8:	07d8      	lsls	r0, r3, #31
 800acca:	d405      	bmi.n	800acd8 <_putc_r+0x2c>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	0599      	lsls	r1, r3, #22
 800acd0:	d402      	bmi.n	800acd8 <_putc_r+0x2c>
 800acd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acd4:	f7fe fbb5 	bl	8009442 <__retarget_lock_acquire_recursive>
 800acd8:	68a3      	ldr	r3, [r4, #8]
 800acda:	3b01      	subs	r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	60a3      	str	r3, [r4, #8]
 800ace0:	da05      	bge.n	800acee <_putc_r+0x42>
 800ace2:	69a2      	ldr	r2, [r4, #24]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	db1c      	blt.n	800ad22 <_putc_r+0x76>
 800ace8:	b2eb      	uxtb	r3, r5
 800acea:	2b0a      	cmp	r3, #10
 800acec:	d019      	beq.n	800ad22 <_putc_r+0x76>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	6022      	str	r2, [r4, #0]
 800acf4:	701d      	strb	r5, [r3, #0]
 800acf6:	b2ed      	uxtb	r5, r5
 800acf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfa:	07da      	lsls	r2, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_putc_r+0x5e>
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	059b      	lsls	r3, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_putc_r+0x5e>
 800ad04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad06:	f7fe fb9d 	bl	8009444 <__retarget_lock_release_recursive>
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <_putc_r+0x88>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d101      	bne.n	800ad18 <_putc_r+0x6c>
 800ad14:	68b4      	ldr	r4, [r6, #8]
 800ad16:	e7d6      	b.n	800acc6 <_putc_r+0x1a>
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <_putc_r+0x8c>)
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	bf08      	it	eq
 800ad1e:	68f4      	ldreq	r4, [r6, #12]
 800ad20:	e7d1      	b.n	800acc6 <_putc_r+0x1a>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4622      	mov	r2, r4
 800ad26:	4630      	mov	r0, r6
 800ad28:	f7fc ff02 	bl	8007b30 <__swbuf_r>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	e7e3      	b.n	800acf8 <_putc_r+0x4c>
 800ad30:	0800b8fc 	.word	0x0800b8fc
 800ad34:	0800b91c 	.word	0x0800b91c
 800ad38:	0800b8dc 	.word	0x0800b8dc

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f7 fb10 	bl	8002370 <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200008a0 	.word	0x200008a0

0800ad60 <nan>:
 800ad60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad68 <nan+0x8>
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	00000000 	.word	0x00000000
 800ad6c:	7ff80000 	.word	0x7ff80000

0800ad70 <_sbrk_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d06      	ldr	r5, [pc, #24]	; (800ad8c <_sbrk_r+0x1c>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	602b      	str	r3, [r5, #0]
 800ad7c:	f7f7 fb20 	bl	80023c0 <_sbrk>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_sbrk_r+0x1a>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_sbrk_r+0x1a>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	200008a0 	.word	0x200008a0

0800ad90 <__sccl>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	780b      	ldrb	r3, [r1, #0]
 800ad94:	4604      	mov	r4, r0
 800ad96:	2b5e      	cmp	r3, #94	; 0x5e
 800ad98:	bf0b      	itete	eq
 800ad9a:	784b      	ldrbeq	r3, [r1, #1]
 800ad9c:	1c48      	addne	r0, r1, #1
 800ad9e:	1c88      	addeq	r0, r1, #2
 800ada0:	2200      	movne	r2, #0
 800ada2:	bf08      	it	eq
 800ada4:	2201      	moveq	r2, #1
 800ada6:	1e61      	subs	r1, r4, #1
 800ada8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800adac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800adb0:	42a9      	cmp	r1, r5
 800adb2:	d1fb      	bne.n	800adac <__sccl+0x1c>
 800adb4:	b90b      	cbnz	r3, 800adba <__sccl+0x2a>
 800adb6:	3801      	subs	r0, #1
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	f082 0201 	eor.w	r2, r2, #1
 800adbe:	54e2      	strb	r2, [r4, r3]
 800adc0:	4605      	mov	r5, r0
 800adc2:	4628      	mov	r0, r5
 800adc4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800adc8:	292d      	cmp	r1, #45	; 0x2d
 800adca:	d006      	beq.n	800adda <__sccl+0x4a>
 800adcc:	295d      	cmp	r1, #93	; 0x5d
 800adce:	d0f3      	beq.n	800adb8 <__sccl+0x28>
 800add0:	b909      	cbnz	r1, 800add6 <__sccl+0x46>
 800add2:	4628      	mov	r0, r5
 800add4:	e7f0      	b.n	800adb8 <__sccl+0x28>
 800add6:	460b      	mov	r3, r1
 800add8:	e7f1      	b.n	800adbe <__sccl+0x2e>
 800adda:	786e      	ldrb	r6, [r5, #1]
 800addc:	2e5d      	cmp	r6, #93	; 0x5d
 800adde:	d0fa      	beq.n	800add6 <__sccl+0x46>
 800ade0:	42b3      	cmp	r3, r6
 800ade2:	dcf8      	bgt.n	800add6 <__sccl+0x46>
 800ade4:	3502      	adds	r5, #2
 800ade6:	4619      	mov	r1, r3
 800ade8:	3101      	adds	r1, #1
 800adea:	428e      	cmp	r6, r1
 800adec:	5462      	strb	r2, [r4, r1]
 800adee:	dcfb      	bgt.n	800ade8 <__sccl+0x58>
 800adf0:	1af1      	subs	r1, r6, r3
 800adf2:	3901      	subs	r1, #1
 800adf4:	1c58      	adds	r0, r3, #1
 800adf6:	42b3      	cmp	r3, r6
 800adf8:	bfa8      	it	ge
 800adfa:	2100      	movge	r1, #0
 800adfc:	1843      	adds	r3, r0, r1
 800adfe:	e7e0      	b.n	800adc2 <__sccl+0x32>

0800ae00 <_strtoul_l.constprop.0>:
 800ae00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae04:	4f36      	ldr	r7, [pc, #216]	; (800aee0 <_strtoul_l.constprop.0+0xe0>)
 800ae06:	4686      	mov	lr, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae10:	5de6      	ldrb	r6, [r4, r7]
 800ae12:	f016 0608 	ands.w	r6, r6, #8
 800ae16:	d1f8      	bne.n	800ae0a <_strtoul_l.constprop.0+0xa>
 800ae18:	2c2d      	cmp	r4, #45	; 0x2d
 800ae1a:	d12f      	bne.n	800ae7c <_strtoul_l.constprop.0+0x7c>
 800ae1c:	782c      	ldrb	r4, [r5, #0]
 800ae1e:	2601      	movs	r6, #1
 800ae20:	1c85      	adds	r5, r0, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d057      	beq.n	800aed6 <_strtoul_l.constprop.0+0xd6>
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d109      	bne.n	800ae3e <_strtoul_l.constprop.0+0x3e>
 800ae2a:	2c30      	cmp	r4, #48	; 0x30
 800ae2c:	d107      	bne.n	800ae3e <_strtoul_l.constprop.0+0x3e>
 800ae2e:	7828      	ldrb	r0, [r5, #0]
 800ae30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ae34:	2858      	cmp	r0, #88	; 0x58
 800ae36:	d149      	bne.n	800aecc <_strtoul_l.constprop.0+0xcc>
 800ae38:	786c      	ldrb	r4, [r5, #1]
 800ae3a:	2310      	movs	r3, #16
 800ae3c:	3502      	adds	r5, #2
 800ae3e:	f04f 38ff 	mov.w	r8, #4294967295
 800ae42:	2700      	movs	r7, #0
 800ae44:	fbb8 f8f3 	udiv	r8, r8, r3
 800ae48:	fb03 f908 	mul.w	r9, r3, r8
 800ae4c:	ea6f 0909 	mvn.w	r9, r9
 800ae50:	4638      	mov	r0, r7
 800ae52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae56:	f1bc 0f09 	cmp.w	ip, #9
 800ae5a:	d814      	bhi.n	800ae86 <_strtoul_l.constprop.0+0x86>
 800ae5c:	4664      	mov	r4, ip
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	dd22      	ble.n	800aea8 <_strtoul_l.constprop.0+0xa8>
 800ae62:	2f00      	cmp	r7, #0
 800ae64:	db1d      	blt.n	800aea2 <_strtoul_l.constprop.0+0xa2>
 800ae66:	4580      	cmp	r8, r0
 800ae68:	d31b      	bcc.n	800aea2 <_strtoul_l.constprop.0+0xa2>
 800ae6a:	d101      	bne.n	800ae70 <_strtoul_l.constprop.0+0x70>
 800ae6c:	45a1      	cmp	r9, r4
 800ae6e:	db18      	blt.n	800aea2 <_strtoul_l.constprop.0+0xa2>
 800ae70:	fb00 4003 	mla	r0, r0, r3, r4
 800ae74:	2701      	movs	r7, #1
 800ae76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae7a:	e7ea      	b.n	800ae52 <_strtoul_l.constprop.0+0x52>
 800ae7c:	2c2b      	cmp	r4, #43	; 0x2b
 800ae7e:	bf04      	itt	eq
 800ae80:	782c      	ldrbeq	r4, [r5, #0]
 800ae82:	1c85      	addeq	r5, r0, #2
 800ae84:	e7cd      	b.n	800ae22 <_strtoul_l.constprop.0+0x22>
 800ae86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae8a:	f1bc 0f19 	cmp.w	ip, #25
 800ae8e:	d801      	bhi.n	800ae94 <_strtoul_l.constprop.0+0x94>
 800ae90:	3c37      	subs	r4, #55	; 0x37
 800ae92:	e7e4      	b.n	800ae5e <_strtoul_l.constprop.0+0x5e>
 800ae94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ae98:	f1bc 0f19 	cmp.w	ip, #25
 800ae9c:	d804      	bhi.n	800aea8 <_strtoul_l.constprop.0+0xa8>
 800ae9e:	3c57      	subs	r4, #87	; 0x57
 800aea0:	e7dd      	b.n	800ae5e <_strtoul_l.constprop.0+0x5e>
 800aea2:	f04f 37ff 	mov.w	r7, #4294967295
 800aea6:	e7e6      	b.n	800ae76 <_strtoul_l.constprop.0+0x76>
 800aea8:	2f00      	cmp	r7, #0
 800aeaa:	da07      	bge.n	800aebc <_strtoul_l.constprop.0+0xbc>
 800aeac:	2322      	movs	r3, #34	; 0x22
 800aeae:	f8ce 3000 	str.w	r3, [lr]
 800aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb6:	b932      	cbnz	r2, 800aec6 <_strtoul_l.constprop.0+0xc6>
 800aeb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aebc:	b106      	cbz	r6, 800aec0 <_strtoul_l.constprop.0+0xc0>
 800aebe:	4240      	negs	r0, r0
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	d0f9      	beq.n	800aeb8 <_strtoul_l.constprop.0+0xb8>
 800aec4:	b107      	cbz	r7, 800aec8 <_strtoul_l.constprop.0+0xc8>
 800aec6:	1e69      	subs	r1, r5, #1
 800aec8:	6011      	str	r1, [r2, #0]
 800aeca:	e7f5      	b.n	800aeb8 <_strtoul_l.constprop.0+0xb8>
 800aecc:	2430      	movs	r4, #48	; 0x30
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1b5      	bne.n	800ae3e <_strtoul_l.constprop.0+0x3e>
 800aed2:	2308      	movs	r3, #8
 800aed4:	e7b3      	b.n	800ae3e <_strtoul_l.constprop.0+0x3e>
 800aed6:	2c30      	cmp	r4, #48	; 0x30
 800aed8:	d0a9      	beq.n	800ae2e <_strtoul_l.constprop.0+0x2e>
 800aeda:	230a      	movs	r3, #10
 800aedc:	e7af      	b.n	800ae3e <_strtoul_l.constprop.0+0x3e>
 800aede:	bf00      	nop
 800aee0:	0800b749 	.word	0x0800b749

0800aee4 <_strtoul_r>:
 800aee4:	f7ff bf8c 	b.w	800ae00 <_strtoul_l.constprop.0>

0800aee8 <__submore>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	460c      	mov	r4, r1
 800aeee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d11d      	bne.n	800af34 <__submore+0x4c>
 800aef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aefc:	f7ff f888 	bl	800a010 <_malloc_r>
 800af00:	b918      	cbnz	r0, 800af0a <__submore+0x22>
 800af02:	f04f 30ff 	mov.w	r0, #4294967295
 800af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af0e:	63a3      	str	r3, [r4, #56]	; 0x38
 800af10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800af14:	6360      	str	r0, [r4, #52]	; 0x34
 800af16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800af1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800af1e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800af22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800af26:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800af2a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800af2e:	6020      	str	r0, [r4, #0]
 800af30:	2000      	movs	r0, #0
 800af32:	e7e8      	b.n	800af06 <__submore+0x1e>
 800af34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800af36:	0077      	lsls	r7, r6, #1
 800af38:	463a      	mov	r2, r7
 800af3a:	f000 f895 	bl	800b068 <_realloc_r>
 800af3e:	4605      	mov	r5, r0
 800af40:	2800      	cmp	r0, #0
 800af42:	d0de      	beq.n	800af02 <__submore+0x1a>
 800af44:	eb00 0806 	add.w	r8, r0, r6
 800af48:	4601      	mov	r1, r0
 800af4a:	4632      	mov	r2, r6
 800af4c:	4640      	mov	r0, r8
 800af4e:	f7fe fb0d 	bl	800956c <memcpy>
 800af52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800af56:	f8c4 8000 	str.w	r8, [r4]
 800af5a:	e7e9      	b.n	800af30 <__submore+0x48>

0800af5c <__ascii_wctomb>:
 800af5c:	b149      	cbz	r1, 800af72 <__ascii_wctomb+0x16>
 800af5e:	2aff      	cmp	r2, #255	; 0xff
 800af60:	bf85      	ittet	hi
 800af62:	238a      	movhi	r3, #138	; 0x8a
 800af64:	6003      	strhi	r3, [r0, #0]
 800af66:	700a      	strbls	r2, [r1, #0]
 800af68:	f04f 30ff 	movhi.w	r0, #4294967295
 800af6c:	bf98      	it	ls
 800af6e:	2001      	movls	r0, #1
 800af70:	4770      	bx	lr
 800af72:	4608      	mov	r0, r1
 800af74:	4770      	bx	lr
	...

0800af78 <__assert_func>:
 800af78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af7a:	4614      	mov	r4, r2
 800af7c:	461a      	mov	r2, r3
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <__assert_func+0x2c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4605      	mov	r5, r0
 800af84:	68d8      	ldr	r0, [r3, #12]
 800af86:	b14c      	cbz	r4, 800af9c <__assert_func+0x24>
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <__assert_func+0x30>)
 800af8a:	9100      	str	r1, [sp, #0]
 800af8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af90:	4906      	ldr	r1, [pc, #24]	; (800afac <__assert_func+0x34>)
 800af92:	462b      	mov	r3, r5
 800af94:	f000 f80e 	bl	800afb4 <fiprintf>
 800af98:	f000 f895 	bl	800b0c6 <abort>
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <__assert_func+0x38>)
 800af9e:	461c      	mov	r4, r3
 800afa0:	e7f3      	b.n	800af8a <__assert_func+0x12>
 800afa2:	bf00      	nop
 800afa4:	2000003c 	.word	0x2000003c
 800afa8:	0800bb40 	.word	0x0800bb40
 800afac:	0800bb4d 	.word	0x0800bb4d
 800afb0:	0800b47f 	.word	0x0800b47f

0800afb4 <fiprintf>:
 800afb4:	b40e      	push	{r1, r2, r3}
 800afb6:	b503      	push	{r0, r1, lr}
 800afb8:	4601      	mov	r1, r0
 800afba:	ab03      	add	r3, sp, #12
 800afbc:	4805      	ldr	r0, [pc, #20]	; (800afd4 <fiprintf+0x20>)
 800afbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc2:	6800      	ldr	r0, [r0, #0]
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f7ff fbef 	bl	800a7a8 <_vfiprintf_r>
 800afca:	b002      	add	sp, #8
 800afcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd0:	b003      	add	sp, #12
 800afd2:	4770      	bx	lr
 800afd4:	2000003c 	.word	0x2000003c

0800afd8 <_fstat_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_fstat_r+0x20>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f7f7 f9e2 	bl	80023ae <_fstat>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d102      	bne.n	800aff4 <_fstat_r+0x1c>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b103      	cbz	r3, 800aff4 <_fstat_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	200008a0 	.word	0x200008a0

0800affc <_isatty_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d06      	ldr	r5, [pc, #24]	; (800b018 <_isatty_r+0x1c>)
 800b000:	2300      	movs	r3, #0
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f7 f9d6 	bl	80023b8 <_isatty>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_isatty_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_isatty_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	200008a0 	.word	0x200008a0

0800b01c <memmove>:
 800b01c:	4288      	cmp	r0, r1
 800b01e:	b510      	push	{r4, lr}
 800b020:	eb01 0402 	add.w	r4, r1, r2
 800b024:	d902      	bls.n	800b02c <memmove+0x10>
 800b026:	4284      	cmp	r4, r0
 800b028:	4623      	mov	r3, r4
 800b02a:	d807      	bhi.n	800b03c <memmove+0x20>
 800b02c:	1e43      	subs	r3, r0, #1
 800b02e:	42a1      	cmp	r1, r4
 800b030:	d008      	beq.n	800b044 <memmove+0x28>
 800b032:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b03a:	e7f8      	b.n	800b02e <memmove+0x12>
 800b03c:	4402      	add	r2, r0
 800b03e:	4601      	mov	r1, r0
 800b040:	428a      	cmp	r2, r1
 800b042:	d100      	bne.n	800b046 <memmove+0x2a>
 800b044:	bd10      	pop	{r4, pc}
 800b046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b04a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b04e:	e7f7      	b.n	800b040 <memmove+0x24>

0800b050 <__malloc_lock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_lock+0x8>)
 800b052:	f7fe b9f6 	b.w	8009442 <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	20000894 	.word	0x20000894

0800b05c <__malloc_unlock>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__malloc_unlock+0x8>)
 800b05e:	f7fe b9f1 	b.w	8009444 <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	20000894 	.word	0x20000894

0800b068 <_realloc_r>:
 800b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06c:	4680      	mov	r8, r0
 800b06e:	4614      	mov	r4, r2
 800b070:	460e      	mov	r6, r1
 800b072:	b921      	cbnz	r1, 800b07e <_realloc_r+0x16>
 800b074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	4611      	mov	r1, r2
 800b07a:	f7fe bfc9 	b.w	800a010 <_malloc_r>
 800b07e:	b92a      	cbnz	r2, 800b08c <_realloc_r+0x24>
 800b080:	f7fe ff5a 	bl	8009f38 <_free_r>
 800b084:	4625      	mov	r5, r4
 800b086:	4628      	mov	r0, r5
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08c:	f000 f822 	bl	800b0d4 <_malloc_usable_size_r>
 800b090:	4284      	cmp	r4, r0
 800b092:	4607      	mov	r7, r0
 800b094:	d802      	bhi.n	800b09c <_realloc_r+0x34>
 800b096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b09a:	d812      	bhi.n	800b0c2 <_realloc_r+0x5a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7fe ffb6 	bl	800a010 <_malloc_r>
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0ed      	beq.n	800b086 <_realloc_r+0x1e>
 800b0aa:	42bc      	cmp	r4, r7
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	bf28      	it	cs
 800b0b2:	463a      	movcs	r2, r7
 800b0b4:	f7fe fa5a 	bl	800956c <memcpy>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7fe ff3c 	bl	8009f38 <_free_r>
 800b0c0:	e7e1      	b.n	800b086 <_realloc_r+0x1e>
 800b0c2:	4635      	mov	r5, r6
 800b0c4:	e7df      	b.n	800b086 <_realloc_r+0x1e>

0800b0c6 <abort>:
 800b0c6:	b508      	push	{r3, lr}
 800b0c8:	2006      	movs	r0, #6
 800b0ca:	f000 f833 	bl	800b134 <raise>
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	f7f7 f948 	bl	8002364 <_exit>

0800b0d4 <_malloc_usable_size_r>:
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f18      	subs	r0, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfbc      	itt	lt
 800b0de:	580b      	ldrlt	r3, [r1, r0]
 800b0e0:	18c0      	addlt	r0, r0, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_raise_r>:
 800b0e4:	291f      	cmp	r1, #31
 800b0e6:	b538      	push	{r3, r4, r5, lr}
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	d904      	bls.n	800b0f8 <_raise_r+0x14>
 800b0ee:	2316      	movs	r3, #22
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0fa:	b112      	cbz	r2, 800b102 <_raise_r+0x1e>
 800b0fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b100:	b94b      	cbnz	r3, 800b116 <_raise_r+0x32>
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f830 	bl	800b168 <_getpid_r>
 800b108:	462a      	mov	r2, r5
 800b10a:	4601      	mov	r1, r0
 800b10c:	4620      	mov	r0, r4
 800b10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b112:	f000 b817 	b.w	800b144 <_kill_r>
 800b116:	2b01      	cmp	r3, #1
 800b118:	d00a      	beq.n	800b130 <_raise_r+0x4c>
 800b11a:	1c59      	adds	r1, r3, #1
 800b11c:	d103      	bne.n	800b126 <_raise_r+0x42>
 800b11e:	2316      	movs	r3, #22
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	2001      	movs	r0, #1
 800b124:	e7e7      	b.n	800b0f6 <_raise_r+0x12>
 800b126:	2400      	movs	r4, #0
 800b128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b12c:	4628      	mov	r0, r5
 800b12e:	4798      	blx	r3
 800b130:	2000      	movs	r0, #0
 800b132:	e7e0      	b.n	800b0f6 <_raise_r+0x12>

0800b134 <raise>:
 800b134:	4b02      	ldr	r3, [pc, #8]	; (800b140 <raise+0xc>)
 800b136:	4601      	mov	r1, r0
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	f7ff bfd3 	b.w	800b0e4 <_raise_r>
 800b13e:	bf00      	nop
 800b140:	2000003c 	.word	0x2000003c

0800b144 <_kill_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d07      	ldr	r5, [pc, #28]	; (800b164 <_kill_r+0x20>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	4611      	mov	r1, r2
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	f7f7 f8ff 	bl	8002354 <_kill>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d102      	bne.n	800b160 <_kill_r+0x1c>
 800b15a:	682b      	ldr	r3, [r5, #0]
 800b15c:	b103      	cbz	r3, 800b160 <_kill_r+0x1c>
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	bd38      	pop	{r3, r4, r5, pc}
 800b162:	bf00      	nop
 800b164:	200008a0 	.word	0x200008a0

0800b168 <_getpid_r>:
 800b168:	f7f7 b8f2 	b.w	8002350 <_getpid>

0800b16c <_init>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr

0800b178 <_fini>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	bf00      	nop
 800b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17e:	bc08      	pop	{r3}
 800b180:	469e      	mov	lr, r3
 800b182:	4770      	bx	lr
