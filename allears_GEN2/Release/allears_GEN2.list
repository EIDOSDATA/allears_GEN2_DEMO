
allears_GEN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  0800add0  0800add0  0001add0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7c4  0800b7c4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7cc  0800b7cc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7cc  0800b7cc  0001b7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7d0  0800b7d0  0001b7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000210  0800b9e4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000854  0800b9e4  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d0b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052cc  00000000  00000000  00043f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000136b4  00000000  00000000  00049217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0005c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d70  00000000  00000000  0005dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8ed  00000000  00000000  0005f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007645  00000000  00000000  0007a22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00081872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ecc  00000000  00000000  000818c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adb4 	.word	0x0800adb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800adb4 	.word	0x0800adb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Echo_Btn_isHandled>:
echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_isHandled(void)
{
	return ECHO_BTN_STATE_HANDLED;
}
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <Echo_Btn_isHandled+0x8>)
 8000ffa:	7898      	ldrb	r0, [r3, #2]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000022c 	.word	0x2000022c

08001004 <Echo_Btn_Handled_clear>:

void Echo_Btn_Handled_clear(void)
{
	ECHO_BTN_STATE_HANDLED = false;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <Echo_Btn_Handled_clear+0x8>)
 8001006:	2200      	movs	r2, #0
 8001008:	709a      	strb	r2, [r3, #2]
}
 800100a:	4770      	bx	lr
 800100c:	2000022c 	.word	0x2000022c

08001010 <Echo_Btn_handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_handle(void)
{
 8001010:	b508      	push	{r3, lr}
	char res_msg[10] =
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 8001012:	2110      	movs	r1, #16
 8001014:	480e      	ldr	r0, [pc, #56]	; (8001050 <Echo_Btn_handle+0x40>)
 8001016:	f002 fc3f 	bl	8003898 <HAL_GPIO_ReadPin>

	if (pressed != ECHO_BTN_STATE_PRESSED)
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <Echo_Btn_handle+0x44>)
	pressed = ECHO_BTN_IS_PRESSED();
 800101c:	4601      	mov	r1, r0
	if (pressed != ECHO_BTN_STATE_PRESSED)
 800101e:	781a      	ldrb	r2, [r3, #0]
	pressed = ECHO_BTN_IS_PRESSED();
 8001020:	fab0 f080 	clz	r0, r0
 8001024:	0940      	lsrs	r0, r0, #5
	if (pressed != ECHO_BTN_STATE_PRESSED)
 8001026:	4282      	cmp	r2, r0
 8001028:	d005      	beq.n	8001036 <Echo_Btn_handle+0x26>
	{
		ECHO_BTN_STATE_PRESSED = pressed;
 800102a:	7018      	strb	r0, [r3, #0]
#ifdef DEBUG
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
		ECHO_SHELL_PRINT(("%s\n",res_msg));
#endif

		if (ECHO_BTN_STATE_PRESSED == false)
 800102c:	b911      	cbnz	r1, 8001034 <Echo_Btn_handle+0x24>
			//aulLed_enable();
		}
		else
		{
			/* BUTTON PRESSED, Send Signal >> echo_state.c */
			ECHO_BTN_STATE_HANDLED = true;
 800102e:	2201      	movs	r2, #1
 8001030:	709a      	strb	r2, [r3, #2]
			ECHO_BTN_STATE_HELD_TICK = 0;
 8001032:	6059      	str	r1, [r3, #4]
		else
		{
			/* Ignored */
		}
	}
}
 8001034:	bd08      	pop	{r3, pc}
	else if (ECHO_BTN_STATE_PRESSED == true)
 8001036:	2a00      	cmp	r2, #0
 8001038:	d0fc      	beq.n	8001034 <Echo_Btn_handle+0x24>
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8001040:	d103      	bne.n	800104a <Echo_Btn_handle+0x3a>
			ECHO_BTN_STATE_HELD_TICK++;
 8001042:	f240 32e9 	movw	r2, #1001	; 0x3e9
			ECHO_BTN_STATE_HELD_TICK++;
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	e7f4      	b.n	8001034 <Echo_Btn_handle+0x24>
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 800104a:	d2f3      	bcs.n	8001034 <Echo_Btn_handle+0x24>
			ECHO_BTN_STATE_HELD_TICK++;
 800104c:	3201      	adds	r2, #1
 800104e:	e7fa      	b.n	8001046 <Echo_Btn_handle+0x36>
 8001050:	48000400 	.word	0x48000400
 8001054:	2000022c 	.word	0x2000022c

08001058 <Echo_Flash_Write>:
{
	return FLASH_BANK_1;
}

HAL_StatusTypeDef Echo_Flash_Write()
{
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800105a:	f002 fa01 	bl	8003460 <HAL_FLASH_Unlock>
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <Echo_Flash_Write+0xb8>)
 8001060:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001068:	b291      	uxth	r1, r2
 800106a:	4299      	cmp	r1, r3
 800106c:	d035      	beq.n	80010da <Echo_Flash_Write+0x82>
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Echo_Flash_Write+0xbc>)
 8001070:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <Echo_Flash_Write+0xc0>)
 8001076:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800107a:	4293      	cmp	r3, r2
 800107c:	d82d      	bhi.n	80010da <Echo_Flash_Write+0x82>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	0adb      	lsrs	r3, r3, #11

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <Echo_Flash_Write+0xc4>)
 8001084:	6013      	str	r3, [r2, #0]
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <Echo_Flash_Write+0xb8>)
 8001088:	f8d2 15e0 	ldr.w	r1, [r2, #1504]	; 0x5e0
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	b288      	uxth	r0, r1
 8001092:	4290      	cmp	r0, r2
 8001094:	d023      	beq.n	80010de <Echo_Flash_Write+0x86>
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <Echo_Flash_Write+0xbc>)
 8001098:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 800109c:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <Echo_Flash_Write+0xc8>)
 80010a2:	4291      	cmp	r1, r2
 80010a4:	d81b      	bhi.n	80010de <Echo_Flash_Write+0x86>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	0ad2      	lsrs	r2, r2, #11
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80010aa:	f1c3 0101 	rsb	r1, r3, #1
 80010ae:	440a      	add	r2, r1
 80010b0:	491c      	ldr	r1, [pc, #112]	; (8001124 <Echo_Flash_Write+0xcc>)
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <Echo_Flash_Write+0xd0>)
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80010b4:	600a      	str	r2, [r1, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80010b6:	2101      	movs	r1, #1
 80010b8:	6001      	str	r1, [r0, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <Echo_Flash_Write+0xd4>)
 80010bc:	2400      	movs	r4, #0
	EraseInitStruct.Banks = BankNumber;
 80010be:	e9c0 4100 	strd	r4, r1, [r0]
	EraseInitStruct.Page = FirstPage;
	EraseInitStruct.NbPages = NbOfPages;

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80010c2:	491b      	ldr	r1, [pc, #108]	; (8001130 <Echo_Flash_Write+0xd8>)
	EraseInitStruct.NbPages = NbOfPages;
 80010c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80010c8:	f002 fabe 	bl	8003648 <HAL_FLASHEx_Erase>
 80010cc:	4604      	mov	r4, r0
 80010ce:	b140      	cbz	r0, 80010e2 <Echo_Flash_Write+0x8a>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 80010d0:	f002 f9e2 	bl	8003498 <HAL_FLASH_GetError>
 80010d4:	b2c4      	uxtb	r4, r0
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
	return HAL_OK;
}
 80010d6:	4620      	mov	r0, r4
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80010da:	233c      	movs	r3, #60	; 0x3c
 80010dc:	e7d1      	b.n	8001082 <Echo_Flash_Write+0x2a>
 80010de:	223f      	movs	r2, #63	; 0x3f
 80010e0:	e7e3      	b.n	80010aa <Echo_Flash_Write+0x52>
	Address = FLASH_USER_START_ADDR;
 80010e2:	4d14      	ldr	r5, [pc, #80]	; (8001134 <Echo_Flash_Write+0xdc>)
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <Echo_Flash_Write+0xc0>)
	while (Address < FLASH_USER_END_ADDR)
 80010e6:	4e0e      	ldr	r6, [pc, #56]	; (8001120 <Echo_Flash_Write+0xc8>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 80010e8:	4f13      	ldr	r7, [pc, #76]	; (8001138 <Echo_Flash_Write+0xe0>)
	Address = FLASH_USER_START_ADDR;
 80010ea:	602b      	str	r3, [r5, #0]
	while (Address < FLASH_USER_END_ADDR)
 80010ec:	6829      	ldr	r1, [r5, #0]
 80010ee:	42b1      	cmp	r1, r6
 80010f0:	d302      	bcc.n	80010f8 <Echo_Flash_Write+0xa0>
	HAL_FLASH_Lock();
 80010f2:	f002 f9c7 	bl	8003484 <HAL_FLASH_Lock>
	return HAL_OK;
 80010f6:	e7ee      	b.n	80010d6 <Echo_Flash_Write+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2000      	movs	r0, #0
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f002 f9fc 	bl	80034fc <HAL_FLASH_Program>
 8001104:	2800      	cmp	r0, #0
 8001106:	d1e3      	bne.n	80010d0 <Echo_Flash_Write+0x78>
			Address = Address + 4;
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	e7ed      	b.n	80010ec <Echo_Flash_Write+0x94>
 8001110:	1fff7000 	.word	0x1fff7000
 8001114:	03fffc00 	.word	0x03fffc00
 8001118:	0801e000 	.word	0x0801e000
 800111c:	2000024c 	.word	0x2000024c
 8001120:	0801ffff 	.word	0x0801ffff
 8001124:	20000250 	.word	0x20000250
 8001128:	20000238 	.word	0x20000238
 800112c:	2000023c 	.word	0x2000023c
 8001130:	20000254 	.word	0x20000254
 8001134:	20000234 	.word	0x20000234
 8001138:	20000008 	.word	0x20000008

0800113c <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <Echo_Flash_Read+0x20>)
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <Echo_Flash_Read+0x24>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6018      	str	r0, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
			&& pwm_param.pulse_width == 0)
 8001148:	8818      	ldrh	r0, [r3, #0]
 800114a:	889a      	ldrh	r2, [r3, #4]
 800114c:	885b      	ldrh	r3, [r3, #2]
 800114e:	4310      	orrs	r0, r2
 8001150:	4318      	orrs	r0, r3
 8001152:	b280      	uxth	r0, r0
	}
	else
	{
		return HAL_OK;
	}
}
 8001154:	fab0 f080 	clz	r0, r0
 8001158:	0940      	lsrs	r0, r0, #5
 800115a:	4770      	bx	lr
 800115c:	0801e000 	.word	0x0801e000
 8001160:	20000394 	.word	0x20000394

08001164 <Echo_LED_Green_Off>:
/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <Echo_LED_Green_Off+0xc>)
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	f002 bb9b 	b.w	80038a4 <HAL_GPIO_WritePin>
 800116e:	bf00      	nop
 8001170:	48000400 	.word	0x48000400

08001174 <Echo_LED_CTRL>:
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
	if (colors == ECHO_LED_COLOR_NONE)
 8001174:	b908      	cbnz	r0, 800117a <Echo_LED_CTRL+0x6>
	{
		Echo_LED_Off_All();
 8001176:	f7ff bff5 	b.w	8001164 <Echo_LED_Green_Off>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 800117a:	0783      	lsls	r3, r0, #30
 800117c:	d504      	bpl.n	8001188 <Echo_LED_CTRL+0x14>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <Echo_LED_CTRL+0x18>)
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	f002 bb8e 	b.w	80038a4 <HAL_GPIO_WritePin>
			Echo_LED_Green_On();
		else
			Echo_LED_Green_Off();
 8001188:	f7ff bfec 	b.w	8001164 <Echo_LED_Green_Off>
 800118c:	48000400 	.word	0x48000400

08001190 <Echo_LED_Init>:
#endif
	}
}

void Echo_LED_Init(void)
{
 8001190:	b508      	push	{r3, lr}
	Echo_LED_Off_All();
 8001192:	f7ff ffe7 	bl	8001164 <Echo_LED_Green_Off>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <Echo_LED_Init+0x10>)
 8001198:	2200      	movs	r2, #0
 800119a:	735a      	strb	r2, [r3, #13]
}
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	20000258 	.word	0x20000258

080011a4 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80011a6:	4c04      	ldr	r4, [pc, #16]	; (80011b8 <Echo_LED_Enable+0x14>)
 80011a8:	2500      	movs	r5, #0
 80011aa:	7365      	strb	r5, [r4, #13]
	ECHO_LED_ON = false;
 80011ac:	7025      	strb	r5, [r4, #0]
	Echo_LED_Off_All();
 80011ae:	f7ff ffd9 	bl	8001164 <Echo_LED_Green_Off>
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 80011b2:	60a5      	str	r5, [r4, #8]
 80011b4:	7325      	strb	r5, [r4, #12]
}
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	20000258 	.word	0x20000258

080011bc <Echo_LED_StateSet>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_LED_StateSet(echo_led_sate_t led_state)
{
 80011bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
#endif
	Echo_LED_Enable();

	if (ECHO_LED_IND_DISABLED() == true)
 80011be:	4d13      	ldr	r5, [pc, #76]	; (800120c <Echo_LED_StateSet+0x50>)
{
 80011c0:	4604      	mov	r4, r0
	Echo_LED_Enable();
 80011c2:	f7ff ffef 	bl	80011a4 <Echo_LED_Enable>
	if (ECHO_LED_IND_DISABLED() == true)
 80011c6:	7b2e      	ldrb	r6, [r5, #12]
 80011c8:	b9b6      	cbnz	r6, 80011f8 <Echo_LED_StateSet+0x3c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
		led_state = ECHO_LED_STATE_NONE;
 80011ca:	2c03      	cmp	r4, #3

	if (led_state == ECHO_LED_CUR_STATE)
 80011cc:	7b6b      	ldrb	r3, [r5, #13]
		led_state = ECHO_LED_STATE_NONE;
 80011ce:	bf28      	it	cs
 80011d0:	2400      	movcs	r4, #0
	if (led_state == ECHO_LED_CUR_STATE)
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	d010      	beq.n	80011f8 <Echo_LED_StateSet+0x3c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <Echo_LED_StateSet+0x54>)
 80011d8:	2306      	movs	r3, #6
 80011da:	4363      	muls	r3, r4
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	5cd0      	ldrb	r0, [r2, r3]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 80011e0:	884f      	ldrh	r7, [r1, #2]
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 80011e2:	9001      	str	r0, [sp, #4]
		Echo_LED_Off_All();
 80011e4:	f7ff ffbe 	bl	8001164 <Echo_LED_Green_Off>
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	429f      	cmp	r7, r3
 80011ee:	9801      	ldr	r0, [sp, #4]
 80011f0:	d104      	bne.n	80011fc <Echo_LED_StateSet+0x40>
	{
		ECHO_LED_ON = false;
 80011f2:	702e      	strb	r6, [r5, #0]
		ECHO_LED_TIME_TICK = 0;
 80011f4:	606e      	str	r6, [r5, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 80011f6:	736c      	strb	r4, [r5, #13]

}
 80011f8:	b003      	add	sp, #12
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 80011fc:	f7ff ffba 	bl	8001174 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001200:	2301      	movs	r3, #1
 8001202:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 8001204:	f001 f8be 	bl	8002384 <HAL_GetTick>
 8001208:	6068      	str	r0, [r5, #4]
 800120a:	e7f4      	b.n	80011f6 <Echo_LED_StateSet+0x3a>
 800120c:	20000258 	.word	0x20000258
 8001210:	0800addc 	.word	0x0800addc

08001214 <Echo_LED_Handle>:
		Echo_LED_StateSet(ECHO_LED_STATE_NONE);
		break;
	}
}
void Echo_LED_Handle(void)
{
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 8001216:	4c25      	ldr	r4, [pc, #148]	; (80012ac <Echo_LED_Handle+0x98>)
 8001218:	7b63      	ldrb	r3, [r4, #13]
 800121a:	b1a3      	cbz	r3, 8001246 <Echo_LED_Handle+0x32>
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 800121c:	2b02      	cmp	r3, #2
 800121e:	d906      	bls.n	800122e <Echo_LED_Handle+0x1a>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8001224:	7023      	strb	r3, [r4, #0]
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
		ECHO_LED_ON = false;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}
}
 8001226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Echo_LED_Off_All();
 800122a:	f7ff bf9b 	b.w	8001164 <Echo_LED_Green_Off>
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 800122e:	68a2      	ldr	r2, [r4, #8]
 8001230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001234:	428a      	cmp	r2, r1
 8001236:	d107      	bne.n	8001248 <Echo_LED_Handle+0x34>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 800123c:	7023      	strb	r3, [r4, #0]
	Echo_LED_Off_All();
 800123e:	f7ff ff91 	bl	8001164 <Echo_LED_Green_Off>
		ECHO_LED_TIMED_OUT = true;
 8001242:	2301      	movs	r3, #1
 8001244:	7323      	strb	r3, [r4, #12]
}
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 8001248:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800124c:	428a      	cmp	r2, r1
 800124e:	d8fa      	bhi.n	8001246 <Echo_LED_Handle+0x32>
		ECHO_LED_TIMEOUT_TICK++;
 8001250:	3201      	adds	r2, #1
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001252:	4917      	ldr	r1, [pc, #92]	; (80012b0 <Echo_LED_Handle+0x9c>)
		ECHO_LED_TIMEOUT_TICK++;
 8001254:	60a2      	str	r2, [r4, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001256:	2206      	movs	r2, #6
 8001258:	4353      	muls	r3, r2
 800125a:	18c8      	adds	r0, r1, r3
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 800125c:	f64f 76fd 	movw	r6, #65533	; 0xfffd
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 8001260:	8845      	ldrh	r5, [r0, #2]
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 8001262:	1e6a      	subs	r2, r5, #1
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 8001264:	b292      	uxth	r2, r2
 8001266:	42b2      	cmp	r2, r6
 8001268:	d8ed      	bhi.n	8001246 <Echo_LED_Handle+0x32>
	if (ECHO_LED_ON == false
 800126a:	7822      	ldrb	r2, [r4, #0]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 800126c:	8886      	ldrh	r6, [r0, #4]
	if (ECHO_LED_ON == false
 800126e:	b14a      	cbz	r2, 8001284 <Echo_LED_Handle+0x70>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 8001270:	f001 f888 	bl	8002384 <HAL_GetTick>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	1ac0      	subs	r0, r0, r3
 8001278:	42b0      	cmp	r0, r6
 800127a:	d3e4      	bcc.n	8001246 <Echo_LED_Handle+0x32>
		Echo_LED_Off_All();
 800127c:	f7ff ff72 	bl	8001164 <Echo_LED_Green_Off>
		ECHO_LED_ON = false;
 8001280:	2300      	movs	r3, #0
 8001282:	e00a      	b.n	800129a <Echo_LED_Handle+0x86>
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 8001284:	5ccf      	ldrb	r7, [r1, r3]
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 8001286:	f001 f87d 	bl	8002384 <HAL_GetTick>
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	1ac0      	subs	r0, r0, r3
 800128e:	42a8      	cmp	r0, r5
 8001290:	d308      	bcc.n	80012a4 <Echo_LED_Handle+0x90>
		Echo_LED_CTRL(led_ind.led_colors);
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ff6e 	bl	8001174 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 8001298:	2301      	movs	r3, #1
		ECHO_LED_ON = false;
 800129a:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 800129c:	f001 f872 	bl	8002384 <HAL_GetTick>
 80012a0:	6060      	str	r0, [r4, #4]
 80012a2:	e7d0      	b.n	8001246 <Echo_LED_Handle+0x32>
	else if (ECHO_LED_ON == true
 80012a4:	7823      	ldrb	r3, [r4, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0cd      	beq.n	8001246 <Echo_LED_Handle+0x32>
 80012aa:	e7e1      	b.n	8001270 <Echo_LED_Handle+0x5c>
 80012ac:	20000258 	.word	0x20000258
 80012b0:	0800addc 	.word	0x0800addc

080012b4 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012b4:	b507      	push	{r0, r1, r2, lr}
	if (ch == '\n')
 80012b6:	280a      	cmp	r0, #10
{
 80012b8:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 80012ba:	d106      	bne.n	80012ca <__io_putchar+0x16>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__io_putchar+0x2c>)
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <__io_putchar+0x30>)
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	2201      	movs	r2, #1
 80012c6:	f004 fa5f 	bl	8005788 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	a901      	add	r1, sp, #4
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <__io_putchar+0x30>)
 80012d4:	f004 fa58 	bl	8005788 <HAL_UART_Transmit>
	return ch;
}
 80012d8:	9801      	ldr	r0, [sp, #4]
 80012da:	b003      	add	sp, #12
 80012dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e0:	0800b160 	.word	0x0800b160
 80012e4:	200007b4 	.word	0x200007b4

080012e8 <Echo_ShellPrint_Char>:

	ECHO_SHELL_UART->TDR = st_rcv_byte;
}

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
 80012e8:	b538      	push	{r3, r4, r5, lr}
	uint16_t i;

	if (len == 0)
 80012ea:	b171      	cbz	r1, 800130a <Echo_ShellPrint_Char+0x22>
 80012ec:	3901      	subs	r1, #1
 80012ee:	1e45      	subs	r5, r0, #1
 80012f0:	fa10 f481 	uxtah	r4, r0, r1
		return;

	for (i = 0; i < len; i++)
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 80012f4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80012f8:	f005 fa50 	bl	800679c <putchar>
	for (i = 0; i < len; i++)
 80012fc:	42a5      	cmp	r5, r4
 80012fe:	d1f9      	bne.n	80012f4 <Echo_ShellPrint_Char+0xc>
	}

	ECHO_SHELL_PRINT(("\n"));
}
 8001300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ECHO_SHELL_PRINT(("\n"));
 8001304:	200a      	movs	r0, #10
 8001306:	f005 ba49 	b.w	800679c <putchar>
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}

0800130c <Echo_Print_Manual>:
/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <Echo_Print_Manual+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f005 bac8 	b.w	80068a4 <puts>
 8001314:	20000000 	.word	0x20000000

08001318 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001318:	b500      	push	{lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 800131c:	2100      	movs	r1, #0
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	a801      	add	r0, sp, #4
 8001322:	9100      	str	r1, [sp, #0]
 8001324:	f004 fba0 	bl	8005a68 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <Echo_Print_Version+0x28>)
 800132a:	4906      	ldr	r1, [pc, #24]	; (8001344 <Echo_Print_Version+0x2c>)
 800132c:	4668      	mov	r0, sp
 800132e:	f005 fac7 	bl	80068c0 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 8001332:	4668      	mov	r0, sp
 8001334:	f005 fab6 	bl	80068a4 <puts>
}
 8001338:	b00b      	add	sp, #44	; 0x2c
 800133a:	f85d fb04 	ldr.w	pc, [sp], #4
 800133e:	bf00      	nop
 8001340:	0800adee 	.word	0x0800adee
 8001344:	0800adfc 	.word	0x0800adfc

08001348 <Echo_Shell_Input_Print>:

/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
 8001348:	b510      	push	{r4, lr}
	if (echo_uart2_rcv_byte != 0)
 800134a:	4c06      	ldr	r4, [pc, #24]	; (8001364 <Echo_Shell_Input_Print+0x1c>)
 800134c:	7823      	ldrb	r3, [r4, #0]
 800134e:	b13b      	cbz	r3, 8001360 <Echo_Shell_Input_Print+0x18>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 8001350:	230a      	movs	r3, #10
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <Echo_Shell_Input_Print+0x20>)
 8001354:	2201      	movs	r2, #1
 8001356:	4621      	mov	r1, r4
 8001358:	f004 fa16 	bl	8005788 <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	7023      	strb	r3, [r4, #0]
	}
}
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	2000049a 	.word	0x2000049a
 8001368:	200007b4 	.word	0x200007b4

0800136c <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 800136c:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 800136e:	4c05      	ldr	r4, [pc, #20]	; (8001384 <Echo_Shell_Init+0x18>)
 8001370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001374:	2100      	movs	r1, #0
 8001376:	1c60      	adds	r0, r4, #1
 8001378:	f004 fb76 	bl	8005a68 <memset>
	SHELL_MSG_RCV_POS = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	7023      	strb	r3, [r4, #0]
}
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	20000268 	.word	0x20000268

08001388 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	4e18      	ldr	r6, [pc, #96]	; (80013ec <Echo_AdminCMD_Check+0x64>)
 800138c:	4607      	mov	r7, r0
 800138e:	2500      	movs	r5, #0
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 8001390:	7932      	ldrb	r2, [r6, #4]
 8001392:	6831      	ldr	r1, [r6, #0]
 8001394:	4638      	mov	r0, r7
 8001396:	b2ec      	uxtb	r4, r5
 8001398:	f005 fb2b 	bl	80069f2 <strncmp>
 800139c:	b128      	cbz	r0, 80013aa <Echo_AdminCMD_Check+0x22>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 800139e:	3501      	adds	r5, #1
 80013a0:	2d06      	cmp	r5, #6
 80013a2:	f106 0608 	add.w	r6, r6, #8
 80013a6:	d1f3      	bne.n	8001390 <Echo_AdminCMD_Check+0x8>
		break;

	default:
		break;
	}
}
 80013a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (admin_cmd_cnt)
 80013aa:	1e63      	subs	r3, r4, #1
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d804      	bhi.n	80013ba <Echo_AdminCMD_Check+0x32>
 80013b0:	e8df f003 	tbb	[pc, r3]
 80013b4:	130f0b07 	.word	0x130f0b07
 80013b8:	17          	.byte	0x17
 80013b9:	00          	.byte	0x00
}
 80013ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_FSM_State_Start();
 80013be:	f000 b8c7 	b.w	8001550 <Echo_Set_FSM_State_Start>
}
 80013c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_FSM_State_Stop();
 80013c6:	f000 b8c9 	b.w	800155c <Echo_Set_FSM_State_Stop>
}
 80013ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Flash_Write();
 80013ce:	f7ff be43 	b.w	8001058 <Echo_Flash_Write>
}
 80013d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Factory_Reset();
 80013d6:	f000 ba63 	b.w	80018a0 <Echo_Factory_Reset>
}
 80013da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Manual();
 80013de:	f7ff bf95 	b.w	800130c <Echo_Print_Manual>
}
 80013e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Version();
 80013e6:	f7ff bf97 	b.w	8001318 <Echo_Print_Version>
 80013ea:	bf00      	nop
 80013ec:	0800b0c8 	.word	0x0800b0c8

080013f0 <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001470 <Echo_ParameterCMD_Check+0x80>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	2700      	movs	r7, #0
	uint8_t param_cmd_cnt = 0;

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 80013fe:	f898 2004 	ldrb.w	r2, [r8, #4]
 8001402:	f8d8 1000 	ldr.w	r1, [r8]
 8001406:	4620      	mov	r0, r4
 8001408:	b2fe      	uxtb	r6, r7
 800140a:	f005 faf2 	bl	80069f2 <strncmp>
 800140e:	b130      	cbz	r0, 800141e <Echo_ParameterCMD_Check+0x2e>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 8001410:	3701      	adds	r7, #1
 8001412:	2f09      	cmp	r7, #9
 8001414:	f108 0808 	add.w	r8, r8, #8
 8001418:	d1f1      	bne.n	80013fe <Echo_ParameterCMD_Check+0xe>
		break;

	default:
		break;
	}
}
 800141a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (param_cmd_cnt)
 800141e:	1e73      	subs	r3, r6, #1
 8001420:	2b07      	cmp	r3, #7
 8001422:	d805      	bhi.n	8001430 <Echo_ParameterCMD_Check+0x40>
 8001424:	e8df f003 	tbb	[pc, r3]
 8001428:	1e18100a 	.word	0x1e18100a
 800142c:	1e1e1e1e 	.word	0x1e1e1e1e
		Echo_Set_DT(data, len);
 8001430:	4629      	mov	r1, r5
 8001432:	4620      	mov	r0, r4
}
 8001434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_DT(data, len);
 8001438:	f000 b9f8 	b.w	800182c <Echo_Set_DT>
		Echo_Set_PW(data, len);
 800143c:	4629      	mov	r1, r5
 800143e:	4620      	mov	r0, r4
}
 8001440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_PW(data, len);
 8001444:	f000 ba02 	b.w	800184c <Echo_Set_PW>
		Echo_Set_FSM_State_Stop();
 8001448:	f000 f888 	bl	800155c <Echo_Set_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 800144c:	4629      	mov	r1, r5
 800144e:	4620      	mov	r0, r4
}
 8001450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_HZ(data, len);
 8001454:	f000 b9be 	b.w	80017d4 <Echo_Set_HZ>
		Echo_Set_V_PW(data, len);
 8001458:	4629      	mov	r1, r5
 800145a:	4620      	mov	r0, r4
}
 800145c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_V_PW(data, len);
 8001460:	f000 ba0e 	b.w	8001880 <Echo_Set_V_PW>
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 8001464:	1f30      	subs	r0, r6, #4
 8001466:	b2c0      	uxtb	r0, r0
}
 8001468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 800146c:	f000 b966 	b.w	800173c <Echo_Get_Res_Data>
 8001470:	0800b0f8 	.word	0x0800b0f8

08001474 <Echo_Shell_CMD_Handle>:
{
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 8001476:	4e2d      	ldr	r6, [pc, #180]	; (800152c <Echo_Shell_CMD_Handle+0xb8>)
 8001478:	4c2d      	ldr	r4, [pc, #180]	; (8001530 <Echo_Shell_CMD_Handle+0xbc>)
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 800147a:	4f2e      	ldr	r7, [pc, #184]	; (8001534 <Echo_Shell_CMD_Handle+0xc0>)
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 800147c:	482b      	ldr	r0, [pc, #172]	; (800152c <Echo_Shell_CMD_Handle+0xb8>)
 800147e:	f000 fae5 	bl	8001a4c <Echo_Uart2_Get_RCV_Q>
 8001482:	bb20      	cbnz	r0, 80014ce <Echo_Shell_CMD_Handle+0x5a>
	if (SHELL_MSG_RCV_POS > 0)
 8001484:	7823      	ldrb	r3, [r4, #0]
 8001486:	b183      	cbz	r3, 80014aa <Echo_Shell_CMD_Handle+0x36>
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 8001488:	f000 ff7c 	bl	8002384 <HAL_GetTick>
 800148c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001490:	1ac0      	subs	r0, r0, r3
 8001492:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001496:	d908      	bls.n	80014aa <Echo_Shell_CMD_Handle+0x36>
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 8001498:	4827      	ldr	r0, [pc, #156]	; (8001538 <Echo_Shell_CMD_Handle+0xc4>)
 800149a:	f005 fa03 	bl	80068a4 <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 800149e:	7821      	ldrb	r1, [r4, #0]
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 80014a2:	f7ff ff21 	bl	80012e8 <Echo_ShellPrint_Char>
			Echo_Shell_Init();
 80014a6:	f7ff ff61 	bl	800136c <Echo_Shell_Init>
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 80014aa:	f000 f84b 	bl	8001544 <Echo_Get_FSM_State>
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d10c      	bne.n	80014cc <Echo_Shell_CMD_Handle+0x58>
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 80014b2:	f000 ff67 	bl	8002384 <HAL_GetTick>
 80014b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80014ba:	1ac0      	subs	r0, r0, r3
 80014bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d903      	bls.n	80014cc <Echo_Shell_CMD_Handle+0x58>
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 80014c4:	f000 ff5e 	bl	8002384 <HAL_GetTick>
 80014c8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
}
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80014ce:	f000 ff59 	bl	8002384 <HAL_GetTick>
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 80014d2:	7833      	ldrb	r3, [r6, #0]
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80014d4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 80014d8:	2b23      	cmp	r3, #35	; 0x23
 80014da:	d002      	beq.n	80014e2 <Echo_Shell_CMD_Handle+0x6e>
 80014dc:	7822      	ldrb	r2, [r4, #0]
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d0cc      	beq.n	800147c <Echo_Shell_CMD_Handle+0x8>
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 80014e2:	7825      	ldrb	r5, [r4, #0]
 80014e4:	1962      	adds	r2, r4, r5
			SHELL_MSG_RCV_POS++;
 80014e6:	3501      	adds	r5, #1
 80014e8:	b2ed      	uxtb	r5, r5
			if (st_byte == 13)
 80014ea:	2b0d      	cmp	r3, #13
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 80014ec:	7053      	strb	r3, [r2, #1]
			SHELL_MSG_RCV_POS++;
 80014ee:	7025      	strb	r5, [r4, #0]
			if (st_byte == 13)
 80014f0:	d1c4      	bne.n	800147c <Echo_Shell_CMD_Handle+0x8>
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	4639      	mov	r1, r7
 80014f8:	f005 fa7b 	bl	80069f2 <strncmp>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 80014fc:	b2ad      	uxth	r5, r5
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80014fe:	b128      	cbz	r0, 800150c <Echo_Shell_CMD_Handle+0x98>
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 8001500:	490f      	ldr	r1, [pc, #60]	; (8001540 <Echo_Shell_CMD_Handle+0xcc>)
 8001502:	480e      	ldr	r0, [pc, #56]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 8001504:	2204      	movs	r2, #4
 8001506:	f005 fa74 	bl	80069f2 <strncmp>
 800150a:	b950      	cbnz	r0, 8001522 <Echo_Shell_CMD_Handle+0xae>
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 800150e:	4629      	mov	r1, r5
 8001510:	f7ff ff6e 	bl	80013f0 <Echo_ParameterCMD_Check>
				Echo_Shell_Init();
 8001514:	f7ff ff2a 	bl	800136c <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001518:	f000 ff34 	bl	8002384 <HAL_GetTick>
 800151c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8001520:	e7ac      	b.n	800147c <Echo_Shell_CMD_Handle+0x8>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <Echo_Shell_CMD_Handle+0xc8>)
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff ff2f 	bl	8001388 <Echo_AdminCMD_Check>
 800152a:	e7f3      	b.n	8001514 <Echo_Shell_CMD_Handle+0xa0>
 800152c:	20000374 	.word	0x20000374
 8001530:	20000268 	.word	0x20000268
 8001534:	0800ae12 	.word	0x0800ae12
 8001538:	0800ae1c 	.word	0x0800ae1c
 800153c:	20000269 	.word	0x20000269
 8001540:	0800ae17 	.word	0x0800ae17

08001544 <Echo_Get_FSM_State>:
}

echo_state_t Echo_Get_FSM_State(void)
{
	return ECHO_CUR_STATE;
}
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <Echo_Get_FSM_State+0x8>)
 8001546:	7818      	ldrb	r0, [r3, #0]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000375 	.word	0x20000375

08001550 <Echo_Set_FSM_State_Start>:

void Echo_Set_FSM_State_Start()
{
	cur_state = ECHO_STATE_RUN;
 8001550:	4b01      	ldr	r3, [pc, #4]	; (8001558 <Echo_Set_FSM_State_Start+0x8>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	4770      	bx	lr
 8001558:	20000004 	.word	0x20000004

0800155c <Echo_Set_FSM_State_Stop>:

void Echo_Set_FSM_State_Stop()
{
	cur_state = ECHO_STATE_IDLE;
 800155c:	4b01      	ldr	r3, [pc, #4]	; (8001564 <Echo_Set_FSM_State_Stop+0x8>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	4770      	bx	lr
 8001564:	20000004 	.word	0x20000004

08001568 <Echo_Set_FSM_State>:
	 If low battery, cover change event for LED is ingnored.
	 */
}

void Echo_Set_FSM_State(echo_state_t state)
{
 8001568:	b538      	push	{r3, r4, r5, lr}
	if (ECHO_CUR_STATE == state || state >= echo_state_max)
 800156a:	4d15      	ldr	r5, [pc, #84]	; (80015c0 <Echo_Set_FSM_State+0x58>)
 800156c:	782b      	ldrb	r3, [r5, #0]
 800156e:	4283      	cmp	r3, r0
{
 8001570:	4604      	mov	r4, r0
	if (ECHO_CUR_STATE == state || state >= echo_state_max)
 8001572:	d00b      	beq.n	800158c <Echo_Set_FSM_State+0x24>
 8001574:	2803      	cmp	r0, #3
 8001576:	d809      	bhi.n	800158c <Echo_Set_FSM_State+0x24>
		return;

	switch (state)
 8001578:	2802      	cmp	r0, #2
 800157a:	d011      	beq.n	80015a0 <Echo_Set_FSM_State+0x38>
 800157c:	2803      	cmp	r0, #3
 800157e:	d018      	beq.n	80015b2 <Echo_Set_FSM_State+0x4a>
 8001580:	2801      	cmp	r0, #1
 8001582:	d004      	beq.n	800158e <Echo_Set_FSM_State+0x26>
	{
	case ECHO_STATE_INIT:
		ECHO_SHELL_PRINT(("ECHO STATE INIT\r\n"));
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <Echo_Set_FSM_State+0x5c>)
 8001586:	f005 f98d 	bl	80068a4 <puts>
		/* Cannot be here */
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
		//Echo_LedStateSet(ECHO_LED_NONE);
		break;
	}
	ECHO_CUR_STATE = state;
 800158a:	702c      	strb	r4, [r5, #0]
}
 800158c:	bd38      	pop	{r3, r4, r5, pc}
		ECHO_SHELL_PRINT(("ECHO STATE IDLE\r\n"));
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <Echo_Set_FSM_State+0x60>)
 8001590:	f005 f988 	bl	80068a4 <puts>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fe11 	bl	80011bc <Echo_LED_StateSet>
		Echo_Stim_Stop();
 800159a:	f000 f997 	bl	80018cc <Echo_Stim_Stop>
		break;
 800159e:	e7f4      	b.n	800158a <Echo_Set_FSM_State+0x22>
		ECHO_SHELL_PRINT(("ECHO STATE RUN\r\n"));
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <Echo_Set_FSM_State+0x64>)
 80015a2:	f005 f97f 	bl	80068a4 <puts>
		Echo_LED_StateSet(ECHO_LED_RUN);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fe08 	bl	80011bc <Echo_LED_StateSet>
		Echo_Stim_Start();
 80015ac:	f000 f9aa 	bl	8001904 <Echo_Stim_Start>
		break;
 80015b0:	e7eb      	b.n	800158a <Echo_Set_FSM_State+0x22>
		ECHO_SHELL_PRINT(("ECHO STATE ERROR\r\n"));
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <Echo_Set_FSM_State+0x68>)
 80015b4:	f005 f976 	bl	80068a4 <puts>
		Echo_LED_StateSet(ECHO_LED_IDLE);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fdff 	bl	80011bc <Echo_LED_StateSet>
		break;
 80015be:	e7e4      	b.n	800158a <Echo_Set_FSM_State+0x22>
 80015c0:	20000375 	.word	0x20000375
 80015c4:	0800b140 	.word	0x0800b140
 80015c8:	0800b151 	.word	0x0800b151
 80015cc:	0800b162 	.word	0x0800b162
 80015d0:	0800b172 	.word	0x0800b172

080015d4 <Echo_FSM_State_Init>:
	ECHO_CUR_STATE = echo_state_max;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <Echo_FSM_State_Init+0xc>)
 80015d6:	2204      	movs	r2, #4
	Echo_Set_FSM_State(ECHO_STATE_INIT);
 80015d8:	2000      	movs	r0, #0
	ECHO_CUR_STATE = echo_state_max;
 80015da:	701a      	strb	r2, [r3, #0]
	Echo_Set_FSM_State(ECHO_STATE_INIT);
 80015dc:	f7ff bfc4 	b.w	8001568 <Echo_Set_FSM_State>
 80015e0:	20000375 	.word	0x20000375

080015e4 <Echo_FSM_State_Handle>:
{
 80015e4:	b510      	push	{r4, lr}
	if (Echo_Btn_isHandled() == true)
 80015e6:	f7ff fd07 	bl	8000ff8 <Echo_Btn_isHandled>
 80015ea:	4c0d      	ldr	r4, [pc, #52]	; (8001620 <Echo_FSM_State_Handle+0x3c>)
 80015ec:	b198      	cbz	r0, 8001616 <Echo_FSM_State_Handle+0x32>
		if (cur_state == ECHO_STATE_IDLE)
 80015ee:	7823      	ldrb	r3, [r4, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <Echo_FSM_State_Handle+0x2a>
			cur_state = ECHO_STATE_RUN;
 80015f4:	2302      	movs	r3, #2
			cur_state = ECHO_STATE_IDLE;
 80015f6:	7023      	strb	r3, [r4, #0]
	if (ECHO_CUR_STATE != cur_state)
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <Echo_FSM_State_Handle+0x40>)
 80015fa:	7820      	ldrb	r0, [r4, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4283      	cmp	r3, r0
 8001600:	d00c      	beq.n	800161c <Echo_FSM_State_Handle+0x38>
		Echo_Set_FSM_State(cur_state);
 8001602:	f7ff ffb1 	bl	8001568 <Echo_Set_FSM_State>
}
 8001606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Echo_Btn_Handled_clear();
 800160a:	f7ff bcfb 	b.w	8001004 <Echo_Btn_Handled_clear>
		else if (cur_state == ECHO_STATE_RUN)
 800160e:	2b02      	cmp	r3, #2
 8001610:	d1f2      	bne.n	80015f8 <Echo_FSM_State_Handle+0x14>
			cur_state = ECHO_STATE_IDLE;
 8001612:	2301      	movs	r3, #1
 8001614:	e7ef      	b.n	80015f6 <Echo_FSM_State_Handle+0x12>
	else if (Echo_Btn_isHandled() == false)
 8001616:	f7ff fcef 	bl	8000ff8 <Echo_Btn_isHandled>
 800161a:	e7ed      	b.n	80015f8 <Echo_FSM_State_Handle+0x14>
}
 800161c:	bd10      	pop	{r4, pc}
 800161e:	bf00      	nop
 8001620:	20000004 	.word	0x20000004
 8001624:	20000375 	.word	0x20000375

08001628 <ADC1_Conv_Waiting>:

#define ADC1_CONV_BUF									get_adc1_buf
uint16_t get_adc1_buf[ADC_CHK_CH_NUM];

static void ADC1_Conv_Waiting(void)
{
 8001628:	b538      	push	{r3, r4, r5, lr}
	uint32_t wait_tick;

	wait_tick = HAL_GetTick();
 800162a:	f000 feab 	bl	8002384 <HAL_GetTick>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
 800162e:	4d06      	ldr	r5, [pc, #24]	; (8001648 <ADC1_Conv_Waiting+0x20>)
 8001630:	4604      	mov	r4, r0
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	071b      	lsls	r3, r3, #28
 8001636:	d405      	bmi.n	8001644 <ADC1_Conv_Waiting+0x1c>

	while (LL_ADC_IsActiveFlag_EOS(ADC1) == 0
			&& (HAL_GetTick() - wait_tick < ADC_CONV_WAIT_TIME_MAX))
 8001638:	f000 fea4 	bl	8002384 <HAL_GetTick>
 800163c:	1b03      	subs	r3, r0, r4
 800163e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001642:	d3f6      	bcc.n	8001632 <ADC1_Conv_Waiting+0xa>
		;;
}
 8001644:	bd38      	pop	{r3, r4, r5, pc}
 8001646:	bf00      	nop
 8001648:	50040000 	.word	0x50040000

0800164c <Echo_ADC1_Enable>:

void Echo_ADC1_Enable()
{
 800164c:	b510      	push	{r4, lr}
	// Enable ADC DMA
	HAL_ADC_IRQHandler(&hadc1);
 800164e:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <Echo_ADC1_Enable+0x2c>)
 8001650:	4620      	mov	r0, r4
 8001652:	f000 ffa7 	bl	80025a4 <HAL_ADC_IRQHandler>
	HAL_ADC_Start_IT(&hadc1);
 8001656:	4620      	mov	r0, r4
 8001658:	f001 fb2a 	bl	8002cb0 <HAL_ADC_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM);
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <Echo_ADC1_Enable+0x30>)
 800165e:	2202      	movs	r2, #2
 8001660:	4620      	mov	r0, r4
 8001662:	f001 fbcb 	bl	8002dfc <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001666:	4620      	mov	r0, r4
 8001668:	217f      	movs	r1, #127	; 0x7f
 800166a:	f001 fc79 	bl	8002f60 <HAL_ADCEx_Calibration_Start>
	ADC1_Conv_Waiting();
}
 800166e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ADC1_Conv_Waiting();
 8001672:	f7ff bfd9 	b.w	8001628 <ADC1_Conv_Waiting>
 8001676:	bf00      	nop
 8001678:	200005a4 	.word	0x200005a4
 800167c:	20000376 	.word	0x20000376

08001680 <Echo_Start_ADC_Conv>:

void Echo_Start_ADC_Conv()
{
 8001680:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <Echo_Start_ADC_Conv+0x2c>)
 8001684:	f000 ff8e 	bl	80025a4 <HAL_ADC_IRQHandler>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF, ADC_CHK_CH_NUM);
 8001688:	2202      	movs	r2, #2
 800168a:	4909      	ldr	r1, [pc, #36]	; (80016b0 <Echo_Start_ADC_Conv+0x30>)
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <Echo_Start_ADC_Conv+0x2c>)
 800168e:	f001 fbb5 	bl	8002dfc <HAL_ADC_Start_DMA>
  MODIFY_REG(ADCx->CR,
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <Echo_Start_ADC_Conv+0x34>)
 8001694:	6893      	ldr	r3, [r2, #8]
 8001696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6093      	str	r3, [r2, #8]

	LL_ADC_REG_StartConversion(ADC1);

	ADC1_Conv_Waiting();
}
 80016a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ADC1_Conv_Waiting();
 80016a8:	f7ff bfbe 	b.w	8001628 <ADC1_Conv_Waiting>
 80016ac:	200005a4 	.word	0x200005a4
 80016b0:	20000376 	.word	0x20000376
 80016b4:	50040000 	.word	0x50040000

080016b8 <Echo_Get_ADC_ConvVal>:

	for (i = 0; i < ADC_CHK_CH_NUM; i++)
	{
		//AUL_DEBUG_PRINT(("ADCVal[%d] = %u\n", i, ADCVal[i]));

		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <Echo_Get_ADC_ConvVal+0x44>)
 80016ba:	eddf 5a11 	vldr	s11, [pc, #68]	; 8001700 <Echo_Get_ADC_ConvVal+0x48>
 80016be:	881a      	ldrh	r2, [r3, #0]
		temp /= (float) ADC_MAX_VAL;
 80016c0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001704 <Echo_Get_ADC_ConvVal+0x4c>
		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016c4:	ee07 2a10 	vmov	s14, r2
 80016c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80016cc:	ee27 7a25 	vmul.f32	s14, s14, s11
		temp /= (float) ADC_MAX_VAL;
 80016d0:	eec7 6a06 	vdiv.f32	s13, s14, s12
		{
			temp *= (ADC_BAT_R1 + ADC_BAT_R2);
			temp /= ADC_BAT_R2;
		}
#endif
		con_val[i] = (uint16_t) temp;
 80016d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80016d8:	ee16 2a90 	vmov	r2, s13
 80016dc:	8002      	strh	r2, [r0, #0]
		temp = (float) ADC1_CONV_BUF[i] * ADC_VDDA;
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
		temp /= (float) ADC_MAX_VAL;
 80016ec:	ee87 7a86 	vdiv.f32	s14, s15, s12
		con_val[i] = (uint16_t) temp;
 80016f0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80016f4:	ee17 3a10 	vmov	r3, s14
 80016f8:	8043      	strh	r3, [r0, #2]
	}
}
 80016fa:	4770      	bx	lr
 80016fc:	20000376 	.word	0x20000376
 8001700:	453b8000 	.word	0x453b8000
 8001704:	457ff000 	.word	0x457ff000

08001708 <Echo_Stepup_Handle>:

void Echo_Stepup_Handle(void)
{
 8001708:	b513      	push	{r0, r1, r4, lr}
	if (Echo_Get_FSM_State() == ECHO_STATE_RUN)
 800170a:	f7ff ff1b 	bl	8001544 <Echo_Get_FSM_State>
 800170e:	2802      	cmp	r0, #2
 8001710:	d10f      	bne.n	8001732 <Echo_Stepup_Handle+0x2a>
	{
		static uint32_t st_handle_tick = 0;
		uint16_t convVal[ADC_CHK_CH_NUM];

		if (HAL_GetTick() - st_handle_tick >= PWR_HANDLE_PERIOD)
 8001712:	4c09      	ldr	r4, [pc, #36]	; (8001738 <Echo_Stepup_Handle+0x30>)
 8001714:	f000 fe36 	bl	8002384 <HAL_GetTick>
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	1ac0      	subs	r0, r0, r3
 800171c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001720:	d307      	bcc.n	8001732 <Echo_Stepup_Handle+0x2a>
		{
			st_handle_tick = HAL_GetTick();
 8001722:	f000 fe2f 	bl	8002384 <HAL_GetTick>
 8001726:	6020      	str	r0, [r4, #0]

			Echo_Start_ADC_Conv();
 8001728:	f7ff ffaa 	bl	8001680 <Echo_Start_ADC_Conv>

			Echo_Get_ADC_ConvVal(convVal);
 800172c:	a801      	add	r0, sp, #4
 800172e:	f7ff ffc3 	bl	80016b8 <Echo_Get_ADC_ConvVal>
		}
	}

}
 8001732:	b002      	add	sp, #8
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop
 8001738:	2000037c 	.word	0x2000037c

0800173c <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 800173c:	b510      	push	{r4, lr}
 800173e:	b088      	sub	sp, #32
	char mes_head[11] =
 8001740:	2300      	movs	r3, #0
 8001742:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001746:	f8cd 301b 	str.w	r3, [sp, #27]
	{ '\0', };

	//get_prm_cmd_str_table[admin_cmd_cnt].str
	strcpy((char*) mes_head,
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <Echo_Get_Res_Data+0x78>)
{
 800174c:	4604      	mov	r4, r0
	strcpy((char*) mes_head,
 800174e:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 8001752:	a805      	add	r0, sp, #20
 8001754:	f005 f945 	bl	80069e2 <strcpy>
			(const char*) get_prm_cmd_str_table[select_msg].str);

	switch (select_msg)
 8001758:	2c04      	cmp	r4, #4
 800175a:	d80b      	bhi.n	8001774 <Echo_Get_Res_Data+0x38>
 800175c:	e8df f004 	tbb	[pc, r4]
 8001760:	18131003 	.word	0x18131003
 8001764:	1b          	.byte	0x1b
 8001765:	00          	.byte	0x00
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <Echo_Get_Res_Data+0x7c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
				pwm_param.dead_time);
		break;
	case RESPONSE_PULSEWIDTH:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <Echo_Get_Res_Data+0x80>)
 800176c:	aa05      	add	r2, sp, #20
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <Echo_Get_Res_Data+0x84>)
 8001770:	f005 f8a6 	bl	80068c0 <siprintf>
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step);
		break;
	default:
		break;
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 8001774:	4912      	ldr	r1, [pc, #72]	; (80017c0 <Echo_Get_Res_Data+0x84>)
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <Echo_Get_Res_Data+0x88>)
 8001778:	f004 fff8 	bl	800676c <iprintf>
}
 800177c:	b008      	add	sp, #32
 800177e:	bd10      	pop	{r4, pc}
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <Echo_Get_Res_Data+0x7c>)
 8001782:	885b      	ldrh	r3, [r3, #2]
 8001784:	e7f1      	b.n	800176a <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <Echo_Get_Res_Data+0x7c>)
 8001788:	490f      	ldr	r1, [pc, #60]	; (80017c8 <Echo_Get_Res_Data+0x8c>)
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	aa05      	add	r2, sp, #20
 800178e:	e7ee      	b.n	800176e <Echo_Get_Res_Data+0x32>
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <Echo_Get_Res_Data+0x90>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e7e9      	b.n	800176a <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 8001796:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <Echo_Get_Res_Data+0x90>)
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <Echo_Get_Res_Data+0x7c>)
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	9202      	str	r2, [sp, #8]
 800179e:	889a      	ldrh	r2, [r3, #4]
 80017a0:	9201      	str	r2, [sp, #4]
 80017a2:	885a      	ldrh	r2, [r3, #2]
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	4909      	ldr	r1, [pc, #36]	; (80017d0 <Echo_Get_Res_Data+0x94>)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <Echo_Get_Res_Data+0x84>)
 80017ac:	aa05      	add	r2, sp, #20
 80017ae:	f005 f887 	bl	80068c0 <siprintf>
		break;
 80017b2:	e7df      	b.n	8001774 <Echo_Get_Res_Data+0x38>
 80017b4:	0800b254 	.word	0x0800b254
 80017b8:	20000394 	.word	0x20000394
 80017bc:	0800b184 	.word	0x0800b184
 80017c0:	2000039a 	.word	0x2000039a
 80017c4:	0800b1d2 	.word	0x0800b1d2
 80017c8:	0800b191 	.word	0x0800b191
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	0800b19e 	.word	0x0800b19e

080017d4 <Echo_Set_HZ>:
{
 80017d4:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <Echo_Set_HZ+0x14>)
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <Echo_Set_HZ+0x18>)
 80017da:	f005 f891 	bl	8006900 <siscanf>
}
 80017de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff bfaa 	b.w	800173c <Echo_Get_Res_Data>
 80017e8:	20000398 	.word	0x20000398
 80017ec:	0800b1d7 	.word	0x0800b1d7

080017f0 <Echo_Pulse_DT_PW_Config>:
/*
 * PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_DT_PW_Config()
{
	ano_matching_tim1 = pwm_param.pulse_width;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <Echo_Pulse_DT_PW_Config+0x24>)
 80017f2:	4909      	ldr	r1, [pc, #36]	; (8001818 <Echo_Pulse_DT_PW_Config+0x28>)
 80017f4:	885a      	ldrh	r2, [r3, #2]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 80017f6:	881b      	ldrh	r3, [r3, #0]
	ano_matching_tim1 = pwm_param.pulse_width;
 80017f8:	600a      	str	r2, [r1, #0]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <Echo_Pulse_DT_PW_Config+0x2c>)
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <Echo_Pulse_DT_PW_Config+0x30>)
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 80017fe:	4413      	add	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 8001802:	18d1      	adds	r1, r2, r3
 8001804:	6001      	str	r1, [r0, #0]
	LL_TIM_OC_SetCompareCH1(htim2.Instance, ano_matching_tim1);
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <Echo_Pulse_DT_PW_Config+0x34>)
 8001808:	6800      	ldr	r0, [r0, #0]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 800180a:	6342      	str	r2, [r0, #52]	; 0x34
	pwm_arr[0] = cat_matching_tim2;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <Echo_Pulse_DT_PW_Config+0x38>)
 800180e:	6011      	str	r1, [r2, #0]
	pwm_arr[1] = cat_matching_tim1;
 8001810:	6053      	str	r3, [r2, #4]
}
 8001812:	4770      	bx	lr
 8001814:	20000394 	.word	0x20000394
 8001818:	20000380 	.word	0x20000380
 800181c:	20000384 	.word	0x20000384
 8001820:	20000388 	.word	0x20000388
 8001824:	200006e4 	.word	0x200006e4
 8001828:	2000038c 	.word	0x2000038c

0800182c <Echo_Set_DT>:
{
 800182c:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <Echo_Set_DT+0x18>)
 8001830:	4905      	ldr	r1, [pc, #20]	; (8001848 <Echo_Set_DT+0x1c>)
 8001832:	f005 f865 	bl	8006900 <siscanf>
	Echo_Pulse_DT_PW_Config();
 8001836:	f7ff ffdb 	bl	80017f0 <Echo_Pulse_DT_PW_Config>
}
 800183a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff bf7c 	b.w	800173c <Echo_Get_Res_Data>
 8001844:	20000394 	.word	0x20000394
 8001848:	0800b1e8 	.word	0x0800b1e8

0800184c <Echo_Set_PW>:
{
 800184c:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <Echo_Set_PW+0x18>)
 8001850:	4905      	ldr	r1, [pc, #20]	; (8001868 <Echo_Set_PW+0x1c>)
 8001852:	f005 f855 	bl	8006900 <siscanf>
	Echo_Pulse_DT_PW_Config();
 8001856:	f7ff ffcb 	bl	80017f0 <Echo_Pulse_DT_PW_Config>
}
 800185a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff bf6c 	b.w	800173c <Echo_Get_Res_Data>
 8001864:	20000396 	.word	0x20000396
 8001868:	0800b1f9 	.word	0x0800b1f9

0800186c <Echo_Pulse_V_PW_Config>:

void Echo_Pulse_V_PW_Config()
{
	LL_TIM_OC_SetCompareCH1(htim1.Instance, v_step);
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <Echo_Pulse_V_PW_Config+0xc>)
 800186e:	4a03      	ldr	r2, [pc, #12]	; (800187c <Echo_Pulse_V_PW_Config+0x10>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001876:	4770      	bx	lr
 8001878:	20000698 	.word	0x20000698
 800187c:	2000000c 	.word	0x2000000c

08001880 <Echo_Set_V_PW>:
{
 8001880:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step);
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <Echo_Set_V_PW+0x18>)
 8001884:	4905      	ldr	r1, [pc, #20]	; (800189c <Echo_Set_V_PW+0x1c>)
 8001886:	f005 f83b 	bl	8006900 <siscanf>
	Echo_Pulse_V_PW_Config();
 800188a:	f7ff ffef 	bl	800186c <Echo_Pulse_V_PW_Config>
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 800188e:	2003      	movs	r0, #3
}
 8001890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001894:	f7ff bf52 	b.w	800173c <Echo_Get_Res_Data>
 8001898:	2000000c 	.word	0x2000000c
 800189c:	0800b20a 	.word	0x0800b20a

080018a0 <Echo_Factory_Reset>:
/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
	pwm_param.dead_time = 10;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <Echo_Factory_Reset+0x18>)
 80018a2:	220a      	movs	r2, #10
 80018a4:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
	pwm_param.pulse_freq = 1;
 80018a6:	2101      	movs	r1, #1
	pwm_param.pulse_width = 1000;
 80018a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ac:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 1;
 80018ae:	8099      	strh	r1, [r3, #4]
	v_step = 1000;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <Echo_Factory_Reset+0x1c>)
 80018b2:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 80018b4:	f7ff bbd0 	b.w	8001058 <Echo_Flash_Write>
 80018b8:	20000394 	.word	0x20000394
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <Echo_StepUP_Stop>:
/*
 * Stimulation Voltage Setting
 * */
void Echo_StepUP_Stop()
{
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <Echo_StepUP_Stop+0x8>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	f003 b944 	b.w	8004b50 <HAL_TIM_PWM_Stop>
 80018c8:	20000698 	.word	0x20000698

080018cc <Echo_Stim_Stop>:
{
 80018cc:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80018ce:	4c06      	ldr	r4, [pc, #24]	; (80018e8 <Echo_Stim_Stop+0x1c>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4620      	mov	r0, r4
 80018d4:	f003 f93c 	bl	8004b50 <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 80018d8:	4620      	mov	r0, r4
 80018da:	2104      	movs	r1, #4
 80018dc:	f003 fa22 	bl	8004d24 <HAL_TIM_OC_Stop_DMA>
}
 80018e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_StepUP_Stop();
 80018e4:	f7ff bfec 	b.w	80018c0 <Echo_StepUP_Stop>
 80018e8:	200006e4 	.word	0x200006e4

080018ec <Echo_StepUP_Start>:
}

void Echo_StepUP_Start()
{
	LL_TIM_OC_SetCompareCH1(htim1.Instance, v_step);
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <Echo_StepUP_Start+0x10>)
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <Echo_StepUP_Start+0x14>)
 80018f0:	6803      	ldr	r3, [r0, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018f6:	2100      	movs	r1, #0
 80018f8:	f003 b8da 	b.w	8004ab0 <HAL_TIM_PWM_Start>
 80018fc:	20000698 	.word	0x20000698
 8001900:	2000000c 	.word	0x2000000c

08001904 <Echo_Stim_Start>:
{
 8001904:	b538      	push	{r3, r4, r5, lr}
	ano_matching_tim1 = pwm_param.pulse_width;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <Echo_Stim_Start+0x4c>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <Echo_Stim_Start+0x50>)
 800190a:	8859      	ldrh	r1, [r3, #2]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 800190c:	881b      	ldrh	r3, [r3, #0]
	ano_matching_tim1 = pwm_param.pulse_width;
 800190e:	6011      	str	r1, [r2, #0]
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <Echo_Stim_Start+0x54>)
	pwm_arr[0] = cat_matching_tim2;
 8001912:	4d12      	ldr	r5, [pc, #72]	; (800195c <Echo_Stim_Start+0x58>)
	LL_TIM_OC_SetCompareCH1(htim2.Instance, ano_matching_tim1);
 8001914:	4c12      	ldr	r4, [pc, #72]	; (8001960 <Echo_Stim_Start+0x5c>)
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 8001916:	4813      	ldr	r0, [pc, #76]	; (8001964 <Echo_Stim_Start+0x60>)
	cat_matching_tim1 = ano_matching_tim1 + pwm_param.dead_time;
 8001918:	440b      	add	r3, r1
 800191a:	6013      	str	r3, [r2, #0]
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 800191c:	18ca      	adds	r2, r1, r3
	pwm_arr[0] = cat_matching_tim2;
 800191e:	602a      	str	r2, [r5, #0]
	pwm_arr[1] = cat_matching_tim1;
 8001920:	606b      	str	r3, [r5, #4]
	LL_TIM_OC_SetCompareCH1(htim2.Instance, ano_matching_tim1);
 8001922:	6823      	ldr	r3, [r4, #0]
	cat_matching_tim2 = (ano_matching_tim1 * 2) + pwm_param.dead_time;
 8001924:	6002      	str	r2, [r0, #0]
 8001926:	6359      	str	r1, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001928:	4620      	mov	r0, r4
 800192a:	2100      	movs	r1, #0
 800192c:	f003 f8c0 	bl	8004ab0 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*) pwm_arr, 2);
 8001930:	462a      	mov	r2, r5
 8001932:	2302      	movs	r3, #2
 8001934:	4620      	mov	r0, r4
 8001936:	2104      	movs	r1, #4
 8001938:	f003 f90c 	bl	8004b54 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <Echo_Stim_Start+0x64>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f023 0306 	bic.w	r3, r3, #6
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Echo_StepUP_Start();
 800194c:	f7ff bfce 	b.w	80018ec <Echo_StepUP_Start>
 8001950:	20000394 	.word	0x20000394
 8001954:	20000380 	.word	0x20000380
 8001958:	20000384 	.word	0x20000384
 800195c:	2000038c 	.word	0x2000038c
 8001960:	200006e4 	.word	0x200006e4
 8001964:	20000388 	.word	0x20000388
 8001968:	20000650 	.word	0x20000650

0800196c <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 800196c:	b500      	push	{lr}
	HAL_Delay(200);
 800196e:	20c8      	movs	r0, #200	; 0xc8
{
 8001970:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001972:	f000 fd0d 	bl	8002390 <HAL_Delay>
	char res_msg[55] =
 8001976:	2100      	movs	r1, #0
 8001978:	2233      	movs	r2, #51	; 0x33
 800197a:	a801      	add	r0, sp, #4
 800197c:	9100      	str	r1, [sp, #0]
 800197e:	f004 f873 	bl	8005a68 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001982:	f7ff fbdb 	bl	800113c <Echo_Flash_Read>
 8001986:	b148      	cbz	r0, 800199c <Echo_PCI_State_Init+0x30>
	{
		pwm_param.dead_time = 10;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <Echo_PCI_State_Init+0x68>)
 800198a:	220a      	movs	r2, #10
 800198c:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
		pwm_param.pulse_freq = 1;
 800198e:	2101      	movs	r1, #1
		pwm_param.pulse_width = 1000;
 8001990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001994:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 1;
 8001996:	8099      	strh	r1, [r3, #4]
		v_step = 1000;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <Echo_PCI_State_Init+0x6c>)
 800199a:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 800199c:	f7ff fcbc 	bl	8001318 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 80019a0:	f002 fbdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80019a4:	490d      	ldr	r1, [pc, #52]	; (80019dc <Echo_PCI_State_Init+0x70>)
 80019a6:	4602      	mov	r2, r0
 80019a8:	4668      	mov	r0, sp
 80019aa:	f004 ff89 	bl	80068c0 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 80019ae:	4668      	mov	r0, sp
 80019b0:	f004 ff78 	bl	80068a4 <puts>
	Echo_ADC1_Enable();
 80019b4:	f7ff fe4a 	bl	800164c <Echo_ADC1_Enable>
	Echo_Print_Manual();
 80019b8:	f7ff fca8 	bl	800130c <Echo_Print_Manual>
	Echo_LED_Init();
 80019bc:	f7ff fbe8 	bl	8001190 <Echo_LED_Init>
	Echo_FSM_State_Init();
 80019c0:	f7ff fe08 	bl	80015d4 <Echo_FSM_State_Init>
	Echo_Shell_Init();
 80019c4:	f7ff fcd2 	bl	800136c <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 80019c8:	f000 f80a 	bl	80019e0 <Echo_Uart2_INTERRUPT_ENA>
}
 80019cc:	b00f      	add	sp, #60	; 0x3c
 80019ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80019d2:	bf00      	nop
 80019d4:	20000394 	.word	0x20000394
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	0800b27c 	.word	0x0800b27c

080019e0 <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 80019e0:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 80019e2:	4c08      	ldr	r4, [pc, #32]	; (8001a04 <Echo_Uart2_INTERRUPT_ENA+0x24>)
	ECHO_USART2_STATE_RESET();
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <Echo_Uart2_INTERRUPT_ENA+0x28>)
 80019e6:	2200      	movs	r2, #0
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 80019e8:	4620      	mov	r0, r4
	ECHO_USART2_STATE_RESET();
 80019ea:	801a      	strh	r2, [r3, #0]
 80019ec:	805a      	strh	r2, [r3, #2]
 80019ee:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 80019f0:	f003 fab2 	bl	8004f58 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 80019f4:	4620      	mov	r0, r4
 80019f6:	4905      	ldr	r1, [pc, #20]	; (8001a0c <Echo_Uart2_INTERRUPT_ENA+0x2c>)
}
 80019f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f003 bfdf 	b.w	80059c0 <HAL_UART_Receive_IT>
 8001a02:	bf00      	nop
 8001a04:	200007b4 	.word	0x200007b4
 8001a08:	2000049c 	.word	0x2000049c
 8001a0c:	2000049a 	.word	0x2000049a

08001a10 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
	{
	}
	else if (huart->Instance == USART2)
 8001a10:	6802      	ldr	r2, [r0, #0]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_UART_RxCpltCallback+0x2c>)
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d10b      	bne.n	8001a30 <HAL_UART_RxCpltCallback+0x20>
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001a18:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_UART_RxCpltCallback+0x30>)
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_UART_RxCpltCallback+0x34>)
 8001a1c:	7819      	ldrb	r1, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001a1e:	8853      	ldrh	r3, [r2, #2]
 8001a20:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001a22:	b2db      	uxtb	r3, r3
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001a24:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001a26:	4413      	add	r3, r2
 8001a28:	7199      	strb	r1, [r3, #6]
	echo_uart2_state.item_num++;
 8001a2a:	8893      	ldrh	r3, [r2, #4]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	8093      	strh	r3, [r2, #4]
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <HAL_UART_RxCpltCallback+0x34>)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_UART_RxCpltCallback+0x38>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	f003 bfc3 	b.w	80059c0 <HAL_UART_Receive_IT>
 8001a3a:	bf00      	nop
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	2000049c 	.word	0x2000049c
 8001a44:	2000049a 	.word	0x2000049a
 8001a48:	200007b4 	.word	0x200007b4

08001a4c <Echo_Uart2_Get_RCV_Q>:
}
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 8001a4c:	b510      	push	{r4, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
#endif
	data_valid = false;

	if (echo_uart2_state.item_num > 0)
 8001a4e:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <Echo_Uart2_Get_RCV_Q+0x30>)
 8001a50:	88a3      	ldrh	r3, [r4, #4]
 8001a52:	b18b      	cbz	r3, 8001a78 <Echo_Uart2_Get_RCV_Q+0x2c>
	{
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001a54:	8823      	ldrh	r3, [r4, #0]
 8001a56:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 8001a58:	b2db      	uxtb	r3, r3
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001a5a:	8023      	strh	r3, [r4, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8001a5c:	4423      	add	r3, r4
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	7003      	strb	r3, [r0, #0]

		ECHO_USART2_MUTEX_LOCK
 8001a62:	2026      	movs	r0, #38	; 0x26
 8001a64:	f001 fb80 	bl	8003168 <HAL_NVIC_DisableIRQ>
		;

		echo_uart2_state.item_num--;
 8001a68:	88a3      	ldrh	r3, [r4, #4]

		ECHO_USART2_MUTEX_UNLOCK
 8001a6a:	2026      	movs	r0, #38	; 0x26
		echo_uart2_state.item_num--;
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	80a3      	strh	r3, [r4, #4]
		ECHO_USART2_MUTEX_UNLOCK
 8001a70:	f001 fb6c 	bl	800314c <HAL_NVIC_EnableIRQ>
		;

		data_valid = true;
 8001a74:	2001      	movs	r0, #1
	}
	return data_valid;
}
 8001a76:	bd10      	pop	{r4, pc}
	data_valid = false;
 8001a78:	4618      	mov	r0, r3
 8001a7a:	e7fc      	b.n	8001a76 <Echo_Uart2_Get_RCV_Q+0x2a>
 8001a7c:	2000049c 	.word	0x2000049c

08001a80 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a80:	b530      	push	{r4, r5, lr}
 8001a82:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001a84:	2244      	movs	r2, #68	; 0x44
 8001a86:	2100      	movs	r1, #0
 8001a88:	a805      	add	r0, sp, #20
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001a8a:	2514      	movs	r5, #20
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001a8c:	f003 ffec 	bl	8005a68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001a90:	462a      	mov	r2, r5
 8001a92:	2100      	movs	r1, #0
 8001a94:	4668      	mov	r0, sp
 8001a96:	f003 ffe7 	bl	8005a68 <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a9e:	f001 ff17 	bl	80038d0 <HAL_PWREx_ControlVoltageScaling>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	b108      	cbz	r0, 8001aaa <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa6:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <SystemClock_Config+0x28>
	HAL_PWR_EnableBkUpAccess();
 8001aaa:	f001 ff01 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <SystemClock_Config+0x8c>)
 8001ab0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ab4:	f023 0318 	bic.w	r3, r3, #24
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001abc:	2260      	movs	r2, #96	; 0x60
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001abe:	2301      	movs	r3, #1
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ac0:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac2:	2202      	movs	r2, #2
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ac8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001acc:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001ace:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001ad2:	2328      	movs	r3, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ad4:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001ad8:	9505      	str	r5, [sp, #20]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ada:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f001 ffbe 	bl	8003a5c <HAL_RCC_OscConfig>
 8001ae0:	b108      	cbz	r0, 8001ae6 <SystemClock_Config+0x66>
 8001ae2:	b672      	cpsid	i
	while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <SystemClock_Config+0x64>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	e9cd 0002 	strd	r0, r0, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aea:	220f      	movs	r2, #15
 8001aec:	2303      	movs	r3, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001af0:	2104      	movs	r1, #4
 8001af2:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	e9cd 2300 	strd	r2, r3, [sp]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001af8:	f002 fa86 	bl	8004008 <HAL_RCC_ClockConfig>
 8001afc:	b108      	cbz	r0, 8001b02 <SystemClock_Config+0x82>
 8001afe:	b672      	cpsid	i
	while (1)
 8001b00:	e7fe      	b.n	8001b00 <SystemClock_Config+0x80>
	HAL_RCCEx_EnableMSIPLLMode();
 8001b02:	f002 fc4b 	bl	800439c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b06:	b017      	add	sp, #92	; 0x5c
 8001b08:	bd30      	pop	{r4, r5, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <main>:
{
 8001b10:	b580      	push	{r7, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	4db0      	ldr	r5, [pc, #704]	; (8001dd4 <main+0x2c4>)
{
 8001b14:	b09a      	sub	sp, #104	; 0x68
	HAL_Init();
 8001b16:	f000 fc19 	bl	800234c <HAL_Init>
	SystemClock_Config();
 8001b1a:	f7ff ffb1 	bl	8001a80 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8001b1e:	2214      	movs	r2, #20
 8001b20:	2100      	movs	r1, #0
 8001b22:	a80f      	add	r0, sp, #60	; 0x3c
 8001b24:	f003 ffa0 	bl	8005a68 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001b30:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001b42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	9303      	str	r3, [sp, #12]
 8001b4a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001b54:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 51f6 	mov.w	r1, #7872	; 0x1ec0
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA,
 8001b68:	f001 fe9c 	bl	80038a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, QCC_CRTL0_Pin | QCC_CRTL1_Pin | LD3_Pin,
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	489a      	ldr	r0, [pc, #616]	; (8001dd8 <main+0x2c8>)
 8001b70:	210b      	movs	r1, #11
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, QCC_CRTL0_Pin | QCC_CRTL1_Pin | LD3_Pin,
 8001b74:	f001 fe96 	bl	80038a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2701      	movs	r7, #1
 8001b7a:	f44f 53f6 	mov.w	r3, #7872	; 0x1ec0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	a90f      	add	r1, sp, #60	; 0x3c
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = QCC_CRTL0_Pin | QCC_CRTL1_Pin | LD3_Pin;
 8001b88:	260b      	movs	r6, #11
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f001 fdc5 	bl	800371c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	4891      	ldr	r0, [pc, #580]	; (8001dd8 <main+0x2c8>)
 8001b94:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	e9cd 670f 	strd	r6, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f001 fdbd 	bl	800371c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = START_BTN_Pin;
 8001ba2:	2310      	movs	r3, #16
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	488c      	ldr	r0, [pc, #560]	; (8001dd8 <main+0x2c8>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba6:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f001 fdb5 	bl	800371c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001bb4:	433b      	orrs	r3, r7
 8001bb6:	64ab      	str	r3, [r5, #72]	; 0x48
 8001bb8:	6cab      	ldr	r3, [r5, #72]	; 0x48
	htim1.Instance = TIM1;
 8001bba:	4d88      	ldr	r5, [pc, #544]	; (8001ddc <main+0x2cc>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bbc:	403b      	ands	r3, r7
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bc2:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bc4:	4630      	mov	r0, r6
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bc6:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bc8:	f001 fa8e 	bl	80030e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f001 fabd 	bl	800314c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	2011      	movs	r0, #17
 8001bd8:	f001 fa86 	bl	80030e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f001 fab5 	bl	800314c <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC =
 8001be2:	221c      	movs	r2, #28
 8001be4:	4621      	mov	r1, r4
 8001be6:	a808      	add	r0, sp, #32
	TIM_MasterConfigTypeDef sMasterConfig =
 8001be8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001bec:	9407      	str	r4, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC =
 8001bee:	f003 ff3b 	bl	8005a68 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001bf2:	222c      	movs	r2, #44	; 0x2c
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	a80f      	add	r0, sp, #60	; 0x3c
 8001bf8:	f003 ff36 	bl	8005a68 <memset>
	htim1.Init.Prescaler = 799;
 8001bfc:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8001dfc <main+0x2ec>
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	60ac      	str	r4, [r5, #8]
	htim1.Init.Prescaler = 799;
 8001c02:	f240 331f 	movw	r3, #799	; 0x31f
	htim1.Init.Period = 9999;
 8001c06:	f242 780f 	movw	r8, #9999	; 0x270f
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c0a:	4628      	mov	r0, r5
	htim1.Init.Prescaler = 799;
 8001c0c:	e9c5 e300 	strd	lr, r3, [r5]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	e9c5 8403 	strd	r8, r4, [r5, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	e9c5 4405 	strd	r4, r4, [r5, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c18:	f002 fdac 	bl	8004774 <HAL_TIM_PWM_Init>
 8001c1c:	b108      	cbz	r0, 8001c22 <main+0x112>
 8001c1e:	b672      	cpsid	i
	while (1)
 8001c20:	e7fe      	b.n	8001c20 <main+0x110>
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c22:	e9cd 0005 	strd	r0, r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c28:	a905      	add	r1, sp, #20
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f003 f8f0 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4602      	mov	r2, r0
 8001c32:	b108      	cbz	r0, 8001c38 <main+0x128>
 8001c34:	b672      	cpsid	i
	while (1)
 8001c36:	e7fe      	b.n	8001c36 <main+0x126>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c38:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c3c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
	sConfigOC.Pulse = 1000;
 8001c40:	f04f 0960 	mov.w	r9, #96	; 0x60
 8001c44:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c48:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4a:	a908      	add	r1, sp, #32
 8001c4c:	4628      	mov	r0, r5
	sConfigOC.Pulse = 1000;
 8001c4e:	e9cd 9708 	strd	r9, r7, [sp, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	f002 fe2b 	bl	80048ac <HAL_TIM_PWM_ConfigChannel>
 8001c56:	b108      	cbz	r0, 8001c5c <main+0x14c>
 8001c58:	b672      	cpsid	i
	while (1)
 8001c5a:	e7fe      	b.n	8001c5a <main+0x14a>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001c60:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c68:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c6c:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001c70:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c74:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c76:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c78:	9019      	str	r0, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c7a:	a90f      	add	r1, sp, #60	; 0x3c
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f003 f8f9 	bl	8004e74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c82:	4606      	mov	r6, r0
 8001c84:	b108      	cbz	r0, 8001c8a <main+0x17a>
 8001c86:	b672      	cpsid	i
	while (1)
 8001c88:	e7fe      	b.n	8001c88 <main+0x178>
	htim2.Instance = TIM2;
 8001c8a:	4c55      	ldr	r4, [pc, #340]	; (8001de0 <main+0x2d0>)
	HAL_TIM_MspPostInit(&htim1);
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f000 f9ad 	bl	8001fec <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC =
 8001c92:	221c      	movs	r2, #28
 8001c94:	4631      	mov	r1, r6
 8001c96:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig =
 8001c98:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8001c9c:	960a      	str	r6, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC =
 8001c9e:	f003 fee3 	bl	8005a68 <memset>
	htim2.Init.Prescaler = 79;
 8001ca2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001ca6:	234f      	movs	r3, #79	; 0x4f
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca8:	4620      	mov	r0, r4
	htim2.Init.Prescaler = 79;
 8001caa:	e9c4 c300 	strd	ip, r3, [r4]
	htim2.Init.Period = 9999;
 8001cae:	e9c4 6802 	strd	r6, r8, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	6126      	str	r6, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	61a6      	str	r6, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb6:	f002 fd5d 	bl	8004774 <HAL_TIM_PWM_Init>
 8001cba:	b108      	cbz	r0, 8001cc0 <main+0x1b0>
 8001cbc:	b672      	cpsid	i
	while (1)
 8001cbe:	e7fe      	b.n	8001cbe <main+0x1ae>
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f002 fd27 	bl	8004714 <HAL_TIM_OC_Init>
 8001cc6:	b108      	cbz	r0, 8001ccc <main+0x1bc>
 8001cc8:	b672      	cpsid	i
	while (1)
 8001cca:	e7fe      	b.n	8001cca <main+0x1ba>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	9008      	str	r0, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd0:	a908      	add	r1, sp, #32
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f003 f89c 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	b108      	cbz	r0, 8001ce0 <main+0x1d0>
 8001cdc:	b672      	cpsid	i
	while (1)
 8001cde:	e7fe      	b.n	8001cde <main+0x1ce>
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	9011      	str	r0, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce2:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce4:	a90f      	add	r1, sp, #60	; 0x3c
 8001ce6:	4620      	mov	r0, r4
	sConfigOC.Pulse = 1000;
 8001ce8:	e9cd 970f 	strd	r9, r7, [sp, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	f002 fdde 	bl	80048ac <HAL_TIM_PWM_ConfigChannel>
 8001cf0:	b108      	cbz	r0, 8001cf6 <main+0x1e6>
 8001cf2:	b672      	cpsid	i
	while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <main+0x1e4>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001cf6:	6822      	ldr	r2, [r4, #0]
 8001cf8:	6993      	ldr	r3, [r2, #24]
 8001cfa:	f023 0308 	bic.w	r3, r3, #8
 8001cfe:	6193      	str	r3, [r2, #24]
	sConfigOC.Pulse = 1100;
 8001d00:	2530      	movs	r5, #48	; 0x30
 8001d02:	f240 434c 	movw	r3, #1100	; 0x44c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d06:	2204      	movs	r2, #4
 8001d08:	a90f      	add	r1, sp, #60	; 0x3c
 8001d0a:	4620      	mov	r0, r4
	sConfigOC.Pulse = 1100;
 8001d0c:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d10:	f002 fd98 	bl	8004844 <HAL_TIM_OC_ConfigChannel>
 8001d14:	4605      	mov	r5, r0
 8001d16:	b108      	cbz	r0, 8001d1c <main+0x20c>
 8001d18:	b672      	cpsid	i
	while (1)
 8001d1a:	e7fe      	b.n	8001d1a <main+0x20a>
	HAL_TIM_MspPostInit(&htim2);
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f000 f965 	bl	8001fec <HAL_TIM_MspPostInit>
	huart1.Instance = USART1;
 8001d22:	4830      	ldr	r0, [pc, #192]	; (8001de4 <main+0x2d4>)
	huart1.Init.BaudRate = 115200;
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <main+0x2d8>)
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d26:	6105      	str	r5, [r0, #16]
	huart1.Init.BaudRate = 115200;
 8001d28:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
 8001d2c:	e9c0 3400 	strd	r3, r4, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d30:	230c      	movs	r3, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d32:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	e9c0 3505 	strd	r3, r5, [r0, #20]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	e9c0 5507 	strd	r5, r5, [r0, #28]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3e:	6245      	str	r5, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d40:	f003 fdaf 	bl	80058a2 <HAL_UART_Init>
 8001d44:	b108      	cbz	r0, 8001d4a <main+0x23a>
 8001d46:	b672      	cpsid	i
	while (1)
 8001d48:	e7fe      	b.n	8001d48 <main+0x238>
	huart2.Instance = USART2;
 8001d4a:	4828      	ldr	r0, [pc, #160]	; (8001dec <main+0x2dc>)
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <main+0x2e0>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4e:	260c      	movs	r6, #12
	huart2.Init.BaudRate = 115200;
 8001d50:	e9c0 3400 	strd	r3, r4, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d54:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d56:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d64:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d66:	f003 fd9c 	bl	80058a2 <HAL_UART_Init>
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	b108      	cbz	r0, 8001d72 <main+0x262>
 8001d6e:	b672      	cpsid	i
	while (1)
 8001d70:	e7fe      	b.n	8001d70 <main+0x260>
	ADC_MultiModeTypeDef multimode =
 8001d72:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001d76:	900a      	str	r0, [sp, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig =
 8001d78:	2218      	movs	r2, #24
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	a80f      	add	r0, sp, #60	; 0x3c
 8001d7e:	f003 fe73 	bl	8005a68 <memset>
	hadc1.Instance = ADC1;
 8001d82:	4c1c      	ldr	r4, [pc, #112]	; (8001df4 <main+0x2e4>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001d84:	481c      	ldr	r0, [pc, #112]	; (8001df8 <main+0x2e8>)
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d86:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001d8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d8e:	e9c4 0300 	strd	r0, r3, [r4]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d92:	2208      	movs	r2, #8
 8001d94:	2301      	movs	r3, #1
 8001d96:	e9c4 3204 	strd	r3, r2, [r4, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9e:	8322      	strh	r2, [r4, #24]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da0:	4620      	mov	r0, r4
	hadc1.Init.NbrOfConversion = 3;
 8001da2:	2203      	movs	r2, #3
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da4:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	hadc1.Init.NbrOfConversion = 3;
 8001dac:	61e2      	str	r2, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001db2:	6365      	str	r5, [r4, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001db4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001db8:	f000 fb14 	bl	80023e4 <HAL_ADC_Init>
 8001dbc:	b108      	cbz	r0, 8001dc2 <main+0x2b2>
 8001dbe:	b672      	cpsid	i
	while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <main+0x2b0>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dc2:	9008      	str	r0, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dc4:	a908      	add	r1, sp, #32
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f001 f91a 	bl	8003000 <HAL_ADCEx_MultiModeConfigChannel>
 8001dcc:	b1c0      	cbz	r0, 8001e00 <main+0x2f0>
 8001dce:	b672      	cpsid	i
	while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <main+0x2c0>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	20000698 	.word	0x20000698
 8001de0:	200006e4 	.word	0x200006e4
 8001de4:	20000730 	.word	0x20000730
 8001de8:	40013800 	.word	0x40013800
 8001dec:	200007b4 	.word	0x200007b4
 8001df0:	40004400 	.word	0x40004400
 8001df4:	200005a4 	.word	0x200005a4
 8001df8:	50040000 	.word	0x50040000
 8001dfc:	40012c00 	.word	0x40012c00
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e00:	491f      	ldr	r1, [pc, #124]	; (8001e80 <main+0x370>)
 8001e02:	2306      	movs	r3, #6
 8001e04:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e08:	2304      	movs	r3, #4
	sConfig.Offset = 0;
 8001e0a:	e9cd 3013 	strd	r3, r0, [sp, #76]	; 0x4c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e0e:	227f      	movs	r2, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e10:	a90f      	add	r1, sp, #60	; 0x3c
 8001e12:	4620      	mov	r0, r4
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e14:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e18:	f000 fd2a 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001e1c:	b108      	cbz	r0, 8001e22 <main+0x312>
 8001e1e:	b672      	cpsid	i
	while (1)
 8001e20:	e7fe      	b.n	8001e20 <main+0x310>
	sConfig.Channel = ADC_CHANNEL_9;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <main+0x374>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	a90f      	add	r1, sp, #60	; 0x3c
 8001e26:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e28:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2c:	f000 fd20 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001e30:	b108      	cbz	r0, 8001e36 <main+0x326>
 8001e32:	b672      	cpsid	i
	while (1)
 8001e34:	e7fe      	b.n	8001e34 <main+0x324>
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <main+0x378>)
 8001e38:	2312      	movs	r3, #18
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3a:	a90f      	add	r1, sp, #60	; 0x3c
 8001e3c:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e3e:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e42:	f000 fd15 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001e46:	b108      	cbz	r0, 8001e4c <main+0x33c>
 8001e48:	b672      	cpsid	i
	while (1)
 8001e4a:	e7fe      	b.n	8001e4a <main+0x33a>
	Echo_PCI_State_Init();
 8001e4c:	f7ff fd8e 	bl	800196c <Echo_PCI_State_Init>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001e50:	4c0e      	ldr	r4, [pc, #56]	; (8001e8c <main+0x37c>)
		Echo_Shell_CMD_Handle();
 8001e52:	f7ff fb0f 	bl	8001474 <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8001e56:	f000 fa95 	bl	8002384 <HAL_GetTick>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	1ac0      	subs	r0, r0, r3
 8001e5e:	2809      	cmp	r0, #9
 8001e60:	d9f7      	bls.n	8001e52 <main+0x342>
			Echo_Stepup_Handle();
 8001e62:	f7ff fc51 	bl	8001708 <Echo_Stepup_Handle>
			Echo_Shell_Input_Print();
 8001e66:	f7ff fa6f 	bl	8001348 <Echo_Shell_Input_Print>
			Echo_FSM_State_Handle();
 8001e6a:	f7ff fbbb 	bl	80015e4 <Echo_FSM_State_Handle>
			Echo_Btn_handle();
 8001e6e:	f7ff f8cf 	bl	8001010 <Echo_Btn_handle>
			Echo_LED_Handle();
 8001e72:	f7ff f9cf 	bl	8001214 <Echo_LED_Handle>
			schdule_tick = HAL_GetTick();
 8001e76:	f000 fa85 	bl	8002384 <HAL_GetTick>
 8001e7a:	6020      	str	r0, [r4, #0]
 8001e7c:	e7e9      	b.n	8001e52 <main+0x342>
 8001e7e:	bf00      	nop
 8001e80:	21800100 	.word	0x21800100
 8001e84:	25b00200 	.word	0x25b00200
 8001e88:	80000001 	.word	0x80000001
 8001e8c:	20000838 	.word	0x20000838

08001e90 <Error_Handler>:
 8001e90:	b672      	cpsid	i
	while (1)
 8001e92:	e7fe      	b.n	8001e92 <Error_Handler+0x2>

08001e94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_MspInit+0x2c>)
 8001e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	661a      	str	r2, [r3, #96]	; 0x60
 8001e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001ea0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	f002 0201 	and.w	r2, r2, #1
 8001ea6:	9200      	str	r2, [sp, #0]
 8001ea8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebc:	b002      	add	sp, #8
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b530      	push	{r4, r5, lr}
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	2214      	movs	r2, #20
 8001ecc:	2100      	movs	r1, #0
 8001ece:	a803      	add	r0, sp, #12
 8001ed0:	f003 fdca 	bl	8005a68 <memset>
  if(hadc->Instance==ADC1)
 8001ed4:	682a      	ldr	r2, [r5, #0]
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <HAL_ADC_MspInit+0x90>)
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d138      	bne.n	8001f4e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001edc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001ee0:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ee4:	4c1c      	ldr	r4, [pc, #112]	; (8001f58 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ef4:	9201      	str	r2, [sp, #4]
 8001ef6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f08:	2218      	movs	r2, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f0e:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f14:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f001 fc00 	bl	800371c <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f1c:	2080      	movs	r0, #128	; 0x80
 8001f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_ADC_MspInit+0x98>)
 8001f24:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f26:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f2a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8001f2e:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f30:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001f32:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f3a:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f40:	f001 f93a 	bl	80031b8 <HAL_DMA_Init>
 8001f44:	b108      	cbz	r0, 8001f4a <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 8001f46:	f7ff ffa3 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f4a:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001f4c:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f4e:	b009      	add	sp, #36	; 0x24
 8001f50:	bd30      	pop	{r4, r5, pc}
 8001f52:	bf00      	nop
 8001f54:	50040000 	.word	0x50040000
 8001f58:	20000608 	.word	0x20000608
 8001f5c:	40020008 	.word	0x40020008

08001f60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_pwm->Instance==TIM1)
 8001f62:	6803      	ldr	r3, [r0, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_TIM_PWM_MspInit+0x7c>)
 8001f66:	4293      	cmp	r3, r2
{
 8001f68:	4605      	mov	r5, r0
  if(htim_pwm->Instance==TIM1)
 8001f6a:	d10b      	bne.n	8001f84 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_TIM_PWM_MspInit+0x80>)
 8001f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	661a      	str	r2, [r3, #96]	; 0x60
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f80:	b003      	add	sp, #12
 8001f82:	bd30      	pop	{r4, r5, pc}
  else if(htim_pwm->Instance==TIM2)
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d1fa      	bne.n	8001f80 <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001f8e:	4c15      	ldr	r4, [pc, #84]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x84>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_TIM_PWM_MspInit+0x88>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001faa:	2080      	movs	r0, #128	; 0x80
 8001fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb0:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2110      	movs	r1, #16
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001fb8:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8001fbc:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001fbe:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc0:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001fc4:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001fc8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001fca:	f001 f8f5 	bl	80031b8 <HAL_DMA_Init>
 8001fce:	b108      	cbz	r0, 8001fd4 <HAL_TIM_PWM_MspInit+0x74>
      Error_Handler();
 8001fd0:	f7ff ff5e 	bl	8001e90 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001fd4:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001fd6:	632c      	str	r4, [r5, #48]	; 0x30
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001fd8:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8001fda:	e7d1      	b.n	8001f80 <HAL_TIM_PWM_MspInit+0x20>
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	20000650 	.word	0x20000650
 8001fe8:	40020080 	.word	0x40020080

08001fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
 8001ff0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	2214      	movs	r2, #20
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	a803      	add	r0, sp, #12
 8001ff8:	f003 fd36 	bl	8005a68 <memset>
  if(htim->Instance==TIM1)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_TIM_MspPostInit+0x68>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d117      	bne.n	8002034 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_TIM_MspPostInit+0x6c>)
 8002006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	64da      	str	r2, [r3, #76]	; 0x4c
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 8002018:	f44f 7380 	mov.w	r3, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin|STIM_ANODE_Pin;
 800201c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002024:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f001 fb76 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002030:	b008      	add	sp, #32
 8002032:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d1fa      	bne.n	8002030 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800203e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STIM_CATHODE_Pin|STIM_ANODE_Pin;
 8002050:	2322      	movs	r3, #34	; 0x22
 8002052:	e7e3      	b.n	800201c <HAL_TIM_MspPostInit+0x30>
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	b096      	sub	sp, #88	; 0x58
 8002060:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	2214      	movs	r2, #20
 8002064:	2100      	movs	r1, #0
 8002066:	a804      	add	r0, sp, #16
 8002068:	f003 fcfe 	bl	8005a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	2234      	movs	r2, #52	; 0x34
 800206e:	2100      	movs	r1, #0
 8002070:	a809      	add	r0, sp, #36	; 0x24
 8002072:	f003 fcf9 	bl	8005a68 <memset>
  if(huart->Instance==USART1)
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_UART_MspInit+0x108>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d132      	bne.n	80020e4 <HAL_UART_MspInit+0x88>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800207e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002080:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f002 f894 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8002088:	b108      	cbz	r0, 800208e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800208a:	f7ff ff01 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = QCC_UART_TX_Pin|QCC_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	4836      	ldr	r0, [pc, #216]	; (800216c <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002092:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002098:	661a      	str	r2, [r3, #96]	; 0x60
 800209a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800209c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020a0:	9200      	str	r2, [sp, #0]
 80020a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a6:	f042 0202 	orr.w	r2, r2, #2
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2400      	movs	r4, #0
 80020c0:	2303      	movs	r3, #3
 80020c2:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c8:	2307      	movs	r3, #7
 80020ca:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f001 fb26 	bl	800371c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020d0:	2025      	movs	r0, #37	; 0x25
 80020d2:	4622      	mov	r2, r4
 80020d4:	4621      	mov	r1, r4
 80020d6:	f001 f807 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020da:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020dc:	f001 f836 	bl	800314c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e0:	b016      	add	sp, #88	; 0x58
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <HAL_UART_MspInit+0x114>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d1fa      	bne.n	80020e0 <HAL_UART_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ea:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ec:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ee:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f0:	f002 f85e 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	b108      	cbz	r0, 80020fa <HAL_UART_MspInit+0x9e>
      Error_Handler();
 80020f6:	f7ff fecb 	bl	8001e90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x10c>)
 80020fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002102:	659a      	str	r2, [r3, #88]	; 0x58
 8002104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002106:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800210a:	9202      	str	r2, [sp, #8]
 800210c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	64da      	str	r2, [r3, #76]	; 0x4c
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	9303      	str	r3, [sp, #12]
 800211e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2602      	movs	r6, #2
 8002122:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2400      	movs	r4, #0
 8002126:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800212c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212e:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002134:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800213a:	f001 faef 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800213e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002142:	a904      	add	r1, sp, #16
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002150:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002152:	f001 fae3 	bl	800371c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002156:	2026      	movs	r0, #38	; 0x26
 8002158:	4622      	mov	r2, r4
 800215a:	4621      	mov	r1, r4
 800215c:	f000 ffc4 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002160:	2026      	movs	r0, #38	; 0x26
 8002162:	e7bb      	b.n	80020dc <HAL_UART_MspInit+0x80>
 8002164:	40013800 	.word	0x40013800
 8002168:	40021000 	.word	0x40021000
 800216c:	48000400 	.word	0x48000400
 8002170:	40004400 	.word	0x40004400

08002174 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002174:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002178:	4905      	ldr	r1, [pc, #20]	; (8002190 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800217c:	68ca      	ldr	r2, [r1, #12]
 800217e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800218a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800218c:	e7fd      	b.n	800218a <__NVIC_SystemReset+0x16>
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	05fa0004 	.word	0x05fa0004

08002198 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800219c:	f7ff ffea 	bl	8002174 <__NVIC_SystemReset>

080021a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler>

080021a2 <BusFault_Handler>:
 80021a2:	b508      	push	{r3, lr}
 80021a4:	f7ff ffe6 	bl	8002174 <__NVIC_SystemReset>

080021a8 <UsageFault_Handler>:
 80021a8:	b508      	push	{r3, lr}
 80021aa:	f7ff ffe3 	bl	8002174 <__NVIC_SystemReset>

080021ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:
 80021b0:	4770      	bx	lr

080021b2 <PendSV_Handler>:
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 b8da 	b.w	800236c <HAL_IncTick>

080021b8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b8:	4801      	ldr	r0, [pc, #4]	; (80021c0 <DMA1_Channel1_IRQHandler+0x8>)
 80021ba:	f001 b8f1 	b.w	80033a0 <HAL_DMA_IRQHandler>
 80021be:	bf00      	nop
 80021c0:	20000608 	.word	0x20000608

080021c4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80021c4:	4801      	ldr	r0, [pc, #4]	; (80021cc <DMA1_Channel7_IRQHandler+0x8>)
 80021c6:	f001 b8eb 	b.w	80033a0 <HAL_DMA_IRQHandler>
 80021ca:	bf00      	nop
 80021cc:	20000650 	.word	0x20000650

080021d0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d0:	4801      	ldr	r0, [pc, #4]	; (80021d8 <USART1_IRQHandler+0x8>)
 80021d2:	f002 bf31 	b.w	8005038 <HAL_UART_IRQHandler>
 80021d6:	bf00      	nop
 80021d8:	20000730 	.word	0x20000730

080021dc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021dc:	4801      	ldr	r0, [pc, #4]	; (80021e4 <USART2_IRQHandler+0x8>)
 80021de:	f002 bf2b 	b.w	8005038 <HAL_UART_IRQHandler>
 80021e2:	bf00      	nop
 80021e4:	200007b4 	.word	0x200007b4

080021e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80021e8:	2001      	movs	r0, #1
 80021ea:	4770      	bx	lr

080021ec <_kill>:

int _kill(int pid, int sig)
{
 80021ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021ee:	f003 fc11 	bl	8005a14 <__errno>
 80021f2:	2316      	movs	r3, #22
 80021f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	bd08      	pop	{r3, pc}

080021fc <_exit>:

void _exit (int status)
{
 80021fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021fe:	f003 fc09 	bl	8005a14 <__errno>
 8002202:	2316      	movs	r3, #22
 8002204:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002206:	e7fe      	b.n	8002206 <_exit+0xa>

08002208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	460d      	mov	r5, r1
 800220c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	460e      	mov	r6, r1
 8002210:	1b73      	subs	r3, r6, r5
 8002212:	429c      	cmp	r4, r3
 8002214:	dc01      	bgt.n	800221a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002216:	4620      	mov	r0, r4
 8002218:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800221a:	f3af 8000 	nop.w
 800221e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	e7f5      	b.n	8002210 <_read+0x8>

08002224 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	460d      	mov	r5, r1
 8002228:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	460e      	mov	r6, r1
 800222c:	1b73      	subs	r3, r6, r5
 800222e:	429c      	cmp	r4, r3
 8002230:	dc01      	bgt.n	8002236 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002232:	4620      	mov	r0, r4
 8002234:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002236:	f816 0b01 	ldrb.w	r0, [r6], #1
 800223a:	f7ff f83b 	bl	80012b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	e7f5      	b.n	800222c <_write+0x8>

08002240 <_close>:

int _close(int file)
{
	return -1;
}
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	4770      	bx	lr

08002246 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800224c:	2000      	movs	r0, #0
 800224e:	4770      	bx	lr

08002250 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002250:	2001      	movs	r0, #1
 8002252:	4770      	bx	lr

08002254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002254:	2000      	movs	r0, #0
 8002256:	4770      	bx	lr

08002258 <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <_sbrk+0x30>)
 800225a:	6811      	ldr	r1, [r2, #0]
{
 800225c:	b510      	push	{r4, lr}
 800225e:	4603      	mov	r3, r0
	if (NULL == __sbrk_heap_end)
 8002260:	b909      	cbnz	r1, 8002266 <_sbrk+0xe>
	{
		__sbrk_heap_end = &_end;
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <_sbrk+0x34>)
 8002264:	6011      	str	r1, [r2, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	4909      	ldr	r1, [pc, #36]	; (8002290 <_sbrk+0x38>)
 800226a:	4c0a      	ldr	r4, [pc, #40]	; (8002294 <_sbrk+0x3c>)
 800226c:	4403      	add	r3, r0
 800226e:	1b09      	subs	r1, r1, r4
 8002270:	428b      	cmp	r3, r1
 8002272:	d906      	bls.n	8002282 <_sbrk+0x2a>
	{
		errno = ENOMEM;
 8002274:	f003 fbce 	bl	8005a14 <__errno>
 8002278:	230c      	movs	r3, #12
 800227a:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 800227c:	f04f 30ff 	mov.w	r0, #4294967295

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8002280:	bd10      	pop	{r4, pc}
	__sbrk_heap_end += incr;
 8002282:	6013      	str	r3, [r2, #0]
	return (void*) prev_heap_end;
 8002284:	e7fc      	b.n	8002280 <_sbrk+0x28>
 8002286:	bf00      	nop
 8002288:	2000083c 	.word	0x2000083c
 800228c:	20000858 	.word	0x20000858
 8002290:	2000a000 	.word	0x2000a000
 8002294:	00000800 	.word	0x00000800

08002298 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <SystemInit+0x10>)
 800229a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800229e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b0:	f7ff fff2 	bl	8002298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022b6:	490d      	ldr	r1, [pc, #52]	; (80022ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <LoopForever+0xe>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022cc:	4c0a      	ldr	r4, [pc, #40]	; (80022f8 <LoopForever+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022da:	f003 fba1 	bl	8005a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022de:	f7ff fc17 	bl	8001b10 <main>

080022e2 <LoopForever>:

LoopForever:
    b LoopForever
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80022f0:	0800b7d4 	.word	0x0800b7d4
  ldr r2, =_sbss
 80022f4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80022f8:	20000854 	.word	0x20000854

080022fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC1_2_IRQHandler>
	...

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_InitTick+0x40>)
{
 8002304:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002306:	7818      	ldrb	r0, [r3, #0]
 8002308:	b908      	cbnz	r0, 800230e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800230a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800230c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800230e:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_InitTick+0x44>)
 8002310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002314:	fbb3 f3f0 	udiv	r3, r3, r0
 8002318:	6810      	ldr	r0, [r2, #0]
 800231a:	fbb0 f0f3 	udiv	r0, r0, r3
 800231e:	f000 ff37 	bl	8003190 <HAL_SYSTICK_Config>
 8002322:	4604      	mov	r4, r0
 8002324:	2800      	cmp	r0, #0
 8002326:	d1f0      	bne.n	800230a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002328:	2d0f      	cmp	r5, #15
 800232a:	d8ee      	bhi.n	800230a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	4602      	mov	r2, r0
 800232e:	4629      	mov	r1, r5
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f000 fed8 	bl	80030e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_InitTick+0x48>)
 800233a:	4620      	mov	r0, r4
 800233c:	601d      	str	r5, [r3, #0]
  return status;
 800233e:	e7e5      	b.n	800230c <HAL_InitTick+0xc>
 8002340:	20000014 	.word	0x20000014
 8002344:	20000010 	.word	0x20000010
 8002348:	20000018 	.word	0x20000018

0800234c <HAL_Init>:
{
 800234c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
 8002350:	f000 feb8 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff ffd3 	bl	8002300 <HAL_InitTick>
 800235a:	4604      	mov	r4, r0
 800235c:	b918      	cbnz	r0, 8002366 <HAL_Init+0x1a>
    HAL_MspInit();
 800235e:	f7ff fd99 	bl	8001e94 <HAL_MspInit>
}
 8002362:	4620      	mov	r0, r4
 8002364:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002366:	2401      	movs	r4, #1
 8002368:	e7fb      	b.n	8002362 <HAL_Init+0x16>
	...

0800236c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800236c:	4a03      	ldr	r2, [pc, #12]	; (800237c <HAL_IncTick+0x10>)
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_IncTick+0x14>)
 8002370:	6811      	ldr	r1, [r2, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	440b      	add	r3, r1
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000840 	.word	0x20000840
 8002380:	20000014 	.word	0x20000014

08002384 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <HAL_GetTick+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000840 	.word	0x20000840

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff fff6 	bl	8002384 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002398:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800239a:	bf1c      	itt	ne
 800239c:	4b05      	ldrne	r3, [pc, #20]	; (80023b4 <HAL_Delay+0x24>)
 800239e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80023a2:	bf18      	it	ne
 80023a4:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	f7ff ffed 	bl	8002384 <HAL_GetTick>
 80023aa:	1b43      	subs	r3, r0, r5
 80023ac:	42a3      	cmp	r3, r4
 80023ae:	d3fa      	bcc.n	80023a6 <HAL_Delay+0x16>
  {
  }
}
 80023b0:	bd38      	pop	{r3, r4, r5, pc}
 80023b2:	bf00      	nop
 80023b4:	20000014 	.word	0x20000014

080023b8 <LL_ADC_SetChannelSamplingTime>:
{
 80023b8:	b530      	push	{r4, r5, lr}
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023ba:	0dcc      	lsrs	r4, r1, #23
 80023bc:	f004 0404 	and.w	r4, r4, #4
 80023c0:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 80023c2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80023c6:	5823      	ldr	r3, [r4, r0]
 80023c8:	2507      	movs	r5, #7
 80023ca:	408d      	lsls	r5, r1
 80023cc:	ea23 0305 	bic.w	r3, r3, r5
 80023d0:	fa02 f101 	lsl.w	r1, r2, r1
 80023d4:	430b      	orrs	r3, r1
 80023d6:	5023      	str	r3, [r4, r0]
}
 80023d8:	bd30      	pop	{r4, r5, pc}

080023da <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023da:	6880      	ldr	r0, [r0, #8]
}
 80023dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023ea:	4604      	mov	r4, r0
 80023ec:	2800      	cmp	r0, #0
 80023ee:	f000 80c3 	beq.w	8002578 <HAL_ADC_Init+0x194>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80023f4:	b925      	cbnz	r5, 8002400 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f6:	f7ff fd65 	bl	8001ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023fc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002400:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002402:	6883      	ldr	r3, [r0, #8]
 8002404:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002406:	bf41      	itttt	mi
 8002408:	6883      	ldrmi	r3, [r0, #8]
 800240a:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 800240e:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8002412:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002414:	6883      	ldr	r3, [r0, #8]
 8002416:	00dd      	lsls	r5, r3, #3
 8002418:	f140 808e 	bpl.w	8002538 <HAL_ADC_Init+0x154>
 800241c:	6883      	ldr	r3, [r0, #8]
 800241e:	00d9      	lsls	r1, r3, #3
 8002420:	f100 80a1 	bmi.w	8002566 <HAL_ADC_Init+0x182>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002434:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002436:	f7ff ffd0 	bl	80023da <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800243a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002444:	f040 8095 	bne.w	8002572 <HAL_ADC_Init+0x18e>
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800244c:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002450:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002454:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002456:	07da      	lsls	r2, r3, #31
 8002458:	d40e      	bmi.n	8002478 <HAL_ADC_Init+0x94>
 800245a:	4b48      	ldr	r3, [pc, #288]	; (800257c <HAL_ADC_Init+0x198>)
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002462:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002464:	4313      	orrs	r3, r2
 8002466:	07db      	lsls	r3, r3, #31
 8002468:	d406      	bmi.n	8002478 <HAL_ADC_Init+0x94>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800246a:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_ADC_Init+0x19c>)
 800246c:	6865      	ldr	r5, [r4, #4]
 800246e:	6893      	ldr	r3, [r2, #8]
 8002470:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002474:	432b      	orrs	r3, r5
 8002476:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002478:	68e5      	ldr	r5, [r4, #12]
 800247a:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800247c:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8002480:	432b      	orrs	r3, r5
 8002482:	68a5      	ldr	r5, [r4, #8]
 8002484:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002486:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800248a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002492:	bf02      	ittt	eq
 8002494:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8002496:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800249a:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024a0:	b122      	cbz	r2, 80024ac <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80024a2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a4:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80024a8:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024aa:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024ac:	68c5      	ldr	r5, [r0, #12]
 80024ae:	4a35      	ldr	r2, [pc, #212]	; (8002584 <HAL_ADC_Init+0x1a0>)
 80024b0:	402a      	ands	r2, r5
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b6:	f7ff ff90 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	f002 0208 	and.w	r2, r2, #8
 80024c2:	4302      	orrs	r2, r0
 80024c4:	d120      	bne.n	8002508 <HAL_ADC_Init+0x124>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024c6:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024c8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024cc:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ce:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024d0:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d4:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024d8:	f020 0002 	bic.w	r0, r0, #2
 80024dc:	4302      	orrs	r2, r0
 80024de:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80024e4:	2a01      	cmp	r2, #1
 80024e6:	d140      	bne.n	800256a <HAL_ADC_Init+0x186>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024e8:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 80024ec:	6918      	ldr	r0, [r3, #16]
 80024ee:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80024f2:	f020 0004 	bic.w	r0, r0, #4
 80024f6:	432a      	orrs	r2, r5
 80024f8:	4302      	orrs	r2, r0
 80024fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80024fc:	4302      	orrs	r2, r0
 80024fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002500:	4302      	orrs	r2, r0
 8002502:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002506:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002508:	6922      	ldr	r2, [r4, #16]
 800250a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800250c:	bf05      	ittet	eq
 800250e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002510:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002512:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002514:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002518:	bf06      	itte	eq
 800251a:	f020 000f 	biceq.w	r0, r0, #15
 800251e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002520:	f022 020f 	bicne.w	r2, r2, #15
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002526:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002532:	4608      	mov	r0, r1
 8002534:	b003      	add	sp, #12
 8002536:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002538:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_ADC_Init+0x1a4>)
 800253c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6083      	str	r3, [r0, #8]
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_ADC_Init+0x1a8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8002556:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f43f af5e 	beq.w	800241c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	e7f7      	b.n	8002556 <HAL_ADC_Init+0x172>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2100      	movs	r1, #0
 8002568:	e765      	b.n	8002436 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	e7c9      	b.n	8002506 <HAL_ADC_Init+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002578:	2101      	movs	r1, #1
 800257a:	e7da      	b.n	8002532 <HAL_ADC_Init+0x14e>
 800257c:	50040000 	.word	0x50040000
 8002580:	50040300 	.word	0x50040300
 8002584:	fff0c007 	.word	0xfff0c007
 8002588:	00030d40 	.word	0x00030d40
 800258c:	20000010 	.word	0x20000010

08002590 <HAL_ADC_ConvCpltCallback>:
 8002590:	4770      	bx	lr

08002592 <HAL_ADC_ConvHalfCpltCallback>:
 8002592:	4770      	bx	lr

08002594 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002594:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002596:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002598:	f7ff fffb 	bl	8002592 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259c:	bd08      	pop	{r3, pc}

0800259e <HAL_ADC_LevelOutOfWindowCallback>:
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ErrorCallback>:
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025a4:	6803      	ldr	r3, [r0, #0]
{
 80025a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025aa:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80027e8 <HAL_ADC_IRQHandler+0x244>
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025ae:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025b0:	685e      	ldr	r6, [r3, #4]
 80025b2:	f8d8 7008 	ldr.w	r7, [r8, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025b6:	07ab      	lsls	r3, r5, #30
{
 80025b8:	4604      	mov	r4, r0
 80025ba:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025be:	d50e      	bpl.n	80025de <HAL_ADC_IRQHandler+0x3a>
 80025c0:	07b0      	lsls	r0, r6, #30
 80025c2:	d50c      	bpl.n	80025de <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025c6:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025c8:	bf5e      	ittt	pl
 80025ca:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80025cc:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 80025d0:	6563      	strpl	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025d2:	4620      	mov	r0, r4
 80025d4:	f000 fd12 	bl	8002ffc <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	2202      	movs	r2, #2
 80025dc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025de:	076a      	lsls	r2, r5, #29
 80025e0:	d501      	bpl.n	80025e6 <HAL_ADC_IRQHandler+0x42>
 80025e2:	0773      	lsls	r3, r6, #29
 80025e4:	d403      	bmi.n	80025ee <HAL_ADC_IRQHandler+0x4a>
 80025e6:	0728      	lsls	r0, r5, #28
 80025e8:	d532      	bpl.n	8002650 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025ea:	0731      	lsls	r1, r6, #28
 80025ec:	d530      	bpl.n	8002650 <HAL_ADC_IRQHandler+0xac>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f0:	6820      	ldr	r0, [r4, #0]
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f2:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f4:	bf5e      	ittt	pl
 80025f6:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80025f8:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 80025fc:	6563      	strpl	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025fe:	68c3      	ldr	r3, [r0, #12]
 8002600:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002604:	d11e      	bne.n	8002644 <HAL_ADC_IRQHandler+0xa0>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_ADC_IRQHandler+0x23c>)
 8002608:	4298      	cmp	r0, r3
 800260a:	f000 80db 	beq.w	80027c4 <HAL_ADC_IRQHandler+0x220>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800260e:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	d417      	bmi.n	8002644 <HAL_ADC_IRQHandler+0xa0>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002614:	6803      	ldr	r3, [r0, #0]
 8002616:	0719      	lsls	r1, r3, #28
 8002618:	d514      	bpl.n	8002644 <HAL_ADC_IRQHandler+0xa0>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261a:	f7ff fede 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 800261e:	2800      	cmp	r0, #0
 8002620:	f040 80b1 	bne.w	8002786 <HAL_ADC_IRQHandler+0x1e2>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6853      	ldr	r3, [r2, #4]
 8002628:	f023 030c 	bic.w	r3, r3, #12
 800262c:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800262e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002634:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002636:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002638:	04da      	lsls	r2, r3, #19
 800263a:	d403      	bmi.n	8002644 <HAL_ADC_IRQHandler+0xa0>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800263c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002644:	4620      	mov	r0, r4
 8002646:	f7ff ffa3 	bl	8002590 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	220c      	movs	r2, #12
 800264e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002650:	06ab      	lsls	r3, r5, #26
 8002652:	d501      	bpl.n	8002658 <HAL_ADC_IRQHandler+0xb4>
 8002654:	06b0      	lsls	r0, r6, #26
 8002656:	d403      	bmi.n	8002660 <HAL_ADC_IRQHandler+0xbc>
 8002658:	0669      	lsls	r1, r5, #25
 800265a:	d538      	bpl.n	80026ce <HAL_ADC_IRQHandler+0x12a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800265c:	0672      	lsls	r2, r6, #25
 800265e:	d536      	bpl.n	80026ce <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002660:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_ADC_IRQHandler+0x23c>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002664:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002666:	bf5e      	ittt	pl
 8002668:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 800266a:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800266e:	6563      	strpl	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002670:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002672:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002674:	68d9      	ldr	r1, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002676:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002678:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 800267c:	d104      	bne.n	8002688 <HAL_ADC_IRQHandler+0xe4>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800267e:	b11f      	cbz	r7, 8002688 <HAL_ADC_IRQHandler+0xe4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002680:	1fba      	subs	r2, r7, #6
 8002682:	2a01      	cmp	r2, #1
 8002684:	f200 8088 	bhi.w	8002798 <HAL_ADC_IRQHandler+0x1f4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002688:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800268a:	b9d0      	cbnz	r0, 80026c2 <HAL_ADC_IRQHandler+0x11e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800268c:	0190      	lsls	r0, r2, #6
 800268e:	d505      	bpl.n	800269c <HAL_ADC_IRQHandler+0xf8>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002690:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002694:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002698:	4301      	orrs	r1, r0
 800269a:	d112      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x11e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	0648      	lsls	r0, r1, #25
 80026a0:	d50f      	bpl.n	80026c2 <HAL_ADC_IRQHandler+0x11e>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026a2:	0291      	lsls	r1, r2, #10
 80026a4:	d40d      	bmi.n	80026c2 <HAL_ADC_IRQHandler+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	0712      	lsls	r2, r2, #28
 80026aa:	d478      	bmi.n	800279e <HAL_ADC_IRQHandler+0x1fa>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026b2:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ba:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026be:	05d8      	lsls	r0, r3, #23
 80026c0:	d576      	bpl.n	80027b0 <HAL_ADC_IRQHandler+0x20c>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026c2:	4620      	mov	r0, r4
 80026c4:	f000 fc96 	bl	8002ff4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	2260      	movs	r2, #96	; 0x60
 80026cc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026ce:	0629      	lsls	r1, r5, #24
 80026d0:	d50b      	bpl.n	80026ea <HAL_ADC_IRQHandler+0x146>
 80026d2:	0632      	lsls	r2, r6, #24
 80026d4:	d509      	bpl.n	80026ea <HAL_ADC_IRQHandler+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff ff5d 	bl	800259e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ea:	05eb      	lsls	r3, r5, #23
 80026ec:	d50c      	bpl.n	8002708 <HAL_ADC_IRQHandler+0x164>
 80026ee:	05f0      	lsls	r0, r6, #23
 80026f0:	d50a      	bpl.n	8002708 <HAL_ADC_IRQHandler+0x164>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f000 fc7c 	bl	8002ff8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002706:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002708:	05a9      	lsls	r1, r5, #22
 800270a:	d50c      	bpl.n	8002726 <HAL_ADC_IRQHandler+0x182>
 800270c:	05b2      	lsls	r2, r6, #22
 800270e:	d50a      	bpl.n	8002726 <HAL_ADC_IRQHandler+0x182>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002716:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fc6e 	bl	8002ffa <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002724:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002726:	06eb      	lsls	r3, r5, #27
 8002728:	d518      	bpl.n	800275c <HAL_ADC_IRQHandler+0x1b8>
 800272a:	06f0      	lsls	r0, r6, #27
 800272c:	d516      	bpl.n	800275c <HAL_ADC_IRQHandler+0x1b8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800272e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002730:	b133      	cbz	r3, 8002740 <HAL_ADC_IRQHandler+0x19c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002732:	2f00      	cmp	r7, #0
 8002734:	d041      	beq.n	80027ba <HAL_ADC_IRQHandler+0x216>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002736:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800273a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800273e:	d00a      	beq.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002740:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff ff25 	bl	80025a0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	2210      	movs	r2, #16
 800275a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800275c:	0569      	lsls	r1, r5, #21
 800275e:	d53c      	bpl.n	80027da <HAL_ADC_IRQHandler+0x236>
 8002760:	0572      	lsls	r2, r6, #21
 8002762:	d53a      	bpl.n	80027da <HAL_ADC_IRQHandler+0x236>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002764:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800276c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800276e:	f043 0308 	orr.w	r3, r3, #8
 8002772:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800277a:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002782:	f000 bc38 	b.w	8002ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	65a3      	str	r3, [r4, #88]	; 0x58
 8002796:	e755      	b.n	8002644 <HAL_ADC_IRQHandler+0xa0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	e775      	b.n	800268a <HAL_ADC_IRQHandler+0xe6>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80027ae:	e788      	b.n	80026c2 <HAL_ADC_IRQHandler+0x11e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6563      	str	r3, [r4, #84]	; 0x54
 80027b8:	e783      	b.n	80026c2 <HAL_ADC_IRQHandler+0x11e>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f013 0f01 	tst.w	r3, #1
 80027c2:	e7bc      	b.n	800273e <HAL_ADC_IRQHandler+0x19a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c4:	2f09      	cmp	r7, #9
 80027c6:	d805      	bhi.n	80027d4 <HAL_ADC_IRQHandler+0x230>
 80027c8:	f240 2321 	movw	r3, #545	; 0x221
 80027cc:	40fb      	lsrs	r3, r7
 80027ce:	07db      	lsls	r3, r3, #31
 80027d0:	f53f af1d 	bmi.w	800260e <HAL_ADC_IRQHandler+0x6a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_ADC_IRQHandler+0x240>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	e71a      	b.n	8002610 <HAL_ADC_IRQHandler+0x6c>
}
 80027da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027de:	bf00      	nop
 80027e0:	50040100 	.word	0x50040100
 80027e4:	50040000 	.word	0x50040000
 80027e8:	50040300 	.word	0x50040300

080027ec <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80027f4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027f8:	d121      	bne.n	800283e <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	6811      	ldr	r1, [r2, #0]
 8002804:	0708      	lsls	r0, r1, #28
 8002806:	d516      	bpl.n	8002836 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002808:	68d1      	ldr	r1, [r2, #12]
 800280a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800280e:	d10e      	bne.n	800282e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002816:	d10a      	bne.n	800282e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002822:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002824:	bf5e      	ittt	pl
 8002826:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8002828:	f042 0201 	orrpl.w	r2, r2, #1
 800282c:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff feae 	bl	8002590 <HAL_ADC_ConvCpltCallback>
}
 8002834:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002836:	68d2      	ldr	r2, [r2, #12]
 8002838:	f012 0f02 	tst.w	r2, #2
 800283c:	e7eb      	b.n	8002816 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800283e:	06d2      	lsls	r2, r2, #27
 8002840:	d503      	bpl.n	800284a <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff feac 	bl	80025a0 <HAL_ADC_ErrorCallback>
 8002848:	e7f4      	b.n	8002834 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800284c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	4718      	bx	r3

08002854 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002854:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002856:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002858:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800285a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002860:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002868:	f7ff fe9a 	bl	80025a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800286c:	bd08      	pop	{r3, pc}
	...

08002870 <HAL_ADC_ConfigChannel>:
{
 8002870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002876:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800287a:	2b01      	cmp	r3, #1
{
 800287c:	4605      	mov	r5, r0
 800287e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002880:	f000 81a5 	beq.w	8002bce <HAL_ADC_ConfigChannel+0x35e>
 8002884:	2301      	movs	r3, #1
 8002886:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	f7ff fda5 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 8002890:	2800      	cmp	r0, #0
 8002892:	f040 8196 	bne.w	8002bc2 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank <= 5U)
 8002896:	684b      	ldr	r3, [r1, #4]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d809      	bhi.n	80028b0 <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 800289c:	3b02      	subs	r3, #2
 800289e:	2b03      	cmp	r3, #3
 80028a0:	f200 8094 	bhi.w	80029cc <HAL_ADC_ConfigChannel+0x15c>
 80028a4:	e8df f003 	tbb	[pc, r3]
 80028a8:	8f8d8b02 	.word	0x8f8d8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028ac:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028ae:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028b0:	6862      	ldr	r2, [r4, #4]
 80028b2:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80028b4:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028b6:	0991      	lsrs	r1, r2, #6
 80028b8:	f001 010c 	and.w	r1, r1, #12
 80028bc:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	59ce      	ldr	r6, [r1, r7]
 80028c6:	f04f 0c1f 	mov.w	ip, #31
 80028ca:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028ce:	4093      	lsls	r3, r2
 80028d0:	fa0c f202 	lsl.w	r2, ip, r2
 80028d4:	ea26 0202 	bic.w	r2, r6, r2
 80028d8:	4313      	orrs	r3, r2
 80028da:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028dc:	f7ff fd7d 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 80028e0:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e2:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e4:	6882      	ldr	r2, [r0, #8]
 80028e6:	f002 0208 	and.w	r2, r2, #8
 80028ea:	430a      	orrs	r2, r1
 80028ec:	d124      	bne.n	8002938 <HAL_ADC_ConfigChannel+0xc8>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028ee:	68a3      	ldr	r3, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028f0:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f6:	d16b      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028f8:	f7ff fd5e 	bl	80023b8 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028fc:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028fe:	6953      	ldr	r3, [r2, #20]
 8002900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002904:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002906:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002908:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800290a:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800290c:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800290e:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002910:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8002914:	d064      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002916:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800291a:	0048      	lsls	r0, r1, #1
 800291c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 800291e:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8002922:	4081      	lsls	r1, r0
 8002924:	48ab      	ldr	r0, [pc, #684]	; (8002bd4 <HAL_ADC_ConfigChannel+0x364>)
 8002926:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800292a:	4038      	ands	r0, r7
 800292c:	4310      	orrs	r0, r2
 800292e:	4301      	orrs	r1, r0
 8002930:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002934:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002938:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800293a:	6883      	ldr	r3, [r0, #8]
 800293c:	07d9      	lsls	r1, r3, #31
 800293e:	d433      	bmi.n	80029a8 <HAL_ADC_ConfigChannel+0x138>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002940:	68e7      	ldr	r7, [r4, #12]
 8002942:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002944:	4aa4      	ldr	r2, [pc, #656]	; (8002bd8 <HAL_ADC_ConfigChannel+0x368>)
 8002946:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800294a:	f007 0c18 	and.w	ip, r7, #24
 800294e:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002952:	fa22 f20c 	lsr.w	r2, r2, ip
 8002956:	401a      	ands	r2, r3
 8002958:	ea21 0106 	bic.w	r1, r1, r6
 800295c:	430a      	orrs	r2, r1
 800295e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002962:	4a9e      	ldr	r2, [pc, #632]	; (8002bdc <HAL_ADC_ConfigChannel+0x36c>)
 8002964:	4297      	cmp	r7, r2
 8002966:	d11f      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x138>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002968:	2e00      	cmp	r6, #0
 800296a:	f040 808e 	bne.w	8002a8a <HAL_ADC_ConfigChannel+0x21a>
 800296e:	0e9a      	lsrs	r2, r3, #26
 8002970:	3201      	adds	r2, #1
 8002972:	f002 071f 	and.w	r7, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297a:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800297c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002980:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002984:	f200 80b3 	bhi.w	8002aee <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002988:	430a      	orrs	r2, r1
 800298a:	2e00      	cmp	r6, #0
 800298c:	f040 8099 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x252>
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800299c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299e:	ea42 0103 	orr.w	r1, r2, r3
 80029a2:	68a2      	ldr	r2, [r4, #8]
 80029a4:	f7ff fd08 	bl	80023b8 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a8:	6821      	ldr	r1, [r4, #0]
 80029aa:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <HAL_ADC_ConfigChannel+0x370>)
 80029ac:	4219      	tst	r1, r3
 80029ae:	f040 80b9 	bne.w	8002b24 <HAL_ADC_ConfigChannel+0x2b4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80029b4:	2300      	movs	r3, #0
 80029b6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80029ba:	b003      	add	sp, #12
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80029be:	2312      	movs	r3, #18
 80029c0:	e775      	b.n	80028ae <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80029c2:	2318      	movs	r3, #24
 80029c4:	e773      	b.n	80028ae <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80029c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ca:	e770      	b.n	80028ae <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80029cc:	2306      	movs	r3, #6
 80029ce:	e76e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff fcf1 	bl	80023b8 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029d6:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029d8:	6953      	ldr	r3, [r2, #20]
 80029da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029de:	e791      	b.n	8002904 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029e0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80029e2:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e4:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e8:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d138      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x1f2>
 80029f0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029f4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80029f6:	bf02      	ittt	eq
 80029f8:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 80029fa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80029fe:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a00:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a0e:	bb68      	cbnz	r0, 8002a6c <HAL_ADC_ConfigChannel+0x1fc>
 8002a10:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a14:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002a16:	bf02      	ittt	eq
 8002a18:	685a      	ldreq	r2, [r3, #4]
 8002a1a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002a1e:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a20:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a2a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a2e:	bb10      	cbnz	r0, 8002a76 <HAL_ADC_ConfigChannel+0x206>
 8002a30:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a34:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002a36:	bf02      	ittt	eq
 8002a38:	689a      	ldreq	r2, [r3, #8]
 8002a3a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a40:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a42:	6822      	ldr	r2, [r4, #0]
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4e:	b9b8      	cbnz	r0, 8002a80 <HAL_ADC_ConfigChannel+0x210>
 8002a50:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a54:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002a56:	bf02      	ittt	eq
 8002a58:	68da      	ldreq	r2, [r3, #12]
 8002a5a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002a5e:	60da      	streq	r2, [r3, #12]
}
 8002a60:	e76a      	b.n	8002938 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	e7c3      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	e7ce      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	e7d9      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002a84:	fab2 f282 	clz	r2, r2
 8002a88:	e7e4      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002a8e:	b132      	cbz	r2, 8002a9e <HAL_ADC_ConfigChannel+0x22e>
  return __builtin_clz(value);
 8002a90:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a94:	3201      	adds	r2, #1
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2a09      	cmp	r2, #9
 8002a9c:	d816      	bhi.n	8002acc <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002aa2:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa6:	3201      	adds	r2, #1
 8002aa8:	0692      	lsls	r2, r2, #26
 8002aaa:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002ab2:	fab1 f181 	clz	r1, r1
 8002ab6:	3101      	adds	r1, #1
 8002ab8:	f001 071f 	and.w	r7, r1, #31
 8002abc:	2101      	movs	r1, #1
 8002abe:	40b9      	lsls	r1, r7
 8002ac0:	e762      	b.n	8002988 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	e762      	b.n	8002992 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	3201      	adds	r2, #1
 8002ad6:	0692      	lsls	r2, r2, #26
 8002ad8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002ae0:	fab1 f181 	clz	r1, r1
 8002ae4:	3101      	adds	r1, #1
 8002ae6:	f001 071f 	and.w	r7, r1, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	40b9      	lsls	r1, r7
 8002aee:	430a      	orrs	r2, r1
 8002af0:	b95e      	cbnz	r6, 8002b0a <HAL_ADC_ConfigChannel+0x29a>
 8002af2:	0e9e      	lsrs	r6, r3, #26
 8002af4:	3601      	adds	r6, #1
 8002af6:	f006 061f 	and.w	r6, r6, #31
 8002afa:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002afe:	391e      	subs	r1, #30
 8002b00:	0509      	lsls	r1, r1, #20
 8002b02:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b06:	4311      	orrs	r1, r2
 8002b08:	e74b      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002b0e:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b12:	3101      	adds	r1, #1
 8002b14:	f001 031f 	and.w	r3, r1, #31
 8002b18:	f06f 061d 	mvn.w	r6, #29
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002b22:	e7ed      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x290>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_ADC_ConfigChannel+0x378>)
 8002b28:	6898      	ldr	r0, [r3, #8]
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8002b30:	d11e      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x300>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b32:	0202      	lsls	r2, r0, #8
 8002b34:	f53f af3d 	bmi.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b38:	6829      	ldr	r1, [r5, #0]
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_ADC_ConfigChannel+0x37c>)
 8002b3c:	4291      	cmp	r1, r2
 8002b3e:	f47f af38 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b4e:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_ADC_ConfigChannel+0x380>)
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_ADC_ConfigChannel+0x384>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002b60:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f43f af24 	beq.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	e7f7      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x2f0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b70:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <HAL_ADC_ConfigChannel+0x388>)
 8002b72:	4291      	cmp	r1, r2
 8002b74:	d111      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x32a>
 8002b76:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002b7a:	f47f af1a 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b7e:	6829      	ldr	r1, [r5, #0]
 8002b80:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8002b84:	4291      	cmp	r1, r2
 8002b86:	f47f af14 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002b90:	4322      	orrs	r2, r4
 8002b92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	e70c      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <HAL_ADC_ConfigChannel+0x38c>)
 8002b9c:	4291      	cmp	r1, r2
 8002b9e:	f47f af08 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ba2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002ba6:	f47f af04 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002baa:	6829      	ldr	r1, [r5, #0]
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_ADC_ConfigChannel+0x37c>)
 8002bae:	4291      	cmp	r1, r2
 8002bb0:	f47f aeff 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002bba:	4322      	orrs	r2, r4
 8002bbc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002bc0:	e7e9      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bca:	4618      	mov	r0, r3
 8002bcc:	e6f2      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 8002bce:	2002      	movs	r0, #2
 8002bd0:	e6f3      	b.n	80029ba <HAL_ADC_ConfigChannel+0x14a>
 8002bd2:	bf00      	nop
 8002bd4:	03fff000 	.word	0x03fff000
 8002bd8:	0007ffff 	.word	0x0007ffff
 8002bdc:	407f0000 	.word	0x407f0000
 8002be0:	80080000 	.word	0x80080000
 8002be4:	50040300 	.word	0x50040300
 8002be8:	c7520000 	.word	0xc7520000
 8002bec:	50040000 	.word	0x50040000
 8002bf0:	20000010 	.word	0x20000010
 8002bf4:	00030d40 	.word	0x00030d40
 8002bf8:	cb840000 	.word	0xcb840000
 8002bfc:	80000001 	.word	0x80000001

08002c00 <ADC_Enable>:
{
 8002c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002c02:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c04:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002c06:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c08:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c0a:	07dd      	lsls	r5, r3, #31
{
 8002c0c:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c0e:	d502      	bpl.n	8002c16 <ADC_Enable+0x16>
  return HAL_OK;
 8002c10:	2000      	movs	r0, #0
}
 8002c12:	b002      	add	sp, #8
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c16:	6891      	ldr	r1, [r2, #8]
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <ADC_Enable+0x9c>)
 8002c1a:	4219      	tst	r1, r3
 8002c1c:	d009      	beq.n	8002c32 <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1
 8002c30:	e7ef      	b.n	8002c12 <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8002c32:	6893      	ldr	r3, [r2, #8]
 8002c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <ADC_Enable+0xa0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c46:	0218      	lsls	r0, r3, #8
 8002c48:	d419      	bmi.n	8002c7e <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 8002c4a:	f7ff fb9b 	bl	8002384 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8002c4e:	4e15      	ldr	r6, [pc, #84]	; (8002ca4 <ADC_Enable+0xa4>)
 8002c50:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	07db      	lsls	r3, r3, #31
 8002c58:	d4da      	bmi.n	8002c10 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c5a:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8002c5e:	bf5f      	itttt	pl
 8002c60:	6893      	ldrpl	r3, [r2, #8]
 8002c62:	4033      	andpl	r3, r6
 8002c64:	f043 0301 	orrpl.w	r3, r3, #1
 8002c68:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c6a:	f7ff fb8b 	bl	8002384 <HAL_GetTick>
 8002c6e:	1b40      	subs	r0, r0, r5
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d9ee      	bls.n	8002c52 <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	07da      	lsls	r2, r3, #31
 8002c7a:	d4ea      	bmi.n	8002c52 <ADC_Enable+0x52>
 8002c7c:	e7cf      	b.n	8002c1e <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <ADC_Enable+0xa8>)
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <ADC_Enable+0xac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c88:	230c      	movs	r3, #12
 8002c8a:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8002c8e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002c90:	9b01      	ldr	r3, [sp, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0d9      	beq.n	8002c4a <ADC_Enable+0x4a>
        wait_loop_index--;
 8002c96:	9b01      	ldr	r3, [sp, #4]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	e7f8      	b.n	8002c8e <ADC_Enable+0x8e>
 8002c9c:	8000003f 	.word	0x8000003f
 8002ca0:	50040300 	.word	0x50040300
 8002ca4:	7fffffc0 	.word	0x7fffffc0
 8002ca8:	20000010 	.word	0x20000010
 8002cac:	00030d40 	.word	0x00030d40

08002cb0 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	; (8002df0 <HAL_ADC_Start_IT+0x140>)
{
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb6:	6800      	ldr	r0, [r0, #0]
 8002cb8:	689e      	ldr	r6, [r3, #8]
 8002cba:	f7ff fb8e 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	f040 808f 	bne.w	8002de4 <HAL_ADC_Start_IT+0x134>
    __HAL_LOCK(hadc);
 8002cc6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f000 808a 	beq.w	8002de4 <HAL_ADC_Start_IT+0x134>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7ff ff92 	bl	8002c00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d17e      	bne.n	8002dde <HAL_ADC_Start_IT+0x12e>
      ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce2:	4944      	ldr	r1, [pc, #272]	; (8002df4 <HAL_ADC_Start_IT+0x144>)
      ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	f006 021f 	and.w	r2, r6, #31
 8002cfa:	d075      	beq.n	8002de8 <HAL_ADC_Start_IT+0x138>
 8002cfc:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cfe:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002d00:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8002d04:	6565      	str	r5, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d06:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002d08:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d0c:	bf1c      	itt	ne
 8002d0e:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 8002d10:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d16:	251c      	movs	r5, #28
 8002d18:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d20:	685d      	ldr	r5, [r3, #4]
 8002d22:	f025 051c 	bic.w	r5, r5, #28
 8002d26:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002d28:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d2a:	685e      	ldr	r6, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002d2c:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d2e:	bf0c      	ite	eq
 8002d30:	f046 0608 	orreq.w	r6, r6, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d34:	f046 0604 	orrne.w	r6, r6, #4
 8002d38:	605e      	str	r6, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d3a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002d3c:	b91e      	cbnz	r6, 8002d46 <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d3e:	685e      	ldr	r6, [r3, #4]
 8002d40:	f046 0610 	orr.w	r6, r6, #16
 8002d44:	605e      	str	r6, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d46:	428b      	cmp	r3, r1
 8002d48:	d007      	beq.n	8002d5a <HAL_ADC_Start_IT+0xaa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4a:	2a09      	cmp	r2, #9
 8002d4c:	d828      	bhi.n	8002da0 <HAL_ADC_Start_IT+0xf0>
 8002d4e:	f240 2621 	movw	r6, #545	; 0x221
 8002d52:	fa26 f202 	lsr.w	r2, r6, r2
 8002d56:	07d6      	lsls	r6, r2, #31
 8002d58:	d522      	bpl.n	8002da0 <HAL_ADC_Start_IT+0xf0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	0191      	lsls	r1, r2, #6
 8002d5e:	d516      	bpl.n	8002d8e <HAL_ADC_Start_IT+0xde>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002d62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d6a:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d6c:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002d6e:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d70:	bf0b      	itete	eq
 8002d72:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d76:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d7a:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d7c:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d7e:	bf0b      	itete	eq
 8002d80:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d82:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d84:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d88:	f042 0220 	orrne.w	r2, r2, #32
 8002d8c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d98:	f042 0204 	orr.w	r2, r2, #4
 8002d9c:	609a      	str	r2, [r3, #8]
}
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002da2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002da6:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002da8:	68ca      	ldr	r2, [r1, #12]
 8002daa:	0192      	lsls	r2, r2, #6
 8002dac:	d5f7      	bpl.n	8002d9e <HAL_ADC_Start_IT+0xee>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002db0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db8:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dba:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002dbc:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dbe:	bf0b      	itete	eq
 8002dc0:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dc4:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dc8:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dca:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dcc:	bf0b      	itete	eq
 8002dce:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dd0:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dd2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dd6:	f042 0220 	orrne.w	r2, r2, #32
 8002dda:	605a      	str	r2, [r3, #4]
              break;
 8002ddc:	e7df      	b.n	8002d9e <HAL_ADC_Start_IT+0xee>
      __HAL_UNLOCK(hadc);
 8002dde:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002de2:	e7dc      	b.n	8002d9e <HAL_ADC_Start_IT+0xee>
    tmp_hal_status = HAL_BUSY;
 8002de4:	2002      	movs	r0, #2
 8002de6:	e7da      	b.n	8002d9e <HAL_ADC_Start_IT+0xee>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_ADC_Start_IT+0x148>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d087      	beq.n	8002cfe <HAL_ADC_Start_IT+0x4e>
 8002dee:	e78a      	b.n	8002d06 <HAL_ADC_Start_IT+0x56>
 8002df0:	50040300 	.word	0x50040300
 8002df4:	50040100 	.word	0x50040100
 8002df8:	50040000 	.word	0x50040000

08002dfc <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_ADC_Start_DMA+0xe0>)
{
 8002dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e02:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e04:	6800      	ldr	r0, [r0, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
{
 8002e08:	460e      	mov	r6, r1
 8002e0a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0c:	f7ff fae5 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d15d      	bne.n	8002ed0 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002e14:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002e18:	2a01      	cmp	r2, #1
 8002e1a:	d059      	beq.n	8002ed0 <HAL_ADC_Start_DMA+0xd4>
 8002e1c:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e20:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002e24:	f04f 0301 	mov.w	r3, #1
 8002e28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e2c:	d84b      	bhi.n	8002ec6 <HAL_ADC_Start_DMA+0xca>
 8002e2e:	f240 2021 	movw	r0, #545	; 0x221
 8002e32:	fa20 f008 	lsr.w	r0, r0, r8
 8002e36:	43c0      	mvns	r0, r0
 8002e38:	ea10 0503 	ands.w	r5, r0, r3
 8002e3c:	d143      	bne.n	8002ec6 <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff fede 	bl	8002c00 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d13b      	bne.n	8002ec0 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 8002e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e4a:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_ADC_Start_DMA+0xe4>)
 8002e5c:	4299      	cmp	r1, r3
 8002e5e:	d039      	beq.n	8002ed4 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e66:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e6a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e6c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e70:	bf1c      	itt	ne
 8002e72:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8002e74:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002e78:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_ADC_Start_DMA+0xe8>)
 8002e7c:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_ADC_Start_DMA+0xec>)
 8002e80:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <HAL_ADC_Start_DMA+0xf0>)
 8002e84:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e86:	231c      	movs	r3, #28
 8002e88:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e90:	684b      	ldr	r3, [r1, #4]
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e98:	68cb      	ldr	r3, [r1, #12]
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ea0:	4632      	mov	r2, r6
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	3140      	adds	r1, #64	; 0x40
 8002ea6:	f000 f9f3 	bl	8003290 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eaa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002eac:	6893      	ldr	r3, [r2, #8]
 8002eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6093      	str	r3, [r2, #8]
}
 8002ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8002ec0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002ec4:	e7fa      	b.n	8002ebc <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8002ecc:	2001      	movs	r0, #1
 8002ece:	e7f5      	b.n	8002ebc <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	e7f3      	b.n	8002ebc <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ed4:	f1b8 0f00 	cmp.w	r8, #0
 8002ed8:	d0c2      	beq.n	8002e60 <HAL_ADC_Start_DMA+0x64>
 8002eda:	e7c5      	b.n	8002e68 <HAL_ADC_Start_DMA+0x6c>
 8002edc:	50040300 	.word	0x50040300
 8002ee0:	50040100 	.word	0x50040100
 8002ee4:	080027ed 	.word	0x080027ed
 8002ee8:	08002595 	.word	0x08002595
 8002eec:	08002855 	.word	0x08002855

08002ef0 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ef0:	6802      	ldr	r2, [r0, #0]
{
 8002ef2:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ef4:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ef6:	6891      	ldr	r1, [r2, #8]
 8002ef8:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002efa:	07c8      	lsls	r0, r1, #31
 8002efc:	d401      	bmi.n	8002f02 <ADC_Disable+0x12>
  return HAL_OK;
 8002efe:	2000      	movs	r0, #0
}
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f02:	0799      	lsls	r1, r3, #30
 8002f04:	d4fb      	bmi.n	8002efe <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f06:	6893      	ldr	r3, [r2, #8]
 8002f08:	f003 030d 	and.w	r3, r3, #13
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d119      	bne.n	8002f44 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8002f10:	6893      	ldr	r3, [r2, #8]
 8002f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f20:	2303      	movs	r3, #3
 8002f22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f24:	f7ff fa2e 	bl	8002384 <HAL_GetTick>
 8002f28:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	07db      	lsls	r3, r3, #31
 8002f30:	d5e5      	bpl.n	8002efe <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f32:	f7ff fa27 	bl	8002384 <HAL_GetTick>
 8002f36:	1b40      	subs	r0, r0, r5
 8002f38:	2802      	cmp	r0, #2
 8002f3a:	d9f6      	bls.n	8002f2a <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	07da      	lsls	r2, r3, #31
 8002f42:	d5f2      	bpl.n	8002f2a <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f46:	f043 0310 	orr.w	r3, r3, #16
 8002f4a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7d3      	b.n	8002f00 <ADC_Disable+0x10>

08002f58 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f58:	6880      	ldr	r0, [r0, #8]
}
 8002f5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002f5e:	4770      	bx	lr

08002f60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f66:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002f6a:	2b01      	cmp	r3, #1
{
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8002f70:	d03e      	beq.n	8002ff0 <HAL_ADCEx_Calibration_Start+0x90>
 8002f72:	2301      	movs	r3, #1
 8002f74:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f78:	f7ff ffba 	bl	8002ef0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d133      	bne.n	8002fe8 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f82:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002f84:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002f88:	f022 0202 	bic.w	r2, r2, #2
 8002f8c:	f042 0202 	orr.w	r2, r2, #2
 8002f90:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8002f92:	68b3      	ldr	r3, [r6, #8]
 8002f94:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f9c:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8002fa0:	432b      	orrs	r3, r5
 8002fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fa8:	68b3      	ldr	r3, [r6, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da12      	bge.n	8002fd4 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8002fae:	9b01      	ldr	r3, [sp, #4]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fb4:	9b01      	ldr	r3, [sp, #4]
 8002fb6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002fba:	d3f5      	bcc.n	8002fa8 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fbe:	f023 0312 	bic.w	r3, r3, #18
 8002fc2:	f043 0310 	orr.w	r3, r3, #16
 8002fc6:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8002fe6:	e7f3      	b.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	e7f6      	b.n	8002fde <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	e7ed      	b.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x70>

08002ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002ff8:	4770      	bx	lr

08002ffa <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADCEx_EndOfSamplingCallback>:
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003002:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003006:	2b01      	cmp	r3, #1
{
 8003008:	b09b      	sub	sp, #108	; 0x6c
 800300a:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800300c:	d052      	beq.n	80030b4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 800300e:	2301      	movs	r3, #1
 8003010:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003014:	6817      	ldr	r7, [r2, #0]
 8003016:	4c28      	ldr	r4, [pc, #160]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003018:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800301a:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800301c:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800301e:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003020:	d008      	beq.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003024:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003028:	f041 0120 	orr.w	r1, r1, #32
 800302c:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 800302e:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003030:	b01b      	add	sp, #108	; 0x6c
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003034:	4e21      	ldr	r6, [pc, #132]	; (80030bc <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8003036:	4630      	mov	r0, r6
 8003038:	f7ff ff8e 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 800303c:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303e:	6810      	ldr	r0, [r2, #0]
 8003040:	f7ff ff8a 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003044:	4320      	orrs	r0, r4
 8003046:	d130      	bne.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003048:	4c1d      	ldr	r4, [pc, #116]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800304a:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800304c:	68a3      	ldr	r3, [r4, #8]
 800304e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003052:	b1e5      	cbz	r5, 800308e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003054:	6848      	ldr	r0, [r1, #4]
 8003056:	4303      	orrs	r3, r0
 8003058:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800305c:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8003060:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003062:	68b8      	ldr	r0, [r7, #8]
 8003064:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003066:	4303      	orrs	r3, r0
 8003068:	f013 0301 	ands.w	r3, r3, #1
 800306c:	d004      	beq.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003070:	2300      	movs	r3, #0
 8003072:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8003076:	e7db      	b.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 8003078:	6889      	ldr	r1, [r1, #8]
 800307a:	68a0      	ldr	r0, [r4, #8]
 800307c:	430d      	orrs	r5, r1
 800307e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8003082:	f021 010f 	bic.w	r1, r1, #15
 8003086:	430d      	orrs	r5, r1
 8003088:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 800308a:	4618      	mov	r0, r3
 800308c:	e7f0      	b.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800308e:	60a3      	str	r3, [r4, #8]
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003094:	4303      	orrs	r3, r0
 8003096:	f013 0301 	ands.w	r3, r3, #1
 800309a:	d1e8      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800309c:	68a1      	ldr	r1, [r4, #8]
 800309e:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80030a2:	f021 010f 	bic.w	r1, r1, #15
 80030a6:	60a1      	str	r1, [r4, #8]
 80030a8:	e7ef      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030aa:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80030ac:	f041 0120 	orr.w	r1, r1, #32
 80030b0:	6551      	str	r1, [r2, #84]	; 0x54
 80030b2:	e7ea      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 80030b4:	2002      	movs	r0, #2
 80030b6:	e7bb      	b.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 80030b8:	50040000 	.word	0x50040000
 80030bc:	50040100 	.word	0x50040100
 80030c0:	50040300 	.word	0x50040300

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80030c6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ce:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80030e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ea:	b530      	push	{r4, r5, lr}
 80030ec:	68dc      	ldr	r4, [r3, #12]
 80030ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	2d04      	cmp	r5, #4
 80030fa:	bf28      	it	cs
 80030fc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003104:	bf8c      	ite	hi
 8003106:	3c03      	subhi	r4, #3
 8003108:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310a:	fa03 f505 	lsl.w	r5, r3, r5
 800310e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003112:	40a3      	lsls	r3, r4
 8003114:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800311a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	bfac      	ite	ge
 8003122:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	4a08      	ldrlt	r2, [pc, #32]	; (8003148 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	bfb8      	it	lt
 800312e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	b2db      	uxtb	r3, r3
 8003134:	bfaa      	itet	ge
 8003136:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003140:	bd30      	pop	{r4, r5, pc}
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00
 8003148:	e000ed14 	.word	0xe000ed14

0800314c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800314c:	2800      	cmp	r0, #0
 800314e:	db08      	blt.n	8003162 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003150:	2301      	movs	r3, #1
 8003152:	0942      	lsrs	r2, r0, #5
 8003154:	f000 001f 	and.w	r0, r0, #31
 8003158:	fa03 f000 	lsl.w	r0, r3, r0
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <HAL_NVIC_EnableIRQ+0x18>)
 800315e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100

08003168 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003168:	2800      	cmp	r0, #0
 800316a:	db0d      	blt.n	8003188 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316c:	0943      	lsrs	r3, r0, #5
 800316e:	2201      	movs	r2, #1
 8003170:	f000 001f 	and.w	r0, r0, #31
 8003174:	fa02 f000 	lsl.w	r0, r2, r0
 8003178:	3320      	adds	r3, #32
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_NVIC_DisableIRQ+0x24>)
 800317c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003184:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	3801      	subs	r0, #1
 8003192:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003196:	d20b      	bcs.n	80031b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003198:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	21f0      	movs	r1, #240	; 0xf0
 80031a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031aa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80031b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d05b      	beq.n	8003276 <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031be:	6801      	ldr	r1, [r0, #0]
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <HAL_DMA_Init+0xc4>)
 80031c2:	4299      	cmp	r1, r3
 80031c4:	f04f 0414 	mov.w	r4, #20
 80031c8:	d842      	bhi.n	8003250 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031ca:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <HAL_DMA_Init+0xc8>)
 80031cc:	440a      	add	r2, r1
 80031ce:	fbb2 f2f4 	udiv	r2, r2, r4
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031d6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 80031da:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031e2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80031e8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80031ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ec:	432b      	orrs	r3, r5
 80031ee:	6945      	ldr	r5, [r0, #20]
 80031f0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f2:	6985      	ldr	r5, [r0, #24]
 80031f4:	432b      	orrs	r3, r5
 80031f6:	69c5      	ldr	r5, [r0, #28]
 80031f8:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fa:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031fc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003204:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003206:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003208:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800320c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800320e:	d016      	beq.n	800323e <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003210:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 8003212:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003214:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003218:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800321a:	230f      	movs	r3, #15
 800321c:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800321e:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_DMA_Init+0xcc>)
 8003222:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003224:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8003228:	d11a      	bne.n	8003260 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800322a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 800322e:	4013      	ands	r3, r2
 8003230:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003234:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8003238:	431c      	orrs	r4, r3
 800323a:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003240:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003242:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003244:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003248:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800324c:	4618      	mov	r0, r3
}
 800324e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_DMA_Init+0xd0>)
 8003252:	440b      	add	r3, r1
 8003254:	fbb3 f3f4 	udiv	r3, r3, r4
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_DMA_Init+0xd4>)
 800325e:	e7bc      	b.n	80031da <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003260:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8003264:	400b      	ands	r3, r1
 8003266:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800326a:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 800326e:	431c      	orrs	r4, r3
 8003270:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 8003274:	e7e3      	b.n	800323e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003276:	2001      	movs	r0, #1
 8003278:	e7e9      	b.n	800324e <HAL_DMA_Init+0x96>
 800327a:	bf00      	nop
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	40020000 	.word	0x40020000
 8003288:	bffdfbf8 	.word	0xbffdfbf8
 800328c:	40020400 	.word	0x40020400

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003292:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003296:	2c01      	cmp	r4, #1
 8003298:	d037      	beq.n	800330a <HAL_DMA_Start_IT+0x7a>
 800329a:	2401      	movs	r4, #1
 800329c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032a0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80032a4:	2c01      	cmp	r4, #1
 80032a6:	b2e5      	uxtb	r5, r4
 80032a8:	f04f 0600 	mov.w	r6, #0
 80032ac:	f04f 0402 	mov.w	r4, #2
 80032b0:	d129      	bne.n	8003306 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032b2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032b6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80032ba:	6826      	ldr	r6, [r4, #0]
 80032bc:	f026 0601 	bic.w	r6, r6, #1
 80032c0:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c2:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 80032c6:	f007 071c 	and.w	r7, r7, #28
 80032ca:	40bd      	lsls	r5, r7
 80032cc:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d0:	6883      	ldr	r3, [r0, #8]
 80032d2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80032d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032d6:	bf0b      	itete	eq
 80032d8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032da:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032dc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032de:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80032e0:	b14b      	cbz	r3, 80032f6 <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2000      	movs	r0, #0
}
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f043 030a 	orr.w	r3, r3, #10
 8003304:	e7f0      	b.n	80032e8 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8003306:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 800330a:	2002      	movs	r0, #2
 800330c:	e7f2      	b.n	80032f4 <HAL_DMA_Start_IT+0x64>

0800330e <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003312:	2b02      	cmp	r3, #2
 8003314:	d006      	beq.n	8003324 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	2304      	movs	r3, #4
 8003318:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800331a:	2300      	movs	r3, #0
 800331c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003320:	2001      	movs	r0, #1
 8003322:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003324:	6803      	ldr	r3, [r0, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f022 020e 	bic.w	r2, r2, #14
 800332c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003336:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 800333a:	2201      	movs	r2, #1
 800333c:	f003 031c 	and.w	r3, r3, #28
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003346:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003348:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800334c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8003350:	4618      	mov	r0, r3
}
 8003352:	4770      	bx	lr

08003354 <HAL_DMA_Abort_IT>:
{
 8003354:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003356:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800335a:	2a02      	cmp	r2, #2
 800335c:	d003      	beq.n	8003366 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335e:	2204      	movs	r2, #4
 8003360:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003362:	2001      	movs	r0, #1
}
 8003364:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003366:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8003368:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	f021 010e 	bic.w	r1, r1, #14
 8003370:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003372:	6811      	ldr	r1, [r2, #0]
 8003374:	f021 0101 	bic.w	r1, r1, #1
 8003378:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800337a:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	f002 021c 	and.w	r2, r2, #28
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800338a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800338c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003390:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003394:	b113      	cbz	r3, 800339c <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003396:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003398:	4620      	mov	r0, r4
 800339a:	e7e3      	b.n	8003364 <HAL_DMA_Abort_IT+0x10>
 800339c:	4618      	mov	r0, r3
 800339e:	e7e1      	b.n	8003364 <HAL_DMA_Abort_IT+0x10>

080033a0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80033a4:	6803      	ldr	r3, [r0, #0]
{
 80033a6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033a8:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033ac:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80033ae:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033b0:	2404      	movs	r4, #4
 80033b2:	4094      	lsls	r4, r2
 80033b4:	4234      	tst	r4, r6
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x36>
 80033b8:	f015 0f04 	tst.w	r5, #4
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033c2:	bf5e      	ittt	pl
 80033c4:	681a      	ldrpl	r2, [r3, #0]
 80033c6:	f022 0204 	bicpl.w	r2, r2, #4
 80033ca:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033ce:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80033d0:	b373      	cbz	r3, 8003430 <HAL_DMA_IRQHandler+0x90>
}
 80033d2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80033d4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033d6:	2402      	movs	r4, #2
 80033d8:	4094      	lsls	r4, r2
 80033da:	4234      	tst	r4, r6
 80033dc:	d012      	beq.n	8003404 <HAL_DMA_IRQHandler+0x64>
 80033de:	f015 0f02 	tst.w	r5, #2
 80033e2:	d00f      	beq.n	8003404 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	0695      	lsls	r5, r2, #26
 80033e8:	d406      	bmi.n	80033f8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f022 020a 	bic.w	r2, r2, #10
 80033f0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80033f8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033fa:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80033fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003400:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003402:	e7e5      	b.n	80033d0 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003404:	2408      	movs	r4, #8
 8003406:	4094      	lsls	r4, r2
 8003408:	4234      	tst	r4, r6
 800340a:	d011      	beq.n	8003430 <HAL_DMA_IRQHandler+0x90>
 800340c:	072c      	lsls	r4, r5, #28
 800340e:	d50f      	bpl.n	8003430 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003410:	681c      	ldr	r4, [r3, #0]
 8003412:	f024 040e 	bic.w	r4, r4, #14
 8003416:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003418:	2301      	movs	r3, #1
 800341a:	fa03 f202 	lsl.w	r2, r3, r2
 800341e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003420:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003422:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003426:	2300      	movs	r3, #0
 8003428:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800342c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800342e:	e7cf      	b.n	80033d0 <HAL_DMA_IRQHandler+0x30>
}
 8003430:	bc70      	pop	{r4, r5, r6}
 8003432:	4770      	bx	lr

08003434 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <FLASH_Program_Fast+0x28>)
 8003436:	6953      	ldr	r3, [r2, #20]
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 800343c:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800343e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003448:	58cc      	ldr	r4, [r1, r3]
 800344a:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 800344c:	3304      	adds	r3, #4
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d1f9      	bne.n	8003448 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_FLASH_Unlock+0x1c>)
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003466:	bfbf      	itttt	lt
 8003468:	4a05      	ldrlt	r2, [pc, #20]	; (8003480 <HAL_FLASH_Unlock+0x20>)
 800346a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800346c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8003470:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003472:	bfba      	itte	lt
 8003474:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	0fc0      	lsrlt	r0, r0, #31
 8003478:	2000      	movge	r0, #0
}
 800347a:	4770      	bx	lr
 800347c:	40022000 	.word	0x40022000
 8003480:	45670123 	.word	0x45670123

08003484 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_FLASH_Lock+0x10>)
 8003486:	6953      	ldr	r3, [r2, #20]
 8003488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800348c:	6153      	str	r3, [r2, #20]
}
 800348e:	2000      	movs	r0, #0
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000

08003498 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8003498:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <HAL_FLASH_GetError+0x8>)
 800349a:	6858      	ldr	r0, [r3, #4]
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000001c 	.word	0x2000001c

080034a4 <FLASH_WaitForLastOperation>:
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7fe ff6c 	bl	8002384 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80034ac:	4c10      	ldr	r4, [pc, #64]	; (80034f0 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80034ae:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	03db      	lsls	r3, r3, #15
 80034b4:	d40a      	bmi.n	80034cc <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80034b6:	6920      	ldr	r0, [r4, #16]
 80034b8:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 80034ba:	4002      	ands	r2, r0
 80034bc:	d00f      	beq.n	80034de <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 80034be:	490e      	ldr	r1, [pc, #56]	; (80034f8 <FLASH_WaitForLastOperation+0x54>)
 80034c0:	684b      	ldr	r3, [r1, #4]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 80034c6:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80034c8:	6122      	str	r2, [r4, #16]
}
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80034cc:	1c6a      	adds	r2, r5, #1
 80034ce:	d0ef      	beq.n	80034b0 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80034d0:	f7fe ff58 	bl	8002384 <HAL_GetTick>
 80034d4:	1b80      	subs	r0, r0, r6
 80034d6:	42a8      	cmp	r0, r5
 80034d8:	d3ea      	bcc.n	80034b0 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80034da:	2003      	movs	r0, #3
 80034dc:	e7f5      	b.n	80034ca <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80034de:	6920      	ldr	r0, [r4, #16]
 80034e0:	f010 0001 	ands.w	r0, r0, #1
 80034e4:	d0f1      	beq.n	80034ca <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034e6:	2301      	movs	r3, #1
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	4610      	mov	r0, r2
 80034ec:	e7ed      	b.n	80034ca <FLASH_WaitForLastOperation+0x26>
 80034ee:	bf00      	nop
 80034f0:	40022000 	.word	0x40022000
 80034f4:	0002c3fa 	.word	0x0002c3fa
 80034f8:	2000001c 	.word	0x2000001c

080034fc <HAL_FLASH_Program>:
{
 80034fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8003500:	4c25      	ldr	r4, [pc, #148]	; (8003598 <HAL_FLASH_Program+0x9c>)
{
 8003502:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8003504:	7823      	ldrb	r3, [r4, #0]
 8003506:	2b01      	cmp	r3, #1
{
 8003508:	4606      	mov	r6, r0
 800350a:	460f      	mov	r7, r1
 800350c:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800350e:	d041      	beq.n	8003594 <HAL_FLASH_Program+0x98>
 8003510:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003512:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8003516:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003518:	f7ff ffc4 	bl	80034a4 <FLASH_WaitForLastOperation>
 800351c:	4605      	mov	r5, r0
  if(status == HAL_OK)
 800351e:	bb30      	cbnz	r0, 800356e <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003520:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003522:	481e      	ldr	r0, [pc, #120]	; (800359c <HAL_FLASH_Program+0xa0>)
 8003524:	6802      	ldr	r2, [r0, #0]
 8003526:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800352a:	bf17      	itett	ne
 800352c:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800352e:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003530:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8003534:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003536:	bf1c      	itt	ne
 8003538:	2302      	movne	r3, #2
 800353a:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800353c:	b9e6      	cbnz	r6, 8003578 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800353e:	6943      	ldr	r3, [r0, #20]
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6143      	str	r3, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003546:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800354a:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800354e:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003550:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003554:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003558:	f7ff ffa4 	bl	80034a4 <FLASH_WaitForLastOperation>
 800355c:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 800355e:	b126      	cbz	r6, 800356a <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_FLASH_Program+0xa0>)
 8003562:	6953      	ldr	r3, [r2, #20]
 8003564:	ea23 0606 	bic.w	r6, r3, r6
 8003568:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 800356a:	f000 f83d 	bl	80035e8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800356e:	2300      	movs	r3, #0
 8003570:	7023      	strb	r3, [r4, #0]
}
 8003572:	4628      	mov	r0, r5
 8003574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003578:	1e73      	subs	r3, r6, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d901      	bls.n	8003582 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800357e:	2600      	movs	r6, #0
 8003580:	e7e8      	b.n	8003554 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003582:	4641      	mov	r1, r8
 8003584:	4638      	mov	r0, r7
 8003586:	f7ff ff55 	bl	8003434 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800358a:	2e02      	cmp	r6, #2
 800358c:	d1f7      	bne.n	800357e <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800358e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8003592:	e7df      	b.n	8003554 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8003594:	2502      	movs	r5, #2
 8003596:	e7ec      	b.n	8003572 <HAL_FLASH_Program+0x76>
 8003598:	2000001c 	.word	0x2000001c
 800359c:	40022000 	.word	0x40022000

080035a0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <FLASH_MassErase+0x1c>)
 80035a2:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80035a6:	bf1e      	ittt	ne
 80035a8:	695a      	ldrne	r2, [r3, #20]
 80035aa:	f042 0204 	orrne.w	r2, r2, #4
 80035ae:	615a      	strne	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035b6:	615a      	str	r2, [r3, #20]
}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40022000 	.word	0x40022000

080035c0 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <FLASH_PageErase+0x24>)
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	00c0      	lsls	r0, r0, #3
 80035c6:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 80035ca:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80035ce:	4310      	orrs	r0, r2
 80035d0:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	f042 0202 	orr.w	r2, r2, #2
 80035d8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	4770      	bx	lr
 80035e4:	40022000 	.word	0x40022000

080035e8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80035e8:	4815      	ldr	r0, [pc, #84]	; (8003640 <FLASH_FlushCaches+0x58>)
 80035ea:	7f03      	ldrb	r3, [r0, #28]
 80035ec:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80035ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d110      	bne.n	8003618 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <FLASH_FlushCaches+0x5c>)
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80035fe:	6019      	str	r1, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003606:	6019      	str	r1, [r3, #0]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800360e:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003616:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003618:	1e93      	subs	r3, r2, #2
 800361a:	2b01      	cmp	r3, #1
 800361c:	d80c      	bhi.n	8003638 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <FLASH_FlushCaches+0x5c>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800362e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003638:	2300      	movs	r3, #0
 800363a:	7703      	strb	r3, [r0, #28]
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	2000001c 	.word	0x2000001c
 8003644:	40022000 	.word	0x40022000

08003648 <HAL_FLASHEx_Erase>:
{
 8003648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800364c:	4d31      	ldr	r5, [pc, #196]	; (8003714 <HAL_FLASHEx_Erase+0xcc>)
 800364e:	782b      	ldrb	r3, [r5, #0]
 8003650:	2b01      	cmp	r3, #1
{
 8003652:	4606      	mov	r6, r0
 8003654:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003656:	d05a      	beq.n	800370e <HAL_FLASHEx_Erase+0xc6>
 8003658:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800365a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800365e:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003660:	f7ff ff20 	bl	80034a4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003664:	4604      	mov	r4, r0
 8003666:	bb10      	cbnz	r0, 80036ae <HAL_FLASHEx_Erase+0x66>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_FLASHEx_Erase+0xd0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800366a:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003672:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003674:	d020      	beq.n	80036b8 <HAL_FLASHEx_Erase+0x70>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003676:	0551      	lsls	r1, r2, #21
 8003678:	d506      	bpl.n	8003688 <HAL_FLASHEx_Erase+0x40>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003682:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003684:	772b      	strb	r3, [r5, #28]
 8003686:	e000      	b.n	800368a <HAL_FLASHEx_Erase+0x42>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003688:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800368a:	6833      	ldr	r3, [r6, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11d      	bne.n	80036cc <HAL_FLASHEx_Erase+0x84>
      FLASH_MassErase(pEraseInit->Banks);
 8003690:	6870      	ldr	r0, [r6, #4]
 8003692:	f7ff ff85 	bl	80035a0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003696:	f24c 3050 	movw	r0, #50000	; 0xc350
 800369a:	f7ff ff03 	bl	80034a4 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_FLASHEx_Erase+0xd0>)
 80036a0:	6953      	ldr	r3, [r2, #20]
 80036a2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036a6:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80036a8:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80036aa:	f7ff ff9d 	bl	80035e8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80036ae:	2300      	movs	r3, #0
 80036b0:	702b      	strb	r3, [r5, #0]
}
 80036b2:	4620      	mov	r0, r4
 80036b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036b8:	0552      	lsls	r2, r2, #21
 80036ba:	d505      	bpl.n	80036c8 <HAL_FLASHEx_Erase+0x80>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80036c4:	2302      	movs	r3, #2
 80036c6:	e7dd      	b.n	8003684 <HAL_FLASHEx_Erase+0x3c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80036c8:	7728      	strb	r0, [r5, #28]
 80036ca:	e7de      	b.n	800368a <HAL_FLASHEx_Erase+0x42>
      *PageError = 0xFFFFFFFFU;
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80036d4:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80036d6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003718 <HAL_FLASHEx_Erase+0xd0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80036da:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	42bb      	cmp	r3, r7
 80036e2:	d9e2      	bls.n	80036aa <HAL_FLASHEx_Erase+0x62>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80036e4:	6871      	ldr	r1, [r6, #4]
 80036e6:	4638      	mov	r0, r7
 80036e8:	f7ff ff6a 	bl	80035c0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036f0:	f7ff fed8 	bl	80034a4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80036f4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80036f8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80036fc:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8003700:	b118      	cbz	r0, 800370a <HAL_FLASHEx_Erase+0xc2>
          *PageError = page_index;
 8003702:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003706:	4604      	mov	r4, r0
          break;
 8003708:	e7cf      	b.n	80036aa <HAL_FLASHEx_Erase+0x62>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800370a:	3701      	adds	r7, #1
 800370c:	e7e5      	b.n	80036da <HAL_FLASHEx_Erase+0x92>
  __HAL_LOCK(&pFlash);
 800370e:	2402      	movs	r4, #2
 8003710:	e7cf      	b.n	80036b2 <HAL_FLASHEx_Erase+0x6a>
 8003712:	bf00      	nop
 8003714:	2000001c 	.word	0x2000001c
 8003718:	40022000 	.word	0x40022000

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003720:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003894 <HAL_GPIO_Init+0x178>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003724:	4c59      	ldr	r4, [pc, #356]	; (800388c <HAL_GPIO_Init+0x170>)
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003728:	680a      	ldr	r2, [r1, #0]
 800372a:	fa32 f503 	lsrs.w	r5, r2, r3
 800372e:	d102      	bne.n	8003736 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003730:	b003      	add	sp, #12
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003736:	2501      	movs	r5, #1
 8003738:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 800373c:	ea18 0202 	ands.w	r2, r8, r2
 8003740:	f000 809c 	beq.w	800387c <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003744:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003746:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003748:	f006 0503 	and.w	r5, r6, #3
 800374c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003750:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003754:	1e6f      	subs	r7, r5, #1
 8003756:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003758:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	d834      	bhi.n	80037c8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800375e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003760:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003764:	68cf      	ldr	r7, [r1, #12]
 8003766:	fa07 f70e 	lsl.w	r7, r7, lr
 800376a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800376e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003770:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003776:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800377a:	409f      	lsls	r7, r3
 800377c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003780:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003782:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003784:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	688f      	ldr	r7, [r1, #8]
 800378a:	fa07 f70e 	lsl.w	r7, r7, lr
 800378e:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003794:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	d119      	bne.n	80037cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003798:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800379c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a0:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80037a4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80037ac:	f04f 0b0f 	mov.w	fp, #15
 80037b0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80037b4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037b8:	690f      	ldr	r7, [r1, #16]
 80037ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80037be:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80037c2:	f8c8 7020 	str.w	r7, [r8, #32]
 80037c6:	e001      	b.n	80037cc <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	2d03      	cmp	r5, #3
 80037ca:	d1da      	bne.n	8003782 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80037cc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ce:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037d2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037d6:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037d8:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80037dc:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037de:	d04d      	beq.n	800387c <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e0:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80037e4:	f045 0501 	orr.w	r5, r5, #1
 80037e8:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80037ec:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80037f0:	f023 0703 	bic.w	r7, r3, #3
 80037f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80037f8:	f005 0501 	and.w	r5, r5, #1
 80037fc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003800:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003802:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003808:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800380e:	f04f 0e0f 	mov.w	lr, #15
 8003812:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003816:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800381e:	d02f      	beq.n	8003880 <HAL_GPIO_Init+0x164>
 8003820:	4d1b      	ldr	r5, [pc, #108]	; (8003890 <HAL_GPIO_Init+0x174>)
 8003822:	42a8      	cmp	r0, r5
 8003824:	d02e      	beq.n	8003884 <HAL_GPIO_Init+0x168>
 8003826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800382a:	42a8      	cmp	r0, r5
 800382c:	d02c      	beq.n	8003888 <HAL_GPIO_Init+0x16c>
 800382e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003832:	42a8      	cmp	r0, r5
 8003834:	bf0c      	ite	eq
 8003836:	2503      	moveq	r5, #3
 8003838:	2507      	movne	r5, #7
 800383a:	fa05 f50c 	lsl.w	r5, r5, ip
 800383e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003842:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8003844:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003846:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003848:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800384c:	bf0c      	ite	eq
 800384e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003850:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8003852:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003854:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003856:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800385a:	bf0c      	ite	eq
 800385c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800385e:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8003860:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8003862:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003864:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003868:	bf0c      	ite	eq
 800386a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800386c:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 800386e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8003870:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003872:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003874:	bf54      	ite	pl
 8003876:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003878:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800387a:	6025      	str	r5, [r4, #0]
    position++;
 800387c:	3301      	adds	r3, #1
 800387e:	e753      	b.n	8003728 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003880:	2500      	movs	r5, #0
 8003882:	e7da      	b.n	800383a <HAL_GPIO_Init+0x11e>
 8003884:	2501      	movs	r5, #1
 8003886:	e7d8      	b.n	800383a <HAL_GPIO_Init+0x11e>
 8003888:	2502      	movs	r5, #2
 800388a:	e7d6      	b.n	800383a <HAL_GPIO_Init+0x11e>
 800388c:	40010400 	.word	0x40010400
 8003890:	48000400 	.word	0x48000400
 8003894:	40021000 	.word	0x40021000

08003898 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003898:	6903      	ldr	r3, [r0, #16]
 800389a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800389c:	bf14      	ite	ne
 800389e:	2001      	movne	r0, #1
 80038a0:	2000      	moveq	r0, #0
 80038a2:	4770      	bx	lr

080038a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	b10a      	cbz	r2, 80038aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a6:	6181      	str	r1, [r0, #24]
 80038a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b0:	4a02      	ldr	r2, [pc, #8]	; (80038bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	4770      	bx	lr
 80038bc:	40007000 	.word	0x40007000

080038c0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <HAL_PWREx_GetVoltageRange+0xc>)
 80038c2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80038c4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000

080038d0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038dc:	d11d      	bne.n	800391a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e2:	d101      	bne.n	80038e8 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e4:	2000      	movs	r0, #0
 80038e6:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2132      	movs	r1, #50	; 0x32
 80038fa:	434b      	muls	r3, r1
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003904:	6951      	ldr	r1, [r2, #20]
 8003906:	0549      	lsls	r1, r1, #21
 8003908:	d500      	bpl.n	800390c <HAL_PWREx_ControlVoltageScaling+0x3c>
 800390a:	b923      	cbnz	r3, 8003916 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390c:	6953      	ldr	r3, [r2, #20]
 800390e:	055b      	lsls	r3, r3, #21
 8003910:	d5e8      	bpl.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8003912:	2003      	movs	r0, #3
}
 8003914:	4770      	bx	lr
        wait_loop_index--;
 8003916:	3b01      	subs	r3, #1
 8003918:	e7f4      	b.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800391e:	bf1f      	itttt	ne
 8003920:	6813      	ldrne	r3, [r2, #0]
 8003922:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8003926:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800392a:	6013      	strne	r3, [r2, #0]
 800392c:	e7da      	b.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x14>
 800392e:	bf00      	nop
 8003930:	40007000 	.word	0x40007000
 8003934:	20000010 	.word	0x20000010
 8003938:	000f4240 	.word	0x000f4240

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800393e:	4d1e      	ldr	r5, [pc, #120]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003940:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003942:	00da      	lsls	r2, r3, #3
{
 8003944:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003946:	d518      	bpl.n	800397a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003948:	f7ff ffba 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003950:	d123      	bne.n	800399a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003952:	2c80      	cmp	r4, #128	; 0x80
 8003954:	d929      	bls.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003956:	2ca0      	cmp	r4, #160	; 0xa0
 8003958:	bf8c      	ite	hi
 800395a:	2002      	movhi	r0, #2
 800395c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	4303      	orrs	r3, r0
 8003968:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003970:	1a18      	subs	r0, r3, r0
 8003972:	bf18      	it	ne
 8003974:	2001      	movne	r0, #1
 8003976:	b003      	add	sp, #12
 8003978:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	65ab      	str	r3, [r5, #88]	; 0x58
 8003982:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800398c:	f7ff ff98 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	65ab      	str	r3, [r5, #88]	; 0x58
 8003998:	e7d8      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800399a:	2c80      	cmp	r4, #128	; 0x80
 800399c:	d807      	bhi.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800399e:	d008      	beq.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80039a0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80039a4:	4258      	negs	r0, r3
 80039a6:	4158      	adcs	r0, r3
 80039a8:	e7d9      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039aa:	2000      	movs	r0, #0
 80039ac:	e7d7      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80039ae:	2003      	movs	r0, #3
 80039b0:	e7d5      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b2:	2002      	movs	r0, #2
 80039b4:	e7d3      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40022000 	.word	0x40022000

080039c0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x8c>)
 80039c2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c6:	f012 020c 	ands.w	r2, r2, #12
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x18>
 80039cc:	2a0c      	cmp	r2, #12
 80039ce:	d115      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039d4:	2901      	cmp	r1, #1
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80039da:	481d      	ldr	r0, [pc, #116]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039dc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039de:	bf55      	itete	pl
 80039e0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039e4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ea:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80039ee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f2:	b34a      	cbz	r2, 8003a48 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039f4:	2a0c      	cmp	r2, #12
 80039f6:	d009      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x4c>
 80039f8:	2000      	movs	r0, #0
  return sysclockfreq;
 80039fa:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039fc:	2a04      	cmp	r2, #4
 80039fe:	d022      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a00:	2a08      	cmp	r2, #8
 8003a02:	4814      	ldr	r0, [pc, #80]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a04:	bf18      	it	ne
 8003a06:	2000      	movne	r0, #0
 8003a08:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a0a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003a12:	2a02      	cmp	r2, #2
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x82>
 8003a16:	490f      	ldr	r1, [pc, #60]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a18:	2a03      	cmp	r2, #3
 8003a1a:	bf08      	it	eq
 8003a1c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a1e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003a26:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a28:	68d8      	ldr	r0, [r3, #12]
 8003a2a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a2e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a32:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a34:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a36:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a38:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003a3c:	fbb2 f0f0 	udiv	r0, r2, r0
 8003a40:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a44:	e7eb      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003a46:	4804      	ldr	r0, [pc, #16]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800b2c4 	.word	0x0800b2c4
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	00f42400 	.word	0x00f42400

08003a5c <HAL_RCC_OscConfig>:
{
 8003a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003a60:	4605      	mov	r5, r0
 8003a62:	b918      	cbnz	r0, 8003a6c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003a64:	2001      	movs	r0, #1
}
 8003a66:	b003      	add	sp, #12
 8003a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6c:	4c94      	ldr	r4, [pc, #592]	; (8003cc0 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a6e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a70:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a72:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a74:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a76:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a7e:	d53d      	bpl.n	8003afc <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a80:	b11e      	cbz	r6, 8003a8a <HAL_RCC_OscConfig+0x2e>
 8003a82:	2e0c      	cmp	r6, #12
 8003a84:	d16a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x100>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a86:	2f01      	cmp	r7, #1
 8003a88:	d168      	bne.n	8003b5c <HAL_RCC_OscConfig+0x100>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	0798      	lsls	r0, r3, #30
 8003a8e:	d502      	bpl.n	8003a96 <HAL_RCC_OscConfig+0x3a>
 8003a90:	69eb      	ldr	r3, [r5, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0e6      	beq.n	8003a64 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a9a:	0719      	lsls	r1, r3, #28
 8003a9c:	bf56      	itet	pl
 8003a9e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003aa2:	6823      	ldrmi	r3, [r4, #0]
 8003aa4:	091b      	lsrpl	r3, r3, #4
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aaa:	4298      	cmp	r0, r3
 8003aac:	d93f      	bls.n	8003b2e <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aae:	f7ff ff45 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1d6      	bne.n	8003a64 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	6a2a      	ldr	r2, [r5, #32]
 8003ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ad6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad8:	f7ff ff72 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 8003adc:	68a3      	ldr	r3, [r4, #8]
 8003ade:	4a79      	ldr	r2, [pc, #484]	; (8003cc4 <HAL_RCC_OscConfig+0x268>)
 8003ae0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	40d8      	lsrs	r0, r3
 8003aec:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003af0:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x270>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	f7fe fc04 	bl	8002300 <HAL_InitTick>
        if(status != HAL_OK)
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1b4      	bne.n	8003a66 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	07d8      	lsls	r0, r3, #31
 8003b00:	d463      	bmi.n	8003bca <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	0799      	lsls	r1, r3, #30
 8003b06:	f100 80a2 	bmi.w	8003c4e <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	0718      	lsls	r0, r3, #28
 8003b0e:	f100 80df 	bmi.w	8003cd0 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	0759      	lsls	r1, r3, #29
 8003b16:	f100 812f 	bmi.w	8003d78 <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	0699      	lsls	r1, r3, #26
 8003b1e:	f100 81ab 	bmi.w	8003e78 <HAL_RCC_OscConfig+0x41c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 81d1 	bne.w	8003ecc <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	e79b      	b.n	8003a66 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3c:	4303      	orrs	r3, r0
 8003b3e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	6a2a      	ldr	r2, [r5, #32]
 8003b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b4c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	d1c2      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b52:	f7ff fef3 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0be      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x7c>
 8003b5a:	e783      	b.n	8003a64 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b5c:	69eb      	ldr	r3, [r5, #28]
 8003b5e:	b31b      	cbz	r3, 8003ba8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b68:	f7fe fc0c 	bl	8002384 <HAL_GetTick>
 8003b6c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	079a      	lsls	r2, r3, #30
 8003b72:	d511      	bpl.n	8003b98 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f043 0308 	orr.w	r3, r3, #8
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b84:	4313      	orrs	r3, r2
 8003b86:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	6a2a      	ldr	r2, [r5, #32]
 8003b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b94:	6063      	str	r3, [r4, #4]
 8003b96:	e7b1      	b.n	8003afc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b98:	f7fe fbf4 	bl	8002384 <HAL_GetTick>
 8003b9c:	eba0 0008 	sub.w	r0, r0, r8
 8003ba0:	2802      	cmp	r0, #2
 8003ba2:	d9e4      	bls.n	8003b6e <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8003ba4:	2003      	movs	r0, #3
 8003ba6:	e75e      	b.n	8003a66 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fbe8 	bl	8002384 <HAL_GetTick>
 8003bb4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	079b      	lsls	r3, r3, #30
 8003bba:	d59f      	bpl.n	8003afc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fbe2 	bl	8002384 <HAL_GetTick>
 8003bc0:	eba0 0008 	sub.w	r0, r0, r8
 8003bc4:	2802      	cmp	r0, #2
 8003bc6:	d9f6      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x15a>
 8003bc8:	e7ec      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bca:	2e08      	cmp	r6, #8
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x17a>
 8003bce:	2e0c      	cmp	r6, #12
 8003bd0:	d108      	bne.n	8003be4 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bd2:	2f03      	cmp	r7, #3
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	039a      	lsls	r2, r3, #14
 8003bda:	d592      	bpl.n	8003b02 <HAL_RCC_OscConfig+0xa6>
 8003bdc:	686b      	ldr	r3, [r5, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d18f      	bne.n	8003b02 <HAL_RCC_OscConfig+0xa6>
 8003be2:	e73f      	b.n	8003a64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	686b      	ldr	r3, [r5, #4]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d110      	bne.n	8003c0e <HAL_RCC_OscConfig+0x1b2>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fbc6 	bl	8002384 <HAL_GetTick>
 8003bf8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	039b      	lsls	r3, r3, #14
 8003bfe:	d480      	bmi.n	8003b02 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fbc0 	bl	8002384 <HAL_GetTick>
 8003c04:	eba0 0008 	sub.w	r0, r0, r8
 8003c08:	2864      	cmp	r0, #100	; 0x64
 8003c0a:	d9f6      	bls.n	8003bfa <HAL_RCC_OscConfig+0x19e>
 8003c0c:	e7ca      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c12:	d104      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1c2>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	e7e6      	b.n	8003bec <HAL_RCC_OscConfig+0x190>
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8003c32:	f7fe fba7 	bl	8002384 <HAL_GetTick>
 8003c36:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	0398      	lsls	r0, r3, #14
 8003c3c:	f57f af61 	bpl.w	8003b02 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe fba0 	bl	8002384 <HAL_GetTick>
 8003c44:	eba0 0008 	sub.w	r0, r0, r8
 8003c48:	2864      	cmp	r0, #100	; 0x64
 8003c4a:	d9f5      	bls.n	8003c38 <HAL_RCC_OscConfig+0x1dc>
 8003c4c:	e7aa      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c4e:	2e04      	cmp	r6, #4
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1fe>
 8003c52:	2e0c      	cmp	r6, #12
 8003c54:	d110      	bne.n	8003c78 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c56:	2f02      	cmp	r7, #2
 8003c58:	d10e      	bne.n	8003c78 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	0559      	lsls	r1, r3, #21
 8003c5e:	d503      	bpl.n	8003c68 <HAL_RCC_OscConfig+0x20c>
 8003c60:	68eb      	ldr	r3, [r5, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f43f aefe 	beq.w	8003a64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	692a      	ldr	r2, [r5, #16]
 8003c6c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	e748      	b.n	8003b0a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c78:	68eb      	ldr	r3, [r5, #12]
 8003c7a:	b17b      	cbz	r3, 8003c9c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c84:	f7fe fb7e 	bl	8002384 <HAL_GetTick>
 8003c88:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	055a      	lsls	r2, r3, #21
 8003c8e:	d4eb      	bmi.n	8003c68 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fe fb78 	bl	8002384 <HAL_GetTick>
 8003c94:	1bc0      	subs	r0, r0, r7
 8003c96:	2802      	cmp	r0, #2
 8003c98:	d9f7      	bls.n	8003c8a <HAL_RCC_OscConfig+0x22e>
 8003c9a:	e783      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fb6e 	bl	8002384 <HAL_GetTick>
 8003ca8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	055b      	lsls	r3, r3, #21
 8003cae:	f57f af2c 	bpl.w	8003b0a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fb67 	bl	8002384 <HAL_GetTick>
 8003cb6:	1bc0      	subs	r0, r0, r7
 8003cb8:	2802      	cmp	r0, #2
 8003cba:	d9f6      	bls.n	8003caa <HAL_RCC_OscConfig+0x24e>
 8003cbc:	e772      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800b2ab 	.word	0x0800b2ab
 8003cc8:	20000010 	.word	0x20000010
 8003ccc:	20000018 	.word	0x20000018
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd0:	696b      	ldr	r3, [r5, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d03c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2f4>
      uint32_t csr_temp = RCC->CSR;
 8003cd6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003cda:	69a9      	ldr	r1, [r5, #24]
 8003cdc:	f003 0210 	and.w	r2, r3, #16
 8003ce0:	4291      	cmp	r1, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2a6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	2a02      	cmp	r2, #2
 8003cea:	f43f aebb 	beq.w	8003a64 <HAL_RCC_OscConfig+0x8>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003cee:	07da      	lsls	r2, r3, #31
 8003cf0:	d41b      	bmi.n	8003d2a <HAL_RCC_OscConfig+0x2ce>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003cf2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003cf6:	69aa      	ldr	r2, [r5, #24]
 8003cf8:	f023 0310 	bic.w	r3, r3, #16
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003d02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fb39 	bl	8002384 <HAL_GetTick>
 8003d12:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d18:	0798      	lsls	r0, r3, #30
 8003d1a:	f53f aefa 	bmi.w	8003b12 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fb31 	bl	8002384 <HAL_GetTick>
 8003d22:	1bc0      	subs	r0, r0, r7
 8003d24:	2811      	cmp	r0, #17
 8003d26:	d9f5      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2b8>
 8003d28:	e73c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
          __HAL_RCC_LSI_DISABLE();
 8003d2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003d36:	f7fe fb25 	bl	8002384 <HAL_GetTick>
 8003d3a:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d40:	079b      	lsls	r3, r3, #30
 8003d42:	d5d6      	bpl.n	8003cf2 <HAL_RCC_OscConfig+0x296>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fe fb1e 	bl	8002384 <HAL_GetTick>
 8003d48:	1bc0      	subs	r0, r0, r7
 8003d4a:	2811      	cmp	r0, #17
 8003d4c:	d9f6      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2e0>
 8003d4e:	e729      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8003d50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb12 	bl	8002384 <HAL_GetTick>
 8003d60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d66:	0799      	lsls	r1, r3, #30
 8003d68:	f57f aed3 	bpl.w	8003b12 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fb0a 	bl	8002384 <HAL_GetTick>
 8003d70:	1bc0      	subs	r0, r0, r7
 8003d72:	2811      	cmp	r0, #17
 8003d74:	d9f5      	bls.n	8003d62 <HAL_RCC_OscConfig+0x306>
 8003d76:	e715      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d7a:	00da      	lsls	r2, r3, #3
 8003d7c:	d430      	bmi.n	8003de0 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d90:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8004004 <HAL_RCC_OscConfig+0x5a8>
 8003d96:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	d522      	bpl.n	8003de4 <HAL_RCC_OscConfig+0x388>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d9e:	68aa      	ldr	r2, [r5, #8]
 8003da0:	07d0      	lsls	r0, r2, #31
 8003da2:	d433      	bmi.n	8003e0c <HAL_RCC_OscConfig+0x3b0>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003da4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003db0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	d13c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3de>
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fae0 	bl	8002384 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003dc8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003dce:	0798      	lsls	r0, r3, #30
 8003dd0:	d44b      	bmi.n	8003e6a <HAL_RCC_OscConfig+0x40e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003dd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003dde:	e035      	b.n	8003e4c <HAL_RCC_OscConfig+0x3f0>
    FlagStatus       pwrclkchanged = RESET;
 8003de0:	2700      	movs	r7, #0
 8003de2:	e7d6      	b.n	8003d92 <HAL_RCC_OscConfig+0x336>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de4:	f8d8 3000 	ldr.w	r3, [r8]
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	f8c8 3000 	str.w	r3, [r8]
      tickstart = HAL_GetTick();
 8003df0:	f7fe fac8 	bl	8002384 <HAL_GetTick>
 8003df4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfa:	05d9      	lsls	r1, r3, #23
 8003dfc:	d4cf      	bmi.n	8003d9e <HAL_RCC_OscConfig+0x342>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfe:	f7fe fac1 	bl	8002384 <HAL_GetTick>
 8003e02:	eba0 0009 	sub.w	r0, r0, r9
 8003e06:	2802      	cmp	r0, #2
 8003e08:	d9f5      	bls.n	8003df6 <HAL_RCC_OscConfig+0x39a>
 8003e0a:	e6cb      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003e0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003e10:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8003e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e22:	0752      	lsls	r2, r2, #29
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e24:	bf42      	ittt	mi
 8003e26:	f043 0304 	orrmi.w	r3, r3, #4
 8003e2a:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e2e:	f8d4 3090 	ldrmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003e3a:	f7fe faa3 	bl	8002384 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003e42:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003e48:	079b      	lsls	r3, r3, #30
 8003e4a:	d507      	bpl.n	8003e5c <HAL_RCC_OscConfig+0x400>
    if(pwrclkchanged == SET)
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	f43f ae64 	beq.w	8003b1a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e58:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e5a:	e65e      	b.n	8003b1a <HAL_RCC_OscConfig+0xbe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fa92 	bl	8002384 <HAL_GetTick>
 8003e60:	eba0 0008 	sub.w	r0, r0, r8
 8003e64:	4548      	cmp	r0, r9
 8003e66:	d9ed      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3e8>
 8003e68:	e69c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fa8b 	bl	8002384 <HAL_GetTick>
 8003e6e:	eba0 0008 	sub.w	r0, r0, r8
 8003e72:	4548      	cmp	r0, r9
 8003e74:	d9a9      	bls.n	8003dca <HAL_RCC_OscConfig+0x36e>
 8003e76:	e695      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e78:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e7a:	b19b      	cbz	r3, 8003ea4 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI48_ENABLE();
 8003e7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003e88:	f7fe fa7c 	bl	8002384 <HAL_GetTick>
 8003e8c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003e92:	079a      	lsls	r2, r3, #30
 8003e94:	f53f ae45 	bmi.w	8003b22 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e98:	f7fe fa74 	bl	8002384 <HAL_GetTick>
 8003e9c:	1bc0      	subs	r0, r0, r7
 8003e9e:	2802      	cmp	r0, #2
 8003ea0:	d9f5      	bls.n	8003e8e <HAL_RCC_OscConfig+0x432>
 8003ea2:	e67f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8003ea4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fa68 	bl	8002384 <HAL_GetTick>
 8003eb4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003eba:	079b      	lsls	r3, r3, #30
 8003ebc:	f57f ae31 	bpl.w	8003b22 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec0:	f7fe fa60 	bl	8002384 <HAL_GetTick>
 8003ec4:	1bc0      	subs	r0, r0, r7
 8003ec6:	2802      	cmp	r0, #2
 8003ec8:	d9f5      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x45a>
 8003eca:	e66b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d17a      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x56a>
      pll_config = RCC->PLLCFGR;
 8003ed0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003ed4:	f003 0103 	and.w	r1, r3, #3
 8003ed8:	4291      	cmp	r1, r2
 8003eda:	d11c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003edc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003ede:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ee2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003ee8:	d115      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003eec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003ef4:	d10f      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003ef8:	0852      	lsrs	r2, r2, #1
 8003efa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003efe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f00:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003f08:	0852      	lsrs	r2, r2, #1
 8003f0a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003f0e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f10:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003f14:	d03e      	beq.n	8003f94 <HAL_RCC_OscConfig+0x538>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f16:	2e0c      	cmp	r6, #12
 8003f18:	f43f ada4 	beq.w	8003a64 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003f24:	f7fe fa2e 	bl	8002384 <HAL_GetTick>
 8003f28:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	0198      	lsls	r0, r3, #6
 8003f2e:	d42b      	bmi.n	8003f88 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f30:	68e2      	ldr	r2, [r4, #12]
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <HAL_RCC_OscConfig+0x5a4>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003f3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f40:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003f42:	3a01      	subs	r2, #1
 8003f44:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003f48:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003f4a:	0852      	lsrs	r2, r2, #1
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003f52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003f54:	0852      	lsrs	r2, r2, #1
 8003f56:	3a01      	subs	r2, #1
 8003f58:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003f5c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f64:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f66:	68e3      	ldr	r3, [r4, #12]
 8003f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003f6e:	f7fe fa09 	bl	8002384 <HAL_GetTick>
 8003f72:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	0199      	lsls	r1, r3, #6
 8003f78:	f53f add7 	bmi.w	8003b2a <HAL_RCC_OscConfig+0xce>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fa02 	bl	8002384 <HAL_GetTick>
 8003f80:	1b40      	subs	r0, r0, r5
 8003f82:	2802      	cmp	r0, #2
 8003f84:	d9f6      	bls.n	8003f74 <HAL_RCC_OscConfig+0x518>
 8003f86:	e60d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f9fc 	bl	8002384 <HAL_GetTick>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	2802      	cmp	r0, #2
 8003f90:	d9cb      	bls.n	8003f2a <HAL_RCC_OscConfig+0x4ce>
 8003f92:	e607      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	f53f adc7 	bmi.w	8003b2a <HAL_RCC_OscConfig+0xce>
          __HAL_RCC_PLL_ENABLE();
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa4:	68e3      	ldr	r3, [r4, #12]
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003faa:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003fac:	f7fe f9ea 	bl	8002384 <HAL_GetTick>
 8003fb0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	f53f adb8 	bmi.w	8003b2a <HAL_RCC_OscConfig+0xce>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe f9e3 	bl	8002384 <HAL_GetTick>
 8003fbe:	1b40      	subs	r0, r0, r5
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d9f6      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x556>
 8003fc4:	e5ee      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc6:	2e0c      	cmp	r6, #12
 8003fc8:	f43f ad4c 	beq.w	8003a64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f9d6 	bl	8002384 <HAL_GetTick>
 8003fd8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x596>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003fe2:	68e2      	ldr	r2, [r4, #12]
 8003fe4:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8003fe8:	f022 0203 	bic.w	r2, r2, #3
 8003fec:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003fee:	4618      	mov	r0, r3
 8003ff0:	e539      	b.n	8003a66 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fe f9c7 	bl	8002384 <HAL_GetTick>
 8003ff6:	1b40      	subs	r0, r0, r5
 8003ff8:	2802      	cmp	r0, #2
 8003ffa:	d9ee      	bls.n	8003fda <HAL_RCC_OscConfig+0x57e>
 8003ffc:	e5d2      	b.n	8003ba4 <HAL_RCC_OscConfig+0x148>
 8003ffe:	bf00      	nop
 8004000:	f99f808c 	.word	0xf99f808c
 8004004:	40007000 	.word	0x40007000

08004008 <HAL_RCC_ClockConfig>:
{
 8004008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800400e:	4604      	mov	r4, r0
 8004010:	b910      	cbnz	r0, 8004018 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004012:	2001      	movs	r0, #1
}
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4a4b      	ldr	r2, [pc, #300]	; (8004148 <HAL_RCC_ClockConfig+0x140>)
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	428b      	cmp	r3, r1
 8004022:	d32c      	bcc.n	800407e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	0786      	lsls	r6, r0, #30
 8004028:	d434      	bmi.n	8004094 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402a:	07c1      	lsls	r1, r0, #31
 800402c:	d43f      	bmi.n	80040ae <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	078a      	lsls	r2, r1, #30
 8004032:	d468      	bmi.n	8004106 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4a44      	ldr	r2, [pc, #272]	; (8004148 <HAL_RCC_ClockConfig+0x140>)
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	42ab      	cmp	r3, r5
 800403e:	d86f      	bhi.n	8004120 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	f011 0f04 	tst.w	r1, #4
 8004044:	4d41      	ldr	r5, [pc, #260]	; (800414c <HAL_RCC_ClockConfig+0x144>)
 8004046:	d177      	bne.n	8004138 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	070b      	lsls	r3, r1, #28
 800404a:	d506      	bpl.n	800405a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404c:	68ab      	ldr	r3, [r5, #8]
 800404e:	6922      	ldr	r2, [r4, #16]
 8004050:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004054:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004058:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800405a:	f7ff fcb1 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800405e:	68ab      	ldr	r3, [r5, #8]
 8004060:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <HAL_RCC_ClockConfig+0x148>)
 8004062:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	40d8      	lsrs	r0, r3
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_RCC_ClockConfig+0x14c>)
 8004074:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004076:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_RCC_ClockConfig+0x150>)
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	f7fe b941 	b.w	8002300 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	430b      	orrs	r3, r1
 8004086:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004088:	6813      	ldr	r3, [r2, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	428b      	cmp	r3, r1
 8004090:	d1bf      	bne.n	8004012 <HAL_RCC_ClockConfig+0xa>
 8004092:	e7c7      	b.n	8004024 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004094:	4a2d      	ldr	r2, [pc, #180]	; (800414c <HAL_RCC_ClockConfig+0x144>)
 8004096:	68a6      	ldr	r6, [r4, #8]
 8004098:	6891      	ldr	r1, [r2, #8]
 800409a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800409e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	bf81      	itttt	hi
 80040a2:	6893      	ldrhi	r3, [r2, #8]
 80040a4:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80040a8:	4333      	orrhi	r3, r6
 80040aa:	6093      	strhi	r3, [r2, #8]
 80040ac:	e7bd      	b.n	800402a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	6862      	ldr	r2, [r4, #4]
 80040b0:	4e26      	ldr	r6, [pc, #152]	; (800414c <HAL_RCC_ClockConfig+0x144>)
 80040b2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	d11a      	bne.n	80040ee <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040bc:	d0a9      	beq.n	8004012 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040be:	68b3      	ldr	r3, [r6, #8]
 80040c0:	f023 0303 	bic.w	r3, r3, #3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80040c8:	f7fe f95c 	bl	8002384 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80040d0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	68b3      	ldr	r3, [r6, #8]
 80040d4:	6862      	ldr	r2, [r4, #4]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80040de:	d0a6      	beq.n	800402e <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fe f950 	bl	8002384 <HAL_GetTick>
 80040e4:	1bc0      	subs	r0, r0, r7
 80040e6:	4540      	cmp	r0, r8
 80040e8:	d9f3      	bls.n	80040d2 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80040ea:	2003      	movs	r0, #3
 80040ec:	e792      	b.n	8004014 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	2a02      	cmp	r2, #2
 80040f0:	d102      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040f6:	e7e1      	b.n	80040bc <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040f8:	b912      	cbnz	r2, 8004100 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040fa:	f013 0f02 	tst.w	r3, #2
 80040fe:	e7dd      	b.n	80040bc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004100:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004104:	e7da      	b.n	80040bc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <HAL_RCC_ClockConfig+0x144>)
 8004108:	68a6      	ldr	r6, [r4, #8]
 800410a:	6890      	ldr	r0, [r2, #8]
 800410c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004110:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004112:	bf3f      	itttt	cc
 8004114:	6893      	ldrcc	r3, [r2, #8]
 8004116:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800411a:	4333      	orrcc	r3, r6
 800411c:	6093      	strcc	r3, [r2, #8]
 800411e:	e789      	b.n	8004034 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	432b      	orrs	r3, r5
 8004128:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	42ab      	cmp	r3, r5
 8004132:	f47f af6e 	bne.w	8004012 <HAL_RCC_ClockConfig+0xa>
 8004136:	e783      	b.n	8004040 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	68ab      	ldr	r3, [r5, #8]
 800413a:	68e2      	ldr	r2, [r4, #12]
 800413c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004140:	4313      	orrs	r3, r2
 8004142:	60ab      	str	r3, [r5, #8]
 8004144:	e780      	b.n	8004048 <HAL_RCC_ClockConfig+0x40>
 8004146:	bf00      	nop
 8004148:	40022000 	.word	0x40022000
 800414c:	40021000 	.word	0x40021000
 8004150:	0800b2ab 	.word	0x0800b2ab
 8004154:	20000010 	.word	0x20000010
 8004158:	20000018 	.word	0x20000018

0800415c <HAL_RCC_GetHCLKFreq>:
}
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <HAL_RCC_GetHCLKFreq+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000010 	.word	0x20000010

08004168 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x18>)
 800416a:	4a06      	ldr	r2, [pc, #24]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004176:	6810      	ldr	r0, [r2, #0]
 8004178:	f003 031f 	and.w	r3, r3, #31
}
 800417c:	40d8      	lsrs	r0, r3
 800417e:	4770      	bx	lr
 8004180:	40021000 	.word	0x40021000
 8004184:	0800b2bb 	.word	0x0800b2bb
 8004188:	20000010 	.word	0x20000010

0800418c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800418e:	4a06      	ldr	r2, [pc, #24]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800419a:	6810      	ldr	r0, [r2, #0]
 800419c:	f003 031f 	and.w	r3, r3, #31
}
 80041a0:	40d8      	lsrs	r0, r3
 80041a2:	4770      	bx	lr
 80041a4:	40021000 	.word	0x40021000
 80041a8:	0800b2bb 	.word	0x0800b2bb
 80041ac:	20000010 	.word	0x20000010

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80041b4:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b6:	6800      	ldr	r0, [r0, #0]
 80041b8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80041bc:	d039      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041be:	4d75      	ldr	r5, [pc, #468]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041c0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80041c2:	00d8      	lsls	r0, r3, #3
 80041c4:	d427      	bmi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	65ab      	str	r3, [r5, #88]	; 0x58
 80041ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041d8:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041da:	4f6f      	ldr	r7, [pc, #444]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fe f8ce 	bl	8002384 <HAL_GetTick>
 80041e8:	4680      	mov	r8, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	05d9      	lsls	r1, r3, #23
 80041ee:	d514      	bpl.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80041f8:	d003      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f040 80a3 	bne.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004202:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004206:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004212:	2000      	movs	r0, #0
 8004214:	e008      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 8004216:	2600      	movs	r6, #0
 8004218:	e7df      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe f8b3 	bl	8002384 <HAL_GetTick>
 800421e:	eba0 0008 	sub.w	r0, r0, r8
 8004222:	2802      	cmp	r0, #2
 8004224:	d9e1      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 8004226:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004228:	b11e      	cbz	r6, 8004232 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	07df      	lsls	r7, r3, #31
 8004236:	d508      	bpl.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004238:	4956      	ldr	r1, [pc, #344]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800423a:	6865      	ldr	r5, [r4, #4]
 800423c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004240:	f022 0203 	bic.w	r2, r2, #3
 8004244:	432a      	orrs	r2, r5
 8004246:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800424a:	079e      	lsls	r6, r3, #30
 800424c:	d508      	bpl.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800424e:	4951      	ldr	r1, [pc, #324]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004250:	68a5      	ldr	r5, [r4, #8]
 8004252:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004256:	f022 020c 	bic.w	r2, r2, #12
 800425a:	432a      	orrs	r2, r5
 800425c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004260:	075d      	lsls	r5, r3, #29
 8004262:	d508      	bpl.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004264:	494b      	ldr	r1, [pc, #300]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004266:	68e5      	ldr	r5, [r4, #12]
 8004268:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800426c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004270:	432a      	orrs	r2, r5
 8004272:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004276:	0699      	lsls	r1, r3, #26
 8004278:	d508      	bpl.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427a:	4946      	ldr	r1, [pc, #280]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800427c:	6925      	ldr	r5, [r4, #16]
 800427e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004282:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004286:	432a      	orrs	r2, r5
 8004288:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800428c:	059a      	lsls	r2, r3, #22
 800428e:	d508      	bpl.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004290:	4940      	ldr	r1, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004292:	6a25      	ldr	r5, [r4, #32]
 8004294:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004298:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800429c:	432a      	orrs	r2, r5
 800429e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042a2:	055f      	lsls	r7, r3, #21
 80042a4:	d508      	bpl.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a6:	493b      	ldr	r1, [pc, #236]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80042aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80042b2:	432a      	orrs	r2, r5
 80042b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b8:	065e      	lsls	r6, r3, #25
 80042ba:	d508      	bpl.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042bc:	4935      	ldr	r1, [pc, #212]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042be:	6965      	ldr	r5, [r4, #20]
 80042c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80042c8:	432a      	orrs	r2, r5
 80042ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ce:	061d      	lsls	r5, r3, #24
 80042d0:	d508      	bpl.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d2:	4930      	ldr	r1, [pc, #192]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042d4:	69a5      	ldr	r5, [r4, #24]
 80042d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80042de:	432a      	orrs	r2, r5
 80042e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e4:	05d9      	lsls	r1, r3, #23
 80042e6:	d508      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e8:	492a      	ldr	r1, [pc, #168]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042ea:	69e5      	ldr	r5, [r4, #28]
 80042ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80042f4:	432a      	orrs	r2, r5
 80042f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fa:	049a      	lsls	r2, r3, #18
 80042fc:	d50f      	bpl.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fe:	4925      	ldr	r1, [pc, #148]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004300:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004302:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004306:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800430a:	432a      	orrs	r2, r5
 800430c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004310:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	bf02      	ittt	eq
 8004316:	68ca      	ldreq	r2, [r1, #12]
 8004318:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 800431c:	60ca      	streq	r2, [r1, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431e:	035b      	lsls	r3, r3, #13
 8004320:	d50f      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004322:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004324:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004326:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800432a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800432e:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004330:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004338:	d103      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433a:	68d3      	ldr	r3, [r2, #12]
 800433c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004340:	60d3      	str	r3, [r2, #12]
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8004342:	b002      	add	sp, #8
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004348:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800434c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004358:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800435c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004364:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004366:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800436a:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800436e:	f57f af48 	bpl.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004372:	f7fe f807 	bl	8002384 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800437a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004380:	079b      	lsls	r3, r3, #30
 8004382:	f53f af3e 	bmi.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fd fffd 	bl	8002384 <HAL_GetTick>
 800438a:	1bc0      	subs	r0, r0, r7
 800438c:	4540      	cmp	r0, r8
 800438e:	d9f5      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004390:	e749      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000

0800439c <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800439c:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	f043 0304 	orr.w	r3, r3, #4
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	4770      	bx	lr
 80043a8:	40021000 	.word	0x40021000

080043ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ac:	6a03      	ldr	r3, [r0, #32]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b4:	6a03      	ldr	r3, [r0, #32]
{
 80043b6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80043c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80043ca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80043ce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d0:	4d12      	ldr	r5, [pc, #72]	; (800441c <TIM_OC1_SetConfig+0x70>)
 80043d2:	42a8      	cmp	r0, r5
 80043d4:	d006      	beq.n	80043e4 <TIM_OC1_SetConfig+0x38>
 80043d6:	4e12      	ldr	r6, [pc, #72]	; (8004420 <TIM_OC1_SetConfig+0x74>)
 80043d8:	42b0      	cmp	r0, r6
 80043da:	d003      	beq.n	80043e4 <TIM_OC1_SetConfig+0x38>
 80043dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043e0:	42b0      	cmp	r0, r6
 80043e2:	d114      	bne.n	800440e <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80043ea:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ee:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	d006      	beq.n	8004402 <TIM_OC1_SetConfig+0x56>
 80043f4:	4d0a      	ldr	r5, [pc, #40]	; (8004420 <TIM_OC1_SetConfig+0x74>)
 80043f6:	42a8      	cmp	r0, r5
 80043f8:	d003      	beq.n	8004402 <TIM_OC1_SetConfig+0x56>
 80043fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043fe:	42a8      	cmp	r0, r5
 8004400:	d105      	bne.n	800440e <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004402:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004406:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800440a:	4334      	orrs	r4, r6
 800440c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004410:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004412:	684a      	ldr	r2, [r1, #4]
 8004414:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	6203      	str	r3, [r0, #32]
}
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40014000 	.word	0x40014000

08004424 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004424:	6a03      	ldr	r3, [r0, #32]
 8004426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442e:	6842      	ldr	r2, [r0, #4]
{
 8004430:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004436:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800443a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800443e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004440:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004446:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444a:	4d0f      	ldr	r5, [pc, #60]	; (8004488 <TIM_OC3_SetConfig+0x64>)
 800444c:	42a8      	cmp	r0, r5
 800444e:	d10e      	bne.n	800446e <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004450:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004456:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800445a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004462:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004466:	4335      	orrs	r5, r6
 8004468:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800446c:	e005      	b.n	800447a <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	4d07      	ldr	r5, [pc, #28]	; (800448c <TIM_OC3_SetConfig+0x68>)
 8004470:	42a8      	cmp	r0, r5
 8004472:	d0f4      	beq.n	800445e <TIM_OC3_SetConfig+0x3a>
 8004474:	4d06      	ldr	r5, [pc, #24]	; (8004490 <TIM_OC3_SetConfig+0x6c>)
 8004476:	42a8      	cmp	r0, r5
 8004478:	d0f1      	beq.n	800445e <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800447c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800447e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004480:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	6203      	str	r3, [r0, #32]
}
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400

08004494 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004494:	6a03      	ldr	r3, [r0, #32]
 8004496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800449a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449c:	6a02      	ldr	r2, [r0, #32]
{
 800449e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044aa:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80044b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044bc:	4d0a      	ldr	r5, [pc, #40]	; (80044e8 <TIM_OC4_SetConfig+0x54>)
 80044be:	42a8      	cmp	r0, r5
 80044c0:	d007      	beq.n	80044d2 <TIM_OC4_SetConfig+0x3e>
 80044c2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80044c6:	42a8      	cmp	r0, r5
 80044c8:	d003      	beq.n	80044d2 <TIM_OC4_SetConfig+0x3e>
 80044ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044ce:	42a8      	cmp	r0, r5
 80044d0:	d104      	bne.n	80044dc <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044de:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e0:	684b      	ldr	r3, [r1, #4]
 80044e2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	6202      	str	r2, [r0, #32]
}
 80044e6:	bd30      	pop	{r4, r5, pc}
 80044e8:	40012c00 	.word	0x40012c00

080044ec <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044ec:	6a03      	ldr	r3, [r0, #32]
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f4:	6a02      	ldr	r2, [r0, #32]
{
 80044f6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044fa:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004506:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004508:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800450a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800450e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	4d0b      	ldr	r5, [pc, #44]	; (8004540 <TIM_OC5_SetConfig+0x54>)
 8004514:	42a8      	cmp	r0, r5
 8004516:	d007      	beq.n	8004528 <TIM_OC5_SetConfig+0x3c>
 8004518:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800451c:	42a8      	cmp	r0, r5
 800451e:	d003      	beq.n	8004528 <TIM_OC5_SetConfig+0x3c>
 8004520:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004524:	42a8      	cmp	r0, r5
 8004526:	d104      	bne.n	8004532 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004528:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800452a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800452e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004534:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004536:	684b      	ldr	r3, [r1, #4]
 8004538:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	6202      	str	r2, [r0, #32]
}
 800453c:	bd30      	pop	{r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00

08004544 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004544:	6a03      	ldr	r3, [r0, #32]
 8004546:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800454a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454c:	6a02      	ldr	r2, [r0, #32]
{
 800454e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004552:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004554:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004562:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004564:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004568:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	4d0a      	ldr	r5, [pc, #40]	; (8004598 <TIM_OC6_SetConfig+0x54>)
 800456e:	42a8      	cmp	r0, r5
 8004570:	d007      	beq.n	8004582 <TIM_OC6_SetConfig+0x3e>
 8004572:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004576:	42a8      	cmp	r0, r5
 8004578:	d003      	beq.n	8004582 <TIM_OC6_SetConfig+0x3e>
 800457a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800457e:	42a8      	cmp	r0, r5
 8004580:	d104      	bne.n	800458c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004582:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004584:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004588:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800458e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004590:	684b      	ldr	r3, [r1, #4]
 8004592:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004594:	6202      	str	r2, [r0, #32]
}
 8004596:	bd30      	pop	{r4, r5, pc}
 8004598:	40012c00 	.word	0x40012c00

0800459c <HAL_TIM_OC_MspInit>:
 800459c:	4770      	bx	lr

0800459e <HAL_TIM_PWM_PulseFinishedCallback>:
 800459e:	4770      	bx	lr

080045a0 <TIM_DMADelayPulseCplt>:
{
 80045a0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045a6:	4282      	cmp	r2, r0
 80045a8:	d10b      	bne.n	80045c2 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80045ae:	69d2      	ldr	r2, [r2, #28]
 80045b0:	b90a      	cbnz	r2, 80045b6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff fff1 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045bc:	2300      	movs	r3, #0
 80045be:	7723      	strb	r3, [r4, #28]
}
 80045c0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045c4:	4283      	cmp	r3, r0
 80045c6:	d108      	bne.n	80045da <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c8:	2202      	movs	r2, #2
 80045ca:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f1      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	2301      	movs	r3, #1
 80045d4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80045d8:	e7ed      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045dc:	4283      	cmp	r3, r0
 80045de:	d108      	bne.n	80045f2 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e0:	2204      	movs	r2, #4
 80045e2:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	2301      	movs	r3, #1
 80045ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80045f0:	e7e1      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045f4:	4283      	cmp	r3, r0
 80045f6:	d1de      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f8:	2208      	movs	r2, #8
 80045fa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1d9      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	2301      	movs	r3, #1
 8004604:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004608:	e7d5      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x16>

0800460a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800460a:	4770      	bx	lr

0800460c <TIM_DMADelayPulseHalfCplt>:
{
 800460c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004612:	4283      	cmp	r3, r0
 8004614:	d107      	bne.n	8004626 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004616:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004618:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800461a:	4620      	mov	r0, r4
 800461c:	f7ff fff5 	bl	800460a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004620:	2300      	movs	r3, #0
 8004622:	7723      	strb	r3, [r4, #28]
}
 8004624:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004628:	4283      	cmp	r3, r0
 800462a:	d101      	bne.n	8004630 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462c:	2302      	movs	r3, #2
 800462e:	e7f3      	b.n	8004618 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004630:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004632:	4283      	cmp	r3, r0
 8004634:	d101      	bne.n	800463a <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004636:	2304      	movs	r3, #4
 8004638:	e7ee      	b.n	8004618 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800463a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800463c:	4283      	cmp	r3, r0
 800463e:	d1ec      	bne.n	800461a <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004640:	2308      	movs	r3, #8
 8004642:	e7e9      	b.n	8004618 <TIM_DMADelayPulseHalfCplt+0xc>

08004644 <HAL_TIM_ErrorCallback>:
 8004644:	4770      	bx	lr

08004646 <TIM_DMAError>:
{
 8004646:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004648:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800464a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800464c:	4283      	cmp	r3, r0
 800464e:	d109      	bne.n	8004664 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004650:	2301      	movs	r3, #1
 8004652:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8004658:	4620      	mov	r0, r4
 800465a:	f7ff fff3 	bl	8004644 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	2300      	movs	r3, #0
 8004660:	7723      	strb	r3, [r4, #28]
}
 8004662:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004666:	4283      	cmp	r3, r0
 8004668:	d105      	bne.n	8004676 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466a:	2302      	movs	r3, #2
 800466c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	2301      	movs	r3, #1
 8004670:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004674:	e7f0      	b.n	8004658 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004676:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004678:	4283      	cmp	r3, r0
 800467a:	f04f 0301 	mov.w	r3, #1
 800467e:	d104      	bne.n	800468a <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004680:	2204      	movs	r2, #4
 8004682:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004688:	e7e6      	b.n	8004658 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800468a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800468c:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	bf03      	ittte	eq
 8004690:	2208      	moveq	r2, #8
 8004692:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 8004698:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800469c:	e7dc      	b.n	8004658 <TIM_DMAError+0x12>
	...

080046a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	4a1a      	ldr	r2, [pc, #104]	; (800470c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80046a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a4:	4290      	cmp	r0, r2
{
 80046a6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	d002      	beq.n	80046b0 <TIM_Base_SetConfig+0x10>
 80046aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80046ae:	d109      	bne.n	80046c4 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 80046b0:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80046b8:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046bc:	d009      	beq.n	80046d2 <TIM_Base_SetConfig+0x32>
 80046be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80046c2:	d006      	beq.n	80046d2 <TIM_Base_SetConfig+0x32>
 80046c4:	4a12      	ldr	r2, [pc, #72]	; (8004710 <TIM_Base_SetConfig+0x70>)
 80046c6:	4290      	cmp	r0, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x32>
 80046ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ce:	4290      	cmp	r0, r2
 80046d0:	d103      	bne.n	80046da <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046da:	694a      	ldr	r2, [r1, #20]
 80046dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80046e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e4:	688b      	ldr	r3, [r1, #8]
 80046e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046e8:	680b      	ldr	r3, [r1, #0]
 80046ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <TIM_Base_SetConfig+0x6c>)
 80046ee:	4298      	cmp	r0, r3
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0x62>
 80046f2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80046f6:	4298      	cmp	r0, r3
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0x62>
 80046fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046fe:	4298      	cmp	r0, r3
 8004700:	d101      	bne.n	8004706 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004702:	690b      	ldr	r3, [r1, #16]
 8004704:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004706:	2301      	movs	r3, #1
 8004708:	6143      	str	r3, [r0, #20]
}
 800470a:	bd10      	pop	{r4, pc}
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40014000 	.word	0x40014000

08004714 <HAL_TIM_OC_Init>:
{
 8004714:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004716:	4604      	mov	r4, r0
 8004718:	b350      	cbz	r0, 8004770 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800471a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800471e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004722:	b91b      	cbnz	r3, 800472c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004724:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004728:	f7ff ff38 	bl	800459c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800472e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004734:	1d21      	adds	r1, r4, #4
 8004736:	f7ff ffb3 	bl	80046a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473a:	2301      	movs	r3, #1
 800473c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004746:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800474a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800474e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004752:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800475e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004762:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004766:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800476a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800476e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
 8004772:	e7fc      	b.n	800476e <HAL_TIM_OC_Init+0x5a>

08004774 <HAL_TIM_PWM_Init>:
{
 8004774:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004776:	4604      	mov	r4, r0
 8004778:	b350      	cbz	r0, 80047d0 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800477e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004782:	b91b      	cbnz	r3, 800478c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004784:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004788:	f7fd fbea 	bl	8001f60 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	1d21      	adds	r1, r4, #4
 8004796:	f7ff ff83 	bl	80046a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479a:	2301      	movs	r3, #1
 800479c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80047a0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80047a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80047aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80047ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80047b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80047be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80047c6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80047ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047d0:	2001      	movs	r0, #1
 80047d2:	e7fc      	b.n	80047ce <HAL_TIM_PWM_Init+0x5a>

080047d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d4:	6a03      	ldr	r3, [r0, #32]
 80047d6:	f023 0310 	bic.w	r3, r3, #16
 80047da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80047dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80047de:	6842      	ldr	r2, [r0, #4]
{
 80047e0:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80047e2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047e6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80047ea:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80047f4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047fc:	4d0e      	ldr	r5, [pc, #56]	; (8004838 <TIM_OC2_SetConfig+0x64>)
 80047fe:	42a8      	cmp	r0, r5
 8004800:	d10e      	bne.n	8004820 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004802:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004808:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800480c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004810:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004814:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004818:	4335      	orrs	r5, r6
 800481a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800481e:	e005      	b.n	800482c <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	4d06      	ldr	r5, [pc, #24]	; (800483c <TIM_OC2_SetConfig+0x68>)
 8004822:	42a8      	cmp	r0, r5
 8004824:	d0f4      	beq.n	8004810 <TIM_OC2_SetConfig+0x3c>
 8004826:	4d06      	ldr	r5, [pc, #24]	; (8004840 <TIM_OC2_SetConfig+0x6c>)
 8004828:	42a8      	cmp	r0, r5
 800482a:	d0f1      	beq.n	8004810 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 800482c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800482e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004830:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004832:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004834:	6203      	str	r3, [r0, #32]
}
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400

08004844 <HAL_TIM_OC_ConfigChannel>:
{
 8004844:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004846:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
{
 800484c:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800484e:	d02b      	beq.n	80048a8 <HAL_TIM_OC_ConfigChannel+0x64>
 8004850:	2001      	movs	r0, #1
  switch (Channel)
 8004852:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004854:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004858:	d01e      	beq.n	8004898 <HAL_TIM_OC_ConfigChannel+0x54>
 800485a:	d808      	bhi.n	800486e <HAL_TIM_OC_ConfigChannel+0x2a>
 800485c:	2a04      	cmp	r2, #4
 800485e:	d013      	beq.n	8004888 <HAL_TIM_OC_ConfigChannel+0x44>
 8004860:	2a08      	cmp	r2, #8
 8004862:	d015      	beq.n	8004890 <HAL_TIM_OC_ConfigChannel+0x4c>
 8004864:	b15a      	cbz	r2, 800487e <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8004866:	2300      	movs	r3, #0
 8004868:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800486c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800486e:	2a10      	cmp	r2, #16
 8004870:	d016      	beq.n	80048a0 <HAL_TIM_OC_ConfigChannel+0x5c>
 8004872:	2a14      	cmp	r2, #20
 8004874:	d1f7      	bne.n	8004866 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004876:	6828      	ldr	r0, [r5, #0]
 8004878:	f7ff fe64 	bl	8004544 <TIM_OC6_SetConfig>
 800487c:	e002      	b.n	8004884 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800487e:	6828      	ldr	r0, [r5, #0]
 8004880:	f7ff fd94 	bl	80043ac <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2000      	movs	r0, #0
      break;
 8004886:	e7ee      	b.n	8004866 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004888:	6828      	ldr	r0, [r5, #0]
 800488a:	f7ff ffa3 	bl	80047d4 <TIM_OC2_SetConfig>
      break;
 800488e:	e7f9      	b.n	8004884 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004890:	6828      	ldr	r0, [r5, #0]
 8004892:	f7ff fdc7 	bl	8004424 <TIM_OC3_SetConfig>
      break;
 8004896:	e7f5      	b.n	8004884 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004898:	6828      	ldr	r0, [r5, #0]
 800489a:	f7ff fdfb 	bl	8004494 <TIM_OC4_SetConfig>
      break;
 800489e:	e7f1      	b.n	8004884 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a0:	6828      	ldr	r0, [r5, #0]
 80048a2:	f7ff fe23 	bl	80044ec <TIM_OC5_SetConfig>
      break;
 80048a6:	e7ed      	b.n	8004884 <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 80048a8:	2002      	movs	r0, #2
 80048aa:	e7df      	b.n	800486c <HAL_TIM_OC_ConfigChannel+0x28>

080048ac <HAL_TIM_PWM_ConfigChannel>:
{
 80048ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80048ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048b2:	2b01      	cmp	r3, #1
{
 80048b4:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80048b6:	d079      	beq.n	80049ac <HAL_TIM_PWM_ConfigChannel+0x100>
 80048b8:	2001      	movs	r0, #1
  switch (Channel)
 80048ba:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80048bc:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80048c0:	d052      	beq.n	8004968 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80048c2:	d808      	bhi.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80048c4:	2a04      	cmp	r2, #4
 80048c6:	d02d      	beq.n	8004924 <HAL_TIM_PWM_ConfigChannel+0x78>
 80048c8:	2a08      	cmp	r2, #8
 80048ca:	d03c      	beq.n	8004946 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80048cc:	b1c2      	cbz	r2, 8004900 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 80048ce:	2300      	movs	r3, #0
 80048d0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80048d6:	2a10      	cmp	r2, #16
 80048d8:	d057      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0xde>
 80048da:	2a14      	cmp	r2, #20
 80048dc:	d1f7      	bne.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048de:	6828      	ldr	r0, [r5, #0]
 80048e0:	f7ff fe30 	bl	8004544 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048e4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048fe:	e053      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004900:	6828      	ldr	r0, [r5, #0]
 8004902:	f7ff fd53 	bl	80043ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004906:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004908:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	f042 0208 	orr.w	r2, r2, #8
 8004910:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	f022 0204 	bic.w	r2, r2, #4
 8004918:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800491e:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2000      	movs	r0, #0
      break;
 8004922:	e7d4      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004924:	6828      	ldr	r0, [r5, #0]
 8004926:	f7ff ff55 	bl	80047d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800492a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800492c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004934:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004944:	e7eb      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004946:	6828      	ldr	r0, [r5, #0]
 8004948:	f7ff fd6c 	bl	8004424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800494c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e7db      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004968:	6828      	ldr	r0, [r5, #0]
 800496a:	f7ff fd93 	bl	8004494 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004970:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004988:	e7ec      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800498a:	6828      	ldr	r0, [r5, #0]
 800498c:	f7ff fdae 	bl	80044ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004990:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004992:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800499c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a6:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
 80049aa:	e7b9      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 80049ac:	2002      	movs	r0, #2
 80049ae:	e791      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x28>

080049b0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b2:	f001 011f 	and.w	r1, r1, #31
{
 80049b6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b8:	2401      	movs	r4, #1
 80049ba:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80049bc:	ea23 0304 	bic.w	r3, r3, r4
 80049c0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c2:	6a03      	ldr	r3, [r0, #32]
 80049c4:	408a      	lsls	r2, r1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	6202      	str	r2, [r0, #32]
}
 80049ca:	bd10      	pop	{r4, pc}

080049cc <HAL_TIM_OC_Start>:
{
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049d0:	b929      	cbnz	r1, 80049de <HAL_TIM_OC_Start+0x12>
 80049d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d027      	beq.n	8004a2a <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 80049da:	2001      	movs	r0, #1
 80049dc:	e043      	b.n	8004a66 <HAL_TIM_OC_Start+0x9a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	2904      	cmp	r1, #4
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_OC_Start+0x26>
 80049e2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d1f7      	bne.n	80049da <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ea:	2302      	movs	r3, #2
 80049ec:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80049f0:	e01e      	b.n	8004a30 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	2908      	cmp	r1, #8
 80049f4:	d10d      	bne.n	8004a12 <HAL_TIM_OC_Start+0x46>
 80049f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049fa:	3b01      	subs	r3, #1
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ea      	bne.n	80049da <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a04:	2908      	cmp	r1, #8
 8004a06:	f04f 0302 	mov.w	r3, #2
 8004a0a:	d12d      	bne.n	8004a68 <HAL_TIM_OC_Start+0x9c>
 8004a0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a10:	e00e      	b.n	8004a30 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a12:	290c      	cmp	r1, #12
 8004a14:	d102      	bne.n	8004a1c <HAL_TIM_OC_Start+0x50>
 8004a16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a1a:	e7ee      	b.n	80049fa <HAL_TIM_OC_Start+0x2e>
 8004a1c:	2910      	cmp	r1, #16
 8004a1e:	bf0c      	ite	eq
 8004a20:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8004a24:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8004a28:	e7e7      	b.n	80049fa <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f7ff ffbc 	bl	80049b0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	491a      	ldr	r1, [pc, #104]	; (8004aa4 <HAL_TIM_OC_Start+0xd8>)
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	d006      	beq.n	8004a4e <HAL_TIM_OC_Start+0x82>
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_TIM_OC_Start+0xdc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_OC_Start+0x82>
 8004a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d127      	bne.n	8004a9e <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_MOE_ENABLE(htim);
 8004a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a58:	d112      	bne.n	8004a80 <HAL_TIM_OC_Start+0xb4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	; (8004aac <HAL_TIM_OC_Start+0xe0>)
 8004a5e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	2a06      	cmp	r2, #6
 8004a62:	d114      	bne.n	8004a8e <HAL_TIM_OC_Start+0xc2>
  return HAL_OK;
 8004a64:	2000      	movs	r0, #0
}
 8004a66:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a68:	290c      	cmp	r1, #12
 8004a6a:	d102      	bne.n	8004a72 <HAL_TIM_OC_Start+0xa6>
 8004a6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a70:	e7de      	b.n	8004a30 <HAL_TIM_OC_Start+0x64>
 8004a72:	2910      	cmp	r1, #16
 8004a74:	bf0c      	ite	eq
 8004a76:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004a7a:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004a7e:	e7d7      	b.n	8004a30 <HAL_TIM_OC_Start+0x64>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a84:	d0e9      	beq.n	8004a5a <HAL_TIM_OC_Start+0x8e>
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_TIM_OC_Start+0xdc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d103      	bne.n	8004a94 <HAL_TIM_OC_Start+0xc8>
 8004a8c:	e7e5      	b.n	8004a5a <HAL_TIM_OC_Start+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004a92:	d0e7      	beq.n	8004a64 <HAL_TIM_OC_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e7e2      	b.n	8004a64 <HAL_TIM_OC_Start+0x98>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	e7f2      	b.n	8004a8a <HAL_TIM_OC_Start+0xbe>
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	00010007 	.word	0x00010007

08004ab0 <HAL_TIM_PWM_Start>:
 8004ab0:	f7ff bf8c 	b.w	80049cc <HAL_TIM_OC_Start>

08004ab4 <HAL_TIM_OC_Stop>:
{
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	6800      	ldr	r0, [r0, #0]
{
 8004abc:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004abe:	f7ff ff77 	bl	80049b0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <HAL_TIM_OC_Stop+0x98>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <HAL_TIM_OC_Stop+0x26>
 8004aca:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_OC_Stop+0x26>
 8004ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10d      	bne.n	8004af6 <HAL_TIM_OC_Stop+0x42>
    __HAL_TIM_MOE_DISABLE(htim);
 8004ada:	6a19      	ldr	r1, [r3, #32]
 8004adc:	f241 1211 	movw	r2, #4369	; 0x1111
 8004ae0:	4211      	tst	r1, r2
 8004ae2:	d108      	bne.n	8004af6 <HAL_TIM_OC_Stop+0x42>
 8004ae4:	6a19      	ldr	r1, [r3, #32]
 8004ae6:	f240 4244 	movw	r2, #1092	; 0x444
 8004aea:	4211      	tst	r1, r2
 8004aec:	bf02      	ittt	eq
 8004aee:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004af0:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004af4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8004af6:	6a19      	ldr	r1, [r3, #32]
 8004af8:	f241 1211 	movw	r2, #4369	; 0x1111
 8004afc:	4211      	tst	r1, r2
 8004afe:	d108      	bne.n	8004b12 <HAL_TIM_OC_Stop+0x5e>
 8004b00:	6a19      	ldr	r1, [r3, #32]
 8004b02:	f240 4244 	movw	r2, #1092	; 0x444
 8004b06:	4211      	tst	r1, r2
 8004b08:	bf02      	ittt	eq
 8004b0a:	681a      	ldreq	r2, [r3, #0]
 8004b0c:	f022 0201 	biceq.w	r2, r2, #1
 8004b10:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b12:	2301      	movs	r3, #1
 8004b14:	b91d      	cbnz	r5, 8004b1e <HAL_TIM_OC_Stop+0x6a>
 8004b16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	2d04      	cmp	r5, #4
 8004b20:	d102      	bne.n	8004b28 <HAL_TIM_OC_Stop+0x74>
 8004b22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b26:	e7f8      	b.n	8004b1a <HAL_TIM_OC_Stop+0x66>
 8004b28:	2d08      	cmp	r5, #8
 8004b2a:	d102      	bne.n	8004b32 <HAL_TIM_OC_Stop+0x7e>
 8004b2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b30:	e7f3      	b.n	8004b1a <HAL_TIM_OC_Stop+0x66>
 8004b32:	2d0c      	cmp	r5, #12
 8004b34:	d102      	bne.n	8004b3c <HAL_TIM_OC_Stop+0x88>
 8004b36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b3a:	e7ee      	b.n	8004b1a <HAL_TIM_OC_Stop+0x66>
 8004b3c:	2d10      	cmp	r5, #16
 8004b3e:	bf0c      	ite	eq
 8004b40:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004b44:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004b48:	e7e7      	b.n	8004b1a <HAL_TIM_OC_Stop+0x66>
 8004b4a:	bf00      	nop
 8004b4c:	40012c00 	.word	0x40012c00

08004b50 <HAL_TIM_PWM_Stop>:
 8004b50:	f7ff bfb0 	b.w	8004ab4 <HAL_TIM_OC_Stop>

08004b54 <HAL_TIM_OC_Start_DMA>:
{
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	460d      	mov	r5, r1
 8004b58:	4604      	mov	r4, r0
 8004b5a:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b5c:	b955      	cbnz	r5, 8004b74 <HAL_TIM_OC_Start_DMA+0x20>
 8004b5e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004b62:	f1a0 0c02 	sub.w	ip, r0, #2
 8004b66:	f1dc 0000 	rsbs	r0, ip, #0
 8004b6a:	eb40 000c 	adc.w	r0, r0, ip
 8004b6e:	b1c0      	cbz	r0, 8004ba2 <HAL_TIM_OC_Start_DMA+0x4e>
    return HAL_BUSY;
 8004b70:	2002      	movs	r0, #2
 8004b72:	e01e      	b.n	8004bb2 <HAL_TIM_OC_Start_DMA+0x5e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b74:	2d04      	cmp	r5, #4
 8004b76:	d102      	bne.n	8004b7e <HAL_TIM_OC_Start_DMA+0x2a>
 8004b78:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004b7c:	e7f1      	b.n	8004b62 <HAL_TIM_OC_Start_DMA+0xe>
 8004b7e:	2d08      	cmp	r5, #8
 8004b80:	d102      	bne.n	8004b88 <HAL_TIM_OC_Start_DMA+0x34>
 8004b82:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8004b86:	e7ec      	b.n	8004b62 <HAL_TIM_OC_Start_DMA+0xe>
 8004b88:	2d0c      	cmp	r5, #12
 8004b8a:	d102      	bne.n	8004b92 <HAL_TIM_OC_Start_DMA+0x3e>
 8004b8c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004b90:	e7e7      	b.n	8004b62 <HAL_TIM_OC_Start_DMA+0xe>
 8004b92:	2d10      	cmp	r5, #16
 8004b94:	d102      	bne.n	8004b9c <HAL_TIM_OC_Start_DMA+0x48>
 8004b96:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004b9a:	e7e2      	b.n	8004b62 <HAL_TIM_OC_Start_DMA+0xe>
 8004b9c:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8004ba0:	e7df      	b.n	8004b62 <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ba2:	b93d      	cbnz	r5, 8004bb4 <HAL_TIM_OC_Start_DMA+0x60>
 8004ba4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004ba8:	1e50      	subs	r0, r2, #1
 8004baa:	4242      	negs	r2, r0
 8004bac:	4142      	adcs	r2, r0
 8004bae:	b9c2      	cbnz	r2, 8004be2 <HAL_TIM_OC_Start_DMA+0x8e>
      status = HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004bb4:	2d04      	cmp	r5, #4
 8004bb6:	d102      	bne.n	8004bbe <HAL_TIM_OC_Start_DMA+0x6a>
 8004bb8:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8004bbc:	e7f4      	b.n	8004ba8 <HAL_TIM_OC_Start_DMA+0x54>
 8004bbe:	2d08      	cmp	r5, #8
 8004bc0:	d102      	bne.n	8004bc8 <HAL_TIM_OC_Start_DMA+0x74>
 8004bc2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004bc6:	e7ef      	b.n	8004ba8 <HAL_TIM_OC_Start_DMA+0x54>
 8004bc8:	2d0c      	cmp	r5, #12
 8004bca:	d102      	bne.n	8004bd2 <HAL_TIM_OC_Start_DMA+0x7e>
 8004bcc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004bd0:	e7ea      	b.n	8004ba8 <HAL_TIM_OC_Start_DMA+0x54>
 8004bd2:	2d10      	cmp	r5, #16
 8004bd4:	bf0c      	ite	eq
 8004bd6:	f894 2042 	ldrbeq.w	r2, [r4, #66]	; 0x42
 8004bda:	f894 2043 	ldrbne.w	r2, [r4, #67]	; 0x43
 8004bde:	2a01      	cmp	r2, #1
 8004be0:	d1e6      	bne.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
    if ((pData == NULL) || (Length == 0U))
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d0e4      	beq.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0e2      	beq.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bea:	2202      	movs	r2, #2
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	d130      	bne.n	8004c52 <HAL_TIM_OC_Start_DMA+0xfe>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf6:	4a45      	ldr	r2, [pc, #276]	; (8004d0c <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004bf8:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bfa:	4a45      	ldr	r2, [pc, #276]	; (8004d10 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004bfc:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bfe:	4a45      	ldr	r2, [pc, #276]	; (8004d14 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004c00:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	3234      	adds	r2, #52	; 0x34
 8004c06:	f7fe fb43 	bl	8003290 <HAL_DMA_Start_IT>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d1d0      	bne.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	68d3      	ldr	r3, [r2, #12]
 8004c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c16:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c18:	4629      	mov	r1, r5
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f7ff fec7 	bl	80049b0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	493c      	ldr	r1, [pc, #240]	; (8004d18 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8004c26:	428b      	cmp	r3, r1
 8004c28:	d006      	beq.n	8004c38 <HAL_TIM_OC_Start_DMA+0xe4>
 8004c2a:	4a3c      	ldr	r2, [pc, #240]	; (8004d1c <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <HAL_TIM_OC_Start_DMA+0xe4>
 8004c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d166      	bne.n	8004d06 <HAL_TIM_OC_Start_DMA+0x1b2>
      __HAL_TIM_MOE_ENABLE(htim);
 8004c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	428b      	cmp	r3, r1
      __HAL_TIM_MOE_ENABLE(htim);
 8004c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	d151      	bne.n	8004ce8 <HAL_TIM_OC_Start_DMA+0x194>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	4a36      	ldr	r2, [pc, #216]	; (8004d20 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8004c48:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	2a06      	cmp	r2, #6
 8004c4c:	d153      	bne.n	8004cf6 <HAL_TIM_OC_Start_DMA+0x1a2>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7af      	b.n	8004bb2 <HAL_TIM_OC_Start_DMA+0x5e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	2d04      	cmp	r5, #4
 8004c54:	d113      	bne.n	8004c7e <HAL_TIM_OC_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c58:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004c5e:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004c62:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c64:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004c66:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	3238      	adds	r2, #56	; 0x38
 8004c6c:	f7fe fb10 	bl	8003290 <HAL_DMA_Start_IT>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d19d      	bne.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	68d3      	ldr	r3, [r2, #12]
 8004c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c7c:	e7cb      	b.n	8004c16 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	2d08      	cmp	r5, #8
 8004c80:	d113      	bne.n	8004caa <HAL_TIM_OC_Start_DMA+0x156>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c84:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c88:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004c8a:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004c8e:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004c92:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	323c      	adds	r2, #60	; 0x3c
 8004c98:	f7fe fafa 	bl	8003290 <HAL_DMA_Start_IT>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d187      	bne.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	68d3      	ldr	r3, [r2, #12]
 8004ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca8:	e7b5      	b.n	8004c16 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004caa:	2d0c      	cmp	r5, #12
 8004cac:	d114      	bne.n	8004cd8 <HAL_TIM_OC_Start_DMA+0x184>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cae:	6b20      	ldr	r0, [r4, #48]	; 0x30
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004cb6:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004cba:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cbc:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <HAL_TIM_OC_Start_DMA+0x1c0>)
 8004cbe:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cc0:	6822      	ldr	r2, [r4, #0]
 8004cc2:	3240      	adds	r2, #64	; 0x40
 8004cc4:	f7fe fae4 	bl	8003290 <HAL_DMA_Start_IT>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f47f af71 	bne.w	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	68d3      	ldr	r3, [r2, #12]
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cd6:	e79e      	b.n	8004c16 <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd8:	2d10      	cmp	r5, #16
 8004cda:	d102      	bne.n	8004ce2 <HAL_TIM_OC_Start_DMA+0x18e>
 8004cdc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004ce0:	e766      	b.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
 8004ce2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  switch (Channel)
 8004ce6:	e763      	b.n	8004bb0 <HAL_TIM_OC_Start_DMA+0x5c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d0aa      	beq.n	8004c44 <HAL_TIM_OC_Start_DMA+0xf0>
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_TIM_OC_Start_DMA+0x1c8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <HAL_TIM_OC_Start_DMA+0x1a8>
 8004cf4:	e7a6      	b.n	8004c44 <HAL_TIM_OC_Start_DMA+0xf0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004cfa:	d0a8      	beq.n	8004c4e <HAL_TIM_OC_Start_DMA+0xfa>
      __HAL_TIM_ENABLE(htim);
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e7a3      	b.n	8004c4e <HAL_TIM_OC_Start_DMA+0xfa>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	e7f2      	b.n	8004cf2 <HAL_TIM_OC_Start_DMA+0x19e>
 8004d0c:	080045a1 	.word	0x080045a1
 8004d10:	0800460d 	.word	0x0800460d
 8004d14:	08004647 	.word	0x08004647
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	00010007 	.word	0x00010007

08004d24 <HAL_TIM_OC_Stop_DMA>:
  switch (Channel)
 8004d24:	2908      	cmp	r1, #8
{
 8004d26:	b538      	push	{r3, r4, r5, lr}
 8004d28:	4605      	mov	r5, r0
 8004d2a:	460c      	mov	r4, r1
  switch (Channel)
 8004d2c:	d050      	beq.n	8004dd0 <HAL_TIM_OC_Stop_DMA+0xac>
 8004d2e:	d804      	bhi.n	8004d3a <HAL_TIM_OC_Stop_DMA+0x16>
 8004d30:	b161      	cbz	r1, 8004d4c <HAL_TIM_OC_Stop_DMA+0x28>
 8004d32:	2904      	cmp	r1, #4
 8004d34:	d045      	beq.n	8004dc2 <HAL_TIM_OC_Stop_DMA+0x9e>
 8004d36:	2001      	movs	r0, #1
}
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004d3a:	290c      	cmp	r1, #12
 8004d3c:	d1fb      	bne.n	8004d36 <HAL_TIM_OC_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d3e:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d40:	6b00      	ldr	r0, [r0, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d42:	68d3      	ldr	r3, [r2, #12]
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d48:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d4a:	e005      	b.n	8004d58 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d4c:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d50:	68d3      	ldr	r3, [r2, #12]
 8004d52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d56:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d58:	f7fe fafc 	bl	8003354 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6828      	ldr	r0, [r5, #0]
 8004d60:	4621      	mov	r1, r4
 8004d62:	f7ff fe25 	bl	80049b0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <HAL_TIM_OC_Stop_DMA+0xe8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <HAL_TIM_OC_Stop_DMA+0x5a>
 8004d6e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_OC_Stop_DMA+0x5a>
 8004d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10d      	bne.n	8004d9a <HAL_TIM_OC_Stop_DMA+0x76>
      __HAL_TIM_MOE_DISABLE(htim);
 8004d7e:	6a19      	ldr	r1, [r3, #32]
 8004d80:	f241 1211 	movw	r2, #4369	; 0x1111
 8004d84:	4211      	tst	r1, r2
 8004d86:	d108      	bne.n	8004d9a <HAL_TIM_OC_Stop_DMA+0x76>
 8004d88:	6a19      	ldr	r1, [r3, #32]
 8004d8a:	f240 4244 	movw	r2, #1092	; 0x444
 8004d8e:	4211      	tst	r1, r2
 8004d90:	bf02      	ittt	eq
 8004d92:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004d94:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8004d98:	645a      	streq	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 8004d9a:	6a19      	ldr	r1, [r3, #32]
 8004d9c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004da0:	4211      	tst	r1, r2
 8004da2:	d108      	bne.n	8004db6 <HAL_TIM_OC_Stop_DMA+0x92>
 8004da4:	6a19      	ldr	r1, [r3, #32]
 8004da6:	f240 4244 	movw	r2, #1092	; 0x444
 8004daa:	4211      	tst	r1, r2
 8004dac:	bf02      	ittt	eq
 8004dae:	681a      	ldreq	r2, [r3, #0]
 8004db0:	f022 0201 	biceq.w	r2, r2, #1
 8004db4:	601a      	streq	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004db6:	2301      	movs	r3, #1
 8004db8:	b98c      	cbnz	r4, 8004dde <HAL_TIM_OC_Stop_DMA+0xba>
 8004dba:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e7ba      	b.n	8004d38 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004dc2:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004dc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004dc6:	68d3      	ldr	r3, [r2, #12]
 8004dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dcc:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004dce:	e7c3      	b.n	8004d58 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004dd0:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004dd2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004dd4:	68d3      	ldr	r3, [r2, #12]
 8004dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dda:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ddc:	e7bc      	b.n	8004d58 <HAL_TIM_OC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	2c04      	cmp	r4, #4
 8004de0:	d102      	bne.n	8004de8 <HAL_TIM_OC_Stop_DMA+0xc4>
 8004de2:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8004de6:	e7ea      	b.n	8004dbe <HAL_TIM_OC_Stop_DMA+0x9a>
 8004de8:	2c08      	cmp	r4, #8
 8004dea:	d102      	bne.n	8004df2 <HAL_TIM_OC_Stop_DMA+0xce>
 8004dec:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004df0:	e7e5      	b.n	8004dbe <HAL_TIM_OC_Stop_DMA+0x9a>
 8004df2:	2c0c      	cmp	r4, #12
 8004df4:	d102      	bne.n	8004dfc <HAL_TIM_OC_Stop_DMA+0xd8>
 8004df6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8004dfa:	e7e0      	b.n	8004dbe <HAL_TIM_OC_Stop_DMA+0x9a>
 8004dfc:	2c10      	cmp	r4, #16
 8004dfe:	bf0c      	ite	eq
 8004e00:	f885 3042 	strbeq.w	r3, [r5, #66]	; 0x42
 8004e04:	f885 3043 	strbne.w	r3, [r5, #67]	; 0x43
 8004e08:	e7d9      	b.n	8004dbe <HAL_TIM_OC_Stop_DMA+0x9a>
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00

08004e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e10:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	f04f 0302 	mov.w	r3, #2
 8004e1c:	d023      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e1e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e20:	4d12      	ldr	r5, [pc, #72]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004e26:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e2a:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e2c:	bf02      	ittt	eq
 8004e2e:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e30:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e34:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e36:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3c:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3e:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004e40:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e42:	d005      	beq.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004e44:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004e48:	d002      	beq.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e50:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e52:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e56:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e58:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	2300      	movs	r3, #0
 8004e62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004e66:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40014000 	.word	0x40014000

08004e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e74:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d034      	beq.n	8004ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7e:	68cb      	ldr	r3, [r1, #12]
 8004e80:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e82:	4c1a      	ldr	r4, [pc, #104]	; (8004eec <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e8a:	684a      	ldr	r2, [r1, #4]
 8004e8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e92:	680a      	ldr	r2, [r1, #0]
 8004e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e9a:	690a      	ldr	r2, [r1, #16]
 8004e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ea2:	694a      	ldr	r2, [r1, #20]
 8004ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004eaa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004eb2:	698a      	ldr	r2, [r1, #24]
 8004eb4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ebc:	6802      	ldr	r2, [r0, #0]
 8004ebe:	42a2      	cmp	r2, r4
 8004ec0:	d10c      	bne.n	8004edc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ec2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004ec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ec8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ecc:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ece:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ed6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004eda:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004ee4:	4618      	mov	r0, r3
}
 8004ee6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004ee8:	2002      	movs	r0, #2
 8004eea:	e7fc      	b.n	8004ee6 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8004eec:	40012c00 	.word	0x40012c00

08004ef0 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	e852 3f00 	ldrex	r3, [r2]
 8004ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004efe:	6802      	ldr	r2, [r0, #0]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d1f5      	bne.n	8004ef0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	f102 0308 	add.w	r3, r2, #8
 8004f08:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	f102 0c08 	add.w	ip, r2, #8
 8004f14:	e84c 3100 	strex	r1, r3, [ip]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d1f3      	bne.n	8004f04 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	e842 3100 	strex	r1, r3, [r2]
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	d1f7      	bne.n	8004f22 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f32:	2320      	movs	r3, #32
 8004f34:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	2300      	movs	r3, #0
 8004f38:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f3a:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004f3c:	4770      	bx	lr

08004f3e <HAL_UART_TxCpltCallback>:
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_ErrorCallback>:
 8004f40:	4770      	bx	lr

08004f42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f42:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f44:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f4c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f50:	f7ff fff6 	bl	8004f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f54:	bd08      	pop	{r3, pc}

08004f56 <HAL_UART_AbortReceiveCpltCallback>:
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_AbortReceive_IT>:
{
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	e852 3f00 	ldrex	r3, [r2]
 8004f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d1f5      	bne.n	8004f5c <HAL_UART_AbortReceive_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	f103 0208 	add.w	r2, r3, #8
 8004f74:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	f103 0008 	add.w	r0, r3, #8
 8004f80:	e840 2100 	strex	r1, r2, [r0]
 8004f84:	2900      	cmp	r1, #0
 8004f86:	d1f3      	bne.n	8004f70 <HAL_UART_AbortReceive_IT+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f88:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004f8a:	2a01      	cmp	r2, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004f92:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	e843 2100 	strex	r1, r2, [r3]
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	d1f7      	bne.n	8004f8e <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004fa4:	d028      	beq.n	8004ff8 <HAL_UART_AbortReceive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	f103 0008 	add.w	r0, r3, #8
 8004fb6:	e840 2100 	strex	r1, r2, [r0]
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d1f3      	bne.n	8004fa6 <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 8004fbe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fc0:	b148      	cbz	r0, 8004fd6 <HAL_UART_AbortReceive_IT+0x7e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_UART_AbortReceive_IT+0xb4>)
 8004fc4:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc6:	f7fe f9c5 	bl	8003354 <HAL_DMA_Abort_IT>
 8004fca:	b110      	cbz	r0, 8004fd2 <HAL_UART_AbortReceive_IT+0x7a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fcc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fd0:	4798      	blx	r3
}
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004fd6:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8004fd8:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 8004fdc:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004fde:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fe0:	8b1a      	ldrh	r2, [r3, #24]
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	f042 0208 	orr.w	r2, r2, #8
 8004fe8:	831a      	strh	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8004fea:	2320      	movs	r3, #32
 8004fec:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	6620      	str	r0, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f7ff ffb0 	bl	8004f56 <HAL_UART_AbortReceiveCpltCallback>
 8004ff6:	e7ec      	b.n	8004fd2 <HAL_UART_AbortReceive_IT+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ff8:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 8004ffa:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 8004ffe:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005000:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8005002:	2320      	movs	r3, #32
 8005004:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	6622      	str	r2, [r4, #96]	; 0x60
 8005008:	e7f2      	b.n	8004ff0 <HAL_UART_AbortReceive_IT+0x98>
 800500a:	bf00      	nop
 800500c:	08005011 	.word	0x08005011

08005010 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	6a80      	ldr	r0, [r0, #40]	; 0x28

  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005012:	6802      	ldr	r2, [r0, #0]
{
 8005014:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8005016:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005018:	230f      	movs	r3, #15
  huart->RxXferCount = 0U;
 800501a:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800501e:	6213      	str	r3, [r2, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005020:	8b13      	ldrh	r3, [r2, #24]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f043 0308 	orr.w	r3, r3, #8
 8005028:	8313      	strh	r3, [r2, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502a:	2320      	movs	r3, #32
 800502c:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005030:	f7ff ff91 	bl	8004f56 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005034:	bd08      	pop	{r3, pc}

08005036 <HAL_UARTEx_RxEventCallback>:
}
 8005036:	4770      	bx	lr

08005038 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005038:	6803      	ldr	r3, [r0, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503c:	6819      	ldr	r1, [r3, #0]
{
 800503e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8005040:	f640 060f 	movw	r6, #2063	; 0x80f
 8005044:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005046:	689d      	ldr	r5, [r3, #8]
{
 8005048:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800504a:	d10b      	bne.n	8005064 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800504c:	0696      	lsls	r6, r2, #26
 800504e:	f140 8088 	bpl.w	8005162 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005052:	068e      	lsls	r6, r1, #26
 8005054:	f140 8085 	bpl.w	8005162 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8005058:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07b      	beq.n	8005156 <HAL_UART_IRQHandler+0x11e>
}
 800505e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005062:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005064:	4e95      	ldr	r6, [pc, #596]	; (80052bc <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005066:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800506a:	400e      	ands	r6, r1
 800506c:	4306      	orrs	r6, r0
 800506e:	d078      	beq.n	8005162 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005070:	07d5      	lsls	r5, r2, #31
 8005072:	d509      	bpl.n	8005088 <HAL_UART_IRQHandler+0x50>
 8005074:	05ce      	lsls	r6, r1, #23
 8005076:	d507      	bpl.n	8005088 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005078:	2501      	movs	r5, #1
 800507a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005080:	f045 0501 	orr.w	r5, r5, #1
 8005084:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005088:	0795      	lsls	r5, r2, #30
 800508a:	d508      	bpl.n	800509e <HAL_UART_IRQHandler+0x66>
 800508c:	b138      	cbz	r0, 800509e <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800508e:	2502      	movs	r5, #2
 8005090:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005092:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005096:	f045 0504 	orr.w	r5, r5, #4
 800509a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509e:	0756      	lsls	r6, r2, #29
 80050a0:	d508      	bpl.n	80050b4 <HAL_UART_IRQHandler+0x7c>
 80050a2:	b138      	cbz	r0, 80050b4 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050a4:	2504      	movs	r5, #4
 80050a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80050ac:	f045 0502 	orr.w	r5, r5, #2
 80050b0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050b4:	0715      	lsls	r5, r2, #28
 80050b6:	d50b      	bpl.n	80050d0 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050b8:	f001 0520 	and.w	r5, r1, #32
 80050bc:	4328      	orrs	r0, r5
 80050be:	d007      	beq.n	80050d0 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c0:	2008      	movs	r0, #8
 80050c2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80050c8:	f040 0008 	orr.w	r0, r0, #8
 80050cc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050d0:	0516      	lsls	r6, r2, #20
 80050d2:	d50a      	bpl.n	80050ea <HAL_UART_IRQHandler+0xb2>
 80050d4:	014d      	lsls	r5, r1, #5
 80050d6:	d508      	bpl.n	80050ea <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80050dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050de:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80050e2:	f043 0320 	orr.w	r3, r3, #32
 80050e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d031      	beq.n	8005156 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050f2:	0690      	lsls	r0, r2, #26
 80050f4:	d505      	bpl.n	8005102 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050f6:	068a      	lsls	r2, r1, #26
 80050f8:	d503      	bpl.n	8005102 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 80050fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050fc:	b10b      	cbz	r3, 8005102 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 80050fe:	4620      	mov	r0, r4
 8005100:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005102:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005104:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005108:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800510a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005114:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005116:	d01f      	beq.n	8005158 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8005118:	f7ff feea 	bl	8004ef0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	6893      	ldr	r3, [r2, #8]
 8005120:	065b      	lsls	r3, r3, #25
 8005122:	d515      	bpl.n	8005150 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f102 0308 	add.w	r3, r2, #8
 8005128:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	f102 0008 	add.w	r0, r2, #8
 8005134:	e840 3100 	strex	r1, r3, [r0]
 8005138:	2900      	cmp	r1, #0
 800513a:	d1f3      	bne.n	8005124 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 800513c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800513e:	b138      	cbz	r0, 8005150 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005140:	4b5f      	ldr	r3, [pc, #380]	; (80052c0 <HAL_UART_IRQHandler+0x288>)
 8005142:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005144:	f7fe f906 	bl	8003354 <HAL_DMA_Abort_IT>
 8005148:	b128      	cbz	r0, 8005156 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800514a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800514c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800514e:	e786      	b.n	800505e <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8005150:	4620      	mov	r0, r4
 8005152:	f7ff fef5 	bl	8004f40 <HAL_UART_ErrorCallback>
}
 8005156:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005158:	f7ff fef2 	bl	8004f40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8005160:	e7f9      	b.n	8005156 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005164:	2801      	cmp	r0, #1
 8005166:	d17e      	bne.n	8005266 <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005168:	06d6      	lsls	r6, r2, #27
 800516a:	d57c      	bpl.n	8005266 <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800516c:	06c8      	lsls	r0, r1, #27
 800516e:	d57a      	bpl.n	8005266 <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005170:	2210      	movs	r2, #16
 8005172:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	0651      	lsls	r1, r2, #25
 8005178:	d546      	bpl.n	8005208 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800517a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	684a      	ldr	r2, [r1, #4]
 8005180:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005182:	2a00      	cmp	r2, #0
 8005184:	d0e7      	beq.n	8005156 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005186:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 800518a:	4290      	cmp	r0, r2
 800518c:	d9e3      	bls.n	8005156 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 800518e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005192:	680a      	ldr	r2, [r1, #0]
 8005194:	0692      	lsls	r2, r2, #26
 8005196:	d42d      	bmi.n	80051f4 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	e843 2100 	strex	r1, r2, [r3]
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d1f7      	bne.n	8005198 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	f103 0208 	add.w	r2, r3, #8
 80051ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	f103 0008 	add.w	r0, r3, #8
 80051b8:	e840 2100 	strex	r1, r2, [r0]
 80051bc:	2900      	cmp	r1, #0
 80051be:	d1f3      	bne.n	80051a8 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	f103 0208 	add.w	r2, r3, #8
 80051c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	f103 0008 	add.w	r0, r3, #8
 80051d0:	e840 2100 	strex	r1, r2, [r0]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	d1f3      	bne.n	80051c0 <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 80051d8:	2220      	movs	r2, #32
 80051da:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	e843 2100 	strex	r1, r2, [r3]
 80051ea:	2900      	cmp	r1, #0
 80051ec:	d1f7      	bne.n	80051de <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80051f0:	f7fe f88d 	bl	800330e <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80051f8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80051fc:	1ac9      	subs	r1, r1, r3
 80051fe:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff ff18 	bl	8005036 <HAL_UARTEx_RxEventCallback>
 8005206:	e7a6      	b.n	8005156 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005208:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800520c:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800520e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8005212:	b289      	uxth	r1, r1
 8005214:	2900      	cmp	r1, #0
 8005216:	d09e      	beq.n	8005156 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005218:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800521c:	1a89      	subs	r1, r1, r2
 800521e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005220:	2900      	cmp	r1, #0
 8005222:	d098      	beq.n	8005156 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	e843 2000 	strex	r0, r2, [r3]
 8005230:	2800      	cmp	r0, #0
 8005232:	d1f7      	bne.n	8005224 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	f103 0208 	add.w	r2, r3, #8
 8005238:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	f103 0508 	add.w	r5, r3, #8
 8005244:	e845 2000 	strex	r0, r2, [r5]
 8005248:	2800      	cmp	r0, #0
 800524a:	d1f3      	bne.n	8005234 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 800524c:	2220      	movs	r2, #32
 800524e:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005250:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005258:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	e843 2000 	strex	r0, r2, [r3]
 8005260:	2800      	cmp	r0, #0
 8005262:	d1f7      	bne.n	8005254 <HAL_UART_IRQHandler+0x21c>
 8005264:	e7cc      	b.n	8005200 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005266:	02d6      	lsls	r6, r2, #11
 8005268:	d509      	bpl.n	800527e <HAL_UART_IRQHandler+0x246>
 800526a:	0268      	lsls	r0, r5, #9
 800526c:	d507      	bpl.n	800527e <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800526e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005272:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800527a:	f000 bbc9 	b.w	8005a10 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800527e:	0616      	lsls	r6, r2, #24
 8005280:	d507      	bpl.n	8005292 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005282:	060d      	lsls	r5, r1, #24
 8005284:	d505      	bpl.n	8005292 <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 8005286:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005288:	2b00      	cmp	r3, #0
 800528a:	f43f af64 	beq.w	8005156 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 800528e:	4620      	mov	r0, r4
 8005290:	e6e5      	b.n	800505e <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005292:	0650      	lsls	r0, r2, #25
 8005294:	f57f af5f 	bpl.w	8005156 <HAL_UART_IRQHandler+0x11e>
 8005298:	064a      	lsls	r2, r1, #25
 800529a:	f57f af5c 	bpl.w	8005156 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	e843 2100 	strex	r1, r2, [r3]
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d1f7      	bne.n	800529e <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ae:	2320      	movs	r3, #32
 80052b0:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052b2:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fe42 	bl	8004f3e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ba:	e74c      	b.n	8005156 <HAL_UART_IRQHandler+0x11e>
 80052bc:	04000120 	.word	0x04000120
 80052c0:	08004f43 	.word	0x08004f43

080052c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052c4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052c8:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	d144      	bne.n	8005358 <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ce:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80052d4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80052d6:	400b      	ands	r3, r1
 80052d8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80052da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80052dc:	3301      	adds	r3, #1
 80052de:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052e0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052ec:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	bb6b      	cbnz	r3, 8005350 <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	e852 3f00 	ldrex	r3, [r2]
 80052fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005302:	6803      	ldr	r3, [r0, #0]
 8005304:	2900      	cmp	r1, #0
 8005306:	d1f5      	bne.n	80052f4 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	f103 0208 	add.w	r2, r3, #8
 800530c:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	f103 0c08 	add.w	ip, r3, #8
 8005318:	e84c 2100 	strex	r1, r2, [ip]
 800531c:	2900      	cmp	r1, #0
 800531e:	d1f3      	bne.n	8005308 <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005320:	2220      	movs	r2, #32
 8005322:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005326:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	2a01      	cmp	r2, #1
 800532a:	d112      	bne.n	8005352 <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005332:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	e843 2100 	strex	r1, r2, [r3]
 800533a:	2900      	cmp	r1, #0
 800533c:	d1f7      	bne.n	800532e <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800533e:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005340:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005344:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005346:	bf44      	itt	mi
 8005348:	2210      	movmi	r2, #16
 800534a:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800534c:	f7ff fe73 	bl	8005036 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005350:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005352:	f7fc fb5d 	bl	8001a10 <HAL_UART_RxCpltCallback>
 8005356:	e7fb      	b.n	8005350 <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005358:	8b13      	ldrh	r3, [r2, #24]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f043 0308 	orr.w	r3, r3, #8
 8005360:	8313      	strh	r3, [r2, #24]
}
 8005362:	e7f5      	b.n	8005350 <UART_RxISR_8BIT+0x8c>

08005364 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005364:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005366:	2a22      	cmp	r2, #34	; 0x22
{
 8005368:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800536c:	d141      	bne.n	80053f2 <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005370:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8005374:	4011      	ands	r1, r2
 8005376:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005378:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800537c:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800537e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8005382:	3a01      	subs	r2, #1
 8005384:	b292      	uxth	r2, r2
 8005386:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800538a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800538e:	b292      	uxth	r2, r2
 8005390:	bb5a      	cbnz	r2, 80053ea <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	e843 2100 	strex	r1, r2, [r3]
 800539e:	2900      	cmp	r1, #0
 80053a0:	d1f7      	bne.n	8005392 <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	f103 0208 	add.w	r2, r3, #8
 80053a6:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	f103 0c08 	add.w	ip, r3, #8
 80053b2:	e84c 2100 	strex	r1, r2, [ip]
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d1f3      	bne.n	80053a2 <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ba:	2220      	movs	r2, #32
 80053bc:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80053c0:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c2:	2a01      	cmp	r2, #1
 80053c4:	d112      	bne.n	80053ec <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	e843 2100 	strex	r1, r2, [r3]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d1f7      	bne.n	80053c8 <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053d8:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053da:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053de:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053e0:	bf44      	itt	mi
 80053e2:	2210      	movmi	r2, #16
 80053e4:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e6:	f7ff fe26 	bl	8005036 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053ea:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80053ec:	f7fc fb10 	bl	8001a10 <HAL_UART_RxCpltCallback>
 80053f0:	e7fb      	b.n	80053ea <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053f2:	8b1a      	ldrh	r2, [r3, #24]
 80053f4:	b292      	uxth	r2, r2
 80053f6:	f042 0208 	orr.w	r2, r2, #8
 80053fa:	831a      	strh	r2, [r3, #24]
}
 80053fc:	e7f5      	b.n	80053ea <UART_RxISR_16BIT+0x86>
	...

08005400 <UART_SetConfig>:
{
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005404:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005406:	6921      	ldr	r1, [r4, #16]
 8005408:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800540a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800540c:	69c0      	ldr	r0, [r0, #28]
 800540e:	430a      	orrs	r2, r1
 8005410:	6961      	ldr	r1, [r4, #20]
 8005412:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005414:	4979      	ldr	r1, [pc, #484]	; (80055fc <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005416:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005418:	4029      	ands	r1, r5
 800541a:	430a      	orrs	r2, r1
 800541c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68e1      	ldr	r1, [r4, #12]
 8005422:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800542a:	4a75      	ldr	r2, [pc, #468]	; (8005600 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800542e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005430:	bf1c      	itt	ne
 8005432:	6a22      	ldrne	r2, [r4, #32]
 8005434:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005440:	4a70      	ldr	r2, [pc, #448]	; (8005604 <UART_SetConfig+0x204>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d117      	bne.n	8005476 <UART_SetConfig+0x76>
 8005446:	4b70      	ldr	r3, [pc, #448]	; (8005608 <UART_SetConfig+0x208>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	3b01      	subs	r3, #1
 8005452:	2b02      	cmp	r3, #2
 8005454:	f200 80b0 	bhi.w	80055b8 <UART_SetConfig+0x1b8>
 8005458:	4a6c      	ldr	r2, [pc, #432]	; (800560c <UART_SetConfig+0x20c>)
 800545a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005460:	f040 808b 	bne.w	800557a <UART_SetConfig+0x17a>
    switch (clocksource)
 8005464:	2b08      	cmp	r3, #8
 8005466:	d822      	bhi.n	80054ae <UART_SetConfig+0xae>
 8005468:	e8df f003 	tbb	[pc, r3]
 800546c:	2185a969 	.word	0x2185a969
 8005470:	21212182 	.word	0x21212182
 8005474:	6d          	.byte	0x6d
 8005475:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005476:	4a66      	ldr	r2, [pc, #408]	; (8005610 <UART_SetConfig+0x210>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d106      	bne.n	800548a <UART_SetConfig+0x8a>
 800547c:	4b62      	ldr	r3, [pc, #392]	; (8005608 <UART_SetConfig+0x208>)
 800547e:	4a65      	ldr	r2, [pc, #404]	; (8005614 <UART_SetConfig+0x214>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	e7e7      	b.n	800545a <UART_SetConfig+0x5a>
 800548a:	4a63      	ldr	r2, [pc, #396]	; (8005618 <UART_SetConfig+0x218>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d118      	bne.n	80054c2 <UART_SetConfig+0xc2>
 8005490:	4b5d      	ldr	r3, [pc, #372]	; (8005608 <UART_SetConfig+0x208>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800549a:	2b20      	cmp	r3, #32
 800549c:	f000 8087 	beq.w	80055ae <UART_SetConfig+0x1ae>
 80054a0:	d807      	bhi.n	80054b2 <UART_SetConfig+0xb2>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8094 	beq.w	80055d0 <UART_SetConfig+0x1d0>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	f000 808b 	beq.w	80055c4 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ae:	2001      	movs	r0, #1
 80054b0:	e024      	b.n	80054fc <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b2:	2b30      	cmp	r3, #48	; 0x30
 80054b4:	d1fb      	bne.n	80054ae <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054ba:	d044      	beq.n	8005546 <UART_SetConfig+0x146>
 80054bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80054c0:	e08d      	b.n	80055de <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c2:	4a4f      	ldr	r2, [pc, #316]	; (8005600 <UART_SetConfig+0x200>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d1f2      	bne.n	80054ae <UART_SetConfig+0xae>
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <UART_SetConfig+0x208>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d015      	beq.n	8005504 <UART_SetConfig+0x104>
 80054d8:	d806      	bhi.n	80054e8 <UART_SetConfig+0xe8>
 80054da:	b15b      	cbz	r3, 80054f4 <UART_SetConfig+0xf4>
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d1e5      	bne.n	80054ae <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe fa6d 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
        break;
 80054e6:	e007      	b.n	80054f8 <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ec:	d1df      	bne.n	80054ae <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80054f2:	e008      	b.n	8005506 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7fe fe38 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054f8:	b928      	cbnz	r0, 8005506 <UART_SetConfig+0x106>
 80054fa:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80054fc:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80054fe:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8005502:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4845      	ldr	r0, [pc, #276]	; (800561c <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005506:	6862      	ldr	r2, [r4, #4]
 8005508:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800550c:	4283      	cmp	r3, r0
 800550e:	d8ce      	bhi.n	80054ae <UART_SetConfig+0xae>
 8005510:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005514:	d8cb      	bhi.n	80054ae <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005516:	0851      	lsrs	r1, r2, #1
 8005518:	2500      	movs	r5, #0
 800551a:	468c      	mov	ip, r1
 800551c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005520:	4629      	mov	r1, r5
 8005522:	fbe0 c106 	umlal	ip, r1, r0, r6
 8005526:	462b      	mov	r3, r5
 8005528:	4660      	mov	r0, ip
 800552a:	f7fb fbad 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800552e:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <UART_SetConfig+0x220>)
 8005530:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005534:	429a      	cmp	r2, r3
 8005536:	d8ba      	bhi.n	80054ae <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	60d8      	str	r0, [r3, #12]
 800553c:	e7dd      	b.n	80054fa <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800553e:	f7fe fe13 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005542:	2800      	cmp	r0, #0
 8005544:	d0d9      	beq.n	80054fa <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005546:	6862      	ldr	r2, [r4, #4]
 8005548:	0853      	lsrs	r3, r2, #1
 800554a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005552:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005556:	f1a0 0210 	sub.w	r2, r0, #16
 800555a:	429a      	cmp	r2, r3
 800555c:	d8a7      	bhi.n	80054ae <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005562:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005564:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005566:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800556a:	4318      	orrs	r0, r3
 800556c:	60d0      	str	r0, [r2, #12]
 800556e:	e7c4      	b.n	80054fa <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005570:	f7fe fa26 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005574:	e7e5      	b.n	8005542 <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 8005576:	4829      	ldr	r0, [pc, #164]	; (800561c <UART_SetConfig+0x21c>)
 8005578:	e7e5      	b.n	8005546 <UART_SetConfig+0x146>
    switch (clocksource)
 800557a:	2b08      	cmp	r3, #8
 800557c:	d897      	bhi.n	80054ae <UART_SetConfig+0xae>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0x184>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055d7 	.word	0x080055d7
 8005588:	080055a9 	.word	0x080055a9
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080054af 	.word	0x080054af
 8005594:	080055cb 	.word	0x080055cb
 8005598:	080054af 	.word	0x080054af
 800559c:	080054af 	.word	0x080054af
 80055a0:	080054af 	.word	0x080054af
 80055a4:	080054bd 	.word	0x080054bd
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a8:	f7fe fdf0 	bl	800418c <HAL_RCC_GetPCLK2Freq>
        break;
 80055ac:	e015      	b.n	80055da <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80055b2:	d0e0      	beq.n	8005576 <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 80055b4:	4819      	ldr	r0, [pc, #100]	; (800561c <UART_SetConfig+0x21c>)
 80055b6:	e012      	b.n	80055de <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80055bc:	d1f4      	bne.n	80055a8 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80055be:	f7fe fde5 	bl	800418c <HAL_RCC_GetPCLK2Freq>
        break;
 80055c2:	e7be      	b.n	8005542 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80055c8:	d0d2      	beq.n	8005570 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 80055ca:	f7fe f9f9 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
        break;
 80055ce:	e004      	b.n	80055da <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80055d4:	d0b3      	beq.n	800553e <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d6:	f7fe fdc7 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80055da:	2800      	cmp	r0, #0
 80055dc:	d08d      	beq.n	80054fa <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80055e4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80055ec:	f1a3 0110 	sub.w	r1, r3, #16
 80055f0:	4291      	cmp	r1, r2
 80055f2:	f63f af5c 	bhi.w	80054ae <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	60d3      	str	r3, [r2, #12]
 80055fa:	e77e      	b.n	80054fa <UART_SetConfig+0xfa>
 80055fc:	efff69f3 	.word	0xefff69f3
 8005600:	40008000 	.word	0x40008000
 8005604:	40013800 	.word	0x40013800
 8005608:	40021000 	.word	0x40021000
 800560c:	0800b2f4 	.word	0x0800b2f4
 8005610:	40004400 	.word	0x40004400
 8005614:	0800b2f7 	.word	0x0800b2f7
 8005618:	40004800 	.word	0x40004800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	000ffcff 	.word	0x000ffcff

08005624 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005624:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005626:	07da      	lsls	r2, r3, #31
{
 8005628:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800562a:	d506      	bpl.n	800563a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800562c:	6801      	ldr	r1, [r0, #0]
 800562e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005630:	684a      	ldr	r2, [r1, #4]
 8005632:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005636:	4322      	orrs	r2, r4
 8005638:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563a:	079c      	lsls	r4, r3, #30
 800563c:	d506      	bpl.n	800564c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800563e:	6801      	ldr	r1, [r0, #0]
 8005640:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005642:	684a      	ldr	r2, [r1, #4]
 8005644:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005648:	4322      	orrs	r2, r4
 800564a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800564c:	0759      	lsls	r1, r3, #29
 800564e:	d506      	bpl.n	800565e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005650:	6801      	ldr	r1, [r0, #0]
 8005652:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005654:	684a      	ldr	r2, [r1, #4]
 8005656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800565a:	4322      	orrs	r2, r4
 800565c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565e:	071a      	lsls	r2, r3, #28
 8005660:	d506      	bpl.n	8005670 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005662:	6801      	ldr	r1, [r0, #0]
 8005664:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005666:	684a      	ldr	r2, [r1, #4]
 8005668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800566c:	4322      	orrs	r2, r4
 800566e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005670:	06dc      	lsls	r4, r3, #27
 8005672:	d506      	bpl.n	8005682 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005674:	6801      	ldr	r1, [r0, #0]
 8005676:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800567e:	4322      	orrs	r2, r4
 8005680:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005682:	0699      	lsls	r1, r3, #26
 8005684:	d506      	bpl.n	8005694 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005686:	6801      	ldr	r1, [r0, #0]
 8005688:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800568a:	688a      	ldr	r2, [r1, #8]
 800568c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005690:	4322      	orrs	r2, r4
 8005692:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005694:	065a      	lsls	r2, r3, #25
 8005696:	d50f      	bpl.n	80056b8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005698:	6801      	ldr	r1, [r0, #0]
 800569a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800569c:	684a      	ldr	r2, [r1, #4]
 800569e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80056a2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056aa:	d105      	bne.n	80056b8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ac:	684a      	ldr	r2, [r1, #4]
 80056ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80056b0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80056b4:	4322      	orrs	r2, r4
 80056b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	d506      	bpl.n	80056ca <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056bc:	6802      	ldr	r2, [r0, #0]
 80056be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80056c0:	6853      	ldr	r3, [r2, #4]
 80056c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6053      	str	r3, [r2, #4]
}
 80056ca:	bd10      	pop	{r4, pc}

080056cc <UART_WaitOnFlagUntilTimeout>:
{
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80056d4:	4604      	mov	r4, r0
 80056d6:	460e      	mov	r6, r1
 80056d8:	4615      	mov	r5, r2
 80056da:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	69d3      	ldr	r3, [r2, #28]
 80056e0:	ea36 0303 	bics.w	r3, r6, r3
 80056e4:	bf0c      	ite	eq
 80056e6:	2301      	moveq	r3, #1
 80056e8:	2300      	movne	r3, #0
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	d001      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80056ee:	2000      	movs	r0, #0
 80056f0:	e025      	b.n	800573e <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80056f6:	d0f2      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7fc fe44 	bl	8002384 <HAL_GetTick>
 80056fc:	1bc0      	subs	r0, r0, r7
 80056fe:	4540      	cmp	r0, r8
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	d802      	bhi.n	800570a <UART_WaitOnFlagUntilTimeout+0x3e>
 8005704:	f1b8 0f00 	cmp.w	r8, #0
 8005708:	d11b      	bne.n	8005742 <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	e840 3200 	strex	r2, r3, [r0]
 8005716:	2a00      	cmp	r2, #0
 8005718:	d1f7      	bne.n	800570a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	f100 0308 	add.w	r3, r0, #8
 800571e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	f100 0108 	add.w	r1, r0, #8
 800572a:	e841 3200 	strex	r2, r3, [r1]
 800572e:	2a00      	cmp	r2, #0
 8005730:	d1f3      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005732:	2320      	movs	r3, #32
 8005734:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005736:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005738:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800573c:	2003      	movs	r0, #3
}
 800573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005742:	6803      	ldr	r3, [r0, #0]
 8005744:	075a      	lsls	r2, r3, #29
 8005746:	d5c9      	bpl.n	80056dc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005748:	69c3      	ldr	r3, [r0, #28]
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	d5c6      	bpl.n	80056dc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005752:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	e840 3200 	strex	r2, r3, [r0]
 8005760:	2a00      	cmp	r2, #0
 8005762:	d1f7      	bne.n	8005754 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	f100 0308 	add.w	r3, r0, #8
 8005768:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	f100 0108 	add.w	r1, r0, #8
 8005774:	e841 3200 	strex	r2, r3, [r1]
 8005778:	2a00      	cmp	r2, #0
 800577a:	d1f3      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800577c:	2320      	movs	r3, #32
 800577e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005780:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005782:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005786:	e7d7      	b.n	8005738 <UART_WaitOnFlagUntilTimeout+0x6c>

08005788 <HAL_UART_Transmit>:
{
 8005788:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800578c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800578e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005790:	2b20      	cmp	r3, #32
{
 8005792:	4604      	mov	r4, r0
 8005794:	460e      	mov	r6, r1
 8005796:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005798:	d14e      	bne.n	8005838 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800579a:	2900      	cmp	r1, #0
 800579c:	d04a      	beq.n	8005834 <HAL_UART_Transmit+0xac>
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d048      	beq.n	8005834 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80057a2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d046      	beq.n	8005838 <HAL_UART_Transmit+0xb0>
 80057aa:	2301      	movs	r3, #1
 80057ac:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b8:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80057ba:	f7fc fde3 	bl	8002384 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057be:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80057c0:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80057c8:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80057ca:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	d103      	bne.n	80057d8 <HAL_UART_Transmit+0x50>
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	b90a      	cbnz	r2, 80057d8 <HAL_UART_Transmit+0x50>
 80057d4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80057d6:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80057d8:	2200      	movs	r2, #0
 80057da:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80057de:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80057e6:	b292      	uxth	r2, r2
 80057e8:	b93a      	cbnz	r2, 80057fa <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ea:	2140      	movs	r1, #64	; 0x40
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff ff6d 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 80057f2:	b950      	cbnz	r0, 800580a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80057f4:	2320      	movs	r3, #32
 80057f6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80057f8:	e008      	b.n	800580c <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	2200      	movs	r2, #0
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	4620      	mov	r0, r4
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	f7ff ff63 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	b118      	cbz	r0, 8005812 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 800580a:	2003      	movs	r0, #3
}
 800580c:	b004      	add	sp, #16
 800580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005812:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005814:	b95e      	cbnz	r6, 800582e <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	f835 2b02 	ldrh.w	r2, [r5], #2
 800581a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800581e:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005820:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005824:	3a01      	subs	r2, #1
 8005826:	b292      	uxth	r2, r2
 8005828:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800582c:	e7d7      	b.n	80057de <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005832:	e7f4      	b.n	800581e <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005834:	2001      	movs	r0, #1
 8005836:	e7e9      	b.n	800580c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005838:	2002      	movs	r0, #2
 800583a:	e7e7      	b.n	800580c <HAL_UART_Transmit+0x84>

0800583c <UART_CheckIdleState>:
{
 800583c:	b530      	push	{r4, r5, lr}
 800583e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	2500      	movs	r5, #0
{
 8005842:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005848:	f7fc fd9c 	bl	8002384 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005852:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005854:	d415      	bmi.n	8005882 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	0752      	lsls	r2, r2, #29
 800585c:	d509      	bpl.n	8005872 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800585e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005862:	9200      	str	r2, [sp, #0]
 8005864:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005868:	2200      	movs	r2, #0
 800586a:	4620      	mov	r0, r4
 800586c:	f7ff ff2e 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005870:	b9a0      	cbnz	r0, 800589c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005872:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005876:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005878:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800587c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8005880:	e00d      	b.n	800589e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005882:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005886:	9200      	str	r2, [sp, #0]
 8005888:	9003      	str	r0, [sp, #12]
 800588a:	462a      	mov	r2, r5
 800588c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005890:	4620      	mov	r0, r4
 8005892:	f7ff ff1b 	bl	80056cc <UART_WaitOnFlagUntilTimeout>
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	2800      	cmp	r0, #0
 800589a:	d0dc      	beq.n	8005856 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800589c:	2003      	movs	r0, #3
}
 800589e:	b005      	add	sp, #20
 80058a0:	bd30      	pop	{r4, r5, pc}

080058a2 <HAL_UART_Init>:
{
 80058a2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80058a4:	4604      	mov	r4, r0
 80058a6:	b340      	cbz	r0, 80058fa <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80058a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80058aa:	b91b      	cbnz	r3, 80058b4 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80058ac:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80058b0:	f7fc fbd4 	bl	800205c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80058b4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	2324      	movs	r3, #36	; 0x24
 80058b8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff fd9c 	bl	8005400 <UART_SetConfig>
 80058c8:	2801      	cmp	r0, #1
 80058ca:	d016      	beq.n	80058fa <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ce:	b113      	cbz	r3, 80058d6 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff fea7 	bl	8005624 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80058ee:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80058f6:	f7ff bfa1 	b.w	800583c <UART_CheckIdleState>
}
 80058fa:	2001      	movs	r0, #1
 80058fc:	bd10      	pop	{r4, pc}
	...

08005900 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8005900:	6883      	ldr	r3, [r0, #8]
{
 8005902:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8005908:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800590c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005910:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 8005914:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8005916:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005918:	d132      	bne.n	8005980 <UART_Start_Receive_IT+0x80>
 800591a:	6903      	ldr	r3, [r0, #16]
 800591c:	bb73      	cbnz	r3, 800597c <UART_Start_Receive_IT+0x7c>
 800591e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005922:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800592c:	2322      	movs	r3, #34	; 0x22
 800592e:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	f102 0308 	add.w	r3, r2, #8
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	3208      	adds	r2, #8
 8005940:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005944:	6802      	ldr	r2, [r0, #0]
 8005946:	2900      	cmp	r1, #0
 8005948:	d1f2      	bne.n	8005930 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594a:	6883      	ldr	r3, [r0, #8]
 800594c:	6901      	ldr	r1, [r0, #16]
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005952:	d126      	bne.n	80059a2 <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <UART_Start_Receive_IT+0xb8>)
 8005956:	4c19      	ldr	r4, [pc, #100]	; (80059bc <UART_Start_Receive_IT+0xbc>)
 8005958:	2900      	cmp	r1, #0
 800595a:	bf18      	it	ne
 800595c:	4623      	movne	r3, r4
 800595e:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005960:	2300      	movs	r3, #0
 8005962:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005966:	b1f1      	cbz	r1, 80059a6 <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800596c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	e842 3100 	strex	r1, r3, [r2]
 8005974:	2900      	cmp	r1, #0
 8005976:	d1f7      	bne.n	8005968 <UART_Start_Receive_IT+0x68>
}
 8005978:	2000      	movs	r0, #0
 800597a:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800597c:	23ff      	movs	r3, #255	; 0xff
 800597e:	e7d0      	b.n	8005922 <UART_Start_Receive_IT+0x22>
 8005980:	b923      	cbnz	r3, 800598c <UART_Start_Receive_IT+0x8c>
 8005982:	6903      	ldr	r3, [r0, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f9      	beq.n	800597c <UART_Start_Receive_IT+0x7c>
 8005988:	237f      	movs	r3, #127	; 0x7f
 800598a:	e7ca      	b.n	8005922 <UART_Start_Receive_IT+0x22>
 800598c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005990:	d104      	bne.n	800599c <UART_Start_Receive_IT+0x9c>
 8005992:	6903      	ldr	r3, [r0, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f7      	beq.n	8005988 <UART_Start_Receive_IT+0x88>
 8005998:	233f      	movs	r3, #63	; 0x3f
 800599a:	e7c2      	b.n	8005922 <UART_Start_Receive_IT+0x22>
 800599c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80059a0:	e7c1      	b.n	8005926 <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <UART_Start_Receive_IT+0xbc>)
 80059a4:	e7db      	b.n	800595e <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80059aa:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	e842 3100 	strex	r1, r3, [r2]
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d1f7      	bne.n	80059a6 <UART_Start_Receive_IT+0xa6>
 80059b6:	e7df      	b.n	8005978 <UART_Start_Receive_IT+0x78>
 80059b8:	08005365 	.word	0x08005365
 80059bc:	080052c5 	.word	0x080052c5

080059c0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80059c2:	2b20      	cmp	r3, #32
{
 80059c4:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c6:	d11f      	bne.n	8005a08 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80059c8:	b1d9      	cbz	r1, 8005a02 <HAL_UART_Receive_IT+0x42>
 80059ca:	b1d2      	cbz	r2, 8005a02 <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 80059cc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d019      	beq.n	8005a08 <HAL_UART_Receive_IT+0x48>
 80059d4:	2301      	movs	r3, #1
 80059d6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059dc:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <HAL_UART_Receive_IT+0x4c>)
 80059e2:	429c      	cmp	r4, r3
 80059e4:	d00a      	beq.n	80059fc <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	d507      	bpl.n	80059fc <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	e844 3500 	strex	r5, r3, [r4]
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	d1f7      	bne.n	80059ec <HAL_UART_Receive_IT+0x2c>
}
 80059fc:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80059fe:	f7ff bf7f 	b.w	8005900 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8005a02:	2001      	movs	r0, #1
}
 8005a04:	bc30      	pop	{r4, r5}
 8005a06:	4770      	bx	lr
    return HAL_BUSY;
 8005a08:	2002      	movs	r0, #2
 8005a0a:	e7fb      	b.n	8005a04 <HAL_UART_Receive_IT+0x44>
 8005a0c:	40008000 	.word	0x40008000

08005a10 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a10:	4770      	bx	lr
	...

08005a14 <__errno>:
 8005a14:	4b01      	ldr	r3, [pc, #4]	; (8005a1c <__errno+0x8>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	2000003c 	.word	0x2000003c

08005a20 <__libc_init_array>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4d0d      	ldr	r5, [pc, #52]	; (8005a58 <__libc_init_array+0x38>)
 8005a24:	4c0d      	ldr	r4, [pc, #52]	; (8005a5c <__libc_init_array+0x3c>)
 8005a26:	1b64      	subs	r4, r4, r5
 8005a28:	10a4      	asrs	r4, r4, #2
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	42a6      	cmp	r6, r4
 8005a2e:	d109      	bne.n	8005a44 <__libc_init_array+0x24>
 8005a30:	4d0b      	ldr	r5, [pc, #44]	; (8005a60 <__libc_init_array+0x40>)
 8005a32:	4c0c      	ldr	r4, [pc, #48]	; (8005a64 <__libc_init_array+0x44>)
 8005a34:	f005 f9be 	bl	800adb4 <_init>
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	2600      	movs	r6, #0
 8005a3e:	42a6      	cmp	r6, r4
 8005a40:	d105      	bne.n	8005a4e <__libc_init_array+0x2e>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a48:	4798      	blx	r3
 8005a4a:	3601      	adds	r6, #1
 8005a4c:	e7ee      	b.n	8005a2c <__libc_init_array+0xc>
 8005a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a52:	4798      	blx	r3
 8005a54:	3601      	adds	r6, #1
 8005a56:	e7f2      	b.n	8005a3e <__libc_init_array+0x1e>
 8005a58:	0800b7cc 	.word	0x0800b7cc
 8005a5c:	0800b7cc 	.word	0x0800b7cc
 8005a60:	0800b7cc 	.word	0x0800b7cc
 8005a64:	0800b7d0 	.word	0x0800b7d0

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <__cvt>:
 8005a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	ec55 4b10 	vmov	r4, r5, d0
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	460e      	mov	r6, r1
 8005a84:	4619      	mov	r1, r3
 8005a86:	462b      	mov	r3, r5
 8005a88:	bfbb      	ittet	lt
 8005a8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a8e:	461d      	movlt	r5, r3
 8005a90:	2300      	movge	r3, #0
 8005a92:	232d      	movlt	r3, #45	; 0x2d
 8005a94:	700b      	strb	r3, [r1, #0]
 8005a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a9c:	4691      	mov	r9, r2
 8005a9e:	f023 0820 	bic.w	r8, r3, #32
 8005aa2:	bfbc      	itt	lt
 8005aa4:	4622      	movlt	r2, r4
 8005aa6:	4614      	movlt	r4, r2
 8005aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aac:	d005      	beq.n	8005aba <__cvt+0x42>
 8005aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ab2:	d100      	bne.n	8005ab6 <__cvt+0x3e>
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	e000      	b.n	8005abc <__cvt+0x44>
 8005aba:	2103      	movs	r1, #3
 8005abc:	ab03      	add	r3, sp, #12
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	ab02      	add	r3, sp, #8
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	ec45 4b10 	vmov	d0, r4, r5
 8005ac8:	4653      	mov	r3, sl
 8005aca:	4632      	mov	r2, r6
 8005acc:	f001 ffc4 	bl	8007a58 <_dtoa_r>
 8005ad0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	d102      	bne.n	8005ade <__cvt+0x66>
 8005ad8:	f019 0f01 	tst.w	r9, #1
 8005adc:	d022      	beq.n	8005b24 <__cvt+0xac>
 8005ade:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae2:	eb07 0906 	add.w	r9, r7, r6
 8005ae6:	d110      	bne.n	8005b0a <__cvt+0x92>
 8005ae8:	783b      	ldrb	r3, [r7, #0]
 8005aea:	2b30      	cmp	r3, #48	; 0x30
 8005aec:	d10a      	bne.n	8005b04 <__cvt+0x8c>
 8005aee:	2200      	movs	r2, #0
 8005af0:	2300      	movs	r3, #0
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005afa:	b918      	cbnz	r0, 8005b04 <__cvt+0x8c>
 8005afc:	f1c6 0601 	rsb	r6, r6, #1
 8005b00:	f8ca 6000 	str.w	r6, [sl]
 8005b04:	f8da 3000 	ldr.w	r3, [sl]
 8005b08:	4499      	add	r9, r3
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b16:	b108      	cbz	r0, 8005b1c <__cvt+0xa4>
 8005b18:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b1c:	2230      	movs	r2, #48	; 0x30
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	454b      	cmp	r3, r9
 8005b22:	d307      	bcc.n	8005b34 <__cvt+0xbc>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b28:	1bdb      	subs	r3, r3, r7
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	b004      	add	sp, #16
 8005b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	9103      	str	r1, [sp, #12]
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	e7f0      	b.n	8005b1e <__cvt+0xa6>

08005b3c <__exponent>:
 8005b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2900      	cmp	r1, #0
 8005b42:	bfb8      	it	lt
 8005b44:	4249      	neglt	r1, r1
 8005b46:	f803 2b02 	strb.w	r2, [r3], #2
 8005b4a:	bfb4      	ite	lt
 8005b4c:	222d      	movlt	r2, #45	; 0x2d
 8005b4e:	222b      	movge	r2, #43	; 0x2b
 8005b50:	2909      	cmp	r1, #9
 8005b52:	7042      	strb	r2, [r0, #1]
 8005b54:	dd2a      	ble.n	8005bac <__exponent+0x70>
 8005b56:	f10d 0407 	add.w	r4, sp, #7
 8005b5a:	46a4      	mov	ip, r4
 8005b5c:	270a      	movs	r7, #10
 8005b5e:	46a6      	mov	lr, r4
 8005b60:	460a      	mov	r2, r1
 8005b62:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b66:	fb07 1516 	mls	r5, r7, r6, r1
 8005b6a:	3530      	adds	r5, #48	; 0x30
 8005b6c:	2a63      	cmp	r2, #99	; 0x63
 8005b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b76:	4631      	mov	r1, r6
 8005b78:	dcf1      	bgt.n	8005b5e <__exponent+0x22>
 8005b7a:	3130      	adds	r1, #48	; 0x30
 8005b7c:	f1ae 0502 	sub.w	r5, lr, #2
 8005b80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b84:	1c44      	adds	r4, r0, #1
 8005b86:	4629      	mov	r1, r5
 8005b88:	4561      	cmp	r1, ip
 8005b8a:	d30a      	bcc.n	8005ba2 <__exponent+0x66>
 8005b8c:	f10d 0209 	add.w	r2, sp, #9
 8005b90:	eba2 020e 	sub.w	r2, r2, lr
 8005b94:	4565      	cmp	r5, ip
 8005b96:	bf88      	it	hi
 8005b98:	2200      	movhi	r2, #0
 8005b9a:	4413      	add	r3, r2
 8005b9c:	1a18      	subs	r0, r3, r0
 8005b9e:	b003      	add	sp, #12
 8005ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005baa:	e7ed      	b.n	8005b88 <__exponent+0x4c>
 8005bac:	2330      	movs	r3, #48	; 0x30
 8005bae:	3130      	adds	r1, #48	; 0x30
 8005bb0:	7083      	strb	r3, [r0, #2]
 8005bb2:	70c1      	strb	r1, [r0, #3]
 8005bb4:	1d03      	adds	r3, r0, #4
 8005bb6:	e7f1      	b.n	8005b9c <__exponent+0x60>

08005bb8 <_printf_float>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	ed2d 8b02 	vpush	{d8}
 8005bc0:	b08d      	sub	sp, #52	; 0x34
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bc8:	4616      	mov	r6, r2
 8005bca:	461f      	mov	r7, r3
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f003 fa57 	bl	8009080 <_localeconv_r>
 8005bd2:	f8d0 a000 	ldr.w	sl, [r0]
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	f7fa fafa 	bl	80001d0 <strlen>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930a      	str	r3, [sp, #40]	; 0x28
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	9305      	str	r3, [sp, #20]
 8005be4:	f8d8 3000 	ldr.w	r3, [r8]
 8005be8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bec:	3307      	adds	r3, #7
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	f103 0208 	add.w	r2, r3, #8
 8005bf6:	f8c8 2000 	str.w	r2, [r8]
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c10:	ee08 0a10 	vmov	s16, r0
 8005c14:	4b9f      	ldr	r3, [pc, #636]	; (8005e94 <_printf_float+0x2dc>)
 8005c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1e:	f7fa ff85 	bl	8000b2c <__aeabi_dcmpun>
 8005c22:	bb88      	cbnz	r0, 8005c88 <_printf_float+0xd0>
 8005c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c28:	4b9a      	ldr	r3, [pc, #616]	; (8005e94 <_printf_float+0x2dc>)
 8005c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2e:	f7fa ff5f 	bl	8000af0 <__aeabi_dcmple>
 8005c32:	bb48      	cbnz	r0, 8005c88 <_printf_float+0xd0>
 8005c34:	2200      	movs	r2, #0
 8005c36:	2300      	movs	r3, #0
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa ff4e 	bl	8000adc <__aeabi_dcmplt>
 8005c40:	b110      	cbz	r0, 8005c48 <_printf_float+0x90>
 8005c42:	232d      	movs	r3, #45	; 0x2d
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c48:	4b93      	ldr	r3, [pc, #588]	; (8005e98 <_printf_float+0x2e0>)
 8005c4a:	4894      	ldr	r0, [pc, #592]	; (8005e9c <_printf_float+0x2e4>)
 8005c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c50:	bf94      	ite	ls
 8005c52:	4698      	movls	r8, r3
 8005c54:	4680      	movhi	r8, r0
 8005c56:	2303      	movs	r3, #3
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	9b05      	ldr	r3, [sp, #20]
 8005c5c:	f023 0204 	bic.w	r2, r3, #4
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	f04f 0900 	mov.w	r9, #0
 8005c66:	9700      	str	r7, [sp, #0]
 8005c68:	4633      	mov	r3, r6
 8005c6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f9d8 	bl	8006024 <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f040 8090 	bne.w	8005d9a <_printf_float+0x1e2>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7e:	b00d      	add	sp, #52	; 0x34
 8005c80:	ecbd 8b02 	vpop	{d8}
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4649      	mov	r1, r9
 8005c90:	f7fa ff4c 	bl	8000b2c <__aeabi_dcmpun>
 8005c94:	b140      	cbz	r0, 8005ca8 <_printf_float+0xf0>
 8005c96:	464b      	mov	r3, r9
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfbc      	itt	lt
 8005c9c:	232d      	movlt	r3, #45	; 0x2d
 8005c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ca2:	487f      	ldr	r0, [pc, #508]	; (8005ea0 <_printf_float+0x2e8>)
 8005ca4:	4b7f      	ldr	r3, [pc, #508]	; (8005ea4 <_printf_float+0x2ec>)
 8005ca6:	e7d1      	b.n	8005c4c <_printf_float+0x94>
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cae:	9206      	str	r2, [sp, #24]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	d13f      	bne.n	8005d34 <_printf_float+0x17c>
 8005cb4:	2306      	movs	r3, #6
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	6861      	ldr	r1, [r4, #4]
 8005cbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	ab0a      	add	r3, sp, #40	; 0x28
 8005cc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cca:	ab09      	add	r3, sp, #36	; 0x24
 8005ccc:	ec49 8b10 	vmov	d0, r8, r9
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	6022      	str	r2, [r4, #0]
 8005cd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f7ff fecd 	bl	8005a78 <__cvt>
 8005cde:	9b06      	ldr	r3, [sp, #24]
 8005ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ce2:	2b47      	cmp	r3, #71	; 0x47
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	d108      	bne.n	8005cfa <_printf_float+0x142>
 8005ce8:	1cc8      	adds	r0, r1, #3
 8005cea:	db02      	blt.n	8005cf2 <_printf_float+0x13a>
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	4299      	cmp	r1, r3
 8005cf0:	dd41      	ble.n	8005d76 <_printf_float+0x1be>
 8005cf2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cf6:	fa5f fb8b 	uxtb.w	fp, fp
 8005cfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cfe:	d820      	bhi.n	8005d42 <_printf_float+0x18a>
 8005d00:	3901      	subs	r1, #1
 8005d02:	465a      	mov	r2, fp
 8005d04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d08:	9109      	str	r1, [sp, #36]	; 0x24
 8005d0a:	f7ff ff17 	bl	8005b3c <__exponent>
 8005d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d10:	1813      	adds	r3, r2, r0
 8005d12:	2a01      	cmp	r2, #1
 8005d14:	4681      	mov	r9, r0
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	dc02      	bgt.n	8005d20 <_printf_float+0x168>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	07d2      	lsls	r2, r2, #31
 8005d1e:	d501      	bpl.n	8005d24 <_printf_float+0x16c>
 8005d20:	3301      	adds	r3, #1
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d09c      	beq.n	8005c66 <_printf_float+0xae>
 8005d2c:	232d      	movs	r3, #45	; 0x2d
 8005d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d32:	e798      	b.n	8005c66 <_printf_float+0xae>
 8005d34:	9a06      	ldr	r2, [sp, #24]
 8005d36:	2a47      	cmp	r2, #71	; 0x47
 8005d38:	d1be      	bne.n	8005cb8 <_printf_float+0x100>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1bc      	bne.n	8005cb8 <_printf_float+0x100>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e7b9      	b.n	8005cb6 <_printf_float+0xfe>
 8005d42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d46:	d118      	bne.n	8005d7a <_printf_float+0x1c2>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	dd0b      	ble.n	8005d66 <_printf_float+0x1ae>
 8005d4e:	6121      	str	r1, [r4, #16]
 8005d50:	b913      	cbnz	r3, 8005d58 <_printf_float+0x1a0>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d0      	lsls	r0, r2, #31
 8005d56:	d502      	bpl.n	8005d5e <_printf_float+0x1a6>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d60:	f04f 0900 	mov.w	r9, #0
 8005d64:	e7de      	b.n	8005d24 <_printf_float+0x16c>
 8005d66:	b913      	cbnz	r3, 8005d6e <_printf_float+0x1b6>
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	07d2      	lsls	r2, r2, #31
 8005d6c:	d501      	bpl.n	8005d72 <_printf_float+0x1ba>
 8005d6e:	3302      	adds	r3, #2
 8005d70:	e7f4      	b.n	8005d5c <_printf_float+0x1a4>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f2      	b.n	8005d5c <_printf_float+0x1a4>
 8005d76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	db05      	blt.n	8005d8c <_printf_float+0x1d4>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	6121      	str	r1, [r4, #16]
 8005d84:	07d8      	lsls	r0, r3, #31
 8005d86:	d5ea      	bpl.n	8005d5e <_printf_float+0x1a6>
 8005d88:	1c4b      	adds	r3, r1, #1
 8005d8a:	e7e7      	b.n	8005d5c <_printf_float+0x1a4>
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	bfd4      	ite	le
 8005d90:	f1c1 0202 	rsble	r2, r1, #2
 8005d94:	2201      	movgt	r2, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	e7e0      	b.n	8005d5c <_printf_float+0x1a4>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	055a      	lsls	r2, r3, #21
 8005d9e:	d407      	bmi.n	8005db0 <_printf_float+0x1f8>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	4642      	mov	r2, r8
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d12c      	bne.n	8005e08 <_printf_float+0x250>
 8005dae:	e764      	b.n	8005c7a <_printf_float+0xc2>
 8005db0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005db4:	f240 80e0 	bls.w	8005f78 <_printf_float+0x3c0>
 8005db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f7fa fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d034      	beq.n	8005e32 <_printf_float+0x27a>
 8005dc8:	4a37      	ldr	r2, [pc, #220]	; (8005ea8 <_printf_float+0x2f0>)
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af51 	beq.w	8005c7a <_printf_float+0xc2>
 8005dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	db02      	blt.n	8005de6 <_printf_float+0x22e>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07d8      	lsls	r0, r3, #31
 8005de4:	d510      	bpl.n	8005e08 <_printf_float+0x250>
 8005de6:	ee18 3a10 	vmov	r3, s16
 8005dea:	4652      	mov	r2, sl
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f af41 	beq.w	8005c7a <_printf_float+0xc2>
 8005df8:	f04f 0800 	mov.w	r8, #0
 8005dfc:	f104 091a 	add.w	r9, r4, #26
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4543      	cmp	r3, r8
 8005e06:	dc09      	bgt.n	8005e1c <_printf_float+0x264>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	079b      	lsls	r3, r3, #30
 8005e0c:	f100 8105 	bmi.w	800601a <_printf_float+0x462>
 8005e10:	68e0      	ldr	r0, [r4, #12]
 8005e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e14:	4298      	cmp	r0, r3
 8005e16:	bfb8      	it	lt
 8005e18:	4618      	movlt	r0, r3
 8005e1a:	e730      	b.n	8005c7e <_printf_float+0xc6>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	464a      	mov	r2, r9
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f af27 	beq.w	8005c7a <_printf_float+0xc2>
 8005e2c:	f108 0801 	add.w	r8, r8, #1
 8005e30:	e7e6      	b.n	8005e00 <_printf_float+0x248>
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc39      	bgt.n	8005eac <_printf_float+0x2f4>
 8005e38:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <_printf_float+0x2f0>)
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f af19 	beq.w	8005c7a <_printf_float+0xc2>
 8005e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	d102      	bne.n	8005e56 <_printf_float+0x29e>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d5d8      	bpl.n	8005e08 <_printf_float+0x250>
 8005e56:	ee18 3a10 	vmov	r3, s16
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f af09 	beq.w	8005c7a <_printf_float+0xc2>
 8005e68:	f04f 0900 	mov.w	r9, #0
 8005e6c:	f104 0a1a 	add.w	sl, r4, #26
 8005e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e72:	425b      	negs	r3, r3
 8005e74:	454b      	cmp	r3, r9
 8005e76:	dc01      	bgt.n	8005e7c <_printf_float+0x2c4>
 8005e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7a:	e792      	b.n	8005da2 <_printf_float+0x1ea>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4652      	mov	r2, sl
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f aef7 	beq.w	8005c7a <_printf_float+0xc2>
 8005e8c:	f109 0901 	add.w	r9, r9, #1
 8005e90:	e7ee      	b.n	8005e70 <_printf_float+0x2b8>
 8005e92:	bf00      	nop
 8005e94:	7fefffff 	.word	0x7fefffff
 8005e98:	0800b308 	.word	0x0800b308
 8005e9c:	0800b30c 	.word	0x0800b30c
 8005ea0:	0800b314 	.word	0x0800b314
 8005ea4:	0800b310 	.word	0x0800b310
 8005ea8:	0800b771 	.word	0x0800b771
 8005eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	bfa8      	it	ge
 8005eb4:	461a      	movge	r2, r3
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	4691      	mov	r9, r2
 8005eba:	dc37      	bgt.n	8005f2c <_printf_float+0x374>
 8005ebc:	f04f 0b00 	mov.w	fp, #0
 8005ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec4:	f104 021a 	add.w	r2, r4, #26
 8005ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	eba3 0309 	sub.w	r3, r3, r9
 8005ed0:	455b      	cmp	r3, fp
 8005ed2:	dc33      	bgt.n	8005f3c <_printf_float+0x384>
 8005ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	db3b      	blt.n	8005f54 <_printf_float+0x39c>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07da      	lsls	r2, r3, #31
 8005ee0:	d438      	bmi.n	8005f54 <_printf_float+0x39c>
 8005ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee4:	9a05      	ldr	r2, [sp, #20]
 8005ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee8:	1a9a      	subs	r2, r3, r2
 8005eea:	eba3 0901 	sub.w	r9, r3, r1
 8005eee:	4591      	cmp	r9, r2
 8005ef0:	bfa8      	it	ge
 8005ef2:	4691      	movge	r9, r2
 8005ef4:	f1b9 0f00 	cmp.w	r9, #0
 8005ef8:	dc35      	bgt.n	8005f66 <_printf_float+0x3ae>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f02:	f104 0a1a 	add.w	sl, r4, #26
 8005f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	eba3 0309 	sub.w	r3, r3, r9
 8005f10:	4543      	cmp	r3, r8
 8005f12:	f77f af79 	ble.w	8005e08 <_printf_float+0x250>
 8005f16:	2301      	movs	r3, #1
 8005f18:	4652      	mov	r2, sl
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f aeaa 	beq.w	8005c7a <_printf_float+0xc2>
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	e7ec      	b.n	8005f06 <_printf_float+0x34e>
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4642      	mov	r2, r8
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	d1c0      	bne.n	8005ebc <_printf_float+0x304>
 8005f3a:	e69e      	b.n	8005c7a <_printf_float+0xc2>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	9205      	str	r2, [sp, #20]
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f ae97 	beq.w	8005c7a <_printf_float+0xc2>
 8005f4c:	9a05      	ldr	r2, [sp, #20]
 8005f4e:	f10b 0b01 	add.w	fp, fp, #1
 8005f52:	e7b9      	b.n	8005ec8 <_printf_float+0x310>
 8005f54:	ee18 3a10 	vmov	r3, s16
 8005f58:	4652      	mov	r2, sl
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	d1be      	bne.n	8005ee2 <_printf_float+0x32a>
 8005f64:	e689      	b.n	8005c7a <_printf_float+0xc2>
 8005f66:	9a05      	ldr	r2, [sp, #20]
 8005f68:	464b      	mov	r3, r9
 8005f6a:	4442      	add	r2, r8
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	d1c1      	bne.n	8005efa <_printf_float+0x342>
 8005f76:	e680      	b.n	8005c7a <_printf_float+0xc2>
 8005f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f7a:	2a01      	cmp	r2, #1
 8005f7c:	dc01      	bgt.n	8005f82 <_printf_float+0x3ca>
 8005f7e:	07db      	lsls	r3, r3, #31
 8005f80:	d538      	bpl.n	8005ff4 <_printf_float+0x43c>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4642      	mov	r2, r8
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae74 	beq.w	8005c7a <_printf_float+0xc2>
 8005f92:	ee18 3a10 	vmov	r3, s16
 8005f96:	4652      	mov	r2, sl
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f ae6b 	beq.w	8005c7a <_printf_float+0xc2>
 8005fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2300      	movs	r3, #0
 8005fac:	f7fa fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb0:	b9d8      	cbnz	r0, 8005fea <_printf_float+0x432>
 8005fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb4:	f108 0201 	add.w	r2, r8, #1
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d10e      	bne.n	8005fe2 <_printf_float+0x42a>
 8005fc4:	e659      	b.n	8005c7a <_printf_float+0xc2>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f ae52 	beq.w	8005c7a <_printf_float+0xc2>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4543      	cmp	r3, r8
 8005fe0:	dcf1      	bgt.n	8005fc6 <_printf_float+0x40e>
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe8:	e6dc      	b.n	8005da4 <_printf_float+0x1ec>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	f104 0a1a 	add.w	sl, r4, #26
 8005ff2:	e7f2      	b.n	8005fda <_printf_float+0x422>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	e7df      	b.n	8005fba <_printf_float+0x402>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	464a      	mov	r2, r9
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae38 	beq.w	8005c7a <_printf_float+0xc2>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	4543      	cmp	r3, r8
 8006016:	dcf0      	bgt.n	8005ffa <_printf_float+0x442>
 8006018:	e6fa      	b.n	8005e10 <_printf_float+0x258>
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	f104 0919 	add.w	r9, r4, #25
 8006022:	e7f4      	b.n	800600e <_printf_float+0x456>

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4699      	mov	r9, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	bfb8      	it	lt
 8006038:	4613      	movlt	r3, r2
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006040:	4607      	mov	r7, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc26      	bgt.n	80060ba <_printf_common+0x96>
 800606c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006070:	1e13      	subs	r3, r2, #0
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42b      	bmi.n	80060d4 <_printf_common+0xb0>
 800607c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d01e      	beq.n	80060c8 <_printf_common+0xa4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	68e5      	ldr	r5, [r4, #12]
 800608e:	6832      	ldr	r2, [r6, #0]
 8006090:	f003 0306 	and.w	r3, r3, #6
 8006094:	2b04      	cmp	r3, #4
 8006096:	bf08      	it	eq
 8006098:	1aad      	subeq	r5, r5, r2
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	bf0c      	ite	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	2500      	movne	r5, #0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfc4      	itt	gt
 80060aa:	1a9b      	subgt	r3, r3, r2
 80060ac:	18ed      	addgt	r5, r5, r3
 80060ae:	2600      	movs	r6, #0
 80060b0:	341a      	adds	r4, #26
 80060b2:	42b5      	cmp	r5, r6
 80060b4:	d11a      	bne.n	80060ec <_printf_common+0xc8>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e008      	b.n	80060cc <_printf_common+0xa8>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4652      	mov	r2, sl
 80060be:	4649      	mov	r1, r9
 80060c0:	4638      	mov	r0, r7
 80060c2:	47c0      	blx	r8
 80060c4:	3001      	adds	r0, #1
 80060c6:	d103      	bne.n	80060d0 <_printf_common+0xac>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7c6      	b.n	8006062 <_printf_common+0x3e>
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	2030      	movs	r0, #48	; 0x30
 80060da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060de:	4422      	add	r2, r4
 80060e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7c7      	b.n	800607c <_printf_common+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa4>
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7d9      	b.n	80060b2 <_printf_common+0x8e>
	...

08006100 <_printf_i>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	7e0f      	ldrb	r7, [r1, #24]
 8006106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006108:	2f78      	cmp	r7, #120	; 0x78
 800610a:	4691      	mov	r9, r2
 800610c:	4680      	mov	r8, r0
 800610e:	460c      	mov	r4, r1
 8006110:	469a      	mov	sl, r3
 8006112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006116:	d807      	bhi.n	8006128 <_printf_i+0x28>
 8006118:	2f62      	cmp	r7, #98	; 0x62
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x32>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f000 80d8 	beq.w	80062d2 <_printf_i+0x1d2>
 8006122:	2f58      	cmp	r7, #88	; 0x58
 8006124:	f000 80a3 	beq.w	800626e <_printf_i+0x16e>
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006130:	e03a      	b.n	80061a8 <_printf_i+0xa8>
 8006132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006136:	2b15      	cmp	r3, #21
 8006138:	d8f6      	bhi.n	8006128 <_printf_i+0x28>
 800613a:	a101      	add	r1, pc, #4	; (adr r1, 8006140 <_printf_i+0x40>)
 800613c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006140:	08006199 	.word	0x08006199
 8006144:	080061ad 	.word	0x080061ad
 8006148:	08006129 	.word	0x08006129
 800614c:	08006129 	.word	0x08006129
 8006150:	08006129 	.word	0x08006129
 8006154:	08006129 	.word	0x08006129
 8006158:	080061ad 	.word	0x080061ad
 800615c:	08006129 	.word	0x08006129
 8006160:	08006129 	.word	0x08006129
 8006164:	08006129 	.word	0x08006129
 8006168:	08006129 	.word	0x08006129
 800616c:	080062b9 	.word	0x080062b9
 8006170:	080061dd 	.word	0x080061dd
 8006174:	0800629b 	.word	0x0800629b
 8006178:	08006129 	.word	0x08006129
 800617c:	08006129 	.word	0x08006129
 8006180:	080062db 	.word	0x080062db
 8006184:	08006129 	.word	0x08006129
 8006188:	080061dd 	.word	0x080061dd
 800618c:	08006129 	.word	0x08006129
 8006190:	08006129 	.word	0x08006129
 8006194:	080062a3 	.word	0x080062a3
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a3      	b.n	80062f4 <_printf_i+0x1f4>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	6829      	ldr	r1, [r5, #0]
 80061b0:	0606      	lsls	r6, r0, #24
 80061b2:	f101 0304 	add.w	r3, r1, #4
 80061b6:	d50a      	bpl.n	80061ce <_printf_i+0xce>
 80061b8:	680e      	ldr	r6, [r1, #0]
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	2e00      	cmp	r6, #0
 80061be:	da03      	bge.n	80061c8 <_printf_i+0xc8>
 80061c0:	232d      	movs	r3, #45	; 0x2d
 80061c2:	4276      	negs	r6, r6
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c8:	485e      	ldr	r0, [pc, #376]	; (8006344 <_printf_i+0x244>)
 80061ca:	230a      	movs	r3, #10
 80061cc:	e019      	b.n	8006202 <_printf_i+0x102>
 80061ce:	680e      	ldr	r6, [r1, #0]
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d6:	bf18      	it	ne
 80061d8:	b236      	sxthne	r6, r6
 80061da:	e7ef      	b.n	80061bc <_printf_i+0xbc>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1d19      	adds	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	0601      	lsls	r1, r0, #24
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0xec>
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0xf2>
 80061ec:	0646      	lsls	r6, r0, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0xe8>
 80061f0:	881e      	ldrh	r6, [r3, #0]
 80061f2:	4854      	ldr	r0, [pc, #336]	; (8006344 <_printf_i+0x244>)
 80061f4:	2f6f      	cmp	r7, #111	; 0x6f
 80061f6:	bf0c      	ite	eq
 80061f8:	2308      	moveq	r3, #8
 80061fa:	230a      	movne	r3, #10
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	2d00      	cmp	r5, #0
 8006208:	bfa2      	ittt	ge
 800620a:	6821      	ldrge	r1, [r4, #0]
 800620c:	f021 0104 	bicge.w	r1, r1, #4
 8006210:	6021      	strge	r1, [r4, #0]
 8006212:	b90e      	cbnz	r6, 8006218 <_printf_i+0x118>
 8006214:	2d00      	cmp	r5, #0
 8006216:	d04d      	beq.n	80062b4 <_printf_i+0x1b4>
 8006218:	4615      	mov	r5, r2
 800621a:	fbb6 f1f3 	udiv	r1, r6, r3
 800621e:	fb03 6711 	mls	r7, r3, r1, r6
 8006222:	5dc7      	ldrb	r7, [r0, r7]
 8006224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006228:	4637      	mov	r7, r6
 800622a:	42bb      	cmp	r3, r7
 800622c:	460e      	mov	r6, r1
 800622e:	d9f4      	bls.n	800621a <_printf_i+0x11a>
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10b      	bne.n	800624c <_printf_i+0x14c>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07de      	lsls	r6, r3, #31
 8006238:	d508      	bpl.n	800624c <_printf_i+0x14c>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4299      	cmp	r1, r3
 8006240:	bfde      	ittt	le
 8006242:	2330      	movle	r3, #48	; 0x30
 8006244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	6122      	str	r2, [r4, #16]
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	464b      	mov	r3, r9
 8006256:	aa03      	add	r2, sp, #12
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fee2 	bl	8006024 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	d14c      	bne.n	80062fe <_printf_i+0x1fe>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626e:	4835      	ldr	r0, [pc, #212]	; (8006344 <_printf_i+0x244>)
 8006270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006274:	6829      	ldr	r1, [r5, #0]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f851 6b04 	ldr.w	r6, [r1], #4
 800627c:	6029      	str	r1, [r5, #0]
 800627e:	061d      	lsls	r5, r3, #24
 8006280:	d514      	bpl.n	80062ac <_printf_i+0x1ac>
 8006282:	07df      	lsls	r7, r3, #31
 8006284:	bf44      	itt	mi
 8006286:	f043 0320 	orrmi.w	r3, r3, #32
 800628a:	6023      	strmi	r3, [r4, #0]
 800628c:	b91e      	cbnz	r6, 8006296 <_printf_i+0x196>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	f023 0320 	bic.w	r3, r3, #32
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	2310      	movs	r3, #16
 8006298:	e7b0      	b.n	80061fc <_printf_i+0xfc>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f043 0320 	orr.w	r3, r3, #32
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2378      	movs	r3, #120	; 0x78
 80062a4:	4828      	ldr	r0, [pc, #160]	; (8006348 <_printf_i+0x248>)
 80062a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062aa:	e7e3      	b.n	8006274 <_printf_i+0x174>
 80062ac:	0659      	lsls	r1, r3, #25
 80062ae:	bf48      	it	mi
 80062b0:	b2b6      	uxthmi	r6, r6
 80062b2:	e7e6      	b.n	8006282 <_printf_i+0x182>
 80062b4:	4615      	mov	r5, r2
 80062b6:	e7bb      	b.n	8006230 <_printf_i+0x130>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6826      	ldr	r6, [r4, #0]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	1d18      	adds	r0, r3, #4
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	0635      	lsls	r5, r6, #24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0x1cc>
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0x1d2>
 80062cc:	0670      	lsls	r0, r6, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0x1c8>
 80062d0:	8019      	strh	r1, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	4615      	mov	r5, r2
 80062d8:	e7ba      	b.n	8006250 <_printf_i+0x150>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7f9 ff7a 	bl	80001e0 <memchr>
 80062ec:	b108      	cbz	r0, 80062f2 <_printf_i+0x1f2>
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e7a8      	b.n	8006250 <_printf_i+0x150>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	47d0      	blx	sl
 8006308:	3001      	adds	r0, #1
 800630a:	d0ab      	beq.n	8006264 <_printf_i+0x164>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d413      	bmi.n	800633a <_printf_i+0x23a>
 8006312:	68e0      	ldr	r0, [r4, #12]
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	4298      	cmp	r0, r3
 8006318:	bfb8      	it	lt
 800631a:	4618      	movlt	r0, r3
 800631c:	e7a4      	b.n	8006268 <_printf_i+0x168>
 800631e:	2301      	movs	r3, #1
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d09b      	beq.n	8006264 <_printf_i+0x164>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf2      	bgt.n	800631e <_printf_i+0x21e>
 8006338:	e7eb      	b.n	8006312 <_printf_i+0x212>
 800633a:	2500      	movs	r5, #0
 800633c:	f104 0619 	add.w	r6, r4, #25
 8006340:	e7f5      	b.n	800632e <_printf_i+0x22e>
 8006342:	bf00      	nop
 8006344:	0800b318 	.word	0x0800b318
 8006348:	0800b329 	.word	0x0800b329

0800634c <_scanf_float>:
 800634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	b087      	sub	sp, #28
 8006352:	4617      	mov	r7, r2
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	688b      	ldr	r3, [r1, #8]
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800635e:	bf83      	ittte	hi
 8006360:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006364:	195b      	addhi	r3, r3, r5
 8006366:	9302      	strhi	r3, [sp, #8]
 8006368:	2300      	movls	r3, #0
 800636a:	bf86      	itte	hi
 800636c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006370:	608b      	strhi	r3, [r1, #8]
 8006372:	9302      	strls	r3, [sp, #8]
 8006374:	680b      	ldr	r3, [r1, #0]
 8006376:	468b      	mov	fp, r1
 8006378:	2500      	movs	r5, #0
 800637a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800637e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006382:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006386:	4680      	mov	r8, r0
 8006388:	460c      	mov	r4, r1
 800638a:	465e      	mov	r6, fp
 800638c:	46aa      	mov	sl, r5
 800638e:	46a9      	mov	r9, r5
 8006390:	9501      	str	r5, [sp, #4]
 8006392:	68a2      	ldr	r2, [r4, #8]
 8006394:	b152      	cbz	r2, 80063ac <_scanf_float+0x60>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b4e      	cmp	r3, #78	; 0x4e
 800639c:	d864      	bhi.n	8006468 <_scanf_float+0x11c>
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d83c      	bhi.n	800641c <_scanf_float+0xd0>
 80063a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80063a6:	b2c8      	uxtb	r0, r1
 80063a8:	280e      	cmp	r0, #14
 80063aa:	d93a      	bls.n	8006422 <_scanf_float+0xd6>
 80063ac:	f1b9 0f00 	cmp.w	r9, #0
 80063b0:	d003      	beq.n	80063ba <_scanf_float+0x6e>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063be:	f1ba 0f01 	cmp.w	sl, #1
 80063c2:	f200 8113 	bhi.w	80065ec <_scanf_float+0x2a0>
 80063c6:	455e      	cmp	r6, fp
 80063c8:	f200 8105 	bhi.w	80065d6 <_scanf_float+0x28a>
 80063cc:	2501      	movs	r5, #1
 80063ce:	4628      	mov	r0, r5
 80063d0:	b007      	add	sp, #28
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80063da:	2a0d      	cmp	r2, #13
 80063dc:	d8e6      	bhi.n	80063ac <_scanf_float+0x60>
 80063de:	a101      	add	r1, pc, #4	; (adr r1, 80063e4 <_scanf_float+0x98>)
 80063e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063e4:	08006523 	.word	0x08006523
 80063e8:	080063ad 	.word	0x080063ad
 80063ec:	080063ad 	.word	0x080063ad
 80063f0:	080063ad 	.word	0x080063ad
 80063f4:	08006583 	.word	0x08006583
 80063f8:	0800655b 	.word	0x0800655b
 80063fc:	080063ad 	.word	0x080063ad
 8006400:	080063ad 	.word	0x080063ad
 8006404:	08006531 	.word	0x08006531
 8006408:	080063ad 	.word	0x080063ad
 800640c:	080063ad 	.word	0x080063ad
 8006410:	080063ad 	.word	0x080063ad
 8006414:	080063ad 	.word	0x080063ad
 8006418:	080064e9 	.word	0x080064e9
 800641c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006420:	e7db      	b.n	80063da <_scanf_float+0x8e>
 8006422:	290e      	cmp	r1, #14
 8006424:	d8c2      	bhi.n	80063ac <_scanf_float+0x60>
 8006426:	a001      	add	r0, pc, #4	; (adr r0, 800642c <_scanf_float+0xe0>)
 8006428:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800642c:	080064db 	.word	0x080064db
 8006430:	080063ad 	.word	0x080063ad
 8006434:	080064db 	.word	0x080064db
 8006438:	0800656f 	.word	0x0800656f
 800643c:	080063ad 	.word	0x080063ad
 8006440:	08006489 	.word	0x08006489
 8006444:	080064c5 	.word	0x080064c5
 8006448:	080064c5 	.word	0x080064c5
 800644c:	080064c5 	.word	0x080064c5
 8006450:	080064c5 	.word	0x080064c5
 8006454:	080064c5 	.word	0x080064c5
 8006458:	080064c5 	.word	0x080064c5
 800645c:	080064c5 	.word	0x080064c5
 8006460:	080064c5 	.word	0x080064c5
 8006464:	080064c5 	.word	0x080064c5
 8006468:	2b6e      	cmp	r3, #110	; 0x6e
 800646a:	d809      	bhi.n	8006480 <_scanf_float+0x134>
 800646c:	2b60      	cmp	r3, #96	; 0x60
 800646e:	d8b2      	bhi.n	80063d6 <_scanf_float+0x8a>
 8006470:	2b54      	cmp	r3, #84	; 0x54
 8006472:	d077      	beq.n	8006564 <_scanf_float+0x218>
 8006474:	2b59      	cmp	r3, #89	; 0x59
 8006476:	d199      	bne.n	80063ac <_scanf_float+0x60>
 8006478:	2d07      	cmp	r5, #7
 800647a:	d197      	bne.n	80063ac <_scanf_float+0x60>
 800647c:	2508      	movs	r5, #8
 800647e:	e029      	b.n	80064d4 <_scanf_float+0x188>
 8006480:	2b74      	cmp	r3, #116	; 0x74
 8006482:	d06f      	beq.n	8006564 <_scanf_float+0x218>
 8006484:	2b79      	cmp	r3, #121	; 0x79
 8006486:	e7f6      	b.n	8006476 <_scanf_float+0x12a>
 8006488:	6821      	ldr	r1, [r4, #0]
 800648a:	05c8      	lsls	r0, r1, #23
 800648c:	d51a      	bpl.n	80064c4 <_scanf_float+0x178>
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006494:	6021      	str	r1, [r4, #0]
 8006496:	f109 0901 	add.w	r9, r9, #1
 800649a:	b11b      	cbz	r3, 80064a4 <_scanf_float+0x158>
 800649c:	3b01      	subs	r3, #1
 800649e:	3201      	adds	r2, #1
 80064a0:	9302      	str	r3, [sp, #8]
 80064a2:	60a2      	str	r2, [r4, #8]
 80064a4:	68a3      	ldr	r3, [r4, #8]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	60a3      	str	r3, [r4, #8]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	3301      	adds	r3, #1
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	f340 8084 	ble.w	80065c4 <_scanf_float+0x278>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	e766      	b.n	8006392 <_scanf_float+0x46>
 80064c4:	eb1a 0f05 	cmn.w	sl, r5
 80064c8:	f47f af70 	bne.w	80063ac <_scanf_float+0x60>
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	f806 3b01 	strb.w	r3, [r6], #1
 80064d8:	e7e4      	b.n	80064a4 <_scanf_float+0x158>
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	0610      	lsls	r0, r2, #24
 80064de:	f57f af65 	bpl.w	80063ac <_scanf_float+0x60>
 80064e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e6:	e7f4      	b.n	80064d2 <_scanf_float+0x186>
 80064e8:	f1ba 0f00 	cmp.w	sl, #0
 80064ec:	d10e      	bne.n	800650c <_scanf_float+0x1c0>
 80064ee:	f1b9 0f00 	cmp.w	r9, #0
 80064f2:	d10e      	bne.n	8006512 <_scanf_float+0x1c6>
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064fe:	d108      	bne.n	8006512 <_scanf_float+0x1c6>
 8006500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	f04f 0a01 	mov.w	sl, #1
 800650a:	e7e3      	b.n	80064d4 <_scanf_float+0x188>
 800650c:	f1ba 0f02 	cmp.w	sl, #2
 8006510:	d055      	beq.n	80065be <_scanf_float+0x272>
 8006512:	2d01      	cmp	r5, #1
 8006514:	d002      	beq.n	800651c <_scanf_float+0x1d0>
 8006516:	2d04      	cmp	r5, #4
 8006518:	f47f af48 	bne.w	80063ac <_scanf_float+0x60>
 800651c:	3501      	adds	r5, #1
 800651e:	b2ed      	uxtb	r5, r5
 8006520:	e7d8      	b.n	80064d4 <_scanf_float+0x188>
 8006522:	f1ba 0f01 	cmp.w	sl, #1
 8006526:	f47f af41 	bne.w	80063ac <_scanf_float+0x60>
 800652a:	f04f 0a02 	mov.w	sl, #2
 800652e:	e7d1      	b.n	80064d4 <_scanf_float+0x188>
 8006530:	b97d      	cbnz	r5, 8006552 <_scanf_float+0x206>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	f47f af3c 	bne.w	80063b2 <_scanf_float+0x66>
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006540:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006544:	f47f af39 	bne.w	80063ba <_scanf_float+0x6e>
 8006548:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	2501      	movs	r5, #1
 8006550:	e7c0      	b.n	80064d4 <_scanf_float+0x188>
 8006552:	2d03      	cmp	r5, #3
 8006554:	d0e2      	beq.n	800651c <_scanf_float+0x1d0>
 8006556:	2d05      	cmp	r5, #5
 8006558:	e7de      	b.n	8006518 <_scanf_float+0x1cc>
 800655a:	2d02      	cmp	r5, #2
 800655c:	f47f af26 	bne.w	80063ac <_scanf_float+0x60>
 8006560:	2503      	movs	r5, #3
 8006562:	e7b7      	b.n	80064d4 <_scanf_float+0x188>
 8006564:	2d06      	cmp	r5, #6
 8006566:	f47f af21 	bne.w	80063ac <_scanf_float+0x60>
 800656a:	2507      	movs	r5, #7
 800656c:	e7b2      	b.n	80064d4 <_scanf_float+0x188>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	0591      	lsls	r1, r2, #22
 8006572:	f57f af1b 	bpl.w	80063ac <_scanf_float+0x60>
 8006576:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006580:	e7a8      	b.n	80064d4 <_scanf_float+0x188>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006588:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800658c:	d006      	beq.n	800659c <_scanf_float+0x250>
 800658e:	0550      	lsls	r0, r2, #21
 8006590:	f57f af0c 	bpl.w	80063ac <_scanf_float+0x60>
 8006594:	f1b9 0f00 	cmp.w	r9, #0
 8006598:	f43f af0f 	beq.w	80063ba <_scanf_float+0x6e>
 800659c:	0591      	lsls	r1, r2, #22
 800659e:	bf58      	it	pl
 80065a0:	9901      	ldrpl	r1, [sp, #4]
 80065a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065a6:	bf58      	it	pl
 80065a8:	eba9 0101 	subpl.w	r1, r9, r1
 80065ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80065b0:	bf58      	it	pl
 80065b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	f04f 0900 	mov.w	r9, #0
 80065bc:	e78a      	b.n	80064d4 <_scanf_float+0x188>
 80065be:	f04f 0a03 	mov.w	sl, #3
 80065c2:	e787      	b.n	80064d4 <_scanf_float+0x188>
 80065c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065c8:	4639      	mov	r1, r7
 80065ca:	4640      	mov	r0, r8
 80065cc:	4798      	blx	r3
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f43f aedf 	beq.w	8006392 <_scanf_float+0x46>
 80065d4:	e6ea      	b.n	80063ac <_scanf_float+0x60>
 80065d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065de:	463a      	mov	r2, r7
 80065e0:	4640      	mov	r0, r8
 80065e2:	4798      	blx	r3
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	e6ec      	b.n	80063c6 <_scanf_float+0x7a>
 80065ec:	1e6b      	subs	r3, r5, #1
 80065ee:	2b06      	cmp	r3, #6
 80065f0:	d825      	bhi.n	800663e <_scanf_float+0x2f2>
 80065f2:	2d02      	cmp	r5, #2
 80065f4:	d836      	bhi.n	8006664 <_scanf_float+0x318>
 80065f6:	455e      	cmp	r6, fp
 80065f8:	f67f aee8 	bls.w	80063cc <_scanf_float+0x80>
 80065fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006600:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006604:	463a      	mov	r2, r7
 8006606:	4640      	mov	r0, r8
 8006608:	4798      	blx	r3
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	3b01      	subs	r3, #1
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	e7f1      	b.n	80065f6 <_scanf_float+0x2aa>
 8006612:	9802      	ldr	r0, [sp, #8]
 8006614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006618:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800661c:	9002      	str	r0, [sp, #8]
 800661e:	463a      	mov	r2, r7
 8006620:	4640      	mov	r0, r8
 8006622:	4798      	blx	r3
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	3b01      	subs	r3, #1
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800662e:	fa5f fa8a 	uxtb.w	sl, sl
 8006632:	f1ba 0f02 	cmp.w	sl, #2
 8006636:	d1ec      	bne.n	8006612 <_scanf_float+0x2c6>
 8006638:	3d03      	subs	r5, #3
 800663a:	b2ed      	uxtb	r5, r5
 800663c:	1b76      	subs	r6, r6, r5
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	05da      	lsls	r2, r3, #23
 8006642:	d52f      	bpl.n	80066a4 <_scanf_float+0x358>
 8006644:	055b      	lsls	r3, r3, #21
 8006646:	d510      	bpl.n	800666a <_scanf_float+0x31e>
 8006648:	455e      	cmp	r6, fp
 800664a:	f67f aebf 	bls.w	80063cc <_scanf_float+0x80>
 800664e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006656:	463a      	mov	r2, r7
 8006658:	4640      	mov	r0, r8
 800665a:	4798      	blx	r3
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	3b01      	subs	r3, #1
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	e7f1      	b.n	8006648 <_scanf_float+0x2fc>
 8006664:	46aa      	mov	sl, r5
 8006666:	9602      	str	r6, [sp, #8]
 8006668:	e7df      	b.n	800662a <_scanf_float+0x2de>
 800666a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	2965      	cmp	r1, #101	; 0x65
 8006672:	f103 33ff 	add.w	r3, r3, #4294967295
 8006676:	f106 35ff 	add.w	r5, r6, #4294967295
 800667a:	6123      	str	r3, [r4, #16]
 800667c:	d00c      	beq.n	8006698 <_scanf_float+0x34c>
 800667e:	2945      	cmp	r1, #69	; 0x45
 8006680:	d00a      	beq.n	8006698 <_scanf_float+0x34c>
 8006682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006686:	463a      	mov	r2, r7
 8006688:	4640      	mov	r0, r8
 800668a:	4798      	blx	r3
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006692:	3b01      	subs	r3, #1
 8006694:	1eb5      	subs	r5, r6, #2
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800669c:	463a      	mov	r2, r7
 800669e:	4640      	mov	r0, r8
 80066a0:	4798      	blx	r3
 80066a2:	462e      	mov	r6, r5
 80066a4:	6825      	ldr	r5, [r4, #0]
 80066a6:	f015 0510 	ands.w	r5, r5, #16
 80066aa:	d159      	bne.n	8006760 <_scanf_float+0x414>
 80066ac:	7035      	strb	r5, [r6, #0]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d11b      	bne.n	80066f2 <_scanf_float+0x3a6>
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	454b      	cmp	r3, r9
 80066be:	eba3 0209 	sub.w	r2, r3, r9
 80066c2:	d123      	bne.n	800670c <_scanf_float+0x3c0>
 80066c4:	2200      	movs	r2, #0
 80066c6:	4659      	mov	r1, fp
 80066c8:	4640      	mov	r0, r8
 80066ca:	f000 ffcb 	bl	8007664 <_strtod_r>
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	f012 0f02 	tst.w	r2, #2
 80066d6:	ec57 6b10 	vmov	r6, r7, d0
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	d021      	beq.n	8006722 <_scanf_float+0x3d6>
 80066de:	9903      	ldr	r1, [sp, #12]
 80066e0:	1d1a      	adds	r2, r3, #4
 80066e2:	600a      	str	r2, [r1, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	e9c3 6700 	strd	r6, r7, [r3]
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60e3      	str	r3, [r4, #12]
 80066f0:	e66d      	b.n	80063ce <_scanf_float+0x82>
 80066f2:	9b04      	ldr	r3, [sp, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0e5      	beq.n	80066c4 <_scanf_float+0x378>
 80066f8:	9905      	ldr	r1, [sp, #20]
 80066fa:	230a      	movs	r3, #10
 80066fc:	462a      	mov	r2, r5
 80066fe:	3101      	adds	r1, #1
 8006700:	4640      	mov	r0, r8
 8006702:	f001 f837 	bl	8007774 <_strtol_r>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	9e05      	ldr	r6, [sp, #20]
 800670a:	1ac2      	subs	r2, r0, r3
 800670c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006710:	429e      	cmp	r6, r3
 8006712:	bf28      	it	cs
 8006714:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006718:	4912      	ldr	r1, [pc, #72]	; (8006764 <_scanf_float+0x418>)
 800671a:	4630      	mov	r0, r6
 800671c:	f000 f8d0 	bl	80068c0 <siprintf>
 8006720:	e7d0      	b.n	80066c4 <_scanf_float+0x378>
 8006722:	9903      	ldr	r1, [sp, #12]
 8006724:	f012 0f04 	tst.w	r2, #4
 8006728:	f103 0204 	add.w	r2, r3, #4
 800672c:	600a      	str	r2, [r1, #0]
 800672e:	d1d9      	bne.n	80066e4 <_scanf_float+0x398>
 8006730:	f8d3 8000 	ldr.w	r8, [r3]
 8006734:	ee10 2a10 	vmov	r2, s0
 8006738:	ee10 0a10 	vmov	r0, s0
 800673c:	463b      	mov	r3, r7
 800673e:	4639      	mov	r1, r7
 8006740:	f7fa f9f4 	bl	8000b2c <__aeabi_dcmpun>
 8006744:	b128      	cbz	r0, 8006752 <_scanf_float+0x406>
 8006746:	4808      	ldr	r0, [pc, #32]	; (8006768 <_scanf_float+0x41c>)
 8006748:	f000 f8b4 	bl	80068b4 <nanf>
 800674c:	ed88 0a00 	vstr	s0, [r8]
 8006750:	e7cb      	b.n	80066ea <_scanf_float+0x39e>
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7fa fa47 	bl	8000be8 <__aeabi_d2f>
 800675a:	f8c8 0000 	str.w	r0, [r8]
 800675e:	e7c4      	b.n	80066ea <_scanf_float+0x39e>
 8006760:	2500      	movs	r5, #0
 8006762:	e634      	b.n	80063ce <_scanf_float+0x82>
 8006764:	0800b33a 	.word	0x0800b33a
 8006768:	0800b0c7 	.word	0x0800b0c7

0800676c <iprintf>:
 800676c:	b40f      	push	{r0, r1, r2, r3}
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <iprintf+0x2c>)
 8006770:	b513      	push	{r0, r1, r4, lr}
 8006772:	681c      	ldr	r4, [r3, #0]
 8006774:	b124      	cbz	r4, 8006780 <iprintf+0x14>
 8006776:	69a3      	ldr	r3, [r4, #24]
 8006778:	b913      	cbnz	r3, 8006780 <iprintf+0x14>
 800677a:	4620      	mov	r0, r4
 800677c:	f002 f874 	bl	8008868 <__sinit>
 8006780:	ab05      	add	r3, sp, #20
 8006782:	9a04      	ldr	r2, [sp, #16]
 8006784:	68a1      	ldr	r1, [r4, #8]
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	4620      	mov	r0, r4
 800678a:	f003 fe31 	bl	800a3f0 <_vfiprintf_r>
 800678e:	b002      	add	sp, #8
 8006790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006794:	b004      	add	sp, #16
 8006796:	4770      	bx	lr
 8006798:	2000003c 	.word	0x2000003c

0800679c <putchar>:
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <putchar+0x28>)
 800679e:	b513      	push	{r0, r1, r4, lr}
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	4601      	mov	r1, r0
 80067a4:	b134      	cbz	r4, 80067b4 <putchar+0x18>
 80067a6:	69a3      	ldr	r3, [r4, #24]
 80067a8:	b923      	cbnz	r3, 80067b4 <putchar+0x18>
 80067aa:	9001      	str	r0, [sp, #4]
 80067ac:	4620      	mov	r0, r4
 80067ae:	f002 f85b 	bl	8008868 <__sinit>
 80067b2:	9901      	ldr	r1, [sp, #4]
 80067b4:	68a2      	ldr	r2, [r4, #8]
 80067b6:	4620      	mov	r0, r4
 80067b8:	b002      	add	sp, #8
 80067ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067be:	f004 b899 	b.w	800a8f4 <_putc_r>
 80067c2:	bf00      	nop
 80067c4:	2000003c 	.word	0x2000003c

080067c8 <_puts_r>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	460e      	mov	r6, r1
 80067cc:	4605      	mov	r5, r0
 80067ce:	b118      	cbz	r0, 80067d8 <_puts_r+0x10>
 80067d0:	6983      	ldr	r3, [r0, #24]
 80067d2:	b90b      	cbnz	r3, 80067d8 <_puts_r+0x10>
 80067d4:	f002 f848 	bl	8008868 <__sinit>
 80067d8:	69ab      	ldr	r3, [r5, #24]
 80067da:	68ac      	ldr	r4, [r5, #8]
 80067dc:	b913      	cbnz	r3, 80067e4 <_puts_r+0x1c>
 80067de:	4628      	mov	r0, r5
 80067e0:	f002 f842 	bl	8008868 <__sinit>
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <_puts_r+0xd0>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d120      	bne.n	800682c <_puts_r+0x64>
 80067ea:	686c      	ldr	r4, [r5, #4]
 80067ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_puts_r+0x36>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	0598      	lsls	r0, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_puts_r+0x36>
 80067f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fa:	f002 fc46 	bl	800908a <__retarget_lock_acquire_recursive>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	0719      	lsls	r1, r3, #28
 8006802:	d51d      	bpl.n	8006840 <_puts_r+0x78>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	b1db      	cbz	r3, 8006840 <_puts_r+0x78>
 8006808:	3e01      	subs	r6, #1
 800680a:	68a3      	ldr	r3, [r4, #8]
 800680c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006810:	3b01      	subs	r3, #1
 8006812:	60a3      	str	r3, [r4, #8]
 8006814:	bb39      	cbnz	r1, 8006866 <_puts_r+0x9e>
 8006816:	2b00      	cmp	r3, #0
 8006818:	da38      	bge.n	800688c <_puts_r+0xc4>
 800681a:	4622      	mov	r2, r4
 800681c:	210a      	movs	r1, #10
 800681e:	4628      	mov	r0, r5
 8006820:	f000 ffaa 	bl	8007778 <__swbuf_r>
 8006824:	3001      	adds	r0, #1
 8006826:	d011      	beq.n	800684c <_puts_r+0x84>
 8006828:	250a      	movs	r5, #10
 800682a:	e011      	b.n	8006850 <_puts_r+0x88>
 800682c:	4b1b      	ldr	r3, [pc, #108]	; (800689c <_puts_r+0xd4>)
 800682e:	429c      	cmp	r4, r3
 8006830:	d101      	bne.n	8006836 <_puts_r+0x6e>
 8006832:	68ac      	ldr	r4, [r5, #8]
 8006834:	e7da      	b.n	80067ec <_puts_r+0x24>
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <_puts_r+0xd8>)
 8006838:	429c      	cmp	r4, r3
 800683a:	bf08      	it	eq
 800683c:	68ec      	ldreq	r4, [r5, #12]
 800683e:	e7d5      	b.n	80067ec <_puts_r+0x24>
 8006840:	4621      	mov	r1, r4
 8006842:	4628      	mov	r0, r5
 8006844:	f000 fffc 	bl	8007840 <__swsetup_r>
 8006848:	2800      	cmp	r0, #0
 800684a:	d0dd      	beq.n	8006808 <_puts_r+0x40>
 800684c:	f04f 35ff 	mov.w	r5, #4294967295
 8006850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006852:	07da      	lsls	r2, r3, #31
 8006854:	d405      	bmi.n	8006862 <_puts_r+0x9a>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	d402      	bmi.n	8006862 <_puts_r+0x9a>
 800685c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685e:	f002 fc15 	bl	800908c <__retarget_lock_release_recursive>
 8006862:	4628      	mov	r0, r5
 8006864:	bd70      	pop	{r4, r5, r6, pc}
 8006866:	2b00      	cmp	r3, #0
 8006868:	da04      	bge.n	8006874 <_puts_r+0xac>
 800686a:	69a2      	ldr	r2, [r4, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	dc06      	bgt.n	800687e <_puts_r+0xb6>
 8006870:	290a      	cmp	r1, #10
 8006872:	d004      	beq.n	800687e <_puts_r+0xb6>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	6022      	str	r2, [r4, #0]
 800687a:	7019      	strb	r1, [r3, #0]
 800687c:	e7c5      	b.n	800680a <_puts_r+0x42>
 800687e:	4622      	mov	r2, r4
 8006880:	4628      	mov	r0, r5
 8006882:	f000 ff79 	bl	8007778 <__swbuf_r>
 8006886:	3001      	adds	r0, #1
 8006888:	d1bf      	bne.n	800680a <_puts_r+0x42>
 800688a:	e7df      	b.n	800684c <_puts_r+0x84>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	250a      	movs	r5, #10
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	701d      	strb	r5, [r3, #0]
 8006896:	e7db      	b.n	8006850 <_puts_r+0x88>
 8006898:	0800b544 	.word	0x0800b544
 800689c:	0800b564 	.word	0x0800b564
 80068a0:	0800b524 	.word	0x0800b524

080068a4 <puts>:
 80068a4:	4b02      	ldr	r3, [pc, #8]	; (80068b0 <puts+0xc>)
 80068a6:	4601      	mov	r1, r0
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	f7ff bf8d 	b.w	80067c8 <_puts_r>
 80068ae:	bf00      	nop
 80068b0:	2000003c 	.word	0x2000003c

080068b4 <nanf>:
 80068b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068bc <nanf+0x8>
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	7fc00000 	.word	0x7fc00000

080068c0 <siprintf>:
 80068c0:	b40e      	push	{r1, r2, r3}
 80068c2:	b500      	push	{lr}
 80068c4:	b09c      	sub	sp, #112	; 0x70
 80068c6:	ab1d      	add	r3, sp, #116	; 0x74
 80068c8:	9002      	str	r0, [sp, #8]
 80068ca:	9006      	str	r0, [sp, #24]
 80068cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d0:	4809      	ldr	r0, [pc, #36]	; (80068f8 <siprintf+0x38>)
 80068d2:	9107      	str	r1, [sp, #28]
 80068d4:	9104      	str	r1, [sp, #16]
 80068d6:	4909      	ldr	r1, [pc, #36]	; (80068fc <siprintf+0x3c>)
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	6800      	ldr	r0, [r0, #0]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	a902      	add	r1, sp, #8
 80068e4:	f003 fa88 	bl	8009df8 <_svfiprintf_r>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	b01c      	add	sp, #112	; 0x70
 80068f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f4:	b003      	add	sp, #12
 80068f6:	4770      	bx	lr
 80068f8:	2000003c 	.word	0x2000003c
 80068fc:	ffff0208 	.word	0xffff0208

08006900 <siscanf>:
 8006900:	b40e      	push	{r1, r2, r3}
 8006902:	b510      	push	{r4, lr}
 8006904:	b09f      	sub	sp, #124	; 0x7c
 8006906:	ac21      	add	r4, sp, #132	; 0x84
 8006908:	f44f 7101 	mov.w	r1, #516	; 0x204
 800690c:	f854 2b04 	ldr.w	r2, [r4], #4
 8006910:	9201      	str	r2, [sp, #4]
 8006912:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006916:	9004      	str	r0, [sp, #16]
 8006918:	9008      	str	r0, [sp, #32]
 800691a:	f7f9 fc59 	bl	80001d0 <strlen>
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <siscanf+0x50>)
 8006920:	9005      	str	r0, [sp, #20]
 8006922:	9009      	str	r0, [sp, #36]	; 0x24
 8006924:	930d      	str	r3, [sp, #52]	; 0x34
 8006926:	480b      	ldr	r0, [pc, #44]	; (8006954 <siscanf+0x54>)
 8006928:	9a01      	ldr	r2, [sp, #4]
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9403      	str	r4, [sp, #12]
 800692e:	2300      	movs	r3, #0
 8006930:	9311      	str	r3, [sp, #68]	; 0x44
 8006932:	9316      	str	r3, [sp, #88]	; 0x58
 8006934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006938:	f8ad 301e 	strh.w	r3, [sp, #30]
 800693c:	a904      	add	r1, sp, #16
 800693e:	4623      	mov	r3, r4
 8006940:	f003 fbb4 	bl	800a0ac <__ssvfiscanf_r>
 8006944:	b01f      	add	sp, #124	; 0x7c
 8006946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694a:	b003      	add	sp, #12
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	0800697b 	.word	0x0800697b
 8006954:	2000003c 	.word	0x2000003c

08006958 <__sread>:
 8006958:	b510      	push	{r4, lr}
 800695a:	460c      	mov	r4, r1
 800695c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006960:	f004 f810 	bl	800a984 <_read_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	bfab      	itete	ge
 8006968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800696a:	89a3      	ldrhlt	r3, [r4, #12]
 800696c:	181b      	addge	r3, r3, r0
 800696e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006972:	bfac      	ite	ge
 8006974:	6563      	strge	r3, [r4, #84]	; 0x54
 8006976:	81a3      	strhlt	r3, [r4, #12]
 8006978:	bd10      	pop	{r4, pc}

0800697a <__seofread>:
 800697a:	2000      	movs	r0, #0
 800697c:	4770      	bx	lr

0800697e <__swrite>:
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	461f      	mov	r7, r3
 8006984:	898b      	ldrh	r3, [r1, #12]
 8006986:	05db      	lsls	r3, r3, #23
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	4616      	mov	r6, r2
 800698e:	d505      	bpl.n	800699c <__swrite+0x1e>
 8006990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006994:	2302      	movs	r3, #2
 8006996:	2200      	movs	r2, #0
 8006998:	f002 fb7a 	bl	8009090 <_lseek_r>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	4632      	mov	r2, r6
 80069aa:	463b      	mov	r3, r7
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	f000 bf33 	b.w	800781c <_write_r>

080069b6 <__sseek>:
 80069b6:	b510      	push	{r4, lr}
 80069b8:	460c      	mov	r4, r1
 80069ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069be:	f002 fb67 	bl	8009090 <_lseek_r>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	bf15      	itete	ne
 80069c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069d2:	81a3      	strheq	r3, [r4, #12]
 80069d4:	bf18      	it	ne
 80069d6:	81a3      	strhne	r3, [r4, #12]
 80069d8:	bd10      	pop	{r4, pc}

080069da <__sclose>:
 80069da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069de:	f000 bf9d 	b.w	800791c <_close_r>

080069e2 <strcpy>:
 80069e2:	4603      	mov	r3, r0
 80069e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e8:	f803 2b01 	strb.w	r2, [r3], #1
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	d1f9      	bne.n	80069e4 <strcpy+0x2>
 80069f0:	4770      	bx	lr

080069f2 <strncmp>:
 80069f2:	b510      	push	{r4, lr}
 80069f4:	b17a      	cbz	r2, 8006a16 <strncmp+0x24>
 80069f6:	4603      	mov	r3, r0
 80069f8:	3901      	subs	r1, #1
 80069fa:	1884      	adds	r4, r0, r2
 80069fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a04:	4290      	cmp	r0, r2
 8006a06:	d101      	bne.n	8006a0c <strncmp+0x1a>
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d101      	bne.n	8006a10 <strncmp+0x1e>
 8006a0c:	1a80      	subs	r0, r0, r2
 8006a0e:	bd10      	pop	{r4, pc}
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1f3      	bne.n	80069fc <strncmp+0xa>
 8006a14:	e7fa      	b.n	8006a0c <strncmp+0x1a>
 8006a16:	4610      	mov	r0, r2
 8006a18:	e7f9      	b.n	8006a0e <strncmp+0x1c>

08006a1a <sulp>:
 8006a1a:	b570      	push	{r4, r5, r6, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	ec45 4b10 	vmov	d0, r4, r5
 8006a24:	4616      	mov	r6, r2
 8006a26:	f002 ff45 	bl	80098b4 <__ulp>
 8006a2a:	ec51 0b10 	vmov	r0, r1, d0
 8006a2e:	b17e      	cbz	r6, 8006a50 <sulp+0x36>
 8006a30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dd09      	ble.n	8006a50 <sulp+0x36>
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a42:	2400      	movs	r4, #0
 8006a44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a48:	4622      	mov	r2, r4
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	0000      	movs	r0, r0
 8006a54:	0000      	movs	r0, r0
	...

08006a58 <_strtod_l>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	ed2d 8b02 	vpush	{d8}
 8006a60:	b09d      	sub	sp, #116	; 0x74
 8006a62:	461f      	mov	r7, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	9318      	str	r3, [sp, #96]	; 0x60
 8006a68:	4ba2      	ldr	r3, [pc, #648]	; (8006cf4 <_strtod_l+0x29c>)
 8006a6a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	4604      	mov	r4, r0
 8006a72:	4618      	mov	r0, r3
 8006a74:	4688      	mov	r8, r1
 8006a76:	f7f9 fbab 	bl	80001d0 <strlen>
 8006a7a:	f04f 0a00 	mov.w	sl, #0
 8006a7e:	4605      	mov	r5, r0
 8006a80:	f04f 0b00 	mov.w	fp, #0
 8006a84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	2a2b      	cmp	r2, #43	; 0x2b
 8006a8e:	d04e      	beq.n	8006b2e <_strtod_l+0xd6>
 8006a90:	d83b      	bhi.n	8006b0a <_strtod_l+0xb2>
 8006a92:	2a0d      	cmp	r2, #13
 8006a94:	d834      	bhi.n	8006b00 <_strtod_l+0xa8>
 8006a96:	2a08      	cmp	r2, #8
 8006a98:	d834      	bhi.n	8006b04 <_strtod_l+0xac>
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d03e      	beq.n	8006b1c <_strtod_l+0xc4>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006aa4:	7833      	ldrb	r3, [r6, #0]
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	f040 80b0 	bne.w	8006c0c <_strtod_l+0x1b4>
 8006aac:	7873      	ldrb	r3, [r6, #1]
 8006aae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ab2:	2b58      	cmp	r3, #88	; 0x58
 8006ab4:	d168      	bne.n	8006b88 <_strtod_l+0x130>
 8006ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	ab18      	add	r3, sp, #96	; 0x60
 8006abc:	9702      	str	r7, [sp, #8]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4a8d      	ldr	r2, [pc, #564]	; (8006cf8 <_strtod_l+0x2a0>)
 8006ac2:	ab19      	add	r3, sp, #100	; 0x64
 8006ac4:	a917      	add	r1, sp, #92	; 0x5c
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 ffd2 	bl	8008a70 <__gethex>
 8006acc:	f010 0707 	ands.w	r7, r0, #7
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	d005      	beq.n	8006ae0 <_strtod_l+0x88>
 8006ad4:	2f06      	cmp	r7, #6
 8006ad6:	d12c      	bne.n	8006b32 <_strtod_l+0xda>
 8006ad8:	3601      	adds	r6, #1
 8006ada:	2300      	movs	r3, #0
 8006adc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006ade:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 8590 	bne.w	8007608 <_strtod_l+0xbb0>
 8006ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aea:	b1eb      	cbz	r3, 8006b28 <_strtod_l+0xd0>
 8006aec:	4652      	mov	r2, sl
 8006aee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006af2:	ec43 2b10 	vmov	d0, r2, r3
 8006af6:	b01d      	add	sp, #116	; 0x74
 8006af8:	ecbd 8b02 	vpop	{d8}
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	2a20      	cmp	r2, #32
 8006b02:	d1cc      	bne.n	8006a9e <_strtod_l+0x46>
 8006b04:	3301      	adds	r3, #1
 8006b06:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b08:	e7be      	b.n	8006a88 <_strtod_l+0x30>
 8006b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8006b0c:	d1c7      	bne.n	8006a9e <_strtod_l+0x46>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	920a      	str	r2, [sp, #40]	; 0x28
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1c2      	bne.n	8006aa2 <_strtod_l+0x4a>
 8006b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 856e 	bne.w	8007604 <_strtod_l+0xbac>
 8006b28:	4652      	mov	r2, sl
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	e7e1      	b.n	8006af2 <_strtod_l+0x9a>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	e7ee      	b.n	8006b10 <_strtod_l+0xb8>
 8006b32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b34:	b13a      	cbz	r2, 8006b46 <_strtod_l+0xee>
 8006b36:	2135      	movs	r1, #53	; 0x35
 8006b38:	a81a      	add	r0, sp, #104	; 0x68
 8006b3a:	f002 ffc6 	bl	8009aca <__copybits>
 8006b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b40:	4620      	mov	r0, r4
 8006b42:	f002 fb85 	bl	8009250 <_Bfree>
 8006b46:	3f01      	subs	r7, #1
 8006b48:	2f04      	cmp	r7, #4
 8006b4a:	d806      	bhi.n	8006b5a <_strtod_l+0x102>
 8006b4c:	e8df f007 	tbb	[pc, r7]
 8006b50:	1714030a 	.word	0x1714030a
 8006b54:	0a          	.byte	0x0a
 8006b55:	00          	.byte	0x00
 8006b56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006b5a:	0728      	lsls	r0, r5, #28
 8006b5c:	d5c0      	bpl.n	8006ae0 <_strtod_l+0x88>
 8006b5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b62:	e7bd      	b.n	8006ae0 <_strtod_l+0x88>
 8006b64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006b68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b76:	e7f0      	b.n	8006b5a <_strtod_l+0x102>
 8006b78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006cfc <_strtod_l+0x2a4>
 8006b7c:	e7ed      	b.n	8006b5a <_strtod_l+0x102>
 8006b7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b82:	f04f 3aff 	mov.w	sl, #4294967295
 8006b86:	e7e8      	b.n	8006b5a <_strtod_l+0x102>
 8006b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d0f9      	beq.n	8006b88 <_strtod_l+0x130>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0a3      	beq.n	8006ae0 <_strtod_l+0x88>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f04f 0900 	mov.w	r9, #0
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ba2:	9308      	str	r3, [sp, #32]
 8006ba4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ba8:	464f      	mov	r7, r9
 8006baa:	220a      	movs	r2, #10
 8006bac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006bae:	7806      	ldrb	r6, [r0, #0]
 8006bb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006bb4:	b2d9      	uxtb	r1, r3
 8006bb6:	2909      	cmp	r1, #9
 8006bb8:	d92a      	bls.n	8006c10 <_strtod_l+0x1b8>
 8006bba:	9905      	ldr	r1, [sp, #20]
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	f7ff ff18 	bl	80069f2 <strncmp>
 8006bc2:	b398      	cbz	r0, 8006c2c <_strtod_l+0x1d4>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	463d      	mov	r5, r7
 8006bca:	9005      	str	r0, [sp, #20]
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2a65      	cmp	r2, #101	; 0x65
 8006bd0:	d001      	beq.n	8006bd6 <_strtod_l+0x17e>
 8006bd2:	2a45      	cmp	r2, #69	; 0x45
 8006bd4:	d118      	bne.n	8006c08 <_strtod_l+0x1b0>
 8006bd6:	b91d      	cbnz	r5, 8006be0 <_strtod_l+0x188>
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	4302      	orrs	r2, r0
 8006bdc:	d09e      	beq.n	8006b1c <_strtod_l+0xc4>
 8006bde:	2500      	movs	r5, #0
 8006be0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006be4:	f108 0201 	add.w	r2, r8, #1
 8006be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006bee:	2a2b      	cmp	r2, #43	; 0x2b
 8006bf0:	d075      	beq.n	8006cde <_strtod_l+0x286>
 8006bf2:	2a2d      	cmp	r2, #45	; 0x2d
 8006bf4:	d07b      	beq.n	8006cee <_strtod_l+0x296>
 8006bf6:	f04f 0c00 	mov.w	ip, #0
 8006bfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bfe:	2909      	cmp	r1, #9
 8006c00:	f240 8082 	bls.w	8006d08 <_strtod_l+0x2b0>
 8006c04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c08:	2600      	movs	r6, #0
 8006c0a:	e09d      	b.n	8006d48 <_strtod_l+0x2f0>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e7c4      	b.n	8006b9a <_strtod_l+0x142>
 8006c10:	2f08      	cmp	r7, #8
 8006c12:	bfd8      	it	le
 8006c14:	9907      	ldrle	r1, [sp, #28]
 8006c16:	f100 0001 	add.w	r0, r0, #1
 8006c1a:	bfda      	itte	le
 8006c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c20:	9307      	strle	r3, [sp, #28]
 8006c22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006c26:	3701      	adds	r7, #1
 8006c28:	9017      	str	r0, [sp, #92]	; 0x5c
 8006c2a:	e7bf      	b.n	8006bac <_strtod_l+0x154>
 8006c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c2e:	195a      	adds	r2, r3, r5
 8006c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c32:	5d5a      	ldrb	r2, [r3, r5]
 8006c34:	2f00      	cmp	r7, #0
 8006c36:	d037      	beq.n	8006ca8 <_strtod_l+0x250>
 8006c38:	9005      	str	r0, [sp, #20]
 8006c3a:	463d      	mov	r5, r7
 8006c3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c40:	2b09      	cmp	r3, #9
 8006c42:	d912      	bls.n	8006c6a <_strtod_l+0x212>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e7c2      	b.n	8006bce <_strtod_l+0x176>
 8006c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c4e:	785a      	ldrb	r2, [r3, #1]
 8006c50:	3001      	adds	r0, #1
 8006c52:	2a30      	cmp	r2, #48	; 0x30
 8006c54:	d0f8      	beq.n	8006c48 <_strtod_l+0x1f0>
 8006c56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	f200 84d9 	bhi.w	8007612 <_strtod_l+0xbba>
 8006c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c62:	9005      	str	r0, [sp, #20]
 8006c64:	2000      	movs	r0, #0
 8006c66:	9308      	str	r3, [sp, #32]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	3a30      	subs	r2, #48	; 0x30
 8006c6c:	f100 0301 	add.w	r3, r0, #1
 8006c70:	d014      	beq.n	8006c9c <_strtod_l+0x244>
 8006c72:	9905      	ldr	r1, [sp, #20]
 8006c74:	4419      	add	r1, r3
 8006c76:	9105      	str	r1, [sp, #20]
 8006c78:	462b      	mov	r3, r5
 8006c7a:	eb00 0e05 	add.w	lr, r0, r5
 8006c7e:	210a      	movs	r1, #10
 8006c80:	4573      	cmp	r3, lr
 8006c82:	d113      	bne.n	8006cac <_strtod_l+0x254>
 8006c84:	182b      	adds	r3, r5, r0
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	f105 0501 	add.w	r5, r5, #1
 8006c8c:	4405      	add	r5, r0
 8006c8e:	dc1c      	bgt.n	8006cca <_strtod_l+0x272>
 8006c90:	9907      	ldr	r1, [sp, #28]
 8006c92:	230a      	movs	r3, #10
 8006c94:	fb03 2301 	mla	r3, r3, r1, r2
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c9e:	1c51      	adds	r1, r2, #1
 8006ca0:	9117      	str	r1, [sp, #92]	; 0x5c
 8006ca2:	7852      	ldrb	r2, [r2, #1]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	e7c9      	b.n	8006c3c <_strtod_l+0x1e4>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	e7d2      	b.n	8006c52 <_strtod_l+0x1fa>
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	dc04      	bgt.n	8006cba <_strtod_l+0x262>
 8006cb0:	9e07      	ldr	r6, [sp, #28]
 8006cb2:	434e      	muls	r6, r1
 8006cb4:	9607      	str	r6, [sp, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	e7e2      	b.n	8006c80 <_strtod_l+0x228>
 8006cba:	f103 0c01 	add.w	ip, r3, #1
 8006cbe:	f1bc 0f10 	cmp.w	ip, #16
 8006cc2:	bfd8      	it	le
 8006cc4:	fb01 f909 	mulle.w	r9, r1, r9
 8006cc8:	e7f5      	b.n	8006cb6 <_strtod_l+0x25e>
 8006cca:	2d10      	cmp	r5, #16
 8006ccc:	bfdc      	itt	le
 8006cce:	230a      	movle	r3, #10
 8006cd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8006cd4:	e7e1      	b.n	8006c9a <_strtod_l+0x242>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e77c      	b.n	8006bd8 <_strtod_l+0x180>
 8006cde:	f04f 0c00 	mov.w	ip, #0
 8006ce2:	f108 0202 	add.w	r2, r8, #2
 8006ce6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ce8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006cec:	e785      	b.n	8006bfa <_strtod_l+0x1a2>
 8006cee:	f04f 0c01 	mov.w	ip, #1
 8006cf2:	e7f6      	b.n	8006ce2 <_strtod_l+0x28a>
 8006cf4:	0800b5ec 	.word	0x0800b5ec
 8006cf8:	0800b340 	.word	0x0800b340
 8006cfc:	7ff00000 	.word	0x7ff00000
 8006d00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d02:	1c51      	adds	r1, r2, #1
 8006d04:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d06:	7852      	ldrb	r2, [r2, #1]
 8006d08:	2a30      	cmp	r2, #48	; 0x30
 8006d0a:	d0f9      	beq.n	8006d00 <_strtod_l+0x2a8>
 8006d0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d10:	2908      	cmp	r1, #8
 8006d12:	f63f af79 	bhi.w	8006c08 <_strtod_l+0x1b0>
 8006d16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d1c:	9206      	str	r2, [sp, #24]
 8006d1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d20:	1c51      	adds	r1, r2, #1
 8006d22:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d24:	7852      	ldrb	r2, [r2, #1]
 8006d26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d2a:	2e09      	cmp	r6, #9
 8006d2c:	d937      	bls.n	8006d9e <_strtod_l+0x346>
 8006d2e:	9e06      	ldr	r6, [sp, #24]
 8006d30:	1b89      	subs	r1, r1, r6
 8006d32:	2908      	cmp	r1, #8
 8006d34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d38:	dc02      	bgt.n	8006d40 <_strtod_l+0x2e8>
 8006d3a:	4576      	cmp	r6, lr
 8006d3c:	bfa8      	it	ge
 8006d3e:	4676      	movge	r6, lr
 8006d40:	f1bc 0f00 	cmp.w	ip, #0
 8006d44:	d000      	beq.n	8006d48 <_strtod_l+0x2f0>
 8006d46:	4276      	negs	r6, r6
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	d14d      	bne.n	8006de8 <_strtod_l+0x390>
 8006d4c:	9904      	ldr	r1, [sp, #16]
 8006d4e:	4301      	orrs	r1, r0
 8006d50:	f47f aec6 	bne.w	8006ae0 <_strtod_l+0x88>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f47f aee1 	bne.w	8006b1c <_strtod_l+0xc4>
 8006d5a:	2a69      	cmp	r2, #105	; 0x69
 8006d5c:	d027      	beq.n	8006dae <_strtod_l+0x356>
 8006d5e:	dc24      	bgt.n	8006daa <_strtod_l+0x352>
 8006d60:	2a49      	cmp	r2, #73	; 0x49
 8006d62:	d024      	beq.n	8006dae <_strtod_l+0x356>
 8006d64:	2a4e      	cmp	r2, #78	; 0x4e
 8006d66:	f47f aed9 	bne.w	8006b1c <_strtod_l+0xc4>
 8006d6a:	499f      	ldr	r1, [pc, #636]	; (8006fe8 <_strtod_l+0x590>)
 8006d6c:	a817      	add	r0, sp, #92	; 0x5c
 8006d6e:	f002 f8d7 	bl	8008f20 <__match>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f43f aed2 	beq.w	8006b1c <_strtod_l+0xc4>
 8006d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b28      	cmp	r3, #40	; 0x28
 8006d7e:	d12d      	bne.n	8006ddc <_strtod_l+0x384>
 8006d80:	499a      	ldr	r1, [pc, #616]	; (8006fec <_strtod_l+0x594>)
 8006d82:	aa1a      	add	r2, sp, #104	; 0x68
 8006d84:	a817      	add	r0, sp, #92	; 0x5c
 8006d86:	f002 f8df 	bl	8008f48 <__hexnan>
 8006d8a:	2805      	cmp	r0, #5
 8006d8c:	d126      	bne.n	8006ddc <_strtod_l+0x384>
 8006d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006d94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d9c:	e6a0      	b.n	8006ae0 <_strtod_l+0x88>
 8006d9e:	210a      	movs	r1, #10
 8006da0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006da4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006da8:	e7b9      	b.n	8006d1e <_strtod_l+0x2c6>
 8006daa:	2a6e      	cmp	r2, #110	; 0x6e
 8006dac:	e7db      	b.n	8006d66 <_strtod_l+0x30e>
 8006dae:	4990      	ldr	r1, [pc, #576]	; (8006ff0 <_strtod_l+0x598>)
 8006db0:	a817      	add	r0, sp, #92	; 0x5c
 8006db2:	f002 f8b5 	bl	8008f20 <__match>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f aeb0 	beq.w	8006b1c <_strtod_l+0xc4>
 8006dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dbe:	498d      	ldr	r1, [pc, #564]	; (8006ff4 <_strtod_l+0x59c>)
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	a817      	add	r0, sp, #92	; 0x5c
 8006dc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006dc6:	f002 f8ab 	bl	8008f20 <__match>
 8006dca:	b910      	cbnz	r0, 8006dd2 <_strtod_l+0x37a>
 8006dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dce:	3301      	adds	r3, #1
 8006dd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006dd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007004 <_strtod_l+0x5ac>
 8006dd6:	f04f 0a00 	mov.w	sl, #0
 8006dda:	e681      	b.n	8006ae0 <_strtod_l+0x88>
 8006ddc:	4886      	ldr	r0, [pc, #536]	; (8006ff8 <_strtod_l+0x5a0>)
 8006dde:	f003 fde3 	bl	800a9a8 <nan>
 8006de2:	ec5b ab10 	vmov	sl, fp, d0
 8006de6:	e67b      	b.n	8006ae0 <_strtod_l+0x88>
 8006de8:	9b05      	ldr	r3, [sp, #20]
 8006dea:	9807      	ldr	r0, [sp, #28]
 8006dec:	1af3      	subs	r3, r6, r3
 8006dee:	2f00      	cmp	r7, #0
 8006df0:	bf08      	it	eq
 8006df2:	462f      	moveq	r7, r5
 8006df4:	2d10      	cmp	r5, #16
 8006df6:	9306      	str	r3, [sp, #24]
 8006df8:	46a8      	mov	r8, r5
 8006dfa:	bfa8      	it	ge
 8006dfc:	f04f 0810 	movge.w	r8, #16
 8006e00:	f7f9 fb80 	bl	8000504 <__aeabi_ui2d>
 8006e04:	2d09      	cmp	r5, #9
 8006e06:	4682      	mov	sl, r0
 8006e08:	468b      	mov	fp, r1
 8006e0a:	dd13      	ble.n	8006e34 <_strtod_l+0x3dc>
 8006e0c:	4b7b      	ldr	r3, [pc, #492]	; (8006ffc <_strtod_l+0x5a4>)
 8006e0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e16:	f7f9 fbef 	bl	80005f8 <__aeabi_dmul>
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	4648      	mov	r0, r9
 8006e1e:	468b      	mov	fp, r1
 8006e20:	f7f9 fb70 	bl	8000504 <__aeabi_ui2d>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4650      	mov	r0, sl
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	f7f9 fa2e 	bl	800028c <__adddf3>
 8006e30:	4682      	mov	sl, r0
 8006e32:	468b      	mov	fp, r1
 8006e34:	2d0f      	cmp	r5, #15
 8006e36:	dc38      	bgt.n	8006eaa <_strtod_l+0x452>
 8006e38:	9b06      	ldr	r3, [sp, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f43f ae50 	beq.w	8006ae0 <_strtod_l+0x88>
 8006e40:	dd24      	ble.n	8006e8c <_strtod_l+0x434>
 8006e42:	2b16      	cmp	r3, #22
 8006e44:	dc0b      	bgt.n	8006e5e <_strtod_l+0x406>
 8006e46:	496d      	ldr	r1, [pc, #436]	; (8006ffc <_strtod_l+0x5a4>)
 8006e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e50:	4652      	mov	r2, sl
 8006e52:	465b      	mov	r3, fp
 8006e54:	f7f9 fbd0 	bl	80005f8 <__aeabi_dmul>
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	e640      	b.n	8006ae0 <_strtod_l+0x88>
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e64:	4293      	cmp	r3, r2
 8006e66:	db20      	blt.n	8006eaa <_strtod_l+0x452>
 8006e68:	4c64      	ldr	r4, [pc, #400]	; (8006ffc <_strtod_l+0x5a4>)
 8006e6a:	f1c5 050f 	rsb	r5, r5, #15
 8006e6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e72:	4652      	mov	r2, sl
 8006e74:	465b      	mov	r3, fp
 8006e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7a:	f7f9 fbbd 	bl	80005f8 <__aeabi_dmul>
 8006e7e:	9b06      	ldr	r3, [sp, #24]
 8006e80:	1b5d      	subs	r5, r3, r5
 8006e82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e8a:	e7e3      	b.n	8006e54 <_strtod_l+0x3fc>
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	3316      	adds	r3, #22
 8006e90:	db0b      	blt.n	8006eaa <_strtod_l+0x452>
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	1b9e      	subs	r6, r3, r6
 8006e96:	4b59      	ldr	r3, [pc, #356]	; (8006ffc <_strtod_l+0x5a4>)
 8006e98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	4659      	mov	r1, fp
 8006ea4:	f7f9 fcd2 	bl	800084c <__aeabi_ddiv>
 8006ea8:	e7d6      	b.n	8006e58 <_strtod_l+0x400>
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	eba5 0808 	sub.w	r8, r5, r8
 8006eb0:	4498      	add	r8, r3
 8006eb2:	f1b8 0f00 	cmp.w	r8, #0
 8006eb6:	dd74      	ble.n	8006fa2 <_strtod_l+0x54a>
 8006eb8:	f018 030f 	ands.w	r3, r8, #15
 8006ebc:	d00a      	beq.n	8006ed4 <_strtod_l+0x47c>
 8006ebe:	494f      	ldr	r1, [pc, #316]	; (8006ffc <_strtod_l+0x5a4>)
 8006ec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	465b      	mov	r3, fp
 8006ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ecc:	f7f9 fb94 	bl	80005f8 <__aeabi_dmul>
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	468b      	mov	fp, r1
 8006ed4:	f038 080f 	bics.w	r8, r8, #15
 8006ed8:	d04f      	beq.n	8006f7a <_strtod_l+0x522>
 8006eda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ede:	dd22      	ble.n	8006f26 <_strtod_l+0x4ce>
 8006ee0:	2500      	movs	r5, #0
 8006ee2:	462e      	mov	r6, r5
 8006ee4:	9507      	str	r5, [sp, #28]
 8006ee6:	9505      	str	r5, [sp, #20]
 8006ee8:	2322      	movs	r3, #34	; 0x22
 8006eea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007004 <_strtod_l+0x5ac>
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	f04f 0a00 	mov.w	sl, #0
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f43f adf2 	beq.w	8006ae0 <_strtod_l+0x88>
 8006efc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006efe:	4620      	mov	r0, r4
 8006f00:	f002 f9a6 	bl	8009250 <_Bfree>
 8006f04:	9905      	ldr	r1, [sp, #20]
 8006f06:	4620      	mov	r0, r4
 8006f08:	f002 f9a2 	bl	8009250 <_Bfree>
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f002 f99e 	bl	8009250 <_Bfree>
 8006f14:	9907      	ldr	r1, [sp, #28]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f002 f99a 	bl	8009250 <_Bfree>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f002 f996 	bl	8009250 <_Bfree>
 8006f24:	e5dc      	b.n	8006ae0 <_strtod_l+0x88>
 8006f26:	4b36      	ldr	r3, [pc, #216]	; (8007000 <_strtod_l+0x5a8>)
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f30:	4650      	mov	r0, sl
 8006f32:	4659      	mov	r1, fp
 8006f34:	4699      	mov	r9, r3
 8006f36:	f1b8 0f01 	cmp.w	r8, #1
 8006f3a:	dc21      	bgt.n	8006f80 <_strtod_l+0x528>
 8006f3c:	b10b      	cbz	r3, 8006f42 <_strtod_l+0x4ea>
 8006f3e:	4682      	mov	sl, r0
 8006f40:	468b      	mov	fp, r1
 8006f42:	4b2f      	ldr	r3, [pc, #188]	; (8007000 <_strtod_l+0x5a8>)
 8006f44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	465b      	mov	r3, fp
 8006f50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	4b2a      	ldr	r3, [pc, #168]	; (8007004 <_strtod_l+0x5ac>)
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	400b      	ands	r3, r1
 8006f5e:	492a      	ldr	r1, [pc, #168]	; (8007008 <_strtod_l+0x5b0>)
 8006f60:	428b      	cmp	r3, r1
 8006f62:	4682      	mov	sl, r0
 8006f64:	d8bc      	bhi.n	8006ee0 <_strtod_l+0x488>
 8006f66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f6a:	428b      	cmp	r3, r1
 8006f6c:	bf86      	itte	hi
 8006f6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800700c <_strtod_l+0x5b4>
 8006f72:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	e084      	b.n	800708a <_strtod_l+0x632>
 8006f80:	f018 0f01 	tst.w	r8, #1
 8006f84:	d005      	beq.n	8006f92 <_strtod_l+0x53a>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	2301      	movs	r3, #1
 8006f92:	9a04      	ldr	r2, [sp, #16]
 8006f94:	3208      	adds	r2, #8
 8006f96:	f109 0901 	add.w	r9, r9, #1
 8006f9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f9e:	9204      	str	r2, [sp, #16]
 8006fa0:	e7c9      	b.n	8006f36 <_strtod_l+0x4de>
 8006fa2:	d0ea      	beq.n	8006f7a <_strtod_l+0x522>
 8006fa4:	f1c8 0800 	rsb	r8, r8, #0
 8006fa8:	f018 020f 	ands.w	r2, r8, #15
 8006fac:	d00a      	beq.n	8006fc4 <_strtod_l+0x56c>
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <_strtod_l+0x5a4>)
 8006fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 fc46 	bl	800084c <__aeabi_ddiv>
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	468b      	mov	fp, r1
 8006fc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006fc8:	d0d7      	beq.n	8006f7a <_strtod_l+0x522>
 8006fca:	f1b8 0f1f 	cmp.w	r8, #31
 8006fce:	dd1f      	ble.n	8007010 <_strtod_l+0x5b8>
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	462e      	mov	r6, r5
 8006fd4:	9507      	str	r5, [sp, #28]
 8006fd6:	9505      	str	r5, [sp, #20]
 8006fd8:	2322      	movs	r3, #34	; 0x22
 8006fda:	f04f 0a00 	mov.w	sl, #0
 8006fde:	f04f 0b00 	mov.w	fp, #0
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	e786      	b.n	8006ef4 <_strtod_l+0x49c>
 8006fe6:	bf00      	nop
 8006fe8:	0800b315 	.word	0x0800b315
 8006fec:	0800b354 	.word	0x0800b354
 8006ff0:	0800b30d 	.word	0x0800b30d
 8006ff4:	0800b494 	.word	0x0800b494
 8006ff8:	0800b0c7 	.word	0x0800b0c7
 8006ffc:	0800b688 	.word	0x0800b688
 8007000:	0800b660 	.word	0x0800b660
 8007004:	7ff00000 	.word	0x7ff00000
 8007008:	7ca00000 	.word	0x7ca00000
 800700c:	7fefffff 	.word	0x7fefffff
 8007010:	f018 0310 	ands.w	r3, r8, #16
 8007014:	bf18      	it	ne
 8007016:	236a      	movne	r3, #106	; 0x6a
 8007018:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80073c8 <_strtod_l+0x970>
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	4650      	mov	r0, sl
 8007020:	4659      	mov	r1, fp
 8007022:	2300      	movs	r3, #0
 8007024:	f018 0f01 	tst.w	r8, #1
 8007028:	d004      	beq.n	8007034 <_strtod_l+0x5dc>
 800702a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800702e:	f7f9 fae3 	bl	80005f8 <__aeabi_dmul>
 8007032:	2301      	movs	r3, #1
 8007034:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007038:	f109 0908 	add.w	r9, r9, #8
 800703c:	d1f2      	bne.n	8007024 <_strtod_l+0x5cc>
 800703e:	b10b      	cbz	r3, 8007044 <_strtod_l+0x5ec>
 8007040:	4682      	mov	sl, r0
 8007042:	468b      	mov	fp, r1
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	b1c3      	cbz	r3, 800707a <_strtod_l+0x622>
 8007048:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800704c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007050:	2b00      	cmp	r3, #0
 8007052:	4659      	mov	r1, fp
 8007054:	dd11      	ble.n	800707a <_strtod_l+0x622>
 8007056:	2b1f      	cmp	r3, #31
 8007058:	f340 8124 	ble.w	80072a4 <_strtod_l+0x84c>
 800705c:	2b34      	cmp	r3, #52	; 0x34
 800705e:	bfde      	ittt	le
 8007060:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007064:	f04f 33ff 	movle.w	r3, #4294967295
 8007068:	fa03 f202 	lslle.w	r2, r3, r2
 800706c:	f04f 0a00 	mov.w	sl, #0
 8007070:	bfcc      	ite	gt
 8007072:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007076:	ea02 0b01 	andle.w	fp, r2, r1
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4650      	mov	r0, sl
 8007080:	4659      	mov	r1, fp
 8007082:	f7f9 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007086:	2800      	cmp	r0, #0
 8007088:	d1a2      	bne.n	8006fd0 <_strtod_l+0x578>
 800708a:	9b07      	ldr	r3, [sp, #28]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	9908      	ldr	r1, [sp, #32]
 8007090:	462b      	mov	r3, r5
 8007092:	463a      	mov	r2, r7
 8007094:	4620      	mov	r0, r4
 8007096:	f002 f943 	bl	8009320 <__s2b>
 800709a:	9007      	str	r0, [sp, #28]
 800709c:	2800      	cmp	r0, #0
 800709e:	f43f af1f 	beq.w	8006ee0 <_strtod_l+0x488>
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	1b9e      	subs	r6, r3, r6
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bfb4      	ite	lt
 80070ac:	4633      	movlt	r3, r6
 80070ae:	2300      	movge	r3, #0
 80070b0:	930c      	str	r3, [sp, #48]	; 0x30
 80070b2:	9b06      	ldr	r3, [sp, #24]
 80070b4:	2500      	movs	r5, #0
 80070b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070ba:	9312      	str	r3, [sp, #72]	; 0x48
 80070bc:	462e      	mov	r6, r5
 80070be:	9b07      	ldr	r3, [sp, #28]
 80070c0:	4620      	mov	r0, r4
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	f002 f884 	bl	80091d0 <_Balloc>
 80070c8:	9005      	str	r0, [sp, #20]
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f43f af0c 	beq.w	8006ee8 <_strtod_l+0x490>
 80070d0:	9b07      	ldr	r3, [sp, #28]
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	3202      	adds	r2, #2
 80070d6:	f103 010c 	add.w	r1, r3, #12
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	300c      	adds	r0, #12
 80070de:	f002 f869 	bl	80091b4 <memcpy>
 80070e2:	ec4b ab10 	vmov	d0, sl, fp
 80070e6:	aa1a      	add	r2, sp, #104	; 0x68
 80070e8:	a919      	add	r1, sp, #100	; 0x64
 80070ea:	4620      	mov	r0, r4
 80070ec:	f002 fc5e 	bl	80099ac <__d2b>
 80070f0:	ec4b ab18 	vmov	d8, sl, fp
 80070f4:	9018      	str	r0, [sp, #96]	; 0x60
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f aef6 	beq.w	8006ee8 <_strtod_l+0x490>
 80070fc:	2101      	movs	r1, #1
 80070fe:	4620      	mov	r0, r4
 8007100:	f002 f9a8 	bl	8009454 <__i2b>
 8007104:	4606      	mov	r6, r0
 8007106:	2800      	cmp	r0, #0
 8007108:	f43f aeee 	beq.w	8006ee8 <_strtod_l+0x490>
 800710c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800710e:	9904      	ldr	r1, [sp, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfab      	itete	ge
 8007114:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007116:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007118:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800711a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800711e:	bfac      	ite	ge
 8007120:	eb03 0902 	addge.w	r9, r3, r2
 8007124:	1ad7      	sublt	r7, r2, r3
 8007126:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007128:	eba3 0801 	sub.w	r8, r3, r1
 800712c:	4490      	add	r8, r2
 800712e:	4ba1      	ldr	r3, [pc, #644]	; (80073b4 <_strtod_l+0x95c>)
 8007130:	f108 38ff 	add.w	r8, r8, #4294967295
 8007134:	4598      	cmp	r8, r3
 8007136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800713a:	f280 80c7 	bge.w	80072cc <_strtod_l+0x874>
 800713e:	eba3 0308 	sub.w	r3, r3, r8
 8007142:	2b1f      	cmp	r3, #31
 8007144:	eba2 0203 	sub.w	r2, r2, r3
 8007148:	f04f 0101 	mov.w	r1, #1
 800714c:	f300 80b1 	bgt.w	80072b2 <_strtod_l+0x85a>
 8007150:	fa01 f303 	lsl.w	r3, r1, r3
 8007154:	930d      	str	r3, [sp, #52]	; 0x34
 8007156:	2300      	movs	r3, #0
 8007158:	9308      	str	r3, [sp, #32]
 800715a:	eb09 0802 	add.w	r8, r9, r2
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	45c1      	cmp	r9, r8
 8007162:	4417      	add	r7, r2
 8007164:	441f      	add	r7, r3
 8007166:	464b      	mov	r3, r9
 8007168:	bfa8      	it	ge
 800716a:	4643      	movge	r3, r8
 800716c:	42bb      	cmp	r3, r7
 800716e:	bfa8      	it	ge
 8007170:	463b      	movge	r3, r7
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfc2      	ittt	gt
 8007176:	eba8 0803 	subgt.w	r8, r8, r3
 800717a:	1aff      	subgt	r7, r7, r3
 800717c:	eba9 0903 	subgt.w	r9, r9, r3
 8007180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd17      	ble.n	80071b6 <_strtod_l+0x75e>
 8007186:	4631      	mov	r1, r6
 8007188:	461a      	mov	r2, r3
 800718a:	4620      	mov	r0, r4
 800718c:	f002 fa22 	bl	80095d4 <__pow5mult>
 8007190:	4606      	mov	r6, r0
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aea8 	beq.w	8006ee8 <_strtod_l+0x490>
 8007198:	4601      	mov	r1, r0
 800719a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800719c:	4620      	mov	r0, r4
 800719e:	f002 f96f 	bl	8009480 <__multiply>
 80071a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f43f ae9f 	beq.w	8006ee8 <_strtod_l+0x490>
 80071aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071ac:	4620      	mov	r0, r4
 80071ae:	f002 f84f 	bl	8009250 <_Bfree>
 80071b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b4:	9318      	str	r3, [sp, #96]	; 0x60
 80071b6:	f1b8 0f00 	cmp.w	r8, #0
 80071ba:	f300 808c 	bgt.w	80072d6 <_strtod_l+0x87e>
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dd08      	ble.n	80071d6 <_strtod_l+0x77e>
 80071c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071c6:	9905      	ldr	r1, [sp, #20]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f002 fa03 	bl	80095d4 <__pow5mult>
 80071ce:	9005      	str	r0, [sp, #20]
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f43f ae89 	beq.w	8006ee8 <_strtod_l+0x490>
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	dd08      	ble.n	80071ec <_strtod_l+0x794>
 80071da:	9905      	ldr	r1, [sp, #20]
 80071dc:	463a      	mov	r2, r7
 80071de:	4620      	mov	r0, r4
 80071e0:	f002 fa52 	bl	8009688 <__lshift>
 80071e4:	9005      	str	r0, [sp, #20]
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f ae7e 	beq.w	8006ee8 <_strtod_l+0x490>
 80071ec:	f1b9 0f00 	cmp.w	r9, #0
 80071f0:	dd08      	ble.n	8007204 <_strtod_l+0x7ac>
 80071f2:	4631      	mov	r1, r6
 80071f4:	464a      	mov	r2, r9
 80071f6:	4620      	mov	r0, r4
 80071f8:	f002 fa46 	bl	8009688 <__lshift>
 80071fc:	4606      	mov	r6, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae72 	beq.w	8006ee8 <_strtod_l+0x490>
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007208:	4620      	mov	r0, r4
 800720a:	f002 fac9 	bl	80097a0 <__mdiff>
 800720e:	4605      	mov	r5, r0
 8007210:	2800      	cmp	r0, #0
 8007212:	f43f ae69 	beq.w	8006ee8 <_strtod_l+0x490>
 8007216:	68c3      	ldr	r3, [r0, #12]
 8007218:	930b      	str	r3, [sp, #44]	; 0x2c
 800721a:	2300      	movs	r3, #0
 800721c:	60c3      	str	r3, [r0, #12]
 800721e:	4631      	mov	r1, r6
 8007220:	f002 faa2 	bl	8009768 <__mcmp>
 8007224:	2800      	cmp	r0, #0
 8007226:	da60      	bge.n	80072ea <_strtod_l+0x892>
 8007228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722a:	ea53 030a 	orrs.w	r3, r3, sl
 800722e:	f040 8082 	bne.w	8007336 <_strtod_l+0x8de>
 8007232:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007236:	2b00      	cmp	r3, #0
 8007238:	d17d      	bne.n	8007336 <_strtod_l+0x8de>
 800723a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800723e:	0d1b      	lsrs	r3, r3, #20
 8007240:	051b      	lsls	r3, r3, #20
 8007242:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007246:	d976      	bls.n	8007336 <_strtod_l+0x8de>
 8007248:	696b      	ldr	r3, [r5, #20]
 800724a:	b913      	cbnz	r3, 8007252 <_strtod_l+0x7fa>
 800724c:	692b      	ldr	r3, [r5, #16]
 800724e:	2b01      	cmp	r3, #1
 8007250:	dd71      	ble.n	8007336 <_strtod_l+0x8de>
 8007252:	4629      	mov	r1, r5
 8007254:	2201      	movs	r2, #1
 8007256:	4620      	mov	r0, r4
 8007258:	f002 fa16 	bl	8009688 <__lshift>
 800725c:	4631      	mov	r1, r6
 800725e:	4605      	mov	r5, r0
 8007260:	f002 fa82 	bl	8009768 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	dd66      	ble.n	8007336 <_strtod_l+0x8de>
 8007268:	9904      	ldr	r1, [sp, #16]
 800726a:	4a53      	ldr	r2, [pc, #332]	; (80073b8 <_strtod_l+0x960>)
 800726c:	465b      	mov	r3, fp
 800726e:	2900      	cmp	r1, #0
 8007270:	f000 8081 	beq.w	8007376 <_strtod_l+0x91e>
 8007274:	ea02 010b 	and.w	r1, r2, fp
 8007278:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800727c:	dc7b      	bgt.n	8007376 <_strtod_l+0x91e>
 800727e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007282:	f77f aea9 	ble.w	8006fd8 <_strtod_l+0x580>
 8007286:	4b4d      	ldr	r3, [pc, #308]	; (80073bc <_strtod_l+0x964>)
 8007288:	4650      	mov	r0, sl
 800728a:	4659      	mov	r1, fp
 800728c:	2200      	movs	r2, #0
 800728e:	f7f9 f9b3 	bl	80005f8 <__aeabi_dmul>
 8007292:	460b      	mov	r3, r1
 8007294:	4303      	orrs	r3, r0
 8007296:	bf08      	it	eq
 8007298:	2322      	moveq	r3, #34	; 0x22
 800729a:	4682      	mov	sl, r0
 800729c:	468b      	mov	fp, r1
 800729e:	bf08      	it	eq
 80072a0:	6023      	streq	r3, [r4, #0]
 80072a2:	e62b      	b.n	8006efc <_strtod_l+0x4a4>
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	ea03 0a0a 	and.w	sl, r3, sl
 80072b0:	e6e3      	b.n	800707a <_strtod_l+0x622>
 80072b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80072b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80072ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80072be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80072c2:	fa01 f308 	lsl.w	r3, r1, r8
 80072c6:	9308      	str	r3, [sp, #32]
 80072c8:	910d      	str	r1, [sp, #52]	; 0x34
 80072ca:	e746      	b.n	800715a <_strtod_l+0x702>
 80072cc:	2300      	movs	r3, #0
 80072ce:	9308      	str	r3, [sp, #32]
 80072d0:	2301      	movs	r3, #1
 80072d2:	930d      	str	r3, [sp, #52]	; 0x34
 80072d4:	e741      	b.n	800715a <_strtod_l+0x702>
 80072d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072d8:	4642      	mov	r2, r8
 80072da:	4620      	mov	r0, r4
 80072dc:	f002 f9d4 	bl	8009688 <__lshift>
 80072e0:	9018      	str	r0, [sp, #96]	; 0x60
 80072e2:	2800      	cmp	r0, #0
 80072e4:	f47f af6b 	bne.w	80071be <_strtod_l+0x766>
 80072e8:	e5fe      	b.n	8006ee8 <_strtod_l+0x490>
 80072ea:	465f      	mov	r7, fp
 80072ec:	d16e      	bne.n	80073cc <_strtod_l+0x974>
 80072ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072f4:	b342      	cbz	r2, 8007348 <_strtod_l+0x8f0>
 80072f6:	4a32      	ldr	r2, [pc, #200]	; (80073c0 <_strtod_l+0x968>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d128      	bne.n	800734e <_strtod_l+0x8f6>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	4651      	mov	r1, sl
 8007300:	b1eb      	cbz	r3, 800733e <_strtod_l+0x8e6>
 8007302:	4b2d      	ldr	r3, [pc, #180]	; (80073b8 <_strtod_l+0x960>)
 8007304:	403b      	ands	r3, r7
 8007306:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	d819      	bhi.n	8007344 <_strtod_l+0x8ec>
 8007310:	0d1b      	lsrs	r3, r3, #20
 8007312:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	4299      	cmp	r1, r3
 800731c:	d117      	bne.n	800734e <_strtod_l+0x8f6>
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <_strtod_l+0x96c>)
 8007320:	429f      	cmp	r7, r3
 8007322:	d102      	bne.n	800732a <_strtod_l+0x8d2>
 8007324:	3101      	adds	r1, #1
 8007326:	f43f addf 	beq.w	8006ee8 <_strtod_l+0x490>
 800732a:	4b23      	ldr	r3, [pc, #140]	; (80073b8 <_strtod_l+0x960>)
 800732c:	403b      	ands	r3, r7
 800732e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007332:	f04f 0a00 	mov.w	sl, #0
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1a4      	bne.n	8007286 <_strtod_l+0x82e>
 800733c:	e5de      	b.n	8006efc <_strtod_l+0x4a4>
 800733e:	f04f 33ff 	mov.w	r3, #4294967295
 8007342:	e7ea      	b.n	800731a <_strtod_l+0x8c2>
 8007344:	4613      	mov	r3, r2
 8007346:	e7e8      	b.n	800731a <_strtod_l+0x8c2>
 8007348:	ea53 030a 	orrs.w	r3, r3, sl
 800734c:	d08c      	beq.n	8007268 <_strtod_l+0x810>
 800734e:	9b08      	ldr	r3, [sp, #32]
 8007350:	b1db      	cbz	r3, 800738a <_strtod_l+0x932>
 8007352:	423b      	tst	r3, r7
 8007354:	d0ef      	beq.n	8007336 <_strtod_l+0x8de>
 8007356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007358:	9a04      	ldr	r2, [sp, #16]
 800735a:	4650      	mov	r0, sl
 800735c:	4659      	mov	r1, fp
 800735e:	b1c3      	cbz	r3, 8007392 <_strtod_l+0x93a>
 8007360:	f7ff fb5b 	bl	8006a1a <sulp>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	ec51 0b18 	vmov	r0, r1, d8
 800736c:	f7f8 ff8e 	bl	800028c <__adddf3>
 8007370:	4682      	mov	sl, r0
 8007372:	468b      	mov	fp, r1
 8007374:	e7df      	b.n	8007336 <_strtod_l+0x8de>
 8007376:	4013      	ands	r3, r2
 8007378:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800737c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007380:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007384:	f04f 3aff 	mov.w	sl, #4294967295
 8007388:	e7d5      	b.n	8007336 <_strtod_l+0x8de>
 800738a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800738c:	ea13 0f0a 	tst.w	r3, sl
 8007390:	e7e0      	b.n	8007354 <_strtod_l+0x8fc>
 8007392:	f7ff fb42 	bl	8006a1a <sulp>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	ec51 0b18 	vmov	r0, r1, d8
 800739e:	f7f8 ff73 	bl	8000288 <__aeabi_dsub>
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4682      	mov	sl, r0
 80073a8:	468b      	mov	fp, r1
 80073aa:	f7f9 fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d0c1      	beq.n	8007336 <_strtod_l+0x8de>
 80073b2:	e611      	b.n	8006fd8 <_strtod_l+0x580>
 80073b4:	fffffc02 	.word	0xfffffc02
 80073b8:	7ff00000 	.word	0x7ff00000
 80073bc:	39500000 	.word	0x39500000
 80073c0:	000fffff 	.word	0x000fffff
 80073c4:	7fefffff 	.word	0x7fefffff
 80073c8:	0800b368 	.word	0x0800b368
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	f002 fb48 	bl	8009a64 <__ratio>
 80073d4:	ec59 8b10 	vmov	r8, r9, d0
 80073d8:	ee10 0a10 	vmov	r0, s0
 80073dc:	2200      	movs	r2, #0
 80073de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fb84 	bl	8000af0 <__aeabi_dcmple>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d07a      	beq.n	80074e2 <_strtod_l+0xa8a>
 80073ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04a      	beq.n	8007488 <_strtod_l+0xa30>
 80073f2:	4b95      	ldr	r3, [pc, #596]	; (8007648 <_strtod_l+0xbf0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007648 <_strtod_l+0xbf0>
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	4b92      	ldr	r3, [pc, #584]	; (800764c <_strtod_l+0xbf4>)
 8007404:	403b      	ands	r3, r7
 8007406:	930d      	str	r3, [sp, #52]	; 0x34
 8007408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800740a:	4b91      	ldr	r3, [pc, #580]	; (8007650 <_strtod_l+0xbf8>)
 800740c:	429a      	cmp	r2, r3
 800740e:	f040 80b0 	bne.w	8007572 <_strtod_l+0xb1a>
 8007412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007416:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800741a:	ec4b ab10 	vmov	d0, sl, fp
 800741e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007422:	f002 fa47 	bl	80098b4 <__ulp>
 8007426:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800742a:	ec53 2b10 	vmov	r2, r3, d0
 800742e:	f7f9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8007432:	4652      	mov	r2, sl
 8007434:	465b      	mov	r3, fp
 8007436:	f7f8 ff29 	bl	800028c <__adddf3>
 800743a:	460b      	mov	r3, r1
 800743c:	4983      	ldr	r1, [pc, #524]	; (800764c <_strtod_l+0xbf4>)
 800743e:	4a85      	ldr	r2, [pc, #532]	; (8007654 <_strtod_l+0xbfc>)
 8007440:	4019      	ands	r1, r3
 8007442:	4291      	cmp	r1, r2
 8007444:	4682      	mov	sl, r0
 8007446:	d960      	bls.n	800750a <_strtod_l+0xab2>
 8007448:	ee18 3a90 	vmov	r3, s17
 800744c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007450:	4293      	cmp	r3, r2
 8007452:	d104      	bne.n	800745e <_strtod_l+0xa06>
 8007454:	ee18 3a10 	vmov	r3, s16
 8007458:	3301      	adds	r3, #1
 800745a:	f43f ad45 	beq.w	8006ee8 <_strtod_l+0x490>
 800745e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007660 <_strtod_l+0xc08>
 8007462:	f04f 3aff 	mov.w	sl, #4294967295
 8007466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007468:	4620      	mov	r0, r4
 800746a:	f001 fef1 	bl	8009250 <_Bfree>
 800746e:	9905      	ldr	r1, [sp, #20]
 8007470:	4620      	mov	r0, r4
 8007472:	f001 feed 	bl	8009250 <_Bfree>
 8007476:	4631      	mov	r1, r6
 8007478:	4620      	mov	r0, r4
 800747a:	f001 fee9 	bl	8009250 <_Bfree>
 800747e:	4629      	mov	r1, r5
 8007480:	4620      	mov	r0, r4
 8007482:	f001 fee5 	bl	8009250 <_Bfree>
 8007486:	e61a      	b.n	80070be <_strtod_l+0x666>
 8007488:	f1ba 0f00 	cmp.w	sl, #0
 800748c:	d11b      	bne.n	80074c6 <_strtod_l+0xa6e>
 800748e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007492:	b9f3      	cbnz	r3, 80074d2 <_strtod_l+0xa7a>
 8007494:	4b6c      	ldr	r3, [pc, #432]	; (8007648 <_strtod_l+0xbf0>)
 8007496:	2200      	movs	r2, #0
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f7f9 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80074a0:	b9d0      	cbnz	r0, 80074d8 <_strtod_l+0xa80>
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	4b6c      	ldr	r3, [pc, #432]	; (8007658 <_strtod_l+0xc00>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	f7f9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80074ba:	9315      	str	r3, [sp, #84]	; 0x54
 80074bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074c4:	e79d      	b.n	8007402 <_strtod_l+0x9aa>
 80074c6:	f1ba 0f01 	cmp.w	sl, #1
 80074ca:	d102      	bne.n	80074d2 <_strtod_l+0xa7a>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	f43f ad83 	beq.w	8006fd8 <_strtod_l+0x580>
 80074d2:	4b62      	ldr	r3, [pc, #392]	; (800765c <_strtod_l+0xc04>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	e78e      	b.n	80073f6 <_strtod_l+0x99e>
 80074d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007658 <_strtod_l+0xc00>
 80074dc:	f04f 0800 	mov.w	r8, #0
 80074e0:	e7e7      	b.n	80074b2 <_strtod_l+0xa5a>
 80074e2:	4b5d      	ldr	r3, [pc, #372]	; (8007658 <_strtod_l+0xc00>)
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f9 f885 	bl	80005f8 <__aeabi_dmul>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	4680      	mov	r8, r0
 80074f2:	4689      	mov	r9, r1
 80074f4:	b933      	cbnz	r3, 8007504 <_strtod_l+0xaac>
 80074f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074fa:	900e      	str	r0, [sp, #56]	; 0x38
 80074fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80074fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007502:	e7dd      	b.n	80074c0 <_strtod_l+0xa68>
 8007504:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007508:	e7f9      	b.n	80074fe <_strtod_l+0xaa6>
 800750a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1a8      	bne.n	8007466 <_strtod_l+0xa0e>
 8007514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	051b      	lsls	r3, r3, #20
 800751e:	429a      	cmp	r2, r3
 8007520:	d1a1      	bne.n	8007466 <_strtod_l+0xa0e>
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 fbc7 	bl	8000cb8 <__aeabi_d2lz>
 800752a:	f7f9 f837 	bl	800059c <__aeabi_l2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f7f8 fea7 	bl	8000288 <__aeabi_dsub>
 800753a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800753c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007540:	ea43 030a 	orr.w	r3, r3, sl
 8007544:	4313      	orrs	r3, r2
 8007546:	4680      	mov	r8, r0
 8007548:	4689      	mov	r9, r1
 800754a:	d055      	beq.n	80075f8 <_strtod_l+0xba0>
 800754c:	a336      	add	r3, pc, #216	; (adr r3, 8007628 <_strtod_l+0xbd0>)
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f7f9 fac3 	bl	8000adc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	f47f acd0 	bne.w	8006efc <_strtod_l+0x4a4>
 800755c:	a334      	add	r3, pc, #208	; (adr r3, 8007630 <_strtod_l+0xbd8>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f9 fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f af7b 	beq.w	8007466 <_strtod_l+0xa0e>
 8007570:	e4c4      	b.n	8006efc <_strtod_l+0x4a4>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	b333      	cbz	r3, 80075c4 <_strtod_l+0xb6c>
 8007576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007578:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800757c:	d822      	bhi.n	80075c4 <_strtod_l+0xb6c>
 800757e:	a32e      	add	r3, pc, #184	; (adr r3, 8007638 <_strtod_l+0xbe0>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	4640      	mov	r0, r8
 8007586:	4649      	mov	r1, r9
 8007588:	f7f9 fab2 	bl	8000af0 <__aeabi_dcmple>
 800758c:	b1a0      	cbz	r0, 80075b8 <_strtod_l+0xb60>
 800758e:	4649      	mov	r1, r9
 8007590:	4640      	mov	r0, r8
 8007592:	f7f9 fb09 	bl	8000ba8 <__aeabi_d2uiz>
 8007596:	2801      	cmp	r0, #1
 8007598:	bf38      	it	cc
 800759a:	2001      	movcc	r0, #1
 800759c:	f7f8 ffb2 	bl	8000504 <__aeabi_ui2d>
 80075a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a2:	4680      	mov	r8, r0
 80075a4:	4689      	mov	r9, r1
 80075a6:	bb23      	cbnz	r3, 80075f2 <_strtod_l+0xb9a>
 80075a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075ac:	9010      	str	r0, [sp, #64]	; 0x40
 80075ae:	9311      	str	r3, [sp, #68]	; 0x44
 80075b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
 80075c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075c8:	eeb0 0a48 	vmov.f32	s0, s16
 80075cc:	eef0 0a68 	vmov.f32	s1, s17
 80075d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075d4:	f002 f96e 	bl	80098b4 <__ulp>
 80075d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075dc:	ec53 2b10 	vmov	r2, r3, d0
 80075e0:	f7f9 f80a 	bl	80005f8 <__aeabi_dmul>
 80075e4:	ec53 2b18 	vmov	r2, r3, d8
 80075e8:	f7f8 fe50 	bl	800028c <__adddf3>
 80075ec:	4682      	mov	sl, r0
 80075ee:	468b      	mov	fp, r1
 80075f0:	e78d      	b.n	800750e <_strtod_l+0xab6>
 80075f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80075f6:	e7db      	b.n	80075b0 <_strtod_l+0xb58>
 80075f8:	a311      	add	r3, pc, #68	; (adr r3, 8007640 <_strtod_l+0xbe8>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f9 fa6d 	bl	8000adc <__aeabi_dcmplt>
 8007602:	e7b2      	b.n	800756a <_strtod_l+0xb12>
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	; 0x28
 8007608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800760a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	f7ff ba6b 	b.w	8006ae8 <_strtod_l+0x90>
 8007612:	2a65      	cmp	r2, #101	; 0x65
 8007614:	f43f ab5f 	beq.w	8006cd6 <_strtod_l+0x27e>
 8007618:	2a45      	cmp	r2, #69	; 0x45
 800761a:	f43f ab5c 	beq.w	8006cd6 <_strtod_l+0x27e>
 800761e:	2301      	movs	r3, #1
 8007620:	f7ff bb94 	b.w	8006d4c <_strtod_l+0x2f4>
 8007624:	f3af 8000 	nop.w
 8007628:	94a03595 	.word	0x94a03595
 800762c:	3fdfffff 	.word	0x3fdfffff
 8007630:	35afe535 	.word	0x35afe535
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	ffc00000 	.word	0xffc00000
 800763c:	41dfffff 	.word	0x41dfffff
 8007640:	94a03595 	.word	0x94a03595
 8007644:	3fcfffff 	.word	0x3fcfffff
 8007648:	3ff00000 	.word	0x3ff00000
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	7fe00000 	.word	0x7fe00000
 8007654:	7c9fffff 	.word	0x7c9fffff
 8007658:	3fe00000 	.word	0x3fe00000
 800765c:	bff00000 	.word	0xbff00000
 8007660:	7fefffff 	.word	0x7fefffff

08007664 <_strtod_r>:
 8007664:	4b01      	ldr	r3, [pc, #4]	; (800766c <_strtod_r+0x8>)
 8007666:	f7ff b9f7 	b.w	8006a58 <_strtod_l>
 800766a:	bf00      	nop
 800766c:	200000a4 	.word	0x200000a4

08007670 <_strtol_l.constprop.0>:
 8007670:	2b01      	cmp	r3, #1
 8007672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007676:	d001      	beq.n	800767c <_strtol_l.constprop.0+0xc>
 8007678:	2b24      	cmp	r3, #36	; 0x24
 800767a:	d906      	bls.n	800768a <_strtol_l.constprop.0+0x1a>
 800767c:	f7fe f9ca 	bl	8005a14 <__errno>
 8007680:	2316      	movs	r3, #22
 8007682:	6003      	str	r3, [r0, #0]
 8007684:	2000      	movs	r0, #0
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007770 <_strtol_l.constprop.0+0x100>
 800768e:	460d      	mov	r5, r1
 8007690:	462e      	mov	r6, r5
 8007692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800769a:	f017 0708 	ands.w	r7, r7, #8
 800769e:	d1f7      	bne.n	8007690 <_strtol_l.constprop.0+0x20>
 80076a0:	2c2d      	cmp	r4, #45	; 0x2d
 80076a2:	d132      	bne.n	800770a <_strtol_l.constprop.0+0x9a>
 80076a4:	782c      	ldrb	r4, [r5, #0]
 80076a6:	2701      	movs	r7, #1
 80076a8:	1cb5      	adds	r5, r6, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d05b      	beq.n	8007766 <_strtol_l.constprop.0+0xf6>
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d109      	bne.n	80076c6 <_strtol_l.constprop.0+0x56>
 80076b2:	2c30      	cmp	r4, #48	; 0x30
 80076b4:	d107      	bne.n	80076c6 <_strtol_l.constprop.0+0x56>
 80076b6:	782c      	ldrb	r4, [r5, #0]
 80076b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076bc:	2c58      	cmp	r4, #88	; 0x58
 80076be:	d14d      	bne.n	800775c <_strtol_l.constprop.0+0xec>
 80076c0:	786c      	ldrb	r4, [r5, #1]
 80076c2:	2310      	movs	r3, #16
 80076c4:	3502      	adds	r5, #2
 80076c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80076ce:	f04f 0c00 	mov.w	ip, #0
 80076d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80076d6:	4666      	mov	r6, ip
 80076d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80076dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80076e0:	f1be 0f09 	cmp.w	lr, #9
 80076e4:	d816      	bhi.n	8007714 <_strtol_l.constprop.0+0xa4>
 80076e6:	4674      	mov	r4, lr
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	dd24      	ble.n	8007736 <_strtol_l.constprop.0+0xc6>
 80076ec:	f1bc 0f00 	cmp.w	ip, #0
 80076f0:	db1e      	blt.n	8007730 <_strtol_l.constprop.0+0xc0>
 80076f2:	45b1      	cmp	r9, r6
 80076f4:	d31c      	bcc.n	8007730 <_strtol_l.constprop.0+0xc0>
 80076f6:	d101      	bne.n	80076fc <_strtol_l.constprop.0+0x8c>
 80076f8:	45a2      	cmp	sl, r4
 80076fa:	db19      	blt.n	8007730 <_strtol_l.constprop.0+0xc0>
 80076fc:	fb06 4603 	mla	r6, r6, r3, r4
 8007700:	f04f 0c01 	mov.w	ip, #1
 8007704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007708:	e7e8      	b.n	80076dc <_strtol_l.constprop.0+0x6c>
 800770a:	2c2b      	cmp	r4, #43	; 0x2b
 800770c:	bf04      	itt	eq
 800770e:	782c      	ldrbeq	r4, [r5, #0]
 8007710:	1cb5      	addeq	r5, r6, #2
 8007712:	e7ca      	b.n	80076aa <_strtol_l.constprop.0+0x3a>
 8007714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007718:	f1be 0f19 	cmp.w	lr, #25
 800771c:	d801      	bhi.n	8007722 <_strtol_l.constprop.0+0xb2>
 800771e:	3c37      	subs	r4, #55	; 0x37
 8007720:	e7e2      	b.n	80076e8 <_strtol_l.constprop.0+0x78>
 8007722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007726:	f1be 0f19 	cmp.w	lr, #25
 800772a:	d804      	bhi.n	8007736 <_strtol_l.constprop.0+0xc6>
 800772c:	3c57      	subs	r4, #87	; 0x57
 800772e:	e7db      	b.n	80076e8 <_strtol_l.constprop.0+0x78>
 8007730:	f04f 3cff 	mov.w	ip, #4294967295
 8007734:	e7e6      	b.n	8007704 <_strtol_l.constprop.0+0x94>
 8007736:	f1bc 0f00 	cmp.w	ip, #0
 800773a:	da05      	bge.n	8007748 <_strtol_l.constprop.0+0xd8>
 800773c:	2322      	movs	r3, #34	; 0x22
 800773e:	6003      	str	r3, [r0, #0]
 8007740:	4646      	mov	r6, r8
 8007742:	b942      	cbnz	r2, 8007756 <_strtol_l.constprop.0+0xe6>
 8007744:	4630      	mov	r0, r6
 8007746:	e79e      	b.n	8007686 <_strtol_l.constprop.0+0x16>
 8007748:	b107      	cbz	r7, 800774c <_strtol_l.constprop.0+0xdc>
 800774a:	4276      	negs	r6, r6
 800774c:	2a00      	cmp	r2, #0
 800774e:	d0f9      	beq.n	8007744 <_strtol_l.constprop.0+0xd4>
 8007750:	f1bc 0f00 	cmp.w	ip, #0
 8007754:	d000      	beq.n	8007758 <_strtol_l.constprop.0+0xe8>
 8007756:	1e69      	subs	r1, r5, #1
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	e7f3      	b.n	8007744 <_strtol_l.constprop.0+0xd4>
 800775c:	2430      	movs	r4, #48	; 0x30
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1b1      	bne.n	80076c6 <_strtol_l.constprop.0+0x56>
 8007762:	2308      	movs	r3, #8
 8007764:	e7af      	b.n	80076c6 <_strtol_l.constprop.0+0x56>
 8007766:	2c30      	cmp	r4, #48	; 0x30
 8007768:	d0a5      	beq.n	80076b6 <_strtol_l.constprop.0+0x46>
 800776a:	230a      	movs	r3, #10
 800776c:	e7ab      	b.n	80076c6 <_strtol_l.constprop.0+0x56>
 800776e:	bf00      	nop
 8007770:	0800b391 	.word	0x0800b391

08007774 <_strtol_r>:
 8007774:	f7ff bf7c 	b.w	8007670 <_strtol_l.constprop.0>

08007778 <__swbuf_r>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	460e      	mov	r6, r1
 800777c:	4614      	mov	r4, r2
 800777e:	4605      	mov	r5, r0
 8007780:	b118      	cbz	r0, 800778a <__swbuf_r+0x12>
 8007782:	6983      	ldr	r3, [r0, #24]
 8007784:	b90b      	cbnz	r3, 800778a <__swbuf_r+0x12>
 8007786:	f001 f86f 	bl	8008868 <__sinit>
 800778a:	4b21      	ldr	r3, [pc, #132]	; (8007810 <__swbuf_r+0x98>)
 800778c:	429c      	cmp	r4, r3
 800778e:	d12b      	bne.n	80077e8 <__swbuf_r+0x70>
 8007790:	686c      	ldr	r4, [r5, #4]
 8007792:	69a3      	ldr	r3, [r4, #24]
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	071a      	lsls	r2, r3, #28
 800779a:	d52f      	bpl.n	80077fc <__swbuf_r+0x84>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	b36b      	cbz	r3, 80077fc <__swbuf_r+0x84>
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1ac0      	subs	r0, r0, r3
 80077a6:	6963      	ldr	r3, [r4, #20]
 80077a8:	b2f6      	uxtb	r6, r6
 80077aa:	4283      	cmp	r3, r0
 80077ac:	4637      	mov	r7, r6
 80077ae:	dc04      	bgt.n	80077ba <__swbuf_r+0x42>
 80077b0:	4621      	mov	r1, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 ffc4 	bl	8008740 <_fflush_r>
 80077b8:	bb30      	cbnz	r0, 8007808 <__swbuf_r+0x90>
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	6022      	str	r2, [r4, #0]
 80077c6:	701e      	strb	r6, [r3, #0]
 80077c8:	6963      	ldr	r3, [r4, #20]
 80077ca:	3001      	adds	r0, #1
 80077cc:	4283      	cmp	r3, r0
 80077ce:	d004      	beq.n	80077da <__swbuf_r+0x62>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	07db      	lsls	r3, r3, #31
 80077d4:	d506      	bpl.n	80077e4 <__swbuf_r+0x6c>
 80077d6:	2e0a      	cmp	r6, #10
 80077d8:	d104      	bne.n	80077e4 <__swbuf_r+0x6c>
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 ffaf 	bl	8008740 <_fflush_r>
 80077e2:	b988      	cbnz	r0, 8007808 <__swbuf_r+0x90>
 80077e4:	4638      	mov	r0, r7
 80077e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <__swbuf_r+0x9c>)
 80077ea:	429c      	cmp	r4, r3
 80077ec:	d101      	bne.n	80077f2 <__swbuf_r+0x7a>
 80077ee:	68ac      	ldr	r4, [r5, #8]
 80077f0:	e7cf      	b.n	8007792 <__swbuf_r+0x1a>
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <__swbuf_r+0xa0>)
 80077f4:	429c      	cmp	r4, r3
 80077f6:	bf08      	it	eq
 80077f8:	68ec      	ldreq	r4, [r5, #12]
 80077fa:	e7ca      	b.n	8007792 <__swbuf_r+0x1a>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f81e 	bl	8007840 <__swsetup_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	d0cb      	beq.n	80077a0 <__swbuf_r+0x28>
 8007808:	f04f 37ff 	mov.w	r7, #4294967295
 800780c:	e7ea      	b.n	80077e4 <__swbuf_r+0x6c>
 800780e:	bf00      	nop
 8007810:	0800b544 	.word	0x0800b544
 8007814:	0800b564 	.word	0x0800b564
 8007818:	0800b524 	.word	0x0800b524

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_write_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa fcfa 	bl	8002224 <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000850 	.word	0x20000850

08007840 <__swsetup_r>:
 8007840:	4b32      	ldr	r3, [pc, #200]	; (800790c <__swsetup_r+0xcc>)
 8007842:	b570      	push	{r4, r5, r6, lr}
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	b125      	cbz	r5, 8007856 <__swsetup_r+0x16>
 800784c:	69ab      	ldr	r3, [r5, #24]
 800784e:	b913      	cbnz	r3, 8007856 <__swsetup_r+0x16>
 8007850:	4628      	mov	r0, r5
 8007852:	f001 f809 	bl	8008868 <__sinit>
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <__swsetup_r+0xd0>)
 8007858:	429c      	cmp	r4, r3
 800785a:	d10f      	bne.n	800787c <__swsetup_r+0x3c>
 800785c:	686c      	ldr	r4, [r5, #4]
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007864:	0719      	lsls	r1, r3, #28
 8007866:	d42c      	bmi.n	80078c2 <__swsetup_r+0x82>
 8007868:	06dd      	lsls	r5, r3, #27
 800786a:	d411      	bmi.n	8007890 <__swsetup_r+0x50>
 800786c:	2309      	movs	r3, #9
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	e03e      	b.n	80078fa <__swsetup_r+0xba>
 800787c:	4b25      	ldr	r3, [pc, #148]	; (8007914 <__swsetup_r+0xd4>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <__swsetup_r+0x46>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7eb      	b.n	800785e <__swsetup_r+0x1e>
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <__swsetup_r+0xd8>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7e6      	b.n	800785e <__swsetup_r+0x1e>
 8007890:	0758      	lsls	r0, r3, #29
 8007892:	d512      	bpl.n	80078ba <__swsetup_r+0x7a>
 8007894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007896:	b141      	cbz	r1, 80078aa <__swsetup_r+0x6a>
 8007898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <__swsetup_r+0x66>
 80078a0:	4630      	mov	r0, r6
 80078a2:	f002 f96d 	bl	8009b80 <_free_r>
 80078a6:	2300      	movs	r3, #0
 80078a8:	6363      	str	r3, [r4, #52]	; 0x34
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	2300      	movs	r3, #0
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0308 	orr.w	r3, r3, #8
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	b94b      	cbnz	r3, 80078da <__swsetup_r+0x9a>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d0:	d003      	beq.n	80078da <__swsetup_r+0x9a>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4630      	mov	r0, r6
 80078d6:	f001 fc13 	bl	8009100 <__smakebuf_r>
 80078da:	89a0      	ldrh	r0, [r4, #12]
 80078dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078e0:	f010 0301 	ands.w	r3, r0, #1
 80078e4:	d00a      	beq.n	80078fc <__swsetup_r+0xbc>
 80078e6:	2300      	movs	r3, #0
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6963      	ldr	r3, [r4, #20]
 80078ec:	425b      	negs	r3, r3
 80078ee:	61a3      	str	r3, [r4, #24]
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b943      	cbnz	r3, 8007906 <__swsetup_r+0xc6>
 80078f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078f8:	d1ba      	bne.n	8007870 <__swsetup_r+0x30>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	0781      	lsls	r1, r0, #30
 80078fe:	bf58      	it	pl
 8007900:	6963      	ldrpl	r3, [r4, #20]
 8007902:	60a3      	str	r3, [r4, #8]
 8007904:	e7f4      	b.n	80078f0 <__swsetup_r+0xb0>
 8007906:	2000      	movs	r0, #0
 8007908:	e7f7      	b.n	80078fa <__swsetup_r+0xba>
 800790a:	bf00      	nop
 800790c:	2000003c 	.word	0x2000003c
 8007910:	0800b544 	.word	0x0800b544
 8007914:	0800b564 	.word	0x0800b564
 8007918:	0800b524 	.word	0x0800b524

0800791c <_close_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	; (8007938 <_close_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7fa fc8a 	bl	8002240 <_close>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_close_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_close_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20000850 	.word	0x20000850

0800793c <quorem>:
 800793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	6903      	ldr	r3, [r0, #16]
 8007942:	690c      	ldr	r4, [r1, #16]
 8007944:	42a3      	cmp	r3, r4
 8007946:	4607      	mov	r7, r0
 8007948:	f2c0 8081 	blt.w	8007a4e <quorem+0x112>
 800794c:	3c01      	subs	r4, #1
 800794e:	f101 0814 	add.w	r8, r1, #20
 8007952:	f100 0514 	add.w	r5, r0, #20
 8007956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007964:	3301      	adds	r3, #1
 8007966:	429a      	cmp	r2, r3
 8007968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800796c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007970:	fbb2 f6f3 	udiv	r6, r2, r3
 8007974:	d331      	bcc.n	80079da <quorem+0x9e>
 8007976:	f04f 0e00 	mov.w	lr, #0
 800797a:	4640      	mov	r0, r8
 800797c:	46ac      	mov	ip, r5
 800797e:	46f2      	mov	sl, lr
 8007980:	f850 2b04 	ldr.w	r2, [r0], #4
 8007984:	b293      	uxth	r3, r2
 8007986:	fb06 e303 	mla	r3, r6, r3, lr
 800798a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800798e:	b29b      	uxth	r3, r3
 8007990:	ebaa 0303 	sub.w	r3, sl, r3
 8007994:	f8dc a000 	ldr.w	sl, [ip]
 8007998:	0c12      	lsrs	r2, r2, #16
 800799a:	fa13 f38a 	uxtah	r3, r3, sl
 800799e:	fb06 e202 	mla	r2, r6, r2, lr
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	9b00      	ldr	r3, [sp, #0]
 80079a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079aa:	b292      	uxth	r2, r2
 80079ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80079b8:	4581      	cmp	r9, r0
 80079ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079be:	f84c 3b04 	str.w	r3, [ip], #4
 80079c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079c6:	d2db      	bcs.n	8007980 <quorem+0x44>
 80079c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80079cc:	b92b      	cbnz	r3, 80079da <quorem+0x9e>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	429d      	cmp	r5, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	d32e      	bcc.n	8007a36 <quorem+0xfa>
 80079d8:	613c      	str	r4, [r7, #16]
 80079da:	4638      	mov	r0, r7
 80079dc:	f001 fec4 	bl	8009768 <__mcmp>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	db24      	blt.n	8007a2e <quorem+0xf2>
 80079e4:	3601      	adds	r6, #1
 80079e6:	4628      	mov	r0, r5
 80079e8:	f04f 0c00 	mov.w	ip, #0
 80079ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f0:	f8d0 e000 	ldr.w	lr, [r0]
 80079f4:	b293      	uxth	r3, r2
 80079f6:	ebac 0303 	sub.w	r3, ip, r3
 80079fa:	0c12      	lsrs	r2, r2, #16
 80079fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0e:	45c1      	cmp	r9, r8
 8007a10:	f840 3b04 	str.w	r3, [r0], #4
 8007a14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a18:	d2e8      	bcs.n	80079ec <quorem+0xb0>
 8007a1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a22:	b922      	cbnz	r2, 8007a2e <quorem+0xf2>
 8007a24:	3b04      	subs	r3, #4
 8007a26:	429d      	cmp	r5, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	d30a      	bcc.n	8007a42 <quorem+0x106>
 8007a2c:	613c      	str	r4, [r7, #16]
 8007a2e:	4630      	mov	r0, r6
 8007a30:	b003      	add	sp, #12
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	3b04      	subs	r3, #4
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	d1cc      	bne.n	80079d8 <quorem+0x9c>
 8007a3e:	3c01      	subs	r4, #1
 8007a40:	e7c7      	b.n	80079d2 <quorem+0x96>
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	d1f0      	bne.n	8007a2c <quorem+0xf0>
 8007a4a:	3c01      	subs	r4, #1
 8007a4c:	e7eb      	b.n	8007a26 <quorem+0xea>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7ee      	b.n	8007a30 <quorem+0xf4>
 8007a52:	0000      	movs	r0, r0
 8007a54:	0000      	movs	r0, r0
	...

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b04 	vpush	{d8-d9}
 8007a60:	ec57 6b10 	vmov	r6, r7, d0
 8007a64:	b093      	sub	sp, #76	; 0x4c
 8007a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a6c:	9106      	str	r1, [sp, #24]
 8007a6e:	ee10 aa10 	vmov	sl, s0
 8007a72:	4604      	mov	r4, r0
 8007a74:	9209      	str	r2, [sp, #36]	; 0x24
 8007a76:	930c      	str	r3, [sp, #48]	; 0x30
 8007a78:	46bb      	mov	fp, r7
 8007a7a:	b975      	cbnz	r5, 8007a9a <_dtoa_r+0x42>
 8007a7c:	2010      	movs	r0, #16
 8007a7e:	f001 fb7f 	bl	8009180 <malloc>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6260      	str	r0, [r4, #36]	; 0x24
 8007a86:	b920      	cbnz	r0, 8007a92 <_dtoa_r+0x3a>
 8007a88:	4ba7      	ldr	r3, [pc, #668]	; (8007d28 <_dtoa_r+0x2d0>)
 8007a8a:	21ea      	movs	r1, #234	; 0xea
 8007a8c:	48a7      	ldr	r0, [pc, #668]	; (8007d2c <_dtoa_r+0x2d4>)
 8007a8e:	f003 f897 	bl	800abc0 <__assert_func>
 8007a92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a96:	6005      	str	r5, [r0, #0]
 8007a98:	60c5      	str	r5, [r0, #12]
 8007a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9c:	6819      	ldr	r1, [r3, #0]
 8007a9e:	b151      	cbz	r1, 8007ab6 <_dtoa_r+0x5e>
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	604a      	str	r2, [r1, #4]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4093      	lsls	r3, r2
 8007aa8:	608b      	str	r3, [r1, #8]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f001 fbd0 	bl	8009250 <_Bfree>
 8007ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	1e3b      	subs	r3, r7, #0
 8007ab8:	bfaa      	itet	ge
 8007aba:	2300      	movge	r3, #0
 8007abc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ac0:	f8c8 3000 	strge.w	r3, [r8]
 8007ac4:	4b9a      	ldr	r3, [pc, #616]	; (8007d30 <_dtoa_r+0x2d8>)
 8007ac6:	bfbc      	itt	lt
 8007ac8:	2201      	movlt	r2, #1
 8007aca:	f8c8 2000 	strlt.w	r2, [r8]
 8007ace:	ea33 030b 	bics.w	r3, r3, fp
 8007ad2:	d11b      	bne.n	8007b0c <_dtoa_r+0xb4>
 8007ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae0:	4333      	orrs	r3, r6
 8007ae2:	f000 8592 	beq.w	800860a <_dtoa_r+0xbb2>
 8007ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae8:	b963      	cbnz	r3, 8007b04 <_dtoa_r+0xac>
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <_dtoa_r+0x2dc>)
 8007aec:	e022      	b.n	8007b34 <_dtoa_r+0xdc>
 8007aee:	4b92      	ldr	r3, [pc, #584]	; (8007d38 <_dtoa_r+0x2e0>)
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	3308      	adds	r3, #8
 8007af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	9801      	ldr	r0, [sp, #4]
 8007afa:	b013      	add	sp, #76	; 0x4c
 8007afc:	ecbd 8b04 	vpop	{d8-d9}
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	4b8b      	ldr	r3, [pc, #556]	; (8007d34 <_dtoa_r+0x2dc>)
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	e7f3      	b.n	8007af4 <_dtoa_r+0x9c>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4650      	mov	r0, sl
 8007b12:	4659      	mov	r1, fp
 8007b14:	f7f8 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b18:	ec4b ab19 	vmov	d9, sl, fp
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	b158      	cbz	r0, 8007b38 <_dtoa_r+0xe0>
 8007b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b22:	2301      	movs	r3, #1
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 856b 	beq.w	8008604 <_dtoa_r+0xbac>
 8007b2e:	4883      	ldr	r0, [pc, #524]	; (8007d3c <_dtoa_r+0x2e4>)
 8007b30:	6018      	str	r0, [r3, #0]
 8007b32:	1e43      	subs	r3, r0, #1
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	e7df      	b.n	8007af8 <_dtoa_r+0xa0>
 8007b38:	ec4b ab10 	vmov	d0, sl, fp
 8007b3c:	aa10      	add	r2, sp, #64	; 0x40
 8007b3e:	a911      	add	r1, sp, #68	; 0x44
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 ff33 	bl	80099ac <__d2b>
 8007b46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b4a:	ee08 0a10 	vmov	s16, r0
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	f000 8084 	beq.w	8007c5c <_dtoa_r+0x204>
 8007b54:	ee19 3a90 	vmov	r3, s19
 8007b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b60:	4656      	mov	r6, sl
 8007b62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b6e:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <_dtoa_r+0x2e8>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 fb87 	bl	8000288 <__aeabi_dsub>
 8007b7a:	a365      	add	r3, pc, #404	; (adr r3, 8007d10 <_dtoa_r+0x2b8>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	a364      	add	r3, pc, #400	; (adr r3, 8007d18 <_dtoa_r+0x2c0>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fb7f 	bl	800028c <__adddf3>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	4628      	mov	r0, r5
 8007b92:	460f      	mov	r7, r1
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_i2d>
 8007b98:	a361      	add	r3, pc, #388	; (adr r3, 8007d20 <_dtoa_r+0x2c8>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fb6f 	bl	800028c <__adddf3>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	f7f8 ffd1 	bl	8000b58 <__aeabi_d2iz>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	9000      	str	r0, [sp, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	b150      	cbz	r0, 8007bdc <_dtoa_r+0x184>
 8007bc6:	9800      	ldr	r0, [sp, #0]
 8007bc8:	f7f8 fcac 	bl	8000524 <__aeabi_i2d>
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	f7f8 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd4:	b910      	cbnz	r0, 8007bdc <_dtoa_r+0x184>
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d85a      	bhi.n	8007c98 <_dtoa_r+0x240>
 8007be2:	9a00      	ldr	r2, [sp, #0]
 8007be4:	4b57      	ldr	r3, [pc, #348]	; (8007d44 <_dtoa_r+0x2ec>)
 8007be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	ec51 0b19 	vmov	r0, r1, d9
 8007bf2:	f7f8 ff73 	bl	8000adc <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d050      	beq.n	8007c9c <_dtoa_r+0x244>
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	2300      	movs	r3, #0
 8007c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	1b5d      	subs	r5, r3, r5
 8007c08:	1e6b      	subs	r3, r5, #1
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	bf45      	ittet	mi
 8007c0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c12:	9304      	strmi	r3, [sp, #16]
 8007c14:	2300      	movpl	r3, #0
 8007c16:	2300      	movmi	r3, #0
 8007c18:	bf4c      	ite	mi
 8007c1a:	9305      	strmi	r3, [sp, #20]
 8007c1c:	9304      	strpl	r3, [sp, #16]
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	db3d      	blt.n	8007ca0 <_dtoa_r+0x248>
 8007c24:	9b05      	ldr	r3, [sp, #20]
 8007c26:	9a00      	ldr	r2, [sp, #0]
 8007c28:	920a      	str	r2, [sp, #40]	; 0x28
 8007c2a:	4413      	add	r3, r2
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	9b06      	ldr	r3, [sp, #24]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	f200 8089 	bhi.w	8007d4c <_dtoa_r+0x2f4>
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	bfc4      	itt	gt
 8007c3e:	3b04      	subgt	r3, #4
 8007c40:	9306      	strgt	r3, [sp, #24]
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	f1a3 0302 	sub.w	r3, r3, #2
 8007c48:	bfcc      	ite	gt
 8007c4a:	2500      	movgt	r5, #0
 8007c4c:	2501      	movle	r5, #1
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	f200 8087 	bhi.w	8007d62 <_dtoa_r+0x30a>
 8007c54:	e8df f003 	tbb	[pc, r3]
 8007c58:	59383a2d 	.word	0x59383a2d
 8007c5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c60:	441d      	add	r5, r3
 8007c62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	bfc1      	itttt	gt
 8007c6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c72:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c7a:	bfda      	itte	le
 8007c7c:	f1c3 0320 	rsble	r3, r3, #32
 8007c80:	fa06 f003 	lslle.w	r0, r6, r3
 8007c84:	4318      	orrgt	r0, r3
 8007c86:	f7f8 fc3d 	bl	8000504 <__aeabi_ui2d>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c92:	3d01      	subs	r5, #1
 8007c94:	930e      	str	r3, [sp, #56]	; 0x38
 8007c96:	e76a      	b.n	8007b6e <_dtoa_r+0x116>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7b2      	b.n	8007c02 <_dtoa_r+0x1aa>
 8007c9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c9e:	e7b1      	b.n	8007c04 <_dtoa_r+0x1ac>
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	9a00      	ldr	r2, [sp, #0]
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	4253      	negs	r3, r2
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	2300      	movs	r3, #0
 8007cae:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb0:	e7bf      	b.n	8007c32 <_dtoa_r+0x1da>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9308      	str	r3, [sp, #32]
 8007cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc55      	bgt.n	8007d68 <_dtoa_r+0x310>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	e00c      	b.n	8007ce2 <_dtoa_r+0x28a>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x25c>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	bfb8      	it	lt
 8007ce0:	2301      	movlt	r3, #1
 8007ce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6042      	str	r2, [r0, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f102 0614 	add.w	r6, r2, #20
 8007cee:	429e      	cmp	r6, r3
 8007cf0:	6841      	ldr	r1, [r0, #4]
 8007cf2:	d93d      	bls.n	8007d70 <_dtoa_r+0x318>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f001 fa6b 	bl	80091d0 <_Balloc>
 8007cfa:	9001      	str	r0, [sp, #4]
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d13b      	bne.n	8007d78 <_dtoa_r+0x320>
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <_dtoa_r+0x2f0>)
 8007d02:	4602      	mov	r2, r0
 8007d04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d08:	e6c0      	b.n	8007a8c <_dtoa_r+0x34>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7df      	b.n	8007cce <_dtoa_r+0x276>
 8007d0e:	bf00      	nop
 8007d10:	636f4361 	.word	0x636f4361
 8007d14:	3fd287a7 	.word	0x3fd287a7
 8007d18:	8b60c8b3 	.word	0x8b60c8b3
 8007d1c:	3fc68a28 	.word	0x3fc68a28
 8007d20:	509f79fb 	.word	0x509f79fb
 8007d24:	3fd34413 	.word	0x3fd34413
 8007d28:	0800b49e 	.word	0x0800b49e
 8007d2c:	0800b4b5 	.word	0x0800b4b5
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	0800b49a 	.word	0x0800b49a
 8007d38:	0800b491 	.word	0x0800b491
 8007d3c:	0800b772 	.word	0x0800b772
 8007d40:	3ff80000 	.word	0x3ff80000
 8007d44:	0800b688 	.word	0x0800b688
 8007d48:	0800b510 	.word	0x0800b510
 8007d4c:	2501      	movs	r5, #1
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	9508      	str	r5, [sp, #32]
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2312      	movs	r3, #18
 8007d60:	e7b0      	b.n	8007cc4 <_dtoa_r+0x26c>
 8007d62:	2301      	movs	r3, #1
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	e7f5      	b.n	8007d54 <_dtoa_r+0x2fc>
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d6e:	e7b8      	b.n	8007ce2 <_dtoa_r+0x28a>
 8007d70:	3101      	adds	r1, #1
 8007d72:	6041      	str	r1, [r0, #4]
 8007d74:	0052      	lsls	r2, r2, #1
 8007d76:	e7b8      	b.n	8007cea <_dtoa_r+0x292>
 8007d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2b0e      	cmp	r3, #14
 8007d82:	f200 809d 	bhi.w	8007ec0 <_dtoa_r+0x468>
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	f000 809a 	beq.w	8007ec0 <_dtoa_r+0x468>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dd32      	ble.n	8007df8 <_dtoa_r+0x3a0>
 8007d92:	4ab7      	ldr	r2, [pc, #732]	; (8008070 <_dtoa_r+0x618>)
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	05d8      	lsls	r0, r3, #23
 8007da4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007da8:	d516      	bpl.n	8007dd8 <_dtoa_r+0x380>
 8007daa:	4bb2      	ldr	r3, [pc, #712]	; (8008074 <_dtoa_r+0x61c>)
 8007dac:	ec51 0b19 	vmov	r0, r1, d9
 8007db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db4:	f7f8 fd4a 	bl	800084c <__aeabi_ddiv>
 8007db8:	f007 070f 	and.w	r7, r7, #15
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	2503      	movs	r5, #3
 8007dc2:	4eac      	ldr	r6, [pc, #688]	; (8008074 <_dtoa_r+0x61c>)
 8007dc4:	b957      	cbnz	r7, 8007ddc <_dtoa_r+0x384>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4650      	mov	r0, sl
 8007dcc:	4659      	mov	r1, fp
 8007dce:	f7f8 fd3d 	bl	800084c <__aeabi_ddiv>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	e028      	b.n	8007e2a <_dtoa_r+0x3d2>
 8007dd8:	2502      	movs	r5, #2
 8007dda:	e7f2      	b.n	8007dc2 <_dtoa_r+0x36a>
 8007ddc:	07f9      	lsls	r1, r7, #31
 8007dde:	d508      	bpl.n	8007df2 <_dtoa_r+0x39a>
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	3501      	adds	r5, #1
 8007dee:	4680      	mov	r8, r0
 8007df0:	4689      	mov	r9, r1
 8007df2:	107f      	asrs	r7, r7, #1
 8007df4:	3608      	adds	r6, #8
 8007df6:	e7e5      	b.n	8007dc4 <_dtoa_r+0x36c>
 8007df8:	f000 809b 	beq.w	8007f32 <_dtoa_r+0x4da>
 8007dfc:	9b00      	ldr	r3, [sp, #0]
 8007dfe:	4f9d      	ldr	r7, [pc, #628]	; (8008074 <_dtoa_r+0x61c>)
 8007e00:	425e      	negs	r6, r3
 8007e02:	4b9b      	ldr	r3, [pc, #620]	; (8008070 <_dtoa_r+0x618>)
 8007e04:	f006 020f 	and.w	r2, r6, #15
 8007e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	ec51 0b19 	vmov	r0, r1, d9
 8007e14:	f7f8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8007e18:	1136      	asrs	r6, r6, #4
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	468b      	mov	fp, r1
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2502      	movs	r5, #2
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d17a      	bne.n	8007f1c <_dtoa_r+0x4c4>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1d3      	bne.n	8007dd2 <_dtoa_r+0x37a>
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8082 	beq.w	8007f36 <_dtoa_r+0x4de>
 8007e32:	4b91      	ldr	r3, [pc, #580]	; (8008078 <_dtoa_r+0x620>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	f7f8 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d079      	beq.n	8007f36 <_dtoa_r+0x4de>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d076      	beq.n	8007f36 <_dtoa_r+0x4de>
 8007e48:	9b02      	ldr	r3, [sp, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dd36      	ble.n	8007ebc <_dtoa_r+0x464>
 8007e4e:	9b00      	ldr	r3, [sp, #0]
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	1e5f      	subs	r7, r3, #1
 8007e56:	2200      	movs	r2, #0
 8007e58:	4b88      	ldr	r3, [pc, #544]	; (800807c <_dtoa_r+0x624>)
 8007e5a:	f7f8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8007e5e:	9e02      	ldr	r6, [sp, #8]
 8007e60:	4682      	mov	sl, r0
 8007e62:	468b      	mov	fp, r1
 8007e64:	3501      	adds	r5, #1
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7f8 fb5c 	bl	8000524 <__aeabi_i2d>
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	f7f8 fbc2 	bl	80005f8 <__aeabi_dmul>
 8007e74:	4b82      	ldr	r3, [pc, #520]	; (8008080 <_dtoa_r+0x628>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	f7f8 fa08 	bl	800028c <__adddf3>
 8007e7c:	46d0      	mov	r8, sl
 8007e7e:	46d9      	mov	r9, fp
 8007e80:	4682      	mov	sl, r0
 8007e82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	d158      	bne.n	8007f3c <_dtoa_r+0x4e4>
 8007e8a:	4b7e      	ldr	r3, [pc, #504]	; (8008084 <_dtoa_r+0x62c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f9f9 	bl	8000288 <__aeabi_dsub>
 8007e96:	4652      	mov	r2, sl
 8007e98:	465b      	mov	r3, fp
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	f7f8 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f040 8295 	bne.w	80083d2 <_dtoa_r+0x97a>
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8289 	bne.w	80083ce <_dtoa_r+0x976>
 8007ebc:	ec5b ab19 	vmov	sl, fp, d9
 8007ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f2c0 8148 	blt.w	8008158 <_dtoa_r+0x700>
 8007ec8:	9a00      	ldr	r2, [sp, #0]
 8007eca:	2a0e      	cmp	r2, #14
 8007ecc:	f300 8144 	bgt.w	8008158 <_dtoa_r+0x700>
 8007ed0:	4b67      	ldr	r3, [pc, #412]	; (8008070 <_dtoa_r+0x618>)
 8007ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f280 80d5 	bge.w	800808c <_dtoa_r+0x634>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f300 80d1 	bgt.w	800808c <_dtoa_r+0x634>
 8007eea:	f040 826f 	bne.w	80083cc <_dtoa_r+0x974>
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <_dtoa_r+0x62c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f7f8 fb7f 	bl	80005f8 <__aeabi_dmul>
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	f7f8 fe01 	bl	8000b04 <__aeabi_dcmpge>
 8007f02:	9e03      	ldr	r6, [sp, #12]
 8007f04:	4637      	mov	r7, r6
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f040 8245 	bne.w	8008396 <_dtoa_r+0x93e>
 8007f0c:	9d01      	ldr	r5, [sp, #4]
 8007f0e:	2331      	movs	r3, #49	; 0x31
 8007f10:	f805 3b01 	strb.w	r3, [r5], #1
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	e240      	b.n	800839e <_dtoa_r+0x946>
 8007f1c:	07f2      	lsls	r2, r6, #31
 8007f1e:	d505      	bpl.n	8007f2c <_dtoa_r+0x4d4>
 8007f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	3501      	adds	r5, #1
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	1076      	asrs	r6, r6, #1
 8007f2e:	3708      	adds	r7, #8
 8007f30:	e777      	b.n	8007e22 <_dtoa_r+0x3ca>
 8007f32:	2502      	movs	r5, #2
 8007f34:	e779      	b.n	8007e2a <_dtoa_r+0x3d2>
 8007f36:	9f00      	ldr	r7, [sp, #0]
 8007f38:	9e03      	ldr	r6, [sp, #12]
 8007f3a:	e794      	b.n	8007e66 <_dtoa_r+0x40e>
 8007f3c:	9901      	ldr	r1, [sp, #4]
 8007f3e:	4b4c      	ldr	r3, [pc, #304]	; (8008070 <_dtoa_r+0x618>)
 8007f40:	4431      	add	r1, r6
 8007f42:	910d      	str	r1, [sp, #52]	; 0x34
 8007f44:	9908      	ldr	r1, [sp, #32]
 8007f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d043      	beq.n	8007fda <_dtoa_r+0x582>
 8007f52:	494d      	ldr	r1, [pc, #308]	; (8008088 <_dtoa_r+0x630>)
 8007f54:	2000      	movs	r0, #0
 8007f56:	f7f8 fc79 	bl	800084c <__aeabi_ddiv>
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	f7f8 f993 	bl	8000288 <__aeabi_dsub>
 8007f62:	9d01      	ldr	r5, [sp, #4]
 8007f64:	4682      	mov	sl, r0
 8007f66:	468b      	mov	fp, r1
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	f7f8 fdf4 	bl	8000b58 <__aeabi_d2iz>
 8007f70:	4606      	mov	r6, r0
 8007f72:	f7f8 fad7 	bl	8000524 <__aeabi_i2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	3630      	adds	r6, #48	; 0x30
 8007f84:	f805 6b01 	strb.w	r6, [r5], #1
 8007f88:	4652      	mov	r2, sl
 8007f8a:	465b      	mov	r3, fp
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	f7f8 fda4 	bl	8000adc <__aeabi_dcmplt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d163      	bne.n	8008060 <_dtoa_r+0x608>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	4936      	ldr	r1, [pc, #216]	; (8008078 <_dtoa_r+0x620>)
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f8 f972 	bl	8000288 <__aeabi_dsub>
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	465b      	mov	r3, fp
 8007fa8:	f7f8 fd98 	bl	8000adc <__aeabi_dcmplt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 80b5 	bne.w	800811c <_dtoa_r+0x6c4>
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb4:	429d      	cmp	r5, r3
 8007fb6:	d081      	beq.n	8007ebc <_dtoa_r+0x464>
 8007fb8:	4b30      	ldr	r3, [pc, #192]	; (800807c <_dtoa_r+0x624>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	f7f8 fb1a 	bl	80005f8 <__aeabi_dmul>
 8007fc4:	4b2d      	ldr	r3, [pc, #180]	; (800807c <_dtoa_r+0x624>)
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	468b      	mov	fp, r1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4689      	mov	r9, r1
 8007fd8:	e7c6      	b.n	8007f68 <_dtoa_r+0x510>
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe4:	9d01      	ldr	r5, [sp, #4]
 8007fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	4649      	mov	r1, r9
 8007fee:	4640      	mov	r0, r8
 8007ff0:	f7f8 fdb2 	bl	8000b58 <__aeabi_d2iz>
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	f7f8 fa95 	bl	8000524 <__aeabi_i2d>
 8007ffa:	3630      	adds	r6, #48	; 0x30
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 f940 	bl	8000288 <__aeabi_dsub>
 8008008:	f805 6b01 	strb.w	r6, [r5], #1
 800800c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800e:	429d      	cmp	r5, r3
 8008010:	4680      	mov	r8, r0
 8008012:	4689      	mov	r9, r1
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	d124      	bne.n	8008064 <_dtoa_r+0x60c>
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <_dtoa_r+0x630>)
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 f934 	bl	800028c <__adddf3>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8008030:	2800      	cmp	r0, #0
 8008032:	d173      	bne.n	800811c <_dtoa_r+0x6c4>
 8008034:	4652      	mov	r2, sl
 8008036:	465b      	mov	r3, fp
 8008038:	4913      	ldr	r1, [pc, #76]	; (8008088 <_dtoa_r+0x630>)
 800803a:	2000      	movs	r0, #0
 800803c:	f7f8 f924 	bl	8000288 <__aeabi_dsub>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fd48 	bl	8000adc <__aeabi_dcmplt>
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f af35 	beq.w	8007ebc <_dtoa_r+0x464>
 8008052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008054:	1e6b      	subs	r3, r5, #1
 8008056:	930f      	str	r3, [sp, #60]	; 0x3c
 8008058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800805c:	2b30      	cmp	r3, #48	; 0x30
 800805e:	d0f8      	beq.n	8008052 <_dtoa_r+0x5fa>
 8008060:	9700      	str	r7, [sp, #0]
 8008062:	e049      	b.n	80080f8 <_dtoa_r+0x6a0>
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <_dtoa_r+0x624>)
 8008066:	f7f8 fac7 	bl	80005f8 <__aeabi_dmul>
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	e7bd      	b.n	8007fec <_dtoa_r+0x594>
 8008070:	0800b688 	.word	0x0800b688
 8008074:	0800b660 	.word	0x0800b660
 8008078:	3ff00000 	.word	0x3ff00000
 800807c:	40240000 	.word	0x40240000
 8008080:	401c0000 	.word	0x401c0000
 8008084:	40140000 	.word	0x40140000
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	9d01      	ldr	r5, [sp, #4]
 800808e:	4656      	mov	r6, sl
 8008090:	465f      	mov	r7, fp
 8008092:	4642      	mov	r2, r8
 8008094:	464b      	mov	r3, r9
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 fbd7 	bl	800084c <__aeabi_ddiv>
 800809e:	f7f8 fd5b 	bl	8000b58 <__aeabi_d2iz>
 80080a2:	4682      	mov	sl, r0
 80080a4:	f7f8 fa3e 	bl	8000524 <__aeabi_i2d>
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080bc:	f7f8 f8e4 	bl	8000288 <__aeabi_dsub>
 80080c0:	f805 6b01 	strb.w	r6, [r5], #1
 80080c4:	9e01      	ldr	r6, [sp, #4]
 80080c6:	9f03      	ldr	r7, [sp, #12]
 80080c8:	1bae      	subs	r6, r5, r6
 80080ca:	42b7      	cmp	r7, r6
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	d135      	bne.n	800813e <_dtoa_r+0x6e6>
 80080d2:	f7f8 f8db 	bl	800028c <__adddf3>
 80080d6:	4642      	mov	r2, r8
 80080d8:	464b      	mov	r3, r9
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	f7f8 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80080e2:	b9d0      	cbnz	r0, 800811a <_dtoa_r+0x6c2>
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f0:	b110      	cbz	r0, 80080f8 <_dtoa_r+0x6a0>
 80080f2:	f01a 0f01 	tst.w	sl, #1
 80080f6:	d110      	bne.n	800811a <_dtoa_r+0x6c2>
 80080f8:	4620      	mov	r0, r4
 80080fa:	ee18 1a10 	vmov	r1, s16
 80080fe:	f001 f8a7 	bl	8009250 <_Bfree>
 8008102:	2300      	movs	r3, #0
 8008104:	9800      	ldr	r0, [sp, #0]
 8008106:	702b      	strb	r3, [r5, #0]
 8008108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800810a:	3001      	adds	r0, #1
 800810c:	6018      	str	r0, [r3, #0]
 800810e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008110:	2b00      	cmp	r3, #0
 8008112:	f43f acf1 	beq.w	8007af8 <_dtoa_r+0xa0>
 8008116:	601d      	str	r5, [r3, #0]
 8008118:	e4ee      	b.n	8007af8 <_dtoa_r+0xa0>
 800811a:	9f00      	ldr	r7, [sp, #0]
 800811c:	462b      	mov	r3, r5
 800811e:	461d      	mov	r5, r3
 8008120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008124:	2a39      	cmp	r2, #57	; 0x39
 8008126:	d106      	bne.n	8008136 <_dtoa_r+0x6de>
 8008128:	9a01      	ldr	r2, [sp, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d1f7      	bne.n	800811e <_dtoa_r+0x6c6>
 800812e:	9901      	ldr	r1, [sp, #4]
 8008130:	2230      	movs	r2, #48	; 0x30
 8008132:	3701      	adds	r7, #1
 8008134:	700a      	strb	r2, [r1, #0]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	3201      	adds	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e790      	b.n	8008060 <_dtoa_r+0x608>
 800813e:	4ba6      	ldr	r3, [pc, #664]	; (80083d8 <_dtoa_r+0x980>)
 8008140:	2200      	movs	r2, #0
 8008142:	f7f8 fa59 	bl	80005f8 <__aeabi_dmul>
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4606      	mov	r6, r0
 800814c:	460f      	mov	r7, r1
 800814e:	f7f8 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008152:	2800      	cmp	r0, #0
 8008154:	d09d      	beq.n	8008092 <_dtoa_r+0x63a>
 8008156:	e7cf      	b.n	80080f8 <_dtoa_r+0x6a0>
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	2a00      	cmp	r2, #0
 800815c:	f000 80d7 	beq.w	800830e <_dtoa_r+0x8b6>
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	2a01      	cmp	r2, #1
 8008164:	f300 80ba 	bgt.w	80082dc <_dtoa_r+0x884>
 8008168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816a:	2a00      	cmp	r2, #0
 800816c:	f000 80b2 	beq.w	80082d4 <_dtoa_r+0x87c>
 8008170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008174:	9e07      	ldr	r6, [sp, #28]
 8008176:	9d04      	ldr	r5, [sp, #16]
 8008178:	9a04      	ldr	r2, [sp, #16]
 800817a:	441a      	add	r2, r3
 800817c:	9204      	str	r2, [sp, #16]
 800817e:	9a05      	ldr	r2, [sp, #20]
 8008180:	2101      	movs	r1, #1
 8008182:	441a      	add	r2, r3
 8008184:	4620      	mov	r0, r4
 8008186:	9205      	str	r2, [sp, #20]
 8008188:	f001 f964 	bl	8009454 <__i2b>
 800818c:	4607      	mov	r7, r0
 800818e:	2d00      	cmp	r5, #0
 8008190:	dd0c      	ble.n	80081ac <_dtoa_r+0x754>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd09      	ble.n	80081ac <_dtoa_r+0x754>
 8008198:	42ab      	cmp	r3, r5
 800819a:	9a04      	ldr	r2, [sp, #16]
 800819c:	bfa8      	it	ge
 800819e:	462b      	movge	r3, r5
 80081a0:	1ad2      	subs	r2, r2, r3
 80081a2:	9204      	str	r2, [sp, #16]
 80081a4:	9a05      	ldr	r2, [sp, #20]
 80081a6:	1aed      	subs	r5, r5, r3
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	b31b      	cbz	r3, 80081f8 <_dtoa_r+0x7a0>
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 80af 	beq.w	8008316 <_dtoa_r+0x8be>
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	dd13      	ble.n	80081e4 <_dtoa_r+0x78c>
 80081bc:	4639      	mov	r1, r7
 80081be:	4632      	mov	r2, r6
 80081c0:	4620      	mov	r0, r4
 80081c2:	f001 fa07 	bl	80095d4 <__pow5mult>
 80081c6:	ee18 2a10 	vmov	r2, s16
 80081ca:	4601      	mov	r1, r0
 80081cc:	4607      	mov	r7, r0
 80081ce:	4620      	mov	r0, r4
 80081d0:	f001 f956 	bl	8009480 <__multiply>
 80081d4:	ee18 1a10 	vmov	r1, s16
 80081d8:	4680      	mov	r8, r0
 80081da:	4620      	mov	r0, r4
 80081dc:	f001 f838 	bl	8009250 <_Bfree>
 80081e0:	ee08 8a10 	vmov	s16, r8
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	1b9a      	subs	r2, r3, r6
 80081e8:	d006      	beq.n	80081f8 <_dtoa_r+0x7a0>
 80081ea:	ee18 1a10 	vmov	r1, s16
 80081ee:	4620      	mov	r0, r4
 80081f0:	f001 f9f0 	bl	80095d4 <__pow5mult>
 80081f4:	ee08 0a10 	vmov	s16, r0
 80081f8:	2101      	movs	r1, #1
 80081fa:	4620      	mov	r0, r4
 80081fc:	f001 f92a 	bl	8009454 <__i2b>
 8008200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	4606      	mov	r6, r0
 8008206:	f340 8088 	ble.w	800831a <_dtoa_r+0x8c2>
 800820a:	461a      	mov	r2, r3
 800820c:	4601      	mov	r1, r0
 800820e:	4620      	mov	r0, r4
 8008210:	f001 f9e0 	bl	80095d4 <__pow5mult>
 8008214:	9b06      	ldr	r3, [sp, #24]
 8008216:	2b01      	cmp	r3, #1
 8008218:	4606      	mov	r6, r0
 800821a:	f340 8081 	ble.w	8008320 <_dtoa_r+0x8c8>
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	6933      	ldr	r3, [r6, #16]
 8008224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f001 f8c3 	bl	80093b4 <__hi0bits>
 800822e:	f1c0 0020 	rsb	r0, r0, #32
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	4418      	add	r0, r3
 8008236:	f010 001f 	ands.w	r0, r0, #31
 800823a:	f000 8092 	beq.w	8008362 <_dtoa_r+0x90a>
 800823e:	f1c0 0320 	rsb	r3, r0, #32
 8008242:	2b04      	cmp	r3, #4
 8008244:	f340 808a 	ble.w	800835c <_dtoa_r+0x904>
 8008248:	f1c0 001c 	rsb	r0, r0, #28
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	4403      	add	r3, r0
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	4403      	add	r3, r0
 8008256:	4405      	add	r5, r0
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd07      	ble.n	8008270 <_dtoa_r+0x818>
 8008260:	ee18 1a10 	vmov	r1, s16
 8008264:	461a      	mov	r2, r3
 8008266:	4620      	mov	r0, r4
 8008268:	f001 fa0e 	bl	8009688 <__lshift>
 800826c:	ee08 0a10 	vmov	s16, r0
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd05      	ble.n	8008282 <_dtoa_r+0x82a>
 8008276:	4631      	mov	r1, r6
 8008278:	461a      	mov	r2, r3
 800827a:	4620      	mov	r0, r4
 800827c:	f001 fa04 	bl	8009688 <__lshift>
 8008280:	4606      	mov	r6, r0
 8008282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d06e      	beq.n	8008366 <_dtoa_r+0x90e>
 8008288:	ee18 0a10 	vmov	r0, s16
 800828c:	4631      	mov	r1, r6
 800828e:	f001 fa6b 	bl	8009768 <__mcmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	da67      	bge.n	8008366 <_dtoa_r+0x90e>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	ee18 1a10 	vmov	r1, s16
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	220a      	movs	r2, #10
 80082a2:	2300      	movs	r3, #0
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fff5 	bl	8009294 <__multadd>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	ee08 0a10 	vmov	s16, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 81b1 	beq.w	8008618 <_dtoa_r+0xbc0>
 80082b6:	2300      	movs	r3, #0
 80082b8:	4639      	mov	r1, r7
 80082ba:	220a      	movs	r2, #10
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 ffe9 	bl	8009294 <__multadd>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4607      	mov	r7, r0
 80082c8:	f300 808e 	bgt.w	80083e8 <_dtoa_r+0x990>
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc51      	bgt.n	8008376 <_dtoa_r+0x91e>
 80082d2:	e089      	b.n	80083e8 <_dtoa_r+0x990>
 80082d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e74b      	b.n	8008174 <_dtoa_r+0x71c>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1e5e      	subs	r6, r3, #1
 80082e0:	9b07      	ldr	r3, [sp, #28]
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfbf      	itttt	lt
 80082e6:	9b07      	ldrlt	r3, [sp, #28]
 80082e8:	9607      	strlt	r6, [sp, #28]
 80082ea:	1af2      	sublt	r2, r6, r3
 80082ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082ee:	bfb6      	itet	lt
 80082f0:	189b      	addlt	r3, r3, r2
 80082f2:	1b9e      	subge	r6, r3, r6
 80082f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	bfb8      	it	lt
 80082fa:	2600      	movlt	r6, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfb7      	itett	lt
 8008300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008308:	1a9d      	sublt	r5, r3, r2
 800830a:	2300      	movlt	r3, #0
 800830c:	e734      	b.n	8008178 <_dtoa_r+0x720>
 800830e:	9e07      	ldr	r6, [sp, #28]
 8008310:	9d04      	ldr	r5, [sp, #16]
 8008312:	9f08      	ldr	r7, [sp, #32]
 8008314:	e73b      	b.n	800818e <_dtoa_r+0x736>
 8008316:	9a07      	ldr	r2, [sp, #28]
 8008318:	e767      	b.n	80081ea <_dtoa_r+0x792>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	2b01      	cmp	r3, #1
 800831e:	dc18      	bgt.n	8008352 <_dtoa_r+0x8fa>
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	d115      	bne.n	8008352 <_dtoa_r+0x8fa>
 8008326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832a:	b993      	cbnz	r3, 8008352 <_dtoa_r+0x8fa>
 800832c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	051b      	lsls	r3, r3, #20
 8008334:	b183      	cbz	r3, 8008358 <_dtoa_r+0x900>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	3301      	adds	r3, #1
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f04f 0801 	mov.w	r8, #1
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f af6a 	bne.w	8008222 <_dtoa_r+0x7ca>
 800834e:	2001      	movs	r0, #1
 8008350:	e76f      	b.n	8008232 <_dtoa_r+0x7da>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	e7f6      	b.n	8008346 <_dtoa_r+0x8ee>
 8008358:	4698      	mov	r8, r3
 800835a:	e7f4      	b.n	8008346 <_dtoa_r+0x8ee>
 800835c:	f43f af7d 	beq.w	800825a <_dtoa_r+0x802>
 8008360:	4618      	mov	r0, r3
 8008362:	301c      	adds	r0, #28
 8008364:	e772      	b.n	800824c <_dtoa_r+0x7f4>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc37      	bgt.n	80083dc <_dtoa_r+0x984>
 800836c:	9b06      	ldr	r3, [sp, #24]
 800836e:	2b02      	cmp	r3, #2
 8008370:	dd34      	ble.n	80083dc <_dtoa_r+0x984>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	b96b      	cbnz	r3, 8008396 <_dtoa_r+0x93e>
 800837a:	4631      	mov	r1, r6
 800837c:	2205      	movs	r2, #5
 800837e:	4620      	mov	r0, r4
 8008380:	f000 ff88 	bl	8009294 <__multadd>
 8008384:	4601      	mov	r1, r0
 8008386:	4606      	mov	r6, r0
 8008388:	ee18 0a10 	vmov	r0, s16
 800838c:	f001 f9ec 	bl	8009768 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	f73f adbb 	bgt.w	8007f0c <_dtoa_r+0x4b4>
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	9d01      	ldr	r5, [sp, #4]
 800839a:	43db      	mvns	r3, r3
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	4631      	mov	r1, r6
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 ff53 	bl	8009250 <_Bfree>
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	f43f aea4 	beq.w	80080f8 <_dtoa_r+0x6a0>
 80083b0:	f1b8 0f00 	cmp.w	r8, #0
 80083b4:	d005      	beq.n	80083c2 <_dtoa_r+0x96a>
 80083b6:	45b8      	cmp	r8, r7
 80083b8:	d003      	beq.n	80083c2 <_dtoa_r+0x96a>
 80083ba:	4641      	mov	r1, r8
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 ff47 	bl	8009250 <_Bfree>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 ff43 	bl	8009250 <_Bfree>
 80083ca:	e695      	b.n	80080f8 <_dtoa_r+0x6a0>
 80083cc:	2600      	movs	r6, #0
 80083ce:	4637      	mov	r7, r6
 80083d0:	e7e1      	b.n	8008396 <_dtoa_r+0x93e>
 80083d2:	9700      	str	r7, [sp, #0]
 80083d4:	4637      	mov	r7, r6
 80083d6:	e599      	b.n	8007f0c <_dtoa_r+0x4b4>
 80083d8:	40240000 	.word	0x40240000
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80ca 	beq.w	8008578 <_dtoa_r+0xb20>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	dd05      	ble.n	80083f8 <_dtoa_r+0x9a0>
 80083ec:	4639      	mov	r1, r7
 80083ee:	462a      	mov	r2, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f001 f949 	bl	8009688 <__lshift>
 80083f6:	4607      	mov	r7, r0
 80083f8:	f1b8 0f00 	cmp.w	r8, #0
 80083fc:	d05b      	beq.n	80084b6 <_dtoa_r+0xa5e>
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fee5 	bl	80091d0 <_Balloc>
 8008406:	4605      	mov	r5, r0
 8008408:	b928      	cbnz	r0, 8008416 <_dtoa_r+0x9be>
 800840a:	4b87      	ldr	r3, [pc, #540]	; (8008628 <_dtoa_r+0xbd0>)
 800840c:	4602      	mov	r2, r0
 800840e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008412:	f7ff bb3b 	b.w	8007a8c <_dtoa_r+0x34>
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	3202      	adds	r2, #2
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	f107 010c 	add.w	r1, r7, #12
 8008420:	300c      	adds	r0, #12
 8008422:	f000 fec7 	bl	80091b4 <memcpy>
 8008426:	2201      	movs	r2, #1
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f001 f92c 	bl	8009688 <__lshift>
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	f103 0901 	add.w	r9, r3, #1
 8008436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800843a:	4413      	add	r3, r2
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	f00a 0301 	and.w	r3, sl, #1
 8008442:	46b8      	mov	r8, r7
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	4607      	mov	r7, r0
 8008448:	4631      	mov	r1, r6
 800844a:	ee18 0a10 	vmov	r0, s16
 800844e:	f7ff fa75 	bl	800793c <quorem>
 8008452:	4641      	mov	r1, r8
 8008454:	9002      	str	r0, [sp, #8]
 8008456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800845a:	ee18 0a10 	vmov	r0, s16
 800845e:	f001 f983 	bl	8009768 <__mcmp>
 8008462:	463a      	mov	r2, r7
 8008464:	9003      	str	r0, [sp, #12]
 8008466:	4631      	mov	r1, r6
 8008468:	4620      	mov	r0, r4
 800846a:	f001 f999 	bl	80097a0 <__mdiff>
 800846e:	68c2      	ldr	r2, [r0, #12]
 8008470:	f109 3bff 	add.w	fp, r9, #4294967295
 8008474:	4605      	mov	r5, r0
 8008476:	bb02      	cbnz	r2, 80084ba <_dtoa_r+0xa62>
 8008478:	4601      	mov	r1, r0
 800847a:	ee18 0a10 	vmov	r0, s16
 800847e:	f001 f973 	bl	8009768 <__mcmp>
 8008482:	4602      	mov	r2, r0
 8008484:	4629      	mov	r1, r5
 8008486:	4620      	mov	r0, r4
 8008488:	9207      	str	r2, [sp, #28]
 800848a:	f000 fee1 	bl	8009250 <_Bfree>
 800848e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008492:	ea43 0102 	orr.w	r1, r3, r2
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	430b      	orrs	r3, r1
 800849a:	464d      	mov	r5, r9
 800849c:	d10f      	bne.n	80084be <_dtoa_r+0xa66>
 800849e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084a2:	d02a      	beq.n	80084fa <_dtoa_r+0xaa2>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd02      	ble.n	80084b0 <_dtoa_r+0xa58>
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084b0:	f88b a000 	strb.w	sl, [fp]
 80084b4:	e775      	b.n	80083a2 <_dtoa_r+0x94a>
 80084b6:	4638      	mov	r0, r7
 80084b8:	e7ba      	b.n	8008430 <_dtoa_r+0x9d8>
 80084ba:	2201      	movs	r2, #1
 80084bc:	e7e2      	b.n	8008484 <_dtoa_r+0xa2c>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	db04      	blt.n	80084ce <_dtoa_r+0xa76>
 80084c4:	9906      	ldr	r1, [sp, #24]
 80084c6:	430b      	orrs	r3, r1
 80084c8:	9904      	ldr	r1, [sp, #16]
 80084ca:	430b      	orrs	r3, r1
 80084cc:	d122      	bne.n	8008514 <_dtoa_r+0xabc>
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	ddee      	ble.n	80084b0 <_dtoa_r+0xa58>
 80084d2:	ee18 1a10 	vmov	r1, s16
 80084d6:	2201      	movs	r2, #1
 80084d8:	4620      	mov	r0, r4
 80084da:	f001 f8d5 	bl	8009688 <__lshift>
 80084de:	4631      	mov	r1, r6
 80084e0:	ee08 0a10 	vmov	s16, r0
 80084e4:	f001 f940 	bl	8009768 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	dc03      	bgt.n	80084f4 <_dtoa_r+0xa9c>
 80084ec:	d1e0      	bne.n	80084b0 <_dtoa_r+0xa58>
 80084ee:	f01a 0f01 	tst.w	sl, #1
 80084f2:	d0dd      	beq.n	80084b0 <_dtoa_r+0xa58>
 80084f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084f8:	d1d7      	bne.n	80084aa <_dtoa_r+0xa52>
 80084fa:	2339      	movs	r3, #57	; 0x39
 80084fc:	f88b 3000 	strb.w	r3, [fp]
 8008500:	462b      	mov	r3, r5
 8008502:	461d      	mov	r5, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800850a:	2a39      	cmp	r2, #57	; 0x39
 800850c:	d071      	beq.n	80085f2 <_dtoa_r+0xb9a>
 800850e:	3201      	adds	r2, #1
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e746      	b.n	80083a2 <_dtoa_r+0x94a>
 8008514:	2a00      	cmp	r2, #0
 8008516:	dd07      	ble.n	8008528 <_dtoa_r+0xad0>
 8008518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800851c:	d0ed      	beq.n	80084fa <_dtoa_r+0xaa2>
 800851e:	f10a 0301 	add.w	r3, sl, #1
 8008522:	f88b 3000 	strb.w	r3, [fp]
 8008526:	e73c      	b.n	80083a2 <_dtoa_r+0x94a>
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800852e:	4599      	cmp	r9, r3
 8008530:	d047      	beq.n	80085c2 <_dtoa_r+0xb6a>
 8008532:	ee18 1a10 	vmov	r1, s16
 8008536:	2300      	movs	r3, #0
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 feaa 	bl	8009294 <__multadd>
 8008540:	45b8      	cmp	r8, r7
 8008542:	ee08 0a10 	vmov	s16, r0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	f04f 020a 	mov.w	r2, #10
 800854e:	4641      	mov	r1, r8
 8008550:	4620      	mov	r0, r4
 8008552:	d106      	bne.n	8008562 <_dtoa_r+0xb0a>
 8008554:	f000 fe9e 	bl	8009294 <__multadd>
 8008558:	4680      	mov	r8, r0
 800855a:	4607      	mov	r7, r0
 800855c:	f109 0901 	add.w	r9, r9, #1
 8008560:	e772      	b.n	8008448 <_dtoa_r+0x9f0>
 8008562:	f000 fe97 	bl	8009294 <__multadd>
 8008566:	4639      	mov	r1, r7
 8008568:	4680      	mov	r8, r0
 800856a:	2300      	movs	r3, #0
 800856c:	220a      	movs	r2, #10
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fe90 	bl	8009294 <__multadd>
 8008574:	4607      	mov	r7, r0
 8008576:	e7f1      	b.n	800855c <_dtoa_r+0xb04>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	9d01      	ldr	r5, [sp, #4]
 800857e:	ee18 0a10 	vmov	r0, s16
 8008582:	4631      	mov	r1, r6
 8008584:	f7ff f9da 	bl	800793c <quorem>
 8008588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800858c:	9b01      	ldr	r3, [sp, #4]
 800858e:	f805 ab01 	strb.w	sl, [r5], #1
 8008592:	1aea      	subs	r2, r5, r3
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	4293      	cmp	r3, r2
 8008598:	dd09      	ble.n	80085ae <_dtoa_r+0xb56>
 800859a:	ee18 1a10 	vmov	r1, s16
 800859e:	2300      	movs	r3, #0
 80085a0:	220a      	movs	r2, #10
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fe76 	bl	8009294 <__multadd>
 80085a8:	ee08 0a10 	vmov	s16, r0
 80085ac:	e7e7      	b.n	800857e <_dtoa_r+0xb26>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfc8      	it	gt
 80085b4:	461d      	movgt	r5, r3
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	bfd8      	it	le
 80085ba:	2501      	movle	r5, #1
 80085bc:	441d      	add	r5, r3
 80085be:	f04f 0800 	mov.w	r8, #0
 80085c2:	ee18 1a10 	vmov	r1, s16
 80085c6:	2201      	movs	r2, #1
 80085c8:	4620      	mov	r0, r4
 80085ca:	f001 f85d 	bl	8009688 <__lshift>
 80085ce:	4631      	mov	r1, r6
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	f001 f8c8 	bl	8009768 <__mcmp>
 80085d8:	2800      	cmp	r0, #0
 80085da:	dc91      	bgt.n	8008500 <_dtoa_r+0xaa8>
 80085dc:	d102      	bne.n	80085e4 <_dtoa_r+0xb8c>
 80085de:	f01a 0f01 	tst.w	sl, #1
 80085e2:	d18d      	bne.n	8008500 <_dtoa_r+0xaa8>
 80085e4:	462b      	mov	r3, r5
 80085e6:	461d      	mov	r5, r3
 80085e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ec:	2a30      	cmp	r2, #48	; 0x30
 80085ee:	d0fa      	beq.n	80085e6 <_dtoa_r+0xb8e>
 80085f0:	e6d7      	b.n	80083a2 <_dtoa_r+0x94a>
 80085f2:	9a01      	ldr	r2, [sp, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d184      	bne.n	8008502 <_dtoa_r+0xaaa>
 80085f8:	9b00      	ldr	r3, [sp, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	2331      	movs	r3, #49	; 0x31
 8008600:	7013      	strb	r3, [r2, #0]
 8008602:	e6ce      	b.n	80083a2 <_dtoa_r+0x94a>
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <_dtoa_r+0xbd4>)
 8008606:	f7ff ba95 	b.w	8007b34 <_dtoa_r+0xdc>
 800860a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800860c:	2b00      	cmp	r3, #0
 800860e:	f47f aa6e 	bne.w	8007aee <_dtoa_r+0x96>
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_dtoa_r+0xbd8>)
 8008614:	f7ff ba8e 	b.w	8007b34 <_dtoa_r+0xdc>
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dcae      	bgt.n	800857c <_dtoa_r+0xb24>
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f73f aea8 	bgt.w	8008376 <_dtoa_r+0x91e>
 8008626:	e7a9      	b.n	800857c <_dtoa_r+0xb24>
 8008628:	0800b510 	.word	0x0800b510
 800862c:	0800b771 	.word	0x0800b771
 8008630:	0800b491 	.word	0x0800b491

08008634 <__sflush_r>:
 8008634:	898a      	ldrh	r2, [r1, #12]
 8008636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	4605      	mov	r5, r0
 800863c:	0710      	lsls	r0, r2, #28
 800863e:	460c      	mov	r4, r1
 8008640:	d458      	bmi.n	80086f4 <__sflush_r+0xc0>
 8008642:	684b      	ldr	r3, [r1, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dc05      	bgt.n	8008654 <__sflush_r+0x20>
 8008648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc02      	bgt.n	8008654 <__sflush_r+0x20>
 800864e:	2000      	movs	r0, #0
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008656:	2e00      	cmp	r6, #0
 8008658:	d0f9      	beq.n	800864e <__sflush_r+0x1a>
 800865a:	2300      	movs	r3, #0
 800865c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008660:	682f      	ldr	r7, [r5, #0]
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	d032      	beq.n	80086cc <__sflush_r+0x98>
 8008666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	075a      	lsls	r2, r3, #29
 800866c:	d505      	bpl.n	800867a <__sflush_r+0x46>
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	1ac0      	subs	r0, r0, r3
 8008672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008674:	b10b      	cbz	r3, 800867a <__sflush_r+0x46>
 8008676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008678:	1ac0      	subs	r0, r0, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4602      	mov	r2, r0
 800867e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008680:	6a21      	ldr	r1, [r4, #32]
 8008682:	4628      	mov	r0, r5
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	d106      	bne.n	800869a <__sflush_r+0x66>
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	291d      	cmp	r1, #29
 8008690:	d82c      	bhi.n	80086ec <__sflush_r+0xb8>
 8008692:	4a2a      	ldr	r2, [pc, #168]	; (800873c <__sflush_r+0x108>)
 8008694:	40ca      	lsrs	r2, r1
 8008696:	07d6      	lsls	r6, r2, #31
 8008698:	d528      	bpl.n	80086ec <__sflush_r+0xb8>
 800869a:	2200      	movs	r2, #0
 800869c:	6062      	str	r2, [r4, #4]
 800869e:	04d9      	lsls	r1, r3, #19
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	d504      	bpl.n	80086b0 <__sflush_r+0x7c>
 80086a6:	1c42      	adds	r2, r0, #1
 80086a8:	d101      	bne.n	80086ae <__sflush_r+0x7a>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b903      	cbnz	r3, 80086b0 <__sflush_r+0x7c>
 80086ae:	6560      	str	r0, [r4, #84]	; 0x54
 80086b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b2:	602f      	str	r7, [r5, #0]
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d0ca      	beq.n	800864e <__sflush_r+0x1a>
 80086b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086bc:	4299      	cmp	r1, r3
 80086be:	d002      	beq.n	80086c6 <__sflush_r+0x92>
 80086c0:	4628      	mov	r0, r5
 80086c2:	f001 fa5d 	bl	8009b80 <_free_r>
 80086c6:	2000      	movs	r0, #0
 80086c8:	6360      	str	r0, [r4, #52]	; 0x34
 80086ca:	e7c1      	b.n	8008650 <__sflush_r+0x1c>
 80086cc:	6a21      	ldr	r1, [r4, #32]
 80086ce:	2301      	movs	r3, #1
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	1c41      	adds	r1, r0, #1
 80086d6:	d1c7      	bne.n	8008668 <__sflush_r+0x34>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0c4      	beq.n	8008668 <__sflush_r+0x34>
 80086de:	2b1d      	cmp	r3, #29
 80086e0:	d001      	beq.n	80086e6 <__sflush_r+0xb2>
 80086e2:	2b16      	cmp	r3, #22
 80086e4:	d101      	bne.n	80086ea <__sflush_r+0xb6>
 80086e6:	602f      	str	r7, [r5, #0]
 80086e8:	e7b1      	b.n	800864e <__sflush_r+0x1a>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	e7ad      	b.n	8008650 <__sflush_r+0x1c>
 80086f4:	690f      	ldr	r7, [r1, #16]
 80086f6:	2f00      	cmp	r7, #0
 80086f8:	d0a9      	beq.n	800864e <__sflush_r+0x1a>
 80086fa:	0793      	lsls	r3, r2, #30
 80086fc:	680e      	ldr	r6, [r1, #0]
 80086fe:	bf08      	it	eq
 8008700:	694b      	ldreq	r3, [r1, #20]
 8008702:	600f      	str	r7, [r1, #0]
 8008704:	bf18      	it	ne
 8008706:	2300      	movne	r3, #0
 8008708:	eba6 0807 	sub.w	r8, r6, r7
 800870c:	608b      	str	r3, [r1, #8]
 800870e:	f1b8 0f00 	cmp.w	r8, #0
 8008712:	dd9c      	ble.n	800864e <__sflush_r+0x1a>
 8008714:	6a21      	ldr	r1, [r4, #32]
 8008716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008718:	4643      	mov	r3, r8
 800871a:	463a      	mov	r2, r7
 800871c:	4628      	mov	r0, r5
 800871e:	47b0      	blx	r6
 8008720:	2800      	cmp	r0, #0
 8008722:	dc06      	bgt.n	8008732 <__sflush_r+0xfe>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e78e      	b.n	8008650 <__sflush_r+0x1c>
 8008732:	4407      	add	r7, r0
 8008734:	eba8 0800 	sub.w	r8, r8, r0
 8008738:	e7e9      	b.n	800870e <__sflush_r+0xda>
 800873a:	bf00      	nop
 800873c:	20400001 	.word	0x20400001

08008740 <_fflush_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b913      	cbnz	r3, 8008750 <_fflush_r+0x10>
 800874a:	2500      	movs	r5, #0
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	b118      	cbz	r0, 800875a <_fflush_r+0x1a>
 8008752:	6983      	ldr	r3, [r0, #24]
 8008754:	b90b      	cbnz	r3, 800875a <_fflush_r+0x1a>
 8008756:	f000 f887 	bl	8008868 <__sinit>
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <_fflush_r+0x6c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d11b      	bne.n	8008798 <_fflush_r+0x58>
 8008760:	686c      	ldr	r4, [r5, #4]
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0ef      	beq.n	800874a <_fflush_r+0xa>
 800876a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800876c:	07d0      	lsls	r0, r2, #31
 800876e:	d404      	bmi.n	800877a <_fflush_r+0x3a>
 8008770:	0599      	lsls	r1, r3, #22
 8008772:	d402      	bmi.n	800877a <_fflush_r+0x3a>
 8008774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008776:	f000 fc88 	bl	800908a <__retarget_lock_acquire_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	4621      	mov	r1, r4
 800877e:	f7ff ff59 	bl	8008634 <__sflush_r>
 8008782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008784:	07da      	lsls	r2, r3, #31
 8008786:	4605      	mov	r5, r0
 8008788:	d4e0      	bmi.n	800874c <_fflush_r+0xc>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	d4dd      	bmi.n	800874c <_fflush_r+0xc>
 8008790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008792:	f000 fc7b 	bl	800908c <__retarget_lock_release_recursive>
 8008796:	e7d9      	b.n	800874c <_fflush_r+0xc>
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <_fflush_r+0x70>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d101      	bne.n	80087a2 <_fflush_r+0x62>
 800879e:	68ac      	ldr	r4, [r5, #8]
 80087a0:	e7df      	b.n	8008762 <_fflush_r+0x22>
 80087a2:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <_fflush_r+0x74>)
 80087a4:	429c      	cmp	r4, r3
 80087a6:	bf08      	it	eq
 80087a8:	68ec      	ldreq	r4, [r5, #12]
 80087aa:	e7da      	b.n	8008762 <_fflush_r+0x22>
 80087ac:	0800b544 	.word	0x0800b544
 80087b0:	0800b564 	.word	0x0800b564
 80087b4:	0800b524 	.word	0x0800b524

080087b8 <std>:
 80087b8:	2300      	movs	r3, #0
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	e9c0 3300 	strd	r3, r3, [r0]
 80087c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087c6:	6083      	str	r3, [r0, #8]
 80087c8:	8181      	strh	r1, [r0, #12]
 80087ca:	6643      	str	r3, [r0, #100]	; 0x64
 80087cc:	81c2      	strh	r2, [r0, #14]
 80087ce:	6183      	str	r3, [r0, #24]
 80087d0:	4619      	mov	r1, r3
 80087d2:	2208      	movs	r2, #8
 80087d4:	305c      	adds	r0, #92	; 0x5c
 80087d6:	f7fd f947 	bl	8005a68 <memset>
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x38>)
 80087dc:	6263      	str	r3, [r4, #36]	; 0x24
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <std+0x3c>)
 80087e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <std+0x40>)
 80087e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <std+0x44>)
 80087e8:	6224      	str	r4, [r4, #32]
 80087ea:	6323      	str	r3, [r4, #48]	; 0x30
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	08006959 	.word	0x08006959
 80087f4:	0800697f 	.word	0x0800697f
 80087f8:	080069b7 	.word	0x080069b7
 80087fc:	080069db 	.word	0x080069db

08008800 <_cleanup_r>:
 8008800:	4901      	ldr	r1, [pc, #4]	; (8008808 <_cleanup_r+0x8>)
 8008802:	f000 b8af 	b.w	8008964 <_fwalk_reent>
 8008806:	bf00      	nop
 8008808:	08008741 	.word	0x08008741

0800880c <__sfmoreglue>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	2268      	movs	r2, #104	; 0x68
 8008810:	1e4d      	subs	r5, r1, #1
 8008812:	4355      	muls	r5, r2
 8008814:	460e      	mov	r6, r1
 8008816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800881a:	f001 fa1d 	bl	8009c58 <_malloc_r>
 800881e:	4604      	mov	r4, r0
 8008820:	b140      	cbz	r0, 8008834 <__sfmoreglue+0x28>
 8008822:	2100      	movs	r1, #0
 8008824:	e9c0 1600 	strd	r1, r6, [r0]
 8008828:	300c      	adds	r0, #12
 800882a:	60a0      	str	r0, [r4, #8]
 800882c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008830:	f7fd f91a 	bl	8005a68 <memset>
 8008834:	4620      	mov	r0, r4
 8008836:	bd70      	pop	{r4, r5, r6, pc}

08008838 <__sfp_lock_acquire>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_acquire+0x8>)
 800883a:	f000 bc26 	b.w	800908a <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	20000845 	.word	0x20000845

08008844 <__sfp_lock_release>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_release+0x8>)
 8008846:	f000 bc21 	b.w	800908c <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	20000845 	.word	0x20000845

08008850 <__sinit_lock_acquire>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sinit_lock_acquire+0x8>)
 8008852:	f000 bc1a 	b.w	800908a <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	20000846 	.word	0x20000846

0800885c <__sinit_lock_release>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_release+0x8>)
 800885e:	f000 bc15 	b.w	800908c <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	20000846 	.word	0x20000846

08008868 <__sinit>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	f7ff fff0 	bl	8008850 <__sinit_lock_acquire>
 8008870:	69a3      	ldr	r3, [r4, #24]
 8008872:	b11b      	cbz	r3, 800887c <__sinit+0x14>
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	f7ff bff0 	b.w	800885c <__sinit_lock_release>
 800887c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008880:	6523      	str	r3, [r4, #80]	; 0x50
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <__sinit+0x68>)
 8008884:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <__sinit+0x6c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	62a2      	str	r2, [r4, #40]	; 0x28
 800888a:	42a3      	cmp	r3, r4
 800888c:	bf04      	itt	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	61a3      	streq	r3, [r4, #24]
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f820 	bl	80088d8 <__sfp>
 8008898:	6060      	str	r0, [r4, #4]
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f81c 	bl	80088d8 <__sfp>
 80088a0:	60a0      	str	r0, [r4, #8]
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 f818 	bl	80088d8 <__sfp>
 80088a8:	2200      	movs	r2, #0
 80088aa:	60e0      	str	r0, [r4, #12]
 80088ac:	2104      	movs	r1, #4
 80088ae:	6860      	ldr	r0, [r4, #4]
 80088b0:	f7ff ff82 	bl	80087b8 <std>
 80088b4:	68a0      	ldr	r0, [r4, #8]
 80088b6:	2201      	movs	r2, #1
 80088b8:	2109      	movs	r1, #9
 80088ba:	f7ff ff7d 	bl	80087b8 <std>
 80088be:	68e0      	ldr	r0, [r4, #12]
 80088c0:	2202      	movs	r2, #2
 80088c2:	2112      	movs	r1, #18
 80088c4:	f7ff ff78 	bl	80087b8 <std>
 80088c8:	2301      	movs	r3, #1
 80088ca:	61a3      	str	r3, [r4, #24]
 80088cc:	e7d2      	b.n	8008874 <__sinit+0xc>
 80088ce:	bf00      	nop
 80088d0:	0800b304 	.word	0x0800b304
 80088d4:	08008801 	.word	0x08008801

080088d8 <__sfp>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4607      	mov	r7, r0
 80088dc:	f7ff ffac 	bl	8008838 <__sfp_lock_acquire>
 80088e0:	4b1e      	ldr	r3, [pc, #120]	; (800895c <__sfp+0x84>)
 80088e2:	681e      	ldr	r6, [r3, #0]
 80088e4:	69b3      	ldr	r3, [r6, #24]
 80088e6:	b913      	cbnz	r3, 80088ee <__sfp+0x16>
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffbd 	bl	8008868 <__sinit>
 80088ee:	3648      	adds	r6, #72	; 0x48
 80088f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	d503      	bpl.n	8008900 <__sfp+0x28>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	b30b      	cbz	r3, 8008940 <__sfp+0x68>
 80088fc:	6836      	ldr	r6, [r6, #0]
 80088fe:	e7f7      	b.n	80088f0 <__sfp+0x18>
 8008900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008904:	b9d5      	cbnz	r5, 800893c <__sfp+0x64>
 8008906:	4b16      	ldr	r3, [pc, #88]	; (8008960 <__sfp+0x88>)
 8008908:	60e3      	str	r3, [r4, #12]
 800890a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890e:	6665      	str	r5, [r4, #100]	; 0x64
 8008910:	f000 fbba 	bl	8009088 <__retarget_lock_init_recursive>
 8008914:	f7ff ff96 	bl	8008844 <__sfp_lock_release>
 8008918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800891c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008920:	6025      	str	r5, [r4, #0]
 8008922:	61a5      	str	r5, [r4, #24]
 8008924:	2208      	movs	r2, #8
 8008926:	4629      	mov	r1, r5
 8008928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800892c:	f7fd f89c 	bl	8005a68 <memset>
 8008930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008938:	4620      	mov	r0, r4
 800893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893c:	3468      	adds	r4, #104	; 0x68
 800893e:	e7d9      	b.n	80088f4 <__sfp+0x1c>
 8008940:	2104      	movs	r1, #4
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ff62 	bl	800880c <__sfmoreglue>
 8008948:	4604      	mov	r4, r0
 800894a:	6030      	str	r0, [r6, #0]
 800894c:	2800      	cmp	r0, #0
 800894e:	d1d5      	bne.n	80088fc <__sfp+0x24>
 8008950:	f7ff ff78 	bl	8008844 <__sfp_lock_release>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	e7ee      	b.n	8008938 <__sfp+0x60>
 800895a:	bf00      	nop
 800895c:	0800b304 	.word	0x0800b304
 8008960:	ffff0001 	.word	0xffff0001

08008964 <_fwalk_reent>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4606      	mov	r6, r0
 800896a:	4688      	mov	r8, r1
 800896c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008970:	2700      	movs	r7, #0
 8008972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008976:	f1b9 0901 	subs.w	r9, r9, #1
 800897a:	d505      	bpl.n	8008988 <_fwalk_reent+0x24>
 800897c:	6824      	ldr	r4, [r4, #0]
 800897e:	2c00      	cmp	r4, #0
 8008980:	d1f7      	bne.n	8008972 <_fwalk_reent+0xe>
 8008982:	4638      	mov	r0, r7
 8008984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d907      	bls.n	800899e <_fwalk_reent+0x3a>
 800898e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008992:	3301      	adds	r3, #1
 8008994:	d003      	beq.n	800899e <_fwalk_reent+0x3a>
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	47c0      	blx	r8
 800899c:	4307      	orrs	r7, r0
 800899e:	3568      	adds	r5, #104	; 0x68
 80089a0:	e7e9      	b.n	8008976 <_fwalk_reent+0x12>

080089a2 <rshift>:
 80089a2:	6903      	ldr	r3, [r0, #16]
 80089a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089b0:	f100 0414 	add.w	r4, r0, #20
 80089b4:	dd45      	ble.n	8008a42 <rshift+0xa0>
 80089b6:	f011 011f 	ands.w	r1, r1, #31
 80089ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089c2:	d10c      	bne.n	80089de <rshift+0x3c>
 80089c4:	f100 0710 	add.w	r7, r0, #16
 80089c8:	4629      	mov	r1, r5
 80089ca:	42b1      	cmp	r1, r6
 80089cc:	d334      	bcc.n	8008a38 <rshift+0x96>
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	1eea      	subs	r2, r5, #3
 80089d4:	4296      	cmp	r6, r2
 80089d6:	bf38      	it	cc
 80089d8:	2300      	movcc	r3, #0
 80089da:	4423      	add	r3, r4
 80089dc:	e015      	b.n	8008a0a <rshift+0x68>
 80089de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089e2:	f1c1 0820 	rsb	r8, r1, #32
 80089e6:	40cf      	lsrs	r7, r1
 80089e8:	f105 0e04 	add.w	lr, r5, #4
 80089ec:	46a1      	mov	r9, r4
 80089ee:	4576      	cmp	r6, lr
 80089f0:	46f4      	mov	ip, lr
 80089f2:	d815      	bhi.n	8008a20 <rshift+0x7e>
 80089f4:	1a9a      	subs	r2, r3, r2
 80089f6:	0092      	lsls	r2, r2, #2
 80089f8:	3a04      	subs	r2, #4
 80089fa:	3501      	adds	r5, #1
 80089fc:	42ae      	cmp	r6, r5
 80089fe:	bf38      	it	cc
 8008a00:	2200      	movcc	r2, #0
 8008a02:	18a3      	adds	r3, r4, r2
 8008a04:	50a7      	str	r7, [r4, r2]
 8008a06:	b107      	cbz	r7, 8008a0a <rshift+0x68>
 8008a08:	3304      	adds	r3, #4
 8008a0a:	1b1a      	subs	r2, r3, r4
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a12:	bf08      	it	eq
 8008a14:	2300      	moveq	r3, #0
 8008a16:	6102      	str	r2, [r0, #16]
 8008a18:	bf08      	it	eq
 8008a1a:	6143      	streq	r3, [r0, #20]
 8008a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a20:	f8dc c000 	ldr.w	ip, [ip]
 8008a24:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a28:	ea4c 0707 	orr.w	r7, ip, r7
 8008a2c:	f849 7b04 	str.w	r7, [r9], #4
 8008a30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a34:	40cf      	lsrs	r7, r1
 8008a36:	e7da      	b.n	80089ee <rshift+0x4c>
 8008a38:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a40:	e7c3      	b.n	80089ca <rshift+0x28>
 8008a42:	4623      	mov	r3, r4
 8008a44:	e7e1      	b.n	8008a0a <rshift+0x68>

08008a46 <__hexdig_fun>:
 8008a46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a4a:	2b09      	cmp	r3, #9
 8008a4c:	d802      	bhi.n	8008a54 <__hexdig_fun+0xe>
 8008a4e:	3820      	subs	r0, #32
 8008a50:	b2c0      	uxtb	r0, r0
 8008a52:	4770      	bx	lr
 8008a54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a58:	2b05      	cmp	r3, #5
 8008a5a:	d801      	bhi.n	8008a60 <__hexdig_fun+0x1a>
 8008a5c:	3847      	subs	r0, #71	; 0x47
 8008a5e:	e7f7      	b.n	8008a50 <__hexdig_fun+0xa>
 8008a60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a64:	2b05      	cmp	r3, #5
 8008a66:	d801      	bhi.n	8008a6c <__hexdig_fun+0x26>
 8008a68:	3827      	subs	r0, #39	; 0x27
 8008a6a:	e7f1      	b.n	8008a50 <__hexdig_fun+0xa>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	4770      	bx	lr

08008a70 <__gethex>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b02 	vpush	{d8}
 8008a78:	b089      	sub	sp, #36	; 0x24
 8008a7a:	ee08 0a10 	vmov	s16, r0
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	4bb4      	ldr	r3, [pc, #720]	; (8008d54 <__gethex+0x2e4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	4618      	mov	r0, r3
 8008a88:	468b      	mov	fp, r1
 8008a8a:	4690      	mov	r8, r2
 8008a8c:	f7f7 fba0 	bl	80001d0 <strlen>
 8008a90:	9b01      	ldr	r3, [sp, #4]
 8008a92:	f8db 2000 	ldr.w	r2, [fp]
 8008a96:	4403      	add	r3, r0
 8008a98:	4682      	mov	sl, r0
 8008a9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a9e:	9305      	str	r3, [sp, #20]
 8008aa0:	1c93      	adds	r3, r2, #2
 8008aa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008aa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008aaa:	32fe      	adds	r2, #254	; 0xfe
 8008aac:	18d1      	adds	r1, r2, r3
 8008aae:	461f      	mov	r7, r3
 8008ab0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ab4:	9100      	str	r1, [sp, #0]
 8008ab6:	2830      	cmp	r0, #48	; 0x30
 8008ab8:	d0f8      	beq.n	8008aac <__gethex+0x3c>
 8008aba:	f7ff ffc4 	bl	8008a46 <__hexdig_fun>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d13a      	bne.n	8008b3a <__gethex+0xca>
 8008ac4:	9901      	ldr	r1, [sp, #4]
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7fd ff92 	bl	80069f2 <strncmp>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d168      	bne.n	8008ba6 <__gethex+0x136>
 8008ad4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ad8:	eb07 060a 	add.w	r6, r7, sl
 8008adc:	f7ff ffb3 	bl	8008a46 <__hexdig_fun>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d062      	beq.n	8008baa <__gethex+0x13a>
 8008ae4:	4633      	mov	r3, r6
 8008ae6:	7818      	ldrb	r0, [r3, #0]
 8008ae8:	2830      	cmp	r0, #48	; 0x30
 8008aea:	461f      	mov	r7, r3
 8008aec:	f103 0301 	add.w	r3, r3, #1
 8008af0:	d0f9      	beq.n	8008ae6 <__gethex+0x76>
 8008af2:	f7ff ffa8 	bl	8008a46 <__hexdig_fun>
 8008af6:	2301      	movs	r3, #1
 8008af8:	fab0 f480 	clz	r4, r0
 8008afc:	0964      	lsrs	r4, r4, #5
 8008afe:	4635      	mov	r5, r6
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	463a      	mov	r2, r7
 8008b04:	4616      	mov	r6, r2
 8008b06:	3201      	adds	r2, #1
 8008b08:	7830      	ldrb	r0, [r6, #0]
 8008b0a:	f7ff ff9c 	bl	8008a46 <__hexdig_fun>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1f8      	bne.n	8008b04 <__gethex+0x94>
 8008b12:	9901      	ldr	r1, [sp, #4]
 8008b14:	4652      	mov	r2, sl
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7fd ff6b 	bl	80069f2 <strncmp>
 8008b1c:	b980      	cbnz	r0, 8008b40 <__gethex+0xd0>
 8008b1e:	b94d      	cbnz	r5, 8008b34 <__gethex+0xc4>
 8008b20:	eb06 050a 	add.w	r5, r6, sl
 8008b24:	462a      	mov	r2, r5
 8008b26:	4616      	mov	r6, r2
 8008b28:	3201      	adds	r2, #1
 8008b2a:	7830      	ldrb	r0, [r6, #0]
 8008b2c:	f7ff ff8b 	bl	8008a46 <__hexdig_fun>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d1f8      	bne.n	8008b26 <__gethex+0xb6>
 8008b34:	1bad      	subs	r5, r5, r6
 8008b36:	00ad      	lsls	r5, r5, #2
 8008b38:	e004      	b.n	8008b44 <__gethex+0xd4>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	e7e0      	b.n	8008b02 <__gethex+0x92>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	d1f7      	bne.n	8008b34 <__gethex+0xc4>
 8008b44:	7833      	ldrb	r3, [r6, #0]
 8008b46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b4a:	2b50      	cmp	r3, #80	; 0x50
 8008b4c:	d13b      	bne.n	8008bc6 <__gethex+0x156>
 8008b4e:	7873      	ldrb	r3, [r6, #1]
 8008b50:	2b2b      	cmp	r3, #43	; 0x2b
 8008b52:	d02c      	beq.n	8008bae <__gethex+0x13e>
 8008b54:	2b2d      	cmp	r3, #45	; 0x2d
 8008b56:	d02e      	beq.n	8008bb6 <__gethex+0x146>
 8008b58:	1c71      	adds	r1, r6, #1
 8008b5a:	f04f 0900 	mov.w	r9, #0
 8008b5e:	7808      	ldrb	r0, [r1, #0]
 8008b60:	f7ff ff71 	bl	8008a46 <__hexdig_fun>
 8008b64:	1e43      	subs	r3, r0, #1
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b18      	cmp	r3, #24
 8008b6a:	d82c      	bhi.n	8008bc6 <__gethex+0x156>
 8008b6c:	f1a0 0210 	sub.w	r2, r0, #16
 8008b70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b74:	f7ff ff67 	bl	8008a46 <__hexdig_fun>
 8008b78:	1e43      	subs	r3, r0, #1
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b18      	cmp	r3, #24
 8008b7e:	d91d      	bls.n	8008bbc <__gethex+0x14c>
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	d000      	beq.n	8008b88 <__gethex+0x118>
 8008b86:	4252      	negs	r2, r2
 8008b88:	4415      	add	r5, r2
 8008b8a:	f8cb 1000 	str.w	r1, [fp]
 8008b8e:	b1e4      	cbz	r4, 8008bca <__gethex+0x15a>
 8008b90:	9b00      	ldr	r3, [sp, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bf14      	ite	ne
 8008b96:	2700      	movne	r7, #0
 8008b98:	2706      	moveq	r7, #6
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	b009      	add	sp, #36	; 0x24
 8008b9e:	ecbd 8b02 	vpop	{d8}
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	463e      	mov	r6, r7
 8008ba8:	4625      	mov	r5, r4
 8008baa:	2401      	movs	r4, #1
 8008bac:	e7ca      	b.n	8008b44 <__gethex+0xd4>
 8008bae:	f04f 0900 	mov.w	r9, #0
 8008bb2:	1cb1      	adds	r1, r6, #2
 8008bb4:	e7d3      	b.n	8008b5e <__gethex+0xee>
 8008bb6:	f04f 0901 	mov.w	r9, #1
 8008bba:	e7fa      	b.n	8008bb2 <__gethex+0x142>
 8008bbc:	230a      	movs	r3, #10
 8008bbe:	fb03 0202 	mla	r2, r3, r2, r0
 8008bc2:	3a10      	subs	r2, #16
 8008bc4:	e7d4      	b.n	8008b70 <__gethex+0x100>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	e7df      	b.n	8008b8a <__gethex+0x11a>
 8008bca:	1bf3      	subs	r3, r6, r7
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4621      	mov	r1, r4
 8008bd0:	2b07      	cmp	r3, #7
 8008bd2:	dc0b      	bgt.n	8008bec <__gethex+0x17c>
 8008bd4:	ee18 0a10 	vmov	r0, s16
 8008bd8:	f000 fafa 	bl	80091d0 <_Balloc>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	b940      	cbnz	r0, 8008bf2 <__gethex+0x182>
 8008be0:	4b5d      	ldr	r3, [pc, #372]	; (8008d58 <__gethex+0x2e8>)
 8008be2:	4602      	mov	r2, r0
 8008be4:	21de      	movs	r1, #222	; 0xde
 8008be6:	485d      	ldr	r0, [pc, #372]	; (8008d5c <__gethex+0x2ec>)
 8008be8:	f001 ffea 	bl	800abc0 <__assert_func>
 8008bec:	3101      	adds	r1, #1
 8008bee:	105b      	asrs	r3, r3, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__gethex+0x160>
 8008bf2:	f100 0914 	add.w	r9, r0, #20
 8008bf6:	f04f 0b00 	mov.w	fp, #0
 8008bfa:	f1ca 0301 	rsb	r3, sl, #1
 8008bfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c02:	f8cd b000 	str.w	fp, [sp]
 8008c06:	9306      	str	r3, [sp, #24]
 8008c08:	42b7      	cmp	r7, r6
 8008c0a:	d340      	bcc.n	8008c8e <__gethex+0x21e>
 8008c0c:	9802      	ldr	r0, [sp, #8]
 8008c0e:	9b00      	ldr	r3, [sp, #0]
 8008c10:	f840 3b04 	str.w	r3, [r0], #4
 8008c14:	eba0 0009 	sub.w	r0, r0, r9
 8008c18:	1080      	asrs	r0, r0, #2
 8008c1a:	0146      	lsls	r6, r0, #5
 8008c1c:	6120      	str	r0, [r4, #16]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fbc8 	bl	80093b4 <__hi0bits>
 8008c24:	1a30      	subs	r0, r6, r0
 8008c26:	f8d8 6000 	ldr.w	r6, [r8]
 8008c2a:	42b0      	cmp	r0, r6
 8008c2c:	dd63      	ble.n	8008cf6 <__gethex+0x286>
 8008c2e:	1b87      	subs	r7, r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 ff6c 	bl	8009b10 <__any_on>
 8008c38:	4682      	mov	sl, r0
 8008c3a:	b1a8      	cbz	r0, 8008c68 <__gethex+0x1f8>
 8008c3c:	1e7b      	subs	r3, r7, #1
 8008c3e:	1159      	asrs	r1, r3, #5
 8008c40:	f003 021f 	and.w	r2, r3, #31
 8008c44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c48:	f04f 0a01 	mov.w	sl, #1
 8008c4c:	fa0a f202 	lsl.w	r2, sl, r2
 8008c50:	420a      	tst	r2, r1
 8008c52:	d009      	beq.n	8008c68 <__gethex+0x1f8>
 8008c54:	4553      	cmp	r3, sl
 8008c56:	dd05      	ble.n	8008c64 <__gethex+0x1f4>
 8008c58:	1eb9      	subs	r1, r7, #2
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 ff58 	bl	8009b10 <__any_on>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d145      	bne.n	8008cf0 <__gethex+0x280>
 8008c64:	f04f 0a02 	mov.w	sl, #2
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff fe99 	bl	80089a2 <rshift>
 8008c70:	443d      	add	r5, r7
 8008c72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	da4c      	bge.n	8008d14 <__gethex+0x2a4>
 8008c7a:	ee18 0a10 	vmov	r0, s16
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f000 fae6 	bl	8009250 <_Bfree>
 8008c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c86:	2300      	movs	r3, #0
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	27a3      	movs	r7, #163	; 0xa3
 8008c8c:	e785      	b.n	8008b9a <__gethex+0x12a>
 8008c8e:	1e73      	subs	r3, r6, #1
 8008c90:	9a05      	ldr	r2, [sp, #20]
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d019      	beq.n	8008cd0 <__gethex+0x260>
 8008c9c:	f1bb 0f20 	cmp.w	fp, #32
 8008ca0:	d107      	bne.n	8008cb2 <__gethex+0x242>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	9a00      	ldr	r2, [sp, #0]
 8008ca6:	f843 2b04 	str.w	r2, [r3], #4
 8008caa:	9302      	str	r3, [sp, #8]
 8008cac:	2300      	movs	r3, #0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	469b      	mov	fp, r3
 8008cb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008cb6:	f7ff fec6 	bl	8008a46 <__hexdig_fun>
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	f000 000f 	and.w	r0, r0, #15
 8008cc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8008cc4:	4303      	orrs	r3, r0
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	f10b 0b04 	add.w	fp, fp, #4
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	e00d      	b.n	8008cec <__gethex+0x27c>
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	9a06      	ldr	r2, [sp, #24]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	42bb      	cmp	r3, r7
 8008cd8:	d3e0      	bcc.n	8008c9c <__gethex+0x22c>
 8008cda:	4618      	mov	r0, r3
 8008cdc:	9901      	ldr	r1, [sp, #4]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	f7fd fe86 	bl	80069f2 <strncmp>
 8008ce6:	9b07      	ldr	r3, [sp, #28]
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1d7      	bne.n	8008c9c <__gethex+0x22c>
 8008cec:	461e      	mov	r6, r3
 8008cee:	e78b      	b.n	8008c08 <__gethex+0x198>
 8008cf0:	f04f 0a03 	mov.w	sl, #3
 8008cf4:	e7b8      	b.n	8008c68 <__gethex+0x1f8>
 8008cf6:	da0a      	bge.n	8008d0e <__gethex+0x29e>
 8008cf8:	1a37      	subs	r7, r6, r0
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	ee18 0a10 	vmov	r0, s16
 8008d00:	463a      	mov	r2, r7
 8008d02:	f000 fcc1 	bl	8009688 <__lshift>
 8008d06:	1bed      	subs	r5, r5, r7
 8008d08:	4604      	mov	r4, r0
 8008d0a:	f100 0914 	add.w	r9, r0, #20
 8008d0e:	f04f 0a00 	mov.w	sl, #0
 8008d12:	e7ae      	b.n	8008c72 <__gethex+0x202>
 8008d14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d18:	42a8      	cmp	r0, r5
 8008d1a:	dd72      	ble.n	8008e02 <__gethex+0x392>
 8008d1c:	1b45      	subs	r5, r0, r5
 8008d1e:	42ae      	cmp	r6, r5
 8008d20:	dc36      	bgt.n	8008d90 <__gethex+0x320>
 8008d22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d02a      	beq.n	8008d80 <__gethex+0x310>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d02c      	beq.n	8008d88 <__gethex+0x318>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d11c      	bne.n	8008d6c <__gethex+0x2fc>
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	d11a      	bne.n	8008d6c <__gethex+0x2fc>
 8008d36:	2e01      	cmp	r6, #1
 8008d38:	d112      	bne.n	8008d60 <__gethex+0x2f0>
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	2301      	movs	r3, #1
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	f8c9 3000 	str.w	r3, [r9]
 8008d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d4c:	2762      	movs	r7, #98	; 0x62
 8008d4e:	601c      	str	r4, [r3, #0]
 8008d50:	e723      	b.n	8008b9a <__gethex+0x12a>
 8008d52:	bf00      	nop
 8008d54:	0800b5ec 	.word	0x0800b5ec
 8008d58:	0800b510 	.word	0x0800b510
 8008d5c:	0800b584 	.word	0x0800b584
 8008d60:	1e71      	subs	r1, r6, #1
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fed4 	bl	8009b10 <__any_on>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d1e6      	bne.n	8008d3a <__gethex+0x2ca>
 8008d6c:	ee18 0a10 	vmov	r0, s16
 8008d70:	4621      	mov	r1, r4
 8008d72:	f000 fa6d 	bl	8009250 <_Bfree>
 8008d76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	2750      	movs	r7, #80	; 0x50
 8008d7e:	e70c      	b.n	8008b9a <__gethex+0x12a>
 8008d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f2      	bne.n	8008d6c <__gethex+0x2fc>
 8008d86:	e7d8      	b.n	8008d3a <__gethex+0x2ca>
 8008d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1d5      	bne.n	8008d3a <__gethex+0x2ca>
 8008d8e:	e7ed      	b.n	8008d6c <__gethex+0x2fc>
 8008d90:	1e6f      	subs	r7, r5, #1
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	d131      	bne.n	8008dfc <__gethex+0x38c>
 8008d98:	b127      	cbz	r7, 8008da4 <__gethex+0x334>
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 feb7 	bl	8009b10 <__any_on>
 8008da2:	4682      	mov	sl, r0
 8008da4:	117b      	asrs	r3, r7, #5
 8008da6:	2101      	movs	r1, #1
 8008da8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008dac:	f007 071f 	and.w	r7, r7, #31
 8008db0:	fa01 f707 	lsl.w	r7, r1, r7
 8008db4:	421f      	tst	r7, r3
 8008db6:	4629      	mov	r1, r5
 8008db8:	4620      	mov	r0, r4
 8008dba:	bf18      	it	ne
 8008dbc:	f04a 0a02 	orrne.w	sl, sl, #2
 8008dc0:	1b76      	subs	r6, r6, r5
 8008dc2:	f7ff fdee 	bl	80089a2 <rshift>
 8008dc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dca:	2702      	movs	r7, #2
 8008dcc:	f1ba 0f00 	cmp.w	sl, #0
 8008dd0:	d048      	beq.n	8008e64 <__gethex+0x3f4>
 8008dd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d015      	beq.n	8008e06 <__gethex+0x396>
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d017      	beq.n	8008e0e <__gethex+0x39e>
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d109      	bne.n	8008df6 <__gethex+0x386>
 8008de2:	f01a 0f02 	tst.w	sl, #2
 8008de6:	d006      	beq.n	8008df6 <__gethex+0x386>
 8008de8:	f8d9 0000 	ldr.w	r0, [r9]
 8008dec:	ea4a 0a00 	orr.w	sl, sl, r0
 8008df0:	f01a 0f01 	tst.w	sl, #1
 8008df4:	d10e      	bne.n	8008e14 <__gethex+0x3a4>
 8008df6:	f047 0710 	orr.w	r7, r7, #16
 8008dfa:	e033      	b.n	8008e64 <__gethex+0x3f4>
 8008dfc:	f04f 0a01 	mov.w	sl, #1
 8008e00:	e7d0      	b.n	8008da4 <__gethex+0x334>
 8008e02:	2701      	movs	r7, #1
 8008e04:	e7e2      	b.n	8008dcc <__gethex+0x35c>
 8008e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e08:	f1c3 0301 	rsb	r3, r3, #1
 8008e0c:	9315      	str	r3, [sp, #84]	; 0x54
 8008e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <__gethex+0x386>
 8008e14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e18:	f104 0314 	add.w	r3, r4, #20
 8008e1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e24:	f04f 0c00 	mov.w	ip, #0
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e32:	d01c      	beq.n	8008e6e <__gethex+0x3fe>
 8008e34:	3201      	adds	r2, #1
 8008e36:	6002      	str	r2, [r0, #0]
 8008e38:	2f02      	cmp	r7, #2
 8008e3a:	f104 0314 	add.w	r3, r4, #20
 8008e3e:	d13f      	bne.n	8008ec0 <__gethex+0x450>
 8008e40:	f8d8 2000 	ldr.w	r2, [r8]
 8008e44:	3a01      	subs	r2, #1
 8008e46:	42b2      	cmp	r2, r6
 8008e48:	d10a      	bne.n	8008e60 <__gethex+0x3f0>
 8008e4a:	1171      	asrs	r1, r6, #5
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e52:	f006 061f 	and.w	r6, r6, #31
 8008e56:	fa02 f606 	lsl.w	r6, r2, r6
 8008e5a:	421e      	tst	r6, r3
 8008e5c:	bf18      	it	ne
 8008e5e:	4617      	movne	r7, r2
 8008e60:	f047 0720 	orr.w	r7, r7, #32
 8008e64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e66:	601c      	str	r4, [r3, #0]
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	601d      	str	r5, [r3, #0]
 8008e6c:	e695      	b.n	8008b9a <__gethex+0x12a>
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e74:	d8d8      	bhi.n	8008e28 <__gethex+0x3b8>
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	459b      	cmp	fp, r3
 8008e7a:	db19      	blt.n	8008eb0 <__gethex+0x440>
 8008e7c:	6861      	ldr	r1, [r4, #4]
 8008e7e:	ee18 0a10 	vmov	r0, s16
 8008e82:	3101      	adds	r1, #1
 8008e84:	f000 f9a4 	bl	80091d0 <_Balloc>
 8008e88:	4681      	mov	r9, r0
 8008e8a:	b918      	cbnz	r0, 8008e94 <__gethex+0x424>
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <__gethex+0x488>)
 8008e8e:	4602      	mov	r2, r0
 8008e90:	2184      	movs	r1, #132	; 0x84
 8008e92:	e6a8      	b.n	8008be6 <__gethex+0x176>
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	3202      	adds	r2, #2
 8008e98:	f104 010c 	add.w	r1, r4, #12
 8008e9c:	0092      	lsls	r2, r2, #2
 8008e9e:	300c      	adds	r0, #12
 8008ea0:	f000 f988 	bl	80091b4 <memcpy>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	ee18 0a10 	vmov	r0, s16
 8008eaa:	f000 f9d1 	bl	8009250 <_Bfree>
 8008eae:	464c      	mov	r4, r9
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008eb8:	6122      	str	r2, [r4, #16]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	615a      	str	r2, [r3, #20]
 8008ebe:	e7bb      	b.n	8008e38 <__gethex+0x3c8>
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	455a      	cmp	r2, fp
 8008ec4:	dd0b      	ble.n	8008ede <__gethex+0x46e>
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7ff fd6a 	bl	80089a2 <rshift>
 8008ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ed2:	3501      	adds	r5, #1
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	f6ff aed0 	blt.w	8008c7a <__gethex+0x20a>
 8008eda:	2701      	movs	r7, #1
 8008edc:	e7c0      	b.n	8008e60 <__gethex+0x3f0>
 8008ede:	f016 061f 	ands.w	r6, r6, #31
 8008ee2:	d0fa      	beq.n	8008eda <__gethex+0x46a>
 8008ee4:	4453      	add	r3, sl
 8008ee6:	f1c6 0620 	rsb	r6, r6, #32
 8008eea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008eee:	f000 fa61 	bl	80093b4 <__hi0bits>
 8008ef2:	42b0      	cmp	r0, r6
 8008ef4:	dbe7      	blt.n	8008ec6 <__gethex+0x456>
 8008ef6:	e7f0      	b.n	8008eda <__gethex+0x46a>
 8008ef8:	0800b510 	.word	0x0800b510

08008efc <L_shift>:
 8008efc:	f1c2 0208 	rsb	r2, r2, #8
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	b570      	push	{r4, r5, r6, lr}
 8008f04:	f1c2 0620 	rsb	r6, r2, #32
 8008f08:	6843      	ldr	r3, [r0, #4]
 8008f0a:	6804      	ldr	r4, [r0, #0]
 8008f0c:	fa03 f506 	lsl.w	r5, r3, r6
 8008f10:	432c      	orrs	r4, r5
 8008f12:	40d3      	lsrs	r3, r2
 8008f14:	6004      	str	r4, [r0, #0]
 8008f16:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f1a:	4288      	cmp	r0, r1
 8008f1c:	d3f4      	bcc.n	8008f08 <L_shift+0xc>
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}

08008f20 <__match>:
 8008f20:	b530      	push	{r4, r5, lr}
 8008f22:	6803      	ldr	r3, [r0, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f2a:	b914      	cbnz	r4, 8008f32 <__match+0x12>
 8008f2c:	6003      	str	r3, [r0, #0]
 8008f2e:	2001      	movs	r0, #1
 8008f30:	bd30      	pop	{r4, r5, pc}
 8008f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f3a:	2d19      	cmp	r5, #25
 8008f3c:	bf98      	it	ls
 8008f3e:	3220      	addls	r2, #32
 8008f40:	42a2      	cmp	r2, r4
 8008f42:	d0f0      	beq.n	8008f26 <__match+0x6>
 8008f44:	2000      	movs	r0, #0
 8008f46:	e7f3      	b.n	8008f30 <__match+0x10>

08008f48 <__hexnan>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	680b      	ldr	r3, [r1, #0]
 8008f4e:	115e      	asrs	r6, r3, #5
 8008f50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f54:	f013 031f 	ands.w	r3, r3, #31
 8008f58:	b087      	sub	sp, #28
 8008f5a:	bf18      	it	ne
 8008f5c:	3604      	addne	r6, #4
 8008f5e:	2500      	movs	r5, #0
 8008f60:	1f37      	subs	r7, r6, #4
 8008f62:	4690      	mov	r8, r2
 8008f64:	6802      	ldr	r2, [r0, #0]
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	4682      	mov	sl, r0
 8008f6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f6e:	46b9      	mov	r9, r7
 8008f70:	463c      	mov	r4, r7
 8008f72:	9502      	str	r5, [sp, #8]
 8008f74:	46ab      	mov	fp, r5
 8008f76:	7851      	ldrb	r1, [r2, #1]
 8008f78:	1c53      	adds	r3, r2, #1
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	b341      	cbz	r1, 8008fd0 <__hexnan+0x88>
 8008f7e:	4608      	mov	r0, r1
 8008f80:	9205      	str	r2, [sp, #20]
 8008f82:	9104      	str	r1, [sp, #16]
 8008f84:	f7ff fd5f 	bl	8008a46 <__hexdig_fun>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d14f      	bne.n	800902c <__hexnan+0xe4>
 8008f8c:	9904      	ldr	r1, [sp, #16]
 8008f8e:	9a05      	ldr	r2, [sp, #20]
 8008f90:	2920      	cmp	r1, #32
 8008f92:	d818      	bhi.n	8008fc6 <__hexnan+0x7e>
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	459b      	cmp	fp, r3
 8008f98:	dd13      	ble.n	8008fc2 <__hexnan+0x7a>
 8008f9a:	454c      	cmp	r4, r9
 8008f9c:	d206      	bcs.n	8008fac <__hexnan+0x64>
 8008f9e:	2d07      	cmp	r5, #7
 8008fa0:	dc04      	bgt.n	8008fac <__hexnan+0x64>
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7ff ffa8 	bl	8008efc <L_shift>
 8008fac:	4544      	cmp	r4, r8
 8008fae:	d950      	bls.n	8009052 <__hexnan+0x10a>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f1a4 0904 	sub.w	r9, r4, #4
 8008fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fba:	f8cd b008 	str.w	fp, [sp, #8]
 8008fbe:	464c      	mov	r4, r9
 8008fc0:	461d      	mov	r5, r3
 8008fc2:	9a03      	ldr	r2, [sp, #12]
 8008fc4:	e7d7      	b.n	8008f76 <__hexnan+0x2e>
 8008fc6:	2929      	cmp	r1, #41	; 0x29
 8008fc8:	d156      	bne.n	8009078 <__hexnan+0x130>
 8008fca:	3202      	adds	r2, #2
 8008fcc:	f8ca 2000 	str.w	r2, [sl]
 8008fd0:	f1bb 0f00 	cmp.w	fp, #0
 8008fd4:	d050      	beq.n	8009078 <__hexnan+0x130>
 8008fd6:	454c      	cmp	r4, r9
 8008fd8:	d206      	bcs.n	8008fe8 <__hexnan+0xa0>
 8008fda:	2d07      	cmp	r5, #7
 8008fdc:	dc04      	bgt.n	8008fe8 <__hexnan+0xa0>
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7ff ff8a 	bl	8008efc <L_shift>
 8008fe8:	4544      	cmp	r4, r8
 8008fea:	d934      	bls.n	8009056 <__hexnan+0x10e>
 8008fec:	f1a8 0204 	sub.w	r2, r8, #4
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ff6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ffa:	429f      	cmp	r7, r3
 8008ffc:	d2f9      	bcs.n	8008ff2 <__hexnan+0xaa>
 8008ffe:	1b3b      	subs	r3, r7, r4
 8009000:	f023 0303 	bic.w	r3, r3, #3
 8009004:	3304      	adds	r3, #4
 8009006:	3401      	adds	r4, #1
 8009008:	3e03      	subs	r6, #3
 800900a:	42b4      	cmp	r4, r6
 800900c:	bf88      	it	hi
 800900e:	2304      	movhi	r3, #4
 8009010:	4443      	add	r3, r8
 8009012:	2200      	movs	r2, #0
 8009014:	f843 2b04 	str.w	r2, [r3], #4
 8009018:	429f      	cmp	r7, r3
 800901a:	d2fb      	bcs.n	8009014 <__hexnan+0xcc>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	b91b      	cbnz	r3, 8009028 <__hexnan+0xe0>
 8009020:	4547      	cmp	r7, r8
 8009022:	d127      	bne.n	8009074 <__hexnan+0x12c>
 8009024:	2301      	movs	r3, #1
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	2005      	movs	r0, #5
 800902a:	e026      	b.n	800907a <__hexnan+0x132>
 800902c:	3501      	adds	r5, #1
 800902e:	2d08      	cmp	r5, #8
 8009030:	f10b 0b01 	add.w	fp, fp, #1
 8009034:	dd06      	ble.n	8009044 <__hexnan+0xfc>
 8009036:	4544      	cmp	r4, r8
 8009038:	d9c3      	bls.n	8008fc2 <__hexnan+0x7a>
 800903a:	2300      	movs	r3, #0
 800903c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009040:	2501      	movs	r5, #1
 8009042:	3c04      	subs	r4, #4
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	f000 000f 	and.w	r0, r0, #15
 800904a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800904e:	6022      	str	r2, [r4, #0]
 8009050:	e7b7      	b.n	8008fc2 <__hexnan+0x7a>
 8009052:	2508      	movs	r5, #8
 8009054:	e7b5      	b.n	8008fc2 <__hexnan+0x7a>
 8009056:	9b01      	ldr	r3, [sp, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0df      	beq.n	800901c <__hexnan+0xd4>
 800905c:	f04f 32ff 	mov.w	r2, #4294967295
 8009060:	f1c3 0320 	rsb	r3, r3, #32
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
 8009068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800906c:	401a      	ands	r2, r3
 800906e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009072:	e7d3      	b.n	800901c <__hexnan+0xd4>
 8009074:	3f04      	subs	r7, #4
 8009076:	e7d1      	b.n	800901c <__hexnan+0xd4>
 8009078:	2004      	movs	r0, #4
 800907a:	b007      	add	sp, #28
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009080 <_localeconv_r>:
 8009080:	4800      	ldr	r0, [pc, #0]	; (8009084 <_localeconv_r+0x4>)
 8009082:	4770      	bx	lr
 8009084:	20000194 	.word	0x20000194

08009088 <__retarget_lock_init_recursive>:
 8009088:	4770      	bx	lr

0800908a <__retarget_lock_acquire_recursive>:
 800908a:	4770      	bx	lr

0800908c <__retarget_lock_release_recursive>:
 800908c:	4770      	bx	lr
	...

08009090 <_lseek_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d07      	ldr	r5, [pc, #28]	; (80090b0 <_lseek_r+0x20>)
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f7f9 f8d8 	bl	8002254 <_lseek>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_lseek_r+0x1e>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_lseek_r+0x1e>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20000850 	.word	0x20000850

080090b4 <__swhatbuf_r>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	460e      	mov	r6, r1
 80090b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090bc:	2900      	cmp	r1, #0
 80090be:	b096      	sub	sp, #88	; 0x58
 80090c0:	4614      	mov	r4, r2
 80090c2:	461d      	mov	r5, r3
 80090c4:	da08      	bge.n	80090d8 <__swhatbuf_r+0x24>
 80090c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	061a      	lsls	r2, r3, #24
 80090d0:	d410      	bmi.n	80090f4 <__swhatbuf_r+0x40>
 80090d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d6:	e00e      	b.n	80090f6 <__swhatbuf_r+0x42>
 80090d8:	466a      	mov	r2, sp
 80090da:	f001 fda1 	bl	800ac20 <_fstat_r>
 80090de:	2800      	cmp	r0, #0
 80090e0:	dbf1      	blt.n	80090c6 <__swhatbuf_r+0x12>
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090ec:	425a      	negs	r2, r3
 80090ee:	415a      	adcs	r2, r3
 80090f0:	602a      	str	r2, [r5, #0]
 80090f2:	e7ee      	b.n	80090d2 <__swhatbuf_r+0x1e>
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	2000      	movs	r0, #0
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	b016      	add	sp, #88	; 0x58
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009100 <__smakebuf_r>:
 8009100:	898b      	ldrh	r3, [r1, #12]
 8009102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009104:	079d      	lsls	r5, r3, #30
 8009106:	4606      	mov	r6, r0
 8009108:	460c      	mov	r4, r1
 800910a:	d507      	bpl.n	800911c <__smakebuf_r+0x1c>
 800910c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	2301      	movs	r3, #1
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	b002      	add	sp, #8
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	ab01      	add	r3, sp, #4
 800911e:	466a      	mov	r2, sp
 8009120:	f7ff ffc8 	bl	80090b4 <__swhatbuf_r>
 8009124:	9900      	ldr	r1, [sp, #0]
 8009126:	4605      	mov	r5, r0
 8009128:	4630      	mov	r0, r6
 800912a:	f000 fd95 	bl	8009c58 <_malloc_r>
 800912e:	b948      	cbnz	r0, 8009144 <__smakebuf_r+0x44>
 8009130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009134:	059a      	lsls	r2, r3, #22
 8009136:	d4ef      	bmi.n	8009118 <__smakebuf_r+0x18>
 8009138:	f023 0303 	bic.w	r3, r3, #3
 800913c:	f043 0302 	orr.w	r3, r3, #2
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	e7e3      	b.n	800910c <__smakebuf_r+0xc>
 8009144:	4b0d      	ldr	r3, [pc, #52]	; (800917c <__smakebuf_r+0x7c>)
 8009146:	62b3      	str	r3, [r6, #40]	; 0x28
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	6020      	str	r0, [r4, #0]
 800914c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	9b00      	ldr	r3, [sp, #0]
 8009154:	6163      	str	r3, [r4, #20]
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	6120      	str	r0, [r4, #16]
 800915a:	b15b      	cbz	r3, 8009174 <__smakebuf_r+0x74>
 800915c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009160:	4630      	mov	r0, r6
 8009162:	f001 fd6f 	bl	800ac44 <_isatty_r>
 8009166:	b128      	cbz	r0, 8009174 <__smakebuf_r+0x74>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	89a0      	ldrh	r0, [r4, #12]
 8009176:	4305      	orrs	r5, r0
 8009178:	81a5      	strh	r5, [r4, #12]
 800917a:	e7cd      	b.n	8009118 <__smakebuf_r+0x18>
 800917c:	08008801 	.word	0x08008801

08009180 <malloc>:
 8009180:	4b02      	ldr	r3, [pc, #8]	; (800918c <malloc+0xc>)
 8009182:	4601      	mov	r1, r0
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	f000 bd67 	b.w	8009c58 <_malloc_r>
 800918a:	bf00      	nop
 800918c:	2000003c 	.word	0x2000003c

08009190 <__ascii_mbtowc>:
 8009190:	b082      	sub	sp, #8
 8009192:	b901      	cbnz	r1, 8009196 <__ascii_mbtowc+0x6>
 8009194:	a901      	add	r1, sp, #4
 8009196:	b142      	cbz	r2, 80091aa <__ascii_mbtowc+0x1a>
 8009198:	b14b      	cbz	r3, 80091ae <__ascii_mbtowc+0x1e>
 800919a:	7813      	ldrb	r3, [r2, #0]
 800919c:	600b      	str	r3, [r1, #0]
 800919e:	7812      	ldrb	r2, [r2, #0]
 80091a0:	1e10      	subs	r0, r2, #0
 80091a2:	bf18      	it	ne
 80091a4:	2001      	movne	r0, #1
 80091a6:	b002      	add	sp, #8
 80091a8:	4770      	bx	lr
 80091aa:	4610      	mov	r0, r2
 80091ac:	e7fb      	b.n	80091a6 <__ascii_mbtowc+0x16>
 80091ae:	f06f 0001 	mvn.w	r0, #1
 80091b2:	e7f8      	b.n	80091a6 <__ascii_mbtowc+0x16>

080091b4 <memcpy>:
 80091b4:	440a      	add	r2, r1
 80091b6:	4291      	cmp	r1, r2
 80091b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091bc:	d100      	bne.n	80091c0 <memcpy+0xc>
 80091be:	4770      	bx	lr
 80091c0:	b510      	push	{r4, lr}
 80091c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ca:	4291      	cmp	r1, r2
 80091cc:	d1f9      	bne.n	80091c2 <memcpy+0xe>
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <_Balloc>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Balloc+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7ff ffd0 	bl	8009180 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6260      	str	r0, [r4, #36]	; 0x24
 80091e4:	b920      	cbnz	r0, 80091f0 <_Balloc+0x20>
 80091e6:	4b18      	ldr	r3, [pc, #96]	; (8009248 <_Balloc+0x78>)
 80091e8:	4818      	ldr	r0, [pc, #96]	; (800924c <_Balloc+0x7c>)
 80091ea:	2166      	movs	r1, #102	; 0x66
 80091ec:	f001 fce8 	bl	800abc0 <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091fa:	68f3      	ldr	r3, [r6, #12]
 80091fc:	b183      	cbz	r3, 8009220 <_Balloc+0x50>
 80091fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009206:	b9b8      	cbnz	r0, 8009238 <_Balloc+0x68>
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f605 	lsl.w	r6, r1, r5
 800920e:	1d72      	adds	r2, r6, #5
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fc9d 	bl	8009b52 <_calloc_r>
 8009218:	b160      	cbz	r0, 8009234 <_Balloc+0x64>
 800921a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800921e:	e00e      	b.n	800923e <_Balloc+0x6e>
 8009220:	2221      	movs	r2, #33	; 0x21
 8009222:	2104      	movs	r1, #4
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fc94 	bl	8009b52 <_calloc_r>
 800922a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922c:	60f0      	str	r0, [r6, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e4      	bne.n	80091fe <_Balloc+0x2e>
 8009234:	2000      	movs	r0, #0
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	6802      	ldr	r2, [r0, #0]
 800923a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800923e:	2300      	movs	r3, #0
 8009240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009244:	e7f7      	b.n	8009236 <_Balloc+0x66>
 8009246:	bf00      	nop
 8009248:	0800b49e 	.word	0x0800b49e
 800924c:	0800b600 	.word	0x0800b600

08009250 <_Bfree>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b976      	cbnz	r6, 8009278 <_Bfree+0x28>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ff90 	bl	8009180 <malloc>
 8009260:	4602      	mov	r2, r0
 8009262:	6268      	str	r0, [r5, #36]	; 0x24
 8009264:	b920      	cbnz	r0, 8009270 <_Bfree+0x20>
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <_Bfree+0x3c>)
 8009268:	4809      	ldr	r0, [pc, #36]	; (8009290 <_Bfree+0x40>)
 800926a:	218a      	movs	r1, #138	; 0x8a
 800926c:	f001 fca8 	bl	800abc0 <__assert_func>
 8009270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009274:	6006      	str	r6, [r0, #0]
 8009276:	60c6      	str	r6, [r0, #12]
 8009278:	b13c      	cbz	r4, 800928a <_Bfree+0x3a>
 800927a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800927c:	6862      	ldr	r2, [r4, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009284:	6021      	str	r1, [r4, #0]
 8009286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	0800b49e 	.word	0x0800b49e
 8009290:	0800b600 	.word	0x0800b600

08009294 <__multadd>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	690d      	ldr	r5, [r1, #16]
 800929a:	4607      	mov	r7, r0
 800929c:	460c      	mov	r4, r1
 800929e:	461e      	mov	r6, r3
 80092a0:	f101 0c14 	add.w	ip, r1, #20
 80092a4:	2000      	movs	r0, #0
 80092a6:	f8dc 3000 	ldr.w	r3, [ip]
 80092aa:	b299      	uxth	r1, r3
 80092ac:	fb02 6101 	mla	r1, r2, r1, r6
 80092b0:	0c1e      	lsrs	r6, r3, #16
 80092b2:	0c0b      	lsrs	r3, r1, #16
 80092b4:	fb02 3306 	mla	r3, r2, r6, r3
 80092b8:	b289      	uxth	r1, r1
 80092ba:	3001      	adds	r0, #1
 80092bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092c0:	4285      	cmp	r5, r0
 80092c2:	f84c 1b04 	str.w	r1, [ip], #4
 80092c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ca:	dcec      	bgt.n	80092a6 <__multadd+0x12>
 80092cc:	b30e      	cbz	r6, 8009312 <__multadd+0x7e>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc19      	bgt.n	8009308 <__multadd+0x74>
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4638      	mov	r0, r7
 80092d8:	3101      	adds	r1, #1
 80092da:	f7ff ff79 	bl	80091d0 <_Balloc>
 80092de:	4680      	mov	r8, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__multadd+0x5a>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <__multadd+0x84>)
 80092e6:	480d      	ldr	r0, [pc, #52]	; (800931c <__multadd+0x88>)
 80092e8:	21b5      	movs	r1, #181	; 0xb5
 80092ea:	f001 fc69 	bl	800abc0 <__assert_func>
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	3202      	adds	r2, #2
 80092f2:	f104 010c 	add.w	r1, r4, #12
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	300c      	adds	r0, #12
 80092fa:	f7ff ff5b 	bl	80091b4 <memcpy>
 80092fe:	4621      	mov	r1, r4
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff ffa5 	bl	8009250 <_Bfree>
 8009306:	4644      	mov	r4, r8
 8009308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800930c:	3501      	adds	r5, #1
 800930e:	615e      	str	r6, [r3, #20]
 8009310:	6125      	str	r5, [r4, #16]
 8009312:	4620      	mov	r0, r4
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	0800b510 	.word	0x0800b510
 800931c:	0800b600 	.word	0x0800b600

08009320 <__s2b>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	4615      	mov	r5, r2
 8009328:	461f      	mov	r7, r3
 800932a:	2209      	movs	r2, #9
 800932c:	3308      	adds	r3, #8
 800932e:	4606      	mov	r6, r0
 8009330:	fb93 f3f2 	sdiv	r3, r3, r2
 8009334:	2100      	movs	r1, #0
 8009336:	2201      	movs	r2, #1
 8009338:	429a      	cmp	r2, r3
 800933a:	db09      	blt.n	8009350 <__s2b+0x30>
 800933c:	4630      	mov	r0, r6
 800933e:	f7ff ff47 	bl	80091d0 <_Balloc>
 8009342:	b940      	cbnz	r0, 8009356 <__s2b+0x36>
 8009344:	4602      	mov	r2, r0
 8009346:	4b19      	ldr	r3, [pc, #100]	; (80093ac <__s2b+0x8c>)
 8009348:	4819      	ldr	r0, [pc, #100]	; (80093b0 <__s2b+0x90>)
 800934a:	21ce      	movs	r1, #206	; 0xce
 800934c:	f001 fc38 	bl	800abc0 <__assert_func>
 8009350:	0052      	lsls	r2, r2, #1
 8009352:	3101      	adds	r1, #1
 8009354:	e7f0      	b.n	8009338 <__s2b+0x18>
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	6143      	str	r3, [r0, #20]
 800935a:	2d09      	cmp	r5, #9
 800935c:	f04f 0301 	mov.w	r3, #1
 8009360:	6103      	str	r3, [r0, #16]
 8009362:	dd16      	ble.n	8009392 <__s2b+0x72>
 8009364:	f104 0909 	add.w	r9, r4, #9
 8009368:	46c8      	mov	r8, r9
 800936a:	442c      	add	r4, r5
 800936c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009370:	4601      	mov	r1, r0
 8009372:	3b30      	subs	r3, #48	; 0x30
 8009374:	220a      	movs	r2, #10
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff ff8c 	bl	8009294 <__multadd>
 800937c:	45a0      	cmp	r8, r4
 800937e:	d1f5      	bne.n	800936c <__s2b+0x4c>
 8009380:	f1a5 0408 	sub.w	r4, r5, #8
 8009384:	444c      	add	r4, r9
 8009386:	1b2d      	subs	r5, r5, r4
 8009388:	1963      	adds	r3, r4, r5
 800938a:	42bb      	cmp	r3, r7
 800938c:	db04      	blt.n	8009398 <__s2b+0x78>
 800938e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009392:	340a      	adds	r4, #10
 8009394:	2509      	movs	r5, #9
 8009396:	e7f6      	b.n	8009386 <__s2b+0x66>
 8009398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800939c:	4601      	mov	r1, r0
 800939e:	3b30      	subs	r3, #48	; 0x30
 80093a0:	220a      	movs	r2, #10
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ff76 	bl	8009294 <__multadd>
 80093a8:	e7ee      	b.n	8009388 <__s2b+0x68>
 80093aa:	bf00      	nop
 80093ac:	0800b510 	.word	0x0800b510
 80093b0:	0800b600 	.word	0x0800b600

080093b4 <__hi0bits>:
 80093b4:	0c03      	lsrs	r3, r0, #16
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	b9d3      	cbnz	r3, 80093f0 <__hi0bits+0x3c>
 80093ba:	0400      	lsls	r0, r0, #16
 80093bc:	2310      	movs	r3, #16
 80093be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093c2:	bf04      	itt	eq
 80093c4:	0200      	lsleq	r0, r0, #8
 80093c6:	3308      	addeq	r3, #8
 80093c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093cc:	bf04      	itt	eq
 80093ce:	0100      	lsleq	r0, r0, #4
 80093d0:	3304      	addeq	r3, #4
 80093d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093d6:	bf04      	itt	eq
 80093d8:	0080      	lsleq	r0, r0, #2
 80093da:	3302      	addeq	r3, #2
 80093dc:	2800      	cmp	r0, #0
 80093de:	db05      	blt.n	80093ec <__hi0bits+0x38>
 80093e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093e4:	f103 0301 	add.w	r3, r3, #1
 80093e8:	bf08      	it	eq
 80093ea:	2320      	moveq	r3, #32
 80093ec:	4618      	mov	r0, r3
 80093ee:	4770      	bx	lr
 80093f0:	2300      	movs	r3, #0
 80093f2:	e7e4      	b.n	80093be <__hi0bits+0xa>

080093f4 <__lo0bits>:
 80093f4:	6803      	ldr	r3, [r0, #0]
 80093f6:	f013 0207 	ands.w	r2, r3, #7
 80093fa:	4601      	mov	r1, r0
 80093fc:	d00b      	beq.n	8009416 <__lo0bits+0x22>
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d423      	bmi.n	800944a <__lo0bits+0x56>
 8009402:	0798      	lsls	r0, r3, #30
 8009404:	bf49      	itett	mi
 8009406:	085b      	lsrmi	r3, r3, #1
 8009408:	089b      	lsrpl	r3, r3, #2
 800940a:	2001      	movmi	r0, #1
 800940c:	600b      	strmi	r3, [r1, #0]
 800940e:	bf5c      	itt	pl
 8009410:	600b      	strpl	r3, [r1, #0]
 8009412:	2002      	movpl	r0, #2
 8009414:	4770      	bx	lr
 8009416:	b298      	uxth	r0, r3
 8009418:	b9a8      	cbnz	r0, 8009446 <__lo0bits+0x52>
 800941a:	0c1b      	lsrs	r3, r3, #16
 800941c:	2010      	movs	r0, #16
 800941e:	b2da      	uxtb	r2, r3
 8009420:	b90a      	cbnz	r2, 8009426 <__lo0bits+0x32>
 8009422:	3008      	adds	r0, #8
 8009424:	0a1b      	lsrs	r3, r3, #8
 8009426:	071a      	lsls	r2, r3, #28
 8009428:	bf04      	itt	eq
 800942a:	091b      	lsreq	r3, r3, #4
 800942c:	3004      	addeq	r0, #4
 800942e:	079a      	lsls	r2, r3, #30
 8009430:	bf04      	itt	eq
 8009432:	089b      	lsreq	r3, r3, #2
 8009434:	3002      	addeq	r0, #2
 8009436:	07da      	lsls	r2, r3, #31
 8009438:	d403      	bmi.n	8009442 <__lo0bits+0x4e>
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	f100 0001 	add.w	r0, r0, #1
 8009440:	d005      	beq.n	800944e <__lo0bits+0x5a>
 8009442:	600b      	str	r3, [r1, #0]
 8009444:	4770      	bx	lr
 8009446:	4610      	mov	r0, r2
 8009448:	e7e9      	b.n	800941e <__lo0bits+0x2a>
 800944a:	2000      	movs	r0, #0
 800944c:	4770      	bx	lr
 800944e:	2020      	movs	r0, #32
 8009450:	4770      	bx	lr
	...

08009454 <__i2b>:
 8009454:	b510      	push	{r4, lr}
 8009456:	460c      	mov	r4, r1
 8009458:	2101      	movs	r1, #1
 800945a:	f7ff feb9 	bl	80091d0 <_Balloc>
 800945e:	4602      	mov	r2, r0
 8009460:	b928      	cbnz	r0, 800946e <__i2b+0x1a>
 8009462:	4b05      	ldr	r3, [pc, #20]	; (8009478 <__i2b+0x24>)
 8009464:	4805      	ldr	r0, [pc, #20]	; (800947c <__i2b+0x28>)
 8009466:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800946a:	f001 fba9 	bl	800abc0 <__assert_func>
 800946e:	2301      	movs	r3, #1
 8009470:	6144      	str	r4, [r0, #20]
 8009472:	6103      	str	r3, [r0, #16]
 8009474:	bd10      	pop	{r4, pc}
 8009476:	bf00      	nop
 8009478:	0800b510 	.word	0x0800b510
 800947c:	0800b600 	.word	0x0800b600

08009480 <__multiply>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	4691      	mov	r9, r2
 8009486:	690a      	ldr	r2, [r1, #16]
 8009488:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	bfb8      	it	lt
 8009490:	460b      	movlt	r3, r1
 8009492:	460c      	mov	r4, r1
 8009494:	bfbc      	itt	lt
 8009496:	464c      	movlt	r4, r9
 8009498:	4699      	movlt	r9, r3
 800949a:	6927      	ldr	r7, [r4, #16]
 800949c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	6861      	ldr	r1, [r4, #4]
 80094a4:	eb07 060a 	add.w	r6, r7, sl
 80094a8:	42b3      	cmp	r3, r6
 80094aa:	b085      	sub	sp, #20
 80094ac:	bfb8      	it	lt
 80094ae:	3101      	addlt	r1, #1
 80094b0:	f7ff fe8e 	bl	80091d0 <_Balloc>
 80094b4:	b930      	cbnz	r0, 80094c4 <__multiply+0x44>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b44      	ldr	r3, [pc, #272]	; (80095cc <__multiply+0x14c>)
 80094ba:	4845      	ldr	r0, [pc, #276]	; (80095d0 <__multiply+0x150>)
 80094bc:	f240 115d 	movw	r1, #349	; 0x15d
 80094c0:	f001 fb7e 	bl	800abc0 <__assert_func>
 80094c4:	f100 0514 	add.w	r5, r0, #20
 80094c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094cc:	462b      	mov	r3, r5
 80094ce:	2200      	movs	r2, #0
 80094d0:	4543      	cmp	r3, r8
 80094d2:	d321      	bcc.n	8009518 <__multiply+0x98>
 80094d4:	f104 0314 	add.w	r3, r4, #20
 80094d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094dc:	f109 0314 	add.w	r3, r9, #20
 80094e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094e4:	9202      	str	r2, [sp, #8]
 80094e6:	1b3a      	subs	r2, r7, r4
 80094e8:	3a15      	subs	r2, #21
 80094ea:	f022 0203 	bic.w	r2, r2, #3
 80094ee:	3204      	adds	r2, #4
 80094f0:	f104 0115 	add.w	r1, r4, #21
 80094f4:	428f      	cmp	r7, r1
 80094f6:	bf38      	it	cc
 80094f8:	2204      	movcc	r2, #4
 80094fa:	9201      	str	r2, [sp, #4]
 80094fc:	9a02      	ldr	r2, [sp, #8]
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	429a      	cmp	r2, r3
 8009502:	d80c      	bhi.n	800951e <__multiply+0x9e>
 8009504:	2e00      	cmp	r6, #0
 8009506:	dd03      	ble.n	8009510 <__multiply+0x90>
 8009508:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800950c:	2b00      	cmp	r3, #0
 800950e:	d05a      	beq.n	80095c6 <__multiply+0x146>
 8009510:	6106      	str	r6, [r0, #16]
 8009512:	b005      	add	sp, #20
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009518:	f843 2b04 	str.w	r2, [r3], #4
 800951c:	e7d8      	b.n	80094d0 <__multiply+0x50>
 800951e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009522:	f1ba 0f00 	cmp.w	sl, #0
 8009526:	d024      	beq.n	8009572 <__multiply+0xf2>
 8009528:	f104 0e14 	add.w	lr, r4, #20
 800952c:	46a9      	mov	r9, r5
 800952e:	f04f 0c00 	mov.w	ip, #0
 8009532:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009536:	f8d9 1000 	ldr.w	r1, [r9]
 800953a:	fa1f fb82 	uxth.w	fp, r2
 800953e:	b289      	uxth	r1, r1
 8009540:	fb0a 110b 	mla	r1, sl, fp, r1
 8009544:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009548:	f8d9 2000 	ldr.w	r2, [r9]
 800954c:	4461      	add	r1, ip
 800954e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009552:	fb0a c20b 	mla	r2, sl, fp, ip
 8009556:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800955a:	b289      	uxth	r1, r1
 800955c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009560:	4577      	cmp	r7, lr
 8009562:	f849 1b04 	str.w	r1, [r9], #4
 8009566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800956a:	d8e2      	bhi.n	8009532 <__multiply+0xb2>
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	f845 c002 	str.w	ip, [r5, r2]
 8009572:	9a03      	ldr	r2, [sp, #12]
 8009574:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009578:	3304      	adds	r3, #4
 800957a:	f1b9 0f00 	cmp.w	r9, #0
 800957e:	d020      	beq.n	80095c2 <__multiply+0x142>
 8009580:	6829      	ldr	r1, [r5, #0]
 8009582:	f104 0c14 	add.w	ip, r4, #20
 8009586:	46ae      	mov	lr, r5
 8009588:	f04f 0a00 	mov.w	sl, #0
 800958c:	f8bc b000 	ldrh.w	fp, [ip]
 8009590:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009594:	fb09 220b 	mla	r2, r9, fp, r2
 8009598:	4492      	add	sl, r2
 800959a:	b289      	uxth	r1, r1
 800959c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095a0:	f84e 1b04 	str.w	r1, [lr], #4
 80095a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095a8:	f8be 1000 	ldrh.w	r1, [lr]
 80095ac:	0c12      	lsrs	r2, r2, #16
 80095ae:	fb09 1102 	mla	r1, r9, r2, r1
 80095b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095b6:	4567      	cmp	r7, ip
 80095b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095bc:	d8e6      	bhi.n	800958c <__multiply+0x10c>
 80095be:	9a01      	ldr	r2, [sp, #4]
 80095c0:	50a9      	str	r1, [r5, r2]
 80095c2:	3504      	adds	r5, #4
 80095c4:	e79a      	b.n	80094fc <__multiply+0x7c>
 80095c6:	3e01      	subs	r6, #1
 80095c8:	e79c      	b.n	8009504 <__multiply+0x84>
 80095ca:	bf00      	nop
 80095cc:	0800b510 	.word	0x0800b510
 80095d0:	0800b600 	.word	0x0800b600

080095d4 <__pow5mult>:
 80095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4615      	mov	r5, r2
 80095da:	f012 0203 	ands.w	r2, r2, #3
 80095de:	4606      	mov	r6, r0
 80095e0:	460f      	mov	r7, r1
 80095e2:	d007      	beq.n	80095f4 <__pow5mult+0x20>
 80095e4:	4c25      	ldr	r4, [pc, #148]	; (800967c <__pow5mult+0xa8>)
 80095e6:	3a01      	subs	r2, #1
 80095e8:	2300      	movs	r3, #0
 80095ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ee:	f7ff fe51 	bl	8009294 <__multadd>
 80095f2:	4607      	mov	r7, r0
 80095f4:	10ad      	asrs	r5, r5, #2
 80095f6:	d03d      	beq.n	8009674 <__pow5mult+0xa0>
 80095f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095fa:	b97c      	cbnz	r4, 800961c <__pow5mult+0x48>
 80095fc:	2010      	movs	r0, #16
 80095fe:	f7ff fdbf 	bl	8009180 <malloc>
 8009602:	4602      	mov	r2, r0
 8009604:	6270      	str	r0, [r6, #36]	; 0x24
 8009606:	b928      	cbnz	r0, 8009614 <__pow5mult+0x40>
 8009608:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <__pow5mult+0xac>)
 800960a:	481e      	ldr	r0, [pc, #120]	; (8009684 <__pow5mult+0xb0>)
 800960c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009610:	f001 fad6 	bl	800abc0 <__assert_func>
 8009614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009618:	6004      	str	r4, [r0, #0]
 800961a:	60c4      	str	r4, [r0, #12]
 800961c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009624:	b94c      	cbnz	r4, 800963a <__pow5mult+0x66>
 8009626:	f240 2171 	movw	r1, #625	; 0x271
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ff12 	bl	8009454 <__i2b>
 8009630:	2300      	movs	r3, #0
 8009632:	f8c8 0008 	str.w	r0, [r8, #8]
 8009636:	4604      	mov	r4, r0
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	f04f 0900 	mov.w	r9, #0
 800963e:	07eb      	lsls	r3, r5, #31
 8009640:	d50a      	bpl.n	8009658 <__pow5mult+0x84>
 8009642:	4639      	mov	r1, r7
 8009644:	4622      	mov	r2, r4
 8009646:	4630      	mov	r0, r6
 8009648:	f7ff ff1a 	bl	8009480 <__multiply>
 800964c:	4639      	mov	r1, r7
 800964e:	4680      	mov	r8, r0
 8009650:	4630      	mov	r0, r6
 8009652:	f7ff fdfd 	bl	8009250 <_Bfree>
 8009656:	4647      	mov	r7, r8
 8009658:	106d      	asrs	r5, r5, #1
 800965a:	d00b      	beq.n	8009674 <__pow5mult+0xa0>
 800965c:	6820      	ldr	r0, [r4, #0]
 800965e:	b938      	cbnz	r0, 8009670 <__pow5mult+0x9c>
 8009660:	4622      	mov	r2, r4
 8009662:	4621      	mov	r1, r4
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff ff0b 	bl	8009480 <__multiply>
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f8c0 9000 	str.w	r9, [r0]
 8009670:	4604      	mov	r4, r0
 8009672:	e7e4      	b.n	800963e <__pow5mult+0x6a>
 8009674:	4638      	mov	r0, r7
 8009676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967a:	bf00      	nop
 800967c:	0800b750 	.word	0x0800b750
 8009680:	0800b49e 	.word	0x0800b49e
 8009684:	0800b600 	.word	0x0800b600

08009688 <__lshift>:
 8009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	460c      	mov	r4, r1
 800968e:	6849      	ldr	r1, [r1, #4]
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009696:	68a3      	ldr	r3, [r4, #8]
 8009698:	4607      	mov	r7, r0
 800969a:	4691      	mov	r9, r2
 800969c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096a0:	f108 0601 	add.w	r6, r8, #1
 80096a4:	42b3      	cmp	r3, r6
 80096a6:	db0b      	blt.n	80096c0 <__lshift+0x38>
 80096a8:	4638      	mov	r0, r7
 80096aa:	f7ff fd91 	bl	80091d0 <_Balloc>
 80096ae:	4605      	mov	r5, r0
 80096b0:	b948      	cbnz	r0, 80096c6 <__lshift+0x3e>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b2a      	ldr	r3, [pc, #168]	; (8009760 <__lshift+0xd8>)
 80096b6:	482b      	ldr	r0, [pc, #172]	; (8009764 <__lshift+0xdc>)
 80096b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096bc:	f001 fa80 	bl	800abc0 <__assert_func>
 80096c0:	3101      	adds	r1, #1
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	e7ee      	b.n	80096a4 <__lshift+0x1c>
 80096c6:	2300      	movs	r3, #0
 80096c8:	f100 0114 	add.w	r1, r0, #20
 80096cc:	f100 0210 	add.w	r2, r0, #16
 80096d0:	4618      	mov	r0, r3
 80096d2:	4553      	cmp	r3, sl
 80096d4:	db37      	blt.n	8009746 <__lshift+0xbe>
 80096d6:	6920      	ldr	r0, [r4, #16]
 80096d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096dc:	f104 0314 	add.w	r3, r4, #20
 80096e0:	f019 091f 	ands.w	r9, r9, #31
 80096e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80096ec:	d02f      	beq.n	800974e <__lshift+0xc6>
 80096ee:	f1c9 0e20 	rsb	lr, r9, #32
 80096f2:	468a      	mov	sl, r1
 80096f4:	f04f 0c00 	mov.w	ip, #0
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	fa02 f209 	lsl.w	r2, r2, r9
 80096fe:	ea42 020c 	orr.w	r2, r2, ip
 8009702:	f84a 2b04 	str.w	r2, [sl], #4
 8009706:	f853 2b04 	ldr.w	r2, [r3], #4
 800970a:	4298      	cmp	r0, r3
 800970c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009710:	d8f2      	bhi.n	80096f8 <__lshift+0x70>
 8009712:	1b03      	subs	r3, r0, r4
 8009714:	3b15      	subs	r3, #21
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	3304      	adds	r3, #4
 800971c:	f104 0215 	add.w	r2, r4, #21
 8009720:	4290      	cmp	r0, r2
 8009722:	bf38      	it	cc
 8009724:	2304      	movcc	r3, #4
 8009726:	f841 c003 	str.w	ip, [r1, r3]
 800972a:	f1bc 0f00 	cmp.w	ip, #0
 800972e:	d001      	beq.n	8009734 <__lshift+0xac>
 8009730:	f108 0602 	add.w	r6, r8, #2
 8009734:	3e01      	subs	r6, #1
 8009736:	4638      	mov	r0, r7
 8009738:	612e      	str	r6, [r5, #16]
 800973a:	4621      	mov	r1, r4
 800973c:	f7ff fd88 	bl	8009250 <_Bfree>
 8009740:	4628      	mov	r0, r5
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	f842 0f04 	str.w	r0, [r2, #4]!
 800974a:	3301      	adds	r3, #1
 800974c:	e7c1      	b.n	80096d2 <__lshift+0x4a>
 800974e:	3904      	subs	r1, #4
 8009750:	f853 2b04 	ldr.w	r2, [r3], #4
 8009754:	f841 2f04 	str.w	r2, [r1, #4]!
 8009758:	4298      	cmp	r0, r3
 800975a:	d8f9      	bhi.n	8009750 <__lshift+0xc8>
 800975c:	e7ea      	b.n	8009734 <__lshift+0xac>
 800975e:	bf00      	nop
 8009760:	0800b510 	.word	0x0800b510
 8009764:	0800b600 	.word	0x0800b600

08009768 <__mcmp>:
 8009768:	b530      	push	{r4, r5, lr}
 800976a:	6902      	ldr	r2, [r0, #16]
 800976c:	690c      	ldr	r4, [r1, #16]
 800976e:	1b12      	subs	r2, r2, r4
 8009770:	d10e      	bne.n	8009790 <__mcmp+0x28>
 8009772:	f100 0314 	add.w	r3, r0, #20
 8009776:	3114      	adds	r1, #20
 8009778:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800977c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009780:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009784:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009788:	42a5      	cmp	r5, r4
 800978a:	d003      	beq.n	8009794 <__mcmp+0x2c>
 800978c:	d305      	bcc.n	800979a <__mcmp+0x32>
 800978e:	2201      	movs	r2, #1
 8009790:	4610      	mov	r0, r2
 8009792:	bd30      	pop	{r4, r5, pc}
 8009794:	4283      	cmp	r3, r0
 8009796:	d3f3      	bcc.n	8009780 <__mcmp+0x18>
 8009798:	e7fa      	b.n	8009790 <__mcmp+0x28>
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	e7f7      	b.n	8009790 <__mcmp+0x28>

080097a0 <__mdiff>:
 80097a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	4606      	mov	r6, r0
 80097a8:	4611      	mov	r1, r2
 80097aa:	4620      	mov	r0, r4
 80097ac:	4690      	mov	r8, r2
 80097ae:	f7ff ffdb 	bl	8009768 <__mcmp>
 80097b2:	1e05      	subs	r5, r0, #0
 80097b4:	d110      	bne.n	80097d8 <__mdiff+0x38>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7ff fd09 	bl	80091d0 <_Balloc>
 80097be:	b930      	cbnz	r0, 80097ce <__mdiff+0x2e>
 80097c0:	4b3a      	ldr	r3, [pc, #232]	; (80098ac <__mdiff+0x10c>)
 80097c2:	4602      	mov	r2, r0
 80097c4:	f240 2132 	movw	r1, #562	; 0x232
 80097c8:	4839      	ldr	r0, [pc, #228]	; (80098b0 <__mdiff+0x110>)
 80097ca:	f001 f9f9 	bl	800abc0 <__assert_func>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	bfa4      	itt	ge
 80097da:	4643      	movge	r3, r8
 80097dc:	46a0      	movge	r8, r4
 80097de:	4630      	mov	r0, r6
 80097e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097e4:	bfa6      	itte	ge
 80097e6:	461c      	movge	r4, r3
 80097e8:	2500      	movge	r5, #0
 80097ea:	2501      	movlt	r5, #1
 80097ec:	f7ff fcf0 	bl	80091d0 <_Balloc>
 80097f0:	b920      	cbnz	r0, 80097fc <__mdiff+0x5c>
 80097f2:	4b2e      	ldr	r3, [pc, #184]	; (80098ac <__mdiff+0x10c>)
 80097f4:	4602      	mov	r2, r0
 80097f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80097fa:	e7e5      	b.n	80097c8 <__mdiff+0x28>
 80097fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009800:	6926      	ldr	r6, [r4, #16]
 8009802:	60c5      	str	r5, [r0, #12]
 8009804:	f104 0914 	add.w	r9, r4, #20
 8009808:	f108 0514 	add.w	r5, r8, #20
 800980c:	f100 0e14 	add.w	lr, r0, #20
 8009810:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009818:	f108 0210 	add.w	r2, r8, #16
 800981c:	46f2      	mov	sl, lr
 800981e:	2100      	movs	r1, #0
 8009820:	f859 3b04 	ldr.w	r3, [r9], #4
 8009824:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009828:	fa1f f883 	uxth.w	r8, r3
 800982c:	fa11 f18b 	uxtah	r1, r1, fp
 8009830:	0c1b      	lsrs	r3, r3, #16
 8009832:	eba1 0808 	sub.w	r8, r1, r8
 8009836:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800983a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800983e:	fa1f f888 	uxth.w	r8, r8
 8009842:	1419      	asrs	r1, r3, #16
 8009844:	454e      	cmp	r6, r9
 8009846:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800984a:	f84a 3b04 	str.w	r3, [sl], #4
 800984e:	d8e7      	bhi.n	8009820 <__mdiff+0x80>
 8009850:	1b33      	subs	r3, r6, r4
 8009852:	3b15      	subs	r3, #21
 8009854:	f023 0303 	bic.w	r3, r3, #3
 8009858:	3304      	adds	r3, #4
 800985a:	3415      	adds	r4, #21
 800985c:	42a6      	cmp	r6, r4
 800985e:	bf38      	it	cc
 8009860:	2304      	movcc	r3, #4
 8009862:	441d      	add	r5, r3
 8009864:	4473      	add	r3, lr
 8009866:	469e      	mov	lr, r3
 8009868:	462e      	mov	r6, r5
 800986a:	4566      	cmp	r6, ip
 800986c:	d30e      	bcc.n	800988c <__mdiff+0xec>
 800986e:	f10c 0203 	add.w	r2, ip, #3
 8009872:	1b52      	subs	r2, r2, r5
 8009874:	f022 0203 	bic.w	r2, r2, #3
 8009878:	3d03      	subs	r5, #3
 800987a:	45ac      	cmp	ip, r5
 800987c:	bf38      	it	cc
 800987e:	2200      	movcc	r2, #0
 8009880:	441a      	add	r2, r3
 8009882:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009886:	b17b      	cbz	r3, 80098a8 <__mdiff+0x108>
 8009888:	6107      	str	r7, [r0, #16]
 800988a:	e7a3      	b.n	80097d4 <__mdiff+0x34>
 800988c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009890:	fa11 f288 	uxtah	r2, r1, r8
 8009894:	1414      	asrs	r4, r2, #16
 8009896:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800989a:	b292      	uxth	r2, r2
 800989c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098a0:	f84e 2b04 	str.w	r2, [lr], #4
 80098a4:	1421      	asrs	r1, r4, #16
 80098a6:	e7e0      	b.n	800986a <__mdiff+0xca>
 80098a8:	3f01      	subs	r7, #1
 80098aa:	e7ea      	b.n	8009882 <__mdiff+0xe2>
 80098ac:	0800b510 	.word	0x0800b510
 80098b0:	0800b600 	.word	0x0800b600

080098b4 <__ulp>:
 80098b4:	b082      	sub	sp, #8
 80098b6:	ed8d 0b00 	vstr	d0, [sp]
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	4912      	ldr	r1, [pc, #72]	; (8009908 <__ulp+0x54>)
 80098be:	4019      	ands	r1, r3
 80098c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80098c4:	2900      	cmp	r1, #0
 80098c6:	dd05      	ble.n	80098d4 <__ulp+0x20>
 80098c8:	2200      	movs	r2, #0
 80098ca:	460b      	mov	r3, r1
 80098cc:	ec43 2b10 	vmov	d0, r2, r3
 80098d0:	b002      	add	sp, #8
 80098d2:	4770      	bx	lr
 80098d4:	4249      	negs	r1, r1
 80098d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80098da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	f04f 0300 	mov.w	r3, #0
 80098e6:	da04      	bge.n	80098f2 <__ulp+0x3e>
 80098e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80098ec:	fa41 f300 	asr.w	r3, r1, r0
 80098f0:	e7ec      	b.n	80098cc <__ulp+0x18>
 80098f2:	f1a0 0114 	sub.w	r1, r0, #20
 80098f6:	291e      	cmp	r1, #30
 80098f8:	bfda      	itte	le
 80098fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80098fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8009902:	2101      	movgt	r1, #1
 8009904:	460a      	mov	r2, r1
 8009906:	e7e1      	b.n	80098cc <__ulp+0x18>
 8009908:	7ff00000 	.word	0x7ff00000

0800990c <__b2d>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	6905      	ldr	r5, [r0, #16]
 8009910:	f100 0714 	add.w	r7, r0, #20
 8009914:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009918:	1f2e      	subs	r6, r5, #4
 800991a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800991e:	4620      	mov	r0, r4
 8009920:	f7ff fd48 	bl	80093b4 <__hi0bits>
 8009924:	f1c0 0320 	rsb	r3, r0, #32
 8009928:	280a      	cmp	r0, #10
 800992a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80099a8 <__b2d+0x9c>
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	dc14      	bgt.n	800995c <__b2d+0x50>
 8009932:	f1c0 0e0b 	rsb	lr, r0, #11
 8009936:	fa24 f10e 	lsr.w	r1, r4, lr
 800993a:	42b7      	cmp	r7, r6
 800993c:	ea41 030c 	orr.w	r3, r1, ip
 8009940:	bf34      	ite	cc
 8009942:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009946:	2100      	movcs	r1, #0
 8009948:	3015      	adds	r0, #21
 800994a:	fa04 f000 	lsl.w	r0, r4, r0
 800994e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009952:	ea40 0201 	orr.w	r2, r0, r1
 8009956:	ec43 2b10 	vmov	d0, r2, r3
 800995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995c:	42b7      	cmp	r7, r6
 800995e:	bf3a      	itte	cc
 8009960:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009964:	f1a5 0608 	subcc.w	r6, r5, #8
 8009968:	2100      	movcs	r1, #0
 800996a:	380b      	subs	r0, #11
 800996c:	d017      	beq.n	800999e <__b2d+0x92>
 800996e:	f1c0 0c20 	rsb	ip, r0, #32
 8009972:	fa04 f500 	lsl.w	r5, r4, r0
 8009976:	42be      	cmp	r6, r7
 8009978:	fa21 f40c 	lsr.w	r4, r1, ip
 800997c:	ea45 0504 	orr.w	r5, r5, r4
 8009980:	bf8c      	ite	hi
 8009982:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009986:	2400      	movls	r4, #0
 8009988:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800998c:	fa01 f000 	lsl.w	r0, r1, r0
 8009990:	fa24 f40c 	lsr.w	r4, r4, ip
 8009994:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009998:	ea40 0204 	orr.w	r2, r0, r4
 800999c:	e7db      	b.n	8009956 <__b2d+0x4a>
 800999e:	ea44 030c 	orr.w	r3, r4, ip
 80099a2:	460a      	mov	r2, r1
 80099a4:	e7d7      	b.n	8009956 <__b2d+0x4a>
 80099a6:	bf00      	nop
 80099a8:	3ff00000 	.word	0x3ff00000

080099ac <__d2b>:
 80099ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	4689      	mov	r9, r1
 80099b2:	2101      	movs	r1, #1
 80099b4:	ec57 6b10 	vmov	r6, r7, d0
 80099b8:	4690      	mov	r8, r2
 80099ba:	f7ff fc09 	bl	80091d0 <_Balloc>
 80099be:	4604      	mov	r4, r0
 80099c0:	b930      	cbnz	r0, 80099d0 <__d2b+0x24>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <__d2b+0xb0>)
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <__d2b+0xb4>)
 80099c8:	f240 310a 	movw	r1, #778	; 0x30a
 80099cc:	f001 f8f8 	bl	800abc0 <__assert_func>
 80099d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099d8:	bb35      	cbnz	r5, 8009a28 <__d2b+0x7c>
 80099da:	2e00      	cmp	r6, #0
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	d028      	beq.n	8009a32 <__d2b+0x86>
 80099e0:	4668      	mov	r0, sp
 80099e2:	9600      	str	r6, [sp, #0]
 80099e4:	f7ff fd06 	bl	80093f4 <__lo0bits>
 80099e8:	9900      	ldr	r1, [sp, #0]
 80099ea:	b300      	cbz	r0, 8009a2e <__d2b+0x82>
 80099ec:	9a01      	ldr	r2, [sp, #4]
 80099ee:	f1c0 0320 	rsb	r3, r0, #32
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	430b      	orrs	r3, r1
 80099f8:	40c2      	lsrs	r2, r0
 80099fa:	6163      	str	r3, [r4, #20]
 80099fc:	9201      	str	r2, [sp, #4]
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	61a3      	str	r3, [r4, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bf14      	ite	ne
 8009a06:	2202      	movne	r2, #2
 8009a08:	2201      	moveq	r2, #1
 8009a0a:	6122      	str	r2, [r4, #16]
 8009a0c:	b1d5      	cbz	r5, 8009a44 <__d2b+0x98>
 8009a0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a12:	4405      	add	r5, r0
 8009a14:	f8c9 5000 	str.w	r5, [r9]
 8009a18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a1c:	f8c8 0000 	str.w	r0, [r8]
 8009a20:	4620      	mov	r0, r4
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a2c:	e7d5      	b.n	80099da <__d2b+0x2e>
 8009a2e:	6161      	str	r1, [r4, #20]
 8009a30:	e7e5      	b.n	80099fe <__d2b+0x52>
 8009a32:	a801      	add	r0, sp, #4
 8009a34:	f7ff fcde 	bl	80093f4 <__lo0bits>
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	6163      	str	r3, [r4, #20]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	6122      	str	r2, [r4, #16]
 8009a40:	3020      	adds	r0, #32
 8009a42:	e7e3      	b.n	8009a0c <__d2b+0x60>
 8009a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a4c:	f8c9 0000 	str.w	r0, [r9]
 8009a50:	6918      	ldr	r0, [r3, #16]
 8009a52:	f7ff fcaf 	bl	80093b4 <__hi0bits>
 8009a56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a5a:	e7df      	b.n	8009a1c <__d2b+0x70>
 8009a5c:	0800b510 	.word	0x0800b510
 8009a60:	0800b600 	.word	0x0800b600

08009a64 <__ratio>:
 8009a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4688      	mov	r8, r1
 8009a6a:	4669      	mov	r1, sp
 8009a6c:	4681      	mov	r9, r0
 8009a6e:	f7ff ff4d 	bl	800990c <__b2d>
 8009a72:	a901      	add	r1, sp, #4
 8009a74:	4640      	mov	r0, r8
 8009a76:	ec55 4b10 	vmov	r4, r5, d0
 8009a7a:	f7ff ff47 	bl	800990c <__b2d>
 8009a7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a86:	eba3 0c02 	sub.w	ip, r3, r2
 8009a8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a94:	ec51 0b10 	vmov	r0, r1, d0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfd6      	itet	le
 8009a9c:	460a      	movle	r2, r1
 8009a9e:	462a      	movgt	r2, r5
 8009aa0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009aa4:	468b      	mov	fp, r1
 8009aa6:	462f      	mov	r7, r5
 8009aa8:	bfd4      	ite	le
 8009aaa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009aae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	ee10 2a10 	vmov	r2, s0
 8009ab8:	465b      	mov	r3, fp
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f6 fec6 	bl	800084c <__aeabi_ddiv>
 8009ac0:	ec41 0b10 	vmov	d0, r0, r1
 8009ac4:	b003      	add	sp, #12
 8009ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009aca <__copybits>:
 8009aca:	3901      	subs	r1, #1
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	1149      	asrs	r1, r1, #5
 8009ad0:	6914      	ldr	r4, [r2, #16]
 8009ad2:	3101      	adds	r1, #1
 8009ad4:	f102 0314 	add.w	r3, r2, #20
 8009ad8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009adc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ae0:	1f05      	subs	r5, r0, #4
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	d30c      	bcc.n	8009b00 <__copybits+0x36>
 8009ae6:	1aa3      	subs	r3, r4, r2
 8009ae8:	3b11      	subs	r3, #17
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	3211      	adds	r2, #17
 8009af0:	42a2      	cmp	r2, r4
 8009af2:	bf88      	it	hi
 8009af4:	2300      	movhi	r3, #0
 8009af6:	4418      	add	r0, r3
 8009af8:	2300      	movs	r3, #0
 8009afa:	4288      	cmp	r0, r1
 8009afc:	d305      	bcc.n	8009b0a <__copybits+0x40>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b04:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b08:	e7eb      	b.n	8009ae2 <__copybits+0x18>
 8009b0a:	f840 3b04 	str.w	r3, [r0], #4
 8009b0e:	e7f4      	b.n	8009afa <__copybits+0x30>

08009b10 <__any_on>:
 8009b10:	f100 0214 	add.w	r2, r0, #20
 8009b14:	6900      	ldr	r0, [r0, #16]
 8009b16:	114b      	asrs	r3, r1, #5
 8009b18:	4298      	cmp	r0, r3
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	db11      	blt.n	8009b42 <__any_on+0x32>
 8009b1e:	dd0a      	ble.n	8009b36 <__any_on+0x26>
 8009b20:	f011 011f 	ands.w	r1, r1, #31
 8009b24:	d007      	beq.n	8009b36 <__any_on+0x26>
 8009b26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b2a:	fa24 f001 	lsr.w	r0, r4, r1
 8009b2e:	fa00 f101 	lsl.w	r1, r0, r1
 8009b32:	428c      	cmp	r4, r1
 8009b34:	d10b      	bne.n	8009b4e <__any_on+0x3e>
 8009b36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d803      	bhi.n	8009b46 <__any_on+0x36>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	4603      	mov	r3, r0
 8009b44:	e7f7      	b.n	8009b36 <__any_on+0x26>
 8009b46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d0f5      	beq.n	8009b3a <__any_on+0x2a>
 8009b4e:	2001      	movs	r0, #1
 8009b50:	e7f6      	b.n	8009b40 <__any_on+0x30>

08009b52 <_calloc_r>:
 8009b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b54:	fba1 2402 	umull	r2, r4, r1, r2
 8009b58:	b94c      	cbnz	r4, 8009b6e <_calloc_r+0x1c>
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	f000 f87b 	bl	8009c58 <_malloc_r>
 8009b62:	9a01      	ldr	r2, [sp, #4]
 8009b64:	4605      	mov	r5, r0
 8009b66:	b930      	cbnz	r0, 8009b76 <_calloc_r+0x24>
 8009b68:	4628      	mov	r0, r5
 8009b6a:	b003      	add	sp, #12
 8009b6c:	bd30      	pop	{r4, r5, pc}
 8009b6e:	220c      	movs	r2, #12
 8009b70:	6002      	str	r2, [r0, #0]
 8009b72:	2500      	movs	r5, #0
 8009b74:	e7f8      	b.n	8009b68 <_calloc_r+0x16>
 8009b76:	4621      	mov	r1, r4
 8009b78:	f7fb ff76 	bl	8005a68 <memset>
 8009b7c:	e7f4      	b.n	8009b68 <_calloc_r+0x16>
	...

08009b80 <_free_r>:
 8009b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d044      	beq.n	8009c10 <_free_r+0x90>
 8009b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8a:	9001      	str	r0, [sp, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b92:	bfb8      	it	lt
 8009b94:	18e4      	addlt	r4, r4, r3
 8009b96:	f001 f87f 	bl	800ac98 <__malloc_lock>
 8009b9a:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <_free_r+0x94>)
 8009b9c:	9801      	ldr	r0, [sp, #4]
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	b933      	cbnz	r3, 8009bb0 <_free_r+0x30>
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	6014      	str	r4, [r2, #0]
 8009ba6:	b003      	add	sp, #12
 8009ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bac:	f001 b87a 	b.w	800aca4 <__malloc_unlock>
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d908      	bls.n	8009bc6 <_free_r+0x46>
 8009bb4:	6825      	ldr	r5, [r4, #0]
 8009bb6:	1961      	adds	r1, r4, r5
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf01      	itttt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	1949      	addeq	r1, r1, r5
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	e7ed      	b.n	8009ba2 <_free_r+0x22>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	b10b      	cbz	r3, 8009bd0 <_free_r+0x50>
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	d9fa      	bls.n	8009bc6 <_free_r+0x46>
 8009bd0:	6811      	ldr	r1, [r2, #0]
 8009bd2:	1855      	adds	r5, r2, r1
 8009bd4:	42a5      	cmp	r5, r4
 8009bd6:	d10b      	bne.n	8009bf0 <_free_r+0x70>
 8009bd8:	6824      	ldr	r4, [r4, #0]
 8009bda:	4421      	add	r1, r4
 8009bdc:	1854      	adds	r4, r2, r1
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	6011      	str	r1, [r2, #0]
 8009be2:	d1e0      	bne.n	8009ba6 <_free_r+0x26>
 8009be4:	681c      	ldr	r4, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	6053      	str	r3, [r2, #4]
 8009bea:	4421      	add	r1, r4
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	e7da      	b.n	8009ba6 <_free_r+0x26>
 8009bf0:	d902      	bls.n	8009bf8 <_free_r+0x78>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	e7d6      	b.n	8009ba6 <_free_r+0x26>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf04      	itt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	bf04      	itt	eq
 8009c08:	1949      	addeq	r1, r1, r5
 8009c0a:	6021      	streq	r1, [r4, #0]
 8009c0c:	6054      	str	r4, [r2, #4]
 8009c0e:	e7ca      	b.n	8009ba6 <_free_r+0x26>
 8009c10:	b003      	add	sp, #12
 8009c12:	bd30      	pop	{r4, r5, pc}
 8009c14:	20000848 	.word	0x20000848

08009c18 <sbrk_aligned>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	4e0e      	ldr	r6, [pc, #56]	; (8009c54 <sbrk_aligned+0x3c>)
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	6831      	ldr	r1, [r6, #0]
 8009c20:	4605      	mov	r5, r0
 8009c22:	b911      	cbnz	r1, 8009c2a <sbrk_aligned+0x12>
 8009c24:	f000 fec8 	bl	800a9b8 <_sbrk_r>
 8009c28:	6030      	str	r0, [r6, #0]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f000 fec3 	bl	800a9b8 <_sbrk_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d00a      	beq.n	8009c4c <sbrk_aligned+0x34>
 8009c36:	1cc4      	adds	r4, r0, #3
 8009c38:	f024 0403 	bic.w	r4, r4, #3
 8009c3c:	42a0      	cmp	r0, r4
 8009c3e:	d007      	beq.n	8009c50 <sbrk_aligned+0x38>
 8009c40:	1a21      	subs	r1, r4, r0
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 feb8 	bl	800a9b8 <_sbrk_r>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d101      	bne.n	8009c50 <sbrk_aligned+0x38>
 8009c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c50:	4620      	mov	r0, r4
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	2000084c 	.word	0x2000084c

08009c58 <_malloc_r>:
 8009c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5c:	1ccd      	adds	r5, r1, #3
 8009c5e:	f025 0503 	bic.w	r5, r5, #3
 8009c62:	3508      	adds	r5, #8
 8009c64:	2d0c      	cmp	r5, #12
 8009c66:	bf38      	it	cc
 8009c68:	250c      	movcc	r5, #12
 8009c6a:	2d00      	cmp	r5, #0
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	db01      	blt.n	8009c74 <_malloc_r+0x1c>
 8009c70:	42a9      	cmp	r1, r5
 8009c72:	d905      	bls.n	8009c80 <_malloc_r+0x28>
 8009c74:	230c      	movs	r3, #12
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	2600      	movs	r6, #0
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c80:	4e2e      	ldr	r6, [pc, #184]	; (8009d3c <_malloc_r+0xe4>)
 8009c82:	f001 f809 	bl	800ac98 <__malloc_lock>
 8009c86:	6833      	ldr	r3, [r6, #0]
 8009c88:	461c      	mov	r4, r3
 8009c8a:	bb34      	cbnz	r4, 8009cda <_malloc_r+0x82>
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f7ff ffc2 	bl	8009c18 <sbrk_aligned>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	4604      	mov	r4, r0
 8009c98:	d14d      	bne.n	8009d36 <_malloc_r+0xde>
 8009c9a:	6834      	ldr	r4, [r6, #0]
 8009c9c:	4626      	mov	r6, r4
 8009c9e:	2e00      	cmp	r6, #0
 8009ca0:	d140      	bne.n	8009d24 <_malloc_r+0xcc>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	eb04 0803 	add.w	r8, r4, r3
 8009cac:	f000 fe84 	bl	800a9b8 <_sbrk_r>
 8009cb0:	4580      	cmp	r8, r0
 8009cb2:	d13a      	bne.n	8009d2a <_malloc_r+0xd2>
 8009cb4:	6821      	ldr	r1, [r4, #0]
 8009cb6:	3503      	adds	r5, #3
 8009cb8:	1a6d      	subs	r5, r5, r1
 8009cba:	f025 0503 	bic.w	r5, r5, #3
 8009cbe:	3508      	adds	r5, #8
 8009cc0:	2d0c      	cmp	r5, #12
 8009cc2:	bf38      	it	cc
 8009cc4:	250c      	movcc	r5, #12
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff ffa5 	bl	8009c18 <sbrk_aligned>
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d02b      	beq.n	8009d2a <_malloc_r+0xd2>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	442b      	add	r3, r5
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	e00e      	b.n	8009cf8 <_malloc_r+0xa0>
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	1b52      	subs	r2, r2, r5
 8009cde:	d41e      	bmi.n	8009d1e <_malloc_r+0xc6>
 8009ce0:	2a0b      	cmp	r2, #11
 8009ce2:	d916      	bls.n	8009d12 <_malloc_r+0xba>
 8009ce4:	1961      	adds	r1, r4, r5
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	6025      	str	r5, [r4, #0]
 8009cea:	bf18      	it	ne
 8009cec:	6059      	strne	r1, [r3, #4]
 8009cee:	6863      	ldr	r3, [r4, #4]
 8009cf0:	bf08      	it	eq
 8009cf2:	6031      	streq	r1, [r6, #0]
 8009cf4:	5162      	str	r2, [r4, r5]
 8009cf6:	604b      	str	r3, [r1, #4]
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f104 060b 	add.w	r6, r4, #11
 8009cfe:	f000 ffd1 	bl	800aca4 <__malloc_unlock>
 8009d02:	f026 0607 	bic.w	r6, r6, #7
 8009d06:	1d23      	adds	r3, r4, #4
 8009d08:	1af2      	subs	r2, r6, r3
 8009d0a:	d0b6      	beq.n	8009c7a <_malloc_r+0x22>
 8009d0c:	1b9b      	subs	r3, r3, r6
 8009d0e:	50a3      	str	r3, [r4, r2]
 8009d10:	e7b3      	b.n	8009c7a <_malloc_r+0x22>
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	bf0c      	ite	eq
 8009d18:	6032      	streq	r2, [r6, #0]
 8009d1a:	605a      	strne	r2, [r3, #4]
 8009d1c:	e7ec      	b.n	8009cf8 <_malloc_r+0xa0>
 8009d1e:	4623      	mov	r3, r4
 8009d20:	6864      	ldr	r4, [r4, #4]
 8009d22:	e7b2      	b.n	8009c8a <_malloc_r+0x32>
 8009d24:	4634      	mov	r4, r6
 8009d26:	6876      	ldr	r6, [r6, #4]
 8009d28:	e7b9      	b.n	8009c9e <_malloc_r+0x46>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	603b      	str	r3, [r7, #0]
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f000 ffb8 	bl	800aca4 <__malloc_unlock>
 8009d34:	e7a1      	b.n	8009c7a <_malloc_r+0x22>
 8009d36:	6025      	str	r5, [r4, #0]
 8009d38:	e7de      	b.n	8009cf8 <_malloc_r+0xa0>
 8009d3a:	bf00      	nop
 8009d3c:	20000848 	.word	0x20000848

08009d40 <__ssputs_r>:
 8009d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d44:	688e      	ldr	r6, [r1, #8]
 8009d46:	429e      	cmp	r6, r3
 8009d48:	4682      	mov	sl, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	4690      	mov	r8, r2
 8009d4e:	461f      	mov	r7, r3
 8009d50:	d838      	bhi.n	8009dc4 <__ssputs_r+0x84>
 8009d52:	898a      	ldrh	r2, [r1, #12]
 8009d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d58:	d032      	beq.n	8009dc0 <__ssputs_r+0x80>
 8009d5a:	6825      	ldr	r5, [r4, #0]
 8009d5c:	6909      	ldr	r1, [r1, #16]
 8009d5e:	eba5 0901 	sub.w	r9, r5, r1
 8009d62:	6965      	ldr	r5, [r4, #20]
 8009d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	444b      	add	r3, r9
 8009d70:	106d      	asrs	r5, r5, #1
 8009d72:	429d      	cmp	r5, r3
 8009d74:	bf38      	it	cc
 8009d76:	461d      	movcc	r5, r3
 8009d78:	0553      	lsls	r3, r2, #21
 8009d7a:	d531      	bpl.n	8009de0 <__ssputs_r+0xa0>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f7ff ff6b 	bl	8009c58 <_malloc_r>
 8009d82:	4606      	mov	r6, r0
 8009d84:	b950      	cbnz	r0, 8009d9c <__ssputs_r+0x5c>
 8009d86:	230c      	movs	r3, #12
 8009d88:	f8ca 3000 	str.w	r3, [sl]
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9c:	6921      	ldr	r1, [r4, #16]
 8009d9e:	464a      	mov	r2, r9
 8009da0:	f7ff fa08 	bl	80091b4 <memcpy>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	6126      	str	r6, [r4, #16]
 8009db2:	6165      	str	r5, [r4, #20]
 8009db4:	444e      	add	r6, r9
 8009db6:	eba5 0509 	sub.w	r5, r5, r9
 8009dba:	6026      	str	r6, [r4, #0]
 8009dbc:	60a5      	str	r5, [r4, #8]
 8009dbe:	463e      	mov	r6, r7
 8009dc0:	42be      	cmp	r6, r7
 8009dc2:	d900      	bls.n	8009dc6 <__ssputs_r+0x86>
 8009dc4:	463e      	mov	r6, r7
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4641      	mov	r1, r8
 8009dcc:	f000 ff4a 	bl	800ac64 <memmove>
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	1b9b      	subs	r3, r3, r6
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	4433      	add	r3, r6
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7db      	b.n	8009d98 <__ssputs_r+0x58>
 8009de0:	462a      	mov	r2, r5
 8009de2:	f000 ff65 	bl	800acb0 <_realloc_r>
 8009de6:	4606      	mov	r6, r0
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1e1      	bne.n	8009db0 <__ssputs_r+0x70>
 8009dec:	6921      	ldr	r1, [r4, #16]
 8009dee:	4650      	mov	r0, sl
 8009df0:	f7ff fec6 	bl	8009b80 <_free_r>
 8009df4:	e7c7      	b.n	8009d86 <__ssputs_r+0x46>
	...

08009df8 <_svfiprintf_r>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	4698      	mov	r8, r3
 8009dfe:	898b      	ldrh	r3, [r1, #12]
 8009e00:	061b      	lsls	r3, r3, #24
 8009e02:	b09d      	sub	sp, #116	; 0x74
 8009e04:	4607      	mov	r7, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	d50e      	bpl.n	8009e2a <_svfiprintf_r+0x32>
 8009e0c:	690b      	ldr	r3, [r1, #16]
 8009e0e:	b963      	cbnz	r3, 8009e2a <_svfiprintf_r+0x32>
 8009e10:	2140      	movs	r1, #64	; 0x40
 8009e12:	f7ff ff21 	bl	8009c58 <_malloc_r>
 8009e16:	6028      	str	r0, [r5, #0]
 8009e18:	6128      	str	r0, [r5, #16]
 8009e1a:	b920      	cbnz	r0, 8009e26 <_svfiprintf_r+0x2e>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	e0d1      	b.n	8009fca <_svfiprintf_r+0x1d2>
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	616b      	str	r3, [r5, #20]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2e:	2320      	movs	r3, #32
 8009e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e38:	2330      	movs	r3, #48	; 0x30
 8009e3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fe4 <_svfiprintf_r+0x1ec>
 8009e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e42:	f04f 0901 	mov.w	r9, #1
 8009e46:	4623      	mov	r3, r4
 8009e48:	469a      	mov	sl, r3
 8009e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4e:	b10a      	cbz	r2, 8009e54 <_svfiprintf_r+0x5c>
 8009e50:	2a25      	cmp	r2, #37	; 0x25
 8009e52:	d1f9      	bne.n	8009e48 <_svfiprintf_r+0x50>
 8009e54:	ebba 0b04 	subs.w	fp, sl, r4
 8009e58:	d00b      	beq.n	8009e72 <_svfiprintf_r+0x7a>
 8009e5a:	465b      	mov	r3, fp
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7ff ff6d 	bl	8009d40 <__ssputs_r>
 8009e66:	3001      	adds	r0, #1
 8009e68:	f000 80aa 	beq.w	8009fc0 <_svfiprintf_r+0x1c8>
 8009e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e6e:	445a      	add	r2, fp
 8009e70:	9209      	str	r2, [sp, #36]	; 0x24
 8009e72:	f89a 3000 	ldrb.w	r3, [sl]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 80a2 	beq.w	8009fc0 <_svfiprintf_r+0x1c8>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e86:	f10a 0a01 	add.w	sl, sl, #1
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e92:	931a      	str	r3, [sp, #104]	; 0x68
 8009e94:	4654      	mov	r4, sl
 8009e96:	2205      	movs	r2, #5
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	4851      	ldr	r0, [pc, #324]	; (8009fe4 <_svfiprintf_r+0x1ec>)
 8009e9e:	f7f6 f99f 	bl	80001e0 <memchr>
 8009ea2:	9a04      	ldr	r2, [sp, #16]
 8009ea4:	b9d8      	cbnz	r0, 8009ede <_svfiprintf_r+0xe6>
 8009ea6:	06d0      	lsls	r0, r2, #27
 8009ea8:	bf44      	itt	mi
 8009eaa:	2320      	movmi	r3, #32
 8009eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb0:	0711      	lsls	r1, r2, #28
 8009eb2:	bf44      	itt	mi
 8009eb4:	232b      	movmi	r3, #43	; 0x2b
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eba:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec0:	d015      	beq.n	8009eee <_svfiprintf_r+0xf6>
 8009ec2:	9a07      	ldr	r2, [sp, #28]
 8009ec4:	4654      	mov	r4, sl
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f04f 0c0a 	mov.w	ip, #10
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed2:	3b30      	subs	r3, #48	; 0x30
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d94e      	bls.n	8009f76 <_svfiprintf_r+0x17e>
 8009ed8:	b1b0      	cbz	r0, 8009f08 <_svfiprintf_r+0x110>
 8009eda:	9207      	str	r2, [sp, #28]
 8009edc:	e014      	b.n	8009f08 <_svfiprintf_r+0x110>
 8009ede:	eba0 0308 	sub.w	r3, r0, r8
 8009ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	46a2      	mov	sl, r4
 8009eec:	e7d2      	b.n	8009e94 <_svfiprintf_r+0x9c>
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	1d19      	adds	r1, r3, #4
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	9103      	str	r1, [sp, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfbb      	ittet	lt
 8009efa:	425b      	neglt	r3, r3
 8009efc:	f042 0202 	orrlt.w	r2, r2, #2
 8009f00:	9307      	strge	r3, [sp, #28]
 8009f02:	9307      	strlt	r3, [sp, #28]
 8009f04:	bfb8      	it	lt
 8009f06:	9204      	strlt	r2, [sp, #16]
 8009f08:	7823      	ldrb	r3, [r4, #0]
 8009f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f0c:	d10c      	bne.n	8009f28 <_svfiprintf_r+0x130>
 8009f0e:	7863      	ldrb	r3, [r4, #1]
 8009f10:	2b2a      	cmp	r3, #42	; 0x2a
 8009f12:	d135      	bne.n	8009f80 <_svfiprintf_r+0x188>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	1d1a      	adds	r2, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9203      	str	r2, [sp, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bfb8      	it	lt
 8009f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f24:	3402      	adds	r4, #2
 8009f26:	9305      	str	r3, [sp, #20]
 8009f28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ff4 <_svfiprintf_r+0x1fc>
 8009f2c:	7821      	ldrb	r1, [r4, #0]
 8009f2e:	2203      	movs	r2, #3
 8009f30:	4650      	mov	r0, sl
 8009f32:	f7f6 f955 	bl	80001e0 <memchr>
 8009f36:	b140      	cbz	r0, 8009f4a <_svfiprintf_r+0x152>
 8009f38:	2340      	movs	r3, #64	; 0x40
 8009f3a:	eba0 000a 	sub.w	r0, r0, sl
 8009f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f42:	9b04      	ldr	r3, [sp, #16]
 8009f44:	4303      	orrs	r3, r0
 8009f46:	3401      	adds	r4, #1
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4e:	4826      	ldr	r0, [pc, #152]	; (8009fe8 <_svfiprintf_r+0x1f0>)
 8009f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f54:	2206      	movs	r2, #6
 8009f56:	f7f6 f943 	bl	80001e0 <memchr>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d038      	beq.n	8009fd0 <_svfiprintf_r+0x1d8>
 8009f5e:	4b23      	ldr	r3, [pc, #140]	; (8009fec <_svfiprintf_r+0x1f4>)
 8009f60:	bb1b      	cbnz	r3, 8009faa <_svfiprintf_r+0x1b2>
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	3307      	adds	r3, #7
 8009f66:	f023 0307 	bic.w	r3, r3, #7
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	4433      	add	r3, r6
 8009f72:	9309      	str	r3, [sp, #36]	; 0x24
 8009f74:	e767      	b.n	8009e46 <_svfiprintf_r+0x4e>
 8009f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	e7a5      	b.n	8009ecc <_svfiprintf_r+0xd4>
 8009f80:	2300      	movs	r3, #0
 8009f82:	3401      	adds	r4, #1
 8009f84:	9305      	str	r3, [sp, #20]
 8009f86:	4619      	mov	r1, r3
 8009f88:	f04f 0c0a 	mov.w	ip, #10
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f92:	3a30      	subs	r2, #48	; 0x30
 8009f94:	2a09      	cmp	r2, #9
 8009f96:	d903      	bls.n	8009fa0 <_svfiprintf_r+0x1a8>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0c5      	beq.n	8009f28 <_svfiprintf_r+0x130>
 8009f9c:	9105      	str	r1, [sp, #20]
 8009f9e:	e7c3      	b.n	8009f28 <_svfiprintf_r+0x130>
 8009fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e7f0      	b.n	8009f8c <_svfiprintf_r+0x194>
 8009faa:	ab03      	add	r3, sp, #12
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <_svfiprintf_r+0x1f8>)
 8009fb2:	a904      	add	r1, sp, #16
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7fb fdff 	bl	8005bb8 <_printf_float>
 8009fba:	1c42      	adds	r2, r0, #1
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	d1d6      	bne.n	8009f6e <_svfiprintf_r+0x176>
 8009fc0:	89ab      	ldrh	r3, [r5, #12]
 8009fc2:	065b      	lsls	r3, r3, #25
 8009fc4:	f53f af2c 	bmi.w	8009e20 <_svfiprintf_r+0x28>
 8009fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fca:	b01d      	add	sp, #116	; 0x74
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	ab03      	add	r3, sp, #12
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <_svfiprintf_r+0x1f8>)
 8009fd8:	a904      	add	r1, sp, #16
 8009fda:	4638      	mov	r0, r7
 8009fdc:	f7fc f890 	bl	8006100 <_printf_i>
 8009fe0:	e7eb      	b.n	8009fba <_svfiprintf_r+0x1c2>
 8009fe2:	bf00      	nop
 8009fe4:	0800b75c 	.word	0x0800b75c
 8009fe8:	0800b766 	.word	0x0800b766
 8009fec:	08005bb9 	.word	0x08005bb9
 8009ff0:	08009d41 	.word	0x08009d41
 8009ff4:	0800b762 	.word	0x0800b762

08009ff8 <_sungetc_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	1c4b      	adds	r3, r1, #1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	d103      	bne.n	800a008 <_sungetc_r+0x10>
 800a000:	f04f 35ff 	mov.w	r5, #4294967295
 800a004:	4628      	mov	r0, r5
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	8993      	ldrh	r3, [r2, #12]
 800a00a:	f023 0320 	bic.w	r3, r3, #32
 800a00e:	8193      	strh	r3, [r2, #12]
 800a010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a012:	6852      	ldr	r2, [r2, #4]
 800a014:	b2cd      	uxtb	r5, r1
 800a016:	b18b      	cbz	r3, 800a03c <_sungetc_r+0x44>
 800a018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a01a:	4293      	cmp	r3, r2
 800a01c:	dd08      	ble.n	800a030 <_sungetc_r+0x38>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a028:	6863      	ldr	r3, [r4, #4]
 800a02a:	3301      	adds	r3, #1
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	e7e9      	b.n	800a004 <_sungetc_r+0xc>
 800a030:	4621      	mov	r1, r4
 800a032:	f000 fd7d 	bl	800ab30 <__submore>
 800a036:	2800      	cmp	r0, #0
 800a038:	d0f1      	beq.n	800a01e <_sungetc_r+0x26>
 800a03a:	e7e1      	b.n	800a000 <_sungetc_r+0x8>
 800a03c:	6921      	ldr	r1, [r4, #16]
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	b151      	cbz	r1, 800a058 <_sungetc_r+0x60>
 800a042:	4299      	cmp	r1, r3
 800a044:	d208      	bcs.n	800a058 <_sungetc_r+0x60>
 800a046:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a04a:	42a9      	cmp	r1, r5
 800a04c:	d104      	bne.n	800a058 <_sungetc_r+0x60>
 800a04e:	3b01      	subs	r3, #1
 800a050:	3201      	adds	r2, #1
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	6062      	str	r2, [r4, #4]
 800a056:	e7d5      	b.n	800a004 <_sungetc_r+0xc>
 800a058:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a060:	6363      	str	r3, [r4, #52]	; 0x34
 800a062:	2303      	movs	r3, #3
 800a064:	63a3      	str	r3, [r4, #56]	; 0x38
 800a066:	4623      	mov	r3, r4
 800a068:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	2301      	movs	r3, #1
 800a070:	e7dc      	b.n	800a02c <_sungetc_r+0x34>

0800a072 <__ssrefill_r>:
 800a072:	b510      	push	{r4, lr}
 800a074:	460c      	mov	r4, r1
 800a076:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a078:	b169      	cbz	r1, 800a096 <__ssrefill_r+0x24>
 800a07a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07e:	4299      	cmp	r1, r3
 800a080:	d001      	beq.n	800a086 <__ssrefill_r+0x14>
 800a082:	f7ff fd7d 	bl	8009b80 <_free_r>
 800a086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	2000      	movs	r0, #0
 800a08c:	6360      	str	r0, [r4, #52]	; 0x34
 800a08e:	b113      	cbz	r3, 800a096 <__ssrefill_r+0x24>
 800a090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	bd10      	pop	{r4, pc}
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f043 0320 	orr.w	r3, r3, #32
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	e7f3      	b.n	800a094 <__ssrefill_r+0x22>

0800a0ac <__ssvfiscanf_r>:
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a0bc:	49a6      	ldr	r1, [pc, #664]	; (800a358 <__ssvfiscanf_r+0x2ac>)
 800a0be:	91a0      	str	r1, [sp, #640]	; 0x280
 800a0c0:	f10d 0804 	add.w	r8, sp, #4
 800a0c4:	49a5      	ldr	r1, [pc, #660]	; (800a35c <__ssvfiscanf_r+0x2b0>)
 800a0c6:	4fa6      	ldr	r7, [pc, #664]	; (800a360 <__ssvfiscanf_r+0x2b4>)
 800a0c8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a364 <__ssvfiscanf_r+0x2b8>
 800a0cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	91a1      	str	r1, [sp, #644]	; 0x284
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	7813      	ldrb	r3, [r2, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 815a 	beq.w	800a392 <__ssvfiscanf_r+0x2e6>
 800a0de:	5dd9      	ldrb	r1, [r3, r7]
 800a0e0:	f011 0108 	ands.w	r1, r1, #8
 800a0e4:	f102 0501 	add.w	r5, r2, #1
 800a0e8:	d019      	beq.n	800a11e <__ssvfiscanf_r+0x72>
 800a0ea:	6863      	ldr	r3, [r4, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd0f      	ble.n	800a110 <__ssvfiscanf_r+0x64>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	5cba      	ldrb	r2, [r7, r2]
 800a0f6:	0712      	lsls	r2, r2, #28
 800a0f8:	d401      	bmi.n	800a0fe <__ssvfiscanf_r+0x52>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	e7eb      	b.n	800a0d6 <__ssvfiscanf_r+0x2a>
 800a0fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a100:	3201      	adds	r2, #1
 800a102:	9245      	str	r2, [sp, #276]	; 0x114
 800a104:	6862      	ldr	r2, [r4, #4]
 800a106:	3301      	adds	r3, #1
 800a108:	3a01      	subs	r2, #1
 800a10a:	6062      	str	r2, [r4, #4]
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	e7ec      	b.n	800a0ea <__ssvfiscanf_r+0x3e>
 800a110:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a112:	4621      	mov	r1, r4
 800a114:	4630      	mov	r0, r6
 800a116:	4798      	blx	r3
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0e9      	beq.n	800a0f0 <__ssvfiscanf_r+0x44>
 800a11c:	e7ed      	b.n	800a0fa <__ssvfiscanf_r+0x4e>
 800a11e:	2b25      	cmp	r3, #37	; 0x25
 800a120:	d012      	beq.n	800a148 <__ssvfiscanf_r+0x9c>
 800a122:	469a      	mov	sl, r3
 800a124:	6863      	ldr	r3, [r4, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f340 8091 	ble.w	800a24e <__ssvfiscanf_r+0x1a2>
 800a12c:	6822      	ldr	r2, [r4, #0]
 800a12e:	7813      	ldrb	r3, [r2, #0]
 800a130:	4553      	cmp	r3, sl
 800a132:	f040 812e 	bne.w	800a392 <__ssvfiscanf_r+0x2e6>
 800a136:	6863      	ldr	r3, [r4, #4]
 800a138:	3b01      	subs	r3, #1
 800a13a:	6063      	str	r3, [r4, #4]
 800a13c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a13e:	3201      	adds	r2, #1
 800a140:	3301      	adds	r3, #1
 800a142:	6022      	str	r2, [r4, #0]
 800a144:	9345      	str	r3, [sp, #276]	; 0x114
 800a146:	e7d8      	b.n	800a0fa <__ssvfiscanf_r+0x4e>
 800a148:	9141      	str	r1, [sp, #260]	; 0x104
 800a14a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a14c:	7853      	ldrb	r3, [r2, #1]
 800a14e:	2b2a      	cmp	r3, #42	; 0x2a
 800a150:	bf02      	ittt	eq
 800a152:	2310      	moveq	r3, #16
 800a154:	1c95      	addeq	r5, r2, #2
 800a156:	9341      	streq	r3, [sp, #260]	; 0x104
 800a158:	220a      	movs	r2, #10
 800a15a:	46aa      	mov	sl, r5
 800a15c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a160:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a164:	2b09      	cmp	r3, #9
 800a166:	d91d      	bls.n	800a1a4 <__ssvfiscanf_r+0xf8>
 800a168:	487e      	ldr	r0, [pc, #504]	; (800a364 <__ssvfiscanf_r+0x2b8>)
 800a16a:	2203      	movs	r2, #3
 800a16c:	f7f6 f838 	bl	80001e0 <memchr>
 800a170:	b140      	cbz	r0, 800a184 <__ssvfiscanf_r+0xd8>
 800a172:	2301      	movs	r3, #1
 800a174:	eba0 0009 	sub.w	r0, r0, r9
 800a178:	fa03 f000 	lsl.w	r0, r3, r0
 800a17c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a17e:	4318      	orrs	r0, r3
 800a180:	9041      	str	r0, [sp, #260]	; 0x104
 800a182:	4655      	mov	r5, sl
 800a184:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a188:	2b78      	cmp	r3, #120	; 0x78
 800a18a:	d806      	bhi.n	800a19a <__ssvfiscanf_r+0xee>
 800a18c:	2b57      	cmp	r3, #87	; 0x57
 800a18e:	d810      	bhi.n	800a1b2 <__ssvfiscanf_r+0x106>
 800a190:	2b25      	cmp	r3, #37	; 0x25
 800a192:	d0c6      	beq.n	800a122 <__ssvfiscanf_r+0x76>
 800a194:	d856      	bhi.n	800a244 <__ssvfiscanf_r+0x198>
 800a196:	2b00      	cmp	r3, #0
 800a198:	d064      	beq.n	800a264 <__ssvfiscanf_r+0x1b8>
 800a19a:	2303      	movs	r3, #3
 800a19c:	9347      	str	r3, [sp, #284]	; 0x11c
 800a19e:	230a      	movs	r3, #10
 800a1a0:	9342      	str	r3, [sp, #264]	; 0x108
 800a1a2:	e071      	b.n	800a288 <__ssvfiscanf_r+0x1dc>
 800a1a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a1a6:	fb02 1103 	mla	r1, r2, r3, r1
 800a1aa:	3930      	subs	r1, #48	; 0x30
 800a1ac:	9143      	str	r1, [sp, #268]	; 0x10c
 800a1ae:	4655      	mov	r5, sl
 800a1b0:	e7d3      	b.n	800a15a <__ssvfiscanf_r+0xae>
 800a1b2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a1b6:	2a20      	cmp	r2, #32
 800a1b8:	d8ef      	bhi.n	800a19a <__ssvfiscanf_r+0xee>
 800a1ba:	a101      	add	r1, pc, #4	; (adr r1, 800a1c0 <__ssvfiscanf_r+0x114>)
 800a1bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1c0:	0800a273 	.word	0x0800a273
 800a1c4:	0800a19b 	.word	0x0800a19b
 800a1c8:	0800a19b 	.word	0x0800a19b
 800a1cc:	0800a2d1 	.word	0x0800a2d1
 800a1d0:	0800a19b 	.word	0x0800a19b
 800a1d4:	0800a19b 	.word	0x0800a19b
 800a1d8:	0800a19b 	.word	0x0800a19b
 800a1dc:	0800a19b 	.word	0x0800a19b
 800a1e0:	0800a19b 	.word	0x0800a19b
 800a1e4:	0800a19b 	.word	0x0800a19b
 800a1e8:	0800a19b 	.word	0x0800a19b
 800a1ec:	0800a2e7 	.word	0x0800a2e7
 800a1f0:	0800a2bd 	.word	0x0800a2bd
 800a1f4:	0800a24b 	.word	0x0800a24b
 800a1f8:	0800a24b 	.word	0x0800a24b
 800a1fc:	0800a24b 	.word	0x0800a24b
 800a200:	0800a19b 	.word	0x0800a19b
 800a204:	0800a2c1 	.word	0x0800a2c1
 800a208:	0800a19b 	.word	0x0800a19b
 800a20c:	0800a19b 	.word	0x0800a19b
 800a210:	0800a19b 	.word	0x0800a19b
 800a214:	0800a19b 	.word	0x0800a19b
 800a218:	0800a2f7 	.word	0x0800a2f7
 800a21c:	0800a2c9 	.word	0x0800a2c9
 800a220:	0800a26b 	.word	0x0800a26b
 800a224:	0800a19b 	.word	0x0800a19b
 800a228:	0800a19b 	.word	0x0800a19b
 800a22c:	0800a2f3 	.word	0x0800a2f3
 800a230:	0800a19b 	.word	0x0800a19b
 800a234:	0800a2bd 	.word	0x0800a2bd
 800a238:	0800a19b 	.word	0x0800a19b
 800a23c:	0800a19b 	.word	0x0800a19b
 800a240:	0800a273 	.word	0x0800a273
 800a244:	3b45      	subs	r3, #69	; 0x45
 800a246:	2b02      	cmp	r3, #2
 800a248:	d8a7      	bhi.n	800a19a <__ssvfiscanf_r+0xee>
 800a24a:	2305      	movs	r3, #5
 800a24c:	e01b      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a24e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a250:	4621      	mov	r1, r4
 800a252:	4630      	mov	r0, r6
 800a254:	4798      	blx	r3
 800a256:	2800      	cmp	r0, #0
 800a258:	f43f af68 	beq.w	800a12c <__ssvfiscanf_r+0x80>
 800a25c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a25e:	2800      	cmp	r0, #0
 800a260:	f040 808d 	bne.w	800a37e <__ssvfiscanf_r+0x2d2>
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	e08f      	b.n	800a38a <__ssvfiscanf_r+0x2de>
 800a26a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a26c:	f042 0220 	orr.w	r2, r2, #32
 800a270:	9241      	str	r2, [sp, #260]	; 0x104
 800a272:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a278:	9241      	str	r2, [sp, #260]	; 0x104
 800a27a:	2210      	movs	r2, #16
 800a27c:	2b6f      	cmp	r3, #111	; 0x6f
 800a27e:	9242      	str	r2, [sp, #264]	; 0x108
 800a280:	bf34      	ite	cc
 800a282:	2303      	movcc	r3, #3
 800a284:	2304      	movcs	r3, #4
 800a286:	9347      	str	r3, [sp, #284]	; 0x11c
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dd42      	ble.n	800a314 <__ssvfiscanf_r+0x268>
 800a28e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a290:	0659      	lsls	r1, r3, #25
 800a292:	d404      	bmi.n	800a29e <__ssvfiscanf_r+0x1f2>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	781a      	ldrb	r2, [r3, #0]
 800a298:	5cba      	ldrb	r2, [r7, r2]
 800a29a:	0712      	lsls	r2, r2, #28
 800a29c:	d441      	bmi.n	800a322 <__ssvfiscanf_r+0x276>
 800a29e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	dc50      	bgt.n	800a346 <__ssvfiscanf_r+0x29a>
 800a2a4:	466b      	mov	r3, sp
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	a941      	add	r1, sp, #260	; 0x104
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f000 f9d0 	bl	800a650 <_scanf_chars>
 800a2b0:	2801      	cmp	r0, #1
 800a2b2:	d06e      	beq.n	800a392 <__ssvfiscanf_r+0x2e6>
 800a2b4:	2802      	cmp	r0, #2
 800a2b6:	f47f af20 	bne.w	800a0fa <__ssvfiscanf_r+0x4e>
 800a2ba:	e7cf      	b.n	800a25c <__ssvfiscanf_r+0x1b0>
 800a2bc:	220a      	movs	r2, #10
 800a2be:	e7dd      	b.n	800a27c <__ssvfiscanf_r+0x1d0>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9342      	str	r3, [sp, #264]	; 0x108
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e7de      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	9342      	str	r3, [sp, #264]	; 0x108
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	e7da      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f000 fb80 	bl	800a9d8 <__sccl>
 800a2d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2de:	9341      	str	r3, [sp, #260]	; 0x104
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7cf      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a2e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ec:	9341      	str	r3, [sp, #260]	; 0x104
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e7c9      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e7c7      	b.n	800a286 <__ssvfiscanf_r+0x1da>
 800a2f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a2f8:	06c3      	lsls	r3, r0, #27
 800a2fa:	f53f aefe 	bmi.w	800a0fa <__ssvfiscanf_r+0x4e>
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a302:	1d19      	adds	r1, r3, #4
 800a304:	9100      	str	r1, [sp, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f010 0f01 	tst.w	r0, #1
 800a30c:	bf14      	ite	ne
 800a30e:	801a      	strhne	r2, [r3, #0]
 800a310:	601a      	streq	r2, [r3, #0]
 800a312:	e6f2      	b.n	800a0fa <__ssvfiscanf_r+0x4e>
 800a314:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a316:	4621      	mov	r1, r4
 800a318:	4630      	mov	r0, r6
 800a31a:	4798      	blx	r3
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d0b6      	beq.n	800a28e <__ssvfiscanf_r+0x1e2>
 800a320:	e79c      	b.n	800a25c <__ssvfiscanf_r+0x1b0>
 800a322:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a324:	3201      	adds	r2, #1
 800a326:	9245      	str	r2, [sp, #276]	; 0x114
 800a328:	6862      	ldr	r2, [r4, #4]
 800a32a:	3a01      	subs	r2, #1
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	6062      	str	r2, [r4, #4]
 800a330:	dd02      	ble.n	800a338 <__ssvfiscanf_r+0x28c>
 800a332:	3301      	adds	r3, #1
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	e7ad      	b.n	800a294 <__ssvfiscanf_r+0x1e8>
 800a338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a33a:	4621      	mov	r1, r4
 800a33c:	4630      	mov	r0, r6
 800a33e:	4798      	blx	r3
 800a340:	2800      	cmp	r0, #0
 800a342:	d0a7      	beq.n	800a294 <__ssvfiscanf_r+0x1e8>
 800a344:	e78a      	b.n	800a25c <__ssvfiscanf_r+0x1b0>
 800a346:	2b04      	cmp	r3, #4
 800a348:	dc0e      	bgt.n	800a368 <__ssvfiscanf_r+0x2bc>
 800a34a:	466b      	mov	r3, sp
 800a34c:	4622      	mov	r2, r4
 800a34e:	a941      	add	r1, sp, #260	; 0x104
 800a350:	4630      	mov	r0, r6
 800a352:	f000 f9d7 	bl	800a704 <_scanf_i>
 800a356:	e7ab      	b.n	800a2b0 <__ssvfiscanf_r+0x204>
 800a358:	08009ff9 	.word	0x08009ff9
 800a35c:	0800a073 	.word	0x0800a073
 800a360:	0800b391 	.word	0x0800b391
 800a364:	0800b762 	.word	0x0800b762
 800a368:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <__ssvfiscanf_r+0x2ec>)
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f43f aec5 	beq.w	800a0fa <__ssvfiscanf_r+0x4e>
 800a370:	466b      	mov	r3, sp
 800a372:	4622      	mov	r2, r4
 800a374:	a941      	add	r1, sp, #260	; 0x104
 800a376:	4630      	mov	r0, r6
 800a378:	f7fb ffe8 	bl	800634c <_scanf_float>
 800a37c:	e798      	b.n	800a2b0 <__ssvfiscanf_r+0x204>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a384:	bf18      	it	ne
 800a386:	f04f 30ff 	movne.w	r0, #4294967295
 800a38a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a394:	e7f9      	b.n	800a38a <__ssvfiscanf_r+0x2de>
 800a396:	bf00      	nop
 800a398:	0800634d 	.word	0x0800634d

0800a39c <__sfputc_r>:
 800a39c:	6893      	ldr	r3, [r2, #8]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	b410      	push	{r4}
 800a3a4:	6093      	str	r3, [r2, #8]
 800a3a6:	da08      	bge.n	800a3ba <__sfputc_r+0x1e>
 800a3a8:	6994      	ldr	r4, [r2, #24]
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	db01      	blt.n	800a3b2 <__sfputc_r+0x16>
 800a3ae:	290a      	cmp	r1, #10
 800a3b0:	d103      	bne.n	800a3ba <__sfputc_r+0x1e>
 800a3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b6:	f7fd b9df 	b.w	8007778 <__swbuf_r>
 800a3ba:	6813      	ldr	r3, [r2, #0]
 800a3bc:	1c58      	adds	r0, r3, #1
 800a3be:	6010      	str	r0, [r2, #0]
 800a3c0:	7019      	strb	r1, [r3, #0]
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <__sfputs_r>:
 800a3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	18d5      	adds	r5, r2, r3
 800a3d4:	42ac      	cmp	r4, r5
 800a3d6:	d101      	bne.n	800a3dc <__sfputs_r+0x12>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e007      	b.n	800a3ec <__sfputs_r+0x22>
 800a3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e0:	463a      	mov	r2, r7
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ffda 	bl	800a39c <__sfputc_r>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d1f3      	bne.n	800a3d4 <__sfputs_r+0xa>
 800a3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3f0 <_vfiprintf_r>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	b09d      	sub	sp, #116	; 0x74
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	4698      	mov	r8, r3
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	b118      	cbz	r0, 800a408 <_vfiprintf_r+0x18>
 800a400:	6983      	ldr	r3, [r0, #24]
 800a402:	b90b      	cbnz	r3, 800a408 <_vfiprintf_r+0x18>
 800a404:	f7fe fa30 	bl	8008868 <__sinit>
 800a408:	4b89      	ldr	r3, [pc, #548]	; (800a630 <_vfiprintf_r+0x240>)
 800a40a:	429d      	cmp	r5, r3
 800a40c:	d11b      	bne.n	800a446 <_vfiprintf_r+0x56>
 800a40e:	6875      	ldr	r5, [r6, #4]
 800a410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a412:	07d9      	lsls	r1, r3, #31
 800a414:	d405      	bmi.n	800a422 <_vfiprintf_r+0x32>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	059a      	lsls	r2, r3, #22
 800a41a:	d402      	bmi.n	800a422 <_vfiprintf_r+0x32>
 800a41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41e:	f7fe fe34 	bl	800908a <__retarget_lock_acquire_recursive>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	071b      	lsls	r3, r3, #28
 800a426:	d501      	bpl.n	800a42c <_vfiprintf_r+0x3c>
 800a428:	692b      	ldr	r3, [r5, #16]
 800a42a:	b9eb      	cbnz	r3, 800a468 <_vfiprintf_r+0x78>
 800a42c:	4629      	mov	r1, r5
 800a42e:	4630      	mov	r0, r6
 800a430:	f7fd fa06 	bl	8007840 <__swsetup_r>
 800a434:	b1c0      	cbz	r0, 800a468 <_vfiprintf_r+0x78>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07dc      	lsls	r4, r3, #31
 800a43a:	d50e      	bpl.n	800a45a <_vfiprintf_r+0x6a>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	b01d      	add	sp, #116	; 0x74
 800a442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a446:	4b7b      	ldr	r3, [pc, #492]	; (800a634 <_vfiprintf_r+0x244>)
 800a448:	429d      	cmp	r5, r3
 800a44a:	d101      	bne.n	800a450 <_vfiprintf_r+0x60>
 800a44c:	68b5      	ldr	r5, [r6, #8]
 800a44e:	e7df      	b.n	800a410 <_vfiprintf_r+0x20>
 800a450:	4b79      	ldr	r3, [pc, #484]	; (800a638 <_vfiprintf_r+0x248>)
 800a452:	429d      	cmp	r5, r3
 800a454:	bf08      	it	eq
 800a456:	68f5      	ldreq	r5, [r6, #12]
 800a458:	e7da      	b.n	800a410 <_vfiprintf_r+0x20>
 800a45a:	89ab      	ldrh	r3, [r5, #12]
 800a45c:	0598      	lsls	r0, r3, #22
 800a45e:	d4ed      	bmi.n	800a43c <_vfiprintf_r+0x4c>
 800a460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a462:	f7fe fe13 	bl	800908c <__retarget_lock_release_recursive>
 800a466:	e7e9      	b.n	800a43c <_vfiprintf_r+0x4c>
 800a468:	2300      	movs	r3, #0
 800a46a:	9309      	str	r3, [sp, #36]	; 0x24
 800a46c:	2320      	movs	r3, #32
 800a46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a472:	f8cd 800c 	str.w	r8, [sp, #12]
 800a476:	2330      	movs	r3, #48	; 0x30
 800a478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a63c <_vfiprintf_r+0x24c>
 800a47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a480:	f04f 0901 	mov.w	r9, #1
 800a484:	4623      	mov	r3, r4
 800a486:	469a      	mov	sl, r3
 800a488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48c:	b10a      	cbz	r2, 800a492 <_vfiprintf_r+0xa2>
 800a48e:	2a25      	cmp	r2, #37	; 0x25
 800a490:	d1f9      	bne.n	800a486 <_vfiprintf_r+0x96>
 800a492:	ebba 0b04 	subs.w	fp, sl, r4
 800a496:	d00b      	beq.n	800a4b0 <_vfiprintf_r+0xc0>
 800a498:	465b      	mov	r3, fp
 800a49a:	4622      	mov	r2, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff93 	bl	800a3ca <__sfputs_r>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f000 80aa 	beq.w	800a5fe <_vfiprintf_r+0x20e>
 800a4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ac:	445a      	add	r2, fp
 800a4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80a2 	beq.w	800a5fe <_vfiprintf_r+0x20e>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c4:	f10a 0a01 	add.w	sl, sl, #1
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	9307      	str	r3, [sp, #28]
 800a4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d2:	4654      	mov	r4, sl
 800a4d4:	2205      	movs	r2, #5
 800a4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4da:	4858      	ldr	r0, [pc, #352]	; (800a63c <_vfiprintf_r+0x24c>)
 800a4dc:	f7f5 fe80 	bl	80001e0 <memchr>
 800a4e0:	9a04      	ldr	r2, [sp, #16]
 800a4e2:	b9d8      	cbnz	r0, 800a51c <_vfiprintf_r+0x12c>
 800a4e4:	06d1      	lsls	r1, r2, #27
 800a4e6:	bf44      	itt	mi
 800a4e8:	2320      	movmi	r3, #32
 800a4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ee:	0713      	lsls	r3, r2, #28
 800a4f0:	bf44      	itt	mi
 800a4f2:	232b      	movmi	r3, #43	; 0x2b
 800a4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fe:	d015      	beq.n	800a52c <_vfiprintf_r+0x13c>
 800a500:	9a07      	ldr	r2, [sp, #28]
 800a502:	4654      	mov	r4, sl
 800a504:	2000      	movs	r0, #0
 800a506:	f04f 0c0a 	mov.w	ip, #10
 800a50a:	4621      	mov	r1, r4
 800a50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a510:	3b30      	subs	r3, #48	; 0x30
 800a512:	2b09      	cmp	r3, #9
 800a514:	d94e      	bls.n	800a5b4 <_vfiprintf_r+0x1c4>
 800a516:	b1b0      	cbz	r0, 800a546 <_vfiprintf_r+0x156>
 800a518:	9207      	str	r2, [sp, #28]
 800a51a:	e014      	b.n	800a546 <_vfiprintf_r+0x156>
 800a51c:	eba0 0308 	sub.w	r3, r0, r8
 800a520:	fa09 f303 	lsl.w	r3, r9, r3
 800a524:	4313      	orrs	r3, r2
 800a526:	9304      	str	r3, [sp, #16]
 800a528:	46a2      	mov	sl, r4
 800a52a:	e7d2      	b.n	800a4d2 <_vfiprintf_r+0xe2>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	1d19      	adds	r1, r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfbb      	ittet	lt
 800a538:	425b      	neglt	r3, r3
 800a53a:	f042 0202 	orrlt.w	r2, r2, #2
 800a53e:	9307      	strge	r3, [sp, #28]
 800a540:	9307      	strlt	r3, [sp, #28]
 800a542:	bfb8      	it	lt
 800a544:	9204      	strlt	r2, [sp, #16]
 800a546:	7823      	ldrb	r3, [r4, #0]
 800a548:	2b2e      	cmp	r3, #46	; 0x2e
 800a54a:	d10c      	bne.n	800a566 <_vfiprintf_r+0x176>
 800a54c:	7863      	ldrb	r3, [r4, #1]
 800a54e:	2b2a      	cmp	r3, #42	; 0x2a
 800a550:	d135      	bne.n	800a5be <_vfiprintf_r+0x1ce>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	9203      	str	r2, [sp, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfb8      	it	lt
 800a55e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a562:	3402      	adds	r4, #2
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a64c <_vfiprintf_r+0x25c>
 800a56a:	7821      	ldrb	r1, [r4, #0]
 800a56c:	2203      	movs	r2, #3
 800a56e:	4650      	mov	r0, sl
 800a570:	f7f5 fe36 	bl	80001e0 <memchr>
 800a574:	b140      	cbz	r0, 800a588 <_vfiprintf_r+0x198>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	eba0 000a 	sub.w	r0, r0, sl
 800a57c:	fa03 f000 	lsl.w	r0, r3, r0
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	4303      	orrs	r3, r0
 800a584:	3401      	adds	r4, #1
 800a586:	9304      	str	r3, [sp, #16]
 800a588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58c:	482c      	ldr	r0, [pc, #176]	; (800a640 <_vfiprintf_r+0x250>)
 800a58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a592:	2206      	movs	r2, #6
 800a594:	f7f5 fe24 	bl	80001e0 <memchr>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d03f      	beq.n	800a61c <_vfiprintf_r+0x22c>
 800a59c:	4b29      	ldr	r3, [pc, #164]	; (800a644 <_vfiprintf_r+0x254>)
 800a59e:	bb1b      	cbnz	r3, 800a5e8 <_vfiprintf_r+0x1f8>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	3307      	adds	r3, #7
 800a5a4:	f023 0307 	bic.w	r3, r3, #7
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	9303      	str	r3, [sp, #12]
 800a5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ae:	443b      	add	r3, r7
 800a5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b2:	e767      	b.n	800a484 <_vfiprintf_r+0x94>
 800a5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e7a5      	b.n	800a50a <_vfiprintf_r+0x11a>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	3401      	adds	r4, #1
 800a5c2:	9305      	str	r3, [sp, #20]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 0c0a 	mov.w	ip, #10
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d0:	3a30      	subs	r2, #48	; 0x30
 800a5d2:	2a09      	cmp	r2, #9
 800a5d4:	d903      	bls.n	800a5de <_vfiprintf_r+0x1ee>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0c5      	beq.n	800a566 <_vfiprintf_r+0x176>
 800a5da:	9105      	str	r1, [sp, #20]
 800a5dc:	e7c3      	b.n	800a566 <_vfiprintf_r+0x176>
 800a5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e7f0      	b.n	800a5ca <_vfiprintf_r+0x1da>
 800a5e8:	ab03      	add	r3, sp, #12
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	4b16      	ldr	r3, [pc, #88]	; (800a648 <_vfiprintf_r+0x258>)
 800a5f0:	a904      	add	r1, sp, #16
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7fb fae0 	bl	8005bb8 <_printf_float>
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	1c78      	adds	r0, r7, #1
 800a5fc:	d1d6      	bne.n	800a5ac <_vfiprintf_r+0x1bc>
 800a5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a600:	07d9      	lsls	r1, r3, #31
 800a602:	d405      	bmi.n	800a610 <_vfiprintf_r+0x220>
 800a604:	89ab      	ldrh	r3, [r5, #12]
 800a606:	059a      	lsls	r2, r3, #22
 800a608:	d402      	bmi.n	800a610 <_vfiprintf_r+0x220>
 800a60a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a60c:	f7fe fd3e 	bl	800908c <__retarget_lock_release_recursive>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	065b      	lsls	r3, r3, #25
 800a614:	f53f af12 	bmi.w	800a43c <_vfiprintf_r+0x4c>
 800a618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61a:	e711      	b.n	800a440 <_vfiprintf_r+0x50>
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <_vfiprintf_r+0x258>)
 800a624:	a904      	add	r1, sp, #16
 800a626:	4630      	mov	r0, r6
 800a628:	f7fb fd6a 	bl	8006100 <_printf_i>
 800a62c:	e7e4      	b.n	800a5f8 <_vfiprintf_r+0x208>
 800a62e:	bf00      	nop
 800a630:	0800b544 	.word	0x0800b544
 800a634:	0800b564 	.word	0x0800b564
 800a638:	0800b524 	.word	0x0800b524
 800a63c:	0800b75c 	.word	0x0800b75c
 800a640:	0800b766 	.word	0x0800b766
 800a644:	08005bb9 	.word	0x08005bb9
 800a648:	0800a3cb 	.word	0x0800a3cb
 800a64c:	0800b762 	.word	0x0800b762

0800a650 <_scanf_chars>:
 800a650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a654:	4615      	mov	r5, r2
 800a656:	688a      	ldr	r2, [r1, #8]
 800a658:	4680      	mov	r8, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b932      	cbnz	r2, 800a66c <_scanf_chars+0x1c>
 800a65e:	698a      	ldr	r2, [r1, #24]
 800a660:	2a00      	cmp	r2, #0
 800a662:	bf0c      	ite	eq
 800a664:	2201      	moveq	r2, #1
 800a666:	f04f 32ff 	movne.w	r2, #4294967295
 800a66a:	608a      	str	r2, [r1, #8]
 800a66c:	6822      	ldr	r2, [r4, #0]
 800a66e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a700 <_scanf_chars+0xb0>
 800a672:	06d1      	lsls	r1, r2, #27
 800a674:	bf5f      	itttt	pl
 800a676:	681a      	ldrpl	r2, [r3, #0]
 800a678:	1d11      	addpl	r1, r2, #4
 800a67a:	6019      	strpl	r1, [r3, #0]
 800a67c:	6816      	ldrpl	r6, [r2, #0]
 800a67e:	2700      	movs	r7, #0
 800a680:	69a0      	ldr	r0, [r4, #24]
 800a682:	b188      	cbz	r0, 800a6a8 <_scanf_chars+0x58>
 800a684:	2801      	cmp	r0, #1
 800a686:	d107      	bne.n	800a698 <_scanf_chars+0x48>
 800a688:	682a      	ldr	r2, [r5, #0]
 800a68a:	7811      	ldrb	r1, [r2, #0]
 800a68c:	6962      	ldr	r2, [r4, #20]
 800a68e:	5c52      	ldrb	r2, [r2, r1]
 800a690:	b952      	cbnz	r2, 800a6a8 <_scanf_chars+0x58>
 800a692:	2f00      	cmp	r7, #0
 800a694:	d031      	beq.n	800a6fa <_scanf_chars+0xaa>
 800a696:	e022      	b.n	800a6de <_scanf_chars+0x8e>
 800a698:	2802      	cmp	r0, #2
 800a69a:	d120      	bne.n	800a6de <_scanf_chars+0x8e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a6a4:	071b      	lsls	r3, r3, #28
 800a6a6:	d41a      	bmi.n	800a6de <_scanf_chars+0x8e>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	06da      	lsls	r2, r3, #27
 800a6ac:	bf5e      	ittt	pl
 800a6ae:	682b      	ldrpl	r3, [r5, #0]
 800a6b0:	781b      	ldrbpl	r3, [r3, #0]
 800a6b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a6b6:	682a      	ldr	r2, [r5, #0]
 800a6b8:	686b      	ldr	r3, [r5, #4]
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	68a2      	ldr	r2, [r4, #8]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	3a01      	subs	r2, #1
 800a6c4:	606b      	str	r3, [r5, #4]
 800a6c6:	3701      	adds	r7, #1
 800a6c8:	60a2      	str	r2, [r4, #8]
 800a6ca:	b142      	cbz	r2, 800a6de <_scanf_chars+0x8e>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dcd7      	bgt.n	800a680 <_scanf_chars+0x30>
 800a6d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4798      	blx	r3
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0d0      	beq.n	800a680 <_scanf_chars+0x30>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	f013 0310 	ands.w	r3, r3, #16
 800a6e4:	d105      	bne.n	800a6f2 <_scanf_chars+0xa2>
 800a6e6:	68e2      	ldr	r2, [r4, #12]
 800a6e8:	3201      	adds	r2, #1
 800a6ea:	60e2      	str	r2, [r4, #12]
 800a6ec:	69a2      	ldr	r2, [r4, #24]
 800a6ee:	b102      	cbz	r2, 800a6f2 <_scanf_chars+0xa2>
 800a6f0:	7033      	strb	r3, [r6, #0]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	443b      	add	r3, r7
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fe:	bf00      	nop
 800a700:	0800b391 	.word	0x0800b391

0800a704 <_scanf_i>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4698      	mov	r8, r3
 800a70a:	4b76      	ldr	r3, [pc, #472]	; (800a8e4 <_scanf_i+0x1e0>)
 800a70c:	460c      	mov	r4, r1
 800a70e:	4682      	mov	sl, r0
 800a710:	4616      	mov	r6, r2
 800a712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a716:	b087      	sub	sp, #28
 800a718:	ab03      	add	r3, sp, #12
 800a71a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a71e:	4b72      	ldr	r3, [pc, #456]	; (800a8e8 <_scanf_i+0x1e4>)
 800a720:	69a1      	ldr	r1, [r4, #24]
 800a722:	4a72      	ldr	r2, [pc, #456]	; (800a8ec <_scanf_i+0x1e8>)
 800a724:	2903      	cmp	r1, #3
 800a726:	bf18      	it	ne
 800a728:	461a      	movne	r2, r3
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	9201      	str	r2, [sp, #4]
 800a72e:	1e5a      	subs	r2, r3, #1
 800a730:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a734:	bf88      	it	hi
 800a736:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a73a:	4627      	mov	r7, r4
 800a73c:	bf82      	ittt	hi
 800a73e:	eb03 0905 	addhi.w	r9, r3, r5
 800a742:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a746:	60a3      	strhi	r3, [r4, #8]
 800a748:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a74c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a750:	bf98      	it	ls
 800a752:	f04f 0900 	movls.w	r9, #0
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	463d      	mov	r5, r7
 800a75a:	f04f 0b00 	mov.w	fp, #0
 800a75e:	6831      	ldr	r1, [r6, #0]
 800a760:	ab03      	add	r3, sp, #12
 800a762:	7809      	ldrb	r1, [r1, #0]
 800a764:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a768:	2202      	movs	r2, #2
 800a76a:	f7f5 fd39 	bl	80001e0 <memchr>
 800a76e:	b328      	cbz	r0, 800a7bc <_scanf_i+0xb8>
 800a770:	f1bb 0f01 	cmp.w	fp, #1
 800a774:	d159      	bne.n	800a82a <_scanf_i+0x126>
 800a776:	6862      	ldr	r2, [r4, #4]
 800a778:	b92a      	cbnz	r2, 800a786 <_scanf_i+0x82>
 800a77a:	6822      	ldr	r2, [r4, #0]
 800a77c:	2308      	movs	r3, #8
 800a77e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a782:	6063      	str	r3, [r4, #4]
 800a784:	6022      	str	r2, [r4, #0]
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a78c:	6022      	str	r2, [r4, #0]
 800a78e:	68a2      	ldr	r2, [r4, #8]
 800a790:	1e51      	subs	r1, r2, #1
 800a792:	60a1      	str	r1, [r4, #8]
 800a794:	b192      	cbz	r2, 800a7bc <_scanf_i+0xb8>
 800a796:	6832      	ldr	r2, [r6, #0]
 800a798:	1c51      	adds	r1, r2, #1
 800a79a:	6031      	str	r1, [r6, #0]
 800a79c:	7812      	ldrb	r2, [r2, #0]
 800a79e:	f805 2b01 	strb.w	r2, [r5], #1
 800a7a2:	6872      	ldr	r2, [r6, #4]
 800a7a4:	3a01      	subs	r2, #1
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	6072      	str	r2, [r6, #4]
 800a7aa:	dc07      	bgt.n	800a7bc <_scanf_i+0xb8>
 800a7ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4790      	blx	r2
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f040 8085 	bne.w	800a8c6 <_scanf_i+0x1c2>
 800a7bc:	f10b 0b01 	add.w	fp, fp, #1
 800a7c0:	f1bb 0f03 	cmp.w	fp, #3
 800a7c4:	d1cb      	bne.n	800a75e <_scanf_i+0x5a>
 800a7c6:	6863      	ldr	r3, [r4, #4]
 800a7c8:	b90b      	cbnz	r3, 800a7ce <_scanf_i+0xca>
 800a7ca:	230a      	movs	r3, #10
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	4947      	ldr	r1, [pc, #284]	; (800a8f0 <_scanf_i+0x1ec>)
 800a7d2:	6960      	ldr	r0, [r4, #20]
 800a7d4:	1ac9      	subs	r1, r1, r3
 800a7d6:	f000 f8ff 	bl	800a9d8 <__sccl>
 800a7da:	f04f 0b00 	mov.w	fp, #0
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d03d      	beq.n	800a862 <_scanf_i+0x15e>
 800a7e6:	6831      	ldr	r1, [r6, #0]
 800a7e8:	6960      	ldr	r0, [r4, #20]
 800a7ea:	f891 c000 	ldrb.w	ip, [r1]
 800a7ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d035      	beq.n	800a862 <_scanf_i+0x15e>
 800a7f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a7fa:	d124      	bne.n	800a846 <_scanf_i+0x142>
 800a7fc:	0510      	lsls	r0, r2, #20
 800a7fe:	d522      	bpl.n	800a846 <_scanf_i+0x142>
 800a800:	f10b 0b01 	add.w	fp, fp, #1
 800a804:	f1b9 0f00 	cmp.w	r9, #0
 800a808:	d003      	beq.n	800a812 <_scanf_i+0x10e>
 800a80a:	3301      	adds	r3, #1
 800a80c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a810:	60a3      	str	r3, [r4, #8]
 800a812:	6873      	ldr	r3, [r6, #4]
 800a814:	3b01      	subs	r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	6073      	str	r3, [r6, #4]
 800a81a:	dd1b      	ble.n	800a854 <_scanf_i+0x150>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	3301      	adds	r3, #1
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	68a3      	ldr	r3, [r4, #8]
 800a824:	3b01      	subs	r3, #1
 800a826:	60a3      	str	r3, [r4, #8]
 800a828:	e7d9      	b.n	800a7de <_scanf_i+0xda>
 800a82a:	f1bb 0f02 	cmp.w	fp, #2
 800a82e:	d1ae      	bne.n	800a78e <_scanf_i+0x8a>
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a836:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a83a:	d1bf      	bne.n	800a7bc <_scanf_i+0xb8>
 800a83c:	2310      	movs	r3, #16
 800a83e:	6063      	str	r3, [r4, #4]
 800a840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a844:	e7a2      	b.n	800a78c <_scanf_i+0x88>
 800a846:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a84a:	6022      	str	r2, [r4, #0]
 800a84c:	780b      	ldrb	r3, [r1, #0]
 800a84e:	f805 3b01 	strb.w	r3, [r5], #1
 800a852:	e7de      	b.n	800a812 <_scanf_i+0x10e>
 800a854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a858:	4631      	mov	r1, r6
 800a85a:	4650      	mov	r0, sl
 800a85c:	4798      	blx	r3
 800a85e:	2800      	cmp	r0, #0
 800a860:	d0df      	beq.n	800a822 <_scanf_i+0x11e>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	05db      	lsls	r3, r3, #23
 800a866:	d50d      	bpl.n	800a884 <_scanf_i+0x180>
 800a868:	42bd      	cmp	r5, r7
 800a86a:	d909      	bls.n	800a880 <_scanf_i+0x17c>
 800a86c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a874:	4632      	mov	r2, r6
 800a876:	4650      	mov	r0, sl
 800a878:	4798      	blx	r3
 800a87a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a87e:	464d      	mov	r5, r9
 800a880:	42bd      	cmp	r5, r7
 800a882:	d02d      	beq.n	800a8e0 <_scanf_i+0x1dc>
 800a884:	6822      	ldr	r2, [r4, #0]
 800a886:	f012 0210 	ands.w	r2, r2, #16
 800a88a:	d113      	bne.n	800a8b4 <_scanf_i+0x1b0>
 800a88c:	702a      	strb	r2, [r5, #0]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	9e01      	ldr	r6, [sp, #4]
 800a892:	4639      	mov	r1, r7
 800a894:	4650      	mov	r0, sl
 800a896:	47b0      	blx	r6
 800a898:	6821      	ldr	r1, [r4, #0]
 800a89a:	f8d8 3000 	ldr.w	r3, [r8]
 800a89e:	f011 0f20 	tst.w	r1, #32
 800a8a2:	d013      	beq.n	800a8cc <_scanf_i+0x1c8>
 800a8a4:	1d1a      	adds	r2, r3, #4
 800a8a6:	f8c8 2000 	str.w	r2, [r8]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6018      	str	r0, [r3, #0]
 800a8ae:	68e3      	ldr	r3, [r4, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60e3      	str	r3, [r4, #12]
 800a8b4:	1bed      	subs	r5, r5, r7
 800a8b6:	44ab      	add	fp, r5
 800a8b8:	6925      	ldr	r5, [r4, #16]
 800a8ba:	445d      	add	r5, fp
 800a8bc:	6125      	str	r5, [r4, #16]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	b007      	add	sp, #28
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c6:	f04f 0b00 	mov.w	fp, #0
 800a8ca:	e7ca      	b.n	800a862 <_scanf_i+0x15e>
 800a8cc:	1d1a      	adds	r2, r3, #4
 800a8ce:	f8c8 2000 	str.w	r2, [r8]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f011 0f01 	tst.w	r1, #1
 800a8d8:	bf14      	ite	ne
 800a8da:	8018      	strhne	r0, [r3, #0]
 800a8dc:	6018      	streq	r0, [r3, #0]
 800a8de:	e7e6      	b.n	800a8ae <_scanf_i+0x1aa>
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	e7ed      	b.n	800a8c0 <_scanf_i+0x1bc>
 800a8e4:	0800add0 	.word	0x0800add0
 800a8e8:	0800ab2d 	.word	0x0800ab2d
 800a8ec:	08007775 	.word	0x08007775
 800a8f0:	0800b786 	.word	0x0800b786

0800a8f4 <_putc_r>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b118      	cbz	r0, 800a906 <_putc_r+0x12>
 800a8fe:	6983      	ldr	r3, [r0, #24]
 800a900:	b90b      	cbnz	r3, 800a906 <_putc_r+0x12>
 800a902:	f7fd ffb1 	bl	8008868 <__sinit>
 800a906:	4b1c      	ldr	r3, [pc, #112]	; (800a978 <_putc_r+0x84>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	d124      	bne.n	800a956 <_putc_r+0x62>
 800a90c:	6874      	ldr	r4, [r6, #4]
 800a90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a910:	07d8      	lsls	r0, r3, #31
 800a912:	d405      	bmi.n	800a920 <_putc_r+0x2c>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	0599      	lsls	r1, r3, #22
 800a918:	d402      	bmi.n	800a920 <_putc_r+0x2c>
 800a91a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91c:	f7fe fbb5 	bl	800908a <__retarget_lock_acquire_recursive>
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	3b01      	subs	r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	60a3      	str	r3, [r4, #8]
 800a928:	da05      	bge.n	800a936 <_putc_r+0x42>
 800a92a:	69a2      	ldr	r2, [r4, #24]
 800a92c:	4293      	cmp	r3, r2
 800a92e:	db1c      	blt.n	800a96a <_putc_r+0x76>
 800a930:	b2eb      	uxtb	r3, r5
 800a932:	2b0a      	cmp	r3, #10
 800a934:	d019      	beq.n	800a96a <_putc_r+0x76>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	701d      	strb	r5, [r3, #0]
 800a93e:	b2ed      	uxtb	r5, r5
 800a940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a942:	07da      	lsls	r2, r3, #31
 800a944:	d405      	bmi.n	800a952 <_putc_r+0x5e>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	059b      	lsls	r3, r3, #22
 800a94a:	d402      	bmi.n	800a952 <_putc_r+0x5e>
 800a94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94e:	f7fe fb9d 	bl	800908c <__retarget_lock_release_recursive>
 800a952:	4628      	mov	r0, r5
 800a954:	bd70      	pop	{r4, r5, r6, pc}
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <_putc_r+0x88>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	d101      	bne.n	800a960 <_putc_r+0x6c>
 800a95c:	68b4      	ldr	r4, [r6, #8]
 800a95e:	e7d6      	b.n	800a90e <_putc_r+0x1a>
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <_putc_r+0x8c>)
 800a962:	429c      	cmp	r4, r3
 800a964:	bf08      	it	eq
 800a966:	68f4      	ldreq	r4, [r6, #12]
 800a968:	e7d1      	b.n	800a90e <_putc_r+0x1a>
 800a96a:	4629      	mov	r1, r5
 800a96c:	4622      	mov	r2, r4
 800a96e:	4630      	mov	r0, r6
 800a970:	f7fc ff02 	bl	8007778 <__swbuf_r>
 800a974:	4605      	mov	r5, r0
 800a976:	e7e3      	b.n	800a940 <_putc_r+0x4c>
 800a978:	0800b544 	.word	0x0800b544
 800a97c:	0800b564 	.word	0x0800b564
 800a980:	0800b524 	.word	0x0800b524

0800a984 <_read_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_read_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f7 fc38 	bl	8002208 <_read>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_read_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_read_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000850 	.word	0x20000850

0800a9a8 <nan>:
 800a9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9b0 <nan+0x8>
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	7ff80000 	.word	0x7ff80000

0800a9b8 <_sbrk_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d06      	ldr	r5, [pc, #24]	; (800a9d4 <_sbrk_r+0x1c>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	602b      	str	r3, [r5, #0]
 800a9c4:	f7f7 fc48 	bl	8002258 <_sbrk>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_sbrk_r+0x1a>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_sbrk_r+0x1a>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20000850 	.word	0x20000850

0800a9d8 <__sccl>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	780b      	ldrb	r3, [r1, #0]
 800a9dc:	4604      	mov	r4, r0
 800a9de:	2b5e      	cmp	r3, #94	; 0x5e
 800a9e0:	bf0b      	itete	eq
 800a9e2:	784b      	ldrbeq	r3, [r1, #1]
 800a9e4:	1c48      	addne	r0, r1, #1
 800a9e6:	1c88      	addeq	r0, r1, #2
 800a9e8:	2200      	movne	r2, #0
 800a9ea:	bf08      	it	eq
 800a9ec:	2201      	moveq	r2, #1
 800a9ee:	1e61      	subs	r1, r4, #1
 800a9f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a9f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a9f8:	42a9      	cmp	r1, r5
 800a9fa:	d1fb      	bne.n	800a9f4 <__sccl+0x1c>
 800a9fc:	b90b      	cbnz	r3, 800aa02 <__sccl+0x2a>
 800a9fe:	3801      	subs	r0, #1
 800aa00:	bd70      	pop	{r4, r5, r6, pc}
 800aa02:	f082 0201 	eor.w	r2, r2, #1
 800aa06:	54e2      	strb	r2, [r4, r3]
 800aa08:	4605      	mov	r5, r0
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800aa10:	292d      	cmp	r1, #45	; 0x2d
 800aa12:	d006      	beq.n	800aa22 <__sccl+0x4a>
 800aa14:	295d      	cmp	r1, #93	; 0x5d
 800aa16:	d0f3      	beq.n	800aa00 <__sccl+0x28>
 800aa18:	b909      	cbnz	r1, 800aa1e <__sccl+0x46>
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	e7f0      	b.n	800aa00 <__sccl+0x28>
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e7f1      	b.n	800aa06 <__sccl+0x2e>
 800aa22:	786e      	ldrb	r6, [r5, #1]
 800aa24:	2e5d      	cmp	r6, #93	; 0x5d
 800aa26:	d0fa      	beq.n	800aa1e <__sccl+0x46>
 800aa28:	42b3      	cmp	r3, r6
 800aa2a:	dcf8      	bgt.n	800aa1e <__sccl+0x46>
 800aa2c:	3502      	adds	r5, #2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	3101      	adds	r1, #1
 800aa32:	428e      	cmp	r6, r1
 800aa34:	5462      	strb	r2, [r4, r1]
 800aa36:	dcfb      	bgt.n	800aa30 <__sccl+0x58>
 800aa38:	1af1      	subs	r1, r6, r3
 800aa3a:	3901      	subs	r1, #1
 800aa3c:	1c58      	adds	r0, r3, #1
 800aa3e:	42b3      	cmp	r3, r6
 800aa40:	bfa8      	it	ge
 800aa42:	2100      	movge	r1, #0
 800aa44:	1843      	adds	r3, r0, r1
 800aa46:	e7e0      	b.n	800aa0a <__sccl+0x32>

0800aa48 <_strtoul_l.constprop.0>:
 800aa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4f36      	ldr	r7, [pc, #216]	; (800ab28 <_strtoul_l.constprop.0+0xe0>)
 800aa4e:	4686      	mov	lr, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	4628      	mov	r0, r5
 800aa54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa58:	5de6      	ldrb	r6, [r4, r7]
 800aa5a:	f016 0608 	ands.w	r6, r6, #8
 800aa5e:	d1f8      	bne.n	800aa52 <_strtoul_l.constprop.0+0xa>
 800aa60:	2c2d      	cmp	r4, #45	; 0x2d
 800aa62:	d12f      	bne.n	800aac4 <_strtoul_l.constprop.0+0x7c>
 800aa64:	782c      	ldrb	r4, [r5, #0]
 800aa66:	2601      	movs	r6, #1
 800aa68:	1c85      	adds	r5, r0, #2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d057      	beq.n	800ab1e <_strtoul_l.constprop.0+0xd6>
 800aa6e:	2b10      	cmp	r3, #16
 800aa70:	d109      	bne.n	800aa86 <_strtoul_l.constprop.0+0x3e>
 800aa72:	2c30      	cmp	r4, #48	; 0x30
 800aa74:	d107      	bne.n	800aa86 <_strtoul_l.constprop.0+0x3e>
 800aa76:	7828      	ldrb	r0, [r5, #0]
 800aa78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa7c:	2858      	cmp	r0, #88	; 0x58
 800aa7e:	d149      	bne.n	800ab14 <_strtoul_l.constprop.0+0xcc>
 800aa80:	786c      	ldrb	r4, [r5, #1]
 800aa82:	2310      	movs	r3, #16
 800aa84:	3502      	adds	r5, #2
 800aa86:	f04f 38ff 	mov.w	r8, #4294967295
 800aa8a:	2700      	movs	r7, #0
 800aa8c:	fbb8 f8f3 	udiv	r8, r8, r3
 800aa90:	fb03 f908 	mul.w	r9, r3, r8
 800aa94:	ea6f 0909 	mvn.w	r9, r9
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aa9e:	f1bc 0f09 	cmp.w	ip, #9
 800aaa2:	d814      	bhi.n	800aace <_strtoul_l.constprop.0+0x86>
 800aaa4:	4664      	mov	r4, ip
 800aaa6:	42a3      	cmp	r3, r4
 800aaa8:	dd22      	ble.n	800aaf0 <_strtoul_l.constprop.0+0xa8>
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	db1d      	blt.n	800aaea <_strtoul_l.constprop.0+0xa2>
 800aaae:	4580      	cmp	r8, r0
 800aab0:	d31b      	bcc.n	800aaea <_strtoul_l.constprop.0+0xa2>
 800aab2:	d101      	bne.n	800aab8 <_strtoul_l.constprop.0+0x70>
 800aab4:	45a1      	cmp	r9, r4
 800aab6:	db18      	blt.n	800aaea <_strtoul_l.constprop.0+0xa2>
 800aab8:	fb00 4003 	mla	r0, r0, r3, r4
 800aabc:	2701      	movs	r7, #1
 800aabe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aac2:	e7ea      	b.n	800aa9a <_strtoul_l.constprop.0+0x52>
 800aac4:	2c2b      	cmp	r4, #43	; 0x2b
 800aac6:	bf04      	itt	eq
 800aac8:	782c      	ldrbeq	r4, [r5, #0]
 800aaca:	1c85      	addeq	r5, r0, #2
 800aacc:	e7cd      	b.n	800aa6a <_strtoul_l.constprop.0+0x22>
 800aace:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aad2:	f1bc 0f19 	cmp.w	ip, #25
 800aad6:	d801      	bhi.n	800aadc <_strtoul_l.constprop.0+0x94>
 800aad8:	3c37      	subs	r4, #55	; 0x37
 800aada:	e7e4      	b.n	800aaa6 <_strtoul_l.constprop.0+0x5e>
 800aadc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aae0:	f1bc 0f19 	cmp.w	ip, #25
 800aae4:	d804      	bhi.n	800aaf0 <_strtoul_l.constprop.0+0xa8>
 800aae6:	3c57      	subs	r4, #87	; 0x57
 800aae8:	e7dd      	b.n	800aaa6 <_strtoul_l.constprop.0+0x5e>
 800aaea:	f04f 37ff 	mov.w	r7, #4294967295
 800aaee:	e7e6      	b.n	800aabe <_strtoul_l.constprop.0+0x76>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	da07      	bge.n	800ab04 <_strtoul_l.constprop.0+0xbc>
 800aaf4:	2322      	movs	r3, #34	; 0x22
 800aaf6:	f8ce 3000 	str.w	r3, [lr]
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295
 800aafe:	b932      	cbnz	r2, 800ab0e <_strtoul_l.constprop.0+0xc6>
 800ab00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab04:	b106      	cbz	r6, 800ab08 <_strtoul_l.constprop.0+0xc0>
 800ab06:	4240      	negs	r0, r0
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d0f9      	beq.n	800ab00 <_strtoul_l.constprop.0+0xb8>
 800ab0c:	b107      	cbz	r7, 800ab10 <_strtoul_l.constprop.0+0xc8>
 800ab0e:	1e69      	subs	r1, r5, #1
 800ab10:	6011      	str	r1, [r2, #0]
 800ab12:	e7f5      	b.n	800ab00 <_strtoul_l.constprop.0+0xb8>
 800ab14:	2430      	movs	r4, #48	; 0x30
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1b5      	bne.n	800aa86 <_strtoul_l.constprop.0+0x3e>
 800ab1a:	2308      	movs	r3, #8
 800ab1c:	e7b3      	b.n	800aa86 <_strtoul_l.constprop.0+0x3e>
 800ab1e:	2c30      	cmp	r4, #48	; 0x30
 800ab20:	d0a9      	beq.n	800aa76 <_strtoul_l.constprop.0+0x2e>
 800ab22:	230a      	movs	r3, #10
 800ab24:	e7af      	b.n	800aa86 <_strtoul_l.constprop.0+0x3e>
 800ab26:	bf00      	nop
 800ab28:	0800b391 	.word	0x0800b391

0800ab2c <_strtoul_r>:
 800ab2c:	f7ff bf8c 	b.w	800aa48 <_strtoul_l.constprop.0>

0800ab30 <__submore>:
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ab38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	d11d      	bne.n	800ab7c <__submore+0x4c>
 800ab40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab44:	f7ff f888 	bl	8009c58 <_malloc_r>
 800ab48:	b918      	cbnz	r0, 800ab52 <__submore+0x22>
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab56:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ab5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ab62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ab66:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ab6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ab6e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ab72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ab76:	6020      	str	r0, [r4, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7e8      	b.n	800ab4e <__submore+0x1e>
 800ab7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ab7e:	0077      	lsls	r7, r6, #1
 800ab80:	463a      	mov	r2, r7
 800ab82:	f000 f895 	bl	800acb0 <_realloc_r>
 800ab86:	4605      	mov	r5, r0
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0de      	beq.n	800ab4a <__submore+0x1a>
 800ab8c:	eb00 0806 	add.w	r8, r0, r6
 800ab90:	4601      	mov	r1, r0
 800ab92:	4632      	mov	r2, r6
 800ab94:	4640      	mov	r0, r8
 800ab96:	f7fe fb0d 	bl	80091b4 <memcpy>
 800ab9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ab9e:	f8c4 8000 	str.w	r8, [r4]
 800aba2:	e7e9      	b.n	800ab78 <__submore+0x48>

0800aba4 <__ascii_wctomb>:
 800aba4:	b149      	cbz	r1, 800abba <__ascii_wctomb+0x16>
 800aba6:	2aff      	cmp	r2, #255	; 0xff
 800aba8:	bf85      	ittet	hi
 800abaa:	238a      	movhi	r3, #138	; 0x8a
 800abac:	6003      	strhi	r3, [r0, #0]
 800abae:	700a      	strbls	r2, [r1, #0]
 800abb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800abb4:	bf98      	it	ls
 800abb6:	2001      	movls	r0, #1
 800abb8:	4770      	bx	lr
 800abba:	4608      	mov	r0, r1
 800abbc:	4770      	bx	lr
	...

0800abc0 <__assert_func>:
 800abc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abc2:	4614      	mov	r4, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <__assert_func+0x2c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4605      	mov	r5, r0
 800abcc:	68d8      	ldr	r0, [r3, #12]
 800abce:	b14c      	cbz	r4, 800abe4 <__assert_func+0x24>
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <__assert_func+0x30>)
 800abd2:	9100      	str	r1, [sp, #0]
 800abd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd8:	4906      	ldr	r1, [pc, #24]	; (800abf4 <__assert_func+0x34>)
 800abda:	462b      	mov	r3, r5
 800abdc:	f000 f80e 	bl	800abfc <fiprintf>
 800abe0:	f000 f895 	bl	800ad0e <abort>
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <__assert_func+0x38>)
 800abe6:	461c      	mov	r4, r3
 800abe8:	e7f3      	b.n	800abd2 <__assert_func+0x12>
 800abea:	bf00      	nop
 800abec:	2000003c 	.word	0x2000003c
 800abf0:	0800b788 	.word	0x0800b788
 800abf4:	0800b795 	.word	0x0800b795
 800abf8:	0800b0c7 	.word	0x0800b0c7

0800abfc <fiprintf>:
 800abfc:	b40e      	push	{r1, r2, r3}
 800abfe:	b503      	push	{r0, r1, lr}
 800ac00:	4601      	mov	r1, r0
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	4805      	ldr	r0, [pc, #20]	; (800ac1c <fiprintf+0x20>)
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	f7ff fbef 	bl	800a3f0 <_vfiprintf_r>
 800ac12:	b002      	add	sp, #8
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b003      	add	sp, #12
 800ac1a:	4770      	bx	lr
 800ac1c:	2000003c 	.word	0x2000003c

0800ac20 <_fstat_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	; (800ac40 <_fstat_r+0x20>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f7f7 fb0a 	bl	8002246 <_fstat>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d102      	bne.n	800ac3c <_fstat_r+0x1c>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	b103      	cbz	r3, 800ac3c <_fstat_r+0x1c>
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	bd38      	pop	{r3, r4, r5, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000850 	.word	0x20000850

0800ac44 <_isatty_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	; (800ac60 <_isatty_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f7 fafe 	bl	8002250 <_isatty>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_isatty_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_isatty_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20000850 	.word	0x20000850

0800ac64 <memmove>:
 800ac64:	4288      	cmp	r0, r1
 800ac66:	b510      	push	{r4, lr}
 800ac68:	eb01 0402 	add.w	r4, r1, r2
 800ac6c:	d902      	bls.n	800ac74 <memmove+0x10>
 800ac6e:	4284      	cmp	r4, r0
 800ac70:	4623      	mov	r3, r4
 800ac72:	d807      	bhi.n	800ac84 <memmove+0x20>
 800ac74:	1e43      	subs	r3, r0, #1
 800ac76:	42a1      	cmp	r1, r4
 800ac78:	d008      	beq.n	800ac8c <memmove+0x28>
 800ac7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac82:	e7f8      	b.n	800ac76 <memmove+0x12>
 800ac84:	4402      	add	r2, r0
 800ac86:	4601      	mov	r1, r0
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	d100      	bne.n	800ac8e <memmove+0x2a>
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac96:	e7f7      	b.n	800ac88 <memmove+0x24>

0800ac98 <__malloc_lock>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__malloc_lock+0x8>)
 800ac9a:	f7fe b9f6 	b.w	800908a <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20000844 	.word	0x20000844

0800aca4 <__malloc_unlock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__malloc_unlock+0x8>)
 800aca6:	f7fe b9f1 	b.w	800908c <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	20000844 	.word	0x20000844

0800acb0 <_realloc_r>:
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	4680      	mov	r8, r0
 800acb6:	4614      	mov	r4, r2
 800acb8:	460e      	mov	r6, r1
 800acba:	b921      	cbnz	r1, 800acc6 <_realloc_r+0x16>
 800acbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4611      	mov	r1, r2
 800acc2:	f7fe bfc9 	b.w	8009c58 <_malloc_r>
 800acc6:	b92a      	cbnz	r2, 800acd4 <_realloc_r+0x24>
 800acc8:	f7fe ff5a 	bl	8009b80 <_free_r>
 800accc:	4625      	mov	r5, r4
 800acce:	4628      	mov	r0, r5
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	f000 f822 	bl	800ad1c <_malloc_usable_size_r>
 800acd8:	4284      	cmp	r4, r0
 800acda:	4607      	mov	r7, r0
 800acdc:	d802      	bhi.n	800ace4 <_realloc_r+0x34>
 800acde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ace2:	d812      	bhi.n	800ad0a <_realloc_r+0x5a>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4640      	mov	r0, r8
 800ace8:	f7fe ffb6 	bl	8009c58 <_malloc_r>
 800acec:	4605      	mov	r5, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0ed      	beq.n	800acce <_realloc_r+0x1e>
 800acf2:	42bc      	cmp	r4, r7
 800acf4:	4622      	mov	r2, r4
 800acf6:	4631      	mov	r1, r6
 800acf8:	bf28      	it	cs
 800acfa:	463a      	movcs	r2, r7
 800acfc:	f7fe fa5a 	bl	80091b4 <memcpy>
 800ad00:	4631      	mov	r1, r6
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7fe ff3c 	bl	8009b80 <_free_r>
 800ad08:	e7e1      	b.n	800acce <_realloc_r+0x1e>
 800ad0a:	4635      	mov	r5, r6
 800ad0c:	e7df      	b.n	800acce <_realloc_r+0x1e>

0800ad0e <abort>:
 800ad0e:	b508      	push	{r3, lr}
 800ad10:	2006      	movs	r0, #6
 800ad12:	f000 f833 	bl	800ad7c <raise>
 800ad16:	2001      	movs	r0, #1
 800ad18:	f7f7 fa70 	bl	80021fc <_exit>

0800ad1c <_malloc_usable_size_r>:
 800ad1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad20:	1f18      	subs	r0, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	bfbc      	itt	lt
 800ad26:	580b      	ldrlt	r3, [r1, r0]
 800ad28:	18c0      	addlt	r0, r0, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_raise_r>:
 800ad2c:	291f      	cmp	r1, #31
 800ad2e:	b538      	push	{r3, r4, r5, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	d904      	bls.n	800ad40 <_raise_r+0x14>
 800ad36:	2316      	movs	r3, #22
 800ad38:	6003      	str	r3, [r0, #0]
 800ad3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad42:	b112      	cbz	r2, 800ad4a <_raise_r+0x1e>
 800ad44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad48:	b94b      	cbnz	r3, 800ad5e <_raise_r+0x32>
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 f830 	bl	800adb0 <_getpid_r>
 800ad50:	462a      	mov	r2, r5
 800ad52:	4601      	mov	r1, r0
 800ad54:	4620      	mov	r0, r4
 800ad56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad5a:	f000 b817 	b.w	800ad8c <_kill_r>
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d00a      	beq.n	800ad78 <_raise_r+0x4c>
 800ad62:	1c59      	adds	r1, r3, #1
 800ad64:	d103      	bne.n	800ad6e <_raise_r+0x42>
 800ad66:	2316      	movs	r3, #22
 800ad68:	6003      	str	r3, [r0, #0]
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	e7e7      	b.n	800ad3e <_raise_r+0x12>
 800ad6e:	2400      	movs	r4, #0
 800ad70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad74:	4628      	mov	r0, r5
 800ad76:	4798      	blx	r3
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e7e0      	b.n	800ad3e <_raise_r+0x12>

0800ad7c <raise>:
 800ad7c:	4b02      	ldr	r3, [pc, #8]	; (800ad88 <raise+0xc>)
 800ad7e:	4601      	mov	r1, r0
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f7ff bfd3 	b.w	800ad2c <_raise_r>
 800ad86:	bf00      	nop
 800ad88:	2000003c 	.word	0x2000003c

0800ad8c <_kill_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d07      	ldr	r5, [pc, #28]	; (800adac <_kill_r+0x20>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	4604      	mov	r4, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	4611      	mov	r1, r2
 800ad98:	602b      	str	r3, [r5, #0]
 800ad9a:	f7f7 fa27 	bl	80021ec <_kill>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	d102      	bne.n	800ada8 <_kill_r+0x1c>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	b103      	cbz	r3, 800ada8 <_kill_r+0x1c>
 800ada6:	6023      	str	r3, [r4, #0]
 800ada8:	bd38      	pop	{r3, r4, r5, pc}
 800adaa:	bf00      	nop
 800adac:	20000850 	.word	0x20000850

0800adb0 <_getpid_r>:
 800adb0:	f7f7 ba1a 	b.w	80021e8 <_getpid>

0800adb4 <_init>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr

0800adc0 <_fini>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr
