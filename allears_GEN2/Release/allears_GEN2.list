
allears_GEN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  0800b310  0800b310  0001b310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcfc  0800bcfc  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcfc  0800bcfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd04  0800bd04  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd04  0800bd04  0001bd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800bd0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  20000214  0800bf20  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200009ec  0800bf20  000209ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000254c3  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005572  00000000  00000000  00045707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001383e  00000000  00000000  0004ac79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0005e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f08  00000000  00000000  0005f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b093  00000000  00000000  00061798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000079d0  00000000  00000000  0007c82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000841fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005144  00000000  00000000  0008424c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2f4 	.word	0x0800b2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800b2f4 	.word	0x0800b2f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ErrorCallback>:
	}
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	adc1_cur_state = ECHO_ADC1_ERROR;
 8000ff8:	4a02      	ldr	r2, [pc, #8]	; (8001004 <HAL_ADC_ErrorCallback+0xc>)
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	7013      	strb	r3, [r2, #0]
	adc2_cur_state = ECHO_ADC2_ERROR;
 8000ffe:	4a02      	ldr	r2, [pc, #8]	; (8001008 <HAL_ADC_ErrorCallback+0x10>)
 8001000:	7013      	strb	r3, [r2, #0]
//HAL_UART_Transmit(&huart2, (uint8_t*) "ADC ERROR CALLBACK!!\r\n", 22, 1000);
}
 8001002:	4770      	bx	lr
 8001004:	20000000 	.word	0x20000000
 8001008:	20000001 	.word	0x20000001

0800100c <Echo_ADC1_Enable>:

/*
 * ADC ENABLE
 * */
void Echo_ADC1_Enable(void)
{
 800100c:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <Echo_ADC1_Enable+0x18>)
 8001010:	217f      	movs	r1, #127	; 0x7f
 8001012:	f002 f923 	bl	800325c <HAL_ADCEx_Calibration_Start>
 8001016:	b118      	cbz	r0, 8001020 <Echo_ADC1_Enable+0x14>
	{
		Error_Handler();
	}
}
 8001018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800101c:	f001 b91e 	b.w	800225c <Error_Handler>
}
 8001020:	bd08      	pop	{r3, pc}
 8001022:	bf00      	nop
 8001024:	200005f8 	.word	0x200005f8

08001028 <Echo_ADC2_Enable>:

void Echo_ADC2_Enable(void)
{
 8001028:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <Echo_ADC2_Enable+0x18>)
 800102c:	217f      	movs	r1, #127	; 0x7f
 800102e:	f002 f915 	bl	800325c <HAL_ADCEx_Calibration_Start>
 8001032:	b118      	cbz	r0, 800103c <Echo_ADC2_Enable+0x14>
	{
		Error_Handler();
	}
}
 8001034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001038:	f001 b910 	b.w	800225c <Error_Handler>
}
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	2000065c 	.word	0x2000065c

08001044 <Echo_ADC_State_Init>:

/*
 * ADC INIT
 * */
void Echo_ADC_State_Init(void)
{
 8001044:	b508      	push	{r3, lr}
		Echo_Stop_ADC1_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC1_CUR_STATE = state;
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <Echo_ADC_State_Init+0x18>)
 8001048:	2300      	movs	r3, #0
 800104a:	7013      	strb	r3, [r2, #0]
		Echo_Stop_ADC2_Conv();
		break;
	default:
		break;
	}
	ECHO_ADC2_CUR_STATE = state;
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <Echo_ADC_State_Init+0x1c>)
 800104e:	7013      	strb	r3, [r2, #0]
	Echo_ADC1_Enable();
 8001050:	f7ff ffdc 	bl	800100c <Echo_ADC1_Enable>
}
 8001054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_ADC2_Enable();
 8001058:	f7ff bfe6 	b.w	8001028 <Echo_ADC2_Enable>
 800105c:	20000230 	.word	0x20000230
 8001060:	20000231 	.word	0x20000231

08001064 <Echo_Start_ADC1_Conv>:
{
 8001064:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_CONV_BUF,
 8001066:	4905      	ldr	r1, [pc, #20]	; (800107c <Echo_Start_ADC1_Conv+0x18>)
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <Echo_Start_ADC1_Conv+0x1c>)
 800106a:	220a      	movs	r2, #10
 800106c:	f002 f806 	bl	800307c <HAL_ADC_Start_DMA>
 8001070:	b118      	cbz	r0, 800107a <Echo_Start_ADC1_Conv+0x16>
}
 8001072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001076:	f001 b8f1 	b.w	800225c <Error_Handler>
}
 800107a:	bd08      	pop	{r3, pc}
 800107c:	20000232 	.word	0x20000232
 8001080:	200005f8 	.word	0x200005f8

08001084 <HAL_ADC_ConvCpltCallback>:
{
 8001084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (hadc->Instance == hadc1.Instance)
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_ADC_ConvCpltCallback+0xb0>)
 800108a:	6802      	ldr	r2, [r0, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
{
 8001090:	4604      	mov	r4, r0
	if (hadc->Instance == hadc1.Instance)
 8001092:	d13b      	bne.n	800110c <HAL_ADC_ConvCpltCallback+0x88>
			setpup_adc[index] = ADC1_CONV_BUF[index]; // STEPUP_FEEDBACK
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001098:	f103 0114 	add.w	r1, r3, #20
 800109c:	4616      	mov	r6, r2
 800109e:	f853 0b04 	ldr.w	r0, [r3], #4
 80010a2:	f842 0b04 	str.w	r0, [r2], #4
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d1f9      	bne.n	800109e <HAL_ADC_ConvCpltCallback+0x1a>
		if (vpw_set_flag == true)
 80010aa:	4d25      	ldr	r5, [pc, #148]	; (8001140 <HAL_ADC_ConvCpltCallback+0xbc>)
 80010ac:	782b      	ldrb	r3, [r5, #0]
 80010ae:	b35b      	cbz	r3, 8001108 <HAL_ADC_ConvCpltCallback+0x84>
			if (fabs(setpup_adc[0] - setpup_adc[1]) < 20
 80010b0:	f8b6 8000 	ldrh.w	r8, [r6]
 80010b4:	8877      	ldrh	r7, [r6, #2]
 80010b6:	eba8 0007 	sub.w	r0, r8, r7
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_ADC_ConvCpltCallback+0xc0>)
 80010c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010c4:	2200      	movs	r2, #0
 80010c6:	f7ff fd09 	bl	8000adc <__aeabi_dcmplt>
 80010ca:	b1e8      	cbz	r0, 8001108 <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[1] - setpup_adc[2]) < 20
 80010cc:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 80010d0:	eba7 0009 	sub.w	r0, r7, r9
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_i2d>
 80010d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_ADC_ConvCpltCallback+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	4639      	mov	r1, r7
 80010e2:	f7ff fcfb 	bl	8000adc <__aeabi_dcmplt>
 80010e6:	b178      	cbz	r0, 8001108 <HAL_ADC_ConvCpltCallback+0x84>
					&& fabs(setpup_adc[2] - setpup_adc[0]) < 20)
 80010e8:	eba9 0008 	sub.w	r0, r9, r8
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_ADC_ConvCpltCallback+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	4639      	mov	r1, r7
 80010fa:	f7ff fcef 	bl	8000adc <__aeabi_dcmplt>
 80010fe:	b118      	cbz	r0, 8001108 <HAL_ADC_ConvCpltCallback+0x84>
				Echo_VPW_TP_OFF();
 8001100:	f000 fb93 	bl	800182a <Echo_VPW_TP_OFF>
				vpw_set_flag = false;
 8001104:	2300      	movs	r3, #0
 8001106:	702b      	strb	r3, [r5, #0]
		Echo_Start_ADC1_Conv();
 8001108:	f7ff ffac 	bl	8001064 <Echo_Start_ADC1_Conv>
	if (hadc->Instance == hadc2.Instance)
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_ADC_ConvCpltCallback+0xc4>)
 800110e:	6822      	ldr	r2, [r4, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d10c      	bne.n	8001130 <HAL_ADC_ConvCpltCallback+0xac>
			peak_adc[index] = ADC2_CONV_BUF[index]; // PEAK_DETECTION
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_ADC_ConvCpltCallback+0xcc>)
 800111a:	f103 0114 	add.w	r1, r3, #20
 800111e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001122:	f842 0b04 	str.w	r0, [r2], #4
 8001126:	428b      	cmp	r3, r1
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_ConvCpltCallback+0x9a>
		adc2_cur_state = ECHO_ADC2_CONV_OK; //Echo_Set_ADC2_State(ECHO_ADC2_CONV_OK);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_ADC_ConvCpltCallback+0xd0>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001134:	200005f8 	.word	0x200005f8
 8001138:	20000232 	.word	0x20000232
 800113c:	2000026e 	.word	0x2000026e
 8001140:	200004ee 	.word	0x200004ee
 8001144:	40340000 	.word	0x40340000
 8001148:	2000065c 	.word	0x2000065c
 800114c:	20000246 	.word	0x20000246
 8001150:	2000025a 	.word	0x2000025a
 8001154:	20000001 	.word	0x20000001

08001158 <Echo_Stop_ADC1_Conv>:
{
 8001158:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <Echo_Stop_ADC1_Conv+0x14>)
 800115c:	f002 f83c 	bl	80031d8 <HAL_ADC_Stop_DMA>
 8001160:	b118      	cbz	r0, 800116a <Echo_Stop_ADC1_Conv+0x12>
}
 8001162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001166:	f001 b879 	b.w	800225c <Error_Handler>
}
 800116a:	bd08      	pop	{r3, pc}
 800116c:	200005f8 	.word	0x200005f8

08001170 <Echo_Stop_ADC2_Conv>:
{
 8001170:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <Echo_Stop_ADC2_Conv+0x14>)
 8001174:	f002 f830 	bl	80031d8 <HAL_ADC_Stop_DMA>
 8001178:	b118      	cbz	r0, 8001182 <Echo_Stop_ADC2_Conv+0x12>
}
 800117a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800117e:	f001 b86d 	b.w	800225c <Error_Handler>
}
 8001182:	bd08      	pop	{r3, pc}
 8001184:	2000065c 	.word	0x2000065c

08001188 <Echo_Stepup_ADC1_AVG>:
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <Echo_Stepup_ADC1_AVG+0x28>)
	float adc1_avg = 0;
 800118a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80011b4 <Echo_Stepup_ADC1_AVG+0x2c>
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 800118e:	2300      	movs	r3, #0
		adc1_avg += setpup_adc[i];
 8001190:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001194:	ee07 1a10 	vmov	s14, r1
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 8001198:	3301      	adds	r3, #1
		adc1_avg += setpup_adc[i];
 800119a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 800119e:	2b0a      	cmp	r3, #10
		adc1_avg += setpup_adc[i];
 80011a0:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i = 0; i < ECHO_ADC1_RCV_SIZE; i++)
 80011a4:	d1f4      	bne.n	8001190 <Echo_Stepup_ADC1_AVG+0x8>
}
 80011a6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80011ae:	4770      	bx	lr
 80011b0:	2000026e 	.word	0x2000026e
 80011b4:	00000000 	.word	0x00000000

080011b8 <Echo_ADC_Calc_Stepup_V>:
	f_adc_val = in_adc_val / 4095.f;
 80011b8:	ee07 0a90 	vmov	s15, r0
 80011bc:	eddf 6a08 	vldr	s13, [pc, #32]	; 80011e0 <Echo_ADC_Calc_Stepup_V+0x28>
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80011c4:	ee30 0a20 	vadd.f32	s0, s0, s1
	f_adc_val = in_adc_val / 4095.f;
 80011c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	v_out = (v_ref * f_adc_val) * ((r1 + r2) / r2);
 80011cc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011e4 <Echo_ADC_Calc_Stepup_V+0x2c>
 80011d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d4:	ee80 7a20 	vdiv.f32	s14, s0, s1
}
 80011d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	457ff000 	.word	0x457ff000
 80011e4:	40533333 	.word	0x40533333

080011e8 <Echo_Get_ADC1_State>:
}
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <Echo_Get_ADC1_State+0x8>)
 80011ea:	7818      	ldrb	r0, [r3, #0]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000230 	.word	0x20000230

080011f4 <Echo_Set_ADC1_State>:
	switch (state)
 80011f4:	1e43      	subs	r3, r0, #1
{
 80011f6:	b510      	push	{r4, lr}
 80011f8:	4604      	mov	r4, r0
	switch (state)
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d806      	bhi.n	800120c <Echo_Set_ADC1_State+0x18>
 80011fe:	e8df f003 	tbb	[pc, r3]
 8001202:	0803      	.short	0x0803
 8001204:	0b05      	.short	0x0b05
 8001206:	03          	.byte	0x03
 8001207:	00          	.byte	0x00
		Echo_Stop_ADC1_Conv();
 8001208:	f7ff ffa6 	bl	8001158 <Echo_Stop_ADC1_Conv>
	ECHO_ADC1_CUR_STATE = state;
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <Echo_Set_ADC1_State+0x2c>)
 800120e:	701c      	strb	r4, [r3, #0]
}
 8001210:	bd10      	pop	{r4, pc}
		Echo_Start_ADC1_Conv();
 8001212:	f7ff ff27 	bl	8001064 <Echo_Start_ADC1_Conv>
		break;
 8001216:	e7f9      	b.n	800120c <Echo_Set_ADC1_State+0x18>
		adc1_cur_state = ECHO_ADC1_RUN;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <Echo_Set_ADC1_State+0x30>)
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
		break;
 800121e:	e7f5      	b.n	800120c <Echo_Set_ADC1_State+0x18>
 8001220:	20000230 	.word	0x20000230
 8001224:	20000000 	.word	0x20000000

08001228 <Echo_ADC_Handle>:
	if (ECHO_ADC1_CUR_STATE != adc1_cur_state)
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <Echo_ADC_Handle+0x14>)
 800122a:	7818      	ldrb	r0, [r3, #0]
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <Echo_ADC_Handle+0x18>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4283      	cmp	r3, r0
 8001232:	d001      	beq.n	8001238 <Echo_ADC_Handle+0x10>
		Echo_Set_ADC1_State(adc1_cur_state);
 8001234:	f7ff bfde 	b.w	80011f4 <Echo_Set_ADC1_State>
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000
 8001240:	20000230 	.word	0x20000230

08001244 <Echo_Btn_IsHandled>:
echo_btn_state_data_t echo_btn_state;

bool Echo_Btn_IsHandled(void)
{
	return ECHO_BTN_STATE_HANDLED;
}
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <Echo_Btn_IsHandled+0x8>)
 8001246:	7898      	ldrb	r0, [r3, #2]
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000284 	.word	0x20000284

08001250 <Echo_Btn_Handled_Clear>:

void Echo_Btn_Handled_Clear(void)
{
	ECHO_BTN_STATE_HANDLED = false;
 8001250:	4b01      	ldr	r3, [pc, #4]	; (8001258 <Echo_Btn_Handled_Clear+0x8>)
 8001252:	2200      	movs	r2, #0
 8001254:	709a      	strb	r2, [r3, #2]
}
 8001256:	4770      	bx	lr
 8001258:	20000284 	.word	0x20000284

0800125c <Echo_Btn_Handle>:
{
	ECHO_BTN_STATE_HANDLE_ENABLE = enable;
}

void Echo_Btn_Handle(void)
{
 800125c:	b508      	push	{r3, lr}
	char res_msg[10] =
	{ '\0', };
#endif

	/* Only works when battery is normal level */
	pressed = ECHO_BTN_IS_PRESSED();
 800125e:	2110      	movs	r1, #16
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f002 fc90 	bl	8003b88 <HAL_GPIO_ReadPin>

	if (pressed != ECHO_BTN_STATE_PRESSED)
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <Echo_Btn_Handle+0x44>)
	pressed = ECHO_BTN_IS_PRESSED();
 800126a:	4601      	mov	r1, r0
	if (pressed != ECHO_BTN_STATE_PRESSED)
 800126c:	781a      	ldrb	r2, [r3, #0]
	pressed = ECHO_BTN_IS_PRESSED();
 800126e:	fab0 f080 	clz	r0, r0
 8001272:	0940      	lsrs	r0, r0, #5
	if (pressed != ECHO_BTN_STATE_PRESSED)
 8001274:	4282      	cmp	r2, r0
 8001276:	d005      	beq.n	8001284 <Echo_Btn_Handle+0x28>
	{
		ECHO_BTN_STATE_PRESSED = pressed;
 8001278:	7018      	strb	r0, [r3, #0]
#ifdef DEBUG
		sprintf((char*) res_msg, (const char*) "BTN: %d\r\n", pressed);
		ECHO_SHELL_PRINT(("%s\n",res_msg));
#endif

		if (ECHO_BTN_STATE_PRESSED == false)
 800127a:	b911      	cbnz	r1, 8001282 <Echo_Btn_Handle+0x26>

		}
		else
		{
			/* BUTTON PRESSED, Send Signal >> echo_state.c */
			ECHO_BTN_STATE_HANDLED = true;
 800127c:	2201      	movs	r2, #1
 800127e:	709a      	strb	r2, [r3, #2]
			ECHO_BTN_STATE_HELD_TICK = 0;
 8001280:	6059      	str	r1, [r3, #4]
		else
		{
			/* Ignored */
		}
	}
}
 8001282:	bd08      	pop	{r3, pc}
	else if (ECHO_BTN_STATE_PRESSED == true)
 8001284:	2a00      	cmp	r2, #0
 8001286:	d0fc      	beq.n	8001282 <Echo_Btn_Handle+0x26>
		if (ECHO_BTN_STATE_HELD_TICK == ECHO_BTN_HELD_TIME)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800128e:	d103      	bne.n	8001298 <Echo_Btn_Handle+0x3c>
			ECHO_BTN_STATE_HELD_TICK++;
 8001290:	f240 32e9 	movw	r2, #1001	; 0x3e9
			ECHO_BTN_STATE_HELD_TICK++;
 8001294:	605a      	str	r2, [r3, #4]
}
 8001296:	e7f4      	b.n	8001282 <Echo_Btn_Handle+0x26>
		else if (ECHO_BTN_STATE_HELD_TICK < ECHO_BTN_HELD_TIME)
 8001298:	d2f3      	bcs.n	8001282 <Echo_Btn_Handle+0x26>
			ECHO_BTN_STATE_HELD_TICK++;
 800129a:	3201      	adds	r2, #1
 800129c:	e7fa      	b.n	8001294 <Echo_Btn_Handle+0x38>
 800129e:	bf00      	nop
 80012a0:	20000284 	.word	0x20000284

080012a4 <Echo_Flash_Write>:
{
	return FLASH_BANK_1;
}

HAL_StatusTypeDef Echo_Flash_Write()
{
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80012a6:	f002 fa53 	bl	8003750 <HAL_FLASH_Unlock>
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <Echo_Flash_Write+0xb8>)
 80012ac:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80012b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b4:	b291      	uxth	r1, r2
 80012b6:	4299      	cmp	r1, r3
 80012b8:	d035      	beq.n	8001326 <Echo_Flash_Write+0x82>
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <Echo_Flash_Write+0xbc>)
 80012bc:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80012c0:	4a28      	ldr	r2, [pc, #160]	; (8001364 <Echo_Flash_Write+0xc0>)
 80012c2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d82d      	bhi.n	8001326 <Echo_Flash_Write+0x82>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	0adb      	lsrs	r3, r3, #11

	/* Erase the user Flash area*/
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <Echo_Flash_Write+0xc4>)
 80012d0:	6013      	str	r3, [r2, #0]
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80012d2:	4a22      	ldr	r2, [pc, #136]	; (800135c <Echo_Flash_Write+0xb8>)
 80012d4:	f8d2 15e0 	ldr.w	r1, [r2, #1504]	; 0x5e0
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	b288      	uxth	r0, r1
 80012de:	4290      	cmp	r0, r2
 80012e0:	d023      	beq.n	800132a <Echo_Flash_Write+0x86>
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <Echo_Flash_Write+0xbc>)
 80012e4:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80012e8:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 80012ec:	4a1f      	ldr	r2, [pc, #124]	; (800136c <Echo_Flash_Write+0xc8>)
 80012ee:	4291      	cmp	r1, r2
 80012f0:	d81b      	bhi.n	800132a <Echo_Flash_Write+0x86>
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80012f2:	1a52      	subs	r2, r2, r1
 80012f4:	0ad2      	lsrs	r2, r2, #11
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80012f6:	f1c3 0101 	rsb	r1, r3, #1
 80012fa:	440a      	add	r2, r1
 80012fc:	491c      	ldr	r1, [pc, #112]	; (8001370 <Echo_Flash_Write+0xcc>)
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 80012fe:	481d      	ldr	r0, [pc, #116]	; (8001374 <Echo_Flash_Write+0xd0>)
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8001300:	600a      	str	r2, [r1, #0]
	BankNumber = GetBank(FLASH_USER_START_ADDR);
 8001302:	2101      	movs	r1, #1
 8001304:	6001      	str	r1, [r0, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001306:	481c      	ldr	r0, [pc, #112]	; (8001378 <Echo_Flash_Write+0xd4>)
 8001308:	2400      	movs	r4, #0
	EraseInitStruct.Banks = BankNumber;
 800130a:	e9c0 4100 	strd	r4, r1, [r0]
	EraseInitStruct.Page = FirstPage;
	EraseInitStruct.NbPages = NbOfPages;

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800130e:	491b      	ldr	r1, [pc, #108]	; (800137c <Echo_Flash_Write+0xd8>)
	EraseInitStruct.NbPages = NbOfPages;
 8001310:	e9c0 3202 	strd	r3, r2, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001314:	f002 fb10 	bl	8003938 <HAL_FLASHEx_Erase>
 8001318:	4604      	mov	r4, r0
 800131a:	b140      	cbz	r0, 800132e <Echo_Flash_Write+0x8a>
		}
		/* Error occurred while writing data in Flash memory.
		 User can add here some code to deal with this error */
		else
		{
			return HAL_FLASH_GetError();
 800131c:	f002 fa34 	bl	8003788 <HAL_FLASH_GetError>
 8001320:	b2c4      	uxtb	r4, r0
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
	return HAL_OK;
}
 8001322:	4620      	mov	r0, r4
 8001324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8001326:	233c      	movs	r3, #60	; 0x3c
 8001328:	e7d1      	b.n	80012ce <Echo_Flash_Write+0x2a>
 800132a:	223f      	movs	r2, #63	; 0x3f
 800132c:	e7e3      	b.n	80012f6 <Echo_Flash_Write+0x52>
	Address = FLASH_USER_START_ADDR;
 800132e:	4d14      	ldr	r5, [pc, #80]	; (8001380 <Echo_Flash_Write+0xdc>)
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <Echo_Flash_Write+0xc0>)
	while (Address < FLASH_USER_END_ADDR)
 8001332:	4e0e      	ldr	r6, [pc, #56]	; (800136c <Echo_Flash_Write+0xc8>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8001334:	4f13      	ldr	r7, [pc, #76]	; (8001384 <Echo_Flash_Write+0xe0>)
	Address = FLASH_USER_START_ADDR;
 8001336:	602b      	str	r3, [r5, #0]
	while (Address < FLASH_USER_END_ADDR)
 8001338:	6829      	ldr	r1, [r5, #0]
 800133a:	42b1      	cmp	r1, r6
 800133c:	d302      	bcc.n	8001344 <Echo_Flash_Write+0xa0>
	HAL_FLASH_Lock();
 800133e:	f002 fa19 	bl	8003774 <HAL_FLASH_Lock>
	return HAL_OK;
 8001342:	e7ee      	b.n	8001322 <Echo_Flash_Write+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_WRITE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2000      	movs	r0, #0
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f002 fa4e 	bl	80037ec <HAL_FLASH_Program>
 8001350:	2800      	cmp	r0, #0
 8001352:	d1e3      	bne.n	800131c <Echo_Flash_Write+0x78>
			Address = Address + 4;
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	3304      	adds	r3, #4
 8001358:	602b      	str	r3, [r5, #0]
 800135a:	e7ed      	b.n	8001338 <Echo_Flash_Write+0x94>
 800135c:	1fff7000 	.word	0x1fff7000
 8001360:	03fffc00 	.word	0x03fffc00
 8001364:	0801e000 	.word	0x0801e000
 8001368:	200002a4 	.word	0x200002a4
 800136c:	0801ffff 	.word	0x0801ffff
 8001370:	200002a8 	.word	0x200002a8
 8001374:	20000290 	.word	0x20000290
 8001378:	20000294 	.word	0x20000294
 800137c:	200002ac 	.word	0x200002ac
 8001380:	2000028c 	.word	0x2000028c
 8001384:	20000008 	.word	0x20000008

08001388 <Echo_Flash_Read>:

HAL_StatusTypeDef Echo_Flash_Read()
{
	memcpy(&pwm_param, (pwm_pulse_param_t*) FLASH_USER_START_ADDR,
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <Echo_Flash_Read+0x20>)
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <Echo_Flash_Read+0x24>)
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	6018      	str	r0, [r3, #0]
 8001390:	8892      	ldrh	r2, [r2, #4]
 8001392:	809a      	strh	r2, [r3, #4]
			sizeof(pwm_param));
	if (pwm_param.dead_time == 0 && pwm_param.pulse_freq == 0
			&& pwm_param.pulse_width == 0)
 8001394:	8818      	ldrh	r0, [r3, #0]
 8001396:	889a      	ldrh	r2, [r3, #4]
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	4310      	orrs	r0, r2
 800139c:	4318      	orrs	r0, r3
 800139e:	b280      	uxth	r0, r0
	}
	else
	{
		return HAL_OK;
	}
}
 80013a0:	fab0 f080 	clz	r0, r0
 80013a4:	0940      	lsrs	r0, r0, #5
 80013a6:	4770      	bx	lr
 80013a8:	0801e000 	.word	0x0801e000
 80013ac:	200003e8 	.word	0x200003e8

080013b0 <Echo_LED_Green_Off>:
/* aul_led_charging */
{ ECHO_LED_GREEN, 0, 0xFFFF } };

__STATIC_INLINE void Echo_LED_Green_Off(void)
{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <Echo_LED_Green_Off+0xc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	2108      	movs	r1, #8
 80013b6:	f002 bbed 	b.w	8003b94 <HAL_GPIO_WritePin>
 80013ba:	bf00      	nop
 80013bc:	48000400 	.word	0x48000400

080013c0 <Echo_LED_CTRL>:
	Echo_LED_Off_All();
}

static void Echo_LED_CTRL(echo_led_color_t colors)
{
	if (colors == ECHO_LED_COLOR_NONE)
 80013c0:	b908      	cbnz	r0, 80013c6 <Echo_LED_CTRL+0x6>
	{
		Echo_LED_Off_All();
 80013c2:	f7ff bff5 	b.w	80013b0 <Echo_LED_Green_Off>
	Echo_LED_Red_On();
	else
	Echo_LED_Red_Off();
#endif
#ifdef LED_GREEN_EN
		if (colors & ECHO_LED_GREEN)
 80013c6:	0783      	lsls	r3, r0, #30
 80013c8:	d504      	bpl.n	80013d4 <Echo_LED_CTRL+0x14>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <Echo_LED_CTRL+0x18>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	2108      	movs	r1, #8
 80013d0:	f002 bbe0 	b.w	8003b94 <HAL_GPIO_WritePin>
			Echo_LED_Green_On();
		else
			Echo_LED_Green_Off();
 80013d4:	f7ff bfec 	b.w	80013b0 <Echo_LED_Green_Off>
 80013d8:	48000400 	.word	0x48000400

080013dc <Echo_LED_Init>:
#endif
	}
}

void Echo_LED_Init(void)
{
 80013dc:	b508      	push	{r3, lr}
	Echo_LED_Off_All();
 80013de:	f7ff ffe7 	bl	80013b0 <Echo_LED_Green_Off>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80013e2:	4b02      	ldr	r3, [pc, #8]	; (80013ec <Echo_LED_Init+0x10>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	735a      	strb	r2, [r3, #13]
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	200002b0 	.word	0x200002b0

080013f0 <Echo_LED_Enable>:

void Echo_LED_Enable(void)
{
 80013f0:	b538      	push	{r3, r4, r5, lr}
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 80013f2:	4c04      	ldr	r4, [pc, #16]	; (8001404 <Echo_LED_Enable+0x14>)
 80013f4:	2500      	movs	r5, #0
 80013f6:	7365      	strb	r5, [r4, #13]
	ECHO_LED_ON = false;
 80013f8:	7025      	strb	r5, [r4, #0]
	Echo_LED_Off_All();
 80013fa:	f7ff ffd9 	bl	80013b0 <Echo_LED_Green_Off>
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_Enable()\r\n"));
#endif
	Echo_LED_State_Reset();
	ECHO_LED_STATE_IND_TIMEOUT_RESET();
 80013fe:	60a5      	str	r5, [r4, #8]
 8001400:	7325      	strb	r5, [r4, #12]
}
 8001402:	bd38      	pop	{r3, r4, r5, pc}
 8001404:	200002b0 	.word	0x200002b0

08001408 <Echo_Set_LED_State>:
{
	return ECHO_LED_IND_DISABLED();
}

void Echo_Set_LED_State(echo_led_sate_t led_state)
{
 8001408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("Echo_LED_StateSet()\r\n"));
#endif
	Echo_LED_Enable();

	if (ECHO_LED_IND_DISABLED() == true)
 800140a:	4d13      	ldr	r5, [pc, #76]	; (8001458 <Echo_Set_LED_State+0x50>)
{
 800140c:	4604      	mov	r4, r0
	Echo_LED_Enable();
 800140e:	f7ff ffef 	bl	80013f0 <Echo_LED_Enable>
	if (ECHO_LED_IND_DISABLED() == true)
 8001412:	7b2e      	ldrb	r6, [r5, #12]
 8001414:	b9b6      	cbnz	r6, 8001444 <Echo_Set_LED_State+0x3c>
		return;

	if (led_state >= ECHO_LED_STATE_MAX)
		led_state = ECHO_LED_STATE_NONE;
 8001416:	2c03      	cmp	r4, #3

	if (led_state == ECHO_LED_CUR_STATE)
 8001418:	7b6b      	ldrb	r3, [r5, #13]
		led_state = ECHO_LED_STATE_NONE;
 800141a:	bf28      	it	cs
 800141c:	2400      	movcs	r4, #0
	if (led_state == ECHO_LED_CUR_STATE)
 800141e:	42a3      	cmp	r3, r4
 8001420:	d010      	beq.n	8001444 <Echo_Set_LED_State+0x3c>
	{
		return;
	}

	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <Echo_Set_LED_State+0x54>)
 8001424:	2306      	movs	r3, #6
 8001426:	4363      	muls	r3, r4
 8001428:	18d1      	adds	r1, r2, r3
 800142a:	5cd0      	ldrb	r0, [r2, r3]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(led_state);
 800142c:	884f      	ldrh	r7, [r1, #2]
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(led_state);
 800142e:	9001      	str	r0, [sp, #4]
		Echo_LED_Off_All();
 8001430:	f7ff ffbe 	bl	80013b0 <Echo_LED_Green_Off>
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(led_state);

	Echo_LED_CTRL(ECHO_LED_COLOR_NONE);

	/* Check steady on or off */
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME)
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	429f      	cmp	r7, r3
 800143a:	9801      	ldr	r0, [sp, #4]
 800143c:	d104      	bne.n	8001448 <Echo_Set_LED_State+0x40>
	{
		ECHO_LED_ON = false;
 800143e:	702e      	strb	r6, [r5, #0]
		ECHO_LED_TIME_TICK = 0;
 8001440:	606e      	str	r6, [r5, #4]
		Echo_LED_CTRL(led_ind.led_colors);
		ECHO_LED_ON = true;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}

	ECHO_LED_CUR_STATE = led_state;
 8001442:	736c      	strb	r4, [r5, #13]

}
 8001444:	b003      	add	sp, #12
 8001446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Echo_LED_CTRL(led_ind.led_colors);
 8001448:	f7ff ffba 	bl	80013c0 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 800144c:	2301      	movs	r3, #1
 800144e:	702b      	strb	r3, [r5, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 8001450:	f001 fa3e 	bl	80028d0 <HAL_GetTick>
 8001454:	6068      	str	r0, [r5, #4]
 8001456:	e7f4      	b.n	8001442 <Echo_Set_LED_State+0x3a>
 8001458:	200002b0 	.word	0x200002b0
 800145c:	0800b31c 	.word	0x0800b31c

08001460 <Echo_LED_Handle>:
		Echo_Set_LED_State(ECHO_LED_STATE_NONE);
		break;
	}
}
void Echo_LED_Handle(void)
{
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	echo_led_state_ind_t led_ind;

	if (ECHO_LED_CUR_STATE == ECHO_LED_STATE_NONE)
 8001462:	4c25      	ldr	r4, [pc, #148]	; (80014f8 <Echo_LED_Handle+0x98>)
 8001464:	7b63      	ldrb	r3, [r4, #13]
 8001466:	b1a3      	cbz	r3, 8001492 <Echo_LED_Handle+0x32>
	{
		return;
	}
	if (ECHO_LED_CUR_STATE >= ECHO_LED_STATE_MAX)
 8001468:	2b02      	cmp	r3, #2
 800146a:	d906      	bls.n	800147a <Echo_LED_Handle+0x1a>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8001470:	7023      	strb	r3, [r4, #0]
	{
		Echo_LED_CTRL(ECHO_LED_STATE_NONE);
		ECHO_LED_ON = false;
		ECHO_LED_TIME_TICK = HAL_GetTick();
	}
}
 8001472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Echo_LED_Off_All();
 8001476:	f7ff bf9b 	b.w	80013b0 <Echo_LED_Green_Off>
	if (ECHO_LED_TIMEOUT_TICK == ECHO_LED_IND_TIMEOUT)
 800147a:	68a2      	ldr	r2, [r4, #8]
 800147c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001480:	428a      	cmp	r2, r1
 8001482:	d107      	bne.n	8001494 <Echo_LED_Handle+0x34>
	ECHO_LED_CUR_STATE = ECHO_LED_STATE_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	7363      	strb	r3, [r4, #13]
	ECHO_LED_ON = false;
 8001488:	7023      	strb	r3, [r4, #0]
	Echo_LED_Off_All();
 800148a:	f7ff ff91 	bl	80013b0 <Echo_LED_Green_Off>
		ECHO_LED_TIMED_OUT = true;
 800148e:	2301      	movs	r3, #1
 8001490:	7323      	strb	r3, [r4, #12]
}
 8001492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (ECHO_LED_TIMEOUT_TICK < ECHO_LED_IND_TIMEOUT)
 8001494:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001498:	428a      	cmp	r2, r1
 800149a:	d8fa      	bhi.n	8001492 <Echo_LED_Handle+0x32>
		ECHO_LED_TIMEOUT_TICK++;
 800149c:	3201      	adds	r2, #1
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 800149e:	4917      	ldr	r1, [pc, #92]	; (80014fc <Echo_LED_Handle+0x9c>)
		ECHO_LED_TIMEOUT_TICK++;
 80014a0:	60a2      	str	r2, [r4, #8]
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 80014a2:	2206      	movs	r2, #6
 80014a4:	4353      	muls	r3, r2
 80014a6:	18c8      	adds	r0, r1, r3
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 80014a8:	f64f 76fd 	movw	r6, #65533	; 0xfffd
	led_ind.off_time = ECHO_LED_STATE_IND_OFF_TIME_GET(ECHO_LED_CUR_STATE);
 80014ac:	8845      	ldrh	r5, [r0, #2]
			|| led_ind.off_time == ECHO_LED_STEADY_ON_TIME)
 80014ae:	1e6a      	subs	r2, r5, #1
	if (led_ind.off_time == ECHO_LED_STEADY_OFF_TIME
 80014b0:	b292      	uxth	r2, r2
 80014b2:	42b2      	cmp	r2, r6
 80014b4:	d8ed      	bhi.n	8001492 <Echo_LED_Handle+0x32>
	if (ECHO_LED_ON == false
 80014b6:	7822      	ldrb	r2, [r4, #0]
	led_ind.on_time = ECHO_LED_STATE_IND_ON_TIME_GET(ECHO_LED_CUR_STATE);
 80014b8:	8886      	ldrh	r6, [r0, #4]
	if (ECHO_LED_ON == false
 80014ba:	b14a      	cbz	r2, 80014d0 <Echo_LED_Handle+0x70>
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.on_time)
 80014bc:	f001 fa08 	bl	80028d0 <HAL_GetTick>
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	1ac0      	subs	r0, r0, r3
 80014c4:	42b0      	cmp	r0, r6
 80014c6:	d3e4      	bcc.n	8001492 <Echo_LED_Handle+0x32>
		Echo_LED_Off_All();
 80014c8:	f7ff ff72 	bl	80013b0 <Echo_LED_Green_Off>
		ECHO_LED_ON = false;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00a      	b.n	80014e6 <Echo_LED_Handle+0x86>
	led_ind.led_colors = ECHO_LED_STATE_IND_COLORS_GET(ECHO_LED_CUR_STATE);
 80014d0:	5ccf      	ldrb	r7, [r1, r3]
			&& HAL_GetTick() - ECHO_LED_TIME_TICK >= led_ind.off_time)
 80014d2:	f001 f9fd 	bl	80028d0 <HAL_GetTick>
 80014d6:	6863      	ldr	r3, [r4, #4]
 80014d8:	1ac0      	subs	r0, r0, r3
 80014da:	42a8      	cmp	r0, r5
 80014dc:	d308      	bcc.n	80014f0 <Echo_LED_Handle+0x90>
		Echo_LED_CTRL(led_ind.led_colors);
 80014de:	4638      	mov	r0, r7
 80014e0:	f7ff ff6e 	bl	80013c0 <Echo_LED_CTRL>
		ECHO_LED_ON = true;
 80014e4:	2301      	movs	r3, #1
		ECHO_LED_ON = false;
 80014e6:	7023      	strb	r3, [r4, #0]
		ECHO_LED_TIME_TICK = HAL_GetTick();
 80014e8:	f001 f9f2 	bl	80028d0 <HAL_GetTick>
 80014ec:	6060      	str	r0, [r4, #4]
 80014ee:	e7d0      	b.n	8001492 <Echo_LED_Handle+0x32>
	else if (ECHO_LED_ON == true
 80014f0:	7823      	ldrb	r3, [r4, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0cd      	beq.n	8001492 <Echo_LED_Handle+0x32>
 80014f6:	e7e1      	b.n	80014bc <Echo_LED_Handle+0x5c>
 80014f8:	200002b0 	.word	0x200002b0
 80014fc:	0800b31c 	.word	0x0800b31c

08001500 <__io_putchar>:
#else 	/* Keil */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001500:	b507      	push	{r0, r1, r2, lr}
	if (ch == '\n')
 8001502:	280a      	cmp	r0, #10
{
 8001504:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 8001506:	d106      	bne.n	8001516 <__io_putchar+0x16>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) "\r", 1, 0xFFFF);
 8001508:	4908      	ldr	r1, [pc, #32]	; (800152c <__io_putchar+0x2c>)
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <__io_putchar+0x30>)
 800150c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001510:	2201      	movs	r2, #1
 8001512:	f004 fbd9 	bl	8005cc8 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&ECHO_USART2_HANDLE, (uint8_t*) &ch, 1, 0xFFFF);
 8001516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151a:	2201      	movs	r2, #1
 800151c:	a901      	add	r1, sp, #4
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <__io_putchar+0x30>)
 8001520:	f004 fbd2 	bl	8005cc8 <HAL_UART_Transmit>
	return ch;
}
 8001524:	9801      	ldr	r0, [sp, #4]
 8001526:	b003      	add	sp, #12
 8001528:	f85d fb04 	ldr.w	pc, [sp], #4
 800152c:	0800b6af 	.word	0x0800b6af
 8001530:	20000948 	.word	0x20000948

08001534 <Echo_ShellPrint_Char>:

	ECHO_SHELL_UART->TDR = st_rcv_byte;
}

void Echo_ShellPrint_Char(uint8_t *data, uint16_t len)
{
 8001534:	b538      	push	{r3, r4, r5, lr}
	uint16_t i;

	if (len == 0)
 8001536:	b171      	cbz	r1, 8001556 <Echo_ShellPrint_Char+0x22>
 8001538:	3901      	subs	r1, #1
 800153a:	1e45      	subs	r5, r0, #1
 800153c:	fa10 f481 	uxtah	r4, r0, r1
		return;

	for (i = 0; i < len; i++)
	{
		ECHO_SHELL_PRINT(("%c", data[i]));
 8001540:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001544:	f005 fbca 	bl	8006cdc <putchar>
	for (i = 0; i < len; i++)
 8001548:	42a5      	cmp	r5, r4
 800154a:	d1f9      	bne.n	8001540 <Echo_ShellPrint_Char+0xc>
	}

	ECHO_SHELL_PRINT(("\n"));
}
 800154c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ECHO_SHELL_PRINT(("\n"));
 8001550:	200a      	movs	r0, #10
 8001552:	f005 bbc3 	b.w	8006cdc <putchar>
}
 8001556:	bd38      	pop	{r3, r4, r5, pc}

08001558 <Echo_Print_Manual>:
/*
 * PIRNT MANUAL
 */
void Echo_Print_Manual()
{
	ECHO_SHELL_PRINT(("%s\n",help_manual));
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <Echo_Print_Manual+0x8>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f005 bc42 	b.w	8006de4 <puts>
 8001560:	20000004 	.word	0x20000004

08001564 <Echo_Print_Version>:

/*
 * PIRNT VERSION
 */
void Echo_Print_Version()
{
 8001564:	b500      	push	{lr}
 8001566:	b08b      	sub	sp, #44	; 0x2c
	char res_msg[40] =
 8001568:	2100      	movs	r1, #0
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	a801      	add	r0, sp, #4
 800156e:	9100      	str	r1, [sp, #0]
 8001570:	f004 fd1a 	bl	8005fa8 <memset>
	{ '\0', };

	sprintf(res_msg, "\r\nVERSION INFO: %s \r\n", ECHO_FW_VER);
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <Echo_Print_Version+0x28>)
 8001576:	4906      	ldr	r1, [pc, #24]	; (8001590 <Echo_Print_Version+0x2c>)
 8001578:	4668      	mov	r0, sp
 800157a:	f005 fc41 	bl	8006e00 <siprintf>
	ECHO_SHELL_PRINT(("%s\n",res_msg));
 800157e:	4668      	mov	r0, sp
 8001580:	f005 fc30 	bl	8006de4 <puts>
}
 8001584:	b00b      	add	sp, #44	; 0x2c
 8001586:	f85d fb04 	ldr.w	pc, [sp], #4
 800158a:	bf00      	nop
 800158c:	0800b32e 	.word	0x0800b32e
 8001590:	0800b33c 	.word	0x0800b33c

08001594 <Echo_Shell_Input_Print>:

/*
 *  INPUT DATA PRINT
 */
void Echo_Shell_Input_Print()
{
 8001594:	b510      	push	{r4, lr}
	if (echo_uart2_rcv_byte != 0)
 8001596:	4c06      	ldr	r4, [pc, #24]	; (80015b0 <Echo_Shell_Input_Print+0x1c>)
 8001598:	7823      	ldrb	r3, [r4, #0]
 800159a:	b13b      	cbz	r3, 80015ac <Echo_Shell_Input_Print+0x18>
	{
		HAL_UART_Transmit(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1, 10);
 800159c:	230a      	movs	r3, #10
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <Echo_Shell_Input_Print+0x20>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	4621      	mov	r1, r4
 80015a4:	f004 fb90 	bl	8005cc8 <HAL_UART_Transmit>
		echo_uart2_rcv_byte = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	7023      	strb	r3, [r4, #0]
	}
}
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop
 80015b0:	200004f0 	.word	0x200004f0
 80015b4:	20000948 	.word	0x20000948

080015b8 <Echo_Shell_Init>:
/**********************/

void Echo_Shell_Init(void)
{
 80015b8:	b510      	push	{r4, lr}
	memset(SHELL_MSG_RCV_BUF, '\0', SHELL_MSG_RCV_BUF_SIZE);
 80015ba:	4c05      	ldr	r4, [pc, #20]	; (80015d0 <Echo_Shell_Init+0x18>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	2100      	movs	r1, #0
 80015c2:	1c60      	adds	r0, r4, #1
 80015c4:	f004 fcf0 	bl	8005fa8 <memset>
	SHELL_MSG_RCV_POS = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	7023      	strb	r3, [r4, #0]
}
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	bf00      	nop
 80015d0:	200002c0 	.word	0x200002c0

080015d4 <Echo_AdminCMD_Check>:

/*
 * CMD EXE >> ADMIN COMMAND CHECK
 */
void Echo_AdminCMD_Check(uint8_t *data, uint16_t len)
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4e18      	ldr	r6, [pc, #96]	; (8001638 <Echo_AdminCMD_Check+0x64>)
 80015d8:	4607      	mov	r7, r0
 80015da:	2500      	movs	r5, #0
	uint8_t admin_cmd_cnt;

	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 80015dc:	7932      	ldrb	r2, [r6, #4]
 80015de:	6831      	ldr	r1, [r6, #0]
 80015e0:	4638      	mov	r0, r7
 80015e2:	b2ec      	uxtb	r4, r5
 80015e4:	f005 fca5 	bl	8006f32 <strncmp>
 80015e8:	b128      	cbz	r0, 80015f6 <Echo_AdminCMD_Check+0x22>
	for (admin_cmd_cnt = 0; admin_cmd_cnt < admin_cmd_max; admin_cmd_cnt++)
 80015ea:	3501      	adds	r5, #1
 80015ec:	2d06      	cmp	r5, #6
 80015ee:	f106 0608 	add.w	r6, r6, #8
 80015f2:	d1f3      	bne.n	80015dc <Echo_AdminCMD_Check+0x8>
		break;

	default:
		break;
	}
}
 80015f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (admin_cmd_cnt)
 80015f6:	1e63      	subs	r3, r4, #1
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d804      	bhi.n	8001606 <Echo_AdminCMD_Check+0x32>
 80015fc:	e8df f003 	tbb	[pc, r3]
 8001600:	130f0b07 	.word	0x130f0b07
 8001604:	17          	.byte	0x17
 8001605:	00          	.byte	0x00
}
 8001606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_Sys_FSM_State_Start();
 800160a:	f000 bb31 	b.w	8001c70 <Echo_Set_Sys_FSM_State_Start>
}
 800160e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Set_Sys_FSM_State_Stop();
 8001612:	f000 bb33 	b.w	8001c7c <Echo_Set_Sys_FSM_State_Stop>
}
 8001616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Flash_Write();
 800161a:	f7ff be43 	b.w	80012a4 <Echo_Flash_Write>
}
 800161e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Factory_Reset();
 8001622:	f000 b963 	b.w	80018ec <Echo_Factory_Reset>
}
 8001626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Manual();
 800162a:	f7ff bf95 	b.w	8001558 <Echo_Print_Manual>
}
 800162e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Echo_Print_Version();
 8001632:	f7ff bf97 	b.w	8001564 <Echo_Print_Version>
 8001636:	bf00      	nop
 8001638:	0800b608 	.word	0x0800b608

0800163c <Echo_ParameterCMD_Check>:

/*
 * CMD EXE >> PARAMETER COMMAND CHECK
 */
void Echo_ParameterCMD_Check(uint8_t *data, uint16_t len)
{
 800163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001640:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80016bc <Echo_ParameterCMD_Check+0x80>
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
 8001648:	2700      	movs	r7, #0
	uint8_t param_cmd_cnt = 0;

	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
	{
		if (strncmp((const char*) data,
 800164a:	f898 2004 	ldrb.w	r2, [r8, #4]
 800164e:	f8d8 1000 	ldr.w	r1, [r8]
 8001652:	4620      	mov	r0, r4
 8001654:	b2fe      	uxtb	r6, r7
 8001656:	f005 fc6c 	bl	8006f32 <strncmp>
 800165a:	b130      	cbz	r0, 800166a <Echo_ParameterCMD_Check+0x2e>
	for (param_cmd_cnt = 0; param_cmd_cnt < parameter_cmd_max; param_cmd_cnt++)
 800165c:	3701      	adds	r7, #1
 800165e:	2f09      	cmp	r7, #9
 8001660:	f108 0808 	add.w	r8, r8, #8
 8001664:	d1f1      	bne.n	800164a <Echo_ParameterCMD_Check+0xe>
		break;

	default:
		break;
	}
}
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (param_cmd_cnt)
 800166a:	1e73      	subs	r3, r6, #1
 800166c:	2b07      	cmp	r3, #7
 800166e:	d805      	bhi.n	800167c <Echo_ParameterCMD_Check+0x40>
 8001670:	e8df f003 	tbb	[pc, r3]
 8001674:	1e18100a 	.word	0x1e18100a
 8001678:	1e1e1e1e 	.word	0x1e1e1e1e
		Echo_Set_DT(data, len);
 800167c:	4629      	mov	r1, r5
 800167e:	4620      	mov	r0, r4
}
 8001680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_DT(data, len);
 8001684:	f000 b96e 	b.w	8001964 <Echo_Set_DT>
		Echo_Set_PW(data, len);
 8001688:	4629      	mov	r1, r5
 800168a:	4620      	mov	r0, r4
}
 800168c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_PW(data, len);
 8001690:	f000 b97e 	b.w	8001990 <Echo_Set_PW>
		Echo_Set_Sys_FSM_State_Stop();
 8001694:	f000 faf2 	bl	8001c7c <Echo_Set_Sys_FSM_State_Stop>
		Echo_Set_HZ(data, len);
 8001698:	4629      	mov	r1, r5
 800169a:	4620      	mov	r0, r4
}
 800169c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_HZ(data, len);
 80016a0:	f000 b986 	b.w	80019b0 <Echo_Set_HZ>
		Echo_Set_V_PW(data, len);
 80016a4:	4629      	mov	r1, r5
 80016a6:	4620      	mov	r0, r4
}
 80016a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Set_V_PW(data, len);
 80016ac:	f000 b9b6 	b.w	8001a1c <Echo_Set_V_PW>
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 80016b0:	1f30      	subs	r0, r6, #4
 80016b2:	b2c0      	uxtb	r0, r0
}
 80016b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Echo_Get_Res_Data(param_cmd_cnt - 4);
 80016b8:	f000 b8be 	b.w	8001838 <Echo_Get_Res_Data>
 80016bc:	0800b638 	.word	0x0800b638

080016c0 <Echo_Shell_CMD_Handle>:
{
 80016c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 80016c2:	4e2d      	ldr	r6, [pc, #180]	; (8001778 <Echo_Shell_CMD_Handle+0xb8>)
 80016c4:	4c2d      	ldr	r4, [pc, #180]	; (800177c <Echo_Shell_CMD_Handle+0xbc>)
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 80016c6:	4f2e      	ldr	r7, [pc, #184]	; (8001780 <Echo_Shell_CMD_Handle+0xc0>)
	while (Echo_Uart2_Get_RCV_Q(&st_byte) == true
 80016c8:	482b      	ldr	r0, [pc, #172]	; (8001778 <Echo_Shell_CMD_Handle+0xb8>)
 80016ca:	f000 fb51 	bl	8001d70 <Echo_Uart2_Get_RCV_Q>
 80016ce:	bb20      	cbnz	r0, 800171a <Echo_Shell_CMD_Handle+0x5a>
	if (SHELL_MSG_RCV_POS > 0)
 80016d0:	7823      	ldrb	r3, [r4, #0]
 80016d2:	b183      	cbz	r3, 80016f6 <Echo_Shell_CMD_Handle+0x36>
		if (HAL_GetTick() - SHELL_MSG_RCV_FLUSH_CHK_TIME
 80016d4:	f001 f8fc 	bl	80028d0 <HAL_GetTick>
 80016d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80016dc:	1ac0      	subs	r0, r0, r3
 80016de:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80016e2:	d908      	bls.n	80016f6 <Echo_Shell_CMD_Handle+0x36>
			ECHO_SHELL_PRINT(("BT_MSG: Flush timeout\n"));
 80016e4:	4827      	ldr	r0, [pc, #156]	; (8001784 <Echo_Shell_CMD_Handle+0xc4>)
 80016e6:	f005 fb7d 	bl	8006de4 <puts>
			ECHO_SHELL_PRINT_CHAR(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 80016ea:	7821      	ldrb	r1, [r4, #0]
 80016ec:	4826      	ldr	r0, [pc, #152]	; (8001788 <Echo_Shell_CMD_Handle+0xc8>)
 80016ee:	f7ff ff21 	bl	8001534 <Echo_ShellPrint_Char>
			Echo_Shell_Init();
 80016f2:	f7ff ff61 	bl	80015b8 <Echo_Shell_Init>
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 80016f6:	f000 fab5 	bl	8001c64 <Echo_Get_Sys_FSM_State>
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d10c      	bne.n	8001718 <Echo_Shell_CMD_Handle+0x58>
		if (HAL_GetTick() - SHELL_MSG_RCV_HANDSHAKING_TIME
 80016fe:	f001 f8e7 	bl	80028d0 <HAL_GetTick>
 8001702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001706:	1ac0      	subs	r0, r0, r3
 8001708:	f242 7310 	movw	r3, #10000	; 0x2710
 800170c:	4298      	cmp	r0, r3
 800170e:	d903      	bls.n	8001718 <Echo_Shell_CMD_Handle+0x58>
			SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001710:	f001 f8de 	bl	80028d0 <HAL_GetTick>
 8001714:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
}
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 800171a:	f001 f8d9 	bl	80028d0 <HAL_GetTick>
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 800171e:	7833      	ldrb	r3, [r6, #0]
		SHELL_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 8001720:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
		if ((st_byte == '#') || SHELL_MSG_RCV_POS != 0)
 8001724:	2b23      	cmp	r3, #35	; 0x23
 8001726:	d002      	beq.n	800172e <Echo_Shell_CMD_Handle+0x6e>
 8001728:	7822      	ldrb	r2, [r4, #0]
 800172a:	2a00      	cmp	r2, #0
 800172c:	d0cc      	beq.n	80016c8 <Echo_Shell_CMD_Handle+0x8>
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 800172e:	7825      	ldrb	r5, [r4, #0]
 8001730:	1962      	adds	r2, r4, r5
			SHELL_MSG_RCV_POS++;
 8001732:	3501      	adds	r5, #1
 8001734:	b2ed      	uxtb	r5, r5
			if (st_byte == 13)
 8001736:	2b0d      	cmp	r3, #13
			SHELL_MSG_RCV_BUF[SHELL_MSG_RCV_POS] = st_byte;
 8001738:	7053      	strb	r3, [r2, #1]
			SHELL_MSG_RCV_POS++;
 800173a:	7025      	strb	r5, [r4, #0]
			if (st_byte == 13)
 800173c:	d1c4      	bne.n	80016c8 <Echo_Shell_CMD_Handle+0x8>
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <Echo_Shell_CMD_Handle+0xc8>)
 8001740:	2204      	movs	r2, #4
 8001742:	4639      	mov	r1, r7
 8001744:	f005 fbf5 	bl	8006f32 <strncmp>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 8001748:	b2ad      	uxth	r5, r5
				if (strncmp((const char*) SHELL_MSG_RCV_BUF,
 800174a:	b128      	cbz	r0, 8001758 <Echo_Shell_CMD_Handle+0x98>
						|| strncmp((const char*) SHELL_MSG_RCV_BUF,
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <Echo_Shell_CMD_Handle+0xcc>)
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <Echo_Shell_CMD_Handle+0xc8>)
 8001750:	2204      	movs	r2, #4
 8001752:	f005 fbee 	bl	8006f32 <strncmp>
 8001756:	b950      	cbnz	r0, 800176e <Echo_Shell_CMD_Handle+0xae>
					Echo_ParameterCMD_Check(SHELL_MSG_RCV_BUF,
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <Echo_Shell_CMD_Handle+0xc8>)
 800175a:	4629      	mov	r1, r5
 800175c:	f7ff ff6e 	bl	800163c <Echo_ParameterCMD_Check>
				Echo_Shell_Init();
 8001760:	f7ff ff2a 	bl	80015b8 <Echo_Shell_Init>
				SHELL_MSG_RCV_HANDSHAKING_TIME = HAL_GetTick();
 8001764:	f001 f8b4 	bl	80028d0 <HAL_GetTick>
 8001768:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 800176c:	e7ac      	b.n	80016c8 <Echo_Shell_CMD_Handle+0x8>
					Echo_AdminCMD_Check(SHELL_MSG_RCV_BUF, SHELL_MSG_RCV_POS);
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <Echo_Shell_CMD_Handle+0xc8>)
 8001770:	4629      	mov	r1, r5
 8001772:	f7ff ff2f 	bl	80015d4 <Echo_AdminCMD_Check>
 8001776:	e7f3      	b.n	8001760 <Echo_Shell_CMD_Handle+0xa0>
 8001778:	200003cc 	.word	0x200003cc
 800177c:	200002c0 	.word	0x200002c0
 8001780:	0800b352 	.word	0x0800b352
 8001784:	0800b35c 	.word	0x0800b35c
 8001788:	200002c1 	.word	0x200002c1
 800178c:	0800b357 	.word	0x0800b357

08001790 <HAL_TIM_PeriodElapsedCallback>:
	}
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b508      	push	{r3, lr}
		ECHO_SHELL_PRINT(
				("PEAK VOLTAGE : %f\n",Echo_ADC_Calc_Peak_V(adc_avg_data)));
	}
#endif

	if (htim->Instance == TIM16)
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001796:	429a      	cmp	r2, r3
{
 8001798:	ed2d 8b02 	vpush	{d8}
	if (htim->Instance == TIM16)
 800179c:	d12e      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		/* ADC1 FSM */
		if (Echo_Get_ADC1_State() == ECHO_ADC1_CONV_OK)
 800179e:	f7ff fd23 	bl	80011e8 <Echo_Get_ADC1_State>
 80017a2:	2803      	cmp	r0, #3
 80017a4:	d12a      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 80017a6:	f7ff fcef 	bl	8001188 <Echo_Stepup_ADC1_AVG>
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 80017aa:	ee10 0a10 	vmov	r0, s0
			float adc_avg_data = Echo_Stepup_ADC1_AVG();
 80017ae:	eeb0 8a40 	vmov.f32	s16, s0
			ECHO_SHELL_PRINT(("ADC1 DATA : %f\n",adc_avg_data));
 80017b2:	f7fe fec9 	bl	8000548 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017bc:	f005 fa76 	bl	8006cac <iprintf>
			ECHO_SHELL_PRINT(
 80017c0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80017c4:	eddf 0a11 	vldr	s1, [pc, #68]	; 800180c <HAL_TIM_PeriodElapsedCallback+0x7c>
 80017c8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001810 <HAL_TIM_PeriodElapsedCallback+0x80>
 80017cc:	ee18 3a10 	vmov	r3, s16
 80017d0:	b298      	uxth	r0, r3
 80017d2:	f7ff fcf1 	bl	80011b8 <Echo_ADC_Calc_Stepup_V>
 80017d6:	ee10 0a10 	vmov	r0, s0
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017e4:	f005 fa62 	bl	8006cac <iprintf>
					("STEPUP VOLTAGE : %f\n",Echo_ADC_Calc_Stepup_V(adc_avg_data, R1_Vstup, R2_Vstup)));
			ECHO_SHELL_PRINT(("----------\r\n"));
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ea:	f005 fafb 	bl	8006de4 <puts>
			ADC2_CONV_OK = false;
		}

#endif
	}
}
 80017ee:	ecbd 8b02 	vpop	{d8}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 80017f2:	2004      	movs	r0, #4
}
 80017f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Echo_Set_ADC1_State(ECHO_ADC1_PRINT_OK);
 80017f8:	f7ff bcfc 	b.w	80011f4 <Echo_Set_ADC1_State>
}
 80017fc:	ecbd 8b02 	vpop	{d8}
 8001800:	bd08      	pop	{r3, pc}
 8001802:	bf00      	nop
 8001804:	40014400 	.word	0x40014400
 8001808:	0800b680 	.word	0x0800b680
 800180c:	42dc0000 	.word	0x42dc0000
 8001810:	45610000 	.word	0x45610000
 8001814:	0800b690 	.word	0x0800b690
 8001818:	0800b6a5 	.word	0x0800b6a5

0800181c <Echo_VPW_SET_TP_ON>:
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
}

void Echo_VPW_SET_TP_ON(void)
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f002 b9b5 	b.w	8003b94 <HAL_GPIO_WritePin>

0800182a <Echo_VPW_TP_OFF>:
}

void Echo_VPW_TP_OFF(void)
{
	HAL_GPIO_WritePin(DAC0_GPIO_Port, DAC0_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f002 b9ae 	b.w	8003b94 <HAL_GPIO_WritePin>

08001838 <Echo_Get_Res_Data>:

/*
 * DATA PRINTER
 * */
void Echo_Get_Res_Data(uint8_t select_msg)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b088      	sub	sp, #32
	char mes_head[11] =
 800183c:	2300      	movs	r3, #0
 800183e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001842:	f8cd 301b 	str.w	r3, [sp, #27]
	{ '\0', };
	strcpy((char*) mes_head,
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <Echo_Get_Res_Data+0x8c>)
{
 8001848:	4604      	mov	r4, r0
	strcpy((char*) mes_head,
 800184a:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 800184e:	a805      	add	r0, sp, #20
 8001850:	f005 fb67 	bl	8006f22 <strcpy>
			(const char*) get_prm_cmd_str_table[select_msg].str);

	switch (select_msg)
 8001854:	2c04      	cmp	r4, #4
 8001856:	d80b      	bhi.n	8001870 <Echo_Get_Res_Data+0x38>
 8001858:	e8df f004 	tbb	[pc, r4]
 800185c:	18131003 	.word	0x18131003
 8001860:	25          	.byte	0x25
 8001861:	00          	.byte	0x00
	{
	case RESPONSE_DEADTIME:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <Echo_Get_Res_Data+0x90>)
 8001864:	881b      	ldrh	r3, [r3, #0]
				pwm_param.dead_time);
		break;
	case RESPONSE_PULSEWIDTH:
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 8001866:	4919      	ldr	r1, [pc, #100]	; (80018cc <Echo_Get_Res_Data+0x94>)
 8001868:	aa05      	add	r2, sp, #20
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <Echo_Get_Res_Data+0x98>)
 800186c:	f005 fac8 	bl	8006e00 <siprintf>
				pwm_param.pulse_width, pwm_param.pulse_freq, v_step_tv);
		break;
	default:
		break;
	}
	ECHO_SHELL_PRINT(("%s\r\n", res_msg));
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <Echo_Get_Res_Data+0x98>)
 8001872:	4818      	ldr	r0, [pc, #96]	; (80018d4 <Echo_Get_Res_Data+0x9c>)
 8001874:	f005 fa1a 	bl	8006cac <iprintf>
}
 8001878:	b008      	add	sp, #32
 800187a:	bd10      	pop	{r4, pc}
		sprintf((char*) res_msg, (const char*) "%s %d us\r\n\r\n", mes_head,
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <Echo_Get_Res_Data+0x90>)
 800187e:	885b      	ldrh	r3, [r3, #2]
 8001880:	e7f1      	b.n	8001866 <Echo_Get_Res_Data+0x2e>
		sprintf((char*) res_msg, (const char*) "%s %d Hz\r\n\r\n", mes_head,
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <Echo_Get_Res_Data+0x90>)
 8001884:	4914      	ldr	r1, [pc, #80]	; (80018d8 <Echo_Get_Res_Data+0xa0>)
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	aa05      	add	r2, sp, #20
 800188a:	e7ee      	b.n	800186a <Echo_Get_Res_Data+0x32>
		sprintf((char*) res_msg, (const char*) "%s %d PW\r\n\r\n", mes_head,
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <Echo_Get_Res_Data+0xa4>)
 800188e:	4914      	ldr	r1, [pc, #80]	; (80018e0 <Echo_Get_Res_Data+0xa8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	480f      	ldr	r0, [pc, #60]	; (80018d0 <Echo_Get_Res_Data+0x98>)
 8001894:	aa05      	add	r2, sp, #20
 8001896:	f005 fab3 	bl	8006e00 <siprintf>
		Echo_VPW_SET_TP_ON();
 800189a:	f7ff ffbf 	bl	800181c <Echo_VPW_SET_TP_ON>
		vpw_set_flag = true;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <Echo_Get_Res_Data+0xac>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
		break;
 80018a4:	e7e4      	b.n	8001870 <Echo_Get_Res_Data+0x38>
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <Echo_Get_Res_Data+0xa4>)
				"VPW: %d us\r\n\r\n", mes_head, pwm_param.dead_time,
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <Echo_Get_Res_Data+0x90>)
		sprintf((char*) res_msg, (const char*) "%s\r\n"
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	9202      	str	r2, [sp, #8]
 80018ae:	889a      	ldrh	r2, [r3, #4]
 80018b0:	9201      	str	r2, [sp, #4]
 80018b2:	885a      	ldrh	r2, [r3, #2]
 80018b4:	9200      	str	r2, [sp, #0]
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	490b      	ldr	r1, [pc, #44]	; (80018e8 <Echo_Get_Res_Data+0xb0>)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <Echo_Get_Res_Data+0x98>)
 80018bc:	aa05      	add	r2, sp, #20
 80018be:	f005 fa9f 	bl	8006e00 <siprintf>
		break;
 80018c2:	e7d5      	b.n	8001870 <Echo_Get_Res_Data+0x38>
 80018c4:	0800b78c 	.word	0x0800b78c
 80018c8:	200003e8 	.word	0x200003e8
 80018cc:	0800b6b1 	.word	0x0800b6b1
 80018d0:	200003ee 	.word	0x200003ee
 80018d4:	0800b70c 	.word	0x0800b70c
 80018d8:	0800b6be 	.word	0x0800b6be
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	0800b6cb 	.word	0x0800b6cb
 80018e4:	200004ee 	.word	0x200004ee
 80018e8:	0800b6d8 	.word	0x0800b6d8

080018ec <Echo_Factory_Reset>:
/*
 * FACTORY RESET
 * */
void Echo_Factory_Reset()
{
	pwm_param.dead_time = 20;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <Echo_Factory_Reset+0x1c>)
 80018ee:	2214      	movs	r2, #20
 80018f0:	801a      	strh	r2, [r3, #0]
	pwm_param.pulse_width = 1000;
 80018f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f6:	805a      	strh	r2, [r3, #2]
	pwm_param.pulse_freq = 100;
 80018f8:	2264      	movs	r2, #100	; 0x64
 80018fa:	809a      	strh	r2, [r3, #4]
	v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <Echo_Factory_Reset+0x20>)
 80018fe:	220a      	movs	r2, #10
 8001900:	601a      	str	r2, [r3, #0]
	Echo_Flash_Write();
 8001902:	f7ff bccf 	b.w	80012a4 <Echo_Flash_Write>
 8001906:	bf00      	nop
 8001908:	200003e8 	.word	0x200003e8
 800190c:	2000000c 	.word	0x2000000c

08001910 <Echo_Pulse_Prm_Config>:
 * */
void Echo_Pulse_Prm_Config()
{
	/* HZ SETTING */
	TIM2->CNT = 0;
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001910:	4910      	ldr	r1, [pc, #64]	; (8001954 <Echo_Pulse_Prm_Config+0x44>)
	TIM2->CNT = 0;
 8001912:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001916:	2300      	movs	r3, #0
 8001918:	6243      	str	r3, [r0, #36]	; 0x24
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 800191a:	888a      	ldrh	r2, [r1, #4]
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <Echo_Pulse_Prm_Config+0x48>)
 800191e:	fbb3 f3f2 	udiv	r3, r3, r2

	/* PULSE and DEAD TIME SETTING */
	TIM2->CCR2 = ANODE_PULSE_TIME;
 8001922:	884a      	ldrh	r2, [r1, #2]
	TIM2->ARR = PULSE_FREQ_ARR - 1;
 8001924:	3b01      	subs	r3, #1
 8001926:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM2->CCR2 = ANODE_PULSE_TIME;
 8001928:	f102 030a 	add.w	r3, r2, #10
 800192c:	6383      	str	r3, [r0, #56]	; 0x38
	cathode_pwm_arr[0] = CATHODE_PULSE_TIME0;
 800192e:	880b      	ldrh	r3, [r1, #0]
 8001930:	490a      	ldr	r1, [pc, #40]	; (800195c <Echo_Pulse_Prm_Config+0x4c>)
 8001932:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001936:	f103 000a 	add.w	r0, r3, #10
 800193a:	6008      	str	r0, [r1, #0]
	cathode_pwm_arr[1] = CATHODE_PULSE_TIME1;
 800193c:	1a98      	subs	r0, r3, r2
 800193e:	6048      	str	r0, [r1, #4]
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <Echo_Pulse_Prm_Config+0x50>)
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 8001942:	3305      	adds	r3, #5
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001944:	3205      	adds	r2, #5
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 8001946:	3005      	adds	r0, #5
	current_ctrl_proc_arr[0] = CURRENT_CTRL_TIME0;
 8001948:	600a      	str	r2, [r1, #0]
	current_ctrl_proc_arr[1] = CURRENT_CTRL_TIME1;
 800194a:	6048      	str	r0, [r1, #4]
	current_ctrl_proc_arr[2] = CURRENT_CTRL_TIME2;
 800194c:	608b      	str	r3, [r1, #8]
	current_ctrl_proc_arr[3] = CURRENT_CTRL_TIME3;
 800194e:	2305      	movs	r3, #5
 8001950:	60cb      	str	r3, [r1, #12]
}
 8001952:	4770      	bx	lr
 8001954:	200003e8 	.word	0x200003e8
 8001958:	000f4240 	.word	0x000f4240
 800195c:	200003d0 	.word	0x200003d0
 8001960:	200003d8 	.word	0x200003d8

08001964 <Echo_Set_DT>:
{
 8001964:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setDT,%hd%*[^\r]",
 8001966:	4c08      	ldr	r4, [pc, #32]	; (8001988 <Echo_Set_DT+0x24>)
 8001968:	4908      	ldr	r1, [pc, #32]	; (800198c <Echo_Set_DT+0x28>)
 800196a:	4622      	mov	r2, r4
 800196c:	f005 fa68 	bl	8006e40 <siscanf>
	if (pwm_param.dead_time < (GLICH_DEBOUNCING_TIME * 2))
 8001970:	8823      	ldrh	r3, [r4, #0]
 8001972:	2b09      	cmp	r3, #9
		pwm_param.dead_time = GLICH_DEBOUNCING_TIME * 2;
 8001974:	bf9c      	itt	ls
 8001976:	230a      	movls	r3, #10
 8001978:	8023      	strhls	r3, [r4, #0]
	Echo_Pulse_Prm_Config();
 800197a:	f7ff ffc9 	bl	8001910 <Echo_Pulse_Prm_Config>
}
 800197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_Get_Res_Data(RESPONSE_DEADTIME);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff bf58 	b.w	8001838 <Echo_Get_Res_Data>
 8001988:	200003e8 	.word	0x200003e8
 800198c:	0800b711 	.word	0x0800b711

08001990 <Echo_Set_PW>:
{
 8001990:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setPW,%hd%*[^\r]",
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <Echo_Set_PW+0x18>)
 8001994:	4905      	ldr	r1, [pc, #20]	; (80019ac <Echo_Set_PW+0x1c>)
 8001996:	f005 fa53 	bl	8006e40 <siscanf>
	Echo_Pulse_Prm_Config();
 800199a:	f7ff ffb9 	bl	8001910 <Echo_Pulse_Prm_Config>
}
 800199e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_PULSEWIDTH);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff bf48 	b.w	8001838 <Echo_Get_Res_Data>
 80019a8:	200003ea 	.word	0x200003ea
 80019ac:	0800b722 	.word	0x0800b722

080019b0 <Echo_Set_HZ>:
{
 80019b0:	b510      	push	{r4, lr}
	sscanf((const char*) data, (const char*) "#setHZ,%hd%*[^\r]",
 80019b2:	4c12      	ldr	r4, [pc, #72]	; (80019fc <Echo_Set_HZ+0x4c>)
 80019b4:	4912      	ldr	r1, [pc, #72]	; (8001a00 <Echo_Set_HZ+0x50>)
 80019b6:	1d22      	adds	r2, r4, #4
 80019b8:	f005 fa42 	bl	8006e40 <siscanf>
	if (PULSE_FREQ_ARR <= (TOTAL_PULSE_WIDTH_TIME * 2))
 80019bc:	88a3      	ldrh	r3, [r4, #4]
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <Echo_Set_HZ+0x54>)
 80019c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c4:	8863      	ldrh	r3, [r4, #2]
 80019c6:	8821      	ldrh	r1, [r4, #0]
 80019c8:	3305      	adds	r3, #5
 80019ca:	440b      	add	r3, r1
 80019cc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
		pwm_param.pulse_freq = 1;
 80019d0:	bfdc      	itt	le
 80019d2:	2301      	movle	r3, #1
 80019d4:	80a3      	strhle	r3, [r4, #4]
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 80019d6:	f000 f945 	bl	8001c64 <Echo_Get_Sys_FSM_State>
 80019da:	2802      	cmp	r0, #2
 80019dc:	d10a      	bne.n	80019f4 <Echo_Set_HZ+0x44>
		Echo_Set_Sys_FSM_State_Stop();
 80019de:	f000 f94d 	bl	8001c7c <Echo_Set_Sys_FSM_State_Stop>
		Echo_Pulse_Prm_Config();
 80019e2:	f7ff ff95 	bl	8001910 <Echo_Pulse_Prm_Config>
		Echo_Set_Sys_FSM_State_Start();
 80019e6:	f000 f943 	bl	8001c70 <Echo_Set_Sys_FSM_State_Start>
}
 80019ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Echo_Get_Res_Data(RESPONSE_FREQUENCY);
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7ff bf22 	b.w	8001838 <Echo_Get_Res_Data>
		Echo_Pulse_Prm_Config();
 80019f4:	f7ff ff8c 	bl	8001910 <Echo_Pulse_Prm_Config>
 80019f8:	e7f7      	b.n	80019ea <Echo_Set_HZ+0x3a>
 80019fa:	bf00      	nop
 80019fc:	200003e8 	.word	0x200003e8
 8001a00:	0800b733 	.word	0x0800b733
 8001a04:	000f4240 	.word	0x000f4240

08001a08 <Echo_Pulse_V_PW_Config>:
/*
 * STEP UP PWM VALUE WRITE TO REGISTOR
 * */
void Echo_Pulse_V_PW_Config()
{
	TIM1->CCR1 = v_step_tv;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <Echo_Pulse_V_PW_Config+0xc>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <Echo_Pulse_V_PW_Config+0x10>)
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	40012c00 	.word	0x40012c00

08001a1c <Echo_Set_V_PW>:
{
 8001a1c:	b508      	push	{r3, lr}
	sscanf((const char*) data, (const char*) "#setVPW,%d%*[^\r]", &v_step_tv);
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <Echo_Set_V_PW+0x28>)
 8001a20:	4909      	ldr	r1, [pc, #36]	; (8001a48 <Echo_Set_V_PW+0x2c>)
 8001a22:	f005 fa0d 	bl	8006e40 <siscanf>
	if (Echo_Get_Sys_FSM_State() == ECHO_SYS_STATE_RUN)
 8001a26:	f000 f91d 	bl	8001c64 <Echo_Get_Sys_FSM_State>
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d102      	bne.n	8001a34 <Echo_Set_V_PW+0x18>
		HAL_TIM_Base_Start_IT(&htim16);
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <Echo_Set_V_PW+0x30>)
 8001a30:	f002 ff2c 	bl	800488c <HAL_TIM_Base_Start_IT>
	Echo_Pulse_V_PW_Config();
 8001a34:	f7ff ffe8 	bl	8001a08 <Echo_Pulse_V_PW_Config>
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001a38:	2003      	movs	r0, #3
}
 8001a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Echo_Get_Res_Data(RESPONSE_VOLTAGE_PW);
 8001a3e:	f7ff befb 	b.w	8001838 <Echo_Get_Res_Data>
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	0800b744 	.word	0x0800b744
 8001a4c:	2000082c 	.word	0x2000082c

08001a50 <Echo_StepUP_Stop>:

/*
 * Stimulation Voltage Setting Start AND Stop
 * */
void Echo_StepUP_Stop()
{
 8001a50:	b508      	push	{r3, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <Echo_StepUP_Stop+0x14>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	f003 fb17 	bl	8005088 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim16);
}
 8001a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop_IT(&htim16);
 8001a5e:	4802      	ldr	r0, [pc, #8]	; (8001a68 <Echo_StepUP_Stop+0x18>)
 8001a60:	f002 bf3e 	b.w	80048e0 <HAL_TIM_Base_Stop_IT>
 8001a64:	200007e0 	.word	0x200007e0
 8001a68:	2000082c 	.word	0x2000082c

08001a6c <Echo_Stim_Stop>:
{
 8001a6c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); // ANODE
 8001a6e:	4c0b      	ldr	r4, [pc, #44]	; (8001a9c <Echo_Stim_Stop+0x30>)
 8001a70:	2104      	movs	r1, #4
 8001a72:	4620      	mov	r0, r4
 8001a74:	f003 fb08 	bl	8005088 <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_1); // CURRENT
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f003 fbee 	bl	800525c <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, TIM_CHANNEL_4); // CATHODE
 8001a80:	210c      	movs	r1, #12
 8001a82:	4620      	mov	r0, r4
 8001a84:	f003 fbea 	bl	800525c <HAL_TIM_OC_Stop_DMA>
	Echo_StepUP_Stop();
 8001a88:	f7ff ffe2 	bl	8001a50 <Echo_StepUP_Stop>
	Echo_Stop_ADC2_Conv();
 8001a8c:	f7ff fb70 	bl	8001170 <Echo_Stop_ADC2_Conv>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001a90:	4620      	mov	r0, r4
}
 8001a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8001a96:	f002 bf23 	b.w	80048e0 <HAL_TIM_Base_Stop_IT>
 8001a9a:	bf00      	nop
 8001a9c:	20000878 	.word	0x20000878

08001aa0 <Echo_StepUP_Start>:

void Echo_StepUP_Start()
{
 8001aa0:	b508      	push	{r3, lr}
	TIM1->CCR1 = v_step_tv;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <Echo_StepUP_Start+0x1c>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <Echo_StepUP_Start+0x20>)
	TIM1->CCR1 = v_step_tv;
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <Echo_StepUP_Start+0x24>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aaa:	2100      	movs	r1, #0
	TIM1->CCR1 = v_step_tv;
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aae:	f003 fa9b 	bl	8004fe8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);
}
 8001ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim16);
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <Echo_StepUP_Start+0x28>)
 8001ab8:	f002 bee8 	b.w	800488c <HAL_TIM_Base_Start_IT>
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	200007e0 	.word	0x200007e0
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	2000082c 	.word	0x2000082c

08001acc <Echo_Stim_Start>:
{
 8001acc:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig =
 8001ace:	2500      	movs	r5, #0
{
 8001ad0:	b08b      	sub	sp, #44	; 0x2c
	htim2.Instance = TIM2;
 8001ad2:	4c3f      	ldr	r4, [pc, #252]	; (8001bd0 <Echo_Stim_Start+0x104>)
	TIM_MasterConfigTypeDef sMasterConfig =
 8001ad4:	9502      	str	r5, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC =
 8001ad6:	221c      	movs	r2, #28
 8001ad8:	4629      	mov	r1, r5
 8001ada:	a803      	add	r0, sp, #12
	TIM_MasterConfigTypeDef sMasterConfig =
 8001adc:	e9cd 5500 	strd	r5, r5, [sp]
	TIM_OC_InitTypeDef sConfigOC =
 8001ae0:	f004 fa62 	bl	8005fa8 <memset>
	htim2.Init.Prescaler = 79;
 8001ae4:	234f      	movs	r3, #79	; 0x4f
 8001ae6:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001aea:	e9c4 c300 	strd	ip, r3, [r4]
	htim2.Init.Period = 999;
 8001aee:	f240 33e7 	movw	r3, #999	; 0x3e7
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	e9c4 3503 	strd	r3, r5, [r4, #12]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001af6:	4620      	mov	r0, r4
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af8:	2380      	movs	r3, #128	; 0x80
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001afc:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001afe:	f003 f8a5 	bl	8004c4c <HAL_TIM_OC_Init>
 8001b02:	b108      	cbz	r0, 8001b08 <Echo_Stim_Start+0x3c>
		Error_Handler();
 8001b04:	f000 fbaa 	bl	800225c <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b08:	4831      	ldr	r0, [pc, #196]	; (8001bd0 <Echo_Stim_Start+0x104>)
 8001b0a:	f003 f8cf 	bl	8004cac <HAL_TIM_PWM_Init>
 8001b0e:	b108      	cbz	r0, 8001b14 <Echo_Stim_Start+0x48>
		Error_Handler();
 8001b10:	f000 fba4 	bl	800225c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b14:	2320      	movs	r3, #32
 8001b16:	9300      	str	r3, [sp, #0]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b18:	482d      	ldr	r0, [pc, #180]	; (8001bd0 <Echo_Stim_Start+0x104>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b1c:	4669      	mov	r1, sp
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b20:	f003 fc12 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	b108      	cbz	r0, 8001b2a <Echo_Stim_Start+0x5e>
		Error_Handler();
 8001b26:	f000 fb99 	bl	800225c <Error_Handler>
	sConfigOC.Pulse = 5;
 8001b2a:	2030      	movs	r0, #48	; 0x30
 8001b2c:	2305      	movs	r3, #5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2e:	2200      	movs	r2, #0
	sConfigOC.Pulse = 5;
 8001b30:	e9cd 0303 	strd	r0, r3, [sp, #12]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b34:	a903      	add	r1, sp, #12
 8001b36:	4826      	ldr	r0, [pc, #152]	; (8001bd0 <Echo_Stim_Start+0x104>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	9205      	str	r2, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	9207      	str	r2, [sp, #28]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	f003 f91e 	bl	8004d7c <HAL_TIM_OC_ConfigChannel>
 8001b40:	b108      	cbz	r0, 8001b46 <Echo_Stim_Start+0x7a>
		Error_Handler();
 8001b42:	f000 fb8b 	bl	800225c <Error_Handler>
	sConfigOC.Pulse = 1010;
 8001b46:	2160      	movs	r1, #96	; 0x60
 8001b48:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001b4c:	e9cd 1303 	strd	r1, r3, [sp, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <Echo_Stim_Start+0x104>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	a903      	add	r1, sp, #12
 8001b56:	f003 f945 	bl	8004de4 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	b108      	cbz	r0, 8001b60 <Echo_Stim_Start+0x94>
		Error_Handler();
 8001b5c:	f000 fb7e 	bl	800225c <Error_Handler>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001b60:	6822      	ldr	r2, [r4, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b62:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <Echo_Stim_Start+0x104>)
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001b64:	6993      	ldr	r3, [r2, #24]
 8001b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b6a:	6193      	str	r3, [r2, #24]
	sConfigOC.Pulse = 1040;
 8001b6c:	2230      	movs	r2, #48	; 0x30
 8001b6e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001b72:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b76:	220c      	movs	r2, #12
 8001b78:	eb0d 0102 	add.w	r1, sp, r2
 8001b7c:	f003 f8fe 	bl	8004d7c <HAL_TIM_OC_ConfigChannel>
 8001b80:	b108      	cbz	r0, 8001b86 <Echo_Stim_Start+0xba>
		Error_Handler();
 8001b82:	f000 fb6b 	bl	800225c <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8001b86:	4812      	ldr	r0, [pc, #72]	; (8001bd0 <Echo_Stim_Start+0x104>)
 8001b88:	f000 fcb6 	bl	80024f8 <HAL_TIM_MspPostInit>
	Echo_Pulse_Prm_Config();
 8001b8c:	f7ff fec0 	bl	8001910 <Echo_Pulse_Prm_Config>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1 TIM2 CH_2 ANODE
 8001b90:	2104      	movs	r1, #4
 8001b92:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <Echo_Stim_Start+0x104>)
 8001b94:	f003 fa28 	bl	8004fe8 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_1,
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <Echo_Stim_Start+0x108>)
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <Echo_Stim_Start+0x104>)
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f003 fa74 	bl	800508c <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <Echo_Stim_Start+0x10c>)
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 8001ba6:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <Echo_Stim_Start+0x104>)
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch1, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f023 0306 	bic.w	r3, r3, #6
 8001bb0:	6013      	str	r3, [r2, #0]
	HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t*) cathode_pwm_arr, 2); // PA3 TIM2 CH_4 CATHODE
 8001bb2:	210c      	movs	r1, #12
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <Echo_Stim_Start+0x110>)
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f003 fa68 	bl	800508c <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT)); // HAL_DMA_Start_IT
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <Echo_Stim_Start+0x114>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	f023 0306 	bic.w	r3, r3, #6
 8001bc6:	6013      	str	r3, [r2, #0]
	Echo_StepUP_Start();
 8001bc8:	f7ff ff6a 	bl	8001aa0 <Echo_StepUP_Start>
}
 8001bcc:	b00b      	add	sp, #44	; 0x2c
 8001bce:	bd30      	pop	{r4, r5, pc}
 8001bd0:	20000878 	.word	0x20000878
 8001bd4:	200003d8 	.word	0x200003d8
 8001bd8:	20000750 	.word	0x20000750
 8001bdc:	200003d0 	.word	0x200003d0
 8001be0:	20000798 	.word	0x20000798

08001be4 <Echo_PCI_State_Init>:
	MX_TIM6_Init();
}
/**********************/

void Echo_PCI_State_Init()
{
 8001be4:	b500      	push	{lr}
	HAL_Delay(200);
 8001be6:	20c8      	movs	r0, #200	; 0xc8
{
 8001be8:	b08f      	sub	sp, #60	; 0x3c
	HAL_Delay(200);
 8001bea:	f000 fe77 	bl	80028dc <HAL_Delay>
	char res_msg[55] =
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2233      	movs	r2, #51	; 0x33
 8001bf2:	a801      	add	r0, sp, #4
 8001bf4:	9100      	str	r1, [sp, #0]
 8001bf6:	f004 f9d7 	bl	8005fa8 <memset>
	{ '\0', };
	// FLASH READ
	if (Echo_Flash_Read() != HAL_OK)
 8001bfa:	f7ff fbc5 	bl	8001388 <Echo_Flash_Read>
 8001bfe:	b150      	cbz	r0, 8001c16 <Echo_PCI_State_Init+0x32>
	{
		pwm_param.dead_time = 20;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <Echo_PCI_State_Init+0x68>)
 8001c02:	2214      	movs	r2, #20
 8001c04:	801a      	strh	r2, [r3, #0]
		pwm_param.pulse_width = 1000;
 8001c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0a:	805a      	strh	r2, [r3, #2]
		pwm_param.pulse_freq = 100;
 8001c0c:	2264      	movs	r2, #100	; 0x64
 8001c0e:	809a      	strh	r2, [r3, #4]
		v_step_tv = VOLTAGE_STEP_TARGET_VALUE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <Echo_PCI_State_Init+0x6c>)
 8001c12:	220a      	movs	r2, #10
 8001c14:	601a      	str	r2, [r3, #0]
	}

	Echo_Print_Version();
 8001c16:	f7ff fca5 	bl	8001564 <Echo_Print_Version>
	sprintf((char*) res_msg, (const char*) "Echo_PCI_State_Init()\r\n"
 8001c1a:	f002 fc17 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <Echo_PCI_State_Init+0x70>)
 8001c20:	4602      	mov	r2, r0
 8001c22:	4668      	mov	r0, sp
 8001c24:	f005 f8ec 	bl	8006e00 <siprintf>
			"SYSTEM CLOCK : %lu Hz\r\n", HAL_RCC_GetHCLKFreq());

	ECHO_SHELL_PRINT(("%s\n", res_msg));
 8001c28:	4668      	mov	r0, sp
 8001c2a:	f005 f8db 	bl	8006de4 <puts>
	Echo_ADC_State_Init();
 8001c2e:	f7ff fa09 	bl	8001044 <Echo_ADC_State_Init>
	Echo_Print_Manual();
 8001c32:	f7ff fc91 	bl	8001558 <Echo_Print_Manual>
	Echo_LED_Init();
 8001c36:	f7ff fbd1 	bl	80013dc <Echo_LED_Init>
	Echo_Sys_FSM_State_Init();
 8001c3a:	f000 f80d 	bl	8001c58 <Echo_Sys_FSM_State_Init>
	Echo_Shell_Init();
 8001c3e:	f7ff fcbb 	bl	80015b8 <Echo_Shell_Init>
	Echo_Uart2_INTERRUPT_ENA();
 8001c42:	f000 f85f 	bl	8001d04 <Echo_Uart2_INTERRUPT_ENA>
}
 8001c46:	b00f      	add	sp, #60	; 0x3c
 8001c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c4c:	200003e8 	.word	0x200003e8
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	0800b7b4 	.word	0x0800b7b4

08001c58 <Echo_Sys_FSM_State_Init>:
		ECHO_SHELL_PRINT(("UNKNOWN ECHO STATE: %d\n", state));
#endif
		break;

	}
	ECHO_CUR_SYS_STATE = state;
 8001c58:	4b01      	ldr	r3, [pc, #4]	; (8001c60 <Echo_Sys_FSM_State_Init+0x8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
}
 8001c5e:	4770      	bx	lr
 8001c60:	200004ef 	.word	0x200004ef

08001c64 <Echo_Get_Sys_FSM_State>:
}
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <Echo_Get_Sys_FSM_State+0x8>)
 8001c66:	7818      	ldrb	r0, [r3, #0]
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200004ef 	.word	0x200004ef

08001c70 <Echo_Set_Sys_FSM_State_Start>:
	cur_state = ECHO_SYS_STATE_RUN;
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <Echo_Set_Sys_FSM_State_Start+0x8>)
 8001c72:	2202      	movs	r2, #2
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	4770      	bx	lr
 8001c78:	20000010 	.word	0x20000010

08001c7c <Echo_Set_Sys_FSM_State_Stop>:
	cur_state = ECHO_SYS_STATE_IDLE;
 8001c7c:	4b01      	ldr	r3, [pc, #4]	; (8001c84 <Echo_Set_Sys_FSM_State_Stop+0x8>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	4770      	bx	lr
 8001c84:	20000010 	.word	0x20000010

08001c88 <Echo_Set_Sys_FSM_State>:
	switch (state)
 8001c88:	2802      	cmp	r0, #2
{
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	4604      	mov	r4, r0
	switch (state)
 8001c8e:	d00d      	beq.n	8001cac <Echo_Set_Sys_FSM_State+0x24>
 8001c90:	2803      	cmp	r0, #3
 8001c92:	d00e      	beq.n	8001cb2 <Echo_Set_Sys_FSM_State+0x2a>
 8001c94:	2801      	cmp	r0, #1
 8001c96:	d106      	bne.n	8001ca6 <Echo_Set_Sys_FSM_State+0x1e>
		Echo_Stim_Stop();
 8001c98:	f7ff fee8 	bl	8001a6c <Echo_Stim_Stop>
		Echo_Set_LED_State(ECHO_LED_RUN);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fbb3 	bl	8001408 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_RUN;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <Echo_Set_Sys_FSM_State+0x38>)
 8001ca4:	701c      	strb	r4, [r3, #0]
	ECHO_CUR_SYS_STATE = state;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <Echo_Set_Sys_FSM_State+0x3c>)
 8001ca8:	701c      	strb	r4, [r3, #0]
}
 8001caa:	bd10      	pop	{r4, pc}
		Echo_Stim_Start();
 8001cac:	f7ff ff0e 	bl	8001acc <Echo_Stim_Start>
 8001cb0:	e7f4      	b.n	8001c9c <Echo_Set_Sys_FSM_State+0x14>
		Echo_Set_LED_State(ECHO_LED_IDLE);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fba8 	bl	8001408 <Echo_Set_LED_State>
		adc1_cur_state = ECHO_ADC1_ERROR;
 8001cb8:	4b01      	ldr	r3, [pc, #4]	; (8001cc0 <Echo_Set_Sys_FSM_State+0x38>)
 8001cba:	2205      	movs	r2, #5
 8001cbc:	701a      	strb	r2, [r3, #0]
		break;
 8001cbe:	e7f2      	b.n	8001ca6 <Echo_Set_Sys_FSM_State+0x1e>
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	200004ef 	.word	0x200004ef

08001cc8 <Echo_Sys_FSM_State_Handle>:
{
 8001cc8:	b508      	push	{r3, lr}
	if (Echo_Btn_IsHandled() == true)
 8001cca:	f7ff fabb 	bl	8001244 <Echo_Btn_IsHandled>
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <Echo_Sys_FSM_State_Handle+0x34>)
 8001cd0:	b120      	cbz	r0, 8001cdc <Echo_Sys_FSM_State_Handle+0x14>
		if (cur_state == ECHO_SYS_STATE_IDLE)
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	2a01      	cmp	r2, #1
 8001cd6:	d10c      	bne.n	8001cf2 <Echo_Sys_FSM_State_Handle+0x2a>
			cur_state = ECHO_SYS_STATE_RUN;
 8001cd8:	2202      	movs	r2, #2
			cur_state = ECHO_SYS_STATE_IDLE;
 8001cda:	701a      	strb	r2, [r3, #0]
	if (ECHO_CUR_SYS_STATE != cur_state)
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <Echo_Sys_FSM_State_Handle+0x38>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4283      	cmp	r3, r0
 8001ce4:	d009      	beq.n	8001cfa <Echo_Sys_FSM_State_Handle+0x32>
		Echo_Set_Sys_FSM_State(cur_state);
 8001ce6:	f7ff ffcf 	bl	8001c88 <Echo_Set_Sys_FSM_State>
}
 8001cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Echo_Btn_Handled_Clear();
 8001cee:	f7ff baaf 	b.w	8001250 <Echo_Btn_Handled_Clear>
		else if (cur_state == ECHO_SYS_STATE_RUN)
 8001cf2:	2a02      	cmp	r2, #2
 8001cf4:	d1f2      	bne.n	8001cdc <Echo_Sys_FSM_State_Handle+0x14>
			cur_state = ECHO_SYS_STATE_IDLE;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	e7ef      	b.n	8001cda <Echo_Sys_FSM_State_Handle+0x12>
}
 8001cfa:	bd08      	pop	{r3, pc}
 8001cfc:	20000010 	.word	0x20000010
 8001d00:	200004ef 	.word	0x200004ef

08001d04 <Echo_Uart2_INTERRUPT_ENA>:

/*
 * UART2 INTERRUPT ENABLE
 * */
void Echo_Uart2_INTERRUPT_ENA(void)
{
 8001d04:	b510      	push	{r4, lr}
	/* Clear state REGs */
	ECHO_USART2_STATE_RESET();
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001d06:	4c08      	ldr	r4, [pc, #32]	; (8001d28 <Echo_Uart2_INTERRUPT_ENA+0x24>)
	ECHO_USART2_STATE_RESET();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <Echo_Uart2_INTERRUPT_ENA+0x28>)
 8001d0a:	2200      	movs	r2, #0
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001d0c:	4620      	mov	r0, r4
	ECHO_USART2_STATE_RESET();
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	805a      	strh	r2, [r3, #2]
 8001d12:	809a      	strh	r2, [r3, #4]
	HAL_UART_AbortReceive_IT(&ECHO_USART2_HANDLE);
 8001d14:	f003 fbc0 	bl	8005498 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4905      	ldr	r1, [pc, #20]	; (8001d30 <Echo_Uart2_INTERRUPT_ENA+0x2c>)
}
 8001d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f004 b8ed 	b.w	8005f00 <HAL_UART_Receive_IT>
 8001d26:	bf00      	nop
 8001d28:	20000948 	.word	0x20000948
 8001d2c:	200004f2 	.word	0x200004f2
 8001d30:	200004f0 	.word	0x200004f0

08001d34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
	{
	}
	else if (huart->Instance == USART2)
 8001d34:	6802      	ldr	r2, [r0, #0]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_UART_RxCpltCallback+0x2c>)
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10b      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x20>
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_UART_RxCpltCallback+0x30>)
	{
		Echo_Uart2_RCV_Q_Put_INLINE(echo_uart2_rcv_byte);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_UART_RxCpltCallback+0x34>)
 8001d40:	7819      	ldrb	r1, [r3, #0]
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001d42:	8853      	ldrh	r3, [r2, #2]
 8001d44:	3301      	adds	r3, #1
			% ECHO_USART2_RCV_Q_SIZE;
 8001d46:	b2db      	uxtb	r3, r3
	echo_uart2_state.q_rear = (echo_uart2_state.q_rear + 1)
 8001d48:	8053      	strh	r3, [r2, #2]
	echo_uart2_state.queue[echo_uart2_state.q_rear] = item;
 8001d4a:	4413      	add	r3, r2
 8001d4c:	7199      	strb	r1, [r3, #6]
	echo_uart2_state.item_num++;
 8001d4e:	8893      	ldrh	r3, [r2, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	8093      	strh	r3, [r2, #4]
	}
	HAL_UART_Receive_IT(&ECHO_USART2_HANDLE, &echo_uart2_rcv_byte, 1);
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <HAL_UART_RxCpltCallback+0x34>)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_UART_RxCpltCallback+0x38>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f004 b8d1 	b.w	8005f00 <HAL_UART_Receive_IT>
 8001d5e:	bf00      	nop
 8001d60:	40004400 	.word	0x40004400
 8001d64:	200004f2 	.word	0x200004f2
 8001d68:	200004f0 	.word	0x200004f0
 8001d6c:	20000948 	.word	0x20000948

08001d70 <Echo_Uart2_Get_RCV_Q>:
}
/**********************/

bool Echo_Uart2_Get_RCV_Q(uint8_t *item)
{
 8001d70:	b510      	push	{r4, lr}
#ifdef DEBUG
	ECHO_SHELL_PRINT(("aulUsart1GetRcvQ()\n"));
#endif
	data_valid = false;

	if (echo_uart2_state.item_num > 0)
 8001d72:	4c0b      	ldr	r4, [pc, #44]	; (8001da0 <Echo_Uart2_Get_RCV_Q+0x30>)
 8001d74:	88a3      	ldrh	r3, [r4, #4]
 8001d76:	b18b      	cbz	r3, 8001d9c <Echo_Uart2_Get_RCV_Q+0x2c>
	{
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001d78:	8823      	ldrh	r3, [r4, #0]
 8001d7a:	3301      	adds	r3, #1
				% ECHO_USART2_RCV_Q_SIZE;
 8001d7c:	b2db      	uxtb	r3, r3
		echo_uart2_state.q_front = (echo_uart2_state.q_front + 1)
 8001d7e:	8023      	strh	r3, [r4, #0]
		*item = echo_uart2_state.queue[echo_uart2_state.q_front];
 8001d80:	4423      	add	r3, r4
 8001d82:	799b      	ldrb	r3, [r3, #6]
 8001d84:	7003      	strb	r3, [r0, #0]

		ECHO_USART2_MUTEX_LOCK
 8001d86:	2026      	movs	r0, #38	; 0x26
 8001d88:	f001 fb66 	bl	8003458 <HAL_NVIC_DisableIRQ>
		;

		echo_uart2_state.item_num--;
 8001d8c:	88a3      	ldrh	r3, [r4, #4]

		ECHO_USART2_MUTEX_UNLOCK
 8001d8e:	2026      	movs	r0, #38	; 0x26
		echo_uart2_state.item_num--;
 8001d90:	3b01      	subs	r3, #1
 8001d92:	80a3      	strh	r3, [r4, #4]
		ECHO_USART2_MUTEX_UNLOCK
 8001d94:	f001 fb52 	bl	800343c <HAL_NVIC_EnableIRQ>
		;

		data_valid = true;
 8001d98:	2001      	movs	r0, #1
	}
	return data_valid;
}
 8001d9a:	bd10      	pop	{r4, pc}
	data_valid = false;
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	e7fc      	b.n	8001d9a <Echo_Uart2_Get_RCV_Q+0x2a>
 8001da0:	200004f2 	.word	0x200004f2

08001da4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001da4:	b530      	push	{r4, r5, lr}
 8001da6:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001da8:	2244      	movs	r2, #68	; 0x44
 8001daa:	2100      	movs	r1, #0
 8001dac:	a805      	add	r0, sp, #20
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001dae:	2514      	movs	r5, #20
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001db0:	f004 f8fa 	bl	8005fa8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001db4:	462a      	mov	r2, r5
 8001db6:	2100      	movs	r1, #0
 8001db8:	4668      	mov	r0, sp
 8001dba:	f004 f8f5 	bl	8005fa8 <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dc2:	f001 fefd 	bl	8003bc0 <HAL_PWREx_ControlVoltageScaling>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	b108      	cbz	r0, 8001dce <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dca:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dcc:	e7fe      	b.n	8001dcc <SystemClock_Config+0x28>
	HAL_PWR_EnableBkUpAccess();
 8001dce:	f001 fee7 	bl	8003ba0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <SystemClock_Config+0x8c>)
 8001dd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dd8:	f023 0318 	bic.w	r3, r3, #24
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001de0:	2260      	movs	r2, #96	; 0x60
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001de2:	2301      	movs	r3, #1
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001de4:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2202      	movs	r2, #2
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001de8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001df0:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001df2:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df4:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001df6:	2328      	movs	r3, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001df8:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001dfc:	9505      	str	r5, [sp, #20]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dfe:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f001 ffa4 	bl	8003d4c <HAL_RCC_OscConfig>
 8001e04:	b108      	cbz	r0, 8001e0a <SystemClock_Config+0x66>
 8001e06:	b672      	cpsid	i
	while (1)
 8001e08:	e7fe      	b.n	8001e08 <SystemClock_Config+0x64>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0a:	e9cd 0002 	strd	r0, r0, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0e:	220f      	movs	r2, #15
 8001e10:	2303      	movs	r3, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e14:	2104      	movs	r1, #4
 8001e16:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	e9cd 2300 	strd	r2, r3, [sp]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e1c:	f002 fa6c 	bl	80042f8 <HAL_RCC_ClockConfig>
 8001e20:	b108      	cbz	r0, 8001e26 <SystemClock_Config+0x82>
 8001e22:	b672      	cpsid	i
	while (1)
 8001e24:	e7fe      	b.n	8001e24 <SystemClock_Config+0x80>
	HAL_RCCEx_EnableMSIPLLMode();
 8001e26:	f002 fc31 	bl	800468c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e2a:	b017      	add	sp, #92	; 0x5c
 8001e2c:	bd30      	pop	{r4, r5, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <main>:
{
 8001e34:	b580      	push	{r7, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	4db1      	ldr	r5, [pc, #708]	; (80020fc <main+0x2c8>)
{
 8001e38:	b09a      	sub	sp, #104	; 0x68
	HAL_Init();
 8001e3a:	f000 fd2d 	bl	8002898 <HAL_Init>
	SystemClock_Config();
 8001e3e:	f7ff ffb1 	bl	8001da4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8001e42:	2214      	movs	r2, #20
 8001e44:	2100      	movs	r1, #0
 8001e46:	a80f      	add	r0, sp, #60	; 0x3c
 8001e48:	f004 f8ae 	bl	8005fa8 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	HAL_GPIO_WritePin(GPIOB,
 8001e4e:	48ac      	ldr	r0, [pc, #688]	; (8002100 <main+0x2cc>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001e56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001e68:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	9303      	str	r3, [sp, #12]
 8001e70:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001e7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB,
 8001e82:	2200      	movs	r2, #0
 8001e84:	213b      	movs	r1, #59	; 0x3b
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB,
 8001e88:	f001 fe84 	bl	8003b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e96:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOA, DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin,
 8001e98:	f001 fe7c 	bl	8003b94 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2601      	movs	r6, #1
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2310      	movs	r3, #16
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	a90f      	add	r1, sp, #60	; 0x3c
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	9611      	str	r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(START_BTN_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f001 fdae 	bl	8003a0c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = QCC_CRTL0_Pin | QCC_CRTL1_Pin | LED_Pin
 8001eb0:	233b      	movs	r3, #59	; 0x3b
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	4893      	ldr	r0, [pc, #588]	; (8002100 <main+0x2cc>)
 8001eb4:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	f001 fda5 	bl	8003a0c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DAC0_Pin | DAC1_Pin | DAC2_Pin | DAC3_Pin;
 8001ec2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	a90f      	add	r1, sp, #60	; 0x3c
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f001 fd9a 	bl	8003a0c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ed8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001eda:	4333      	orrs	r3, r6
 8001edc:	64ab      	str	r3, [r5, #72]	; 0x48
 8001ede:	6cab      	ldr	r3, [r5, #72]	; 0x48
	htim1.Instance = TIM1;
 8001ee0:	4d88      	ldr	r5, [pc, #544]	; (8002104 <main+0x2d0>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ee2:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	2102      	movs	r1, #2
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ee8:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001eea:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001eec:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001eee:	f001 fa73 	bl	80033d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ef2:	200b      	movs	r0, #11
 8001ef4:	f001 faa2 	bl	800343c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001ef8:	4622      	mov	r2, r4
 8001efa:	2102      	movs	r1, #2
 8001efc:	200c      	movs	r0, #12
 8001efe:	f001 fa6b 	bl	80033d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f02:	200c      	movs	r0, #12
 8001f04:	f001 fa9a 	bl	800343c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f08:	4622      	mov	r2, r4
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	200f      	movs	r0, #15
 8001f0e:	f001 fa63 	bl	80033d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f001 fa92 	bl	800343c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001f18:	4622      	mov	r2, r4
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	2011      	movs	r0, #17
 8001f1e:	f001 fa5b 	bl	80033d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001f22:	2011      	movs	r0, #17
 8001f24:	f001 fa8a 	bl	800343c <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC =
 8001f28:	221c      	movs	r2, #28
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	a808      	add	r0, sp, #32
	TIM_MasterConfigTypeDef sMasterConfig =
 8001f2e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001f32:	9407      	str	r4, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC =
 8001f34:	f004 f838 	bl	8005fa8 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001f38:	222c      	movs	r2, #44	; 0x2c
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	a80f      	add	r0, sp, #60	; 0x3c
 8001f3e:	f004 f833 	bl	8005fa8 <memset>
	htim1.Instance = TIM1;
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <main+0x2d4>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	60ac      	str	r4, [r5, #8]
	htim1.Init.Prescaler = 0;
 8001f46:	e9c5 3400 	strd	r3, r4, [r5]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4a:	f04f 0880 	mov.w	r8, #128	; 0x80
	htim1.Init.Period = 9999;
 8001f4e:	f242 730f 	movw	r3, #9999	; 0x270f
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f52:	4628      	mov	r0, r5
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	e9c5 3403 	strd	r3, r4, [r5, #12]
	htim1.Init.RepetitionCounter = 0;
 8001f58:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f5a:	f8c5 8018 	str.w	r8, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f5e:	f002 fea5 	bl	8004cac <HAL_TIM_PWM_Init>
 8001f62:	b108      	cbz	r0, 8001f68 <main+0x134>
 8001f64:	b672      	cpsid	i
	while (1)
 8001f66:	e7fe      	b.n	8001f66 <main+0x132>
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f68:	e9cd 0005 	strd	r0, r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	a905      	add	r1, sp, #20
 8001f70:	4628      	mov	r0, r5
 8001f72:	f003 f9e9 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4602      	mov	r2, r0
 8001f78:	b108      	cbz	r0, 8001f7e <main+0x14a>
 8001f7a:	b672      	cpsid	i
	while (1)
 8001f7c:	e7fe      	b.n	8001f7c <main+0x148>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f7e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f82:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f86:	2760      	movs	r7, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f88:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8a:	a908      	add	r1, sp, #32
 8001f8c:	4628      	mov	r0, r5
	sConfigOC.Pulse = 1;
 8001f8e:	e9cd 7608 	strd	r7, r6, [sp, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f92:	f002 ff27 	bl	8004de4 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	b108      	cbz	r0, 8001f9c <main+0x168>
 8001f98:	b672      	cpsid	i
	while (1)
 8001f9a:	e7fe      	b.n	8001f9a <main+0x166>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001fa0:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa8:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8001fac:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001fb0:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb4:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fb6:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fb8:	9019      	str	r0, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fba:	a90f      	add	r1, sp, #60	; 0x3c
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f003 f9f5 	bl	80053ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001fc2:	4606      	mov	r6, r0
 8001fc4:	b108      	cbz	r0, 8001fca <main+0x196>
 8001fc6:	b672      	cpsid	i
	while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <main+0x194>
	HAL_TIM_MspPostInit(&htim1);
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f000 fa94 	bl	80024f8 <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 8001fd0:	4c4e      	ldr	r4, [pc, #312]	; (800210c <main+0x2d8>)
	TIM_MasterConfigTypeDef sMasterConfig =
 8001fd2:	960a      	str	r6, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC =
 8001fd4:	221c      	movs	r2, #28
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	a80f      	add	r0, sp, #60	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig =
 8001fda:	e9cd 6608 	strd	r6, r6, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC =
 8001fde:	f003 ffe3 	bl	8005fa8 <memset>
	htim2.Init.Prescaler = 79;
 8001fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fe6:	234f      	movs	r3, #79	; 0x4f
 8001fe8:	e9c4 0300 	strd	r0, r3, [r4]
	htim2.Init.Period = 999;
 8001fec:	f240 33e7 	movw	r3, #999	; 0x3e7
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ff0:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	e9c4 3603 	strd	r3, r6, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	60a6      	str	r6, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff8:	f8c4 8018 	str.w	r8, [r4, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ffc:	f002 fe26 	bl	8004c4c <HAL_TIM_OC_Init>
 8002000:	b108      	cbz	r0, 8002006 <main+0x1d2>
 8002002:	b672      	cpsid	i
	while (1)
 8002004:	e7fe      	b.n	8002004 <main+0x1d0>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002006:	4620      	mov	r0, r4
 8002008:	f002 fe50 	bl	8004cac <HAL_TIM_PWM_Init>
 800200c:	b108      	cbz	r0, 8002012 <main+0x1de>
 800200e:	b672      	cpsid	i
	while (1)
 8002010:	e7fe      	b.n	8002010 <main+0x1dc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002012:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002016:	eb0d 0103 	add.w	r1, sp, r3
 800201a:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800201c:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800201e:	f003 f993 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8002022:	4602      	mov	r2, r0
 8002024:	b108      	cbz	r0, 800202a <main+0x1f6>
 8002026:	b672      	cpsid	i
	while (1)
 8002028:	e7fe      	b.n	8002028 <main+0x1f4>
	sConfigOC.Pulse = 5;
 800202a:	2530      	movs	r5, #48	; 0x30
 800202c:	2305      	movs	r3, #5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202e:	9011      	str	r0, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002030:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	a90f      	add	r1, sp, #60	; 0x3c
 8002034:	4620      	mov	r0, r4
	sConfigOC.Pulse = 5;
 8002036:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203a:	f002 fe9f 	bl	8004d7c <HAL_TIM_OC_ConfigChannel>
 800203e:	b108      	cbz	r0, 8002044 <main+0x210>
 8002040:	b672      	cpsid	i
	while (1)
 8002042:	e7fe      	b.n	8002042 <main+0x20e>
	sConfigOC.Pulse = 1010;
 8002044:	f240 33f2 	movw	r3, #1010	; 0x3f2
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002048:	2204      	movs	r2, #4
 800204a:	a90f      	add	r1, sp, #60	; 0x3c
 800204c:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	970f      	str	r7, [sp, #60]	; 0x3c
	sConfigOC.Pulse = 1010;
 8002050:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002052:	f002 fec7 	bl	8004de4 <HAL_TIM_PWM_ConfigChannel>
 8002056:	b108      	cbz	r0, 800205c <main+0x228>
 8002058:	b672      	cpsid	i
	while (1)
 800205a:	e7fe      	b.n	800205a <main+0x226>
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	6993      	ldr	r3, [r2, #24]
 8002060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002064:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002066:	a90f      	add	r1, sp, #60	; 0x3c
	sConfigOC.Pulse = 1040;
 8002068:	f44f 6382 	mov.w	r3, #1040	; 0x410
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206c:	220c      	movs	r2, #12
 800206e:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002070:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.Pulse = 1040;
 8002072:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002074:	f002 fe82 	bl	8004d7c <HAL_TIM_OC_ConfigChannel>
 8002078:	b108      	cbz	r0, 800207e <main+0x24a>
 800207a:	b672      	cpsid	i
	while (1)
 800207c:	e7fe      	b.n	800207c <main+0x248>
	HAL_TIM_MspPostInit(&htim2);
 800207e:	4823      	ldr	r0, [pc, #140]	; (800210c <main+0x2d8>)
 8002080:	f000 fa3a 	bl	80024f8 <HAL_TIM_MspPostInit>
	htim16.Instance = TIM16;
 8002084:	4822      	ldr	r0, [pc, #136]	; (8002110 <main+0x2dc>)
	htim16.Init.Prescaler = 79;
 8002086:	4923      	ldr	r1, [pc, #140]	; (8002114 <main+0x2e0>)
 8002088:	234f      	movs	r3, #79	; 0x4f
 800208a:	e9c0 1300 	strd	r1, r3, [r0]
	htim16.Init.Period = 999;
 800208e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002092:	2300      	movs	r3, #0
 8002094:	e9c0 3202 	strd	r3, r2, [r0, #8]
	htim16.Init.RepetitionCounter = 0;
 8002098:	e9c0 3304 	strd	r3, r3, [r0, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020a0:	f002 fda4 	bl	8004bec <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b108      	cbz	r0, 80020ac <main+0x278>
 80020a8:	b672      	cpsid	i
	while (1)
 80020aa:	e7fe      	b.n	80020aa <main+0x276>
	huart1.Instance = USART1;
 80020ac:	481a      	ldr	r0, [pc, #104]	; (8002118 <main+0x2e4>)
	huart1.Init.BaudRate = 115200;
 80020ae:	4a1b      	ldr	r2, [pc, #108]	; (800211c <main+0x2e8>)
	huart1.Init.Parity = UART_PARITY_NONE;
 80020b0:	6103      	str	r3, [r0, #16]
	huart1.Init.BaudRate = 115200;
 80020b2:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 80020b6:	240c      	movs	r4, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020bc:	e9c0 4305 	strd	r4, r3, [r0, #20]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c0:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c4:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.Init.BaudRate = 115200;
 80020c6:	e9c0 2500 	strd	r2, r5, [r0]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ca:	f003 fe8a 	bl	8005de2 <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b108      	cbz	r0, 80020d6 <main+0x2a2>
 80020d2:	b672      	cpsid	i
	while (1)
 80020d4:	e7fe      	b.n	80020d4 <main+0x2a0>
	huart2.Instance = USART2;
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <main+0x2ec>)
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <main+0x2f0>)
	huart2.Init.StopBits = UART_STOPBITS_1;
 80020da:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.BaudRate = 115200;
 80020de:	e9c0 2500 	strd	r2, r5, [r0]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80020e2:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ea:	e9c0 3308 	strd	r3, r3, [r0, #32]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ee:	f003 fe78 	bl	8005de2 <HAL_UART_Init>
 80020f2:	4605      	mov	r5, r0
 80020f4:	b1c0      	cbz	r0, 8002128 <main+0x2f4>
 80020f6:	b672      	cpsid	i
	while (1)
 80020f8:	e7fe      	b.n	80020f8 <main+0x2c4>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400
 8002104:	200007e0 	.word	0x200007e0
 8002108:	40012c00 	.word	0x40012c00
 800210c:	20000878 	.word	0x20000878
 8002110:	2000082c 	.word	0x2000082c
 8002114:	40014400 	.word	0x40014400
 8002118:	200008c4 	.word	0x200008c4
 800211c:	40013800 	.word	0x40013800
 8002120:	20000948 	.word	0x20000948
 8002124:	40004400 	.word	0x40004400
	ADC_MultiModeTypeDef multimode =
 8002128:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800212c:	900a      	str	r0, [sp, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig =
 800212e:	4601      	mov	r1, r0
 8002130:	2218      	movs	r2, #24
 8002132:	a80f      	add	r0, sp, #60	; 0x3c
 8002134:	f003 ff38 	bl	8005fa8 <memset>
	hadc1.Instance = ADC1;
 8002138:	4c41      	ldr	r4, [pc, #260]	; (8002240 <main+0x40c>)
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <main+0x410>)
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800213c:	6125      	str	r5, [r4, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800213e:	f44f 7880 	mov.w	r8, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002142:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.NbrOfConversion = 1;
 8002146:	2601      	movs	r6, #1
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002148:	2308      	movs	r3, #8
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800214a:	f8a4 8018 	strh.w	r8, [r4, #24]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800214e:	4620      	mov	r0, r4
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002150:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002154:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002158:	6163      	str	r3, [r4, #20]
	hadc1.Init.NbrOfConversion = 1;
 800215a:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800215c:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002160:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002164:	6365      	str	r5, [r4, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002166:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800216a:	f000 fbe1 	bl	8002930 <HAL_ADC_Init>
 800216e:	b108      	cbz	r0, 8002174 <main+0x340>
 8002170:	b672      	cpsid	i
	while (1)
 8002172:	e7fe      	b.n	8002172 <main+0x33e>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8002174:	9008      	str	r0, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002176:	a908      	add	r1, sp, #32
 8002178:	4620      	mov	r0, r4
 800217a:	f001 f8b9 	bl	80032f0 <HAL_ADCEx_MultiModeConfigChannel>
 800217e:	b108      	cbz	r0, 8002184 <main+0x350>
 8002180:	b672      	cpsid	i
	while (1)
 8002182:	e7fe      	b.n	8002182 <main+0x34e>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <main+0x414>)
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002186:	f04f 0a04 	mov.w	sl, #4
	sConfig.Offset = 0;
 800218a:	e9cd a013 	strd	sl, r0, [sp, #76]	; 0x4c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800218e:	f04f 0906 	mov.w	r9, #6
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002192:	277f      	movs	r7, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002194:	a90f      	add	r1, sp, #60	; 0x3c
 8002196:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002198:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800219c:	e9cd a711 	strd	sl, r7, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a0:	f000 fce4 	bl	8002b6c <HAL_ADC_ConfigChannel>
 80021a4:	4605      	mov	r5, r0
 80021a6:	b108      	cbz	r0, 80021ac <main+0x378>
 80021a8:	b672      	cpsid	i
	while (1)
 80021aa:	e7fe      	b.n	80021aa <main+0x376>
	ADC_ChannelConfTypeDef sConfig =
 80021ac:	2218      	movs	r2, #24
 80021ae:	4601      	mov	r1, r0
 80021b0:	a80f      	add	r0, sp, #60	; 0x3c
 80021b2:	f003 fef9 	bl	8005fa8 <memset>
	hadc2.Instance = ADC2;
 80021b6:	4c25      	ldr	r4, [pc, #148]	; (800224c <main+0x418>)
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <main+0x41c>)
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80021ba:	f8a4 8018 	strh.w	r8, [r4, #24]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021be:	e9c4 3500 	strd	r3, r5, [r4]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80021c2:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021ca:	4620      	mov	r0, r4
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021cc:	e9c4 5502 	strd	r5, r5, [r4, #8]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021d0:	e9c4 5a04 	strd	r5, sl, [r4, #16]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80021d4:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	hadc2.Init.NbrOfConversion = 1;
 80021d8:	61e6      	str	r6, [r4, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80021da:	f884 5020 	strb.w	r5, [r4, #32]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80021de:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021e2:	6365      	str	r5, [r4, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 80021e4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021e8:	f000 fba2 	bl	8002930 <HAL_ADC_Init>
 80021ec:	b108      	cbz	r0, 80021f2 <main+0x3be>
 80021ee:	b672      	cpsid	i
	while (1)
 80021f0:	e7fe      	b.n	80021f0 <main+0x3bc>
	sConfig.Channel = ADC_CHANNEL_12;
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <main+0x420>)
	sConfig.Offset = 0;
 80021f4:	e9cd a013 	strd	sl, r0, [sp, #76]	; 0x4c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021f8:	a90f      	add	r1, sp, #60	; 0x3c
 80021fa:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80021fc:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002200:	e9cd a711 	strd	sl, r7, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002204:	f000 fcb2 	bl	8002b6c <HAL_ADC_ConfigChannel>
 8002208:	b108      	cbz	r0, 800220e <main+0x3da>
 800220a:	b672      	cpsid	i
	while (1)
 800220c:	e7fe      	b.n	800220c <main+0x3d8>
	Echo_PCI_State_Init();
 800220e:	f7ff fce9 	bl	8001be4 <Echo_PCI_State_Init>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8002212:	4c11      	ldr	r4, [pc, #68]	; (8002258 <main+0x424>)
		Echo_Shell_CMD_Handle();
 8002214:	f7ff fa54 	bl	80016c0 <Echo_Shell_CMD_Handle>
		if (HAL_GetTick() - schdule_tick >= ECHO_SCHED_HANDLE_PERIOD)
 8002218:	f000 fb5a 	bl	80028d0 <HAL_GetTick>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	1ac0      	subs	r0, r0, r3
 8002220:	2804      	cmp	r0, #4
 8002222:	d9f7      	bls.n	8002214 <main+0x3e0>
			Echo_Sys_FSM_State_Handle();
 8002224:	f7ff fd50 	bl	8001cc8 <Echo_Sys_FSM_State_Handle>
			Echo_Btn_Handle();
 8002228:	f7ff f818 	bl	800125c <Echo_Btn_Handle>
			Echo_LED_Handle();
 800222c:	f7ff f918 	bl	8001460 <Echo_LED_Handle>
			Echo_ADC_Handle();
 8002230:	f7fe fffa 	bl	8001228 <Echo_ADC_Handle>
			Echo_Shell_Input_Print();
 8002234:	f7ff f9ae 	bl	8001594 <Echo_Shell_Input_Print>
			schdule_tick = HAL_GetTick();
 8002238:	f000 fb4a 	bl	80028d0 <HAL_GetTick>
 800223c:	6020      	str	r0, [r4, #0]
 800223e:	e7e9      	b.n	8002214 <main+0x3e0>
 8002240:	200005f8 	.word	0x200005f8
 8002244:	50040000 	.word	0x50040000
 8002248:	2e300800 	.word	0x2e300800
 800224c:	2000065c 	.word	0x2000065c
 8002250:	50040100 	.word	0x50040100
 8002254:	32601000 	.word	0x32601000
 8002258:	200009cc 	.word	0x200009cc

0800225c <Error_Handler>:
 800225c:	b672      	cpsid	i
	while (1)
 800225e:	e7fe      	b.n	800225e <Error_Handler+0x2>

08002260 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_MspInit+0x2c>)
 8002262:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	661a      	str	r2, [r3, #96]	; 0x60
 800226a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800226c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	f002 0201 	and.w	r2, r2, #1
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800227c:	659a      	str	r2, [r3, #88]	; 0x58
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002288:	b002      	add	sp, #8
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002290:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	2214      	movs	r2, #20
{
 8002294:	b08a      	sub	sp, #40	; 0x28
 8002296:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	2100      	movs	r1, #0
 800229a:	eb0d 0002 	add.w	r0, sp, r2
 800229e:	f003 fe83 	bl	8005fa8 <memset>
  if(hadc->Instance==ADC1)
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	4a3c      	ldr	r2, [pc, #240]	; (8002398 <HAL_ADC_MspInit+0x108>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d13f      	bne.n	800232a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80022aa:	4a3c      	ldr	r2, [pc, #240]	; (800239c <HAL_ADC_MspInit+0x10c>)
 80022ac:	6813      	ldr	r3, [r2, #0]
 80022ae:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80022b0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 80022b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_ADC_MspInit+0x110>)
 80022b6:	d108      	bne.n	80022ca <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80022b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022be:	64da      	str	r2, [r3, #76]	; 0x4c
 80022c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022cc:	4c35      	ldr	r4, [pc, #212]	; (80023a4 <HAL_ADC_MspInit+0x114>)
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022ce:	4e36      	ldr	r6, [pc, #216]	; (80023a8 <HAL_ADC_MspInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022e0:	2040      	movs	r0, #64	; 0x40
 80022e2:	230b      	movs	r3, #11
 80022e4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(VDDH_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 80022e8:	a905      	add	r1, sp, #20
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ee:	f001 fb8d 	bl	8003a0c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022fa:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022fc:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002300:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002304:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002308:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800230c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002314:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002316:	4620      	mov	r0, r4
 8002318:	f001 f8c6 	bl	80034a8 <HAL_DMA_Init>
 800231c:	b108      	cbz	r0, 8002322 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800231e:	f7ff ff9d 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002322:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002324:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002326:	b00a      	add	sp, #40	; 0x28
 8002328:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_ADC_MspInit+0x11c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d1fa      	bne.n	8002326 <HAL_ADC_MspInit+0x96>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_ADC_MspInit+0x10c>)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002336:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8002338:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_ADC_MspInit+0x110>)
 800233c:	d108      	bne.n	8002350 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC_CLK_ENABLE();
 800233e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c
 8002346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002348:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800234c:	9203      	str	r2, [sp, #12]
 800234e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc2.Instance = DMA1_Channel2;
 8002352:	4c17      	ldr	r4, [pc, #92]	; (80023b0 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	64da      	str	r2, [r3, #76]	; 0x4c
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002364:	2680      	movs	r6, #128	; 0x80
 8002366:	230b      	movs	r3, #11
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8002368:	a905      	add	r1, sp, #20
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800236e:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(PEAK_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8002372:	f001 fb4b 	bl	8003a0c <HAL_GPIO_Init>
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8002376:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_ADC_MspInit+0x124>)
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	6126      	str	r6, [r4, #16]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800237a:	2300      	movs	r3, #0
 800237c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002388:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800238c:	2220      	movs	r2, #32
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800238e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002392:	61e2      	str	r2, [r4, #28]
 8002394:	e7be      	b.n	8002314 <HAL_ADC_MspInit+0x84>
 8002396:	bf00      	nop
 8002398:	50040000 	.word	0x50040000
 800239c:	200009d0 	.word	0x200009d0
 80023a0:	40021000 	.word	0x40021000
 80023a4:	200006c0 	.word	0x200006c0
 80023a8:	40020008 	.word	0x40020008
 80023ac:	50040100 	.word	0x50040100
 80023b0:	20000708 	.word	0x20000708
 80023b4:	4002001c 	.word	0x4002001c

080023b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023b8:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM1)
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d115      	bne.n	80023ee <HAL_TIM_PWM_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023c2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80023c6:	2102      	movs	r1, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80023de:	f000 fffb 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023e2:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023e4:	b003      	add	sp, #12
 80023e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023ea:	f001 b827 	b.w	800343c <HAL_NVIC_EnableIRQ>
}
 80023ee:	b003      	add	sp, #12
 80023f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f4:	40012c00 	.word	0x40012c00

080023f8 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80023fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002400:	4605      	mov	r5, r0
  if(htim_oc->Instance==TIM2)
 8002402:	d14f      	bne.n	80024a4 <HAL_TIM_OC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002404:	f503 3304 	add.w	r3, r3, #135168	; 0x21000

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002408:	4c27      	ldr	r4, [pc, #156]	; (80024a8 <HAL_TIM_OC_MspInit+0xb0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 800240c:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80024b4 <HAL_TIM_OC_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	659a      	str	r2, [r3, #88]	; 0x58
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8002420:	2304      	movs	r3, #4
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	2210      	movs	r2, #16
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8002424:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002434:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002438:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800243c:	2220      	movs	r2, #32
 800243e:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002442:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002444:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002446:	f001 f82f 	bl	80034a8 <HAL_DMA_Init>
 800244a:	b108      	cbz	r0, 8002450 <HAL_TIM_OC_MspInit+0x58>
    {
      Error_Handler();
 800244c:	f7ff ff06 	bl	800225c <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_OC_MspInit+0xb4>)
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002452:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002454:	632c      	str	r4, [r5, #48]	; 0x30
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002456:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002458:	4c15      	ldr	r4, [pc, #84]	; (80024b0 <HAL_TIM_OC_MspInit+0xb8>)
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 800245a:	2304      	movs	r3, #4
 800245c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002460:	2080      	movs	r0, #128	; 0x80
 8002462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002466:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	2110      	movs	r1, #16
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800246e:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8002472:	2220      	movs	r2, #32
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002474:	4620      	mov	r0, r4
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800247a:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800247e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002480:	f001 f812 	bl	80034a8 <HAL_DMA_Init>
 8002484:	b108      	cbz	r0, 800248a <HAL_TIM_OC_MspInit+0x92>
    {
      Error_Handler();
 8002486:	f7ff fee9 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800248a:	626c      	str	r4, [r5, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2102      	movs	r1, #2
 8002490:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002492:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002494:	f000 ffa0 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002498:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800249a:	b003      	add	sp, #12
 800249c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a0:	f000 bfcc 	b.w	800343c <HAL_NVIC_EnableIRQ>
}
 80024a4:	b003      	add	sp, #12
 80024a6:	bd30      	pop	{r4, r5, pc}
 80024a8:	20000798 	.word	0x20000798
 80024ac:	40020058 	.word	0x40020058
 80024b0:	20000750 	.word	0x20000750
 80024b4:	40020080 	.word	0x40020080

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_TIM_Base_MspInit+0x3c>)
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d115      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024c2:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80024c6:	2102      	movs	r1, #2
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80024de:	f000 ff7b 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024e2:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024e4:	b003      	add	sp, #12
 80024e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024ea:	f000 bfa7 	b.w	800343c <HAL_NVIC_EnableIRQ>
}
 80024ee:	b003      	add	sp, #12
 80024f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f4:	40014400 	.word	0x40014400

080024f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4604      	mov	r4, r0
 80024fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	2214      	movs	r2, #20
 8002500:	2100      	movs	r1, #0
 8002502:	a803      	add	r0, sp, #12
 8002504:	f003 fd50 	bl	8005fa8 <memset>
  if(htim->Instance==TIM1)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	4a15      	ldr	r2, [pc, #84]	; (8002560 <HAL_TIM_MspPostInit+0x68>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d117      	bne.n	8002540 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_TIM_MspPostInit+0x6c>)
 8002512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP_UP_SW_Pin;
 8002524:	f44f 7380 	mov.w	r3, #256	; 0x100
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CATHODE_Pin|STIM_CURRENT_CTRL_Pin;
 8002528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002530:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002536:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f001 fa68 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800253c:	b008      	add	sp, #32
 800253e:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d1fa      	bne.n	800253c <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800254a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STIM_ANODE_Pin|STIM_CATHODE_Pin|STIM_CURRENT_CTRL_Pin;
 800255c:	232a      	movs	r3, #42	; 0x2a
 800255e:	e7e3      	b.n	8002528 <HAL_TIM_MspPostInit+0x30>
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	b096      	sub	sp, #88	; 0x58
 800256c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256e:	2214      	movs	r2, #20
 8002570:	2100      	movs	r1, #0
 8002572:	a804      	add	r0, sp, #16
 8002574:	f003 fd18 	bl	8005fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002578:	2234      	movs	r2, #52	; 0x34
 800257a:	2100      	movs	r1, #0
 800257c:	a809      	add	r0, sp, #36	; 0x24
 800257e:	f003 fd13 	bl	8005fa8 <memset>
  if(huart->Instance==USART1)
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	4a3a      	ldr	r2, [pc, #232]	; (8002670 <HAL_UART_MspInit+0x108>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d132      	bne.n	80025f0 <HAL_UART_MspInit+0x88>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800258a:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800258e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002590:	f001 ff86 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	b108      	cbz	r0, 800259a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8002596:	f7ff fe61 	bl	800225c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = QCC_UART_TX_Pin|QCC_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	4836      	ldr	r0, [pc, #216]	; (8002678 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800259e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a4:	661a      	str	r2, [r3, #96]	; 0x60
 80025a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025ac:	9200      	str	r2, [sp, #0]
 80025ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b2:	f042 0202 	orr.w	r2, r2, #2
 80025b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2400      	movs	r4, #0
 80025cc:	2303      	movs	r3, #3
 80025ce:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d4:	2307      	movs	r3, #7
 80025d6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f001 fa18 	bl	8003a0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025dc:	2025      	movs	r0, #37	; 0x25
 80025de:	4622      	mov	r2, r4
 80025e0:	4621      	mov	r1, r4
 80025e2:	f000 fef9 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025e6:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e8:	f000 ff28 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025ec:	b016      	add	sp, #88	; 0x58
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <HAL_UART_MspInit+0x114>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d1fa      	bne.n	80025ec <HAL_UART_MspInit+0x84>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025f6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025fa:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fc:	f001 ff50 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	b108      	cbz	r0, 8002606 <HAL_UART_MspInit+0x9e>
      Error_Handler();
 8002602:	f7ff fe2b 	bl	800225c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_UART_MspInit+0x10c>)
 8002608:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800260a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800260e:	659a      	str	r2, [r3, #88]	; 0x58
 8002610:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002612:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002616:	9202      	str	r2, [sp, #8]
 8002618:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	64da      	str	r2, [r3, #76]	; 0x4c
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	9303      	str	r3, [sp, #12]
 800262a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2602      	movs	r6, #2
 800262e:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2400      	movs	r4, #0
 8002632:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002638:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263a:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002640:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002646:	f001 f9e1 	bl	8003a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800264a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800264e:	a904      	add	r1, sp, #16
 8002650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800265c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800265e:	f001 f9d5 	bl	8003a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002662:	2026      	movs	r0, #38	; 0x26
 8002664:	4622      	mov	r2, r4
 8002666:	4621      	mov	r1, r4
 8002668:	f000 feb6 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800266c:	2026      	movs	r0, #38	; 0x26
 800266e:	e7bb      	b.n	80025e8 <HAL_UART_MspInit+0x80>
 8002670:	40013800 	.word	0x40013800
 8002674:	40021000 	.word	0x40021000
 8002678:	48000400 	.word	0x48000400
 800267c:	40004400 	.word	0x40004400

08002680 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002680:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002684:	4905      	ldr	r1, [pc, #20]	; (800269c <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002688:	68ca      	ldr	r2, [r1, #12]
 800268a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
 8002692:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002696:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002698:	e7fd      	b.n	8002696 <__NVIC_SystemReset+0x16>
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00
 80026a0:	05fa0004 	.word	0x05fa0004

080026a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80026a4:	e7fe      	b.n	80026a4 <NMI_Handler>

080026a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80026a8:	f7ff ffea 	bl	8002680 <__NVIC_SystemReset>

080026ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler>

080026ae <BusFault_Handler>:
 80026ae:	b508      	push	{r3, lr}
 80026b0:	f7ff ffe6 	bl	8002680 <__NVIC_SystemReset>

080026b4 <UsageFault_Handler>:
 80026b4:	b508      	push	{r3, lr}
 80026b6:	f7ff ffe3 	bl	8002680 <__NVIC_SystemReset>

080026ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ba:	4770      	bx	lr

080026bc <DebugMon_Handler>:
 80026bc:	4770      	bx	lr

080026be <PendSV_Handler>:
 80026be:	4770      	bx	lr

080026c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c0:	f000 b8fa 	b.w	80028b8 <HAL_IncTick>

080026c4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026c4:	4801      	ldr	r0, [pc, #4]	; (80026cc <DMA1_Channel1_IRQHandler+0x8>)
 80026c6:	f000 bfe3 	b.w	8003690 <HAL_DMA_IRQHandler>
 80026ca:	bf00      	nop
 80026cc:	200006c0 	.word	0x200006c0

080026d0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80026d0:	4801      	ldr	r0, [pc, #4]	; (80026d8 <DMA1_Channel2_IRQHandler+0x8>)
 80026d2:	f000 bfdd 	b.w	8003690 <HAL_DMA_IRQHandler>
 80026d6:	bf00      	nop
 80026d8:	20000708 	.word	0x20000708

080026dc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80026dc:	4801      	ldr	r0, [pc, #4]	; (80026e4 <DMA1_Channel5_IRQHandler+0x8>)
 80026de:	f000 bfd7 	b.w	8003690 <HAL_DMA_IRQHandler>
 80026e2:	bf00      	nop
 80026e4:	20000750 	.word	0x20000750

080026e8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80026e8:	4801      	ldr	r0, [pc, #4]	; (80026f0 <DMA1_Channel7_IRQHandler+0x8>)
 80026ea:	f000 bfd1 	b.w	8003690 <HAL_DMA_IRQHandler>
 80026ee:	bf00      	nop
 80026f0:	20000798 	.word	0x20000798

080026f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80026f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026f6:	4804      	ldr	r0, [pc, #16]	; (8002708 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80026f8:	f002 f960 	bl	80049bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002702:	f002 b95b 	b.w	80049bc <HAL_TIM_IRQHandler>
 8002706:	bf00      	nop
 8002708:	200007e0 	.word	0x200007e0
 800270c:	2000082c 	.word	0x2000082c

08002710 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <TIM2_IRQHandler+0x8>)
 8002712:	f002 b953 	b.w	80049bc <HAL_TIM_IRQHandler>
 8002716:	bf00      	nop
 8002718:	20000878 	.word	0x20000878

0800271c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800271c:	4801      	ldr	r0, [pc, #4]	; (8002724 <USART1_IRQHandler+0x8>)
 800271e:	f002 bf2b 	b.w	8005578 <HAL_UART_IRQHandler>
 8002722:	bf00      	nop
 8002724:	200008c4 	.word	0x200008c4

08002728 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002728:	4801      	ldr	r0, [pc, #4]	; (8002730 <USART2_IRQHandler+0x8>)
 800272a:	f002 bf25 	b.w	8005578 <HAL_UART_IRQHandler>
 800272e:	bf00      	nop
 8002730:	20000948 	.word	0x20000948

08002734 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002734:	2001      	movs	r0, #1
 8002736:	4770      	bx	lr

08002738 <_kill>:

int _kill(int pid, int sig)
{
 8002738:	b508      	push	{r3, lr}
	errno = EINVAL;
 800273a:	f003 fc0b 	bl	8005f54 <__errno>
 800273e:	2316      	movs	r3, #22
 8002740:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002742:	f04f 30ff 	mov.w	r0, #4294967295
 8002746:	bd08      	pop	{r3, pc}

08002748 <_exit>:

void _exit (int status)
{
 8002748:	b508      	push	{r3, lr}
	errno = EINVAL;
 800274a:	f003 fc03 	bl	8005f54 <__errno>
 800274e:	2316      	movs	r3, #22
 8002750:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002752:	e7fe      	b.n	8002752 <_exit+0xa>

08002754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	460d      	mov	r5, r1
 8002758:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275a:	460e      	mov	r6, r1
 800275c:	1b73      	subs	r3, r6, r5
 800275e:	429c      	cmp	r4, r3
 8002760:	dc01      	bgt.n	8002766 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002762:	4620      	mov	r0, r4
 8002764:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	e7f5      	b.n	800275c <_read+0x8>

08002770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	460d      	mov	r5, r1
 8002774:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	460e      	mov	r6, r1
 8002778:	1b73      	subs	r3, r6, r5
 800277a:	429c      	cmp	r4, r3
 800277c:	dc01      	bgt.n	8002782 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800277e:	4620      	mov	r0, r4
 8002780:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002782:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002786:	f7fe febb 	bl	8001500 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	e7f5      	b.n	8002778 <_write+0x8>

0800278c <_close>:

int _close(int file)
{
	return -1;
}
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	4770      	bx	lr

08002792 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002796:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002798:	2000      	movs	r0, #0
 800279a:	4770      	bx	lr

0800279c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800279c:	2001      	movs	r0, #1
 800279e:	4770      	bx	lr

080027a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80027a0:	2000      	movs	r0, #0
 80027a2:	4770      	bx	lr

080027a4 <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <_sbrk+0x30>)
 80027a6:	6811      	ldr	r1, [r2, #0]
{
 80027a8:	b510      	push	{r4, lr}
 80027aa:	4603      	mov	r3, r0
	if (NULL == __sbrk_heap_end)
 80027ac:	b909      	cbnz	r1, 80027b2 <_sbrk+0xe>
	{
		__sbrk_heap_end = &_end;
 80027ae:	490a      	ldr	r1, [pc, #40]	; (80027d8 <_sbrk+0x34>)
 80027b0:	6011      	str	r1, [r2, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 80027b2:	6810      	ldr	r0, [r2, #0]
 80027b4:	4909      	ldr	r1, [pc, #36]	; (80027dc <_sbrk+0x38>)
 80027b6:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <_sbrk+0x3c>)
 80027b8:	4403      	add	r3, r0
 80027ba:	1b09      	subs	r1, r1, r4
 80027bc:	428b      	cmp	r3, r1
 80027be:	d906      	bls.n	80027ce <_sbrk+0x2a>
	{
		errno = ENOMEM;
 80027c0:	f003 fbc8 	bl	8005f54 <__errno>
 80027c4:	230c      	movs	r3, #12
 80027c6:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80027cc:	bd10      	pop	{r4, pc}
	__sbrk_heap_end += incr;
 80027ce:	6013      	str	r3, [r2, #0]
	return (void*) prev_heap_end;
 80027d0:	e7fc      	b.n	80027cc <_sbrk+0x28>
 80027d2:	bf00      	nop
 80027d4:	200009d4 	.word	0x200009d4
 80027d8:	200009f0 	.word	0x200009f0
 80027dc:	2000a000 	.word	0x2000a000
 80027e0:	00000800 	.word	0x00000800

080027e4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <SystemInit+0x10>)
 80027e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff fff2 	bl	80027e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f003 fb9b 	bl	8005f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282a:	f7ff fb03 	bl	8001e34 <main>

0800282e <LoopForever>:

LoopForever:
    b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002830:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800283c:	0800bd0c 	.word	0x0800bd0c
  ldr r2, =_sbss
 8002840:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002844:	200009ec 	.word	0x200009ec

08002848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC1_2_IRQHandler>
	...

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_InitTick+0x40>)
{
 8002850:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002852:	7818      	ldrb	r0, [r3, #0]
 8002854:	b908      	cbnz	r0, 800285a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002856:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002858:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800285a:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_InitTick+0x44>)
 800285c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002860:	fbb3 f3f0 	udiv	r3, r3, r0
 8002864:	6810      	ldr	r0, [r2, #0]
 8002866:	fbb0 f0f3 	udiv	r0, r0, r3
 800286a:	f000 fe09 	bl	8003480 <HAL_SYSTICK_Config>
 800286e:	4604      	mov	r4, r0
 8002870:	2800      	cmp	r0, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002874:	2d0f      	cmp	r5, #15
 8002876:	d8ee      	bhi.n	8002856 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	4602      	mov	r2, r0
 800287a:	4629      	mov	r1, r5
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f000 fdaa 	bl	80033d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_InitTick+0x48>)
 8002886:	4620      	mov	r0, r4
 8002888:	601d      	str	r5, [r3, #0]
  return status;
 800288a:	e7e5      	b.n	8002858 <HAL_InitTick+0xc>
 800288c:	20000018 	.word	0x20000018
 8002890:	20000014 	.word	0x20000014
 8002894:	2000001c 	.word	0x2000001c

08002898 <HAL_Init>:
{
 8002898:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289a:	2003      	movs	r0, #3
 800289c:	f000 fd8a 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff ffd3 	bl	800284c <HAL_InitTick>
 80028a6:	4604      	mov	r4, r0
 80028a8:	b918      	cbnz	r0, 80028b2 <HAL_Init+0x1a>
    HAL_MspInit();
 80028aa:	f7ff fcd9 	bl	8002260 <HAL_MspInit>
}
 80028ae:	4620      	mov	r0, r4
 80028b0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80028b2:	2401      	movs	r4, #1
 80028b4:	e7fb      	b.n	80028ae <HAL_Init+0x16>
	...

080028b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_IncTick+0x10>)
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_IncTick+0x14>)
 80028bc:	6811      	ldr	r1, [r2, #0]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	440b      	add	r3, r1
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	200009d8 	.word	0x200009d8
 80028cc:	20000018 	.word	0x20000018

080028d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <HAL_GetTick+0x8>)
 80028d2:	6818      	ldr	r0, [r3, #0]
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	200009d8 	.word	0x200009d8

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff6 	bl	80028d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80028e6:	bf1c      	itt	ne
 80028e8:	4b05      	ldrne	r3, [pc, #20]	; (8002900 <HAL_Delay+0x24>)
 80028ea:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80028ee:	bf18      	it	ne
 80028f0:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	f7ff ffed 	bl	80028d0 <HAL_GetTick>
 80028f6:	1b43      	subs	r3, r0, r5
 80028f8:	42a3      	cmp	r3, r4
 80028fa:	d3fa      	bcc.n	80028f2 <HAL_Delay+0x16>
  {
  }
}
 80028fc:	bd38      	pop	{r3, r4, r5, pc}
 80028fe:	bf00      	nop
 8002900:	20000018 	.word	0x20000018

08002904 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002904:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002906:	0dcc      	lsrs	r4, r1, #23
 8002908:	f004 0404 	and.w	r4, r4, #4
 800290c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 800290e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002912:	5823      	ldr	r3, [r4, r0]
 8002914:	2507      	movs	r5, #7
 8002916:	408d      	lsls	r5, r1
 8002918:	ea23 0305 	bic.w	r3, r3, r5
 800291c:	fa02 f101 	lsl.w	r1, r2, r1
 8002920:	430b      	orrs	r3, r1
 8002922:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002924:	bd30      	pop	{r4, r5, pc}

08002926 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002926:	6880      	ldr	r0, [r0, #8]
}
 8002928:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800292c:	4770      	bx	lr
	...

08002930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002932:	2300      	movs	r3, #0
 8002934:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002936:	4604      	mov	r4, r0
 8002938:	2800      	cmp	r0, #0
 800293a:	f000 80c3 	beq.w	8002ac4 <HAL_ADC_Init+0x194>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800293e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002940:	b925      	cbnz	r5, 800294c <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002942:	f7ff fca5 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002946:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002948:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800294c:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800294e:	6883      	ldr	r3, [r0, #8]
 8002950:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002952:	bf41      	itttt	mi
 8002954:	6883      	ldrmi	r3, [r0, #8]
 8002956:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 800295a:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 800295e:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002960:	6883      	ldr	r3, [r0, #8]
 8002962:	00dd      	lsls	r5, r3, #3
 8002964:	f140 808e 	bpl.w	8002a84 <HAL_ADC_Init+0x154>
 8002968:	6883      	ldr	r3, [r0, #8]
 800296a:	00d9      	lsls	r1, r3, #3
 800296c:	f100 80a1 	bmi.w	8002ab2 <HAL_ADC_Init+0x182>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002980:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002982:	f7ff ffd0 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002990:	f040 8095 	bne.w	8002abe <HAL_ADC_Init+0x18e>
    ADC_STATE_CLR_SET(hadc->State,
 8002994:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002998:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a0:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a2:	07da      	lsls	r2, r3, #31
 80029a4:	d40e      	bmi.n	80029c4 <HAL_ADC_Init+0x94>
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_ADC_Init+0x198>)
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029ae:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	07db      	lsls	r3, r3, #31
 80029b4:	d406      	bmi.n	80029c4 <HAL_ADC_Init+0x94>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029b6:	4a45      	ldr	r2, [pc, #276]	; (8002acc <HAL_ADC_Init+0x19c>)
 80029b8:	6865      	ldr	r5, [r4, #4]
 80029ba:	6893      	ldr	r3, [r2, #8]
 80029bc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80029c0:	432b      	orrs	r3, r5
 80029c2:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80029c4:	68e5      	ldr	r5, [r4, #12]
 80029c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c8:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80029cc:	432b      	orrs	r3, r5
 80029ce:	68a5      	ldr	r5, [r4, #8]
 80029d0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d2:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d4:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80029d6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029de:	bf02      	ittt	eq
 80029e0:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80029e2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80029e6:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029ec:	b122      	cbz	r2, 80029f8 <HAL_ADC_Init+0xc8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80029ee:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f0:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80029f4:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f6:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029f8:	68c5      	ldr	r5, [r0, #12]
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <HAL_ADC_Init+0x1a0>)
 80029fc:	402a      	ands	r2, r5
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a02:	f7ff ff90 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	f002 0208 	and.w	r2, r2, #8
 8002a0e:	4302      	orrs	r2, r0
 8002a10:	d120      	bne.n	8002a54 <HAL_ADC_Init+0x124>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a12:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a14:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a18:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a1a:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a1c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a20:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a24:	f020 0002 	bic.w	r0, r0, #2
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a2c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002a30:	2a01      	cmp	r2, #1
 8002a32:	d140      	bne.n	8002ab6 <HAL_ADC_Init+0x186>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a34:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8002a38:	6918      	ldr	r0, [r3, #16]
 8002a3a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002a3e:	f020 0004 	bic.w	r0, r0, #4
 8002a42:	432a      	orrs	r2, r5
 8002a44:	4302      	orrs	r2, r0
 8002a46:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a48:	4302      	orrs	r2, r0
 8002a4a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002a4c:	4302      	orrs	r2, r0
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a54:	6922      	ldr	r2, [r4, #16]
 8002a56:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a58:	bf05      	ittet	eq
 8002a5a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002a5c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a5e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a60:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002a64:	bf06      	itte	eq
 8002a66:	f020 000f 	biceq.w	r0, r0, #15
 8002a6a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a6c:	f022 020f 	bicne.w	r2, r2, #15
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002a7e:	4608      	mov	r0, r1
 8002a80:	b003      	add	sp, #12
 8002a82:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002a84:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_ADC_Init+0x1a4>)
 8002a88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6083      	str	r3, [r0, #8]
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_ADC_Init+0x1a8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8002aa2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f43f af5e 	beq.w	8002968 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002aac:	9b01      	ldr	r3, [sp, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	e7f7      	b.n	8002aa2 <HAL_ADC_Init+0x172>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	e765      	b.n	8002982 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	e7c9      	b.n	8002a52 <HAL_ADC_Init+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	e7da      	b.n	8002a7e <HAL_ADC_Init+0x14e>
 8002ac8:	50040000 	.word	0x50040000
 8002acc:	50040300 	.word	0x50040300
 8002ad0:	fff0c007 	.word	0xfff0c007
 8002ad4:	00030d40 	.word	0x00030d40
 8002ad8:	20000014 	.word	0x20000014

08002adc <HAL_ADC_ConvHalfCpltCallback>:
 8002adc:	4770      	bx	lr

08002ade <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ade:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ae0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002ae2:	f7ff fffb 	bl	8002adc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ae6:	bd08      	pop	{r3, pc}

08002ae8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aec:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002af0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002af4:	d121      	bne.n	8002b3a <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	0708      	lsls	r0, r1, #28
 8002b02:	d516      	bpl.n	8002b32 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b04:	68d1      	ldr	r1, [r2, #12]
 8002b06:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8002b0a:	d10e      	bne.n	8002b2a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b0c:	68d2      	ldr	r2, [r2, #12]
 8002b0e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b12:	d10a      	bne.n	8002b2a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b20:	bf5e      	ittt	pl
 8002b22:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8002b24:	f042 0201 	orrpl.w	r2, r2, #1
 8002b28:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe faaa 	bl	8001084 <HAL_ADC_ConvCpltCallback>
}
 8002b30:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b32:	68d2      	ldr	r2, [r2, #12]
 8002b34:	f012 0f02 	tst.w	r2, #2
 8002b38:	e7eb      	b.n	8002b12 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b3a:	06d2      	lsls	r2, r2, #27
 8002b3c:	d503      	bpl.n	8002b46 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fa5a 	bl	8000ff8 <HAL_ADC_ErrorCallback>
 8002b44:	e7f4      	b.n	8002b30 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	4718      	bx	r3

08002b50 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b50:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002b52:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b54:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b64:	f7fe fa48 	bl	8000ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b68:	bd08      	pop	{r3, pc}
	...

08002b6c <HAL_ADC_ConfigChannel>:
{
 8002b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002b72:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002b76:	2b01      	cmp	r3, #1
{
 8002b78:	4605      	mov	r5, r0
 8002b7a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002b7c:	f000 81a5 	beq.w	8002eca <HAL_ADC_ConfigChannel+0x35e>
 8002b80:	2301      	movs	r3, #1
 8002b82:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	f7ff fecd 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	f040 8196 	bne.w	8002ebe <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank <= 5U)
 8002b92:	684b      	ldr	r3, [r1, #4]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d809      	bhi.n	8002bac <HAL_ADC_ConfigChannel+0x40>
      switch (sConfig->Rank)
 8002b98:	3b02      	subs	r3, #2
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	f200 8094 	bhi.w	8002cc8 <HAL_ADC_ConfigChannel+0x15c>
 8002ba0:	e8df f003 	tbb	[pc, r3]
 8002ba4:	8f8d8b02 	.word	0x8f8d8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ba8:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002baa:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bac:	6862      	ldr	r2, [r4, #4]
 8002bae:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002bb0:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bb2:	0991      	lsrs	r1, r2, #6
 8002bb4:	f001 010c 	and.w	r1, r1, #12
 8002bb8:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	59ce      	ldr	r6, [r1, r7]
 8002bc2:	f04f 0c1f 	mov.w	ip, #31
 8002bc6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002bca:	4093      	lsls	r3, r2
 8002bcc:	fa0c f202 	lsl.w	r2, ip, r2
 8002bd0:	ea26 0202 	bic.w	r2, r6, r2
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd8:	f7ff fea5 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8002bdc:	4601      	mov	r1, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bde:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002be0:	6882      	ldr	r2, [r0, #8]
 8002be2:	f002 0208 	and.w	r2, r2, #8
 8002be6:	430a      	orrs	r2, r1
 8002be8:	d124      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0xc8>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bea:	68a3      	ldr	r3, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bec:	6821      	ldr	r1, [r4, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf2:	d16b      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bf4:	f7ff fe86 	bl	8002904 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bf8:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bfa:	6953      	ldr	r3, [r2, #20]
 8002bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c02:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c04:	6828      	ldr	r0, [r5, #0]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c06:	6822      	ldr	r2, [r4, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c08:	68c1      	ldr	r1, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c0a:	2e04      	cmp	r6, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c0c:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8002c10:	d064      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c12:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002c16:	0048      	lsls	r0, r1, #1
 8002c18:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8002c1a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8002c1e:	4081      	lsls	r1, r0
 8002c20:	48ab      	ldr	r0, [pc, #684]	; (8002ed0 <HAL_ADC_ConfigChannel+0x364>)
 8002c22:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002c26:	4038      	ands	r0, r7
 8002c28:	4310      	orrs	r0, r2
 8002c2a:	4301      	orrs	r1, r0
 8002c2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002c30:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c36:	6883      	ldr	r3, [r0, #8]
 8002c38:	07d9      	lsls	r1, r3, #31
 8002c3a:	d433      	bmi.n	8002ca4 <HAL_ADC_ConfigChannel+0x138>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c3c:	68e7      	ldr	r7, [r4, #12]
 8002c3e:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002c40:	4aa4      	ldr	r2, [pc, #656]	; (8002ed4 <HAL_ADC_ConfigChannel+0x368>)
 8002c42:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8002c46:	f007 0c18 	and.w	ip, r7, #24
 8002c4a:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002c4e:	fa22 f20c 	lsr.w	r2, r2, ip
 8002c52:	401a      	ands	r2, r3
 8002c54:	ea21 0106 	bic.w	r1, r1, r6
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c5e:	4a9e      	ldr	r2, [pc, #632]	; (8002ed8 <HAL_ADC_ConfigChannel+0x36c>)
 8002c60:	4297      	cmp	r7, r2
 8002c62:	d11f      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x138>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c64:	2e00      	cmp	r6, #0
 8002c66:	f040 808e 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x21a>
 8002c6a:	0e9a      	lsrs	r2, r3, #26
 8002c6c:	3201      	adds	r2, #1
 8002c6e:	f002 071f 	and.w	r7, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c76:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c78:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002c7c:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	f200 80b3 	bhi.w	8002dea <HAL_ADC_ConfigChannel+0x27e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c84:	430a      	orrs	r2, r1
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	f040 8099 	bne.w	8002dbe <HAL_ADC_ConfigChannel+0x252>
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9a:	ea42 0103 	orr.w	r1, r2, r3
 8002c9e:	68a2      	ldr	r2, [r4, #8]
 8002ca0:	f7ff fe30 	bl	8002904 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ca4:	6821      	ldr	r1, [r4, #0]
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_ADC_ConfigChannel+0x370>)
 8002ca8:	4219      	tst	r1, r3
 8002caa:	f040 80b9 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x2b4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cae:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002cb6:	b003      	add	sp, #12
 8002cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002cba:	2312      	movs	r3, #18
 8002cbc:	e775      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002cbe:	2318      	movs	r3, #24
 8002cc0:	e773      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cc6:	e770      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002cc8:	2306      	movs	r3, #6
 8002cca:	e76e      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f7ff fe19 	bl	8002904 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cd2:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002cd4:	6953      	ldr	r3, [r2, #20]
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	e791      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cdc:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8002cde:	6e01      	ldr	r1, [r0, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce0:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ce4:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce8:	2e00      	cmp	r6, #0
 8002cea:	d138      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x1f2>
 8002cec:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cf0:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002cf2:	bf02      	ittt	eq
 8002cf4:	6e02      	ldreq	r2, [r0, #96]	; 0x60
 8002cf6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002cfa:	6602      	streq	r2, [r0, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cfc:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d06:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d0a:	bb68      	cbnz	r0, 8002d68 <HAL_ADC_ConfigChannel+0x1fc>
 8002d0c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d10:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002d12:	bf02      	ittt	eq
 8002d14:	685a      	ldreq	r2, [r3, #4]
 8002d16:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002d1a:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d1c:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d26:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d2a:	bb10      	cbnz	r0, 8002d72 <HAL_ADC_ConfigChannel+0x206>
 8002d2c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d30:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002d32:	bf02      	ittt	eq
 8002d34:	689a      	ldreq	r2, [r3, #8]
 8002d36:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002d3a:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d3c:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d46:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d4a:	b9b8      	cbnz	r0, 8002d7c <HAL_ADC_ConfigChannel+0x210>
 8002d4c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d50:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002d52:	bf02      	ittt	eq
 8002d54:	68da      	ldreq	r2, [r3, #12]
 8002d56:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002d5a:	60da      	streq	r2, [r3, #12]
}
 8002d5c:	e76a      	b.n	8002c34 <HAL_ADC_ConfigChannel+0xc8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002d62:	fab2 f282 	clz	r2, r2
 8002d66:	e7c3      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	e7ce      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	e7d9      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	e7e4      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002d8a:	b132      	cbz	r2, 8002d9a <HAL_ADC_ConfigChannel+0x22e>
  return __builtin_clz(value);
 8002d8c:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d90:	3201      	adds	r2, #1
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2a09      	cmp	r2, #9
 8002d98:	d816      	bhi.n	8002dc8 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002d9e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da2:	3201      	adds	r2, #1
 8002da4:	0692      	lsls	r2, r2, #26
 8002da6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002dae:	fab1 f181 	clz	r1, r1
 8002db2:	3101      	adds	r1, #1
 8002db4:	f001 071f 	and.w	r7, r1, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	40b9      	lsls	r1, r7
 8002dbc:	e762      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	e762      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	3201      	adds	r2, #1
 8002dd2:	0692      	lsls	r2, r2, #26
 8002dd4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002ddc:	fab1 f181 	clz	r1, r1
 8002de0:	3101      	adds	r1, #1
 8002de2:	f001 071f 	and.w	r7, r1, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	40b9      	lsls	r1, r7
 8002dea:	430a      	orrs	r2, r1
 8002dec:	b95e      	cbnz	r6, 8002e06 <HAL_ADC_ConfigChannel+0x29a>
 8002dee:	0e9e      	lsrs	r6, r3, #26
 8002df0:	3601      	adds	r6, #1
 8002df2:	f006 061f 	and.w	r6, r6, #31
 8002df6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002dfa:	391e      	subs	r1, #30
 8002dfc:	0509      	lsls	r1, r1, #20
 8002dfe:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e02:	4311      	orrs	r1, r2
 8002e04:	e74b      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002e0a:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e0e:	3101      	adds	r1, #1
 8002e10:	f001 031f 	and.w	r3, r1, #31
 8002e14:	f06f 061d 	mvn.w	r6, #29
 8002e18:	2103      	movs	r1, #3
 8002e1a:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002e1e:	e7ed      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x290>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e22:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_ADC_ConfigChannel+0x378>)
 8002e24:	6898      	ldr	r0, [r3, #8]
 8002e26:	4291      	cmp	r1, r2
 8002e28:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8002e2c:	d11e      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x300>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e2e:	0202      	lsls	r2, r0, #8
 8002e30:	f53f af3d 	bmi.w	8002cae <HAL_ADC_ConfigChannel+0x142>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e34:	6829      	ldr	r1, [r5, #0]
 8002e36:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <HAL_ADC_ConfigChannel+0x37c>)
 8002e38:	4291      	cmp	r1, r2
 8002e3a:	f47f af38 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002e44:	4322      	orrs	r2, r4
 8002e46:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e4a:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_ADC_ConfigChannel+0x380>)
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <HAL_ADC_ConfigChannel+0x384>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e56:	230c      	movs	r3, #12
 8002e58:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002e5c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002e5e:	9b01      	ldr	r3, [sp, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f43f af24 	beq.w	8002cae <HAL_ADC_ConfigChannel+0x142>
            wait_loop_index--;
 8002e66:	9b01      	ldr	r3, [sp, #4]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	e7f7      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x2f0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e6c:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <HAL_ADC_ConfigChannel+0x388>)
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	d111      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x32a>
 8002e72:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002e76:	f47f af1a 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7a:	6829      	ldr	r1, [r5, #0]
 8002e7c:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8002e80:	4291      	cmp	r1, r2
 8002e82:	f47f af14 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002e8c:	4322      	orrs	r2, r4
 8002e8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	e70c      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x144>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_ADC_ConfigChannel+0x38c>)
 8002e98:	4291      	cmp	r1, r2
 8002e9a:	f47f af08 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e9e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002ea2:	f47f af04 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ea6:	6829      	ldr	r1, [r5, #0]
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_ADC_ConfigChannel+0x37c>)
 8002eaa:	4291      	cmp	r1, r2
 8002eac:	f47f aeff 	bne.w	8002cae <HAL_ADC_ConfigChannel+0x142>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002eb6:	4322      	orrs	r2, r4
 8002eb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ebc:	e7e9      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x326>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebe:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	e6f2      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x144>
  __HAL_LOCK(hadc);
 8002eca:	2002      	movs	r0, #2
 8002ecc:	e6f3      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x14a>
 8002ece:	bf00      	nop
 8002ed0:	03fff000 	.word	0x03fff000
 8002ed4:	0007ffff 	.word	0x0007ffff
 8002ed8:	407f0000 	.word	0x407f0000
 8002edc:	80080000 	.word	0x80080000
 8002ee0:	50040300 	.word	0x50040300
 8002ee4:	c7520000 	.word	0xc7520000
 8002ee8:	50040000 	.word	0x50040000
 8002eec:	20000014 	.word	0x20000014
 8002ef0:	00030d40 	.word	0x00030d40
 8002ef4:	cb840000 	.word	0xcb840000
 8002ef8:	80000001 	.word	0x80000001

08002efc <ADC_ConversionStop>:
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f00:	6800      	ldr	r0, [r0, #0]
 8002f02:	f7ff fd10 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f06:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	f002 0208 	and.w	r2, r2, #8
 8002f0e:	4302      	orrs	r2, r0
 8002f10:	d101      	bne.n	8002f16 <ADC_ConversionStop+0x1a>
  return HAL_OK;
 8002f12:	2000      	movs	r0, #0
}
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	0190      	lsls	r0, r2, #6
 8002f1a:	d52b      	bpl.n	8002f74 <ADC_ConversionStop+0x78>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f1c:	8b20      	ldrh	r0, [r4, #24]
 8002f1e:	f240 1201 	movw	r2, #257	; 0x101
 8002f22:	4290      	cmp	r0, r2
 8002f24:	d126      	bne.n	8002f74 <ADC_ConversionStop+0x78>
 8002f26:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <ADC_ConversionStop+0xcc>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	0649      	lsls	r1, r1, #25
 8002f2c:	d516      	bpl.n	8002f5c <ADC_ConversionStop+0x60>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f32:	2101      	movs	r1, #1
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fcf6 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8002f3a:	b158      	cbz	r0, 8002f54 <ADC_ConversionStop+0x58>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f3c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f3e:	6893      	ldr	r3, [r2, #8]
 8002f40:	079e      	lsls	r6, r3, #30
 8002f42:	d407      	bmi.n	8002f54 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8002f44:	6893      	ldr	r3, [r2, #8]
 8002f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f54:	2901      	cmp	r1, #1
 8002f56:	d10f      	bne.n	8002f78 <ADC_ConversionStop+0x7c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f58:	2504      	movs	r5, #4
 8002f5a:	e022      	b.n	8002fa2 <ADC_ConversionStop+0xa6>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	d1e3      	bne.n	8002f28 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f62:	f043 0310 	orr.w	r3, r3, #16
 8002f66:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
 8002f72:	e7cf      	b.n	8002f14 <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f74:	2902      	cmp	r1, #2
 8002f76:	d1dd      	bne.n	8002f34 <ADC_ConversionStop+0x38>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f78:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f7a:	6893      	ldr	r3, [r2, #8]
 8002f7c:	0718      	lsls	r0, r3, #28
 8002f7e:	d50a      	bpl.n	8002f96 <ADC_ConversionStop+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f80:	6893      	ldr	r3, [r2, #8]
 8002f82:	079b      	lsls	r3, r3, #30
 8002f84:	d407      	bmi.n	8002f96 <ADC_ConversionStop+0x9a>
  MODIFY_REG(ADCx->CR,
 8002f86:	6893      	ldr	r3, [r2, #8]
 8002f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8002f96:	2902      	cmp	r1, #2
 8002f98:	d014      	beq.n	8002fc4 <ADC_ConversionStop+0xc8>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f9a:	2903      	cmp	r1, #3
 8002f9c:	bf14      	ite	ne
 8002f9e:	2504      	movne	r5, #4
 8002fa0:	250c      	moveq	r5, #12
    tickstart = HAL_GetTick();
 8002fa2:	f7ff fc95 	bl	80028d0 <HAL_GetTick>
 8002fa6:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	422b      	tst	r3, r5
 8002fae:	d0b0      	beq.n	8002f12 <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fb0:	f7ff fc8e 	bl	80028d0 <HAL_GetTick>
 8002fb4:	1b80      	subs	r0, r0, r6
 8002fb6:	2805      	cmp	r0, #5
 8002fb8:	d9f6      	bls.n	8002fa8 <ADC_ConversionStop+0xac>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	422b      	tst	r3, r5
 8002fc0:	d0f2      	beq.n	8002fa8 <ADC_ConversionStop+0xac>
 8002fc2:	e7cd      	b.n	8002f60 <ADC_ConversionStop+0x64>
    switch (conversion_group_reassigned)
 8002fc4:	2508      	movs	r5, #8
 8002fc6:	e7ec      	b.n	8002fa2 <ADC_ConversionStop+0xa6>
 8002fc8:	a3400001 	.word	0xa3400001

08002fcc <ADC_Enable>:
{
 8002fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002fce:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002fd2:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	6893      	ldr	r3, [r2, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd6:	07dd      	lsls	r5, r3, #31
{
 8002fd8:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fda:	d502      	bpl.n	8002fe2 <ADC_Enable+0x16>
  return HAL_OK;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fe2:	6891      	ldr	r1, [r2, #8]
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <ADC_Enable+0x9c>)
 8002fe6:	4219      	tst	r1, r3
 8002fe8:	d009      	beq.n	8002ffe <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	e7ef      	b.n	8002fde <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8002ffe:	6893      	ldr	r3, [r2, #8]
 8003000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <ADC_Enable+0xa0>)
 8003010:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003012:	0218      	lsls	r0, r3, #8
 8003014:	d419      	bmi.n	800304a <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 8003016:	f7ff fc5b 	bl	80028d0 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 800301a:	4e15      	ldr	r6, [pc, #84]	; (8003070 <ADC_Enable+0xa4>)
 800301c:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	6813      	ldr	r3, [r2, #0]
 8003022:	07db      	lsls	r3, r3, #31
 8003024:	d4da      	bmi.n	8002fdc <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003026:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003028:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 800302a:	bf5f      	itttt	pl
 800302c:	6893      	ldrpl	r3, [r2, #8]
 800302e:	4033      	andpl	r3, r6
 8003030:	f043 0301 	orrpl.w	r3, r3, #1
 8003034:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003036:	f7ff fc4b 	bl	80028d0 <HAL_GetTick>
 800303a:	1b40      	subs	r0, r0, r5
 800303c:	2802      	cmp	r0, #2
 800303e:	d9ee      	bls.n	800301e <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	07da      	lsls	r2, r3, #31
 8003046:	d4ea      	bmi.n	800301e <ADC_Enable+0x52>
 8003048:	e7cf      	b.n	8002fea <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <ADC_Enable+0xa8>)
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <ADC_Enable+0xac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fbb3 f2f2 	udiv	r2, r3, r2
 8003054:	230c      	movs	r3, #12
 8003056:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 800305a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800305c:	9b01      	ldr	r3, [sp, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0d9      	beq.n	8003016 <ADC_Enable+0x4a>
        wait_loop_index--;
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	3b01      	subs	r3, #1
 8003066:	e7f8      	b.n	800305a <ADC_Enable+0x8e>
 8003068:	8000003f 	.word	0x8000003f
 800306c:	50040300 	.word	0x50040300
 8003070:	7fffffc0 	.word	0x7fffffc0
 8003074:	20000014 	.word	0x20000014
 8003078:	00030d40 	.word	0x00030d40

0800307c <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_ADC_Start_DMA+0xe0>)
{
 800307e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003082:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003084:	6800      	ldr	r0, [r0, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
{
 8003088:	460e      	mov	r6, r1
 800308a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800308c:	f7ff fc4b 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8003090:	2800      	cmp	r0, #0
 8003092:	d15d      	bne.n	8003150 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8003094:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8003098:	2a01      	cmp	r2, #1
 800309a:	d059      	beq.n	8003150 <HAL_ADC_Start_DMA+0xd4>
 800309c:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030a0:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80030a4:	f04f 0301 	mov.w	r3, #1
 80030a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030ac:	d84b      	bhi.n	8003146 <HAL_ADC_Start_DMA+0xca>
 80030ae:	f240 2021 	movw	r0, #545	; 0x221
 80030b2:	fa20 f008 	lsr.w	r0, r0, r8
 80030b6:	43c0      	mvns	r0, r0
 80030b8:	ea10 0503 	ands.w	r5, r0, r3
 80030bc:	d143      	bne.n	8003146 <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff ff84 	bl	8002fcc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d13b      	bne.n	8003140 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 80030c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ca:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80030cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_ADC_Start_DMA+0xe4>)
 80030dc:	4299      	cmp	r1, r3
 80030de:	d039      	beq.n	8003154 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030e6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030ec:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030f0:	bf1c      	itt	ne
 80030f2:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 80030f4:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_ADC_Start_DMA+0xe8>)
 80030fc:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_ADC_Start_DMA+0xec>)
 8003100:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_ADC_Start_DMA+0xf0>)
 8003104:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003106:	231c      	movs	r3, #28
 8003108:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 800310a:	2300      	movs	r3, #0
 800310c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003110:	684b      	ldr	r3, [r1, #4]
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003118:	68cb      	ldr	r3, [r1, #12]
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003120:	4632      	mov	r2, r6
 8003122:	463b      	mov	r3, r7
 8003124:	3140      	adds	r1, #64	; 0x40
 8003126:	f000 fa2b 	bl	8003580 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800312a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800312c:	6893      	ldr	r3, [r2, #8]
 800312e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003132:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6093      	str	r3, [r2, #8]
}
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003140:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8003144:	e7fa      	b.n	800313c <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 8003146:	2300      	movs	r3, #0
 8003148:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800314c:	2001      	movs	r0, #1
 800314e:	e7f5      	b.n	800313c <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 8003150:	2002      	movs	r0, #2
 8003152:	e7f3      	b.n	800313c <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003154:	f1b8 0f00 	cmp.w	r8, #0
 8003158:	d0c2      	beq.n	80030e0 <HAL_ADC_Start_DMA+0x64>
 800315a:	e7c5      	b.n	80030e8 <HAL_ADC_Start_DMA+0x6c>
 800315c:	50040300 	.word	0x50040300
 8003160:	50040100 	.word	0x50040100
 8003164:	08002ae9 	.word	0x08002ae9
 8003168:	08002adf 	.word	0x08002adf
 800316c:	08002b51 	.word	0x08002b51

08003170 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003170:	6802      	ldr	r2, [r0, #0]
{
 8003172:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003174:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003176:	6891      	ldr	r1, [r2, #8]
 8003178:	4604      	mov	r4, r0
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800317a:	07c8      	lsls	r0, r1, #31
 800317c:	d401      	bmi.n	8003182 <ADC_Disable+0x12>
  return HAL_OK;
 800317e:	2000      	movs	r0, #0
}
 8003180:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8003182:	0799      	lsls	r1, r3, #30
 8003184:	d4fb      	bmi.n	800317e <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003186:	6893      	ldr	r3, [r2, #8]
 8003188:	f003 030d 	and.w	r3, r3, #13
 800318c:	2b01      	cmp	r3, #1
 800318e:	d119      	bne.n	80031c4 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 8003190:	6893      	ldr	r3, [r2, #8]
 8003192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003196:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031a0:	2303      	movs	r3, #3
 80031a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031a4:	f7ff fb94 	bl	80028d0 <HAL_GetTick>
 80031a8:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	07db      	lsls	r3, r3, #31
 80031b0:	d5e5      	bpl.n	800317e <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031b2:	f7ff fb8d 	bl	80028d0 <HAL_GetTick>
 80031b6:	1b40      	subs	r0, r0, r5
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d9f6      	bls.n	80031aa <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	07da      	lsls	r2, r3, #31
 80031c2:	d5f2      	bpl.n	80031aa <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031c6:	f043 0310 	orr.w	r3, r3, #16
 80031ca:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
 80031d6:	e7d3      	b.n	8003180 <ADC_Disable+0x10>

080031d8 <HAL_ADC_Stop_DMA>:
{
 80031d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80031da:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80031de:	2b01      	cmp	r3, #1
{
 80031e0:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80031e2:	d035      	beq.n	8003250 <HAL_ADC_Stop_DMA+0x78>
 80031e4:	2301      	movs	r3, #1
 80031e6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031ea:	2103      	movs	r1, #3
 80031ec:	f7ff fe86 	bl	8002efc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80031f0:	4604      	mov	r4, r0
 80031f2:	b9e0      	cbnz	r0, 800322e <HAL_ADC_Stop_DMA+0x56>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031f4:	682a      	ldr	r2, [r5, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80031f6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031f8:	68d3      	ldr	r3, [r2, #12]
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003200:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003208:	f000 f9f9 	bl	80035fe <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 800320c:	4604      	mov	r4, r0
 800320e:	b118      	cbz	r0, 8003218 <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003210:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003218:	682a      	ldr	r2, [r5, #0]
 800321a:	6853      	ldr	r3, [r2, #4]
 800321c:	f023 0310 	bic.w	r3, r3, #16
 8003220:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8003222:	4628      	mov	r0, r5
    if (tmp_hal_status == HAL_OK)
 8003224:	b944      	cbnz	r4, 8003238 <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8003226:	f7ff ffa3 	bl	8003170 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800322a:	4604      	mov	r4, r0
 800322c:	b138      	cbz	r0, 800323e <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 800322e:	2300      	movs	r3, #0
 8003230:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8003234:	4620      	mov	r0, r4
 8003236:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8003238:	f7ff ff9a 	bl	8003170 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800323c:	e7f7      	b.n	800322e <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 800323e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003240:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	656b      	str	r3, [r5, #84]	; 0x54
 800324e:	e7ee      	b.n	800322e <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8003250:	2402      	movs	r4, #2
 8003252:	e7ef      	b.n	8003234 <HAL_ADC_Stop_DMA+0x5c>

08003254 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003254:	6880      	ldr	r0, [r0, #8]
}
 8003256:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800325a:	4770      	bx	lr

0800325c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800325c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800325e:	2300      	movs	r3, #0
 8003260:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003262:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003266:	2b01      	cmp	r3, #1
{
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800326c:	d03e      	beq.n	80032ec <HAL_ADCEx_Calibration_Start+0x90>
 800326e:	2301      	movs	r3, #1
 8003270:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003274:	f7ff ff7c 	bl	8003170 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003278:	2800      	cmp	r0, #0
 800327a:	d133      	bne.n	80032e4 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800327e:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003284:	f022 0202 	bic.w	r2, r2, #2
 8003288:	f042 0202 	orr.w	r2, r2, #2
 800328c:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 800328e:	68b3      	ldr	r3, [r6, #8]
 8003290:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003298:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 800329c:	432b      	orrs	r3, r5
 800329e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032a4:	68b3      	ldr	r3, [r6, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da12      	bge.n	80032d0 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	3301      	adds	r3, #1
 80032ae:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80032b6:	d3f5      	bcc.n	80032a4 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032ba:	f023 0312 	bic.w	r3, r3, #18
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032c4:	2300      	movs	r3, #0
 80032c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80032cc:	b002      	add	sp, #8
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80032d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032da:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80032dc:	2300      	movs	r3, #0
 80032de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 80032e2:	e7f3      	b.n	80032cc <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	e7f6      	b.n	80032da <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 80032ec:	2002      	movs	r0, #2
 80032ee:	e7ed      	b.n	80032cc <HAL_ADCEx_Calibration_Start+0x70>

080032f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80032f6:	2b01      	cmp	r3, #1
{
 80032f8:	b09b      	sub	sp, #108	; 0x6c
 80032fa:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80032fc:	d052      	beq.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 80032fe:	2301      	movs	r3, #1
 8003300:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003304:	6817      	ldr	r7, [r2, #0]
 8003306:	4c28      	ldr	r4, [pc, #160]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003308:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800330a:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800330c:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800330e:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003310:	d008      	beq.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003312:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003314:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003318:	f041 0120 	orr.w	r1, r1, #32
 800331c:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 800331e:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003320:	b01b      	add	sp, #108	; 0x6c
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003324:	4e21      	ldr	r6, [pc, #132]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8003326:	4630      	mov	r0, r6
 8003328:	f7ff ff94 	bl	8003254 <LL_ADC_REG_IsConversionOngoing>
 800332c:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332e:	6810      	ldr	r0, [r2, #0]
 8003330:	f7ff ff90 	bl	8003254 <LL_ADC_REG_IsConversionOngoing>
 8003334:	4320      	orrs	r0, r4
 8003336:	d130      	bne.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	4c1d      	ldr	r4, [pc, #116]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800333a:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003342:	b1e5      	cbz	r5, 800337e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003344:	6848      	ldr	r0, [r1, #4]
 8003346:	4303      	orrs	r3, r0
 8003348:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800334c:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8003350:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003356:	4303      	orrs	r3, r0
 8003358:	f013 0301 	ands.w	r3, r3, #1
 800335c:	d004      	beq.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003360:	2300      	movs	r3, #0
 8003362:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8003366:	e7db      	b.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 8003368:	6889      	ldr	r1, [r1, #8]
 800336a:	68a0      	ldr	r0, [r4, #8]
 800336c:	430d      	orrs	r5, r1
 800336e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8003372:	f021 010f 	bic.w	r1, r1, #15
 8003376:	430d      	orrs	r5, r1
 8003378:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 800337a:	4618      	mov	r0, r3
 800337c:	e7f0      	b.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800337e:	60a3      	str	r3, [r4, #8]
 8003380:	68b8      	ldr	r0, [r7, #8]
 8003382:	68b3      	ldr	r3, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003384:	4303      	orrs	r3, r0
 8003386:	f013 0301 	ands.w	r3, r3, #1
 800338a:	d1e8      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800338c:	68a1      	ldr	r1, [r4, #8]
 800338e:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003392:	f021 010f 	bic.w	r1, r1, #15
 8003396:	60a1      	str	r1, [r4, #8]
 8003398:	e7ef      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800339c:	f041 0120 	orr.w	r1, r1, #32
 80033a0:	6551      	str	r1, [r2, #84]	; 0x54
 80033a2:	e7ea      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 80033a4:	2002      	movs	r0, #2
 80033a6:	e7bb      	b.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 80033a8:	50040000 	.word	0x50040000
 80033ac:	50040100 	.word	0x50040100
 80033b0:	50040300 	.word	0x50040300

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80033d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033da:	b530      	push	{r4, r5, lr}
 80033dc:	68dc      	ldr	r4, [r3, #12]
 80033de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	2d04      	cmp	r5, #4
 80033ea:	bf28      	it	cs
 80033ec:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f4:	bf8c      	ite	hi
 80033f6:	3c03      	subhi	r4, #3
 80033f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fa:	fa03 f505 	lsl.w	r5, r3, r5
 80033fe:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003402:	40a3      	lsls	r3, r4
 8003404:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800340a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	bfac      	ite	ge
 8003412:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	4a08      	ldrlt	r2, [pc, #32]	; (8003438 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003418:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	bfb8      	it	lt
 800341e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	b2db      	uxtb	r3, r3
 8003424:	bfaa      	itet	ge
 8003426:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003430:	bd30      	pop	{r4, r5, pc}
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	e000ed14 	.word	0xe000ed14

0800343c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800343c:	2800      	cmp	r0, #0
 800343e:	db08      	blt.n	8003452 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003440:	2301      	movs	r3, #1
 8003442:	0942      	lsrs	r2, r0, #5
 8003444:	f000 001f 	and.w	r0, r0, #31
 8003448:	fa03 f000 	lsl.w	r0, r3, r0
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <HAL_NVIC_EnableIRQ+0x18>)
 800344e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100

08003458 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003458:	2800      	cmp	r0, #0
 800345a:	db0d      	blt.n	8003478 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345c:	0943      	lsrs	r3, r0, #5
 800345e:	2201      	movs	r2, #1
 8003460:	f000 001f 	and.w	r0, r0, #31
 8003464:	fa02 f000 	lsl.w	r0, r2, r0
 8003468:	3320      	adds	r3, #32
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_NVIC_DisableIRQ+0x24>)
 800346c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003474:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	3801      	subs	r0, #1
 8003482:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003486:	d20b      	bcs.n	80034a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	21f0      	movs	r1, #240	; 0xf0
 8003492:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003496:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003498:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800349a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80034a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d05b      	beq.n	8003566 <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ae:	6801      	ldr	r1, [r0, #0]
 80034b0:	4b2e      	ldr	r3, [pc, #184]	; (800356c <HAL_DMA_Init+0xc4>)
 80034b2:	4299      	cmp	r1, r3
 80034b4:	f04f 0414 	mov.w	r4, #20
 80034b8:	d842      	bhi.n	8003540 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ba:	4a2d      	ldr	r2, [pc, #180]	; (8003570 <HAL_DMA_Init+0xc8>)
 80034bc:	440a      	add	r2, r1
 80034be:	fbb2 f2f4 	udiv	r2, r2, r4
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034c6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 80034ca:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034d2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80034d8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80034da:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	432b      	orrs	r3, r5
 80034de:	6945      	ldr	r5, [r0, #20]
 80034e0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	6985      	ldr	r5, [r0, #24]
 80034e4:	432b      	orrs	r3, r5
 80034e6:	69c5      	ldr	r5, [r0, #28]
 80034e8:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ea:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034ec:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80034f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80034f6:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034f8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80034fc:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034fe:	d016      	beq.n	800352e <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003500:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 8003502:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003504:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003508:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800350a:	230f      	movs	r3, #15
 800350c:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800350e:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_DMA_Init+0xcc>)
 8003512:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003514:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8003518:	d11a      	bne.n	8003550 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800351a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 800351e:	4013      	ands	r3, r2
 8003520:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003524:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8003528:	431c      	orrs	r4, r3
 800352a:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003530:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003532:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003534:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003538:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800353c:	4618      	mov	r0, r3
}
 800353e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_DMA_Init+0xd0>)
 8003542:	440b      	add	r3, r1
 8003544:	fbb3 f3f4 	udiv	r3, r3, r4
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_DMA_Init+0xd4>)
 800354e:	e7bc      	b.n	80034ca <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003550:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 8003554:	400b      	ands	r3, r1
 8003556:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800355a:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 800355e:	431c      	orrs	r4, r3
 8003560:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 8003564:	e7e3      	b.n	800352e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
 8003568:	e7e9      	b.n	800353e <HAL_DMA_Init+0x96>
 800356a:	bf00      	nop
 800356c:	40020407 	.word	0x40020407
 8003570:	bffdfff8 	.word	0xbffdfff8
 8003574:	40020000 	.word	0x40020000
 8003578:	bffdfbf8 	.word	0xbffdfbf8
 800357c:	40020400 	.word	0x40020400

08003580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003586:	2c01      	cmp	r4, #1
 8003588:	d037      	beq.n	80035fa <HAL_DMA_Start_IT+0x7a>
 800358a:	2401      	movs	r4, #1
 800358c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003590:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8003594:	2c01      	cmp	r4, #1
 8003596:	b2e5      	uxtb	r5, r4
 8003598:	f04f 0600 	mov.w	r6, #0
 800359c:	f04f 0402 	mov.w	r4, #2
 80035a0:	d129      	bne.n	80035f6 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80035aa:	6826      	ldr	r6, [r4, #0]
 80035ac:	f026 0601 	bic.w	r6, r6, #1
 80035b0:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035b2:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 80035b6:	f007 071c 	and.w	r7, r7, #28
 80035ba:	40bd      	lsls	r5, r7
 80035bc:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c0:	6883      	ldr	r3, [r0, #8]
 80035c2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80035c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035c6:	bf0b      	itete	eq
 80035c8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80035ca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80035cc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80035ce:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80035d0:	b14b      	cbz	r3, 80035e6 <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2000      	movs	r0, #0
}
 80035e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f043 030a 	orr.w	r3, r3, #10
 80035f4:	e7f0      	b.n	80035d8 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80035f6:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80035fa:	2002      	movs	r0, #2
 80035fc:	e7f2      	b.n	80035e4 <HAL_DMA_Start_IT+0x64>

080035fe <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003602:	2b02      	cmp	r3, #2
 8003604:	d006      	beq.n	8003614 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003606:	2304      	movs	r3, #4
 8003608:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800360a:	2300      	movs	r3, #0
 800360c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003610:	2001      	movs	r0, #1
 8003612:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	6803      	ldr	r3, [r0, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	f022 020e 	bic.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003626:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 800362a:	2201      	movs	r2, #1
 800362c:	f003 031c 	and.w	r3, r3, #28
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003636:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003638:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800363c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8003640:	4618      	mov	r0, r3
}
 8003642:	4770      	bx	lr

08003644 <HAL_DMA_Abort_IT>:
{
 8003644:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003646:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800364a:	2a02      	cmp	r2, #2
 800364c:	d003      	beq.n	8003656 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800364e:	2204      	movs	r2, #4
 8003650:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003652:	2001      	movs	r0, #1
}
 8003654:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003656:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8003658:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	f021 010e 	bic.w	r1, r1, #14
 8003660:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003662:	6811      	ldr	r1, [r2, #0]
 8003664:	f021 0101 	bic.w	r1, r1, #1
 8003668:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800366a:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 800366e:	2101      	movs	r1, #1
 8003670:	f002 021c 	and.w	r2, r2, #28
 8003674:	fa01 f202 	lsl.w	r2, r1, r2
 8003678:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800367a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800367c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003680:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8003684:	b113      	cbz	r3, 800368c <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8003686:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	4620      	mov	r0, r4
 800368a:	e7e3      	b.n	8003654 <HAL_DMA_Abort_IT+0x10>
 800368c:	4618      	mov	r0, r3
 800368e:	e7e1      	b.n	8003654 <HAL_DMA_Abort_IT+0x10>

08003690 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003690:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003692:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003694:	6803      	ldr	r3, [r0, #0]
{
 8003696:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003698:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800369c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800369e:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036a0:	2404      	movs	r4, #4
 80036a2:	4094      	lsls	r4, r2
 80036a4:	4234      	tst	r4, r6
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x36>
 80036a8:	f015 0f04 	tst.w	r5, #4
 80036ac:	d00b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b2:	bf5e      	ittt	pl
 80036b4:	681a      	ldrpl	r2, [r3, #0]
 80036b6:	f022 0204 	bicpl.w	r2, r2, #4
 80036ba:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80036bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036be:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80036c0:	b373      	cbz	r3, 8003720 <HAL_DMA_IRQHandler+0x90>
}
 80036c2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80036c4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036c6:	2402      	movs	r4, #2
 80036c8:	4094      	lsls	r4, r2
 80036ca:	4234      	tst	r4, r6
 80036cc:	d012      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x64>
 80036ce:	f015 0f02 	tst.w	r5, #2
 80036d2:	d00f      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	0695      	lsls	r5, r2, #26
 80036d8:	d406      	bmi.n	80036e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f022 020a 	bic.w	r2, r2, #10
 80036e0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80036e8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ea:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80036ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80036f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036f2:	e7e5      	b.n	80036c0 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036f4:	2408      	movs	r4, #8
 80036f6:	4094      	lsls	r4, r2
 80036f8:	4234      	tst	r4, r6
 80036fa:	d011      	beq.n	8003720 <HAL_DMA_IRQHandler+0x90>
 80036fc:	072c      	lsls	r4, r5, #28
 80036fe:	d50f      	bpl.n	8003720 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003700:	681c      	ldr	r4, [r3, #0]
 8003702:	f024 040e 	bic.w	r4, r4, #14
 8003706:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003708:	2301      	movs	r3, #1
 800370a:	fa03 f202 	lsl.w	r2, r3, r2
 800370e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003710:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003712:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003716:	2300      	movs	r3, #0
 8003718:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800371c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800371e:	e7cf      	b.n	80036c0 <HAL_DMA_IRQHandler+0x30>
}
 8003720:	bc70      	pop	{r4, r5, r6}
 8003722:	4770      	bx	lr

08003724 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <FLASH_Program_Fast+0x28>)
 8003726:	6953      	ldr	r3, [r2, #20]
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 800372c:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800372e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003730:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
}
 8003736:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003738:	58cc      	ldr	r4, [r1, r3]
 800373a:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 800373c:	3304      	adds	r3, #4
 800373e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003742:	d1f9      	bne.n	8003738 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	40022000 	.word	0x40022000

08003750 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_FLASH_Unlock+0x1c>)
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003756:	bfbf      	itttt	lt
 8003758:	4a05      	ldrlt	r2, [pc, #20]	; (8003770 <HAL_FLASH_Unlock+0x20>)
 800375a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800375c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8003760:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003762:	bfba      	itte	lt
 8003764:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	0fc0      	lsrlt	r0, r0, #31
 8003768:	2000      	movge	r0, #0
}
 800376a:	4770      	bx	lr
 800376c:	40022000 	.word	0x40022000
 8003770:	45670123 	.word	0x45670123

08003774 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003774:	4a03      	ldr	r2, [pc, #12]	; (8003784 <HAL_FLASH_Lock+0x10>)
 8003776:	6953      	ldr	r3, [r2, #20]
 8003778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800377c:	6153      	str	r3, [r2, #20]
}
 800377e:	2000      	movs	r0, #0
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40022000 	.word	0x40022000

08003788 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8003788:	4b01      	ldr	r3, [pc, #4]	; (8003790 <HAL_FLASH_GetError+0x8>)
 800378a:	6858      	ldr	r0, [r3, #4]
}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000020 	.word	0x20000020

08003794 <FLASH_WaitForLastOperation>:
{
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff f89a 	bl	80028d0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800379c:	4c10      	ldr	r4, [pc, #64]	; (80037e0 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800379e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	03db      	lsls	r3, r3, #15
 80037a4:	d40a      	bmi.n	80037bc <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80037a6:	6920      	ldr	r0, [r4, #16]
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 80037aa:	4002      	ands	r2, r0
 80037ac:	d00f      	beq.n	80037ce <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <FLASH_WaitForLastOperation+0x54>)
 80037b0:	684b      	ldr	r3, [r1, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80037b8:	6122      	str	r2, [r4, #16]
}
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80037bc:	1c6a      	adds	r2, r5, #1
 80037be:	d0ef      	beq.n	80037a0 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80037c0:	f7ff f886 	bl	80028d0 <HAL_GetTick>
 80037c4:	1b80      	subs	r0, r0, r6
 80037c6:	42a8      	cmp	r0, r5
 80037c8:	d3ea      	bcc.n	80037a0 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80037ca:	2003      	movs	r0, #3
 80037cc:	e7f5      	b.n	80037ba <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80037ce:	6920      	ldr	r0, [r4, #16]
 80037d0:	f010 0001 	ands.w	r0, r0, #1
 80037d4:	d0f1      	beq.n	80037ba <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80037d6:	2301      	movs	r3, #1
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	4610      	mov	r0, r2
 80037dc:	e7ed      	b.n	80037ba <FLASH_WaitForLastOperation+0x26>
 80037de:	bf00      	nop
 80037e0:	40022000 	.word	0x40022000
 80037e4:	0002c3fa 	.word	0x0002c3fa
 80037e8:	20000020 	.word	0x20000020

080037ec <HAL_FLASH_Program>:
{
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80037f0:	4c25      	ldr	r4, [pc, #148]	; (8003888 <HAL_FLASH_Program+0x9c>)
{
 80037f2:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80037f4:	7823      	ldrb	r3, [r4, #0]
 80037f6:	2b01      	cmp	r3, #1
{
 80037f8:	4606      	mov	r6, r0
 80037fa:	460f      	mov	r7, r1
 80037fc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80037fe:	d041      	beq.n	8003884 <HAL_FLASH_Program+0x98>
 8003800:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003802:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8003806:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003808:	f7ff ffc4 	bl	8003794 <FLASH_WaitForLastOperation>
 800380c:	4605      	mov	r5, r0
  if(status == HAL_OK)
 800380e:	bb30      	cbnz	r0, 800385e <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003810:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003812:	481e      	ldr	r0, [pc, #120]	; (800388c <HAL_FLASH_Program+0xa0>)
 8003814:	6802      	ldr	r2, [r0, #0]
 8003816:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800381a:	bf17      	itett	ne
 800381c:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800381e:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003820:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8003824:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003826:	bf1c      	itt	ne
 8003828:	2302      	movne	r3, #2
 800382a:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800382c:	b9e6      	cbnz	r6, 8003868 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800382e:	6943      	ldr	r3, [r0, #20]
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6143      	str	r3, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003836:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800383a:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800383e:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003840:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003844:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003848:	f7ff ffa4 	bl	8003794 <FLASH_WaitForLastOperation>
 800384c:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 800384e:	b126      	cbz	r6, 800385a <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_FLASH_Program+0xa0>)
 8003852:	6953      	ldr	r3, [r2, #20]
 8003854:	ea23 0606 	bic.w	r6, r3, r6
 8003858:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 800385a:	f000 f83d 	bl	80038d8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800385e:	2300      	movs	r3, #0
 8003860:	7023      	strb	r3, [r4, #0]
}
 8003862:	4628      	mov	r0, r5
 8003864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003868:	1e73      	subs	r3, r6, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d901      	bls.n	8003872 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800386e:	2600      	movs	r6, #0
 8003870:	e7e8      	b.n	8003844 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003872:	4641      	mov	r1, r8
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff55 	bl	8003724 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800387a:	2e02      	cmp	r6, #2
 800387c:	d1f7      	bne.n	800386e <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800387e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8003882:	e7df      	b.n	8003844 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8003884:	2502      	movs	r5, #2
 8003886:	e7ec      	b.n	8003862 <HAL_FLASH_Program+0x76>
 8003888:	20000020 	.word	0x20000020
 800388c:	40022000 	.word	0x40022000

08003890 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <FLASH_MassErase+0x1c>)
 8003892:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003896:	bf1e      	ittt	ne
 8003898:	695a      	ldrne	r2, [r3, #20]
 800389a:	f042 0204 	orrne.w	r2, r2, #4
 800389e:	615a      	strne	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038a6:	615a      	str	r2, [r3, #20]
}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000

080038b0 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <FLASH_PageErase+0x24>)
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	00c0      	lsls	r0, r0, #3
 80038b6:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 80038ba:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80038be:	4310      	orrs	r0, r2
 80038c0:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	f042 0202 	orr.w	r2, r2, #2
 80038c8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038d0:	615a      	str	r2, [r3, #20]
}
 80038d2:	4770      	bx	lr
 80038d4:	40022000 	.word	0x40022000

080038d8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80038d8:	4815      	ldr	r0, [pc, #84]	; (8003930 <FLASH_FlushCaches+0x58>)
 80038da:	7f03      	ldrb	r3, [r0, #28]
 80038dc:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80038de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d110      	bne.n	8003908 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <FLASH_FlushCaches+0x5c>)
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80038ee:	6019      	str	r1, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80038f6:	6019      	str	r1, [r3, #0]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80038fe:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003906:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003908:	1e93      	subs	r3, r2, #2
 800390a:	2b01      	cmp	r3, #1
 800390c:	d80c      	bhi.n	8003928 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <FLASH_FlushCaches+0x5c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003928:	2300      	movs	r3, #0
 800392a:	7703      	strb	r3, [r0, #28]
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000020 	.word	0x20000020
 8003934:	40022000 	.word	0x40022000

08003938 <HAL_FLASHEx_Erase>:
{
 8003938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800393c:	4d31      	ldr	r5, [pc, #196]	; (8003a04 <HAL_FLASHEx_Erase+0xcc>)
 800393e:	782b      	ldrb	r3, [r5, #0]
 8003940:	2b01      	cmp	r3, #1
{
 8003942:	4606      	mov	r6, r0
 8003944:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003946:	d05a      	beq.n	80039fe <HAL_FLASHEx_Erase+0xc6>
 8003948:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800394a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800394e:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003950:	f7ff ff20 	bl	8003794 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003954:	4604      	mov	r4, r0
 8003956:	bb10      	cbnz	r0, 800399e <HAL_FLASHEx_Erase+0x66>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_FLASHEx_Erase+0xd0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800395a:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003962:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003964:	d020      	beq.n	80039a8 <HAL_FLASHEx_Erase+0x70>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003966:	0551      	lsls	r1, r2, #21
 8003968:	d506      	bpl.n	8003978 <HAL_FLASHEx_Erase+0x40>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003972:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003974:	772b      	strb	r3, [r5, #28]
 8003976:	e000      	b.n	800397a <HAL_FLASHEx_Erase+0x42>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003978:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800397a:	6833      	ldr	r3, [r6, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d11d      	bne.n	80039bc <HAL_FLASHEx_Erase+0x84>
      FLASH_MassErase(pEraseInit->Banks);
 8003980:	6870      	ldr	r0, [r6, #4]
 8003982:	f7ff ff85 	bl	8003890 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003986:	f24c 3050 	movw	r0, #50000	; 0xc350
 800398a:	f7ff ff03 	bl	8003794 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_FLASHEx_Erase+0xd0>)
 8003990:	6953      	ldr	r3, [r2, #20]
 8003992:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003996:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003998:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800399a:	f7ff ff9d 	bl	80038d8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800399e:	2300      	movs	r3, #0
 80039a0:	702b      	strb	r3, [r5, #0]
}
 80039a2:	4620      	mov	r0, r4
 80039a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80039a8:	0552      	lsls	r2, r2, #21
 80039aa:	d505      	bpl.n	80039b8 <HAL_FLASHEx_Erase+0x80>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80039b4:	2302      	movs	r3, #2
 80039b6:	e7dd      	b.n	8003974 <HAL_FLASHEx_Erase+0x3c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80039b8:	7728      	strb	r0, [r5, #28]
 80039ba:	e7de      	b.n	800397a <HAL_FLASHEx_Erase+0x42>
      *PageError = 0xFFFFFFFFU;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80039c4:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80039c6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003a08 <HAL_FLASHEx_Erase+0xd0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80039ca:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80039ce:	4413      	add	r3, r2
 80039d0:	42bb      	cmp	r3, r7
 80039d2:	d9e2      	bls.n	800399a <HAL_FLASHEx_Erase+0x62>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80039d4:	6871      	ldr	r1, [r6, #4]
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7ff ff6a 	bl	80038b0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039e0:	f7ff fed8 	bl	8003794 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80039e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80039e8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80039ec:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80039f0:	b118      	cbz	r0, 80039fa <HAL_FLASHEx_Erase+0xc2>
          *PageError = page_index;
 80039f2:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039f6:	4604      	mov	r4, r0
          break;
 80039f8:	e7cf      	b.n	800399a <HAL_FLASHEx_Erase+0x62>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80039fa:	3701      	adds	r7, #1
 80039fc:	e7e5      	b.n	80039ca <HAL_FLASHEx_Erase+0x92>
  __HAL_LOCK(&pFlash);
 80039fe:	2402      	movs	r4, #2
 8003a00:	e7cf      	b.n	80039a2 <HAL_FLASHEx_Erase+0x6a>
 8003a02:	bf00      	nop
 8003a04:	20000020 	.word	0x20000020
 8003a08:	40022000 	.word	0x40022000

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a10:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003b84 <HAL_GPIO_Init+0x178>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a14:	4c59      	ldr	r4, [pc, #356]	; (8003b7c <HAL_GPIO_Init+0x170>)
  uint32_t position = 0x00u;
 8003a16:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a18:	680a      	ldr	r2, [r1, #0]
 8003a1a:	fa32 f503 	lsrs.w	r5, r2, r3
 8003a1e:	d102      	bne.n	8003a26 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003a20:	b003      	add	sp, #12
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a26:	2501      	movs	r5, #1
 8003a28:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003a2c:	ea18 0202 	ands.w	r2, r8, r2
 8003a30:	f000 809c 	beq.w	8003b6c <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a34:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a36:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a38:	f006 0503 	and.w	r5, r6, #3
 8003a3c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a40:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a44:	1e6f      	subs	r7, r5, #1
 8003a46:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a48:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4c:	d834      	bhi.n	8003ab8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003a4e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a50:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a54:	68cf      	ldr	r7, [r1, #12]
 8003a56:	fa07 f70e 	lsl.w	r7, r7, lr
 8003a5a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003a5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a60:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a62:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a66:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003a6a:	409f      	lsls	r7, r3
 8003a6c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003a70:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003a72:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a74:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a78:	688f      	ldr	r7, [r1, #8]
 8003a7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8003a7e:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003a84:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	d119      	bne.n	8003abc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003a88:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003a8c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a90:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003a94:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a98:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003a9c:	f04f 0b0f 	mov.w	fp, #15
 8003aa0:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003aa4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aa8:	690f      	ldr	r7, [r1, #16]
 8003aaa:	fa07 f70a 	lsl.w	r7, r7, sl
 8003aae:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003ab2:	f8c8 7020 	str.w	r7, [r8, #32]
 8003ab6:	e001      	b.n	8003abc <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	2d03      	cmp	r5, #3
 8003aba:	d1da      	bne.n	8003a72 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003abc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003abe:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ac2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac6:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac8:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003acc:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ace:	d04d      	beq.n	8003b6c <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad0:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003ad4:	f045 0501 	orr.w	r5, r5, #1
 8003ad8:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8003adc:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003ae0:	f023 0703 	bic.w	r7, r3, #3
 8003ae4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003ae8:	f005 0501 	and.w	r5, r5, #1
 8003aec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003af0:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003af2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003af8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003afa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003afe:	f04f 0e0f 	mov.w	lr, #15
 8003b02:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b06:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b0a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b0e:	d02f      	beq.n	8003b70 <HAL_GPIO_Init+0x164>
 8003b10:	4d1b      	ldr	r5, [pc, #108]	; (8003b80 <HAL_GPIO_Init+0x174>)
 8003b12:	42a8      	cmp	r0, r5
 8003b14:	d02e      	beq.n	8003b74 <HAL_GPIO_Init+0x168>
 8003b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b1a:	42a8      	cmp	r0, r5
 8003b1c:	d02c      	beq.n	8003b78 <HAL_GPIO_Init+0x16c>
 8003b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b22:	42a8      	cmp	r0, r5
 8003b24:	bf0c      	ite	eq
 8003b26:	2503      	moveq	r5, #3
 8003b28:	2507      	movne	r5, #7
 8003b2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8003b2e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b32:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8003b34:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003b36:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b38:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003b3c:	bf0c      	ite	eq
 8003b3e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003b40:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8003b42:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003b44:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b46:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003b4a:	bf0c      	ite	eq
 8003b4c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003b4e:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8003b50:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8003b52:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b54:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003b58:	bf0c      	ite	eq
 8003b5a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003b5c:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8003b5e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8003b60:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b62:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003b64:	bf54      	ite	pl
 8003b66:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003b68:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8003b6a:	6025      	str	r5, [r4, #0]
    position++;
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	e753      	b.n	8003a18 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b70:	2500      	movs	r5, #0
 8003b72:	e7da      	b.n	8003b2a <HAL_GPIO_Init+0x11e>
 8003b74:	2501      	movs	r5, #1
 8003b76:	e7d8      	b.n	8003b2a <HAL_GPIO_Init+0x11e>
 8003b78:	2502      	movs	r5, #2
 8003b7a:	e7d6      	b.n	8003b2a <HAL_GPIO_Init+0x11e>
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	48000400 	.word	0x48000400
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b88:	6903      	ldr	r3, [r0, #16]
 8003b8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003b8c:	bf14      	ite	ne
 8003b8e:	2001      	movne	r0, #1
 8003b90:	2000      	moveq	r0, #0
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	b10a      	cbz	r2, 8003b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b96:	6181      	str	r1, [r0, #24]
 8003b98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b9a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba0:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_PWR_EnableBkUpAccess+0xc>)
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	4770      	bx	lr
 8003bac:	40007000 	.word	0x40007000

08003bb0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bb0:	4b02      	ldr	r3, [pc, #8]	; (8003bbc <HAL_PWREx_GetVoltageRange+0xc>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003bb4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40007000 	.word	0x40007000

08003bc0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bcc:	d11d      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd2:	d101      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd8:	6813      	ldr	r3, [r2, #0]
 8003bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2132      	movs	r1, #50	; 0x32
 8003bea:	434b      	muls	r3, r1
 8003bec:	490e      	ldr	r1, [pc, #56]	; (8003c28 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bf2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf4:	6951      	ldr	r1, [r2, #20]
 8003bf6:	0549      	lsls	r1, r1, #21
 8003bf8:	d500      	bpl.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x3c>
 8003bfa:	b923      	cbnz	r3, 8003c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfc:	6953      	ldr	r3, [r2, #20]
 8003bfe:	055b      	lsls	r3, r3, #21
 8003c00:	d5e8      	bpl.n	8003bd4 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8003c02:	2003      	movs	r0, #3
}
 8003c04:	4770      	bx	lr
        wait_loop_index--;
 8003c06:	3b01      	subs	r3, #1
 8003c08:	e7f4      	b.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c0e:	bf1f      	itttt	ne
 8003c10:	6813      	ldrne	r3, [r2, #0]
 8003c12:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8003c16:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8003c1a:	6013      	strne	r3, [r2, #0]
 8003c1c:	e7da      	b.n	8003bd4 <HAL_PWREx_ControlVoltageScaling+0x14>
 8003c1e:	bf00      	nop
 8003c20:	40007000 	.word	0x40007000
 8003c24:	20000014 	.word	0x20000014
 8003c28:	000f4240 	.word	0x000f4240

08003c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c2e:	4d1e      	ldr	r5, [pc, #120]	; (8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003c30:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c32:	00da      	lsls	r2, r3, #3
{
 8003c34:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c36:	d518      	bpl.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c38:	f7ff ffba 	bl	8003bb0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c40:	d123      	bne.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c42:	2c80      	cmp	r4, #128	; 0x80
 8003c44:	d929      	bls.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c46:	2ca0      	cmp	r4, #160	; 0xa0
 8003c48:	bf8c      	ite	hi
 8003c4a:	2002      	movhi	r0, #2
 8003c4c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	4303      	orrs	r3, r0
 8003c58:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003c60:	1a18      	subs	r0, r3, r0
 8003c62:	bf18      	it	ne
 8003c64:	2001      	movne	r0, #1
 8003c66:	b003      	add	sp, #12
 8003c68:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c72:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff ff98 	bl	8003bb0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c88:	e7d8      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c8a:	2c80      	cmp	r4, #128	; 0x80
 8003c8c:	d807      	bhi.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c8e:	d008      	beq.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c90:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c94:	4258      	negs	r0, r3
 8003c96:	4158      	adcs	r0, r3
 8003c98:	e7d9      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e7d7      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	e7d5      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca2:	2002      	movs	r0, #2
 8003ca4:	e7d3      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40022000 	.word	0x40022000

08003cb0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb0:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x8c>)
 8003cb2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb6:	f012 020c 	ands.w	r2, r2, #12
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x18>
 8003cbc:	2a0c      	cmp	r2, #12
 8003cbe:	d115      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cc4:	2901      	cmp	r1, #1
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cc8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003cca:	481d      	ldr	r0, [pc, #116]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ccc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cce:	bf55      	itete	pl
 8003cd0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cd6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cda:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003cde:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce2:	b34a      	cbz	r2, 8003d38 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ce4:	2a0c      	cmp	r2, #12
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x4c>
 8003ce8:	2000      	movs	r0, #0
  return sysclockfreq;
 8003cea:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cec:	2a04      	cmp	r2, #4
 8003cee:	d022      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cf0:	2a08      	cmp	r2, #8
 8003cf2:	4814      	ldr	r0, [pc, #80]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf4:	bf18      	it	ne
 8003cf6:	2000      	movne	r0, #0
 8003cf8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cfa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003d02:	2a02      	cmp	r2, #2
 8003d04:	d015      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x82>
 8003d06:	490f      	ldr	r1, [pc, #60]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d08:	2a03      	cmp	r2, #3
 8003d0a:	bf08      	it	eq
 8003d0c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d0e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003d16:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d18:	68d8      	ldr	r0, [r3, #12]
 8003d1a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d1e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d22:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d24:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d26:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d28:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003d2c:	fbb2 f0f0 	udiv	r0, r2, r0
 8003d30:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d34:	e7eb      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003d36:	4804      	ldr	r0, [pc, #16]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800b7fc 	.word	0x0800b7fc
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	00f42400 	.word	0x00f42400

08003d4c <HAL_RCC_OscConfig>:
{
 8003d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003d50:	4605      	mov	r5, r0
 8003d52:	b918      	cbnz	r0, 8003d5c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
}
 8003d56:	b003      	add	sp, #12
 8003d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5c:	4c94      	ldr	r4, [pc, #592]	; (8003fb0 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d5e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d60:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d62:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d64:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d6a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d6e:	d53d      	bpl.n	8003dec <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d70:	b11e      	cbz	r6, 8003d7a <HAL_RCC_OscConfig+0x2e>
 8003d72:	2e0c      	cmp	r6, #12
 8003d74:	d16a      	bne.n	8003e4c <HAL_RCC_OscConfig+0x100>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d76:	2f01      	cmp	r7, #1
 8003d78:	d168      	bne.n	8003e4c <HAL_RCC_OscConfig+0x100>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	0798      	lsls	r0, r3, #30
 8003d7e:	d502      	bpl.n	8003d86 <HAL_RCC_OscConfig+0x3a>
 8003d80:	69eb      	ldr	r3, [r5, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0e6      	beq.n	8003d54 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d8a:	0719      	lsls	r1, r3, #28
 8003d8c:	bf56      	itet	pl
 8003d8e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d92:	6823      	ldrmi	r3, [r4, #0]
 8003d94:	091b      	lsrpl	r3, r3, #4
 8003d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9a:	4298      	cmp	r0, r3
 8003d9c:	d93f      	bls.n	8003e1e <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9e:	f7ff ff45 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d1d6      	bne.n	8003d54 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db6:	4313      	orrs	r3, r2
 8003db8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dba:	6863      	ldr	r3, [r4, #4]
 8003dbc:	6a2a      	ldr	r2, [r5, #32]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dc6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc8:	f7ff ff72 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	4a79      	ldr	r2, [pc, #484]	; (8003fb4 <HAL_RCC_OscConfig+0x268>)
 8003dd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	40d8      	lsrs	r0, r3
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003de0:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x270>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	f7fe fd32 	bl	800284c <HAL_InitTick>
        if(status != HAL_OK)
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d1b4      	bne.n	8003d56 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	07d8      	lsls	r0, r3, #31
 8003df0:	d463      	bmi.n	8003eba <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	0799      	lsls	r1, r3, #30
 8003df6:	f100 80a2 	bmi.w	8003f3e <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	0718      	lsls	r0, r3, #28
 8003dfe:	f100 80df 	bmi.w	8003fc0 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	0759      	lsls	r1, r3, #29
 8003e06:	f100 812f 	bmi.w	8004068 <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	0699      	lsls	r1, r3, #26
 8003e0e:	f100 81ab 	bmi.w	8004168 <HAL_RCC_OscConfig+0x41c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 81d1 	bne.w	80041bc <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e79b      	b.n	8003d56 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f043 0308 	orr.w	r3, r3, #8
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2c:	4303      	orrs	r3, r0
 8003e2e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	6a2a      	ldr	r2, [r5, #32]
 8003e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e3c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	d1c2      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e42:	f7ff fef3 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d0be      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x7c>
 8003e4a:	e783      	b.n	8003d54 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e4c:	69eb      	ldr	r3, [r5, #28]
 8003e4e:	b31b      	cbz	r3, 8003e98 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e58:	f7fe fd3a 	bl	80028d0 <HAL_GetTick>
 8003e5c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	079a      	lsls	r2, r3, #30
 8003e62:	d511      	bpl.n	8003e88 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e74:	4313      	orrs	r3, r2
 8003e76:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	6a2a      	ldr	r2, [r5, #32]
 8003e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	e7b1      	b.n	8003dec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e88:	f7fe fd22 	bl	80028d0 <HAL_GetTick>
 8003e8c:	eba0 0008 	sub.w	r0, r0, r8
 8003e90:	2802      	cmp	r0, #2
 8003e92:	d9e4      	bls.n	8003e5e <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8003e94:	2003      	movs	r0, #3
 8003e96:	e75e      	b.n	8003d56 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fd16 	bl	80028d0 <HAL_GetTick>
 8003ea4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	079b      	lsls	r3, r3, #30
 8003eaa:	d59f      	bpl.n	8003dec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eac:	f7fe fd10 	bl	80028d0 <HAL_GetTick>
 8003eb0:	eba0 0008 	sub.w	r0, r0, r8
 8003eb4:	2802      	cmp	r0, #2
 8003eb6:	d9f6      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x15a>
 8003eb8:	e7ec      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eba:	2e08      	cmp	r6, #8
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x17a>
 8003ebe:	2e0c      	cmp	r6, #12
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ec2:	2f03      	cmp	r7, #3
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	039a      	lsls	r2, r3, #14
 8003eca:	d592      	bpl.n	8003df2 <HAL_RCC_OscConfig+0xa6>
 8003ecc:	686b      	ldr	r3, [r5, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d18f      	bne.n	8003df2 <HAL_RCC_OscConfig+0xa6>
 8003ed2:	e73f      	b.n	8003d54 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	686b      	ldr	r3, [r5, #4]
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eda:	d110      	bne.n	8003efe <HAL_RCC_OscConfig+0x1b2>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fcf4 	bl	80028d0 <HAL_GetTick>
 8003ee8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	039b      	lsls	r3, r3, #14
 8003eee:	d480      	bmi.n	8003df2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fcee 	bl	80028d0 <HAL_GetTick>
 8003ef4:	eba0 0008 	sub.w	r0, r0, r8
 8003ef8:	2864      	cmp	r0, #100	; 0x64
 8003efa:	d9f6      	bls.n	8003eea <HAL_RCC_OscConfig+0x19e>
 8003efc:	e7ca      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f02:	d104      	bne.n	8003f0e <HAL_RCC_OscConfig+0x1c2>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	e7e6      	b.n	8003edc <HAL_RCC_OscConfig+0x190>
 8003f0e:	6822      	ldr	r2, [r4, #0]
 8003f10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f1c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8003f22:	f7fe fcd5 	bl	80028d0 <HAL_GetTick>
 8003f26:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	0398      	lsls	r0, r3, #14
 8003f2c:	f57f af61 	bpl.w	8003df2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fe fcce 	bl	80028d0 <HAL_GetTick>
 8003f34:	eba0 0008 	sub.w	r0, r0, r8
 8003f38:	2864      	cmp	r0, #100	; 0x64
 8003f3a:	d9f5      	bls.n	8003f28 <HAL_RCC_OscConfig+0x1dc>
 8003f3c:	e7aa      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f3e:	2e04      	cmp	r6, #4
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1fe>
 8003f42:	2e0c      	cmp	r6, #12
 8003f44:	d110      	bne.n	8003f68 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f46:	2f02      	cmp	r7, #2
 8003f48:	d10e      	bne.n	8003f68 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	0559      	lsls	r1, r3, #21
 8003f4e:	d503      	bpl.n	8003f58 <HAL_RCC_OscConfig+0x20c>
 8003f50:	68eb      	ldr	r3, [r5, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f43f aefe 	beq.w	8003d54 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	692a      	ldr	r2, [r5, #16]
 8003f5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f64:	6063      	str	r3, [r4, #4]
 8003f66:	e748      	b.n	8003dfa <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f68:	68eb      	ldr	r3, [r5, #12]
 8003f6a:	b17b      	cbz	r3, 8003f8c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f74:	f7fe fcac 	bl	80028d0 <HAL_GetTick>
 8003f78:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	055a      	lsls	r2, r3, #21
 8003f7e:	d4eb      	bmi.n	8003f58 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fe fca6 	bl	80028d0 <HAL_GetTick>
 8003f84:	1bc0      	subs	r0, r0, r7
 8003f86:	2802      	cmp	r0, #2
 8003f88:	d9f7      	bls.n	8003f7a <HAL_RCC_OscConfig+0x22e>
 8003f8a:	e783      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f94:	f7fe fc9c 	bl	80028d0 <HAL_GetTick>
 8003f98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	055b      	lsls	r3, r3, #21
 8003f9e:	f57f af2c 	bpl.w	8003dfa <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe fc95 	bl	80028d0 <HAL_GetTick>
 8003fa6:	1bc0      	subs	r0, r0, r7
 8003fa8:	2802      	cmp	r0, #2
 8003faa:	d9f6      	bls.n	8003f9a <HAL_RCC_OscConfig+0x24e>
 8003fac:	e772      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800b7e3 	.word	0x0800b7e3
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	2000001c 	.word	0x2000001c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc0:	696b      	ldr	r3, [r5, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d03c      	beq.n	8004040 <HAL_RCC_OscConfig+0x2f4>
      uint32_t csr_temp = RCC->CSR;
 8003fc6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003fca:	69a9      	ldr	r1, [r5, #24]
 8003fcc:	f003 0210 	and.w	r2, r3, #16
 8003fd0:	4291      	cmp	r1, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2a6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	2a02      	cmp	r2, #2
 8003fda:	f43f aebb 	beq.w	8003d54 <HAL_RCC_OscConfig+0x8>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003fde:	07da      	lsls	r2, r3, #31
 8003fe0:	d41b      	bmi.n	800401a <HAL_RCC_OscConfig+0x2ce>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003fe2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fe6:	69aa      	ldr	r2, [r5, #24]
 8003fe8:	f023 0310 	bic.w	r3, r3, #16
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003ffe:	f7fe fc67 	bl	80028d0 <HAL_GetTick>
 8004002:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004004:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004008:	0798      	lsls	r0, r3, #30
 800400a:	f53f aefa 	bmi.w	8003e02 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400e:	f7fe fc5f 	bl	80028d0 <HAL_GetTick>
 8004012:	1bc0      	subs	r0, r0, r7
 8004014:	2811      	cmp	r0, #17
 8004016:	d9f5      	bls.n	8004004 <HAL_RCC_OscConfig+0x2b8>
 8004018:	e73c      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
          __HAL_RCC_LSI_DISABLE();
 800401a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004026:	f7fe fc53 	bl	80028d0 <HAL_GetTick>
 800402a:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800402c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004030:	079b      	lsls	r3, r3, #30
 8004032:	d5d6      	bpl.n	8003fe2 <HAL_RCC_OscConfig+0x296>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004034:	f7fe fc4c 	bl	80028d0 <HAL_GetTick>
 8004038:	1bc0      	subs	r0, r0, r7
 800403a:	2811      	cmp	r0, #17
 800403c:	d9f6      	bls.n	800402c <HAL_RCC_OscConfig+0x2e0>
 800403e:	e729      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8004040:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800404c:	f7fe fc40 	bl	80028d0 <HAL_GetTick>
 8004050:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004052:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004056:	0799      	lsls	r1, r3, #30
 8004058:	f57f aed3 	bpl.w	8003e02 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405c:	f7fe fc38 	bl	80028d0 <HAL_GetTick>
 8004060:	1bc0      	subs	r0, r0, r7
 8004062:	2811      	cmp	r0, #17
 8004064:	d9f5      	bls.n	8004052 <HAL_RCC_OscConfig+0x306>
 8004066:	e715      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004068:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800406a:	00da      	lsls	r2, r3, #3
 800406c:	d430      	bmi.n	80040d0 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004074:	65a3      	str	r3, [r4, #88]	; 0x58
 8004076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004080:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004082:	f8df 8270 	ldr.w	r8, [pc, #624]	; 80042f4 <HAL_RCC_OscConfig+0x5a8>
 8004086:	f8d8 3000 	ldr.w	r3, [r8]
 800408a:	05db      	lsls	r3, r3, #23
 800408c:	d522      	bpl.n	80040d4 <HAL_RCC_OscConfig+0x388>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800408e:	68aa      	ldr	r2, [r5, #8]
 8004090:	07d0      	lsls	r0, r2, #31
 8004092:	d433      	bmi.n	80040fc <HAL_RCC_OscConfig+0x3b0>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004094:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ac:	2a00      	cmp	r2, #0
 80040ae:	d13c      	bne.n	800412a <HAL_RCC_OscConfig+0x3de>
      tickstart = HAL_GetTick();
 80040b0:	f7fe fc0e 	bl	80028d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040b8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040be:	0798      	lsls	r0, r3, #30
 80040c0:	d44b      	bmi.n	800415a <HAL_RCC_OscConfig+0x40e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80040c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80040ce:	e035      	b.n	800413c <HAL_RCC_OscConfig+0x3f0>
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	2700      	movs	r7, #0
 80040d2:	e7d6      	b.n	8004082 <HAL_RCC_OscConfig+0x336>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	f8d8 3000 	ldr.w	r3, [r8]
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	f8c8 3000 	str.w	r3, [r8]
      tickstart = HAL_GetTick();
 80040e0:	f7fe fbf6 	bl	80028d0 <HAL_GetTick>
 80040e4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ea:	05d9      	lsls	r1, r3, #23
 80040ec:	d4cf      	bmi.n	800408e <HAL_RCC_OscConfig+0x342>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fe fbef 	bl	80028d0 <HAL_GetTick>
 80040f2:	eba0 0009 	sub.w	r0, r0, r9
 80040f6:	2802      	cmp	r0, #2
 80040f8:	d9f5      	bls.n	80040e6 <HAL_RCC_OscConfig+0x39a>
 80040fa:	e6cb      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80040fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004100:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8004104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004108:	430b      	orrs	r3, r1
 800410a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800410e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004112:	0752      	lsls	r2, r2, #29
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004114:	bf42      	ittt	mi
 8004116:	f043 0304 	orrmi.w	r3, r3, #4
 800411a:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800411e:	f8d4 3090 	ldrmi.w	r3, [r4, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800412a:	f7fe fbd1 	bl	80028d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004132:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004134:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	d507      	bpl.n	800414c <HAL_RCC_OscConfig+0x400>
    if(pwrclkchanged == SET)
 800413c:	2f00      	cmp	r7, #0
 800413e:	f43f ae64 	beq.w	8003e0a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	65a3      	str	r3, [r4, #88]	; 0x58
 800414a:	e65e      	b.n	8003e0a <HAL_RCC_OscConfig+0xbe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fe fbc0 	bl	80028d0 <HAL_GetTick>
 8004150:	eba0 0008 	sub.w	r0, r0, r8
 8004154:	4548      	cmp	r0, r9
 8004156:	d9ed      	bls.n	8004134 <HAL_RCC_OscConfig+0x3e8>
 8004158:	e69c      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fe fbb9 	bl	80028d0 <HAL_GetTick>
 800415e:	eba0 0008 	sub.w	r0, r0, r8
 8004162:	4548      	cmp	r0, r9
 8004164:	d9a9      	bls.n	80040ba <HAL_RCC_OscConfig+0x36e>
 8004166:	e695      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004168:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800416a:	b19b      	cbz	r3, 8004194 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI48_ENABLE();
 800416c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004178:	f7fe fbaa 	bl	80028d0 <HAL_GetTick>
 800417c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004182:	079a      	lsls	r2, r3, #30
 8004184:	f53f ae45 	bmi.w	8003e12 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004188:	f7fe fba2 	bl	80028d0 <HAL_GetTick>
 800418c:	1bc0      	subs	r0, r0, r7
 800418e:	2802      	cmp	r0, #2
 8004190:	d9f5      	bls.n	800417e <HAL_RCC_OscConfig+0x432>
 8004192:	e67f      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8004194:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80041a0:	f7fe fb96 	bl	80028d0 <HAL_GetTick>
 80041a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	f57f ae31 	bpl.w	8003e12 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b0:	f7fe fb8e 	bl	80028d0 <HAL_GetTick>
 80041b4:	1bc0      	subs	r0, r0, r7
 80041b6:	2802      	cmp	r0, #2
 80041b8:	d9f5      	bls.n	80041a6 <HAL_RCC_OscConfig+0x45a>
 80041ba:	e66b      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d17a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x56a>
      pll_config = RCC->PLLCFGR;
 80041c0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80041c4:	f003 0103 	and.w	r1, r3, #3
 80041c8:	4291      	cmp	r1, r2
 80041ca:	d11c      	bne.n	8004206 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041cc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80041ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041d2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80041d8:	d115      	bne.n	8004206 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80041dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80041e4:	d10f      	bne.n	8004206 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80041e8:	0852      	lsrs	r2, r2, #1
 80041ea:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80041ee:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_OscConfig+0x4ba>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041f6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80041f8:	0852      	lsrs	r2, r2, #1
 80041fa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80041fe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004200:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004204:	d03e      	beq.n	8004284 <HAL_RCC_OscConfig+0x538>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004206:	2e0c      	cmp	r6, #12
 8004208:	f43f ada4 	beq.w	8003d54 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8004214:	f7fe fb5c 	bl	80028d0 <HAL_GetTick>
 8004218:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	0198      	lsls	r0, r3, #6
 800421e:	d42b      	bmi.n	8004278 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004220:	68e2      	ldr	r2, [r4, #12]
 8004222:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x5a4>)
 8004224:	4013      	ands	r3, r2
 8004226:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004228:	4313      	orrs	r3, r2
 800422a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800422c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004230:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004232:	3a01      	subs	r2, #1
 8004234:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004238:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800423a:	0852      	lsrs	r2, r2, #1
 800423c:	3a01      	subs	r2, #1
 800423e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004242:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004244:	0852      	lsrs	r2, r2, #1
 8004246:	3a01      	subs	r2, #1
 8004248:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800424c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004254:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800425e:	f7fe fb37 	bl	80028d0 <HAL_GetTick>
 8004262:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	0199      	lsls	r1, r3, #6
 8004268:	f53f add7 	bmi.w	8003e1a <HAL_RCC_OscConfig+0xce>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe fb30 	bl	80028d0 <HAL_GetTick>
 8004270:	1b40      	subs	r0, r0, r5
 8004272:	2802      	cmp	r0, #2
 8004274:	d9f6      	bls.n	8004264 <HAL_RCC_OscConfig+0x518>
 8004276:	e60d      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe fb2a 	bl	80028d0 <HAL_GetTick>
 800427c:	1b80      	subs	r0, r0, r6
 800427e:	2802      	cmp	r0, #2
 8004280:	d9cb      	bls.n	800421a <HAL_RCC_OscConfig+0x4ce>
 8004282:	e607      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	f53f adc7 	bmi.w	8003e1a <HAL_RCC_OscConfig+0xce>
          __HAL_RCC_PLL_ENABLE();
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004292:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004294:	68e3      	ldr	r3, [r4, #12]
 8004296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800429c:	f7fe fb18 	bl	80028d0 <HAL_GetTick>
 80042a0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	f53f adb8 	bmi.w	8003e1a <HAL_RCC_OscConfig+0xce>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fe fb11 	bl	80028d0 <HAL_GetTick>
 80042ae:	1b40      	subs	r0, r0, r5
 80042b0:	2802      	cmp	r0, #2
 80042b2:	d9f6      	bls.n	80042a2 <HAL_RCC_OscConfig+0x556>
 80042b4:	e5ee      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b6:	2e0c      	cmp	r6, #12
 80042b8:	f43f ad4c 	beq.w	8003d54 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042c4:	f7fe fb04 	bl	80028d0 <HAL_GetTick>
 80042c8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_OscConfig+0x596>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80042d2:	68e2      	ldr	r2, [r4, #12]
 80042d4:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 80042d8:	f022 0203 	bic.w	r2, r2, #3
 80042dc:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80042de:	4618      	mov	r0, r3
 80042e0:	e539      	b.n	8003d56 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe faf5 	bl	80028d0 <HAL_GetTick>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	2802      	cmp	r0, #2
 80042ea:	d9ee      	bls.n	80042ca <HAL_RCC_OscConfig+0x57e>
 80042ec:	e5d2      	b.n	8003e94 <HAL_RCC_OscConfig+0x148>
 80042ee:	bf00      	nop
 80042f0:	f99f808c 	.word	0xf99f808c
 80042f4:	40007000 	.word	0x40007000

080042f8 <HAL_RCC_ClockConfig>:
{
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80042fe:	4604      	mov	r4, r0
 8004300:	b910      	cbnz	r0, 8004308 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004302:	2001      	movs	r0, #1
}
 8004304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4a4b      	ldr	r2, [pc, #300]	; (8004438 <HAL_RCC_ClockConfig+0x140>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	428b      	cmp	r3, r1
 8004312:	d32c      	bcc.n	800436e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	0786      	lsls	r6, r0, #30
 8004318:	d434      	bmi.n	8004384 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	07c1      	lsls	r1, r0, #31
 800431c:	d43f      	bmi.n	800439e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	078a      	lsls	r2, r1, #30
 8004322:	d468      	bmi.n	80043f6 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4a44      	ldr	r2, [pc, #272]	; (8004438 <HAL_RCC_ClockConfig+0x140>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	42ab      	cmp	r3, r5
 800432e:	d86f      	bhi.n	8004410 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	f011 0f04 	tst.w	r1, #4
 8004334:	4d41      	ldr	r5, [pc, #260]	; (800443c <HAL_RCC_ClockConfig+0x144>)
 8004336:	d177      	bne.n	8004428 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	070b      	lsls	r3, r1, #28
 800433a:	d506      	bpl.n	800434a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433c:	68ab      	ldr	r3, [r5, #8]
 800433e:	6922      	ldr	r2, [r4, #16]
 8004340:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004344:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004348:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800434a:	f7ff fcb1 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 800434e:	68ab      	ldr	r3, [r5, #8]
 8004350:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_RCC_ClockConfig+0x148>)
 8004352:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	40d8      	lsrs	r0, r3
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <HAL_RCC_ClockConfig+0x14c>)
 8004364:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004366:	4b38      	ldr	r3, [pc, #224]	; (8004448 <HAL_RCC_ClockConfig+0x150>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7fe ba6f 	b.w	800284c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	f023 0307 	bic.w	r3, r3, #7
 8004374:	430b      	orrs	r3, r1
 8004376:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004378:	6813      	ldr	r3, [r2, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	428b      	cmp	r3, r1
 8004380:	d1bf      	bne.n	8004302 <HAL_RCC_ClockConfig+0xa>
 8004382:	e7c7      	b.n	8004314 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004384:	4a2d      	ldr	r2, [pc, #180]	; (800443c <HAL_RCC_ClockConfig+0x144>)
 8004386:	68a6      	ldr	r6, [r4, #8]
 8004388:	6891      	ldr	r1, [r2, #8]
 800438a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800438e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	bf81      	itttt	hi
 8004392:	6893      	ldrhi	r3, [r2, #8]
 8004394:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8004398:	4333      	orrhi	r3, r6
 800439a:	6093      	strhi	r3, [r2, #8]
 800439c:	e7bd      	b.n	800431a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	4e26      	ldr	r6, [pc, #152]	; (800443c <HAL_RCC_ClockConfig+0x144>)
 80043a2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	d11a      	bne.n	80043de <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ac:	d0a9      	beq.n	8004302 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	68b3      	ldr	r3, [r6, #8]
 80043b0:	f023 0303 	bic.w	r3, r3, #3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80043b8:	f7fe fa8a 	bl	80028d0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80043c0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	68b3      	ldr	r3, [r6, #8]
 80043c4:	6862      	ldr	r2, [r4, #4]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043ce:	d0a6      	beq.n	800431e <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fe fa7e 	bl	80028d0 <HAL_GetTick>
 80043d4:	1bc0      	subs	r0, r0, r7
 80043d6:	4540      	cmp	r0, r8
 80043d8:	d9f3      	bls.n	80043c2 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80043da:	2003      	movs	r0, #3
 80043dc:	e792      	b.n	8004304 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	2a02      	cmp	r2, #2
 80043e0:	d102      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043e6:	e7e1      	b.n	80043ac <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043e8:	b912      	cbnz	r2, 80043f0 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ea:	f013 0f02 	tst.w	r3, #2
 80043ee:	e7dd      	b.n	80043ac <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80043f4:	e7da      	b.n	80043ac <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043f6:	4a11      	ldr	r2, [pc, #68]	; (800443c <HAL_RCC_ClockConfig+0x144>)
 80043f8:	68a6      	ldr	r6, [r4, #8]
 80043fa:	6890      	ldr	r0, [r2, #8]
 80043fc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004400:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004402:	bf3f      	itttt	cc
 8004404:	6893      	ldrcc	r3, [r2, #8]
 8004406:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800440a:	4333      	orrcc	r3, r6
 800440c:	6093      	strcc	r3, [r2, #8]
 800440e:	e789      	b.n	8004324 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	432b      	orrs	r3, r5
 8004418:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	42ab      	cmp	r3, r5
 8004422:	f47f af6e 	bne.w	8004302 <HAL_RCC_ClockConfig+0xa>
 8004426:	e783      	b.n	8004330 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	68ab      	ldr	r3, [r5, #8]
 800442a:	68e2      	ldr	r2, [r4, #12]
 800442c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004430:	4313      	orrs	r3, r2
 8004432:	60ab      	str	r3, [r5, #8]
 8004434:	e780      	b.n	8004338 <HAL_RCC_ClockConfig+0x40>
 8004436:	bf00      	nop
 8004438:	40022000 	.word	0x40022000
 800443c:	40021000 	.word	0x40021000
 8004440:	0800b7e3 	.word	0x0800b7e3
 8004444:	20000014 	.word	0x20000014
 8004448:	2000001c 	.word	0x2000001c

0800444c <HAL_RCC_GetHCLKFreq>:
}
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <HAL_RCC_GetHCLKFreq+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000014 	.word	0x20000014

08004458 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x18>)
 800445a:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004466:	6810      	ldr	r0, [r2, #0]
 8004468:	f003 031f 	and.w	r3, r3, #31
}
 800446c:	40d8      	lsrs	r0, r3
 800446e:	4770      	bx	lr
 8004470:	40021000 	.word	0x40021000
 8004474:	0800b7f3 	.word	0x0800b7f3
 8004478:	20000014 	.word	0x20000014

0800447c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x18>)
 800447e:	4a06      	ldr	r2, [pc, #24]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	f003 031f 	and.w	r3, r3, #31
}
 8004490:	40d8      	lsrs	r0, r3
 8004492:	4770      	bx	lr
 8004494:	40021000 	.word	0x40021000
 8004498:	0800b7f3 	.word	0x0800b7f3
 800449c:	20000014 	.word	0x20000014

080044a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80044a4:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a6:	6800      	ldr	r0, [r0, #0]
 80044a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80044ac:	d039      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x82>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044ae:	4d75      	ldr	r5, [pc, #468]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80044b2:	00d8      	lsls	r0, r3, #3
 80044b4:	d427      	bmi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	65ab      	str	r3, [r5, #88]	; 0x58
 80044be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80044c8:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ca:	4f6f      	ldr	r7, [pc, #444]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d4:	f7fe f9fc 	bl	80028d0 <HAL_GetTick>
 80044d8:	4680      	mov	r8, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	05d9      	lsls	r1, r3, #23
 80044de:	d514      	bpl.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80044e8:	d003      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044ec:	4293      	cmp	r3, r2
 80044ee:	f040 80a3 	bne.w	8004638 <HAL_RCCEx_PeriphCLKConfig+0x198>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80044f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004502:	2000      	movs	r0, #0
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2600      	movs	r6, #0
 8004508:	e7df      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe f9e1 	bl	80028d0 <HAL_GetTick>
 800450e:	eba0 0008 	sub.w	r0, r0, r8
 8004512:	2802      	cmp	r0, #2
 8004514:	d9e1      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = HAL_TIMEOUT;
 8004516:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	b11e      	cbz	r6, 8004522 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	07df      	lsls	r7, r3, #31
 8004526:	d508      	bpl.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004528:	4956      	ldr	r1, [pc, #344]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800452a:	6865      	ldr	r5, [r4, #4]
 800452c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004530:	f022 0203 	bic.w	r2, r2, #3
 8004534:	432a      	orrs	r2, r5
 8004536:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800453a:	079e      	lsls	r6, r3, #30
 800453c:	d508      	bpl.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453e:	4951      	ldr	r1, [pc, #324]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004540:	68a5      	ldr	r5, [r4, #8]
 8004542:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004546:	f022 020c 	bic.w	r2, r2, #12
 800454a:	432a      	orrs	r2, r5
 800454c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004550:	075d      	lsls	r5, r3, #29
 8004552:	d508      	bpl.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004554:	494b      	ldr	r1, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004556:	68e5      	ldr	r5, [r4, #12]
 8004558:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800455c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004560:	432a      	orrs	r2, r5
 8004562:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004566:	0699      	lsls	r1, r3, #26
 8004568:	d508      	bpl.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456a:	4946      	ldr	r1, [pc, #280]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800456c:	6925      	ldr	r5, [r4, #16]
 800456e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004572:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004576:	432a      	orrs	r2, r5
 8004578:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d508      	bpl.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004580:	4940      	ldr	r1, [pc, #256]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004582:	6a25      	ldr	r5, [r4, #32]
 8004584:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004588:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800458c:	432a      	orrs	r2, r5
 800458e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004592:	055f      	lsls	r7, r3, #21
 8004594:	d508      	bpl.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004596:	493b      	ldr	r1, [pc, #236]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004598:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800459a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800459e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80045a2:	432a      	orrs	r2, r5
 80045a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a8:	065e      	lsls	r6, r3, #25
 80045aa:	d508      	bpl.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ac:	4935      	ldr	r1, [pc, #212]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80045ae:	6965      	ldr	r5, [r4, #20]
 80045b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80045b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80045b8:	432a      	orrs	r2, r5
 80045ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045be:	061d      	lsls	r5, r3, #24
 80045c0:	d508      	bpl.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045c2:	4930      	ldr	r1, [pc, #192]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80045c4:	69a5      	ldr	r5, [r4, #24]
 80045c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80045ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80045ce:	432a      	orrs	r2, r5
 80045d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045d4:	05d9      	lsls	r1, r3, #23
 80045d6:	d508      	bpl.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d8:	492a      	ldr	r1, [pc, #168]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80045da:	69e5      	ldr	r5, [r4, #28]
 80045dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80045e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80045e4:	432a      	orrs	r2, r5
 80045e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ea:	049a      	lsls	r2, r3, #18
 80045ec:	d50f      	bpl.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ee:	4925      	ldr	r1, [pc, #148]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80045f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80045f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80045f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80045fa:	432a      	orrs	r2, r5
 80045fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004600:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	bf02      	ittt	eq
 8004606:	68ca      	ldreq	r2, [r1, #12]
 8004608:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 800460c:	60ca      	streq	r2, [r1, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800460e:	035b      	lsls	r3, r3, #13
 8004610:	d50f      	bpl.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004612:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004614:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004616:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800461a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800461e:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004620:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004628:	d103      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462a:	68d3      	ldr	r3, [r2, #12]
 800462c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004630:	60d3      	str	r3, [r2, #12]
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8004632:	b002      	add	sp, #8
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004638:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800463c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004648:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004654:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004656:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800465a:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465e:	f57f af48 	bpl.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8004662:	f7fe f935 	bl	80028d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800466a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004670:	079b      	lsls	r3, r3, #30
 8004672:	f53f af3e 	bmi.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fe f92b 	bl	80028d0 <HAL_GetTick>
 800467a:	1bc0      	subs	r0, r0, r7
 800467c:	4540      	cmp	r0, r8
 800467e:	d9f5      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004680:	e749      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000

0800468c <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800468c:	4a02      	ldr	r2, [pc, #8]	; (8004698 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6013      	str	r3, [r2, #0]
}
 8004696:	4770      	bx	lr
 8004698:	40021000 	.word	0x40021000

0800469c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469c:	6a03      	ldr	r3, [r0, #32]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a4:	6a03      	ldr	r3, [r0, #32]
{
 80046a6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80046b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80046ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80046be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c0:	4d12      	ldr	r5, [pc, #72]	; (800470c <TIM_OC1_SetConfig+0x70>)
 80046c2:	42a8      	cmp	r0, r5
 80046c4:	d006      	beq.n	80046d4 <TIM_OC1_SetConfig+0x38>
 80046c6:	4e12      	ldr	r6, [pc, #72]	; (8004710 <TIM_OC1_SetConfig+0x74>)
 80046c8:	42b0      	cmp	r0, r6
 80046ca:	d003      	beq.n	80046d4 <TIM_OC1_SetConfig+0x38>
 80046cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80046d0:	42b0      	cmp	r0, r6
 80046d2:	d114      	bne.n	80046fe <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046d4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80046da:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80046de:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e2:	d006      	beq.n	80046f2 <TIM_OC1_SetConfig+0x56>
 80046e4:	4d0a      	ldr	r5, [pc, #40]	; (8004710 <TIM_OC1_SetConfig+0x74>)
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	d003      	beq.n	80046f2 <TIM_OC1_SetConfig+0x56>
 80046ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046ee:	42a8      	cmp	r0, r5
 80046f0:	d105      	bne.n	80046fe <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f2:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f6:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80046fa:	4334      	orrs	r4, r6
 80046fc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004700:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004702:	684a      	ldr	r2, [r1, #4]
 8004704:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	6203      	str	r3, [r0, #32]
}
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40014000 	.word	0x40014000

08004714 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004714:	6a03      	ldr	r3, [r0, #32]
 8004716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471e:	6842      	ldr	r2, [r0, #4]
{
 8004720:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004722:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004726:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800472a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800472e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004730:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800473a:	4d0f      	ldr	r5, [pc, #60]	; (8004778 <TIM_OC3_SetConfig+0x64>)
 800473c:	42a8      	cmp	r0, r5
 800473e:	d10e      	bne.n	800475e <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004740:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004746:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004752:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004756:	4335      	orrs	r5, r6
 8004758:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800475c:	e005      	b.n	800476a <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	4d07      	ldr	r5, [pc, #28]	; (800477c <TIM_OC3_SetConfig+0x68>)
 8004760:	42a8      	cmp	r0, r5
 8004762:	d0f4      	beq.n	800474e <TIM_OC3_SetConfig+0x3a>
 8004764:	4d06      	ldr	r5, [pc, #24]	; (8004780 <TIM_OC3_SetConfig+0x6c>)
 8004766:	42a8      	cmp	r0, r5
 8004768:	d0f1      	beq.n	800474e <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800476e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004770:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	6203      	str	r3, [r0, #32]
}
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400

08004784 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004784:	6a03      	ldr	r3, [r0, #32]
 8004786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800478a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478c:	6a02      	ldr	r2, [r0, #32]
{
 800478e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004792:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80047a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	4d0a      	ldr	r5, [pc, #40]	; (80047d8 <TIM_OC4_SetConfig+0x54>)
 80047ae:	42a8      	cmp	r0, r5
 80047b0:	d007      	beq.n	80047c2 <TIM_OC4_SetConfig+0x3e>
 80047b2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80047b6:	42a8      	cmp	r0, r5
 80047b8:	d003      	beq.n	80047c2 <TIM_OC4_SetConfig+0x3e>
 80047ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047be:	42a8      	cmp	r0, r5
 80047c0:	d104      	bne.n	80047cc <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ce:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d0:	684b      	ldr	r3, [r1, #4]
 80047d2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d4:	6202      	str	r2, [r0, #32]
}
 80047d6:	bd30      	pop	{r4, r5, pc}
 80047d8:	40012c00 	.word	0x40012c00

080047dc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047dc:	6a03      	ldr	r3, [r0, #32]
 80047de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e4:	6a02      	ldr	r2, [r0, #32]
{
 80047e6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ea:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80047f6:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80047fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047fe:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	4d0b      	ldr	r5, [pc, #44]	; (8004830 <TIM_OC5_SetConfig+0x54>)
 8004804:	42a8      	cmp	r0, r5
 8004806:	d007      	beq.n	8004818 <TIM_OC5_SetConfig+0x3c>
 8004808:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800480c:	42a8      	cmp	r0, r5
 800480e:	d003      	beq.n	8004818 <TIM_OC5_SetConfig+0x3c>
 8004810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004814:	42a8      	cmp	r0, r5
 8004816:	d104      	bne.n	8004822 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004818:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800481a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800481e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004822:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004824:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004826:	684b      	ldr	r3, [r1, #4]
 8004828:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	6202      	str	r2, [r0, #32]
}
 800482c:	bd30      	pop	{r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00

08004834 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004834:	6a03      	ldr	r3, [r0, #32]
 8004836:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800483a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483c:	6a02      	ldr	r2, [r0, #32]
{
 800483e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004842:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800484e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004852:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004854:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004858:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	4d0a      	ldr	r5, [pc, #40]	; (8004888 <TIM_OC6_SetConfig+0x54>)
 800485e:	42a8      	cmp	r0, r5
 8004860:	d007      	beq.n	8004872 <TIM_OC6_SetConfig+0x3e>
 8004862:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004866:	42a8      	cmp	r0, r5
 8004868:	d003      	beq.n	8004872 <TIM_OC6_SetConfig+0x3e>
 800486a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800486e:	42a8      	cmp	r0, r5
 8004870:	d104      	bne.n	800487c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004872:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004874:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004878:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800487e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004880:	684b      	ldr	r3, [r1, #4]
 8004882:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004884:	6202      	str	r2, [r0, #32]
}
 8004886:	bd30      	pop	{r4, r5, pc}
 8004888:	40012c00 	.word	0x40012c00

0800488c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004890:	2b01      	cmp	r3, #1
 8004892:	d11f      	bne.n	80048d4 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800489a:	6803      	ldr	r3, [r0, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <HAL_TIM_Base_Start_IT+0x4c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d006      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x2c>
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x2c>
 80048b0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	4a08      	ldr	r2, [pc, #32]	; (80048dc <HAL_TIM_Base_Start_IT+0x50>)
 80048bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	2a06      	cmp	r2, #6
 80048c0:	d006      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x44>
 80048c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80048c6:	d003      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80048d0:	2000      	movs	r0, #0
}
 80048d2:	4770      	bx	lr
    return HAL_ERROR;
 80048d4:	2001      	movs	r0, #1
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048e0:	6803      	ldr	r3, [r0, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80048ea:	6a19      	ldr	r1, [r3, #32]
 80048ec:	f241 1211 	movw	r2, #4369	; 0x1111
 80048f0:	4211      	tst	r1, r2
 80048f2:	d108      	bne.n	8004906 <HAL_TIM_Base_Stop_IT+0x26>
 80048f4:	6a19      	ldr	r1, [r3, #32]
 80048f6:	f240 4244 	movw	r2, #1092	; 0x444
 80048fa:	4211      	tst	r1, r2
 80048fc:	bf02      	ittt	eq
 80048fe:	681a      	ldreq	r2, [r3, #0]
 8004900:	f022 0201 	biceq.w	r2, r2, #1
 8004904:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004906:	2301      	movs	r3, #1
 8004908:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800490c:	2000      	movs	r0, #0
 800490e:	4770      	bx	lr

08004910 <HAL_TIM_OC_DelayElapsedCallback>:
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_IC_CaptureCallback>:
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004914:	4770      	bx	lr

08004916 <TIM_DMADelayPulseCplt>:
{
 8004916:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004918:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800491a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800491c:	4282      	cmp	r2, r0
 800491e:	d10b      	bne.n	8004938 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004920:	2301      	movs	r3, #1
 8004922:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004924:	69d2      	ldr	r2, [r2, #28]
 8004926:	b90a      	cbnz	r2, 800492c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	4620      	mov	r0, r4
 800492e:	f7ff fff1 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	2300      	movs	r3, #0
 8004934:	7723      	strb	r3, [r4, #28]
}
 8004936:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800493a:	4283      	cmp	r3, r0
 800493c:	d108      	bne.n	8004950 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493e:	2202      	movs	r2, #2
 8004940:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f1      	bne.n	800492c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	2301      	movs	r3, #1
 800494a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800494e:	e7ed      	b.n	800492c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004952:	4283      	cmp	r3, r0
 8004954:	d108      	bne.n	8004968 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004956:	2204      	movs	r2, #4
 8004958:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	2301      	movs	r3, #1
 8004962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004966:	e7e1      	b.n	800492c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800496a:	4283      	cmp	r3, r0
 800496c:	d1de      	bne.n	800492c <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496e:	2208      	movs	r2, #8
 8004970:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1d9      	bne.n	800492c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	2301      	movs	r3, #1
 800497a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800497e:	e7d5      	b.n	800492c <TIM_DMADelayPulseCplt+0x16>

08004980 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8004980:	4770      	bx	lr

08004982 <TIM_DMADelayPulseHalfCplt>:
{
 8004982:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004984:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004988:	4283      	cmp	r3, r0
 800498a:	d107      	bne.n	800499c <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800498c:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff fff5 	bl	8004980 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	2300      	movs	r3, #0
 8004998:	7723      	strb	r3, [r4, #28]
}
 800499a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800499c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800499e:	4283      	cmp	r3, r0
 80049a0:	d101      	bne.n	80049a6 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e7f3      	b.n	800498e <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049a8:	4283      	cmp	r3, r0
 80049aa:	d101      	bne.n	80049b0 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ac:	2304      	movs	r3, #4
 80049ae:	e7ee      	b.n	800498e <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049b2:	4283      	cmp	r3, r0
 80049b4:	d1ec      	bne.n	8004990 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	2308      	movs	r3, #8
 80049b8:	e7e9      	b.n	800498e <TIM_DMADelayPulseHalfCplt+0xc>

080049ba <HAL_TIM_TriggerCallback>:
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049bc:	6803      	ldr	r3, [r0, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	0791      	lsls	r1, r2, #30
{
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c6:	d50f      	bpl.n	80049e8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	0792      	lsls	r2, r2, #30
 80049cc:	d50c      	bpl.n	80049e8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ce:	f06f 0202 	mvn.w	r2, #2
 80049d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d4:	2201      	movs	r2, #1
 80049d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	0799      	lsls	r1, r3, #30
 80049dc:	f000 8085 	beq.w	8004aea <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80049e0:	f7ff ff97 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e4:	2300      	movs	r3, #0
 80049e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	0752      	lsls	r2, r2, #29
 80049ee:	d510      	bpl.n	8004a12 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	0750      	lsls	r0, r2, #29
 80049f4:	d50d      	bpl.n	8004a12 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f6:	f06f 0204 	mvn.w	r2, #4
 80049fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fc:	2202      	movs	r2, #2
 80049fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	d075      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	f7ff ff82 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	0711      	lsls	r1, r2, #28
 8004a18:	d50f      	bpl.n	8004a3a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	0712      	lsls	r2, r2, #28
 8004a1e:	d50c      	bpl.n	8004a3a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a20:	f06f 0208 	mvn.w	r2, #8
 8004a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a26:	2204      	movs	r2, #4
 8004a28:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a30:	d067      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	f7ff ff6e 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	2300      	movs	r3, #0
 8004a38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	06d0      	lsls	r0, r2, #27
 8004a40:	d510      	bpl.n	8004a64 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	06d1      	lsls	r1, r2, #27
 8004a46:	d50d      	bpl.n	8004a64 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a48:	f06f 0210 	mvn.w	r2, #16
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4e:	2208      	movs	r2, #8
 8004a50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a58:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5a:	d058      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	f7ff ff59 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	2300      	movs	r3, #0
 8004a62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	07d2      	lsls	r2, r2, #31
 8004a6a:	d508      	bpl.n	8004a7e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	07d0      	lsls	r0, r2, #31
 8004a70:	d505      	bpl.n	8004a7e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a72:	f06f 0201 	mvn.w	r2, #1
 8004a76:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7fc fe89 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	0611      	lsls	r1, r2, #24
 8004a84:	d508      	bpl.n	8004a98 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	0612      	lsls	r2, r2, #24
 8004a8a:	d505      	bpl.n	8004a98 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 fcc9 	bl	800542a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	05d0      	lsls	r0, r2, #23
 8004a9e:	d508      	bpl.n	8004ab2 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	0611      	lsls	r1, r2, #24
 8004aa4:	d505      	bpl.n	8004ab2 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aaa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 fcbd 	bl	800542c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	0652      	lsls	r2, r2, #25
 8004ab8:	d508      	bpl.n	8004acc <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	0650      	lsls	r0, r2, #25
 8004abe:	d505      	bpl.n	8004acc <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7ff ff77 	bl	80049ba <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	0691      	lsls	r1, r2, #26
 8004ad2:	d522      	bpl.n	8004b1a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	0692      	lsls	r2, r2, #26
 8004ad8:	d51f      	bpl.n	8004b1a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ada:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004ade:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae0:	611a      	str	r2, [r3, #16]
}
 8004ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004ae6:	f000 bc9f 	b.w	8005428 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	f7ff ff11 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aee:	4620      	mov	r0, r4
 8004af0:	f7ff ff10 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
 8004af4:	e776      	b.n	80049e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	f7ff ff0b 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ff0a 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b00:	e785      	b.n	8004a0e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	f7ff ff05 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff ff04 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b0c:	e793      	b.n	8004a36 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	f7ff feff 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff fefe 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b18:	e7a2      	b.n	8004a60 <HAL_TIM_IRQHandler+0xa4>
}
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <HAL_TIM_ErrorCallback>:
 8004b1c:	4770      	bx	lr

08004b1e <TIM_DMAError>:
{
 8004b1e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b20:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b24:	4283      	cmp	r3, r0
 8004b26:	d109      	bne.n	8004b3c <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fff3 	bl	8004b1c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	2300      	movs	r3, #0
 8004b38:	7723      	strb	r3, [r4, #28]
}
 8004b3a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b3e:	4283      	cmp	r3, r0
 8004b40:	d105      	bne.n	8004b4e <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b42:	2302      	movs	r3, #2
 8004b44:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	2301      	movs	r3, #1
 8004b48:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b4c:	e7f0      	b.n	8004b30 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b50:	4283      	cmp	r3, r0
 8004b52:	f04f 0301 	mov.w	r3, #1
 8004b56:	d104      	bne.n	8004b62 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b58:	2204      	movs	r2, #4
 8004b5a:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b60:	e7e6      	b.n	8004b30 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b64:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b66:	bf03      	ittte	eq
 8004b68:	2208      	moveq	r2, #8
 8004b6a:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 8004b70:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8004b74:	e7dc      	b.n	8004b30 <TIM_DMAError+0x12>
	...

08004b78 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004b7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	4290      	cmp	r0, r2
{
 8004b7e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b80:	d002      	beq.n	8004b88 <TIM_Base_SetConfig+0x10>
 8004b82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b86:	d109      	bne.n	8004b9c <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8004b88:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004b90:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b94:	d009      	beq.n	8004baa <TIM_Base_SetConfig+0x32>
 8004b96:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b9a:	d006      	beq.n	8004baa <TIM_Base_SetConfig+0x32>
 8004b9c:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <TIM_Base_SetConfig+0x70>)
 8004b9e:	4290      	cmp	r0, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_Base_SetConfig+0x32>
 8004ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba6:	4290      	cmp	r0, r2
 8004ba8:	d103      	bne.n	8004bb2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb2:	694a      	ldr	r2, [r1, #20]
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004bba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bbc:	688b      	ldr	r3, [r1, #8]
 8004bbe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc4:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <TIM_Base_SetConfig+0x6c>)
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0x62>
 8004bca:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x62>
 8004bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	d101      	bne.n	8004bde <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004bde:	2301      	movs	r3, #1
 8004be0:	6143      	str	r3, [r0, #20]
}
 8004be2:	bd10      	pop	{r4, pc}
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40014000 	.word	0x40014000

08004bec <HAL_TIM_Base_Init>:
{
 8004bec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b350      	cbz	r0, 8004c48 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bfa:	b91b      	cbnz	r3, 8004c04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004bfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c00:	f7fd fc5a 	bl	80024b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	1d21      	adds	r1, r4, #4
 8004c0e:	f7ff ffb3 	bl	8004b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004c18:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c1e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c3a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004c3e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004c46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
 8004c4a:	e7fc      	b.n	8004c46 <HAL_TIM_Base_Init+0x5a>

08004c4c <HAL_TIM_OC_Init>:
{
 8004c4c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004c4e:	4604      	mov	r4, r0
 8004c50:	b350      	cbz	r0, 8004ca8 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c5a:	b91b      	cbnz	r3, 8004c64 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004c5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004c60:	f7fd fbca 	bl	80023f8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c66:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c6c:	1d21      	adds	r1, r4, #4
 8004c6e:	f7ff ff83 	bl	8004b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004c78:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004c9e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004ca6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ca8:	2001      	movs	r0, #1
 8004caa:	e7fc      	b.n	8004ca6 <HAL_TIM_OC_Init+0x5a>

08004cac <HAL_TIM_PWM_Init>:
{
 8004cac:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004cae:	4604      	mov	r4, r0
 8004cb0:	b350      	cbz	r0, 8004d08 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cba:	b91b      	cbnz	r3, 8004cc4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004cbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004cc0:	f7fd fb7a 	bl	80023b8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	1d21      	adds	r1, r4, #4
 8004cce:	f7ff ff53 	bl	8004b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004cd8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004cde:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ce2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004ce6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cfa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004cfe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004d02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004d06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e7fc      	b.n	8004d06 <HAL_TIM_PWM_Init+0x5a>

08004d0c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0c:	6a03      	ldr	r3, [r0, #32]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d16:	6842      	ldr	r2, [r0, #4]
{
 8004d18:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8004d1a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d1e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004d22:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d26:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004d2c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d34:	4d0e      	ldr	r5, [pc, #56]	; (8004d70 <TIM_OC2_SetConfig+0x64>)
 8004d36:	42a8      	cmp	r0, r5
 8004d38:	d10e      	bne.n	8004d58 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	4335      	orrs	r5, r6
 8004d52:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004d56:	e005      	b.n	8004d64 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d58:	4d06      	ldr	r5, [pc, #24]	; (8004d74 <TIM_OC2_SetConfig+0x68>)
 8004d5a:	42a8      	cmp	r0, r5
 8004d5c:	d0f4      	beq.n	8004d48 <TIM_OC2_SetConfig+0x3c>
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <TIM_OC2_SetConfig+0x6c>)
 8004d60:	42a8      	cmp	r0, r5
 8004d62:	d0f1      	beq.n	8004d48 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8004d64:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004d66:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d68:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004d6c:	6203      	str	r3, [r0, #32]
}
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400

08004d7c <HAL_TIM_OC_ConfigChannel>:
{
 8004d7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004d7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
{
 8004d84:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004d86:	d02b      	beq.n	8004de0 <HAL_TIM_OC_ConfigChannel+0x64>
 8004d88:	2001      	movs	r0, #1
  switch (Channel)
 8004d8a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004d8c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004d90:	d01e      	beq.n	8004dd0 <HAL_TIM_OC_ConfigChannel+0x54>
 8004d92:	d808      	bhi.n	8004da6 <HAL_TIM_OC_ConfigChannel+0x2a>
 8004d94:	2a04      	cmp	r2, #4
 8004d96:	d013      	beq.n	8004dc0 <HAL_TIM_OC_ConfigChannel+0x44>
 8004d98:	2a08      	cmp	r2, #8
 8004d9a:	d015      	beq.n	8004dc8 <HAL_TIM_OC_ConfigChannel+0x4c>
 8004d9c:	b15a      	cbz	r2, 8004db6 <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004da4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004da6:	2a10      	cmp	r2, #16
 8004da8:	d016      	beq.n	8004dd8 <HAL_TIM_OC_ConfigChannel+0x5c>
 8004daa:	2a14      	cmp	r2, #20
 8004dac:	d1f7      	bne.n	8004d9e <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dae:	6828      	ldr	r0, [r5, #0]
 8004db0:	f7ff fd40 	bl	8004834 <TIM_OC6_SetConfig>
 8004db4:	e002      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db6:	6828      	ldr	r0, [r5, #0]
 8004db8:	f7ff fc70 	bl	800469c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2000      	movs	r0, #0
      break;
 8004dbe:	e7ee      	b.n	8004d9e <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc0:	6828      	ldr	r0, [r5, #0]
 8004dc2:	f7ff ffa3 	bl	8004d0c <TIM_OC2_SetConfig>
      break;
 8004dc6:	e7f9      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dc8:	6828      	ldr	r0, [r5, #0]
 8004dca:	f7ff fca3 	bl	8004714 <TIM_OC3_SetConfig>
      break;
 8004dce:	e7f5      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dd0:	6828      	ldr	r0, [r5, #0]
 8004dd2:	f7ff fcd7 	bl	8004784 <TIM_OC4_SetConfig>
      break;
 8004dd6:	e7f1      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dd8:	6828      	ldr	r0, [r5, #0]
 8004dda:	f7ff fcff 	bl	80047dc <TIM_OC5_SetConfig>
      break;
 8004dde:	e7ed      	b.n	8004dbc <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8004de0:	2002      	movs	r0, #2
 8004de2:	e7df      	b.n	8004da4 <HAL_TIM_OC_ConfigChannel+0x28>

08004de4 <HAL_TIM_PWM_ConfigChannel>:
{
 8004de4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004de6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
{
 8004dec:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004dee:	d079      	beq.n	8004ee4 <HAL_TIM_PWM_ConfigChannel+0x100>
 8004df0:	2001      	movs	r0, #1
  switch (Channel)
 8004df2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8004df4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004df8:	d052      	beq.n	8004ea0 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004dfa:	d808      	bhi.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004dfc:	2a04      	cmp	r2, #4
 8004dfe:	d02d      	beq.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x78>
 8004e00:	2a08      	cmp	r2, #8
 8004e02:	d03c      	beq.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x9a>
 8004e04:	b1c2      	cbz	r2, 8004e38 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 8004e06:	2300      	movs	r3, #0
 8004e08:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004e0e:	2a10      	cmp	r2, #16
 8004e10:	d057      	beq.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004e12:	2a14      	cmp	r2, #20
 8004e14:	d1f7      	bne.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e16:	6828      	ldr	r0, [r5, #0]
 8004e18:	f7ff fd0c 	bl	8004834 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e1c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e1e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004e36:	e053      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	6828      	ldr	r0, [r5, #0]
 8004e3a:	f7ff fc2f 	bl	800469c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e3e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e40:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	f042 0208 	orr.w	r2, r2, #8
 8004e48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f022 0204 	bic.w	r2, r2, #4
 8004e50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e56:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2000      	movs	r0, #0
      break;
 8004e5a:	e7d4      	b.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e5c:	6828      	ldr	r0, [r5, #0]
 8004e5e:	f7ff ff55 	bl	8004d0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e62:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e64:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004e7c:	e7eb      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7e:	6828      	ldr	r0, [r5, #0]
 8004e80:	f7ff fc48 	bl	8004714 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e84:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	f022 0204 	bic.w	r2, r2, #4
 8004e96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9c:	61da      	str	r2, [r3, #28]
      break;
 8004e9e:	e7db      	b.n	8004e58 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea0:	6828      	ldr	r0, [r5, #0]
 8004ea2:	f7ff fc6f 	bl	8004784 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ea8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ec0:	e7ec      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ec2:	6828      	ldr	r0, [r5, #0]
 8004ec4:	f7ff fc8a 	bl	80047dc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ec8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ede:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8004ee2:	e7b9      	b.n	8004e58 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8004ee4:	2002      	movs	r0, #2
 8004ee6:	e791      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x28>

08004ee8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eea:	f001 011f 	and.w	r1, r1, #31
{
 8004eee:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ef0:	2401      	movs	r4, #1
 8004ef2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004ef4:	ea23 0304 	bic.w	r3, r3, r4
 8004ef8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004efa:	6a03      	ldr	r3, [r0, #32]
 8004efc:	408a      	lsls	r2, r1
 8004efe:	431a      	orrs	r2, r3
 8004f00:	6202      	str	r2, [r0, #32]
}
 8004f02:	bd10      	pop	{r4, pc}

08004f04 <HAL_TIM_OC_Start>:
{
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f08:	b929      	cbnz	r1, 8004f16 <HAL_TIM_OC_Start+0x12>
 8004f0a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d027      	beq.n	8004f62 <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
 8004f14:	e043      	b.n	8004f9e <HAL_TIM_OC_Start+0x9a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	2904      	cmp	r1, #4
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_OC_Start+0x26>
 8004f1a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d1f7      	bne.n	8004f12 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	2302      	movs	r3, #2
 8004f24:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004f28:	e01e      	b.n	8004f68 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f2a:	2908      	cmp	r1, #8
 8004f2c:	d10d      	bne.n	8004f4a <HAL_TIM_OC_Start+0x46>
 8004f2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f32:	3b01      	subs	r3, #1
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ea      	bne.n	8004f12 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3c:	2908      	cmp	r1, #8
 8004f3e:	f04f 0302 	mov.w	r3, #2
 8004f42:	d12d      	bne.n	8004fa0 <HAL_TIM_OC_Start+0x9c>
 8004f44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f48:	e00e      	b.n	8004f68 <HAL_TIM_OC_Start+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f4a:	290c      	cmp	r1, #12
 8004f4c:	d102      	bne.n	8004f54 <HAL_TIM_OC_Start+0x50>
 8004f4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f52:	e7ee      	b.n	8004f32 <HAL_TIM_OC_Start+0x2e>
 8004f54:	2910      	cmp	r1, #16
 8004f56:	bf0c      	ite	eq
 8004f58:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8004f5c:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8004f60:	e7e7      	b.n	8004f32 <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f62:	2302      	movs	r3, #2
 8004f64:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f7ff ffbc 	bl	8004ee8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	491a      	ldr	r1, [pc, #104]	; (8004fdc <HAL_TIM_OC_Start+0xd8>)
 8004f74:	428b      	cmp	r3, r1
 8004f76:	d006      	beq.n	8004f86 <HAL_TIM_OC_Start+0x82>
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <HAL_TIM_OC_Start+0xdc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_OC_Start+0x82>
 8004f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d127      	bne.n	8004fd6 <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_MOE_ENABLE(htim);
 8004f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	428b      	cmp	r3, r1
    __HAL_TIM_MOE_ENABLE(htim);
 8004f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f90:	d112      	bne.n	8004fb8 <HAL_TIM_OC_Start+0xb4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f92:	6899      	ldr	r1, [r3, #8]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_TIM_OC_Start+0xe0>)
 8004f96:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	2a06      	cmp	r2, #6
 8004f9a:	d114      	bne.n	8004fc6 <HAL_TIM_OC_Start+0xc2>
  return HAL_OK;
 8004f9c:	2000      	movs	r0, #0
}
 8004f9e:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa0:	290c      	cmp	r1, #12
 8004fa2:	d102      	bne.n	8004faa <HAL_TIM_OC_Start+0xa6>
 8004fa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004fa8:	e7de      	b.n	8004f68 <HAL_TIM_OC_Start+0x64>
 8004faa:	2910      	cmp	r1, #16
 8004fac:	bf0c      	ite	eq
 8004fae:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8004fb2:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8004fb6:	e7d7      	b.n	8004f68 <HAL_TIM_OC_Start+0x64>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d0e9      	beq.n	8004f92 <HAL_TIM_OC_Start+0x8e>
 8004fbe:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <HAL_TIM_OC_Start+0xdc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <HAL_TIM_OC_Start+0xc8>
 8004fc4:	e7e5      	b.n	8004f92 <HAL_TIM_OC_Start+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004fca:	d0e7      	beq.n	8004f9c <HAL_TIM_OC_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e7e2      	b.n	8004f9c <HAL_TIM_OC_Start+0x98>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	e7f2      	b.n	8004fc2 <HAL_TIM_OC_Start+0xbe>
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	00010007 	.word	0x00010007

08004fe8 <HAL_TIM_PWM_Start>:
 8004fe8:	f7ff bf8c 	b.w	8004f04 <HAL_TIM_OC_Start>

08004fec <HAL_TIM_OC_Stop>:
{
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	6800      	ldr	r0, [r0, #0]
{
 8004ff4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ff6:	f7ff ff77 	bl	8004ee8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	4a21      	ldr	r2, [pc, #132]	; (8005084 <HAL_TIM_OC_Stop+0x98>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <HAL_TIM_OC_Stop+0x26>
 8005002:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <HAL_TIM_OC_Stop+0x26>
 800500a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <HAL_TIM_OC_Stop+0x42>
    __HAL_TIM_MOE_DISABLE(htim);
 8005012:	6a19      	ldr	r1, [r3, #32]
 8005014:	f241 1211 	movw	r2, #4369	; 0x1111
 8005018:	4211      	tst	r1, r2
 800501a:	d108      	bne.n	800502e <HAL_TIM_OC_Stop+0x42>
 800501c:	6a19      	ldr	r1, [r3, #32]
 800501e:	f240 4244 	movw	r2, #1092	; 0x444
 8005022:	4211      	tst	r1, r2
 8005024:	bf02      	ittt	eq
 8005026:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8005028:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800502c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800502e:	6a19      	ldr	r1, [r3, #32]
 8005030:	f241 1211 	movw	r2, #4369	; 0x1111
 8005034:	4211      	tst	r1, r2
 8005036:	d108      	bne.n	800504a <HAL_TIM_OC_Stop+0x5e>
 8005038:	6a19      	ldr	r1, [r3, #32]
 800503a:	f240 4244 	movw	r2, #1092	; 0x444
 800503e:	4211      	tst	r1, r2
 8005040:	bf02      	ittt	eq
 8005042:	681a      	ldreq	r2, [r3, #0]
 8005044:	f022 0201 	biceq.w	r2, r2, #1
 8005048:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	2301      	movs	r3, #1
 800504c:	b91d      	cbnz	r5, 8005056 <HAL_TIM_OC_Stop+0x6a>
 800504e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005052:	2000      	movs	r0, #0
 8005054:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	2d04      	cmp	r5, #4
 8005058:	d102      	bne.n	8005060 <HAL_TIM_OC_Stop+0x74>
 800505a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800505e:	e7f8      	b.n	8005052 <HAL_TIM_OC_Stop+0x66>
 8005060:	2d08      	cmp	r5, #8
 8005062:	d102      	bne.n	800506a <HAL_TIM_OC_Stop+0x7e>
 8005064:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005068:	e7f3      	b.n	8005052 <HAL_TIM_OC_Stop+0x66>
 800506a:	2d0c      	cmp	r5, #12
 800506c:	d102      	bne.n	8005074 <HAL_TIM_OC_Stop+0x88>
 800506e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005072:	e7ee      	b.n	8005052 <HAL_TIM_OC_Stop+0x66>
 8005074:	2d10      	cmp	r5, #16
 8005076:	bf0c      	ite	eq
 8005078:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 800507c:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
 8005080:	e7e7      	b.n	8005052 <HAL_TIM_OC_Stop+0x66>
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00

08005088 <HAL_TIM_PWM_Stop>:
 8005088:	f7ff bfb0 	b.w	8004fec <HAL_TIM_OC_Stop>

0800508c <HAL_TIM_OC_Start_DMA>:
{
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	460d      	mov	r5, r1
 8005090:	4604      	mov	r4, r0
 8005092:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005094:	b955      	cbnz	r5, 80050ac <HAL_TIM_OC_Start_DMA+0x20>
 8005096:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800509a:	f1a0 0c02 	sub.w	ip, r0, #2
 800509e:	f1dc 0000 	rsbs	r0, ip, #0
 80050a2:	eb40 000c 	adc.w	r0, r0, ip
 80050a6:	b1c0      	cbz	r0, 80050da <HAL_TIM_OC_Start_DMA+0x4e>
    return HAL_BUSY;
 80050a8:	2002      	movs	r0, #2
 80050aa:	e01e      	b.n	80050ea <HAL_TIM_OC_Start_DMA+0x5e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80050ac:	2d04      	cmp	r5, #4
 80050ae:	d102      	bne.n	80050b6 <HAL_TIM_OC_Start_DMA+0x2a>
 80050b0:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80050b4:	e7f1      	b.n	800509a <HAL_TIM_OC_Start_DMA+0xe>
 80050b6:	2d08      	cmp	r5, #8
 80050b8:	d102      	bne.n	80050c0 <HAL_TIM_OC_Start_DMA+0x34>
 80050ba:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80050be:	e7ec      	b.n	800509a <HAL_TIM_OC_Start_DMA+0xe>
 80050c0:	2d0c      	cmp	r5, #12
 80050c2:	d102      	bne.n	80050ca <HAL_TIM_OC_Start_DMA+0x3e>
 80050c4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80050c8:	e7e7      	b.n	800509a <HAL_TIM_OC_Start_DMA+0xe>
 80050ca:	2d10      	cmp	r5, #16
 80050cc:	d102      	bne.n	80050d4 <HAL_TIM_OC_Start_DMA+0x48>
 80050ce:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 80050d2:	e7e2      	b.n	800509a <HAL_TIM_OC_Start_DMA+0xe>
 80050d4:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 80050d8:	e7df      	b.n	800509a <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80050da:	b93d      	cbnz	r5, 80050ec <HAL_TIM_OC_Start_DMA+0x60>
 80050dc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80050e0:	1e50      	subs	r0, r2, #1
 80050e2:	4242      	negs	r2, r0
 80050e4:	4142      	adcs	r2, r0
 80050e6:	b9c2      	cbnz	r2, 800511a <HAL_TIM_OC_Start_DMA+0x8e>
      status = HAL_ERROR;
 80050e8:	2001      	movs	r0, #1
}
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80050ec:	2d04      	cmp	r5, #4
 80050ee:	d102      	bne.n	80050f6 <HAL_TIM_OC_Start_DMA+0x6a>
 80050f0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80050f4:	e7f4      	b.n	80050e0 <HAL_TIM_OC_Start_DMA+0x54>
 80050f6:	2d08      	cmp	r5, #8
 80050f8:	d102      	bne.n	8005100 <HAL_TIM_OC_Start_DMA+0x74>
 80050fa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80050fe:	e7ef      	b.n	80050e0 <HAL_TIM_OC_Start_DMA+0x54>
 8005100:	2d0c      	cmp	r5, #12
 8005102:	d102      	bne.n	800510a <HAL_TIM_OC_Start_DMA+0x7e>
 8005104:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005108:	e7ea      	b.n	80050e0 <HAL_TIM_OC_Start_DMA+0x54>
 800510a:	2d10      	cmp	r5, #16
 800510c:	bf0c      	ite	eq
 800510e:	f894 2042 	ldrbeq.w	r2, [r4, #66]	; 0x42
 8005112:	f894 2043 	ldrbne.w	r2, [r4, #67]	; 0x43
 8005116:	2a01      	cmp	r2, #1
 8005118:	d1e6      	bne.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
    if ((pData == NULL) || (Length == 0U))
 800511a:	2900      	cmp	r1, #0
 800511c:	d0e4      	beq.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0e2      	beq.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	2202      	movs	r2, #2
 8005124:	2d00      	cmp	r5, #0
 8005126:	d130      	bne.n	800518a <HAL_TIM_OC_Start_DMA+0xfe>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005128:	6a60      	ldr	r0, [r4, #36]	; 0x24
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800512e:	4a45      	ldr	r2, [pc, #276]	; (8005244 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8005130:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005132:	4a45      	ldr	r2, [pc, #276]	; (8005248 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8005134:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005136:	4a45      	ldr	r2, [pc, #276]	; (800524c <HAL_TIM_OC_Start_DMA+0x1c0>)
 8005138:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	3234      	adds	r2, #52	; 0x34
 800513e:	f7fe fa1f 	bl	8003580 <HAL_DMA_Start_IT>
 8005142:	2800      	cmp	r0, #0
 8005144:	d1d0      	bne.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	68d3      	ldr	r3, [r2, #12]
 800514a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800514e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005150:	4629      	mov	r1, r5
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	f7ff fec7 	bl	8004ee8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	493c      	ldr	r1, [pc, #240]	; (8005250 <HAL_TIM_OC_Start_DMA+0x1c4>)
 800515e:	428b      	cmp	r3, r1
 8005160:	d006      	beq.n	8005170 <HAL_TIM_OC_Start_DMA+0xe4>
 8005162:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <HAL_TIM_OC_Start_DMA+0xe4>
 8005168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800516c:	4293      	cmp	r3, r2
 800516e:	d166      	bne.n	800523e <HAL_TIM_OC_Start_DMA+0x1b2>
      __HAL_TIM_MOE_ENABLE(htim);
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005172:	428b      	cmp	r3, r1
      __HAL_TIM_MOE_ENABLE(htim);
 8005174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	d151      	bne.n	8005220 <HAL_TIM_OC_Start_DMA+0x194>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	4a36      	ldr	r2, [pc, #216]	; (8005258 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8005180:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	2a06      	cmp	r2, #6
 8005184:	d153      	bne.n	800522e <HAL_TIM_OC_Start_DMA+0x1a2>
 8005186:	2000      	movs	r0, #0
 8005188:	e7af      	b.n	80050ea <HAL_TIM_OC_Start_DMA+0x5e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	2d04      	cmp	r5, #4
 800518c:	d113      	bne.n	80051b6 <HAL_TIM_OC_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800518e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005190:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005194:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8005196:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005198:	4a2b      	ldr	r2, [pc, #172]	; (8005248 <HAL_TIM_OC_Start_DMA+0x1bc>)
 800519a:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <HAL_TIM_OC_Start_DMA+0x1c0>)
 800519e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	3238      	adds	r2, #56	; 0x38
 80051a4:	f7fe f9ec 	bl	8003580 <HAL_DMA_Start_IT>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d19d      	bne.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	68d3      	ldr	r3, [r2, #12]
 80051b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b4:	e7cb      	b.n	800514e <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b6:	2d08      	cmp	r5, #8
 80051b8:	d113      	bne.n	80051e2 <HAL_TIM_OC_Start_DMA+0x156>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051bc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051c0:	4a20      	ldr	r2, [pc, #128]	; (8005244 <HAL_TIM_OC_Start_DMA+0x1b8>)
 80051c2:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <HAL_TIM_OC_Start_DMA+0x1bc>)
 80051c6:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <HAL_TIM_OC_Start_DMA+0x1c0>)
 80051ca:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	323c      	adds	r2, #60	; 0x3c
 80051d0:	f7fe f9d6 	bl	8003580 <HAL_DMA_Start_IT>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d187      	bne.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	68d3      	ldr	r3, [r2, #12]
 80051dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051e0:	e7b5      	b.n	800514e <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	2d0c      	cmp	r5, #12
 80051e4:	d114      	bne.n	8005210 <HAL_TIM_OC_Start_DMA+0x184>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <HAL_TIM_OC_Start_DMA+0x1b8>)
 80051ee:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <HAL_TIM_OC_Start_DMA+0x1bc>)
 80051f2:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <HAL_TIM_OC_Start_DMA+0x1c0>)
 80051f6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	3240      	adds	r2, #64	; 0x40
 80051fc:	f7fe f9c0 	bl	8003580 <HAL_DMA_Start_IT>
 8005200:	2800      	cmp	r0, #0
 8005202:	f47f af71 	bne.w	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	68d3      	ldr	r3, [r2, #12]
 800520a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800520e:	e79e      	b.n	800514e <HAL_TIM_OC_Start_DMA+0xc2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005210:	2d10      	cmp	r5, #16
 8005212:	d102      	bne.n	800521a <HAL_TIM_OC_Start_DMA+0x18e>
 8005214:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005218:	e766      	b.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
 800521a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  switch (Channel)
 800521e:	e763      	b.n	80050e8 <HAL_TIM_OC_Start_DMA+0x5c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d0aa      	beq.n	800517c <HAL_TIM_OC_Start_DMA+0xf0>
 8005226:	4a0b      	ldr	r2, [pc, #44]	; (8005254 <HAL_TIM_OC_Start_DMA+0x1c8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <HAL_TIM_OC_Start_DMA+0x1a8>
 800522c:	e7a6      	b.n	800517c <HAL_TIM_OC_Start_DMA+0xf0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005232:	d0a8      	beq.n	8005186 <HAL_TIM_OC_Start_DMA+0xfa>
      __HAL_TIM_ENABLE(htim);
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e7a3      	b.n	8005186 <HAL_TIM_OC_Start_DMA+0xfa>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005242:	e7f2      	b.n	800522a <HAL_TIM_OC_Start_DMA+0x19e>
 8005244:	08004917 	.word	0x08004917
 8005248:	08004983 	.word	0x08004983
 800524c:	08004b1f 	.word	0x08004b1f
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40014000 	.word	0x40014000
 8005258:	00010007 	.word	0x00010007

0800525c <HAL_TIM_OC_Stop_DMA>:
  switch (Channel)
 800525c:	2908      	cmp	r1, #8
{
 800525e:	b538      	push	{r3, r4, r5, lr}
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
  switch (Channel)
 8005264:	d050      	beq.n	8005308 <HAL_TIM_OC_Stop_DMA+0xac>
 8005266:	d804      	bhi.n	8005272 <HAL_TIM_OC_Stop_DMA+0x16>
 8005268:	b161      	cbz	r1, 8005284 <HAL_TIM_OC_Stop_DMA+0x28>
 800526a:	2904      	cmp	r1, #4
 800526c:	d045      	beq.n	80052fa <HAL_TIM_OC_Stop_DMA+0x9e>
 800526e:	2001      	movs	r0, #1
}
 8005270:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005272:	290c      	cmp	r1, #12
 8005274:	d1fb      	bne.n	800526e <HAL_TIM_OC_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005276:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005278:	6b00      	ldr	r0, [r0, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800527a:	68d3      	ldr	r3, [r2, #12]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005282:	e005      	b.n	8005290 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005284:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005286:	6a40      	ldr	r0, [r0, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005288:	68d3      	ldr	r3, [r2, #12]
 800528a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800528e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005290:	f7fe f9d8 	bl	8003644 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005294:	2200      	movs	r2, #0
 8005296:	6828      	ldr	r0, [r5, #0]
 8005298:	4621      	mov	r1, r4
 800529a:	f7ff fe25 	bl	8004ee8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_TIM_OC_Stop_DMA+0xe8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <HAL_TIM_OC_Stop_DMA+0x5a>
 80052a6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_OC_Stop_DMA+0x5a>
 80052ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10d      	bne.n	80052d2 <HAL_TIM_OC_Stop_DMA+0x76>
      __HAL_TIM_MOE_DISABLE(htim);
 80052b6:	6a19      	ldr	r1, [r3, #32]
 80052b8:	f241 1211 	movw	r2, #4369	; 0x1111
 80052bc:	4211      	tst	r1, r2
 80052be:	d108      	bne.n	80052d2 <HAL_TIM_OC_Stop_DMA+0x76>
 80052c0:	6a19      	ldr	r1, [r3, #32]
 80052c2:	f240 4244 	movw	r2, #1092	; 0x444
 80052c6:	4211      	tst	r1, r2
 80052c8:	bf02      	ittt	eq
 80052ca:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80052cc:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80052d0:	645a      	streq	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 80052d2:	6a19      	ldr	r1, [r3, #32]
 80052d4:	f241 1211 	movw	r2, #4369	; 0x1111
 80052d8:	4211      	tst	r1, r2
 80052da:	d108      	bne.n	80052ee <HAL_TIM_OC_Stop_DMA+0x92>
 80052dc:	6a19      	ldr	r1, [r3, #32]
 80052de:	f240 4244 	movw	r2, #1092	; 0x444
 80052e2:	4211      	tst	r1, r2
 80052e4:	bf02      	ittt	eq
 80052e6:	681a      	ldreq	r2, [r3, #0]
 80052e8:	f022 0201 	biceq.w	r2, r2, #1
 80052ec:	601a      	streq	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	2301      	movs	r3, #1
 80052f0:	b98c      	cbnz	r4, 8005316 <HAL_TIM_OC_Stop_DMA+0xba>
 80052f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80052f6:	2000      	movs	r0, #0
 80052f8:	e7ba      	b.n	8005270 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80052fa:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80052fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80052fe:	68d3      	ldr	r3, [r2, #12]
 8005300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005304:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005306:	e7c3      	b.n	8005290 <HAL_TIM_OC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005308:	6802      	ldr	r2, [r0, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800530a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800530c:	68d3      	ldr	r3, [r2, #12]
 800530e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005312:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005314:	e7bc      	b.n	8005290 <HAL_TIM_OC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	2c04      	cmp	r4, #4
 8005318:	d102      	bne.n	8005320 <HAL_TIM_OC_Stop_DMA+0xc4>
 800531a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800531e:	e7ea      	b.n	80052f6 <HAL_TIM_OC_Stop_DMA+0x9a>
 8005320:	2c08      	cmp	r4, #8
 8005322:	d102      	bne.n	800532a <HAL_TIM_OC_Stop_DMA+0xce>
 8005324:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005328:	e7e5      	b.n	80052f6 <HAL_TIM_OC_Stop_DMA+0x9a>
 800532a:	2c0c      	cmp	r4, #12
 800532c:	d102      	bne.n	8005334 <HAL_TIM_OC_Stop_DMA+0xd8>
 800532e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8005332:	e7e0      	b.n	80052f6 <HAL_TIM_OC_Stop_DMA+0x9a>
 8005334:	2c10      	cmp	r4, #16
 8005336:	bf0c      	ite	eq
 8005338:	f885 3042 	strbeq.w	r3, [r5, #66]	; 0x42
 800533c:	f885 3043 	strbne.w	r3, [r5, #67]	; 0x43
 8005340:	e7d9      	b.n	80052f6 <HAL_TIM_OC_Stop_DMA+0x9a>
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	f04f 0302 	mov.w	r3, #2
 8005354:	d023      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005356:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005358:	4d12      	ldr	r5, [pc, #72]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800535a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800535e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005360:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005362:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005364:	bf02      	ittt	eq
 8005366:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005368:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800536c:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536e:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005374:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8005378:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	d005      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800537c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005380:	d002      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005384:	429a      	cmp	r2, r3
 8005386:	d104      	bne.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005388:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538a:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005390:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005392:	2301      	movs	r3, #1
 8005394:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005398:	2300      	movs	r3, #0
 800539a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800539e:	4618      	mov	r0, r3

  return HAL_OK;
}
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40014000 	.word	0x40014000

080053ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053ac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d034      	beq.n	8005420 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053b6:	68cb      	ldr	r3, [r1, #12]
 80053b8:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053ba:	4c1a      	ldr	r4, [pc, #104]	; (8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053c2:	684a      	ldr	r2, [r1, #4]
 80053c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ca:	680a      	ldr	r2, [r1, #0]
 80053cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053d2:	690a      	ldr	r2, [r1, #16]
 80053d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053da:	694a      	ldr	r2, [r1, #20]
 80053dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80053e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053ea:	698a      	ldr	r2, [r1, #24]
 80053ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80053f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053f4:	6802      	ldr	r2, [r0, #0]
 80053f6:	42a2      	cmp	r2, r4
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053fa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80053fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005400:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005404:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005406:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800540e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005412:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005414:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005416:	2300      	movs	r3, #0
 8005418:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800541c:	4618      	mov	r0, r3
}
 800541e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005420:	2002      	movs	r0, #2
 8005422:	e7fc      	b.n	800541e <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8005424:	40012c00 	.word	0x40012c00

08005428 <HAL_TIMEx_CommutCallback>:
 8005428:	4770      	bx	lr

0800542a <HAL_TIMEx_BreakCallback>:
 800542a:	4770      	bx	lr

0800542c <HAL_TIMEx_Break2Callback>:
 800542c:	4770      	bx	lr

0800542e <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	e852 3f00 	ldrex	r3, [r2]
 8005434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800543c:	6802      	ldr	r2, [r0, #0]
 800543e:	2900      	cmp	r1, #0
 8005440:	d1f5      	bne.n	800542e <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	f102 0308 	add.w	r3, r2, #8
 8005446:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	f102 0c08 	add.w	ip, r2, #8
 8005452:	e84c 3100 	strex	r1, r3, [ip]
 8005456:	2900      	cmp	r1, #0
 8005458:	d1f3      	bne.n	8005442 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	e842 3100 	strex	r1, r3, [r2]
 800546c:	2900      	cmp	r1, #0
 800546e:	d1f7      	bne.n	8005460 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	2320      	movs	r3, #32
 8005472:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	2300      	movs	r3, #0
 8005476:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005478:	6643      	str	r3, [r0, #100]	; 0x64
}
 800547a:	4770      	bx	lr

0800547c <HAL_UART_TxCpltCallback>:
 800547c:	4770      	bx	lr

0800547e <HAL_UART_ErrorCallback>:
 800547e:	4770      	bx	lr

08005480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005480:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005482:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800548a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800548e:	f7ff fff6 	bl	800547e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005492:	bd08      	pop	{r3, pc}

08005494 <HAL_UART_AbortReceiveCpltCallback>:
 8005494:	4770      	bx	lr
	...

08005498 <HAL_UART_AbortReceive_IT>:
{
 8005498:	b510      	push	{r4, lr}
 800549a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	e852 3f00 	ldrex	r3, [r2]
 80054a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d1f5      	bne.n	800549c <HAL_UART_AbortReceive_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	f103 0208 	add.w	r2, r3, #8
 80054b4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	f103 0008 	add.w	r0, r3, #8
 80054c0:	e840 2100 	strex	r1, r2, [r0]
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d1f3      	bne.n	80054b0 <HAL_UART_AbortReceive_IT+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054ca:	2a01      	cmp	r2, #1
 80054cc:	d107      	bne.n	80054de <HAL_UART_AbortReceive_IT+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80054d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	e843 2100 	strex	r1, r2, [r3]
 80054da:	2900      	cmp	r1, #0
 80054dc:	d1f7      	bne.n	80054ce <HAL_UART_AbortReceive_IT+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80054e4:	d028      	beq.n	8005538 <HAL_UART_AbortReceive_IT+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	f103 0208 	add.w	r2, r3, #8
 80054ea:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	f103 0008 	add.w	r0, r3, #8
 80054f6:	e840 2100 	strex	r1, r2, [r0]
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d1f3      	bne.n	80054e6 <HAL_UART_AbortReceive_IT+0x4e>
    if (huart->hdmarx != NULL)
 80054fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005500:	b148      	cbz	r0, 8005516 <HAL_UART_AbortReceive_IT+0x7e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_UART_AbortReceive_IT+0xb4>)
 8005504:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005506:	f7fe f89d 	bl	8003644 <HAL_DMA_Abort_IT>
 800550a:	b110      	cbz	r0, 8005512 <HAL_UART_AbortReceive_IT+0x7a>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800550c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800550e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005510:	4798      	blx	r3
}
 8005512:	2000      	movs	r0, #0
 8005514:	bd10      	pop	{r4, pc}
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005516:	220f      	movs	r2, #15
      huart->RxXferCount = 0U;
 8005518:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 800551c:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800551e:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005520:	8b1a      	ldrh	r2, [r3, #24]
 8005522:	b292      	uxth	r2, r2
 8005524:	f042 0208 	orr.w	r2, r2, #8
 8005528:	831a      	strh	r2, [r3, #24]
      huart->RxState = HAL_UART_STATE_READY;
 800552a:	2320      	movs	r3, #32
 800552c:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	6620      	str	r0, [r4, #96]	; 0x60
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005530:	4620      	mov	r0, r4
 8005532:	f7ff ffaf 	bl	8005494 <HAL_UART_AbortReceiveCpltCallback>
 8005536:	e7ec      	b.n	8005512 <HAL_UART_AbortReceive_IT+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005538:	210f      	movs	r1, #15
    huart->RxXferCount = 0U;
 800553a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 800553e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005540:	6219      	str	r1, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8005542:	2320      	movs	r3, #32
 8005544:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005546:	6622      	str	r2, [r4, #96]	; 0x60
 8005548:	e7f2      	b.n	8005530 <HAL_UART_AbortReceive_IT+0x98>
 800554a:	bf00      	nop
 800554c:	08005551 	.word	0x08005551

08005550 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005550:	6a80      	ldr	r0, [r0, #40]	; 0x28

  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005552:	6802      	ldr	r2, [r0, #0]
{
 8005554:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8005556:	2100      	movs	r1, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005558:	230f      	movs	r3, #15
  huart->RxXferCount = 0U;
 800555a:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800555e:	6213      	str	r3, [r2, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005560:	8b13      	ldrh	r3, [r2, #24]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	8313      	strh	r3, [r2, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556a:	2320      	movs	r3, #32
 800556c:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005570:	f7ff ff90 	bl	8005494 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005574:	bd08      	pop	{r3, pc}

08005576 <HAL_UARTEx_RxEventCallback>:
}
 8005576:	4770      	bx	lr

08005578 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005578:	6803      	ldr	r3, [r0, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800557c:	6819      	ldr	r1, [r3, #0]
{
 800557e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8005580:	f640 060f 	movw	r6, #2063	; 0x80f
 8005584:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005586:	689d      	ldr	r5, [r3, #8]
{
 8005588:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800558a:	d10b      	bne.n	80055a4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800558c:	0696      	lsls	r6, r2, #26
 800558e:	f140 8088 	bpl.w	80056a2 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005592:	068e      	lsls	r6, r1, #26
 8005594:	f140 8085 	bpl.w	80056a2 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8005598:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d07b      	beq.n	8005696 <HAL_UART_IRQHandler+0x11e>
}
 800559e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80055a2:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055a4:	4e95      	ldr	r6, [pc, #596]	; (80057fc <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055a6:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055aa:	400e      	ands	r6, r1
 80055ac:	4306      	orrs	r6, r0
 80055ae:	d078      	beq.n	80056a2 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b0:	07d5      	lsls	r5, r2, #31
 80055b2:	d509      	bpl.n	80055c8 <HAL_UART_IRQHandler+0x50>
 80055b4:	05ce      	lsls	r6, r1, #23
 80055b6:	d507      	bpl.n	80055c8 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055b8:	2501      	movs	r5, #1
 80055ba:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055bc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80055c0:	f045 0501 	orr.w	r5, r5, #1
 80055c4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c8:	0795      	lsls	r5, r2, #30
 80055ca:	d508      	bpl.n	80055de <HAL_UART_IRQHandler+0x66>
 80055cc:	b138      	cbz	r0, 80055de <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ce:	2502      	movs	r5, #2
 80055d0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80055d6:	f045 0504 	orr.w	r5, r5, #4
 80055da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055de:	0756      	lsls	r6, r2, #29
 80055e0:	d508      	bpl.n	80055f4 <HAL_UART_IRQHandler+0x7c>
 80055e2:	b138      	cbz	r0, 80055f4 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055e4:	2504      	movs	r5, #4
 80055e6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80055ec:	f045 0502 	orr.w	r5, r5, #2
 80055f0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055f4:	0715      	lsls	r5, r2, #28
 80055f6:	d50b      	bpl.n	8005610 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055f8:	f001 0520 	and.w	r5, r1, #32
 80055fc:	4328      	orrs	r0, r5
 80055fe:	d007      	beq.n	8005610 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005600:	2008      	movs	r0, #8
 8005602:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005604:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005608:	f040 0008 	orr.w	r0, r0, #8
 800560c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005610:	0516      	lsls	r6, r2, #20
 8005612:	d50a      	bpl.n	800562a <HAL_UART_IRQHandler+0xb2>
 8005614:	014d      	lsls	r5, r1, #5
 8005616:	d508      	bpl.n	800562a <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005618:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800561c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800561e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005622:	f043 0320 	orr.w	r3, r3, #32
 8005626:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800562a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d031      	beq.n	8005696 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005632:	0690      	lsls	r0, r2, #26
 8005634:	d505      	bpl.n	8005642 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005636:	068a      	lsls	r2, r1, #26
 8005638:	d503      	bpl.n	8005642 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 800563a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800563c:	b10b      	cbz	r3, 8005642 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800563e:	4620      	mov	r0, r4
 8005640:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005642:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005644:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005648:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800564a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005654:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005656:	d01f      	beq.n	8005698 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8005658:	f7ff fee9 	bl	800542e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	6893      	ldr	r3, [r2, #8]
 8005660:	065b      	lsls	r3, r3, #25
 8005662:	d515      	bpl.n	8005690 <HAL_UART_IRQHandler+0x118>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f102 0308 	add.w	r3, r2, #8
 8005668:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	f102 0008 	add.w	r0, r2, #8
 8005674:	e840 3100 	strex	r1, r3, [r0]
 8005678:	2900      	cmp	r1, #0
 800567a:	d1f3      	bne.n	8005664 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 800567c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800567e:	b138      	cbz	r0, 8005690 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005680:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <HAL_UART_IRQHandler+0x288>)
 8005682:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005684:	f7fd ffde 	bl	8003644 <HAL_DMA_Abort_IT>
 8005688:	b128      	cbz	r0, 8005696 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800568c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800568e:	e786      	b.n	800559e <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8005690:	4620      	mov	r0, r4
 8005692:	f7ff fef4 	bl	800547e <HAL_UART_ErrorCallback>
}
 8005696:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005698:	f7ff fef1 	bl	800547e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80056a0:	e7f9      	b.n	8005696 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80056a4:	2801      	cmp	r0, #1
 80056a6:	d17e      	bne.n	80057a6 <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056a8:	06d6      	lsls	r6, r2, #27
 80056aa:	d57c      	bpl.n	80057a6 <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056ac:	06c8      	lsls	r0, r1, #27
 80056ae:	d57a      	bpl.n	80057a6 <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b0:	2210      	movs	r2, #16
 80056b2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	0651      	lsls	r1, r2, #25
 80056b8:	d546      	bpl.n	8005748 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80056bc:	6811      	ldr	r1, [r2, #0]
 80056be:	684a      	ldr	r2, [r1, #4]
 80056c0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d0e7      	beq.n	8005696 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80056ca:	4290      	cmp	r0, r2
 80056cc:	d9e3      	bls.n	8005696 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80056ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056d2:	680a      	ldr	r2, [r1, #0]
 80056d4:	0692      	lsls	r2, r2, #26
 80056d6:	d42d      	bmi.n	8005734 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	e843 2100 	strex	r1, r2, [r3]
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d1f7      	bne.n	80056d8 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	f103 0208 	add.w	r2, r3, #8
 80056ec:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	f103 0008 	add.w	r0, r3, #8
 80056f8:	e840 2100 	strex	r1, r2, [r0]
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d1f3      	bne.n	80056e8 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f103 0208 	add.w	r2, r3, #8
 8005704:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	f103 0008 	add.w	r0, r3, #8
 8005710:	e840 2100 	strex	r1, r2, [r0]
 8005714:	2900      	cmp	r1, #0
 8005716:	d1f3      	bne.n	8005700 <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8005718:	2220      	movs	r2, #32
 800571a:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	e843 2100 	strex	r1, r2, [r3]
 800572a:	2900      	cmp	r1, #0
 800572c:	d1f7      	bne.n	800571e <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800572e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005730:	f7fd ff65 	bl	80035fe <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005734:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005738:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800573c:	1ac9      	subs	r1, r1, r3
 800573e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005740:	4620      	mov	r0, r4
 8005742:	f7ff ff18 	bl	8005576 <HAL_UARTEx_RxEventCallback>
 8005746:	e7a6      	b.n	8005696 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005748:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800574c:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800574e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8005752:	b289      	uxth	r1, r1
 8005754:	2900      	cmp	r1, #0
 8005756:	d09e      	beq.n	8005696 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005758:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800575c:	1a89      	subs	r1, r1, r2
 800575e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005760:	2900      	cmp	r1, #0
 8005762:	d098      	beq.n	8005696 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	e843 2000 	strex	r0, r2, [r3]
 8005770:	2800      	cmp	r0, #0
 8005772:	d1f7      	bne.n	8005764 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	f103 0208 	add.w	r2, r3, #8
 8005778:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	f103 0508 	add.w	r5, r3, #8
 8005784:	e845 2000 	strex	r0, r2, [r5]
 8005788:	2800      	cmp	r0, #0
 800578a:	d1f3      	bne.n	8005774 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 800578c:	2220      	movs	r2, #32
 800578e:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005790:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005798:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	e843 2000 	strex	r0, r2, [r3]
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1f7      	bne.n	8005794 <HAL_UART_IRQHandler+0x21c>
 80057a4:	e7cc      	b.n	8005740 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057a6:	02d6      	lsls	r6, r2, #11
 80057a8:	d509      	bpl.n	80057be <HAL_UART_IRQHandler+0x246>
 80057aa:	0268      	lsls	r0, r5, #9
 80057ac:	d507      	bpl.n	80057be <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80057b2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80057ba:	f000 bbc9 	b.w	8005f50 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057be:	0616      	lsls	r6, r2, #24
 80057c0:	d507      	bpl.n	80057d2 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057c2:	060d      	lsls	r5, r1, #24
 80057c4:	d505      	bpl.n	80057d2 <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 80057c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f43f af64 	beq.w	8005696 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80057ce:	4620      	mov	r0, r4
 80057d0:	e6e5      	b.n	800559e <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057d2:	0650      	lsls	r0, r2, #25
 80057d4:	f57f af5f 	bpl.w	8005696 <HAL_UART_IRQHandler+0x11e>
 80057d8:	064a      	lsls	r2, r1, #25
 80057da:	f57f af5c 	bpl.w	8005696 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	e843 2100 	strex	r1, r2, [r3]
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d1f7      	bne.n	80057de <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ee:	2320      	movs	r3, #32
 80057f0:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057f2:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff fe41 	bl	800547c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fa:	e74c      	b.n	8005696 <HAL_UART_IRQHandler+0x11e>
 80057fc:	04000120 	.word	0x04000120
 8005800:	08005481 	.word	0x08005481

08005804 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005804:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005806:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005808:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580a:	2b22      	cmp	r3, #34	; 0x22
 800580c:	d144      	bne.n	8005898 <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800580e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005810:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005814:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005816:	400b      	ands	r3, r1
 8005818:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800581a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800581c:	3301      	adds	r3, #1
 800581e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005820:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005824:	3b01      	subs	r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800582c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005830:	b29b      	uxth	r3, r3
 8005832:	bb6b      	cbnz	r3, 8005890 <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	e852 3f00 	ldrex	r3, [r2]
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005842:	6803      	ldr	r3, [r0, #0]
 8005844:	2900      	cmp	r1, #0
 8005846:	d1f5      	bne.n	8005834 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	f103 0208 	add.w	r2, r3, #8
 800584c:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	f103 0c08 	add.w	ip, r3, #8
 8005858:	e84c 2100 	strex	r1, r2, [ip]
 800585c:	2900      	cmp	r1, #0
 800585e:	d1f3      	bne.n	8005848 <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005860:	2220      	movs	r2, #32
 8005862:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005866:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	2a01      	cmp	r2, #1
 800586a:	d112      	bne.n	8005892 <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	e843 2100 	strex	r1, r2, [r3]
 800587a:	2900      	cmp	r1, #0
 800587c:	d1f7      	bne.n	800586e <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800587e:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005880:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005884:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005886:	bf44      	itt	mi
 8005888:	2210      	movmi	r2, #16
 800588a:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800588c:	f7ff fe73 	bl	8005576 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005890:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005892:	f7fc fa4f 	bl	8001d34 <HAL_UART_RxCpltCallback>
 8005896:	e7fb      	b.n	8005890 <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005898:	8b13      	ldrh	r3, [r2, #24]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f043 0308 	orr.w	r3, r3, #8
 80058a0:	8313      	strh	r3, [r2, #24]
}
 80058a2:	e7f5      	b.n	8005890 <UART_RxISR_8BIT+0x8c>

080058a4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80058a6:	2a22      	cmp	r2, #34	; 0x22
{
 80058a8:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058aa:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ac:	d141      	bne.n	8005932 <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ae:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80058b0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80058b4:	4011      	ands	r1, r2
 80058b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80058b8:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80058bc:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80058be:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80058c2:	3a01      	subs	r2, #1
 80058c4:	b292      	uxth	r2, r2
 80058c6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ca:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80058ce:	b292      	uxth	r2, r2
 80058d0:	bb5a      	cbnz	r2, 800592a <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	e843 2100 	strex	r1, r2, [r3]
 80058de:	2900      	cmp	r1, #0
 80058e0:	d1f7      	bne.n	80058d2 <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	f103 0208 	add.w	r2, r3, #8
 80058e6:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	f103 0c08 	add.w	ip, r3, #8
 80058f2:	e84c 2100 	strex	r1, r2, [ip]
 80058f6:	2900      	cmp	r1, #0
 80058f8:	d1f3      	bne.n	80058e2 <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fa:	2220      	movs	r2, #32
 80058fc:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fe:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005900:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	2a01      	cmp	r2, #1
 8005904:	d112      	bne.n	800592c <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	e843 2100 	strex	r1, r2, [r3]
 8005914:	2900      	cmp	r1, #0
 8005916:	d1f7      	bne.n	8005908 <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005918:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800591e:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005920:	bf44      	itt	mi
 8005922:	2210      	movmi	r2, #16
 8005924:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005926:	f7ff fe26 	bl	8005576 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800592a:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800592c:	f7fc fa02 	bl	8001d34 <HAL_UART_RxCpltCallback>
 8005930:	e7fb      	b.n	800592a <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005932:	8b1a      	ldrh	r2, [r3, #24]
 8005934:	b292      	uxth	r2, r2
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	831a      	strh	r2, [r3, #24]
}
 800593c:	e7f5      	b.n	800592a <UART_RxISR_16BIT+0x86>
	...

08005940 <UART_SetConfig>:
{
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005944:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005946:	6921      	ldr	r1, [r4, #16]
 8005948:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800594a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800594c:	69c0      	ldr	r0, [r0, #28]
 800594e:	430a      	orrs	r2, r1
 8005950:	6961      	ldr	r1, [r4, #20]
 8005952:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005954:	4979      	ldr	r1, [pc, #484]	; (8005b3c <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005956:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005958:	4029      	ands	r1, r5
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68e1      	ldr	r1, [r4, #12]
 8005962:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800596a:	4a75      	ldr	r2, [pc, #468]	; (8005b40 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800596c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800596e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005970:	bf1c      	itt	ne
 8005972:	6a22      	ldrne	r2, [r4, #32]
 8005974:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005980:	4a70      	ldr	r2, [pc, #448]	; (8005b44 <UART_SetConfig+0x204>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d117      	bne.n	80059b6 <UART_SetConfig+0x76>
 8005986:	4b70      	ldr	r3, [pc, #448]	; (8005b48 <UART_SetConfig+0x208>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	3b01      	subs	r3, #1
 8005992:	2b02      	cmp	r3, #2
 8005994:	f200 80b0 	bhi.w	8005af8 <UART_SetConfig+0x1b8>
 8005998:	4a6c      	ldr	r2, [pc, #432]	; (8005b4c <UART_SetConfig+0x20c>)
 800599a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80059a0:	f040 808b 	bne.w	8005aba <UART_SetConfig+0x17a>
    switch (clocksource)
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d822      	bhi.n	80059ee <UART_SetConfig+0xae>
 80059a8:	e8df f003 	tbb	[pc, r3]
 80059ac:	2185a969 	.word	0x2185a969
 80059b0:	21212182 	.word	0x21212182
 80059b4:	6d          	.byte	0x6d
 80059b5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b6:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <UART_SetConfig+0x210>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d106      	bne.n	80059ca <UART_SetConfig+0x8a>
 80059bc:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <UART_SetConfig+0x208>)
 80059be:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <UART_SetConfig+0x214>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	e7e7      	b.n	800599a <UART_SetConfig+0x5a>
 80059ca:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <UART_SetConfig+0x218>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d118      	bne.n	8005a02 <UART_SetConfig+0xc2>
 80059d0:	4b5d      	ldr	r3, [pc, #372]	; (8005b48 <UART_SetConfig+0x208>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059da:	2b20      	cmp	r3, #32
 80059dc:	f000 8087 	beq.w	8005aee <UART_SetConfig+0x1ae>
 80059e0:	d807      	bhi.n	80059f2 <UART_SetConfig+0xb2>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 8094 	beq.w	8005b10 <UART_SetConfig+0x1d0>
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	f000 808b 	beq.w	8005b04 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ee:	2001      	movs	r0, #1
 80059f0:	e024      	b.n	8005a3c <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f2:	2b30      	cmp	r3, #48	; 0x30
 80059f4:	d1fb      	bne.n	80059ee <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80059fa:	d044      	beq.n	8005a86 <UART_SetConfig+0x146>
 80059fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a00:	e08d      	b.n	8005b1e <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a02:	4a4f      	ldr	r2, [pc, #316]	; (8005b40 <UART_SetConfig+0x200>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d1f2      	bne.n	80059ee <UART_SetConfig+0xae>
 8005a08:	4b4f      	ldr	r3, [pc, #316]	; (8005b48 <UART_SetConfig+0x208>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d015      	beq.n	8005a44 <UART_SetConfig+0x104>
 8005a18:	d806      	bhi.n	8005a28 <UART_SetConfig+0xe8>
 8005a1a:	b15b      	cbz	r3, 8005a34 <UART_SetConfig+0xf4>
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d1e5      	bne.n	80059ee <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe f945 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
        break;
 8005a26:	e007      	b.n	8005a38 <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a2c:	d1df      	bne.n	80059ee <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a32:	e008      	b.n	8005a46 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fe fd10 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a38:	b928      	cbnz	r0, 8005a46 <UART_SetConfig+0x106>
 8005a3a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005a3c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005a3e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4845      	ldr	r0, [pc, #276]	; (8005b5c <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a46:	6862      	ldr	r2, [r4, #4]
 8005a48:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005a4c:	4283      	cmp	r3, r0
 8005a4e:	d8ce      	bhi.n	80059ee <UART_SetConfig+0xae>
 8005a50:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005a54:	d8cb      	bhi.n	80059ee <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a56:	0851      	lsrs	r1, r2, #1
 8005a58:	2500      	movs	r5, #0
 8005a5a:	468c      	mov	ip, r1
 8005a5c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005a60:	4629      	mov	r1, r5
 8005a62:	fbe0 c106 	umlal	ip, r1, r0, r6
 8005a66:	462b      	mov	r3, r5
 8005a68:	4660      	mov	r0, ip
 8005a6a:	f7fb f90d 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a6e:	4b3c      	ldr	r3, [pc, #240]	; (8005b60 <UART_SetConfig+0x220>)
 8005a70:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d8ba      	bhi.n	80059ee <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	60d8      	str	r0, [r3, #12]
 8005a7c:	e7dd      	b.n	8005a3a <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a7e:	f7fe fceb 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d0d9      	beq.n	8005a3a <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	0853      	lsrs	r3, r2, #1
 8005a8a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a92:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a96:	f1a0 0210 	sub.w	r2, r0, #16
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d8a7      	bhi.n	80059ee <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005aa2:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa4:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa6:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8005aaa:	4318      	orrs	r0, r3
 8005aac:	60d0      	str	r0, [r2, #12]
 8005aae:	e7c4      	b.n	8005a3a <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab0:	f7fe f8fe 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
        break;
 8005ab4:	e7e5      	b.n	8005a82 <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 8005ab6:	4829      	ldr	r0, [pc, #164]	; (8005b5c <UART_SetConfig+0x21c>)
 8005ab8:	e7e5      	b.n	8005a86 <UART_SetConfig+0x146>
    switch (clocksource)
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d897      	bhi.n	80059ee <UART_SetConfig+0xae>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x184>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005b17 	.word	0x08005b17
 8005ac8:	08005ae9 	.word	0x08005ae9
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	080059ef 	.word	0x080059ef
 8005ad4:	08005b0b 	.word	0x08005b0b
 8005ad8:	080059ef 	.word	0x080059ef
 8005adc:	080059ef 	.word	0x080059ef
 8005ae0:	080059ef 	.word	0x080059ef
 8005ae4:	080059fd 	.word	0x080059fd
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fcc8 	bl	800447c <HAL_RCC_GetPCLK2Freq>
        break;
 8005aec:	e015      	b.n	8005b1a <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005af2:	d0e0      	beq.n	8005ab6 <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 8005af4:	4819      	ldr	r0, [pc, #100]	; (8005b5c <UART_SetConfig+0x21c>)
 8005af6:	e012      	b.n	8005b1e <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005afc:	d1f4      	bne.n	8005ae8 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005afe:	f7fe fcbd 	bl	800447c <HAL_RCC_GetPCLK2Freq>
        break;
 8005b02:	e7be      	b.n	8005a82 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b04:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b08:	d0d2      	beq.n	8005ab0 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0a:	f7fe f8d1 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
        break;
 8005b0e:	e004      	b.n	8005b1a <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b14:	d0b3      	beq.n	8005a7e <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b16:	f7fe fc9f 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d08d      	beq.n	8005a3a <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005b24:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b28:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005b2c:	f1a3 0110 	sub.w	r1, r3, #16
 8005b30:	4291      	cmp	r1, r2
 8005b32:	f63f af5c 	bhi.w	80059ee <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	60d3      	str	r3, [r2, #12]
 8005b3a:	e77e      	b.n	8005a3a <UART_SetConfig+0xfa>
 8005b3c:	efff69f3 	.word	0xefff69f3
 8005b40:	40008000 	.word	0x40008000
 8005b44:	40013800 	.word	0x40013800
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	0800b82c 	.word	0x0800b82c
 8005b50:	40004400 	.word	0x40004400
 8005b54:	0800b82f 	.word	0x0800b82f
 8005b58:	40004800 	.word	0x40004800
 8005b5c:	00f42400 	.word	0x00f42400
 8005b60:	000ffcff 	.word	0x000ffcff

08005b64 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b66:	07da      	lsls	r2, r3, #31
{
 8005b68:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b6a:	d506      	bpl.n	8005b7a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6c:	6801      	ldr	r1, [r0, #0]
 8005b6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005b70:	684a      	ldr	r2, [r1, #4]
 8005b72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005b76:	4322      	orrs	r2, r4
 8005b78:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b7a:	079c      	lsls	r4, r3, #30
 8005b7c:	d506      	bpl.n	8005b8c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	6801      	ldr	r1, [r0, #0]
 8005b80:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005b82:	684a      	ldr	r2, [r1, #4]
 8005b84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b88:	4322      	orrs	r2, r4
 8005b8a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b8c:	0759      	lsls	r1, r3, #29
 8005b8e:	d506      	bpl.n	8005b9e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b90:	6801      	ldr	r1, [r0, #0]
 8005b92:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005b94:	684a      	ldr	r2, [r1, #4]
 8005b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b9a:	4322      	orrs	r2, r4
 8005b9c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9e:	071a      	lsls	r2, r3, #28
 8005ba0:	d506      	bpl.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba2:	6801      	ldr	r1, [r0, #0]
 8005ba4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005ba6:	684a      	ldr	r2, [r1, #4]
 8005ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bac:	4322      	orrs	r2, r4
 8005bae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb0:	06dc      	lsls	r4, r3, #27
 8005bb2:	d506      	bpl.n	8005bc2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb4:	6801      	ldr	r1, [r0, #0]
 8005bb6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005bb8:	688a      	ldr	r2, [r1, #8]
 8005bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bbe:	4322      	orrs	r2, r4
 8005bc0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc2:	0699      	lsls	r1, r3, #26
 8005bc4:	d506      	bpl.n	8005bd4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bc6:	6801      	ldr	r1, [r0, #0]
 8005bc8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005bca:	688a      	ldr	r2, [r1, #8]
 8005bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bd0:	4322      	orrs	r2, r4
 8005bd2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd4:	065a      	lsls	r2, r3, #25
 8005bd6:	d50f      	bpl.n	8005bf8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005bdc:	684a      	ldr	r2, [r1, #4]
 8005bde:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005be2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005be4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bea:	d105      	bne.n	8005bf8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bec:	684a      	ldr	r2, [r1, #4]
 8005bee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005bf0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005bf4:	4322      	orrs	r2, r4
 8005bf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf8:	061b      	lsls	r3, r3, #24
 8005bfa:	d506      	bpl.n	8005c0a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfc:	6802      	ldr	r2, [r0, #0]
 8005bfe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c00:	6853      	ldr	r3, [r2, #4]
 8005c02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6053      	str	r3, [r2, #4]
}
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <UART_WaitOnFlagUntilTimeout>:
{
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005c14:	4604      	mov	r4, r0
 8005c16:	460e      	mov	r6, r1
 8005c18:	4615      	mov	r5, r2
 8005c1a:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	69d3      	ldr	r3, [r2, #28]
 8005c20:	ea36 0303 	bics.w	r3, r6, r3
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	42ab      	cmp	r3, r5
 8005c2c:	d001      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e025      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005c36:	d0f2      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c38:	f7fc fe4a 	bl	80028d0 <HAL_GetTick>
 8005c3c:	1bc0      	subs	r0, r0, r7
 8005c3e:	4540      	cmp	r0, r8
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	d802      	bhi.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x3e>
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d11b      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	e840 3200 	strex	r2, r3, [r0]
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	d1f7      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	f100 0308 	add.w	r3, r0, #8
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	f100 0108 	add.w	r1, r0, #8
 8005c6a:	e841 3200 	strex	r2, r3, [r1]
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	d1f3      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005c72:	2320      	movs	r3, #32
 8005c74:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c76:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005c78:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005c7c:	2003      	movs	r0, #3
}
 8005c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c82:	6803      	ldr	r3, [r0, #0]
 8005c84:	075a      	lsls	r2, r3, #29
 8005c86:	d5c9      	bpl.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c88:	69c3      	ldr	r3, [r0, #28]
 8005c8a:	051b      	lsls	r3, r3, #20
 8005c8c:	d5c6      	bpl.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c92:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	e840 3200 	strex	r2, r3, [r0]
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d1f7      	bne.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	f100 0308 	add.w	r3, r0, #8
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	f100 0108 	add.w	r1, r0, #8
 8005cb4:	e841 3200 	strex	r2, r3, [r1]
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d1f3      	bne.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005cc6:	e7d7      	b.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x6c>

08005cc8 <HAL_UART_Transmit>:
{
 8005cc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005ccc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005cce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005cd0:	2b20      	cmp	r3, #32
{
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	460e      	mov	r6, r1
 8005cd6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd8:	d14e      	bne.n	8005d78 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8005cda:	2900      	cmp	r1, #0
 8005cdc:	d04a      	beq.n	8005d74 <HAL_UART_Transmit+0xac>
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d048      	beq.n	8005d74 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8005ce2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d046      	beq.n	8005d78 <HAL_UART_Transmit+0xb0>
 8005cea:	2301      	movs	r3, #1
 8005cec:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf8:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005cfa:	f7fc fde9 	bl	80028d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8005d00:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005d08:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8005d0a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0e:	d103      	bne.n	8005d18 <HAL_UART_Transmit+0x50>
 8005d10:	6922      	ldr	r2, [r4, #16]
 8005d12:	b90a      	cbnz	r2, 8005d18 <HAL_UART_Transmit+0x50>
 8005d14:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005d16:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005d1e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d22:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005d26:	b292      	uxth	r2, r2
 8005d28:	b93a      	cbnz	r2, 8005d3a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d2a:	2140      	movs	r1, #64	; 0x40
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ff6d 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005d32:	b950      	cbnz	r0, 8005d4a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005d34:	2320      	movs	r3, #32
 8005d36:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005d38:	e008      	b.n	8005d4c <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2180      	movs	r1, #128	; 0x80
 8005d3e:	4620      	mov	r0, r4
 8005d40:	9303      	str	r3, [sp, #12]
 8005d42:	f7ff ff63 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	b118      	cbz	r0, 8005d52 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8005d4a:	2003      	movs	r0, #3
}
 8005d4c:	b004      	add	sp, #16
 8005d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d52:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005d54:	b95e      	cbnz	r6, 8005d6e <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d56:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d5e:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8005d60:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005d64:	3a01      	subs	r2, #1
 8005d66:	b292      	uxth	r2, r2
 8005d68:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005d6c:	e7d7      	b.n	8005d1e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d6e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005d72:	e7f4      	b.n	8005d5e <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005d74:	2001      	movs	r0, #1
 8005d76:	e7e9      	b.n	8005d4c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005d78:	2002      	movs	r0, #2
 8005d7a:	e7e7      	b.n	8005d4c <HAL_UART_Transmit+0x84>

08005d7c <UART_CheckIdleState>:
{
 8005d7c:	b530      	push	{r4, r5, lr}
 8005d7e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	2500      	movs	r5, #0
{
 8005d82:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005d88:	f7fc fda2 	bl	80028d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005d92:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d94:	d415      	bmi.n	8005dc2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	0752      	lsls	r2, r2, #29
 8005d9c:	d509      	bpl.n	8005db2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005da2:	9200      	str	r2, [sp, #0]
 8005da4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005da8:	2200      	movs	r2, #0
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff ff2e 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005db0:	b9a0      	cbnz	r0, 8005ddc <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005db2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005db6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005db8:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbe:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8005dc0:	e00d      	b.n	8005dde <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005dc6:	9200      	str	r2, [sp, #0]
 8005dc8:	9003      	str	r0, [sp, #12]
 8005dca:	462a      	mov	r2, r5
 8005dcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff ff1b 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d0dc      	beq.n	8005d96 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005ddc:	2003      	movs	r0, #3
}
 8005dde:	b005      	add	sp, #20
 8005de0:	bd30      	pop	{r4, r5, pc}

08005de2 <HAL_UART_Init>:
{
 8005de2:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005de4:	4604      	mov	r4, r0
 8005de6:	b340      	cbz	r0, 8005e3a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005de8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005dea:	b91b      	cbnz	r3, 8005df4 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005dec:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005df0:	f7fc fbba 	bl	8002568 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005df4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005df6:	2324      	movs	r3, #36	; 0x24
 8005df8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fd9c 	bl	8005940 <UART_SetConfig>
 8005e08:	2801      	cmp	r0, #1
 8005e0a:	d016      	beq.n	8005e3a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0e:	b113      	cbz	r3, 8005e16 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff fea7 	bl	8005b64 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e26:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005e2e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005e36:	f7ff bfa1 	b.w	8005d7c <UART_CheckIdleState>
}
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	bd10      	pop	{r4, pc}
	...

08005e40 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8005e40:	6883      	ldr	r3, [r0, #8]
{
 8005e42:	b510      	push	{r4, lr}
  UART_MASK_COMPUTATION(huart);
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8005e48:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e4c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e50:	f04f 0200 	mov.w	r2, #0
  huart->pRxBuffPtr  = pData;
 8005e54:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8005e56:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005e58:	d132      	bne.n	8005ec0 <UART_Start_Receive_IT+0x80>
 8005e5a:	6903      	ldr	r3, [r0, #16]
 8005e5c:	bb73      	cbnz	r3, 8005ebc <UART_Start_Receive_IT+0x7c>
 8005e5e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005e62:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e6c:	2322      	movs	r3, #34	; 0x22
 8005e6e:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	f102 0308 	add.w	r3, r2, #8
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	3208      	adds	r2, #8
 8005e80:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005e84:	6802      	ldr	r2, [r0, #0]
 8005e86:	2900      	cmp	r1, #0
 8005e88:	d1f2      	bne.n	8005e70 <UART_Start_Receive_IT+0x30>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8a:	6883      	ldr	r3, [r0, #8]
 8005e8c:	6901      	ldr	r1, [r0, #16]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d126      	bne.n	8005ee2 <UART_Start_Receive_IT+0xa2>
    huart->RxISR = UART_RxISR_8BIT;
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <UART_Start_Receive_IT+0xb8>)
 8005e96:	4c19      	ldr	r4, [pc, #100]	; (8005efc <UART_Start_Receive_IT+0xbc>)
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	bf18      	it	ne
 8005e9c:	4623      	movne	r3, r4
 8005e9e:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea6:	b1f1      	cbz	r1, 8005ee6 <UART_Start_Receive_IT+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005eac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	e842 3100 	strex	r1, r3, [r2]
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d1f7      	bne.n	8005ea8 <UART_Start_Receive_IT+0x68>
}
 8005eb8:	2000      	movs	r0, #0
 8005eba:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005ebc:	23ff      	movs	r3, #255	; 0xff
 8005ebe:	e7d0      	b.n	8005e62 <UART_Start_Receive_IT+0x22>
 8005ec0:	b923      	cbnz	r3, 8005ecc <UART_Start_Receive_IT+0x8c>
 8005ec2:	6903      	ldr	r3, [r0, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f9      	beq.n	8005ebc <UART_Start_Receive_IT+0x7c>
 8005ec8:	237f      	movs	r3, #127	; 0x7f
 8005eca:	e7ca      	b.n	8005e62 <UART_Start_Receive_IT+0x22>
 8005ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed0:	d104      	bne.n	8005edc <UART_Start_Receive_IT+0x9c>
 8005ed2:	6903      	ldr	r3, [r0, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f7      	beq.n	8005ec8 <UART_Start_Receive_IT+0x88>
 8005ed8:	233f      	movs	r3, #63	; 0x3f
 8005eda:	e7c2      	b.n	8005e62 <UART_Start_Receive_IT+0x22>
 8005edc:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8005ee0:	e7c1      	b.n	8005e66 <UART_Start_Receive_IT+0x26>
    huart->RxISR = UART_RxISR_8BIT;
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <UART_Start_Receive_IT+0xbc>)
 8005ee4:	e7db      	b.n	8005e9e <UART_Start_Receive_IT+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005eea:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	e842 3100 	strex	r1, r3, [r2]
 8005ef2:	2900      	cmp	r1, #0
 8005ef4:	d1f7      	bne.n	8005ee6 <UART_Start_Receive_IT+0xa6>
 8005ef6:	e7df      	b.n	8005eb8 <UART_Start_Receive_IT+0x78>
 8005ef8:	080058a5 	.word	0x080058a5
 8005efc:	08005805 	.word	0x08005805

08005f00 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f00:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005f02:	2b20      	cmp	r3, #32
{
 8005f04:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f06:	d11f      	bne.n	8005f48 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005f08:	b1d9      	cbz	r1, 8005f42 <HAL_UART_Receive_IT+0x42>
 8005f0a:	b1d2      	cbz	r2, 8005f42 <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8005f0c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d019      	beq.n	8005f48 <HAL_UART_Receive_IT+0x48>
 8005f14:	2301      	movs	r3, #1
 8005f16:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f1c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_UART_Receive_IT+0x4c>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d00a      	beq.n	8005f3c <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	d507      	bpl.n	8005f3c <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	e844 3500 	strex	r5, r3, [r4]
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	d1f7      	bne.n	8005f2c <HAL_UART_Receive_IT+0x2c>
}
 8005f3c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f3e:	f7ff bf7f 	b.w	8005e40 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8005f42:	2001      	movs	r0, #1
}
 8005f44:	bc30      	pop	{r4, r5}
 8005f46:	4770      	bx	lr
    return HAL_BUSY;
 8005f48:	2002      	movs	r0, #2
 8005f4a:	e7fb      	b.n	8005f44 <HAL_UART_Receive_IT+0x44>
 8005f4c:	40008000 	.word	0x40008000

08005f50 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f50:	4770      	bx	lr
	...

08005f54 <__errno>:
 8005f54:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <__errno+0x8>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000040 	.word	0x20000040

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4d0d      	ldr	r5, [pc, #52]	; (8005f98 <__libc_init_array+0x38>)
 8005f64:	4c0d      	ldr	r4, [pc, #52]	; (8005f9c <__libc_init_array+0x3c>)
 8005f66:	1b64      	subs	r4, r4, r5
 8005f68:	10a4      	asrs	r4, r4, #2
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	42a6      	cmp	r6, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	4d0b      	ldr	r5, [pc, #44]	; (8005fa0 <__libc_init_array+0x40>)
 8005f72:	4c0c      	ldr	r4, [pc, #48]	; (8005fa4 <__libc_init_array+0x44>)
 8005f74:	f005 f9be 	bl	800b2f4 <_init>
 8005f78:	1b64      	subs	r4, r4, r5
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	42a6      	cmp	r6, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f88:	4798      	blx	r3
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f92:	4798      	blx	r3
 8005f94:	3601      	adds	r6, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	0800bd04 	.word	0x0800bd04
 8005f9c:	0800bd04 	.word	0x0800bd04
 8005fa0:	0800bd04 	.word	0x0800bd04
 8005fa4:	0800bd08 	.word	0x0800bd08

08005fa8 <memset>:
 8005fa8:	4402      	add	r2, r0
 8005faa:	4603      	mov	r3, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <__cvt>:
 8005fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	ec55 4b10 	vmov	r4, r5, d0
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	460e      	mov	r6, r1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	bfbb      	ittet	lt
 8005fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005fce:	461d      	movlt	r5, r3
 8005fd0:	2300      	movge	r3, #0
 8005fd2:	232d      	movlt	r3, #45	; 0x2d
 8005fd4:	700b      	strb	r3, [r1, #0]
 8005fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fdc:	4691      	mov	r9, r2
 8005fde:	f023 0820 	bic.w	r8, r3, #32
 8005fe2:	bfbc      	itt	lt
 8005fe4:	4622      	movlt	r2, r4
 8005fe6:	4614      	movlt	r4, r2
 8005fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fec:	d005      	beq.n	8005ffa <__cvt+0x42>
 8005fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ff2:	d100      	bne.n	8005ff6 <__cvt+0x3e>
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	e000      	b.n	8005ffc <__cvt+0x44>
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	ab03      	add	r3, sp, #12
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	ab02      	add	r3, sp, #8
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	ec45 4b10 	vmov	d0, r4, r5
 8006008:	4653      	mov	r3, sl
 800600a:	4632      	mov	r2, r6
 800600c:	f001 ffc4 	bl	8007f98 <_dtoa_r>
 8006010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006014:	4607      	mov	r7, r0
 8006016:	d102      	bne.n	800601e <__cvt+0x66>
 8006018:	f019 0f01 	tst.w	r9, #1
 800601c:	d022      	beq.n	8006064 <__cvt+0xac>
 800601e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006022:	eb07 0906 	add.w	r9, r7, r6
 8006026:	d110      	bne.n	800604a <__cvt+0x92>
 8006028:	783b      	ldrb	r3, [r7, #0]
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d10a      	bne.n	8006044 <__cvt+0x8c>
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800603a:	b918      	cbnz	r0, 8006044 <__cvt+0x8c>
 800603c:	f1c6 0601 	rsb	r6, r6, #1
 8006040:	f8ca 6000 	str.w	r6, [sl]
 8006044:	f8da 3000 	ldr.w	r3, [sl]
 8006048:	4499      	add	r9, r3
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8006056:	b108      	cbz	r0, 800605c <__cvt+0xa4>
 8006058:	f8cd 900c 	str.w	r9, [sp, #12]
 800605c:	2230      	movs	r2, #48	; 0x30
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	454b      	cmp	r3, r9
 8006062:	d307      	bcc.n	8006074 <__cvt+0xbc>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006068:	1bdb      	subs	r3, r3, r7
 800606a:	4638      	mov	r0, r7
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	b004      	add	sp, #16
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	9103      	str	r1, [sp, #12]
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e7f0      	b.n	800605e <__cvt+0xa6>

0800607c <__exponent>:
 800607c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800607e:	4603      	mov	r3, r0
 8006080:	2900      	cmp	r1, #0
 8006082:	bfb8      	it	lt
 8006084:	4249      	neglt	r1, r1
 8006086:	f803 2b02 	strb.w	r2, [r3], #2
 800608a:	bfb4      	ite	lt
 800608c:	222d      	movlt	r2, #45	; 0x2d
 800608e:	222b      	movge	r2, #43	; 0x2b
 8006090:	2909      	cmp	r1, #9
 8006092:	7042      	strb	r2, [r0, #1]
 8006094:	dd2a      	ble.n	80060ec <__exponent+0x70>
 8006096:	f10d 0407 	add.w	r4, sp, #7
 800609a:	46a4      	mov	ip, r4
 800609c:	270a      	movs	r7, #10
 800609e:	46a6      	mov	lr, r4
 80060a0:	460a      	mov	r2, r1
 80060a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80060a6:	fb07 1516 	mls	r5, r7, r6, r1
 80060aa:	3530      	adds	r5, #48	; 0x30
 80060ac:	2a63      	cmp	r2, #99	; 0x63
 80060ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80060b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80060b6:	4631      	mov	r1, r6
 80060b8:	dcf1      	bgt.n	800609e <__exponent+0x22>
 80060ba:	3130      	adds	r1, #48	; 0x30
 80060bc:	f1ae 0502 	sub.w	r5, lr, #2
 80060c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80060c4:	1c44      	adds	r4, r0, #1
 80060c6:	4629      	mov	r1, r5
 80060c8:	4561      	cmp	r1, ip
 80060ca:	d30a      	bcc.n	80060e2 <__exponent+0x66>
 80060cc:	f10d 0209 	add.w	r2, sp, #9
 80060d0:	eba2 020e 	sub.w	r2, r2, lr
 80060d4:	4565      	cmp	r5, ip
 80060d6:	bf88      	it	hi
 80060d8:	2200      	movhi	r2, #0
 80060da:	4413      	add	r3, r2
 80060dc:	1a18      	subs	r0, r3, r0
 80060de:	b003      	add	sp, #12
 80060e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060ea:	e7ed      	b.n	80060c8 <__exponent+0x4c>
 80060ec:	2330      	movs	r3, #48	; 0x30
 80060ee:	3130      	adds	r1, #48	; 0x30
 80060f0:	7083      	strb	r3, [r0, #2]
 80060f2:	70c1      	strb	r1, [r0, #3]
 80060f4:	1d03      	adds	r3, r0, #4
 80060f6:	e7f1      	b.n	80060dc <__exponent+0x60>

080060f8 <_printf_float>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	ed2d 8b02 	vpush	{d8}
 8006100:	b08d      	sub	sp, #52	; 0x34
 8006102:	460c      	mov	r4, r1
 8006104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006108:	4616      	mov	r6, r2
 800610a:	461f      	mov	r7, r3
 800610c:	4605      	mov	r5, r0
 800610e:	f003 fa57 	bl	80095c0 <_localeconv_r>
 8006112:	f8d0 a000 	ldr.w	sl, [r0]
 8006116:	4650      	mov	r0, sl
 8006118:	f7fa f85a 	bl	80001d0 <strlen>
 800611c:	2300      	movs	r3, #0
 800611e:	930a      	str	r3, [sp, #40]	; 0x28
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	f8d8 3000 	ldr.w	r3, [r8]
 8006128:	f894 b018 	ldrb.w	fp, [r4, #24]
 800612c:	3307      	adds	r3, #7
 800612e:	f023 0307 	bic.w	r3, r3, #7
 8006132:	f103 0208 	add.w	r2, r3, #8
 8006136:	f8c8 2000 	str.w	r2, [r8]
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006142:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006150:	ee08 0a10 	vmov	s16, r0
 8006154:	4b9f      	ldr	r3, [pc, #636]	; (80063d4 <_printf_float+0x2dc>)
 8006156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	f7fa fce5 	bl	8000b2c <__aeabi_dcmpun>
 8006162:	bb88      	cbnz	r0, 80061c8 <_printf_float+0xd0>
 8006164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006168:	4b9a      	ldr	r3, [pc, #616]	; (80063d4 <_printf_float+0x2dc>)
 800616a:	f04f 32ff 	mov.w	r2, #4294967295
 800616e:	f7fa fcbf 	bl	8000af0 <__aeabi_dcmple>
 8006172:	bb48      	cbnz	r0, 80061c8 <_printf_float+0xd0>
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4640      	mov	r0, r8
 800617a:	4649      	mov	r1, r9
 800617c:	f7fa fcae 	bl	8000adc <__aeabi_dcmplt>
 8006180:	b110      	cbz	r0, 8006188 <_printf_float+0x90>
 8006182:	232d      	movs	r3, #45	; 0x2d
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	4b93      	ldr	r3, [pc, #588]	; (80063d8 <_printf_float+0x2e0>)
 800618a:	4894      	ldr	r0, [pc, #592]	; (80063dc <_printf_float+0x2e4>)
 800618c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006190:	bf94      	ite	ls
 8006192:	4698      	movls	r8, r3
 8006194:	4680      	movhi	r8, r0
 8006196:	2303      	movs	r3, #3
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	9b05      	ldr	r3, [sp, #20]
 800619c:	f023 0204 	bic.w	r2, r3, #4
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	f04f 0900 	mov.w	r9, #0
 80061a6:	9700      	str	r7, [sp, #0]
 80061a8:	4633      	mov	r3, r6
 80061aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80061ac:	4621      	mov	r1, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 f9d8 	bl	8006564 <_printf_common>
 80061b4:	3001      	adds	r0, #1
 80061b6:	f040 8090 	bne.w	80062da <_printf_float+0x1e2>
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	b00d      	add	sp, #52	; 0x34
 80061c0:	ecbd 8b02 	vpop	{d8}
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	4649      	mov	r1, r9
 80061d0:	f7fa fcac 	bl	8000b2c <__aeabi_dcmpun>
 80061d4:	b140      	cbz	r0, 80061e8 <_printf_float+0xf0>
 80061d6:	464b      	mov	r3, r9
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfbc      	itt	lt
 80061dc:	232d      	movlt	r3, #45	; 0x2d
 80061de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061e2:	487f      	ldr	r0, [pc, #508]	; (80063e0 <_printf_float+0x2e8>)
 80061e4:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <_printf_float+0x2ec>)
 80061e6:	e7d1      	b.n	800618c <_printf_float+0x94>
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061ee:	9206      	str	r2, [sp, #24]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	d13f      	bne.n	8006274 <_printf_float+0x17c>
 80061f4:	2306      	movs	r3, #6
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	9b05      	ldr	r3, [sp, #20]
 80061fa:	6861      	ldr	r1, [r4, #4]
 80061fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006200:	2300      	movs	r3, #0
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	ab0a      	add	r3, sp, #40	; 0x28
 8006206:	e9cd b301 	strd	fp, r3, [sp, #4]
 800620a:	ab09      	add	r3, sp, #36	; 0x24
 800620c:	ec49 8b10 	vmov	d0, r8, r9
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006218:	4628      	mov	r0, r5
 800621a:	f7ff fecd 	bl	8005fb8 <__cvt>
 800621e:	9b06      	ldr	r3, [sp, #24]
 8006220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006222:	2b47      	cmp	r3, #71	; 0x47
 8006224:	4680      	mov	r8, r0
 8006226:	d108      	bne.n	800623a <_printf_float+0x142>
 8006228:	1cc8      	adds	r0, r1, #3
 800622a:	db02      	blt.n	8006232 <_printf_float+0x13a>
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	4299      	cmp	r1, r3
 8006230:	dd41      	ble.n	80062b6 <_printf_float+0x1be>
 8006232:	f1ab 0b02 	sub.w	fp, fp, #2
 8006236:	fa5f fb8b 	uxtb.w	fp, fp
 800623a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800623e:	d820      	bhi.n	8006282 <_printf_float+0x18a>
 8006240:	3901      	subs	r1, #1
 8006242:	465a      	mov	r2, fp
 8006244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006248:	9109      	str	r1, [sp, #36]	; 0x24
 800624a:	f7ff ff17 	bl	800607c <__exponent>
 800624e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006250:	1813      	adds	r3, r2, r0
 8006252:	2a01      	cmp	r2, #1
 8006254:	4681      	mov	r9, r0
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	dc02      	bgt.n	8006260 <_printf_float+0x168>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	07d2      	lsls	r2, r2, #31
 800625e:	d501      	bpl.n	8006264 <_printf_float+0x16c>
 8006260:	3301      	adds	r3, #1
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006268:	2b00      	cmp	r3, #0
 800626a:	d09c      	beq.n	80061a6 <_printf_float+0xae>
 800626c:	232d      	movs	r3, #45	; 0x2d
 800626e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006272:	e798      	b.n	80061a6 <_printf_float+0xae>
 8006274:	9a06      	ldr	r2, [sp, #24]
 8006276:	2a47      	cmp	r2, #71	; 0x47
 8006278:	d1be      	bne.n	80061f8 <_printf_float+0x100>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1bc      	bne.n	80061f8 <_printf_float+0x100>
 800627e:	2301      	movs	r3, #1
 8006280:	e7b9      	b.n	80061f6 <_printf_float+0xfe>
 8006282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006286:	d118      	bne.n	80062ba <_printf_float+0x1c2>
 8006288:	2900      	cmp	r1, #0
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	dd0b      	ble.n	80062a6 <_printf_float+0x1ae>
 800628e:	6121      	str	r1, [r4, #16]
 8006290:	b913      	cbnz	r3, 8006298 <_printf_float+0x1a0>
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	07d0      	lsls	r0, r2, #31
 8006296:	d502      	bpl.n	800629e <_printf_float+0x1a6>
 8006298:	3301      	adds	r3, #1
 800629a:	440b      	add	r3, r1
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	65a1      	str	r1, [r4, #88]	; 0x58
 80062a0:	f04f 0900 	mov.w	r9, #0
 80062a4:	e7de      	b.n	8006264 <_printf_float+0x16c>
 80062a6:	b913      	cbnz	r3, 80062ae <_printf_float+0x1b6>
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	07d2      	lsls	r2, r2, #31
 80062ac:	d501      	bpl.n	80062b2 <_printf_float+0x1ba>
 80062ae:	3302      	adds	r3, #2
 80062b0:	e7f4      	b.n	800629c <_printf_float+0x1a4>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e7f2      	b.n	800629c <_printf_float+0x1a4>
 80062b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062bc:	4299      	cmp	r1, r3
 80062be:	db05      	blt.n	80062cc <_printf_float+0x1d4>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	6121      	str	r1, [r4, #16]
 80062c4:	07d8      	lsls	r0, r3, #31
 80062c6:	d5ea      	bpl.n	800629e <_printf_float+0x1a6>
 80062c8:	1c4b      	adds	r3, r1, #1
 80062ca:	e7e7      	b.n	800629c <_printf_float+0x1a4>
 80062cc:	2900      	cmp	r1, #0
 80062ce:	bfd4      	ite	le
 80062d0:	f1c1 0202 	rsble	r2, r1, #2
 80062d4:	2201      	movgt	r2, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	e7e0      	b.n	800629c <_printf_float+0x1a4>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	055a      	lsls	r2, r3, #21
 80062de:	d407      	bmi.n	80062f0 <_printf_float+0x1f8>
 80062e0:	6923      	ldr	r3, [r4, #16]
 80062e2:	4642      	mov	r2, r8
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	d12c      	bne.n	8006348 <_printf_float+0x250>
 80062ee:	e764      	b.n	80061ba <_printf_float+0xc2>
 80062f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062f4:	f240 80e0 	bls.w	80064b8 <_printf_float+0x3c0>
 80062f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	f7fa fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006304:	2800      	cmp	r0, #0
 8006306:	d034      	beq.n	8006372 <_printf_float+0x27a>
 8006308:	4a37      	ldr	r2, [pc, #220]	; (80063e8 <_printf_float+0x2f0>)
 800630a:	2301      	movs	r3, #1
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f af51 	beq.w	80061ba <_printf_float+0xc2>
 8006318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800631c:	429a      	cmp	r2, r3
 800631e:	db02      	blt.n	8006326 <_printf_float+0x22e>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	07d8      	lsls	r0, r3, #31
 8006324:	d510      	bpl.n	8006348 <_printf_float+0x250>
 8006326:	ee18 3a10 	vmov	r3, s16
 800632a:	4652      	mov	r2, sl
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af41 	beq.w	80061ba <_printf_float+0xc2>
 8006338:	f04f 0800 	mov.w	r8, #0
 800633c:	f104 091a 	add.w	r9, r4, #26
 8006340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006342:	3b01      	subs	r3, #1
 8006344:	4543      	cmp	r3, r8
 8006346:	dc09      	bgt.n	800635c <_printf_float+0x264>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	079b      	lsls	r3, r3, #30
 800634c:	f100 8105 	bmi.w	800655a <_printf_float+0x462>
 8006350:	68e0      	ldr	r0, [r4, #12]
 8006352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006354:	4298      	cmp	r0, r3
 8006356:	bfb8      	it	lt
 8006358:	4618      	movlt	r0, r3
 800635a:	e730      	b.n	80061be <_printf_float+0xc6>
 800635c:	2301      	movs	r3, #1
 800635e:	464a      	mov	r2, r9
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f af27 	beq.w	80061ba <_printf_float+0xc2>
 800636c:	f108 0801 	add.w	r8, r8, #1
 8006370:	e7e6      	b.n	8006340 <_printf_float+0x248>
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	dc39      	bgt.n	80063ec <_printf_float+0x2f4>
 8006378:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <_printf_float+0x2f0>)
 800637a:	2301      	movs	r3, #1
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	f43f af19 	beq.w	80061ba <_printf_float+0xc2>
 8006388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800638c:	4313      	orrs	r3, r2
 800638e:	d102      	bne.n	8006396 <_printf_float+0x29e>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	07d9      	lsls	r1, r3, #31
 8006394:	d5d8      	bpl.n	8006348 <_printf_float+0x250>
 8006396:	ee18 3a10 	vmov	r3, s16
 800639a:	4652      	mov	r2, sl
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f af09 	beq.w	80061ba <_printf_float+0xc2>
 80063a8:	f04f 0900 	mov.w	r9, #0
 80063ac:	f104 0a1a 	add.w	sl, r4, #26
 80063b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b2:	425b      	negs	r3, r3
 80063b4:	454b      	cmp	r3, r9
 80063b6:	dc01      	bgt.n	80063bc <_printf_float+0x2c4>
 80063b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ba:	e792      	b.n	80062e2 <_printf_float+0x1ea>
 80063bc:	2301      	movs	r3, #1
 80063be:	4652      	mov	r2, sl
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f aef7 	beq.w	80061ba <_printf_float+0xc2>
 80063cc:	f109 0901 	add.w	r9, r9, #1
 80063d0:	e7ee      	b.n	80063b0 <_printf_float+0x2b8>
 80063d2:	bf00      	nop
 80063d4:	7fefffff 	.word	0x7fefffff
 80063d8:	0800b840 	.word	0x0800b840
 80063dc:	0800b844 	.word	0x0800b844
 80063e0:	0800b84c 	.word	0x0800b84c
 80063e4:	0800b848 	.word	0x0800b848
 80063e8:	0800bca9 	.word	0x0800bca9
 80063ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063f0:	429a      	cmp	r2, r3
 80063f2:	bfa8      	it	ge
 80063f4:	461a      	movge	r2, r3
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	4691      	mov	r9, r2
 80063fa:	dc37      	bgt.n	800646c <_printf_float+0x374>
 80063fc:	f04f 0b00 	mov.w	fp, #0
 8006400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006404:	f104 021a 	add.w	r2, r4, #26
 8006408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	eba3 0309 	sub.w	r3, r3, r9
 8006410:	455b      	cmp	r3, fp
 8006412:	dc33      	bgt.n	800647c <_printf_float+0x384>
 8006414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006418:	429a      	cmp	r2, r3
 800641a:	db3b      	blt.n	8006494 <_printf_float+0x39c>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	07da      	lsls	r2, r3, #31
 8006420:	d438      	bmi.n	8006494 <_printf_float+0x39c>
 8006422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006424:	9a05      	ldr	r2, [sp, #20]
 8006426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006428:	1a9a      	subs	r2, r3, r2
 800642a:	eba3 0901 	sub.w	r9, r3, r1
 800642e:	4591      	cmp	r9, r2
 8006430:	bfa8      	it	ge
 8006432:	4691      	movge	r9, r2
 8006434:	f1b9 0f00 	cmp.w	r9, #0
 8006438:	dc35      	bgt.n	80064a6 <_printf_float+0x3ae>
 800643a:	f04f 0800 	mov.w	r8, #0
 800643e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006442:	f104 0a1a 	add.w	sl, r4, #26
 8006446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	eba3 0309 	sub.w	r3, r3, r9
 8006450:	4543      	cmp	r3, r8
 8006452:	f77f af79 	ble.w	8006348 <_printf_float+0x250>
 8006456:	2301      	movs	r3, #1
 8006458:	4652      	mov	r2, sl
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f aeaa 	beq.w	80061ba <_printf_float+0xc2>
 8006466:	f108 0801 	add.w	r8, r8, #1
 800646a:	e7ec      	b.n	8006446 <_printf_float+0x34e>
 800646c:	4613      	mov	r3, r2
 800646e:	4631      	mov	r1, r6
 8006470:	4642      	mov	r2, r8
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	d1c0      	bne.n	80063fc <_printf_float+0x304>
 800647a:	e69e      	b.n	80061ba <_printf_float+0xc2>
 800647c:	2301      	movs	r3, #1
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	9205      	str	r2, [sp, #20]
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	f43f ae97 	beq.w	80061ba <_printf_float+0xc2>
 800648c:	9a05      	ldr	r2, [sp, #20]
 800648e:	f10b 0b01 	add.w	fp, fp, #1
 8006492:	e7b9      	b.n	8006408 <_printf_float+0x310>
 8006494:	ee18 3a10 	vmov	r3, s16
 8006498:	4652      	mov	r2, sl
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d1be      	bne.n	8006422 <_printf_float+0x32a>
 80064a4:	e689      	b.n	80061ba <_printf_float+0xc2>
 80064a6:	9a05      	ldr	r2, [sp, #20]
 80064a8:	464b      	mov	r3, r9
 80064aa:	4442      	add	r2, r8
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	d1c1      	bne.n	800643a <_printf_float+0x342>
 80064b6:	e680      	b.n	80061ba <_printf_float+0xc2>
 80064b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ba:	2a01      	cmp	r2, #1
 80064bc:	dc01      	bgt.n	80064c2 <_printf_float+0x3ca>
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	d538      	bpl.n	8006534 <_printf_float+0x43c>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4642      	mov	r2, r8
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae74 	beq.w	80061ba <_printf_float+0xc2>
 80064d2:	ee18 3a10 	vmov	r3, s16
 80064d6:	4652      	mov	r2, sl
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f ae6b 	beq.w	80061ba <_printf_float+0xc2>
 80064e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	f7fa faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f0:	b9d8      	cbnz	r0, 800652a <_printf_float+0x432>
 80064f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f4:	f108 0201 	add.w	r2, r8, #1
 80064f8:	3b01      	subs	r3, #1
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	d10e      	bne.n	8006522 <_printf_float+0x42a>
 8006504:	e659      	b.n	80061ba <_printf_float+0xc2>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae52 	beq.w	80061ba <_printf_float+0xc2>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651c:	3b01      	subs	r3, #1
 800651e:	4543      	cmp	r3, r8
 8006520:	dcf1      	bgt.n	8006506 <_printf_float+0x40e>
 8006522:	464b      	mov	r3, r9
 8006524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006528:	e6dc      	b.n	80062e4 <_printf_float+0x1ec>
 800652a:	f04f 0800 	mov.w	r8, #0
 800652e:	f104 0a1a 	add.w	sl, r4, #26
 8006532:	e7f2      	b.n	800651a <_printf_float+0x422>
 8006534:	2301      	movs	r3, #1
 8006536:	4642      	mov	r2, r8
 8006538:	e7df      	b.n	80064fa <_printf_float+0x402>
 800653a:	2301      	movs	r3, #1
 800653c:	464a      	mov	r2, r9
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	47b8      	blx	r7
 8006544:	3001      	adds	r0, #1
 8006546:	f43f ae38 	beq.w	80061ba <_printf_float+0xc2>
 800654a:	f108 0801 	add.w	r8, r8, #1
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006552:	1a5b      	subs	r3, r3, r1
 8006554:	4543      	cmp	r3, r8
 8006556:	dcf0      	bgt.n	800653a <_printf_float+0x442>
 8006558:	e6fa      	b.n	8006350 <_printf_float+0x258>
 800655a:	f04f 0800 	mov.w	r8, #0
 800655e:	f104 0919 	add.w	r9, r4, #25
 8006562:	e7f4      	b.n	800654e <_printf_float+0x456>

08006564 <_printf_common>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	4616      	mov	r6, r2
 800656a:	4699      	mov	r9, r3
 800656c:	688a      	ldr	r2, [r1, #8]
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006574:	4293      	cmp	r3, r2
 8006576:	bfb8      	it	lt
 8006578:	4613      	movlt	r3, r2
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006580:	4607      	mov	r7, r0
 8006582:	460c      	mov	r4, r1
 8006584:	b10a      	cbz	r2, 800658a <_printf_common+0x26>
 8006586:	3301      	adds	r3, #1
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	0699      	lsls	r1, r3, #26
 800658e:	bf42      	ittt	mi
 8006590:	6833      	ldrmi	r3, [r6, #0]
 8006592:	3302      	addmi	r3, #2
 8006594:	6033      	strmi	r3, [r6, #0]
 8006596:	6825      	ldr	r5, [r4, #0]
 8006598:	f015 0506 	ands.w	r5, r5, #6
 800659c:	d106      	bne.n	80065ac <_printf_common+0x48>
 800659e:	f104 0a19 	add.w	sl, r4, #25
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	6832      	ldr	r2, [r6, #0]
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc26      	bgt.n	80065fa <_printf_common+0x96>
 80065ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065b0:	1e13      	subs	r3, r2, #0
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	bf18      	it	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	0692      	lsls	r2, r2, #26
 80065ba:	d42b      	bmi.n	8006614 <_printf_common+0xb0>
 80065bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065c0:	4649      	mov	r1, r9
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d01e      	beq.n	8006608 <_printf_common+0xa4>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	68e5      	ldr	r5, [r4, #12]
 80065ce:	6832      	ldr	r2, [r6, #0]
 80065d0:	f003 0306 	and.w	r3, r3, #6
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	bf08      	it	eq
 80065d8:	1aad      	subeq	r5, r5, r2
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	6922      	ldr	r2, [r4, #16]
 80065de:	bf0c      	ite	eq
 80065e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e4:	2500      	movne	r5, #0
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bfc4      	itt	gt
 80065ea:	1a9b      	subgt	r3, r3, r2
 80065ec:	18ed      	addgt	r5, r5, r3
 80065ee:	2600      	movs	r6, #0
 80065f0:	341a      	adds	r4, #26
 80065f2:	42b5      	cmp	r5, r6
 80065f4:	d11a      	bne.n	800662c <_printf_common+0xc8>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e008      	b.n	800660c <_printf_common+0xa8>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4652      	mov	r2, sl
 80065fe:	4649      	mov	r1, r9
 8006600:	4638      	mov	r0, r7
 8006602:	47c0      	blx	r8
 8006604:	3001      	adds	r0, #1
 8006606:	d103      	bne.n	8006610 <_printf_common+0xac>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	3501      	adds	r5, #1
 8006612:	e7c6      	b.n	80065a2 <_printf_common+0x3e>
 8006614:	18e1      	adds	r1, r4, r3
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	2030      	movs	r0, #48	; 0x30
 800661a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800661e:	4422      	add	r2, r4
 8006620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006628:	3302      	adds	r3, #2
 800662a:	e7c7      	b.n	80065bc <_printf_common+0x58>
 800662c:	2301      	movs	r3, #1
 800662e:	4622      	mov	r2, r4
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d0e6      	beq.n	8006608 <_printf_common+0xa4>
 800663a:	3601      	adds	r6, #1
 800663c:	e7d9      	b.n	80065f2 <_printf_common+0x8e>
	...

08006640 <_printf_i>:
 8006640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	7e0f      	ldrb	r7, [r1, #24]
 8006646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006648:	2f78      	cmp	r7, #120	; 0x78
 800664a:	4691      	mov	r9, r2
 800664c:	4680      	mov	r8, r0
 800664e:	460c      	mov	r4, r1
 8006650:	469a      	mov	sl, r3
 8006652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006656:	d807      	bhi.n	8006668 <_printf_i+0x28>
 8006658:	2f62      	cmp	r7, #98	; 0x62
 800665a:	d80a      	bhi.n	8006672 <_printf_i+0x32>
 800665c:	2f00      	cmp	r7, #0
 800665e:	f000 80d8 	beq.w	8006812 <_printf_i+0x1d2>
 8006662:	2f58      	cmp	r7, #88	; 0x58
 8006664:	f000 80a3 	beq.w	80067ae <_printf_i+0x16e>
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006670:	e03a      	b.n	80066e8 <_printf_i+0xa8>
 8006672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006676:	2b15      	cmp	r3, #21
 8006678:	d8f6      	bhi.n	8006668 <_printf_i+0x28>
 800667a:	a101      	add	r1, pc, #4	; (adr r1, 8006680 <_printf_i+0x40>)
 800667c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066ed 	.word	0x080066ed
 8006688:	08006669 	.word	0x08006669
 800668c:	08006669 	.word	0x08006669
 8006690:	08006669 	.word	0x08006669
 8006694:	08006669 	.word	0x08006669
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006669 	.word	0x08006669
 80066a0:	08006669 	.word	0x08006669
 80066a4:	08006669 	.word	0x08006669
 80066a8:	08006669 	.word	0x08006669
 80066ac:	080067f9 	.word	0x080067f9
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	080067db 	.word	0x080067db
 80066b8:	08006669 	.word	0x08006669
 80066bc:	08006669 	.word	0x08006669
 80066c0:	0800681b 	.word	0x0800681b
 80066c4:	08006669 	.word	0x08006669
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006669 	.word	0x08006669
 80066d0:	08006669 	.word	0x08006669
 80066d4:	080067e3 	.word	0x080067e3
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	602a      	str	r2, [r5, #0]
 80066e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0a3      	b.n	8006834 <_printf_i+0x1f4>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	6829      	ldr	r1, [r5, #0]
 80066f0:	0606      	lsls	r6, r0, #24
 80066f2:	f101 0304 	add.w	r3, r1, #4
 80066f6:	d50a      	bpl.n	800670e <_printf_i+0xce>
 80066f8:	680e      	ldr	r6, [r1, #0]
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	da03      	bge.n	8006708 <_printf_i+0xc8>
 8006700:	232d      	movs	r3, #45	; 0x2d
 8006702:	4276      	negs	r6, r6
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006708:	485e      	ldr	r0, [pc, #376]	; (8006884 <_printf_i+0x244>)
 800670a:	230a      	movs	r3, #10
 800670c:	e019      	b.n	8006742 <_printf_i+0x102>
 800670e:	680e      	ldr	r6, [r1, #0]
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006716:	bf18      	it	ne
 8006718:	b236      	sxthne	r6, r6
 800671a:	e7ef      	b.n	80066fc <_printf_i+0xbc>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	6029      	str	r1, [r5, #0]
 8006724:	0601      	lsls	r1, r0, #24
 8006726:	d501      	bpl.n	800672c <_printf_i+0xec>
 8006728:	681e      	ldr	r6, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0xf2>
 800672c:	0646      	lsls	r6, r0, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0xe8>
 8006730:	881e      	ldrh	r6, [r3, #0]
 8006732:	4854      	ldr	r0, [pc, #336]	; (8006884 <_printf_i+0x244>)
 8006734:	2f6f      	cmp	r7, #111	; 0x6f
 8006736:	bf0c      	ite	eq
 8006738:	2308      	moveq	r3, #8
 800673a:	230a      	movne	r3, #10
 800673c:	2100      	movs	r1, #0
 800673e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006742:	6865      	ldr	r5, [r4, #4]
 8006744:	60a5      	str	r5, [r4, #8]
 8006746:	2d00      	cmp	r5, #0
 8006748:	bfa2      	ittt	ge
 800674a:	6821      	ldrge	r1, [r4, #0]
 800674c:	f021 0104 	bicge.w	r1, r1, #4
 8006750:	6021      	strge	r1, [r4, #0]
 8006752:	b90e      	cbnz	r6, 8006758 <_printf_i+0x118>
 8006754:	2d00      	cmp	r5, #0
 8006756:	d04d      	beq.n	80067f4 <_printf_i+0x1b4>
 8006758:	4615      	mov	r5, r2
 800675a:	fbb6 f1f3 	udiv	r1, r6, r3
 800675e:	fb03 6711 	mls	r7, r3, r1, r6
 8006762:	5dc7      	ldrb	r7, [r0, r7]
 8006764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006768:	4637      	mov	r7, r6
 800676a:	42bb      	cmp	r3, r7
 800676c:	460e      	mov	r6, r1
 800676e:	d9f4      	bls.n	800675a <_printf_i+0x11a>
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10b      	bne.n	800678c <_printf_i+0x14c>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	07de      	lsls	r6, r3, #31
 8006778:	d508      	bpl.n	800678c <_printf_i+0x14c>
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	4299      	cmp	r1, r3
 8006780:	bfde      	ittt	le
 8006782:	2330      	movle	r3, #48	; 0x30
 8006784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800678c:	1b52      	subs	r2, r2, r5
 800678e:	6122      	str	r2, [r4, #16]
 8006790:	f8cd a000 	str.w	sl, [sp]
 8006794:	464b      	mov	r3, r9
 8006796:	aa03      	add	r2, sp, #12
 8006798:	4621      	mov	r1, r4
 800679a:	4640      	mov	r0, r8
 800679c:	f7ff fee2 	bl	8006564 <_printf_common>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d14c      	bne.n	800683e <_printf_i+0x1fe>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	b004      	add	sp, #16
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	4835      	ldr	r0, [pc, #212]	; (8006884 <_printf_i+0x244>)
 80067b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067b4:	6829      	ldr	r1, [r5, #0]
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067bc:	6029      	str	r1, [r5, #0]
 80067be:	061d      	lsls	r5, r3, #24
 80067c0:	d514      	bpl.n	80067ec <_printf_i+0x1ac>
 80067c2:	07df      	lsls	r7, r3, #31
 80067c4:	bf44      	itt	mi
 80067c6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ca:	6023      	strmi	r3, [r4, #0]
 80067cc:	b91e      	cbnz	r6, 80067d6 <_printf_i+0x196>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	2310      	movs	r3, #16
 80067d8:	e7b0      	b.n	800673c <_printf_i+0xfc>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2378      	movs	r3, #120	; 0x78
 80067e4:	4828      	ldr	r0, [pc, #160]	; (8006888 <_printf_i+0x248>)
 80067e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ea:	e7e3      	b.n	80067b4 <_printf_i+0x174>
 80067ec:	0659      	lsls	r1, r3, #25
 80067ee:	bf48      	it	mi
 80067f0:	b2b6      	uxthmi	r6, r6
 80067f2:	e7e6      	b.n	80067c2 <_printf_i+0x182>
 80067f4:	4615      	mov	r5, r2
 80067f6:	e7bb      	b.n	8006770 <_printf_i+0x130>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	6826      	ldr	r6, [r4, #0]
 80067fc:	6961      	ldr	r1, [r4, #20]
 80067fe:	1d18      	adds	r0, r3, #4
 8006800:	6028      	str	r0, [r5, #0]
 8006802:	0635      	lsls	r5, r6, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	d501      	bpl.n	800680c <_printf_i+0x1cc>
 8006808:	6019      	str	r1, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0x1d2>
 800680c:	0670      	lsls	r0, r6, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0x1c8>
 8006810:	8019      	strh	r1, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	4615      	mov	r5, r2
 8006818:	e7ba      	b.n	8006790 <_printf_i+0x150>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	4628      	mov	r0, r5
 8006828:	f7f9 fcda 	bl	80001e0 <memchr>
 800682c:	b108      	cbz	r0, 8006832 <_printf_i+0x1f2>
 800682e:	1b40      	subs	r0, r0, r5
 8006830:	6060      	str	r0, [r4, #4]
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2300      	movs	r3, #0
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800683c:	e7a8      	b.n	8006790 <_printf_i+0x150>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	462a      	mov	r2, r5
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d0ab      	beq.n	80067a4 <_printf_i+0x164>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d413      	bmi.n	800687a <_printf_i+0x23a>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e7a4      	b.n	80067a8 <_printf_i+0x168>
 800685e:	2301      	movs	r3, #1
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d09b      	beq.n	80067a4 <_printf_i+0x164>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	1a5b      	subs	r3, r3, r1
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf2      	bgt.n	800685e <_printf_i+0x21e>
 8006878:	e7eb      	b.n	8006852 <_printf_i+0x212>
 800687a:	2500      	movs	r5, #0
 800687c:	f104 0619 	add.w	r6, r4, #25
 8006880:	e7f5      	b.n	800686e <_printf_i+0x22e>
 8006882:	bf00      	nop
 8006884:	0800b850 	.word	0x0800b850
 8006888:	0800b861 	.word	0x0800b861

0800688c <_scanf_float>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	b087      	sub	sp, #28
 8006892:	4617      	mov	r7, r2
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	688b      	ldr	r3, [r1, #8]
 8006898:	1e5a      	subs	r2, r3, #1
 800689a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800689e:	bf83      	ittte	hi
 80068a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068a4:	195b      	addhi	r3, r3, r5
 80068a6:	9302      	strhi	r3, [sp, #8]
 80068a8:	2300      	movls	r3, #0
 80068aa:	bf86      	itte	hi
 80068ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068b0:	608b      	strhi	r3, [r1, #8]
 80068b2:	9302      	strls	r3, [sp, #8]
 80068b4:	680b      	ldr	r3, [r1, #0]
 80068b6:	468b      	mov	fp, r1
 80068b8:	2500      	movs	r5, #0
 80068ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068be:	f84b 3b1c 	str.w	r3, [fp], #28
 80068c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068c6:	4680      	mov	r8, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	465e      	mov	r6, fp
 80068cc:	46aa      	mov	sl, r5
 80068ce:	46a9      	mov	r9, r5
 80068d0:	9501      	str	r5, [sp, #4]
 80068d2:	68a2      	ldr	r2, [r4, #8]
 80068d4:	b152      	cbz	r2, 80068ec <_scanf_float+0x60>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b4e      	cmp	r3, #78	; 0x4e
 80068dc:	d864      	bhi.n	80069a8 <_scanf_float+0x11c>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d83c      	bhi.n	800695c <_scanf_float+0xd0>
 80068e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068e6:	b2c8      	uxtb	r0, r1
 80068e8:	280e      	cmp	r0, #14
 80068ea:	d93a      	bls.n	8006962 <_scanf_float+0xd6>
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	d003      	beq.n	80068fa <_scanf_float+0x6e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068fe:	f1ba 0f01 	cmp.w	sl, #1
 8006902:	f200 8113 	bhi.w	8006b2c <_scanf_float+0x2a0>
 8006906:	455e      	cmp	r6, fp
 8006908:	f200 8105 	bhi.w	8006b16 <_scanf_float+0x28a>
 800690c:	2501      	movs	r5, #1
 800690e:	4628      	mov	r0, r5
 8006910:	b007      	add	sp, #28
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800691a:	2a0d      	cmp	r2, #13
 800691c:	d8e6      	bhi.n	80068ec <_scanf_float+0x60>
 800691e:	a101      	add	r1, pc, #4	; (adr r1, 8006924 <_scanf_float+0x98>)
 8006920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006924:	08006a63 	.word	0x08006a63
 8006928:	080068ed 	.word	0x080068ed
 800692c:	080068ed 	.word	0x080068ed
 8006930:	080068ed 	.word	0x080068ed
 8006934:	08006ac3 	.word	0x08006ac3
 8006938:	08006a9b 	.word	0x08006a9b
 800693c:	080068ed 	.word	0x080068ed
 8006940:	080068ed 	.word	0x080068ed
 8006944:	08006a71 	.word	0x08006a71
 8006948:	080068ed 	.word	0x080068ed
 800694c:	080068ed 	.word	0x080068ed
 8006950:	080068ed 	.word	0x080068ed
 8006954:	080068ed 	.word	0x080068ed
 8006958:	08006a29 	.word	0x08006a29
 800695c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006960:	e7db      	b.n	800691a <_scanf_float+0x8e>
 8006962:	290e      	cmp	r1, #14
 8006964:	d8c2      	bhi.n	80068ec <_scanf_float+0x60>
 8006966:	a001      	add	r0, pc, #4	; (adr r0, 800696c <_scanf_float+0xe0>)
 8006968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800696c:	08006a1b 	.word	0x08006a1b
 8006970:	080068ed 	.word	0x080068ed
 8006974:	08006a1b 	.word	0x08006a1b
 8006978:	08006aaf 	.word	0x08006aaf
 800697c:	080068ed 	.word	0x080068ed
 8006980:	080069c9 	.word	0x080069c9
 8006984:	08006a05 	.word	0x08006a05
 8006988:	08006a05 	.word	0x08006a05
 800698c:	08006a05 	.word	0x08006a05
 8006990:	08006a05 	.word	0x08006a05
 8006994:	08006a05 	.word	0x08006a05
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006a05 	.word	0x08006a05
 80069a4:	08006a05 	.word	0x08006a05
 80069a8:	2b6e      	cmp	r3, #110	; 0x6e
 80069aa:	d809      	bhi.n	80069c0 <_scanf_float+0x134>
 80069ac:	2b60      	cmp	r3, #96	; 0x60
 80069ae:	d8b2      	bhi.n	8006916 <_scanf_float+0x8a>
 80069b0:	2b54      	cmp	r3, #84	; 0x54
 80069b2:	d077      	beq.n	8006aa4 <_scanf_float+0x218>
 80069b4:	2b59      	cmp	r3, #89	; 0x59
 80069b6:	d199      	bne.n	80068ec <_scanf_float+0x60>
 80069b8:	2d07      	cmp	r5, #7
 80069ba:	d197      	bne.n	80068ec <_scanf_float+0x60>
 80069bc:	2508      	movs	r5, #8
 80069be:	e029      	b.n	8006a14 <_scanf_float+0x188>
 80069c0:	2b74      	cmp	r3, #116	; 0x74
 80069c2:	d06f      	beq.n	8006aa4 <_scanf_float+0x218>
 80069c4:	2b79      	cmp	r3, #121	; 0x79
 80069c6:	e7f6      	b.n	80069b6 <_scanf_float+0x12a>
 80069c8:	6821      	ldr	r1, [r4, #0]
 80069ca:	05c8      	lsls	r0, r1, #23
 80069cc:	d51a      	bpl.n	8006a04 <_scanf_float+0x178>
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069d4:	6021      	str	r1, [r4, #0]
 80069d6:	f109 0901 	add.w	r9, r9, #1
 80069da:	b11b      	cbz	r3, 80069e4 <_scanf_float+0x158>
 80069dc:	3b01      	subs	r3, #1
 80069de:	3201      	adds	r2, #1
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	60a2      	str	r2, [r4, #8]
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	60a3      	str	r3, [r4, #8]
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	3301      	adds	r3, #1
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	f340 8084 	ble.w	8006b04 <_scanf_float+0x278>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	e766      	b.n	80068d2 <_scanf_float+0x46>
 8006a04:	eb1a 0f05 	cmn.w	sl, r5
 8006a08:	f47f af70 	bne.w	80068ec <_scanf_float+0x60>
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	f806 3b01 	strb.w	r3, [r6], #1
 8006a18:	e7e4      	b.n	80069e4 <_scanf_float+0x158>
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	0610      	lsls	r0, r2, #24
 8006a1e:	f57f af65 	bpl.w	80068ec <_scanf_float+0x60>
 8006a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a26:	e7f4      	b.n	8006a12 <_scanf_float+0x186>
 8006a28:	f1ba 0f00 	cmp.w	sl, #0
 8006a2c:	d10e      	bne.n	8006a4c <_scanf_float+0x1c0>
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	d10e      	bne.n	8006a52 <_scanf_float+0x1c6>
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a3e:	d108      	bne.n	8006a52 <_scanf_float+0x1c6>
 8006a40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a44:	6022      	str	r2, [r4, #0]
 8006a46:	f04f 0a01 	mov.w	sl, #1
 8006a4a:	e7e3      	b.n	8006a14 <_scanf_float+0x188>
 8006a4c:	f1ba 0f02 	cmp.w	sl, #2
 8006a50:	d055      	beq.n	8006afe <_scanf_float+0x272>
 8006a52:	2d01      	cmp	r5, #1
 8006a54:	d002      	beq.n	8006a5c <_scanf_float+0x1d0>
 8006a56:	2d04      	cmp	r5, #4
 8006a58:	f47f af48 	bne.w	80068ec <_scanf_float+0x60>
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	b2ed      	uxtb	r5, r5
 8006a60:	e7d8      	b.n	8006a14 <_scanf_float+0x188>
 8006a62:	f1ba 0f01 	cmp.w	sl, #1
 8006a66:	f47f af41 	bne.w	80068ec <_scanf_float+0x60>
 8006a6a:	f04f 0a02 	mov.w	sl, #2
 8006a6e:	e7d1      	b.n	8006a14 <_scanf_float+0x188>
 8006a70:	b97d      	cbnz	r5, 8006a92 <_scanf_float+0x206>
 8006a72:	f1b9 0f00 	cmp.w	r9, #0
 8006a76:	f47f af3c 	bne.w	80068f2 <_scanf_float+0x66>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a84:	f47f af39 	bne.w	80068fa <_scanf_float+0x6e>
 8006a88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	2501      	movs	r5, #1
 8006a90:	e7c0      	b.n	8006a14 <_scanf_float+0x188>
 8006a92:	2d03      	cmp	r5, #3
 8006a94:	d0e2      	beq.n	8006a5c <_scanf_float+0x1d0>
 8006a96:	2d05      	cmp	r5, #5
 8006a98:	e7de      	b.n	8006a58 <_scanf_float+0x1cc>
 8006a9a:	2d02      	cmp	r5, #2
 8006a9c:	f47f af26 	bne.w	80068ec <_scanf_float+0x60>
 8006aa0:	2503      	movs	r5, #3
 8006aa2:	e7b7      	b.n	8006a14 <_scanf_float+0x188>
 8006aa4:	2d06      	cmp	r5, #6
 8006aa6:	f47f af21 	bne.w	80068ec <_scanf_float+0x60>
 8006aaa:	2507      	movs	r5, #7
 8006aac:	e7b2      	b.n	8006a14 <_scanf_float+0x188>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	0591      	lsls	r1, r2, #22
 8006ab2:	f57f af1b 	bpl.w	80068ec <_scanf_float+0x60>
 8006ab6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ac0:	e7a8      	b.n	8006a14 <_scanf_float+0x188>
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ac8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006acc:	d006      	beq.n	8006adc <_scanf_float+0x250>
 8006ace:	0550      	lsls	r0, r2, #21
 8006ad0:	f57f af0c 	bpl.w	80068ec <_scanf_float+0x60>
 8006ad4:	f1b9 0f00 	cmp.w	r9, #0
 8006ad8:	f43f af0f 	beq.w	80068fa <_scanf_float+0x6e>
 8006adc:	0591      	lsls	r1, r2, #22
 8006ade:	bf58      	it	pl
 8006ae0:	9901      	ldrpl	r1, [sp, #4]
 8006ae2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ae6:	bf58      	it	pl
 8006ae8:	eba9 0101 	subpl.w	r1, r9, r1
 8006aec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006af0:	bf58      	it	pl
 8006af2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	f04f 0900 	mov.w	r9, #0
 8006afc:	e78a      	b.n	8006a14 <_scanf_float+0x188>
 8006afe:	f04f 0a03 	mov.w	sl, #3
 8006b02:	e787      	b.n	8006a14 <_scanf_float+0x188>
 8006b04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4798      	blx	r3
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f43f aedf 	beq.w	80068d2 <_scanf_float+0x46>
 8006b14:	e6ea      	b.n	80068ec <_scanf_float+0x60>
 8006b16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b1e:	463a      	mov	r2, r7
 8006b20:	4640      	mov	r0, r8
 8006b22:	4798      	blx	r3
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	e6ec      	b.n	8006906 <_scanf_float+0x7a>
 8006b2c:	1e6b      	subs	r3, r5, #1
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d825      	bhi.n	8006b7e <_scanf_float+0x2f2>
 8006b32:	2d02      	cmp	r5, #2
 8006b34:	d836      	bhi.n	8006ba4 <_scanf_float+0x318>
 8006b36:	455e      	cmp	r6, fp
 8006b38:	f67f aee8 	bls.w	800690c <_scanf_float+0x80>
 8006b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b44:	463a      	mov	r2, r7
 8006b46:	4640      	mov	r0, r8
 8006b48:	4798      	blx	r3
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	6123      	str	r3, [r4, #16]
 8006b50:	e7f1      	b.n	8006b36 <_scanf_float+0x2aa>
 8006b52:	9802      	ldr	r0, [sp, #8]
 8006b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b5c:	9002      	str	r0, [sp, #8]
 8006b5e:	463a      	mov	r2, r7
 8006b60:	4640      	mov	r0, r8
 8006b62:	4798      	blx	r3
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b6e:	fa5f fa8a 	uxtb.w	sl, sl
 8006b72:	f1ba 0f02 	cmp.w	sl, #2
 8006b76:	d1ec      	bne.n	8006b52 <_scanf_float+0x2c6>
 8006b78:	3d03      	subs	r5, #3
 8006b7a:	b2ed      	uxtb	r5, r5
 8006b7c:	1b76      	subs	r6, r6, r5
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	05da      	lsls	r2, r3, #23
 8006b82:	d52f      	bpl.n	8006be4 <_scanf_float+0x358>
 8006b84:	055b      	lsls	r3, r3, #21
 8006b86:	d510      	bpl.n	8006baa <_scanf_float+0x31e>
 8006b88:	455e      	cmp	r6, fp
 8006b8a:	f67f aebf 	bls.w	800690c <_scanf_float+0x80>
 8006b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b96:	463a      	mov	r2, r7
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4798      	blx	r3
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	e7f1      	b.n	8006b88 <_scanf_float+0x2fc>
 8006ba4:	46aa      	mov	sl, r5
 8006ba6:	9602      	str	r6, [sp, #8]
 8006ba8:	e7df      	b.n	8006b6a <_scanf_float+0x2de>
 8006baa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	2965      	cmp	r1, #101	; 0x65
 8006bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	d00c      	beq.n	8006bd8 <_scanf_float+0x34c>
 8006bbe:	2945      	cmp	r1, #69	; 0x45
 8006bc0:	d00a      	beq.n	8006bd8 <_scanf_float+0x34c>
 8006bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4798      	blx	r3
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	1eb5      	subs	r5, r6, #2
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bdc:	463a      	mov	r2, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	4798      	blx	r3
 8006be2:	462e      	mov	r6, r5
 8006be4:	6825      	ldr	r5, [r4, #0]
 8006be6:	f015 0510 	ands.w	r5, r5, #16
 8006bea:	d159      	bne.n	8006ca0 <_scanf_float+0x414>
 8006bec:	7035      	strb	r5, [r6, #0]
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf8:	d11b      	bne.n	8006c32 <_scanf_float+0x3a6>
 8006bfa:	9b01      	ldr	r3, [sp, #4]
 8006bfc:	454b      	cmp	r3, r9
 8006bfe:	eba3 0209 	sub.w	r2, r3, r9
 8006c02:	d123      	bne.n	8006c4c <_scanf_float+0x3c0>
 8006c04:	2200      	movs	r2, #0
 8006c06:	4659      	mov	r1, fp
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f000 ffcb 	bl	8007ba4 <_strtod_r>
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	f012 0f02 	tst.w	r2, #2
 8006c16:	ec57 6b10 	vmov	r6, r7, d0
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	d021      	beq.n	8006c62 <_scanf_float+0x3d6>
 8006c1e:	9903      	ldr	r1, [sp, #12]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	600a      	str	r2, [r1, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	e9c3 6700 	strd	r6, r7, [r3]
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60e3      	str	r3, [r4, #12]
 8006c30:	e66d      	b.n	800690e <_scanf_float+0x82>
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0e5      	beq.n	8006c04 <_scanf_float+0x378>
 8006c38:	9905      	ldr	r1, [sp, #20]
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	3101      	adds	r1, #1
 8006c40:	4640      	mov	r0, r8
 8006c42:	f001 f837 	bl	8007cb4 <_strtol_r>
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	9e05      	ldr	r6, [sp, #20]
 8006c4a:	1ac2      	subs	r2, r0, r3
 8006c4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c50:	429e      	cmp	r6, r3
 8006c52:	bf28      	it	cs
 8006c54:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c58:	4912      	ldr	r1, [pc, #72]	; (8006ca4 <_scanf_float+0x418>)
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f8d0 	bl	8006e00 <siprintf>
 8006c60:	e7d0      	b.n	8006c04 <_scanf_float+0x378>
 8006c62:	9903      	ldr	r1, [sp, #12]
 8006c64:	f012 0f04 	tst.w	r2, #4
 8006c68:	f103 0204 	add.w	r2, r3, #4
 8006c6c:	600a      	str	r2, [r1, #0]
 8006c6e:	d1d9      	bne.n	8006c24 <_scanf_float+0x398>
 8006c70:	f8d3 8000 	ldr.w	r8, [r3]
 8006c74:	ee10 2a10 	vmov	r2, s0
 8006c78:	ee10 0a10 	vmov	r0, s0
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 ff54 	bl	8000b2c <__aeabi_dcmpun>
 8006c84:	b128      	cbz	r0, 8006c92 <_scanf_float+0x406>
 8006c86:	4808      	ldr	r0, [pc, #32]	; (8006ca8 <_scanf_float+0x41c>)
 8006c88:	f000 f8b4 	bl	8006df4 <nanf>
 8006c8c:	ed88 0a00 	vstr	s0, [r8]
 8006c90:	e7cb      	b.n	8006c2a <_scanf_float+0x39e>
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 ffa7 	bl	8000be8 <__aeabi_d2f>
 8006c9a:	f8c8 0000 	str.w	r0, [r8]
 8006c9e:	e7c4      	b.n	8006c2a <_scanf_float+0x39e>
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	e634      	b.n	800690e <_scanf_float+0x82>
 8006ca4:	0800b872 	.word	0x0800b872
 8006ca8:	0800b6d7 	.word	0x0800b6d7

08006cac <iprintf>:
 8006cac:	b40f      	push	{r0, r1, r2, r3}
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <iprintf+0x2c>)
 8006cb0:	b513      	push	{r0, r1, r4, lr}
 8006cb2:	681c      	ldr	r4, [r3, #0]
 8006cb4:	b124      	cbz	r4, 8006cc0 <iprintf+0x14>
 8006cb6:	69a3      	ldr	r3, [r4, #24]
 8006cb8:	b913      	cbnz	r3, 8006cc0 <iprintf+0x14>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f002 f874 	bl	8008da8 <__sinit>
 8006cc0:	ab05      	add	r3, sp, #20
 8006cc2:	9a04      	ldr	r2, [sp, #16]
 8006cc4:	68a1      	ldr	r1, [r4, #8]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f003 fe31 	bl	800a930 <_vfiprintf_r>
 8006cce:	b002      	add	sp, #8
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	b004      	add	sp, #16
 8006cd6:	4770      	bx	lr
 8006cd8:	20000040 	.word	0x20000040

08006cdc <putchar>:
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <putchar+0x28>)
 8006cde:	b513      	push	{r0, r1, r4, lr}
 8006ce0:	681c      	ldr	r4, [r3, #0]
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	b134      	cbz	r4, 8006cf4 <putchar+0x18>
 8006ce6:	69a3      	ldr	r3, [r4, #24]
 8006ce8:	b923      	cbnz	r3, 8006cf4 <putchar+0x18>
 8006cea:	9001      	str	r0, [sp, #4]
 8006cec:	4620      	mov	r0, r4
 8006cee:	f002 f85b 	bl	8008da8 <__sinit>
 8006cf2:	9901      	ldr	r1, [sp, #4]
 8006cf4:	68a2      	ldr	r2, [r4, #8]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	b002      	add	sp, #8
 8006cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfe:	f004 b899 	b.w	800ae34 <_putc_r>
 8006d02:	bf00      	nop
 8006d04:	20000040 	.word	0x20000040

08006d08 <_puts_r>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b118      	cbz	r0, 8006d18 <_puts_r+0x10>
 8006d10:	6983      	ldr	r3, [r0, #24]
 8006d12:	b90b      	cbnz	r3, 8006d18 <_puts_r+0x10>
 8006d14:	f002 f848 	bl	8008da8 <__sinit>
 8006d18:	69ab      	ldr	r3, [r5, #24]
 8006d1a:	68ac      	ldr	r4, [r5, #8]
 8006d1c:	b913      	cbnz	r3, 8006d24 <_puts_r+0x1c>
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f002 f842 	bl	8008da8 <__sinit>
 8006d24:	4b2c      	ldr	r3, [pc, #176]	; (8006dd8 <_puts_r+0xd0>)
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d120      	bne.n	8006d6c <_puts_r+0x64>
 8006d2a:	686c      	ldr	r4, [r5, #4]
 8006d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d2e:	07db      	lsls	r3, r3, #31
 8006d30:	d405      	bmi.n	8006d3e <_puts_r+0x36>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	0598      	lsls	r0, r3, #22
 8006d36:	d402      	bmi.n	8006d3e <_puts_r+0x36>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f002 fc46 	bl	80095ca <__retarget_lock_acquire_recursive>
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	0719      	lsls	r1, r3, #28
 8006d42:	d51d      	bpl.n	8006d80 <_puts_r+0x78>
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b1db      	cbz	r3, 8006d80 <_puts_r+0x78>
 8006d48:	3e01      	subs	r6, #1
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d50:	3b01      	subs	r3, #1
 8006d52:	60a3      	str	r3, [r4, #8]
 8006d54:	bb39      	cbnz	r1, 8006da6 <_puts_r+0x9e>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da38      	bge.n	8006dcc <_puts_r+0xc4>
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	210a      	movs	r1, #10
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 ffaa 	bl	8007cb8 <__swbuf_r>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d011      	beq.n	8006d8c <_puts_r+0x84>
 8006d68:	250a      	movs	r5, #10
 8006d6a:	e011      	b.n	8006d90 <_puts_r+0x88>
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <_puts_r+0xd4>)
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d101      	bne.n	8006d76 <_puts_r+0x6e>
 8006d72:	68ac      	ldr	r4, [r5, #8]
 8006d74:	e7da      	b.n	8006d2c <_puts_r+0x24>
 8006d76:	4b1a      	ldr	r3, [pc, #104]	; (8006de0 <_puts_r+0xd8>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	bf08      	it	eq
 8006d7c:	68ec      	ldreq	r4, [r5, #12]
 8006d7e:	e7d5      	b.n	8006d2c <_puts_r+0x24>
 8006d80:	4621      	mov	r1, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fffc 	bl	8007d80 <__swsetup_r>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d0dd      	beq.n	8006d48 <_puts_r+0x40>
 8006d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d92:	07da      	lsls	r2, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_puts_r+0x9a>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	059b      	lsls	r3, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_puts_r+0x9a>
 8006d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9e:	f002 fc15 	bl	80095cc <__retarget_lock_release_recursive>
 8006da2:	4628      	mov	r0, r5
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da04      	bge.n	8006db4 <_puts_r+0xac>
 8006daa:	69a2      	ldr	r2, [r4, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	dc06      	bgt.n	8006dbe <_puts_r+0xb6>
 8006db0:	290a      	cmp	r1, #10
 8006db2:	d004      	beq.n	8006dbe <_puts_r+0xb6>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	7019      	strb	r1, [r3, #0]
 8006dbc:	e7c5      	b.n	8006d4a <_puts_r+0x42>
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 ff79 	bl	8007cb8 <__swbuf_r>
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d1bf      	bne.n	8006d4a <_puts_r+0x42>
 8006dca:	e7df      	b.n	8006d8c <_puts_r+0x84>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	250a      	movs	r5, #10
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	6022      	str	r2, [r4, #0]
 8006dd4:	701d      	strb	r5, [r3, #0]
 8006dd6:	e7db      	b.n	8006d90 <_puts_r+0x88>
 8006dd8:	0800ba7c 	.word	0x0800ba7c
 8006ddc:	0800ba9c 	.word	0x0800ba9c
 8006de0:	0800ba5c 	.word	0x0800ba5c

08006de4 <puts>:
 8006de4:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <puts+0xc>)
 8006de6:	4601      	mov	r1, r0
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f7ff bf8d 	b.w	8006d08 <_puts_r>
 8006dee:	bf00      	nop
 8006df0:	20000040 	.word	0x20000040

08006df4 <nanf>:
 8006df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006dfc <nanf+0x8>
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	7fc00000 	.word	0x7fc00000

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	b500      	push	{lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	ab1d      	add	r3, sp, #116	; 0x74
 8006e08:	9002      	str	r0, [sp, #8]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <siprintf+0x38>)
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f003 fa88 	bl	800a338 <_svfiprintf_r>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	20000040 	.word	0x20000040
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <siscanf>:
 8006e40:	b40e      	push	{r1, r2, r3}
 8006e42:	b510      	push	{r4, lr}
 8006e44:	b09f      	sub	sp, #124	; 0x7c
 8006e46:	ac21      	add	r4, sp, #132	; 0x84
 8006e48:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e4c:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e50:	9201      	str	r2, [sp, #4]
 8006e52:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006e56:	9004      	str	r0, [sp, #16]
 8006e58:	9008      	str	r0, [sp, #32]
 8006e5a:	f7f9 f9b9 	bl	80001d0 <strlen>
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <siscanf+0x50>)
 8006e60:	9005      	str	r0, [sp, #20]
 8006e62:	9009      	str	r0, [sp, #36]	; 0x24
 8006e64:	930d      	str	r3, [sp, #52]	; 0x34
 8006e66:	480b      	ldr	r0, [pc, #44]	; (8006e94 <siscanf+0x54>)
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	9403      	str	r4, [sp, #12]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9311      	str	r3, [sp, #68]	; 0x44
 8006e72:	9316      	str	r3, [sp, #88]	; 0x58
 8006e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4623      	mov	r3, r4
 8006e80:	f003 fbb4 	bl	800a5ec <__ssvfiscanf_r>
 8006e84:	b01f      	add	sp, #124	; 0x7c
 8006e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8a:	b003      	add	sp, #12
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	08006ebb 	.word	0x08006ebb
 8006e94:	20000040 	.word	0x20000040

08006e98 <__sread>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	f004 f810 	bl	800aec4 <_read_r>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	bfab      	itete	ge
 8006ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8006eac:	181b      	addge	r3, r3, r0
 8006eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eb2:	bfac      	ite	ge
 8006eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eb6:	81a3      	strhlt	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__seofread>:
 8006eba:	2000      	movs	r0, #0
 8006ebc:	4770      	bx	lr

08006ebe <__swrite>:
 8006ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	461f      	mov	r7, r3
 8006ec4:	898b      	ldrh	r3, [r1, #12]
 8006ec6:	05db      	lsls	r3, r3, #23
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4616      	mov	r6, r2
 8006ece:	d505      	bpl.n	8006edc <__swrite+0x1e>
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f002 fb7a 	bl	80095d0 <_lseek_r>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	463b      	mov	r3, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	f000 bf33 	b.w	8007d5c <_write_r>

08006ef6 <__sseek>:
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f002 fb67 	bl	80095d0 <_lseek_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	bf15      	itete	ne
 8006f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f12:	81a3      	strheq	r3, [r4, #12]
 8006f14:	bf18      	it	ne
 8006f16:	81a3      	strhne	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__sclose>:
 8006f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1e:	f000 bf9d 	b.w	8007e5c <_close_r>

08006f22 <strcpy>:
 8006f22:	4603      	mov	r3, r0
 8006f24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f28:	f803 2b01 	strb.w	r2, [r3], #1
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d1f9      	bne.n	8006f24 <strcpy+0x2>
 8006f30:	4770      	bx	lr

08006f32 <strncmp>:
 8006f32:	b510      	push	{r4, lr}
 8006f34:	b17a      	cbz	r2, 8006f56 <strncmp+0x24>
 8006f36:	4603      	mov	r3, r0
 8006f38:	3901      	subs	r1, #1
 8006f3a:	1884      	adds	r4, r0, r2
 8006f3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f44:	4290      	cmp	r0, r2
 8006f46:	d101      	bne.n	8006f4c <strncmp+0x1a>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d101      	bne.n	8006f50 <strncmp+0x1e>
 8006f4c:	1a80      	subs	r0, r0, r2
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1f3      	bne.n	8006f3c <strncmp+0xa>
 8006f54:	e7fa      	b.n	8006f4c <strncmp+0x1a>
 8006f56:	4610      	mov	r0, r2
 8006f58:	e7f9      	b.n	8006f4e <strncmp+0x1c>

08006f5a <sulp>:
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	ec45 4b10 	vmov	d0, r4, r5
 8006f64:	4616      	mov	r6, r2
 8006f66:	f002 ff45 	bl	8009df4 <__ulp>
 8006f6a:	ec51 0b10 	vmov	r0, r1, d0
 8006f6e:	b17e      	cbz	r6, 8006f90 <sulp+0x36>
 8006f70:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dd09      	ble.n	8006f90 <sulp+0x36>
 8006f7c:	051b      	lsls	r3, r3, #20
 8006f7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f82:	2400      	movs	r4, #0
 8006f84:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	0000      	movs	r0, r0
 8006f94:	0000      	movs	r0, r0
	...

08006f98 <_strtod_l>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	ed2d 8b02 	vpush	{d8}
 8006fa0:	b09d      	sub	sp, #116	; 0x74
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9318      	str	r3, [sp, #96]	; 0x60
 8006fa8:	4ba2      	ldr	r3, [pc, #648]	; (8007234 <_strtod_l+0x29c>)
 8006faa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	9305      	str	r3, [sp, #20]
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4688      	mov	r8, r1
 8006fb6:	f7f9 f90b 	bl	80001d0 <strlen>
 8006fba:	f04f 0a00 	mov.w	sl, #0
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	f04f 0b00 	mov.w	fp, #0
 8006fc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	2a2b      	cmp	r2, #43	; 0x2b
 8006fce:	d04e      	beq.n	800706e <_strtod_l+0xd6>
 8006fd0:	d83b      	bhi.n	800704a <_strtod_l+0xb2>
 8006fd2:	2a0d      	cmp	r2, #13
 8006fd4:	d834      	bhi.n	8007040 <_strtod_l+0xa8>
 8006fd6:	2a08      	cmp	r2, #8
 8006fd8:	d834      	bhi.n	8007044 <_strtod_l+0xac>
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	d03e      	beq.n	800705c <_strtod_l+0xc4>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006fe4:	7833      	ldrb	r3, [r6, #0]
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	f040 80b0 	bne.w	800714c <_strtod_l+0x1b4>
 8006fec:	7873      	ldrb	r3, [r6, #1]
 8006fee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ff2:	2b58      	cmp	r3, #88	; 0x58
 8006ff4:	d168      	bne.n	80070c8 <_strtod_l+0x130>
 8006ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	ab18      	add	r3, sp, #96	; 0x60
 8006ffc:	9702      	str	r7, [sp, #8]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4a8d      	ldr	r2, [pc, #564]	; (8007238 <_strtod_l+0x2a0>)
 8007002:	ab19      	add	r3, sp, #100	; 0x64
 8007004:	a917      	add	r1, sp, #92	; 0x5c
 8007006:	4620      	mov	r0, r4
 8007008:	f001 ffd2 	bl	8008fb0 <__gethex>
 800700c:	f010 0707 	ands.w	r7, r0, #7
 8007010:	4605      	mov	r5, r0
 8007012:	d005      	beq.n	8007020 <_strtod_l+0x88>
 8007014:	2f06      	cmp	r7, #6
 8007016:	d12c      	bne.n	8007072 <_strtod_l+0xda>
 8007018:	3601      	adds	r6, #1
 800701a:	2300      	movs	r3, #0
 800701c:	9617      	str	r6, [sp, #92]	; 0x5c
 800701e:	930a      	str	r3, [sp, #40]	; 0x28
 8007020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 8590 	bne.w	8007b48 <_strtod_l+0xbb0>
 8007028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702a:	b1eb      	cbz	r3, 8007068 <_strtod_l+0xd0>
 800702c:	4652      	mov	r2, sl
 800702e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007032:	ec43 2b10 	vmov	d0, r2, r3
 8007036:	b01d      	add	sp, #116	; 0x74
 8007038:	ecbd 8b02 	vpop	{d8}
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	2a20      	cmp	r2, #32
 8007042:	d1cc      	bne.n	8006fde <_strtod_l+0x46>
 8007044:	3301      	adds	r3, #1
 8007046:	9317      	str	r3, [sp, #92]	; 0x5c
 8007048:	e7be      	b.n	8006fc8 <_strtod_l+0x30>
 800704a:	2a2d      	cmp	r2, #45	; 0x2d
 800704c:	d1c7      	bne.n	8006fde <_strtod_l+0x46>
 800704e:	2201      	movs	r2, #1
 8007050:	920a      	str	r2, [sp, #40]	; 0x28
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	9217      	str	r2, [sp, #92]	; 0x5c
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1c2      	bne.n	8006fe2 <_strtod_l+0x4a>
 800705c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800705e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 856e 	bne.w	8007b44 <_strtod_l+0xbac>
 8007068:	4652      	mov	r2, sl
 800706a:	465b      	mov	r3, fp
 800706c:	e7e1      	b.n	8007032 <_strtod_l+0x9a>
 800706e:	2200      	movs	r2, #0
 8007070:	e7ee      	b.n	8007050 <_strtod_l+0xb8>
 8007072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007074:	b13a      	cbz	r2, 8007086 <_strtod_l+0xee>
 8007076:	2135      	movs	r1, #53	; 0x35
 8007078:	a81a      	add	r0, sp, #104	; 0x68
 800707a:	f002 ffc6 	bl	800a00a <__copybits>
 800707e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007080:	4620      	mov	r0, r4
 8007082:	f002 fb85 	bl	8009790 <_Bfree>
 8007086:	3f01      	subs	r7, #1
 8007088:	2f04      	cmp	r7, #4
 800708a:	d806      	bhi.n	800709a <_strtod_l+0x102>
 800708c:	e8df f007 	tbb	[pc, r7]
 8007090:	1714030a 	.word	0x1714030a
 8007094:	0a          	.byte	0x0a
 8007095:	00          	.byte	0x00
 8007096:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800709a:	0728      	lsls	r0, r5, #28
 800709c:	d5c0      	bpl.n	8007020 <_strtod_l+0x88>
 800709e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80070a2:	e7bd      	b.n	8007020 <_strtod_l+0x88>
 80070a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80070a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80070b6:	e7f0      	b.n	800709a <_strtod_l+0x102>
 80070b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800723c <_strtod_l+0x2a4>
 80070bc:	e7ed      	b.n	800709a <_strtod_l+0x102>
 80070be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80070c2:	f04f 3aff 	mov.w	sl, #4294967295
 80070c6:	e7e8      	b.n	800709a <_strtod_l+0x102>
 80070c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b30      	cmp	r3, #48	; 0x30
 80070d2:	d0f9      	beq.n	80070c8 <_strtod_l+0x130>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0a3      	beq.n	8007020 <_strtod_l+0x88>
 80070d8:	2301      	movs	r3, #1
 80070da:	f04f 0900 	mov.w	r9, #0
 80070de:	9304      	str	r3, [sp, #16]
 80070e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070e2:	9308      	str	r3, [sp, #32]
 80070e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80070e8:	464f      	mov	r7, r9
 80070ea:	220a      	movs	r2, #10
 80070ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80070ee:	7806      	ldrb	r6, [r0, #0]
 80070f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070f4:	b2d9      	uxtb	r1, r3
 80070f6:	2909      	cmp	r1, #9
 80070f8:	d92a      	bls.n	8007150 <_strtod_l+0x1b8>
 80070fa:	9905      	ldr	r1, [sp, #20]
 80070fc:	462a      	mov	r2, r5
 80070fe:	f7ff ff18 	bl	8006f32 <strncmp>
 8007102:	b398      	cbz	r0, 800716c <_strtod_l+0x1d4>
 8007104:	2000      	movs	r0, #0
 8007106:	4632      	mov	r2, r6
 8007108:	463d      	mov	r5, r7
 800710a:	9005      	str	r0, [sp, #20]
 800710c:	4603      	mov	r3, r0
 800710e:	2a65      	cmp	r2, #101	; 0x65
 8007110:	d001      	beq.n	8007116 <_strtod_l+0x17e>
 8007112:	2a45      	cmp	r2, #69	; 0x45
 8007114:	d118      	bne.n	8007148 <_strtod_l+0x1b0>
 8007116:	b91d      	cbnz	r5, 8007120 <_strtod_l+0x188>
 8007118:	9a04      	ldr	r2, [sp, #16]
 800711a:	4302      	orrs	r2, r0
 800711c:	d09e      	beq.n	800705c <_strtod_l+0xc4>
 800711e:	2500      	movs	r5, #0
 8007120:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007124:	f108 0201 	add.w	r2, r8, #1
 8007128:	9217      	str	r2, [sp, #92]	; 0x5c
 800712a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800712e:	2a2b      	cmp	r2, #43	; 0x2b
 8007130:	d075      	beq.n	800721e <_strtod_l+0x286>
 8007132:	2a2d      	cmp	r2, #45	; 0x2d
 8007134:	d07b      	beq.n	800722e <_strtod_l+0x296>
 8007136:	f04f 0c00 	mov.w	ip, #0
 800713a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800713e:	2909      	cmp	r1, #9
 8007140:	f240 8082 	bls.w	8007248 <_strtod_l+0x2b0>
 8007144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007148:	2600      	movs	r6, #0
 800714a:	e09d      	b.n	8007288 <_strtod_l+0x2f0>
 800714c:	2300      	movs	r3, #0
 800714e:	e7c4      	b.n	80070da <_strtod_l+0x142>
 8007150:	2f08      	cmp	r7, #8
 8007152:	bfd8      	it	le
 8007154:	9907      	ldrle	r1, [sp, #28]
 8007156:	f100 0001 	add.w	r0, r0, #1
 800715a:	bfda      	itte	le
 800715c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007160:	9307      	strle	r3, [sp, #28]
 8007162:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007166:	3701      	adds	r7, #1
 8007168:	9017      	str	r0, [sp, #92]	; 0x5c
 800716a:	e7bf      	b.n	80070ec <_strtod_l+0x154>
 800716c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800716e:	195a      	adds	r2, r3, r5
 8007170:	9217      	str	r2, [sp, #92]	; 0x5c
 8007172:	5d5a      	ldrb	r2, [r3, r5]
 8007174:	2f00      	cmp	r7, #0
 8007176:	d037      	beq.n	80071e8 <_strtod_l+0x250>
 8007178:	9005      	str	r0, [sp, #20]
 800717a:	463d      	mov	r5, r7
 800717c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007180:	2b09      	cmp	r3, #9
 8007182:	d912      	bls.n	80071aa <_strtod_l+0x212>
 8007184:	2301      	movs	r3, #1
 8007186:	e7c2      	b.n	800710e <_strtod_l+0x176>
 8007188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	9217      	str	r2, [sp, #92]	; 0x5c
 800718e:	785a      	ldrb	r2, [r3, #1]
 8007190:	3001      	adds	r0, #1
 8007192:	2a30      	cmp	r2, #48	; 0x30
 8007194:	d0f8      	beq.n	8007188 <_strtod_l+0x1f0>
 8007196:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800719a:	2b08      	cmp	r3, #8
 800719c:	f200 84d9 	bhi.w	8007b52 <_strtod_l+0xbba>
 80071a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a2:	9005      	str	r0, [sp, #20]
 80071a4:	2000      	movs	r0, #0
 80071a6:	9308      	str	r3, [sp, #32]
 80071a8:	4605      	mov	r5, r0
 80071aa:	3a30      	subs	r2, #48	; 0x30
 80071ac:	f100 0301 	add.w	r3, r0, #1
 80071b0:	d014      	beq.n	80071dc <_strtod_l+0x244>
 80071b2:	9905      	ldr	r1, [sp, #20]
 80071b4:	4419      	add	r1, r3
 80071b6:	9105      	str	r1, [sp, #20]
 80071b8:	462b      	mov	r3, r5
 80071ba:	eb00 0e05 	add.w	lr, r0, r5
 80071be:	210a      	movs	r1, #10
 80071c0:	4573      	cmp	r3, lr
 80071c2:	d113      	bne.n	80071ec <_strtod_l+0x254>
 80071c4:	182b      	adds	r3, r5, r0
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	f105 0501 	add.w	r5, r5, #1
 80071cc:	4405      	add	r5, r0
 80071ce:	dc1c      	bgt.n	800720a <_strtod_l+0x272>
 80071d0:	9907      	ldr	r1, [sp, #28]
 80071d2:	230a      	movs	r3, #10
 80071d4:	fb03 2301 	mla	r3, r3, r1, r2
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	2300      	movs	r3, #0
 80071dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071de:	1c51      	adds	r1, r2, #1
 80071e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80071e2:	7852      	ldrb	r2, [r2, #1]
 80071e4:	4618      	mov	r0, r3
 80071e6:	e7c9      	b.n	800717c <_strtod_l+0x1e4>
 80071e8:	4638      	mov	r0, r7
 80071ea:	e7d2      	b.n	8007192 <_strtod_l+0x1fa>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	dc04      	bgt.n	80071fa <_strtod_l+0x262>
 80071f0:	9e07      	ldr	r6, [sp, #28]
 80071f2:	434e      	muls	r6, r1
 80071f4:	9607      	str	r6, [sp, #28]
 80071f6:	3301      	adds	r3, #1
 80071f8:	e7e2      	b.n	80071c0 <_strtod_l+0x228>
 80071fa:	f103 0c01 	add.w	ip, r3, #1
 80071fe:	f1bc 0f10 	cmp.w	ip, #16
 8007202:	bfd8      	it	le
 8007204:	fb01 f909 	mulle.w	r9, r1, r9
 8007208:	e7f5      	b.n	80071f6 <_strtod_l+0x25e>
 800720a:	2d10      	cmp	r5, #16
 800720c:	bfdc      	itt	le
 800720e:	230a      	movle	r3, #10
 8007210:	fb03 2909 	mlale	r9, r3, r9, r2
 8007214:	e7e1      	b.n	80071da <_strtod_l+0x242>
 8007216:	2300      	movs	r3, #0
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	2301      	movs	r3, #1
 800721c:	e77c      	b.n	8007118 <_strtod_l+0x180>
 800721e:	f04f 0c00 	mov.w	ip, #0
 8007222:	f108 0202 	add.w	r2, r8, #2
 8007226:	9217      	str	r2, [sp, #92]	; 0x5c
 8007228:	f898 2002 	ldrb.w	r2, [r8, #2]
 800722c:	e785      	b.n	800713a <_strtod_l+0x1a2>
 800722e:	f04f 0c01 	mov.w	ip, #1
 8007232:	e7f6      	b.n	8007222 <_strtod_l+0x28a>
 8007234:	0800bb24 	.word	0x0800bb24
 8007238:	0800b878 	.word	0x0800b878
 800723c:	7ff00000 	.word	0x7ff00000
 8007240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007242:	1c51      	adds	r1, r2, #1
 8007244:	9117      	str	r1, [sp, #92]	; 0x5c
 8007246:	7852      	ldrb	r2, [r2, #1]
 8007248:	2a30      	cmp	r2, #48	; 0x30
 800724a:	d0f9      	beq.n	8007240 <_strtod_l+0x2a8>
 800724c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007250:	2908      	cmp	r1, #8
 8007252:	f63f af79 	bhi.w	8007148 <_strtod_l+0x1b0>
 8007256:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800725a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800725c:	9206      	str	r2, [sp, #24]
 800725e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007260:	1c51      	adds	r1, r2, #1
 8007262:	9117      	str	r1, [sp, #92]	; 0x5c
 8007264:	7852      	ldrb	r2, [r2, #1]
 8007266:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800726a:	2e09      	cmp	r6, #9
 800726c:	d937      	bls.n	80072de <_strtod_l+0x346>
 800726e:	9e06      	ldr	r6, [sp, #24]
 8007270:	1b89      	subs	r1, r1, r6
 8007272:	2908      	cmp	r1, #8
 8007274:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007278:	dc02      	bgt.n	8007280 <_strtod_l+0x2e8>
 800727a:	4576      	cmp	r6, lr
 800727c:	bfa8      	it	ge
 800727e:	4676      	movge	r6, lr
 8007280:	f1bc 0f00 	cmp.w	ip, #0
 8007284:	d000      	beq.n	8007288 <_strtod_l+0x2f0>
 8007286:	4276      	negs	r6, r6
 8007288:	2d00      	cmp	r5, #0
 800728a:	d14d      	bne.n	8007328 <_strtod_l+0x390>
 800728c:	9904      	ldr	r1, [sp, #16]
 800728e:	4301      	orrs	r1, r0
 8007290:	f47f aec6 	bne.w	8007020 <_strtod_l+0x88>
 8007294:	2b00      	cmp	r3, #0
 8007296:	f47f aee1 	bne.w	800705c <_strtod_l+0xc4>
 800729a:	2a69      	cmp	r2, #105	; 0x69
 800729c:	d027      	beq.n	80072ee <_strtod_l+0x356>
 800729e:	dc24      	bgt.n	80072ea <_strtod_l+0x352>
 80072a0:	2a49      	cmp	r2, #73	; 0x49
 80072a2:	d024      	beq.n	80072ee <_strtod_l+0x356>
 80072a4:	2a4e      	cmp	r2, #78	; 0x4e
 80072a6:	f47f aed9 	bne.w	800705c <_strtod_l+0xc4>
 80072aa:	499f      	ldr	r1, [pc, #636]	; (8007528 <_strtod_l+0x590>)
 80072ac:	a817      	add	r0, sp, #92	; 0x5c
 80072ae:	f002 f8d7 	bl	8009460 <__match>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	f43f aed2 	beq.w	800705c <_strtod_l+0xc4>
 80072b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b28      	cmp	r3, #40	; 0x28
 80072be:	d12d      	bne.n	800731c <_strtod_l+0x384>
 80072c0:	499a      	ldr	r1, [pc, #616]	; (800752c <_strtod_l+0x594>)
 80072c2:	aa1a      	add	r2, sp, #104	; 0x68
 80072c4:	a817      	add	r0, sp, #92	; 0x5c
 80072c6:	f002 f8df 	bl	8009488 <__hexnan>
 80072ca:	2805      	cmp	r0, #5
 80072cc:	d126      	bne.n	800731c <_strtod_l+0x384>
 80072ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80072d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80072d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80072dc:	e6a0      	b.n	8007020 <_strtod_l+0x88>
 80072de:	210a      	movs	r1, #10
 80072e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80072e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80072e8:	e7b9      	b.n	800725e <_strtod_l+0x2c6>
 80072ea:	2a6e      	cmp	r2, #110	; 0x6e
 80072ec:	e7db      	b.n	80072a6 <_strtod_l+0x30e>
 80072ee:	4990      	ldr	r1, [pc, #576]	; (8007530 <_strtod_l+0x598>)
 80072f0:	a817      	add	r0, sp, #92	; 0x5c
 80072f2:	f002 f8b5 	bl	8009460 <__match>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f aeb0 	beq.w	800705c <_strtod_l+0xc4>
 80072fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072fe:	498d      	ldr	r1, [pc, #564]	; (8007534 <_strtod_l+0x59c>)
 8007300:	3b01      	subs	r3, #1
 8007302:	a817      	add	r0, sp, #92	; 0x5c
 8007304:	9317      	str	r3, [sp, #92]	; 0x5c
 8007306:	f002 f8ab 	bl	8009460 <__match>
 800730a:	b910      	cbnz	r0, 8007312 <_strtod_l+0x37a>
 800730c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800730e:	3301      	adds	r3, #1
 8007310:	9317      	str	r3, [sp, #92]	; 0x5c
 8007312:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007544 <_strtod_l+0x5ac>
 8007316:	f04f 0a00 	mov.w	sl, #0
 800731a:	e681      	b.n	8007020 <_strtod_l+0x88>
 800731c:	4886      	ldr	r0, [pc, #536]	; (8007538 <_strtod_l+0x5a0>)
 800731e:	f003 fde3 	bl	800aee8 <nan>
 8007322:	ec5b ab10 	vmov	sl, fp, d0
 8007326:	e67b      	b.n	8007020 <_strtod_l+0x88>
 8007328:	9b05      	ldr	r3, [sp, #20]
 800732a:	9807      	ldr	r0, [sp, #28]
 800732c:	1af3      	subs	r3, r6, r3
 800732e:	2f00      	cmp	r7, #0
 8007330:	bf08      	it	eq
 8007332:	462f      	moveq	r7, r5
 8007334:	2d10      	cmp	r5, #16
 8007336:	9306      	str	r3, [sp, #24]
 8007338:	46a8      	mov	r8, r5
 800733a:	bfa8      	it	ge
 800733c:	f04f 0810 	movge.w	r8, #16
 8007340:	f7f9 f8e0 	bl	8000504 <__aeabi_ui2d>
 8007344:	2d09      	cmp	r5, #9
 8007346:	4682      	mov	sl, r0
 8007348:	468b      	mov	fp, r1
 800734a:	dd13      	ble.n	8007374 <_strtod_l+0x3dc>
 800734c:	4b7b      	ldr	r3, [pc, #492]	; (800753c <_strtod_l+0x5a4>)
 800734e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007352:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007356:	f7f9 f94f 	bl	80005f8 <__aeabi_dmul>
 800735a:	4682      	mov	sl, r0
 800735c:	4648      	mov	r0, r9
 800735e:	468b      	mov	fp, r1
 8007360:	f7f9 f8d0 	bl	8000504 <__aeabi_ui2d>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4650      	mov	r0, sl
 800736a:	4659      	mov	r1, fp
 800736c:	f7f8 ff8e 	bl	800028c <__adddf3>
 8007370:	4682      	mov	sl, r0
 8007372:	468b      	mov	fp, r1
 8007374:	2d0f      	cmp	r5, #15
 8007376:	dc38      	bgt.n	80073ea <_strtod_l+0x452>
 8007378:	9b06      	ldr	r3, [sp, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f43f ae50 	beq.w	8007020 <_strtod_l+0x88>
 8007380:	dd24      	ble.n	80073cc <_strtod_l+0x434>
 8007382:	2b16      	cmp	r3, #22
 8007384:	dc0b      	bgt.n	800739e <_strtod_l+0x406>
 8007386:	496d      	ldr	r1, [pc, #436]	; (800753c <_strtod_l+0x5a4>)
 8007388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800738c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007390:	4652      	mov	r2, sl
 8007392:	465b      	mov	r3, fp
 8007394:	f7f9 f930 	bl	80005f8 <__aeabi_dmul>
 8007398:	4682      	mov	sl, r0
 800739a:	468b      	mov	fp, r1
 800739c:	e640      	b.n	8007020 <_strtod_l+0x88>
 800739e:	9a06      	ldr	r2, [sp, #24]
 80073a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80073a4:	4293      	cmp	r3, r2
 80073a6:	db20      	blt.n	80073ea <_strtod_l+0x452>
 80073a8:	4c64      	ldr	r4, [pc, #400]	; (800753c <_strtod_l+0x5a4>)
 80073aa:	f1c5 050f 	rsb	r5, r5, #15
 80073ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80073b2:	4652      	mov	r2, sl
 80073b4:	465b      	mov	r3, fp
 80073b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	9b06      	ldr	r3, [sp, #24]
 80073c0:	1b5d      	subs	r5, r3, r5
 80073c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80073c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073ca:	e7e3      	b.n	8007394 <_strtod_l+0x3fc>
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	3316      	adds	r3, #22
 80073d0:	db0b      	blt.n	80073ea <_strtod_l+0x452>
 80073d2:	9b05      	ldr	r3, [sp, #20]
 80073d4:	1b9e      	subs	r6, r3, r6
 80073d6:	4b59      	ldr	r3, [pc, #356]	; (800753c <_strtod_l+0x5a4>)
 80073d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80073dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073e0:	4650      	mov	r0, sl
 80073e2:	4659      	mov	r1, fp
 80073e4:	f7f9 fa32 	bl	800084c <__aeabi_ddiv>
 80073e8:	e7d6      	b.n	8007398 <_strtod_l+0x400>
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	eba5 0808 	sub.w	r8, r5, r8
 80073f0:	4498      	add	r8, r3
 80073f2:	f1b8 0f00 	cmp.w	r8, #0
 80073f6:	dd74      	ble.n	80074e2 <_strtod_l+0x54a>
 80073f8:	f018 030f 	ands.w	r3, r8, #15
 80073fc:	d00a      	beq.n	8007414 <_strtod_l+0x47c>
 80073fe:	494f      	ldr	r1, [pc, #316]	; (800753c <_strtod_l+0x5a4>)
 8007400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007404:	4652      	mov	r2, sl
 8007406:	465b      	mov	r3, fp
 8007408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	4682      	mov	sl, r0
 8007412:	468b      	mov	fp, r1
 8007414:	f038 080f 	bics.w	r8, r8, #15
 8007418:	d04f      	beq.n	80074ba <_strtod_l+0x522>
 800741a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800741e:	dd22      	ble.n	8007466 <_strtod_l+0x4ce>
 8007420:	2500      	movs	r5, #0
 8007422:	462e      	mov	r6, r5
 8007424:	9507      	str	r5, [sp, #28]
 8007426:	9505      	str	r5, [sp, #20]
 8007428:	2322      	movs	r3, #34	; 0x22
 800742a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007544 <_strtod_l+0x5ac>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	f04f 0a00 	mov.w	sl, #0
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f43f adf2 	beq.w	8007020 <_strtod_l+0x88>
 800743c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800743e:	4620      	mov	r0, r4
 8007440:	f002 f9a6 	bl	8009790 <_Bfree>
 8007444:	9905      	ldr	r1, [sp, #20]
 8007446:	4620      	mov	r0, r4
 8007448:	f002 f9a2 	bl	8009790 <_Bfree>
 800744c:	4631      	mov	r1, r6
 800744e:	4620      	mov	r0, r4
 8007450:	f002 f99e 	bl	8009790 <_Bfree>
 8007454:	9907      	ldr	r1, [sp, #28]
 8007456:	4620      	mov	r0, r4
 8007458:	f002 f99a 	bl	8009790 <_Bfree>
 800745c:	4629      	mov	r1, r5
 800745e:	4620      	mov	r0, r4
 8007460:	f002 f996 	bl	8009790 <_Bfree>
 8007464:	e5dc      	b.n	8007020 <_strtod_l+0x88>
 8007466:	4b36      	ldr	r3, [pc, #216]	; (8007540 <_strtod_l+0x5a8>)
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	2300      	movs	r3, #0
 800746c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	4699      	mov	r9, r3
 8007476:	f1b8 0f01 	cmp.w	r8, #1
 800747a:	dc21      	bgt.n	80074c0 <_strtod_l+0x528>
 800747c:	b10b      	cbz	r3, 8007482 <_strtod_l+0x4ea>
 800747e:	4682      	mov	sl, r0
 8007480:	468b      	mov	fp, r1
 8007482:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <_strtod_l+0x5a8>)
 8007484:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007488:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800748c:	4652      	mov	r2, sl
 800748e:	465b      	mov	r3, fp
 8007490:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	4b2a      	ldr	r3, [pc, #168]	; (8007544 <_strtod_l+0x5ac>)
 800749a:	460a      	mov	r2, r1
 800749c:	400b      	ands	r3, r1
 800749e:	492a      	ldr	r1, [pc, #168]	; (8007548 <_strtod_l+0x5b0>)
 80074a0:	428b      	cmp	r3, r1
 80074a2:	4682      	mov	sl, r0
 80074a4:	d8bc      	bhi.n	8007420 <_strtod_l+0x488>
 80074a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074aa:	428b      	cmp	r3, r1
 80074ac:	bf86      	itte	hi
 80074ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800754c <_strtod_l+0x5b4>
 80074b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80074b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80074ba:	2300      	movs	r3, #0
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	e084      	b.n	80075ca <_strtod_l+0x632>
 80074c0:	f018 0f01 	tst.w	r8, #1
 80074c4:	d005      	beq.n	80074d2 <_strtod_l+0x53a>
 80074c6:	9b04      	ldr	r3, [sp, #16]
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f9 f894 	bl	80005f8 <__aeabi_dmul>
 80074d0:	2301      	movs	r3, #1
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	3208      	adds	r2, #8
 80074d6:	f109 0901 	add.w	r9, r9, #1
 80074da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074de:	9204      	str	r2, [sp, #16]
 80074e0:	e7c9      	b.n	8007476 <_strtod_l+0x4de>
 80074e2:	d0ea      	beq.n	80074ba <_strtod_l+0x522>
 80074e4:	f1c8 0800 	rsb	r8, r8, #0
 80074e8:	f018 020f 	ands.w	r2, r8, #15
 80074ec:	d00a      	beq.n	8007504 <_strtod_l+0x56c>
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <_strtod_l+0x5a4>)
 80074f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f4:	4650      	mov	r0, sl
 80074f6:	4659      	mov	r1, fp
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f9 f9a6 	bl	800084c <__aeabi_ddiv>
 8007500:	4682      	mov	sl, r0
 8007502:	468b      	mov	fp, r1
 8007504:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007508:	d0d7      	beq.n	80074ba <_strtod_l+0x522>
 800750a:	f1b8 0f1f 	cmp.w	r8, #31
 800750e:	dd1f      	ble.n	8007550 <_strtod_l+0x5b8>
 8007510:	2500      	movs	r5, #0
 8007512:	462e      	mov	r6, r5
 8007514:	9507      	str	r5, [sp, #28]
 8007516:	9505      	str	r5, [sp, #20]
 8007518:	2322      	movs	r3, #34	; 0x22
 800751a:	f04f 0a00 	mov.w	sl, #0
 800751e:	f04f 0b00 	mov.w	fp, #0
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	e786      	b.n	8007434 <_strtod_l+0x49c>
 8007526:	bf00      	nop
 8007528:	0800b84d 	.word	0x0800b84d
 800752c:	0800b88c 	.word	0x0800b88c
 8007530:	0800b845 	.word	0x0800b845
 8007534:	0800b9cc 	.word	0x0800b9cc
 8007538:	0800b6d7 	.word	0x0800b6d7
 800753c:	0800bbc0 	.word	0x0800bbc0
 8007540:	0800bb98 	.word	0x0800bb98
 8007544:	7ff00000 	.word	0x7ff00000
 8007548:	7ca00000 	.word	0x7ca00000
 800754c:	7fefffff 	.word	0x7fefffff
 8007550:	f018 0310 	ands.w	r3, r8, #16
 8007554:	bf18      	it	ne
 8007556:	236a      	movne	r3, #106	; 0x6a
 8007558:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007908 <_strtod_l+0x970>
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	4650      	mov	r0, sl
 8007560:	4659      	mov	r1, fp
 8007562:	2300      	movs	r3, #0
 8007564:	f018 0f01 	tst.w	r8, #1
 8007568:	d004      	beq.n	8007574 <_strtod_l+0x5dc>
 800756a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800756e:	f7f9 f843 	bl	80005f8 <__aeabi_dmul>
 8007572:	2301      	movs	r3, #1
 8007574:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007578:	f109 0908 	add.w	r9, r9, #8
 800757c:	d1f2      	bne.n	8007564 <_strtod_l+0x5cc>
 800757e:	b10b      	cbz	r3, 8007584 <_strtod_l+0x5ec>
 8007580:	4682      	mov	sl, r0
 8007582:	468b      	mov	fp, r1
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	b1c3      	cbz	r3, 80075ba <_strtod_l+0x622>
 8007588:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800758c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007590:	2b00      	cmp	r3, #0
 8007592:	4659      	mov	r1, fp
 8007594:	dd11      	ble.n	80075ba <_strtod_l+0x622>
 8007596:	2b1f      	cmp	r3, #31
 8007598:	f340 8124 	ble.w	80077e4 <_strtod_l+0x84c>
 800759c:	2b34      	cmp	r3, #52	; 0x34
 800759e:	bfde      	ittt	le
 80075a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075a4:	f04f 33ff 	movle.w	r3, #4294967295
 80075a8:	fa03 f202 	lslle.w	r2, r3, r2
 80075ac:	f04f 0a00 	mov.w	sl, #0
 80075b0:	bfcc      	ite	gt
 80075b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80075b6:	ea02 0b01 	andle.w	fp, r2, r1
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	f7f9 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d1a2      	bne.n	8007510 <_strtod_l+0x578>
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	9908      	ldr	r1, [sp, #32]
 80075d0:	462b      	mov	r3, r5
 80075d2:	463a      	mov	r2, r7
 80075d4:	4620      	mov	r0, r4
 80075d6:	f002 f943 	bl	8009860 <__s2b>
 80075da:	9007      	str	r0, [sp, #28]
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f af1f 	beq.w	8007420 <_strtod_l+0x488>
 80075e2:	9b05      	ldr	r3, [sp, #20]
 80075e4:	1b9e      	subs	r6, r3, r6
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bfb4      	ite	lt
 80075ec:	4633      	movlt	r3, r6
 80075ee:	2300      	movge	r3, #0
 80075f0:	930c      	str	r3, [sp, #48]	; 0x30
 80075f2:	9b06      	ldr	r3, [sp, #24]
 80075f4:	2500      	movs	r5, #0
 80075f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075fa:	9312      	str	r3, [sp, #72]	; 0x48
 80075fc:	462e      	mov	r6, r5
 80075fe:	9b07      	ldr	r3, [sp, #28]
 8007600:	4620      	mov	r0, r4
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	f002 f884 	bl	8009710 <_Balloc>
 8007608:	9005      	str	r0, [sp, #20]
 800760a:	2800      	cmp	r0, #0
 800760c:	f43f af0c 	beq.w	8007428 <_strtod_l+0x490>
 8007610:	9b07      	ldr	r3, [sp, #28]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	3202      	adds	r2, #2
 8007616:	f103 010c 	add.w	r1, r3, #12
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	300c      	adds	r0, #12
 800761e:	f002 f869 	bl	80096f4 <memcpy>
 8007622:	ec4b ab10 	vmov	d0, sl, fp
 8007626:	aa1a      	add	r2, sp, #104	; 0x68
 8007628:	a919      	add	r1, sp, #100	; 0x64
 800762a:	4620      	mov	r0, r4
 800762c:	f002 fc5e 	bl	8009eec <__d2b>
 8007630:	ec4b ab18 	vmov	d8, sl, fp
 8007634:	9018      	str	r0, [sp, #96]	; 0x60
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f aef6 	beq.w	8007428 <_strtod_l+0x490>
 800763c:	2101      	movs	r1, #1
 800763e:	4620      	mov	r0, r4
 8007640:	f002 f9a8 	bl	8009994 <__i2b>
 8007644:	4606      	mov	r6, r0
 8007646:	2800      	cmp	r0, #0
 8007648:	f43f aeee 	beq.w	8007428 <_strtod_l+0x490>
 800764c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800764e:	9904      	ldr	r1, [sp, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfab      	itete	ge
 8007654:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007656:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007658:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800765a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800765e:	bfac      	ite	ge
 8007660:	eb03 0902 	addge.w	r9, r3, r2
 8007664:	1ad7      	sublt	r7, r2, r3
 8007666:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007668:	eba3 0801 	sub.w	r8, r3, r1
 800766c:	4490      	add	r8, r2
 800766e:	4ba1      	ldr	r3, [pc, #644]	; (80078f4 <_strtod_l+0x95c>)
 8007670:	f108 38ff 	add.w	r8, r8, #4294967295
 8007674:	4598      	cmp	r8, r3
 8007676:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800767a:	f280 80c7 	bge.w	800780c <_strtod_l+0x874>
 800767e:	eba3 0308 	sub.w	r3, r3, r8
 8007682:	2b1f      	cmp	r3, #31
 8007684:	eba2 0203 	sub.w	r2, r2, r3
 8007688:	f04f 0101 	mov.w	r1, #1
 800768c:	f300 80b1 	bgt.w	80077f2 <_strtod_l+0x85a>
 8007690:	fa01 f303 	lsl.w	r3, r1, r3
 8007694:	930d      	str	r3, [sp, #52]	; 0x34
 8007696:	2300      	movs	r3, #0
 8007698:	9308      	str	r3, [sp, #32]
 800769a:	eb09 0802 	add.w	r8, r9, r2
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	45c1      	cmp	r9, r8
 80076a2:	4417      	add	r7, r2
 80076a4:	441f      	add	r7, r3
 80076a6:	464b      	mov	r3, r9
 80076a8:	bfa8      	it	ge
 80076aa:	4643      	movge	r3, r8
 80076ac:	42bb      	cmp	r3, r7
 80076ae:	bfa8      	it	ge
 80076b0:	463b      	movge	r3, r7
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bfc2      	ittt	gt
 80076b6:	eba8 0803 	subgt.w	r8, r8, r3
 80076ba:	1aff      	subgt	r7, r7, r3
 80076bc:	eba9 0903 	subgt.w	r9, r9, r3
 80076c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd17      	ble.n	80076f6 <_strtod_l+0x75e>
 80076c6:	4631      	mov	r1, r6
 80076c8:	461a      	mov	r2, r3
 80076ca:	4620      	mov	r0, r4
 80076cc:	f002 fa22 	bl	8009b14 <__pow5mult>
 80076d0:	4606      	mov	r6, r0
 80076d2:	2800      	cmp	r0, #0
 80076d4:	f43f aea8 	beq.w	8007428 <_strtod_l+0x490>
 80076d8:	4601      	mov	r1, r0
 80076da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076dc:	4620      	mov	r0, r4
 80076de:	f002 f96f 	bl	80099c0 <__multiply>
 80076e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f43f ae9f 	beq.w	8007428 <_strtod_l+0x490>
 80076ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076ec:	4620      	mov	r0, r4
 80076ee:	f002 f84f 	bl	8009790 <_Bfree>
 80076f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f4:	9318      	str	r3, [sp, #96]	; 0x60
 80076f6:	f1b8 0f00 	cmp.w	r8, #0
 80076fa:	f300 808c 	bgt.w	8007816 <_strtod_l+0x87e>
 80076fe:	9b06      	ldr	r3, [sp, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	dd08      	ble.n	8007716 <_strtod_l+0x77e>
 8007704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007706:	9905      	ldr	r1, [sp, #20]
 8007708:	4620      	mov	r0, r4
 800770a:	f002 fa03 	bl	8009b14 <__pow5mult>
 800770e:	9005      	str	r0, [sp, #20]
 8007710:	2800      	cmp	r0, #0
 8007712:	f43f ae89 	beq.w	8007428 <_strtod_l+0x490>
 8007716:	2f00      	cmp	r7, #0
 8007718:	dd08      	ble.n	800772c <_strtod_l+0x794>
 800771a:	9905      	ldr	r1, [sp, #20]
 800771c:	463a      	mov	r2, r7
 800771e:	4620      	mov	r0, r4
 8007720:	f002 fa52 	bl	8009bc8 <__lshift>
 8007724:	9005      	str	r0, [sp, #20]
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f ae7e 	beq.w	8007428 <_strtod_l+0x490>
 800772c:	f1b9 0f00 	cmp.w	r9, #0
 8007730:	dd08      	ble.n	8007744 <_strtod_l+0x7ac>
 8007732:	4631      	mov	r1, r6
 8007734:	464a      	mov	r2, r9
 8007736:	4620      	mov	r0, r4
 8007738:	f002 fa46 	bl	8009bc8 <__lshift>
 800773c:	4606      	mov	r6, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	f43f ae72 	beq.w	8007428 <_strtod_l+0x490>
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007748:	4620      	mov	r0, r4
 800774a:	f002 fac9 	bl	8009ce0 <__mdiff>
 800774e:	4605      	mov	r5, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	f43f ae69 	beq.w	8007428 <_strtod_l+0x490>
 8007756:	68c3      	ldr	r3, [r0, #12]
 8007758:	930b      	str	r3, [sp, #44]	; 0x2c
 800775a:	2300      	movs	r3, #0
 800775c:	60c3      	str	r3, [r0, #12]
 800775e:	4631      	mov	r1, r6
 8007760:	f002 faa2 	bl	8009ca8 <__mcmp>
 8007764:	2800      	cmp	r0, #0
 8007766:	da60      	bge.n	800782a <_strtod_l+0x892>
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	ea53 030a 	orrs.w	r3, r3, sl
 800776e:	f040 8082 	bne.w	8007876 <_strtod_l+0x8de>
 8007772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007776:	2b00      	cmp	r3, #0
 8007778:	d17d      	bne.n	8007876 <_strtod_l+0x8de>
 800777a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800777e:	0d1b      	lsrs	r3, r3, #20
 8007780:	051b      	lsls	r3, r3, #20
 8007782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007786:	d976      	bls.n	8007876 <_strtod_l+0x8de>
 8007788:	696b      	ldr	r3, [r5, #20]
 800778a:	b913      	cbnz	r3, 8007792 <_strtod_l+0x7fa>
 800778c:	692b      	ldr	r3, [r5, #16]
 800778e:	2b01      	cmp	r3, #1
 8007790:	dd71      	ble.n	8007876 <_strtod_l+0x8de>
 8007792:	4629      	mov	r1, r5
 8007794:	2201      	movs	r2, #1
 8007796:	4620      	mov	r0, r4
 8007798:	f002 fa16 	bl	8009bc8 <__lshift>
 800779c:	4631      	mov	r1, r6
 800779e:	4605      	mov	r5, r0
 80077a0:	f002 fa82 	bl	8009ca8 <__mcmp>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	dd66      	ble.n	8007876 <_strtod_l+0x8de>
 80077a8:	9904      	ldr	r1, [sp, #16]
 80077aa:	4a53      	ldr	r2, [pc, #332]	; (80078f8 <_strtod_l+0x960>)
 80077ac:	465b      	mov	r3, fp
 80077ae:	2900      	cmp	r1, #0
 80077b0:	f000 8081 	beq.w	80078b6 <_strtod_l+0x91e>
 80077b4:	ea02 010b 	and.w	r1, r2, fp
 80077b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077bc:	dc7b      	bgt.n	80078b6 <_strtod_l+0x91e>
 80077be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077c2:	f77f aea9 	ble.w	8007518 <_strtod_l+0x580>
 80077c6:	4b4d      	ldr	r3, [pc, #308]	; (80078fc <_strtod_l+0x964>)
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	2200      	movs	r2, #0
 80077ce:	f7f8 ff13 	bl	80005f8 <__aeabi_dmul>
 80077d2:	460b      	mov	r3, r1
 80077d4:	4303      	orrs	r3, r0
 80077d6:	bf08      	it	eq
 80077d8:	2322      	moveq	r3, #34	; 0x22
 80077da:	4682      	mov	sl, r0
 80077dc:	468b      	mov	fp, r1
 80077de:	bf08      	it	eq
 80077e0:	6023      	streq	r3, [r4, #0]
 80077e2:	e62b      	b.n	800743c <_strtod_l+0x4a4>
 80077e4:	f04f 32ff 	mov.w	r2, #4294967295
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	ea03 0a0a 	and.w	sl, r3, sl
 80077f0:	e6e3      	b.n	80075ba <_strtod_l+0x622>
 80077f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80077f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80077fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80077fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007802:	fa01 f308 	lsl.w	r3, r1, r8
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	910d      	str	r1, [sp, #52]	; 0x34
 800780a:	e746      	b.n	800769a <_strtod_l+0x702>
 800780c:	2300      	movs	r3, #0
 800780e:	9308      	str	r3, [sp, #32]
 8007810:	2301      	movs	r3, #1
 8007812:	930d      	str	r3, [sp, #52]	; 0x34
 8007814:	e741      	b.n	800769a <_strtod_l+0x702>
 8007816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007818:	4642      	mov	r2, r8
 800781a:	4620      	mov	r0, r4
 800781c:	f002 f9d4 	bl	8009bc8 <__lshift>
 8007820:	9018      	str	r0, [sp, #96]	; 0x60
 8007822:	2800      	cmp	r0, #0
 8007824:	f47f af6b 	bne.w	80076fe <_strtod_l+0x766>
 8007828:	e5fe      	b.n	8007428 <_strtod_l+0x490>
 800782a:	465f      	mov	r7, fp
 800782c:	d16e      	bne.n	800790c <_strtod_l+0x974>
 800782e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007834:	b342      	cbz	r2, 8007888 <_strtod_l+0x8f0>
 8007836:	4a32      	ldr	r2, [pc, #200]	; (8007900 <_strtod_l+0x968>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d128      	bne.n	800788e <_strtod_l+0x8f6>
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4651      	mov	r1, sl
 8007840:	b1eb      	cbz	r3, 800787e <_strtod_l+0x8e6>
 8007842:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <_strtod_l+0x960>)
 8007844:	403b      	ands	r3, r7
 8007846:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	d819      	bhi.n	8007884 <_strtod_l+0x8ec>
 8007850:	0d1b      	lsrs	r3, r3, #20
 8007852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	4299      	cmp	r1, r3
 800785c:	d117      	bne.n	800788e <_strtod_l+0x8f6>
 800785e:	4b29      	ldr	r3, [pc, #164]	; (8007904 <_strtod_l+0x96c>)
 8007860:	429f      	cmp	r7, r3
 8007862:	d102      	bne.n	800786a <_strtod_l+0x8d2>
 8007864:	3101      	adds	r1, #1
 8007866:	f43f addf 	beq.w	8007428 <_strtod_l+0x490>
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <_strtod_l+0x960>)
 800786c:	403b      	ands	r3, r7
 800786e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007872:	f04f 0a00 	mov.w	sl, #0
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1a4      	bne.n	80077c6 <_strtod_l+0x82e>
 800787c:	e5de      	b.n	800743c <_strtod_l+0x4a4>
 800787e:	f04f 33ff 	mov.w	r3, #4294967295
 8007882:	e7ea      	b.n	800785a <_strtod_l+0x8c2>
 8007884:	4613      	mov	r3, r2
 8007886:	e7e8      	b.n	800785a <_strtod_l+0x8c2>
 8007888:	ea53 030a 	orrs.w	r3, r3, sl
 800788c:	d08c      	beq.n	80077a8 <_strtod_l+0x810>
 800788e:	9b08      	ldr	r3, [sp, #32]
 8007890:	b1db      	cbz	r3, 80078ca <_strtod_l+0x932>
 8007892:	423b      	tst	r3, r7
 8007894:	d0ef      	beq.n	8007876 <_strtod_l+0x8de>
 8007896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007898:	9a04      	ldr	r2, [sp, #16]
 800789a:	4650      	mov	r0, sl
 800789c:	4659      	mov	r1, fp
 800789e:	b1c3      	cbz	r3, 80078d2 <_strtod_l+0x93a>
 80078a0:	f7ff fb5b 	bl	8006f5a <sulp>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	ec51 0b18 	vmov	r0, r1, d8
 80078ac:	f7f8 fcee 	bl	800028c <__adddf3>
 80078b0:	4682      	mov	sl, r0
 80078b2:	468b      	mov	fp, r1
 80078b4:	e7df      	b.n	8007876 <_strtod_l+0x8de>
 80078b6:	4013      	ands	r3, r2
 80078b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078c4:	f04f 3aff 	mov.w	sl, #4294967295
 80078c8:	e7d5      	b.n	8007876 <_strtod_l+0x8de>
 80078ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078cc:	ea13 0f0a 	tst.w	r3, sl
 80078d0:	e7e0      	b.n	8007894 <_strtod_l+0x8fc>
 80078d2:	f7ff fb42 	bl	8006f5a <sulp>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	ec51 0b18 	vmov	r0, r1, d8
 80078de:	f7f8 fcd3 	bl	8000288 <__aeabi_dsub>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4682      	mov	sl, r0
 80078e8:	468b      	mov	fp, r1
 80078ea:	f7f9 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d0c1      	beq.n	8007876 <_strtod_l+0x8de>
 80078f2:	e611      	b.n	8007518 <_strtod_l+0x580>
 80078f4:	fffffc02 	.word	0xfffffc02
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	39500000 	.word	0x39500000
 8007900:	000fffff 	.word	0x000fffff
 8007904:	7fefffff 	.word	0x7fefffff
 8007908:	0800b8a0 	.word	0x0800b8a0
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	f002 fb48 	bl	8009fa4 <__ratio>
 8007914:	ec59 8b10 	vmov	r8, r9, d0
 8007918:	ee10 0a10 	vmov	r0, s0
 800791c:	2200      	movs	r2, #0
 800791e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007922:	4649      	mov	r1, r9
 8007924:	f7f9 f8e4 	bl	8000af0 <__aeabi_dcmple>
 8007928:	2800      	cmp	r0, #0
 800792a:	d07a      	beq.n	8007a22 <_strtod_l+0xa8a>
 800792c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04a      	beq.n	80079c8 <_strtod_l+0xa30>
 8007932:	4b95      	ldr	r3, [pc, #596]	; (8007b88 <_strtod_l+0xbf0>)
 8007934:	2200      	movs	r2, #0
 8007936:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800793a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007b88 <_strtod_l+0xbf0>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	4b92      	ldr	r3, [pc, #584]	; (8007b8c <_strtod_l+0xbf4>)
 8007944:	403b      	ands	r3, r7
 8007946:	930d      	str	r3, [sp, #52]	; 0x34
 8007948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800794a:	4b91      	ldr	r3, [pc, #580]	; (8007b90 <_strtod_l+0xbf8>)
 800794c:	429a      	cmp	r2, r3
 800794e:	f040 80b0 	bne.w	8007ab2 <_strtod_l+0xb1a>
 8007952:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007956:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800795a:	ec4b ab10 	vmov	d0, sl, fp
 800795e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007962:	f002 fa47 	bl	8009df4 <__ulp>
 8007966:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800796a:	ec53 2b10 	vmov	r2, r3, d0
 800796e:	f7f8 fe43 	bl	80005f8 <__aeabi_dmul>
 8007972:	4652      	mov	r2, sl
 8007974:	465b      	mov	r3, fp
 8007976:	f7f8 fc89 	bl	800028c <__adddf3>
 800797a:	460b      	mov	r3, r1
 800797c:	4983      	ldr	r1, [pc, #524]	; (8007b8c <_strtod_l+0xbf4>)
 800797e:	4a85      	ldr	r2, [pc, #532]	; (8007b94 <_strtod_l+0xbfc>)
 8007980:	4019      	ands	r1, r3
 8007982:	4291      	cmp	r1, r2
 8007984:	4682      	mov	sl, r0
 8007986:	d960      	bls.n	8007a4a <_strtod_l+0xab2>
 8007988:	ee18 3a90 	vmov	r3, s17
 800798c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007990:	4293      	cmp	r3, r2
 8007992:	d104      	bne.n	800799e <_strtod_l+0xa06>
 8007994:	ee18 3a10 	vmov	r3, s16
 8007998:	3301      	adds	r3, #1
 800799a:	f43f ad45 	beq.w	8007428 <_strtod_l+0x490>
 800799e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ba0 <_strtod_l+0xc08>
 80079a2:	f04f 3aff 	mov.w	sl, #4294967295
 80079a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 fef1 	bl	8009790 <_Bfree>
 80079ae:	9905      	ldr	r1, [sp, #20]
 80079b0:	4620      	mov	r0, r4
 80079b2:	f001 feed 	bl	8009790 <_Bfree>
 80079b6:	4631      	mov	r1, r6
 80079b8:	4620      	mov	r0, r4
 80079ba:	f001 fee9 	bl	8009790 <_Bfree>
 80079be:	4629      	mov	r1, r5
 80079c0:	4620      	mov	r0, r4
 80079c2:	f001 fee5 	bl	8009790 <_Bfree>
 80079c6:	e61a      	b.n	80075fe <_strtod_l+0x666>
 80079c8:	f1ba 0f00 	cmp.w	sl, #0
 80079cc:	d11b      	bne.n	8007a06 <_strtod_l+0xa6e>
 80079ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d2:	b9f3      	cbnz	r3, 8007a12 <_strtod_l+0xa7a>
 80079d4:	4b6c      	ldr	r3, [pc, #432]	; (8007b88 <_strtod_l+0xbf0>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	4640      	mov	r0, r8
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f9 f87e 	bl	8000adc <__aeabi_dcmplt>
 80079e0:	b9d0      	cbnz	r0, 8007a18 <_strtod_l+0xa80>
 80079e2:	4640      	mov	r0, r8
 80079e4:	4649      	mov	r1, r9
 80079e6:	4b6c      	ldr	r3, [pc, #432]	; (8007b98 <_strtod_l+0xc00>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	f7f8 fe05 	bl	80005f8 <__aeabi_dmul>
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80079fa:	9315      	str	r3, [sp, #84]	; 0x54
 80079fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a04:	e79d      	b.n	8007942 <_strtod_l+0x9aa>
 8007a06:	f1ba 0f01 	cmp.w	sl, #1
 8007a0a:	d102      	bne.n	8007a12 <_strtod_l+0xa7a>
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	f43f ad83 	beq.w	8007518 <_strtod_l+0x580>
 8007a12:	4b62      	ldr	r3, [pc, #392]	; (8007b9c <_strtod_l+0xc04>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	e78e      	b.n	8007936 <_strtod_l+0x99e>
 8007a18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007b98 <_strtod_l+0xc00>
 8007a1c:	f04f 0800 	mov.w	r8, #0
 8007a20:	e7e7      	b.n	80079f2 <_strtod_l+0xa5a>
 8007a22:	4b5d      	ldr	r3, [pc, #372]	; (8007b98 <_strtod_l+0xc00>)
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f7f8 fde5 	bl	80005f8 <__aeabi_dmul>
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a30:	4680      	mov	r8, r0
 8007a32:	4689      	mov	r9, r1
 8007a34:	b933      	cbnz	r3, 8007a44 <_strtod_l+0xaac>
 8007a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a42:	e7dd      	b.n	8007a00 <_strtod_l+0xa68>
 8007a44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007a48:	e7f9      	b.n	8007a3e <_strtod_l+0xaa6>
 8007a4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1a8      	bne.n	80079a6 <_strtod_l+0xa0e>
 8007a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a5a:	0d1b      	lsrs	r3, r3, #20
 8007a5c:	051b      	lsls	r3, r3, #20
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d1a1      	bne.n	80079a6 <_strtod_l+0xa0e>
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	f7f9 f927 	bl	8000cb8 <__aeabi_d2lz>
 8007a6a:	f7f8 fd97 	bl	800059c <__aeabi_l2d>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4640      	mov	r0, r8
 8007a74:	4649      	mov	r1, r9
 8007a76:	f7f8 fc07 	bl	8000288 <__aeabi_dsub>
 8007a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a80:	ea43 030a 	orr.w	r3, r3, sl
 8007a84:	4313      	orrs	r3, r2
 8007a86:	4680      	mov	r8, r0
 8007a88:	4689      	mov	r9, r1
 8007a8a:	d055      	beq.n	8007b38 <_strtod_l+0xba0>
 8007a8c:	a336      	add	r3, pc, #216	; (adr r3, 8007b68 <_strtod_l+0xbd0>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7f9 f823 	bl	8000adc <__aeabi_dcmplt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f47f acd0 	bne.w	800743c <_strtod_l+0x4a4>
 8007a9c:	a334      	add	r3, pc, #208	; (adr r3, 8007b70 <_strtod_l+0xbd8>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	f7f9 f837 	bl	8000b18 <__aeabi_dcmpgt>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f af7b 	beq.w	80079a6 <_strtod_l+0xa0e>
 8007ab0:	e4c4      	b.n	800743c <_strtod_l+0x4a4>
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	b333      	cbz	r3, 8007b04 <_strtod_l+0xb6c>
 8007ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007abc:	d822      	bhi.n	8007b04 <_strtod_l+0xb6c>
 8007abe:	a32e      	add	r3, pc, #184	; (adr r3, 8007b78 <_strtod_l+0xbe0>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	f7f9 f812 	bl	8000af0 <__aeabi_dcmple>
 8007acc:	b1a0      	cbz	r0, 8007af8 <_strtod_l+0xb60>
 8007ace:	4649      	mov	r1, r9
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	f7f9 f869 	bl	8000ba8 <__aeabi_d2uiz>
 8007ad6:	2801      	cmp	r0, #1
 8007ad8:	bf38      	it	cc
 8007ada:	2001      	movcc	r0, #1
 8007adc:	f7f8 fd12 	bl	8000504 <__aeabi_ui2d>
 8007ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	bb23      	cbnz	r3, 8007b32 <_strtod_l+0xb9a>
 8007ae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aec:	9010      	str	r0, [sp, #64]	; 0x40
 8007aee:	9311      	str	r3, [sp, #68]	; 0x44
 8007af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007af4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007afc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b08:	eeb0 0a48 	vmov.f32	s0, s16
 8007b0c:	eef0 0a68 	vmov.f32	s1, s17
 8007b10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b14:	f002 f96e 	bl	8009df4 <__ulp>
 8007b18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b1c:	ec53 2b10 	vmov	r2, r3, d0
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	ec53 2b18 	vmov	r2, r3, d8
 8007b28:	f7f8 fbb0 	bl	800028c <__adddf3>
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	468b      	mov	fp, r1
 8007b30:	e78d      	b.n	8007a4e <_strtod_l+0xab6>
 8007b32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007b36:	e7db      	b.n	8007af0 <_strtod_l+0xb58>
 8007b38:	a311      	add	r3, pc, #68	; (adr r3, 8007b80 <_strtod_l+0xbe8>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f7f8 ffcd 	bl	8000adc <__aeabi_dcmplt>
 8007b42:	e7b2      	b.n	8007aaa <_strtod_l+0xb12>
 8007b44:	2300      	movs	r3, #0
 8007b46:	930a      	str	r3, [sp, #40]	; 0x28
 8007b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	f7ff ba6b 	b.w	8007028 <_strtod_l+0x90>
 8007b52:	2a65      	cmp	r2, #101	; 0x65
 8007b54:	f43f ab5f 	beq.w	8007216 <_strtod_l+0x27e>
 8007b58:	2a45      	cmp	r2, #69	; 0x45
 8007b5a:	f43f ab5c 	beq.w	8007216 <_strtod_l+0x27e>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f7ff bb94 	b.w	800728c <_strtod_l+0x2f4>
 8007b64:	f3af 8000 	nop.w
 8007b68:	94a03595 	.word	0x94a03595
 8007b6c:	3fdfffff 	.word	0x3fdfffff
 8007b70:	35afe535 	.word	0x35afe535
 8007b74:	3fe00000 	.word	0x3fe00000
 8007b78:	ffc00000 	.word	0xffc00000
 8007b7c:	41dfffff 	.word	0x41dfffff
 8007b80:	94a03595 	.word	0x94a03595
 8007b84:	3fcfffff 	.word	0x3fcfffff
 8007b88:	3ff00000 	.word	0x3ff00000
 8007b8c:	7ff00000 	.word	0x7ff00000
 8007b90:	7fe00000 	.word	0x7fe00000
 8007b94:	7c9fffff 	.word	0x7c9fffff
 8007b98:	3fe00000 	.word	0x3fe00000
 8007b9c:	bff00000 	.word	0xbff00000
 8007ba0:	7fefffff 	.word	0x7fefffff

08007ba4 <_strtod_r>:
 8007ba4:	4b01      	ldr	r3, [pc, #4]	; (8007bac <_strtod_r+0x8>)
 8007ba6:	f7ff b9f7 	b.w	8006f98 <_strtod_l>
 8007baa:	bf00      	nop
 8007bac:	200000a8 	.word	0x200000a8

08007bb0 <_strtol_l.constprop.0>:
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb6:	d001      	beq.n	8007bbc <_strtol_l.constprop.0+0xc>
 8007bb8:	2b24      	cmp	r3, #36	; 0x24
 8007bba:	d906      	bls.n	8007bca <_strtol_l.constprop.0+0x1a>
 8007bbc:	f7fe f9ca 	bl	8005f54 <__errno>
 8007bc0:	2316      	movs	r3, #22
 8007bc2:	6003      	str	r3, [r0, #0]
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007cb0 <_strtol_l.constprop.0+0x100>
 8007bce:	460d      	mov	r5, r1
 8007bd0:	462e      	mov	r6, r5
 8007bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007bda:	f017 0708 	ands.w	r7, r7, #8
 8007bde:	d1f7      	bne.n	8007bd0 <_strtol_l.constprop.0+0x20>
 8007be0:	2c2d      	cmp	r4, #45	; 0x2d
 8007be2:	d132      	bne.n	8007c4a <_strtol_l.constprop.0+0x9a>
 8007be4:	782c      	ldrb	r4, [r5, #0]
 8007be6:	2701      	movs	r7, #1
 8007be8:	1cb5      	adds	r5, r6, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d05b      	beq.n	8007ca6 <_strtol_l.constprop.0+0xf6>
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d109      	bne.n	8007c06 <_strtol_l.constprop.0+0x56>
 8007bf2:	2c30      	cmp	r4, #48	; 0x30
 8007bf4:	d107      	bne.n	8007c06 <_strtol_l.constprop.0+0x56>
 8007bf6:	782c      	ldrb	r4, [r5, #0]
 8007bf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007bfc:	2c58      	cmp	r4, #88	; 0x58
 8007bfe:	d14d      	bne.n	8007c9c <_strtol_l.constprop.0+0xec>
 8007c00:	786c      	ldrb	r4, [r5, #1]
 8007c02:	2310      	movs	r3, #16
 8007c04:	3502      	adds	r5, #2
 8007c06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c0e:	f04f 0c00 	mov.w	ip, #0
 8007c12:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c16:	4666      	mov	r6, ip
 8007c18:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007c20:	f1be 0f09 	cmp.w	lr, #9
 8007c24:	d816      	bhi.n	8007c54 <_strtol_l.constprop.0+0xa4>
 8007c26:	4674      	mov	r4, lr
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	dd24      	ble.n	8007c76 <_strtol_l.constprop.0+0xc6>
 8007c2c:	f1bc 0f00 	cmp.w	ip, #0
 8007c30:	db1e      	blt.n	8007c70 <_strtol_l.constprop.0+0xc0>
 8007c32:	45b1      	cmp	r9, r6
 8007c34:	d31c      	bcc.n	8007c70 <_strtol_l.constprop.0+0xc0>
 8007c36:	d101      	bne.n	8007c3c <_strtol_l.constprop.0+0x8c>
 8007c38:	45a2      	cmp	sl, r4
 8007c3a:	db19      	blt.n	8007c70 <_strtol_l.constprop.0+0xc0>
 8007c3c:	fb06 4603 	mla	r6, r6, r3, r4
 8007c40:	f04f 0c01 	mov.w	ip, #1
 8007c44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c48:	e7e8      	b.n	8007c1c <_strtol_l.constprop.0+0x6c>
 8007c4a:	2c2b      	cmp	r4, #43	; 0x2b
 8007c4c:	bf04      	itt	eq
 8007c4e:	782c      	ldrbeq	r4, [r5, #0]
 8007c50:	1cb5      	addeq	r5, r6, #2
 8007c52:	e7ca      	b.n	8007bea <_strtol_l.constprop.0+0x3a>
 8007c54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007c58:	f1be 0f19 	cmp.w	lr, #25
 8007c5c:	d801      	bhi.n	8007c62 <_strtol_l.constprop.0+0xb2>
 8007c5e:	3c37      	subs	r4, #55	; 0x37
 8007c60:	e7e2      	b.n	8007c28 <_strtol_l.constprop.0+0x78>
 8007c62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007c66:	f1be 0f19 	cmp.w	lr, #25
 8007c6a:	d804      	bhi.n	8007c76 <_strtol_l.constprop.0+0xc6>
 8007c6c:	3c57      	subs	r4, #87	; 0x57
 8007c6e:	e7db      	b.n	8007c28 <_strtol_l.constprop.0+0x78>
 8007c70:	f04f 3cff 	mov.w	ip, #4294967295
 8007c74:	e7e6      	b.n	8007c44 <_strtol_l.constprop.0+0x94>
 8007c76:	f1bc 0f00 	cmp.w	ip, #0
 8007c7a:	da05      	bge.n	8007c88 <_strtol_l.constprop.0+0xd8>
 8007c7c:	2322      	movs	r3, #34	; 0x22
 8007c7e:	6003      	str	r3, [r0, #0]
 8007c80:	4646      	mov	r6, r8
 8007c82:	b942      	cbnz	r2, 8007c96 <_strtol_l.constprop.0+0xe6>
 8007c84:	4630      	mov	r0, r6
 8007c86:	e79e      	b.n	8007bc6 <_strtol_l.constprop.0+0x16>
 8007c88:	b107      	cbz	r7, 8007c8c <_strtol_l.constprop.0+0xdc>
 8007c8a:	4276      	negs	r6, r6
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	d0f9      	beq.n	8007c84 <_strtol_l.constprop.0+0xd4>
 8007c90:	f1bc 0f00 	cmp.w	ip, #0
 8007c94:	d000      	beq.n	8007c98 <_strtol_l.constprop.0+0xe8>
 8007c96:	1e69      	subs	r1, r5, #1
 8007c98:	6011      	str	r1, [r2, #0]
 8007c9a:	e7f3      	b.n	8007c84 <_strtol_l.constprop.0+0xd4>
 8007c9c:	2430      	movs	r4, #48	; 0x30
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1b1      	bne.n	8007c06 <_strtol_l.constprop.0+0x56>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	e7af      	b.n	8007c06 <_strtol_l.constprop.0+0x56>
 8007ca6:	2c30      	cmp	r4, #48	; 0x30
 8007ca8:	d0a5      	beq.n	8007bf6 <_strtol_l.constprop.0+0x46>
 8007caa:	230a      	movs	r3, #10
 8007cac:	e7ab      	b.n	8007c06 <_strtol_l.constprop.0+0x56>
 8007cae:	bf00      	nop
 8007cb0:	0800b8c9 	.word	0x0800b8c9

08007cb4 <_strtol_r>:
 8007cb4:	f7ff bf7c 	b.w	8007bb0 <_strtol_l.constprop.0>

08007cb8 <__swbuf_r>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	460e      	mov	r6, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	b118      	cbz	r0, 8007cca <__swbuf_r+0x12>
 8007cc2:	6983      	ldr	r3, [r0, #24]
 8007cc4:	b90b      	cbnz	r3, 8007cca <__swbuf_r+0x12>
 8007cc6:	f001 f86f 	bl	8008da8 <__sinit>
 8007cca:	4b21      	ldr	r3, [pc, #132]	; (8007d50 <__swbuf_r+0x98>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d12b      	bne.n	8007d28 <__swbuf_r+0x70>
 8007cd0:	686c      	ldr	r4, [r5, #4]
 8007cd2:	69a3      	ldr	r3, [r4, #24]
 8007cd4:	60a3      	str	r3, [r4, #8]
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	071a      	lsls	r2, r3, #28
 8007cda:	d52f      	bpl.n	8007d3c <__swbuf_r+0x84>
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	b36b      	cbz	r3, 8007d3c <__swbuf_r+0x84>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	1ac0      	subs	r0, r0, r3
 8007ce6:	6963      	ldr	r3, [r4, #20]
 8007ce8:	b2f6      	uxtb	r6, r6
 8007cea:	4283      	cmp	r3, r0
 8007cec:	4637      	mov	r7, r6
 8007cee:	dc04      	bgt.n	8007cfa <__swbuf_r+0x42>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 ffc4 	bl	8008c80 <_fflush_r>
 8007cf8:	bb30      	cbnz	r0, 8007d48 <__swbuf_r+0x90>
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	701e      	strb	r6, [r3, #0]
 8007d08:	6963      	ldr	r3, [r4, #20]
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	4283      	cmp	r3, r0
 8007d0e:	d004      	beq.n	8007d1a <__swbuf_r+0x62>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d506      	bpl.n	8007d24 <__swbuf_r+0x6c>
 8007d16:	2e0a      	cmp	r6, #10
 8007d18:	d104      	bne.n	8007d24 <__swbuf_r+0x6c>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 ffaf 	bl	8008c80 <_fflush_r>
 8007d22:	b988      	cbnz	r0, 8007d48 <__swbuf_r+0x90>
 8007d24:	4638      	mov	r0, r7
 8007d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <__swbuf_r+0x9c>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d101      	bne.n	8007d32 <__swbuf_r+0x7a>
 8007d2e:	68ac      	ldr	r4, [r5, #8]
 8007d30:	e7cf      	b.n	8007cd2 <__swbuf_r+0x1a>
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <__swbuf_r+0xa0>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	bf08      	it	eq
 8007d38:	68ec      	ldreq	r4, [r5, #12]
 8007d3a:	e7ca      	b.n	8007cd2 <__swbuf_r+0x1a>
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 f81e 	bl	8007d80 <__swsetup_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0cb      	beq.n	8007ce0 <__swbuf_r+0x28>
 8007d48:	f04f 37ff 	mov.w	r7, #4294967295
 8007d4c:	e7ea      	b.n	8007d24 <__swbuf_r+0x6c>
 8007d4e:	bf00      	nop
 8007d50:	0800ba7c 	.word	0x0800ba7c
 8007d54:	0800ba9c 	.word	0x0800ba9c
 8007d58:	0800ba5c 	.word	0x0800ba5c

08007d5c <_write_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_write_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7fa fd00 	bl	8002770 <_write>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_write_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_write_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	200009e8 	.word	0x200009e8

08007d80 <__swsetup_r>:
 8007d80:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <__swsetup_r+0xcc>)
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	681d      	ldr	r5, [r3, #0]
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b125      	cbz	r5, 8007d96 <__swsetup_r+0x16>
 8007d8c:	69ab      	ldr	r3, [r5, #24]
 8007d8e:	b913      	cbnz	r3, 8007d96 <__swsetup_r+0x16>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f001 f809 	bl	8008da8 <__sinit>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__swsetup_r+0xd0>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d10f      	bne.n	8007dbc <__swsetup_r+0x3c>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d42c      	bmi.n	8007e02 <__swsetup_r+0x82>
 8007da8:	06dd      	lsls	r5, r3, #27
 8007daa:	d411      	bmi.n	8007dd0 <__swsetup_r+0x50>
 8007dac:	2309      	movs	r3, #9
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	e03e      	b.n	8007e3a <__swsetup_r+0xba>
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <__swsetup_r+0xd4>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <__swsetup_r+0x46>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7eb      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <__swsetup_r+0xd8>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7e6      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dd0:	0758      	lsls	r0, r3, #29
 8007dd2:	d512      	bpl.n	8007dfa <__swsetup_r+0x7a>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	b141      	cbz	r1, 8007dea <__swsetup_r+0x6a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__swsetup_r+0x66>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f002 f96d 	bl	800a0c0 <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b94b      	cbnz	r3, 8007e1a <__swsetup_r+0x9a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d003      	beq.n	8007e1a <__swsetup_r+0x9a>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f001 fc13 	bl	8009640 <__smakebuf_r>
 8007e1a:	89a0      	ldrh	r0, [r4, #12]
 8007e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e20:	f010 0301 	ands.w	r3, r0, #1
 8007e24:	d00a      	beq.n	8007e3c <__swsetup_r+0xbc>
 8007e26:	2300      	movs	r3, #0
 8007e28:	60a3      	str	r3, [r4, #8]
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	425b      	negs	r3, r3
 8007e2e:	61a3      	str	r3, [r4, #24]
 8007e30:	6923      	ldr	r3, [r4, #16]
 8007e32:	b943      	cbnz	r3, 8007e46 <__swsetup_r+0xc6>
 8007e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e38:	d1ba      	bne.n	8007db0 <__swsetup_r+0x30>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	0781      	lsls	r1, r0, #30
 8007e3e:	bf58      	it	pl
 8007e40:	6963      	ldrpl	r3, [r4, #20]
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	e7f4      	b.n	8007e30 <__swsetup_r+0xb0>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7f7      	b.n	8007e3a <__swsetup_r+0xba>
 8007e4a:	bf00      	nop
 8007e4c:	20000040 	.word	0x20000040
 8007e50:	0800ba7c 	.word	0x0800ba7c
 8007e54:	0800ba9c 	.word	0x0800ba9c
 8007e58:	0800ba5c 	.word	0x0800ba5c

08007e5c <_close_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_close_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7fa fc90 	bl	800278c <_close>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_close_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_close_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	200009e8 	.word	0x200009e8

08007e7c <quorem>:
 8007e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	6903      	ldr	r3, [r0, #16]
 8007e82:	690c      	ldr	r4, [r1, #16]
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	4607      	mov	r7, r0
 8007e88:	f2c0 8081 	blt.w	8007f8e <quorem+0x112>
 8007e8c:	3c01      	subs	r4, #1
 8007e8e:	f101 0814 	add.w	r8, r1, #20
 8007e92:	f100 0514 	add.w	r5, r0, #20
 8007e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007eac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007eb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007eb4:	d331      	bcc.n	8007f1a <quorem+0x9e>
 8007eb6:	f04f 0e00 	mov.w	lr, #0
 8007eba:	4640      	mov	r0, r8
 8007ebc:	46ac      	mov	ip, r5
 8007ebe:	46f2      	mov	sl, lr
 8007ec0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ec4:	b293      	uxth	r3, r2
 8007ec6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ed4:	f8dc a000 	ldr.w	sl, [ip]
 8007ed8:	0c12      	lsrs	r2, r2, #16
 8007eda:	fa13 f38a 	uxtah	r3, r3, sl
 8007ede:	fb06 e202 	mla	r2, r6, r2, lr
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eea:	b292      	uxth	r2, r2
 8007eec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ef4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ef8:	4581      	cmp	r9, r0
 8007efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007efe:	f84c 3b04 	str.w	r3, [ip], #4
 8007f02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f06:	d2db      	bcs.n	8007ec0 <quorem+0x44>
 8007f08:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f0c:	b92b      	cbnz	r3, 8007f1a <quorem+0x9e>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	3b04      	subs	r3, #4
 8007f12:	429d      	cmp	r5, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	d32e      	bcc.n	8007f76 <quorem+0xfa>
 8007f18:	613c      	str	r4, [r7, #16]
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f001 fec4 	bl	8009ca8 <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	db24      	blt.n	8007f6e <quorem+0xf2>
 8007f24:	3601      	adds	r6, #1
 8007f26:	4628      	mov	r0, r5
 8007f28:	f04f 0c00 	mov.w	ip, #0
 8007f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f30:	f8d0 e000 	ldr.w	lr, [r0]
 8007f34:	b293      	uxth	r3, r2
 8007f36:	ebac 0303 	sub.w	r3, ip, r3
 8007f3a:	0c12      	lsrs	r2, r2, #16
 8007f3c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f4e:	45c1      	cmp	r9, r8
 8007f50:	f840 3b04 	str.w	r3, [r0], #4
 8007f54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f58:	d2e8      	bcs.n	8007f2c <quorem+0xb0>
 8007f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f62:	b922      	cbnz	r2, 8007f6e <quorem+0xf2>
 8007f64:	3b04      	subs	r3, #4
 8007f66:	429d      	cmp	r5, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	d30a      	bcc.n	8007f82 <quorem+0x106>
 8007f6c:	613c      	str	r4, [r7, #16]
 8007f6e:	4630      	mov	r0, r6
 8007f70:	b003      	add	sp, #12
 8007f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	d1cc      	bne.n	8007f18 <quorem+0x9c>
 8007f7e:	3c01      	subs	r4, #1
 8007f80:	e7c7      	b.n	8007f12 <quorem+0x96>
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d1f0      	bne.n	8007f6c <quorem+0xf0>
 8007f8a:	3c01      	subs	r4, #1
 8007f8c:	e7eb      	b.n	8007f66 <quorem+0xea>
 8007f8e:	2000      	movs	r0, #0
 8007f90:	e7ee      	b.n	8007f70 <quorem+0xf4>
 8007f92:	0000      	movs	r0, r0
 8007f94:	0000      	movs	r0, r0
	...

08007f98 <_dtoa_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	ed2d 8b04 	vpush	{d8-d9}
 8007fa0:	ec57 6b10 	vmov	r6, r7, d0
 8007fa4:	b093      	sub	sp, #76	; 0x4c
 8007fa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fac:	9106      	str	r1, [sp, #24]
 8007fae:	ee10 aa10 	vmov	sl, s0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fb8:	46bb      	mov	fp, r7
 8007fba:	b975      	cbnz	r5, 8007fda <_dtoa_r+0x42>
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f001 fb7f 	bl	80096c0 <malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fc6:	b920      	cbnz	r0, 8007fd2 <_dtoa_r+0x3a>
 8007fc8:	4ba7      	ldr	r3, [pc, #668]	; (8008268 <_dtoa_r+0x2d0>)
 8007fca:	21ea      	movs	r1, #234	; 0xea
 8007fcc:	48a7      	ldr	r0, [pc, #668]	; (800826c <_dtoa_r+0x2d4>)
 8007fce:	f003 f897 	bl	800b100 <__assert_func>
 8007fd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fd6:	6005      	str	r5, [r0, #0]
 8007fd8:	60c5      	str	r5, [r0, #12]
 8007fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fdc:	6819      	ldr	r1, [r3, #0]
 8007fde:	b151      	cbz	r1, 8007ff6 <_dtoa_r+0x5e>
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	604a      	str	r2, [r1, #4]
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4093      	lsls	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
 8007fea:	4620      	mov	r0, r4
 8007fec:	f001 fbd0 	bl	8009790 <_Bfree>
 8007ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	1e3b      	subs	r3, r7, #0
 8007ff8:	bfaa      	itet	ge
 8007ffa:	2300      	movge	r3, #0
 8007ffc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008000:	f8c8 3000 	strge.w	r3, [r8]
 8008004:	4b9a      	ldr	r3, [pc, #616]	; (8008270 <_dtoa_r+0x2d8>)
 8008006:	bfbc      	itt	lt
 8008008:	2201      	movlt	r2, #1
 800800a:	f8c8 2000 	strlt.w	r2, [r8]
 800800e:	ea33 030b 	bics.w	r3, r3, fp
 8008012:	d11b      	bne.n	800804c <_dtoa_r+0xb4>
 8008014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008016:	f242 730f 	movw	r3, #9999	; 0x270f
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008020:	4333      	orrs	r3, r6
 8008022:	f000 8592 	beq.w	8008b4a <_dtoa_r+0xbb2>
 8008026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008028:	b963      	cbnz	r3, 8008044 <_dtoa_r+0xac>
 800802a:	4b92      	ldr	r3, [pc, #584]	; (8008274 <_dtoa_r+0x2dc>)
 800802c:	e022      	b.n	8008074 <_dtoa_r+0xdc>
 800802e:	4b92      	ldr	r3, [pc, #584]	; (8008278 <_dtoa_r+0x2e0>)
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	3308      	adds	r3, #8
 8008034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	9801      	ldr	r0, [sp, #4]
 800803a:	b013      	add	sp, #76	; 0x4c
 800803c:	ecbd 8b04 	vpop	{d8-d9}
 8008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008044:	4b8b      	ldr	r3, [pc, #556]	; (8008274 <_dtoa_r+0x2dc>)
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	3303      	adds	r3, #3
 800804a:	e7f3      	b.n	8008034 <_dtoa_r+0x9c>
 800804c:	2200      	movs	r2, #0
 800804e:	2300      	movs	r3, #0
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8008058:	ec4b ab19 	vmov	d9, sl, fp
 800805c:	4680      	mov	r8, r0
 800805e:	b158      	cbz	r0, 8008078 <_dtoa_r+0xe0>
 8008060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008062:	2301      	movs	r3, #1
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 856b 	beq.w	8008b44 <_dtoa_r+0xbac>
 800806e:	4883      	ldr	r0, [pc, #524]	; (800827c <_dtoa_r+0x2e4>)
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	1e43      	subs	r3, r0, #1
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	e7df      	b.n	8008038 <_dtoa_r+0xa0>
 8008078:	ec4b ab10 	vmov	d0, sl, fp
 800807c:	aa10      	add	r2, sp, #64	; 0x40
 800807e:	a911      	add	r1, sp, #68	; 0x44
 8008080:	4620      	mov	r0, r4
 8008082:	f001 ff33 	bl	8009eec <__d2b>
 8008086:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800808a:	ee08 0a10 	vmov	s16, r0
 800808e:	2d00      	cmp	r5, #0
 8008090:	f000 8084 	beq.w	800819c <_dtoa_r+0x204>
 8008094:	ee19 3a90 	vmov	r3, s19
 8008098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800809c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080a0:	4656      	mov	r6, sl
 80080a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080ae:	4b74      	ldr	r3, [pc, #464]	; (8008280 <_dtoa_r+0x2e8>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	4630      	mov	r0, r6
 80080b4:	4639      	mov	r1, r7
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	a365      	add	r3, pc, #404	; (adr r3, 8008250 <_dtoa_r+0x2b8>)
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	a364      	add	r3, pc, #400	; (adr r3, 8008258 <_dtoa_r+0x2c0>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 f8df 	bl	800028c <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	4628      	mov	r0, r5
 80080d2:	460f      	mov	r7, r1
 80080d4:	f7f8 fa26 	bl	8000524 <__aeabi_i2d>
 80080d8:	a361      	add	r3, pc, #388	; (adr r3, 8008260 <_dtoa_r+0x2c8>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 fa8b 	bl	80005f8 <__aeabi_dmul>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 f8cf 	bl	800028c <__adddf3>
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	f7f8 fd31 	bl	8000b58 <__aeabi_d2iz>
 80080f6:	2200      	movs	r2, #0
 80080f8:	9000      	str	r0, [sp, #0]
 80080fa:	2300      	movs	r3, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 fcec 	bl	8000adc <__aeabi_dcmplt>
 8008104:	b150      	cbz	r0, 800811c <_dtoa_r+0x184>
 8008106:	9800      	ldr	r0, [sp, #0]
 8008108:	f7f8 fa0c 	bl	8000524 <__aeabi_i2d>
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	f7f8 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008114:	b910      	cbnz	r0, 800811c <_dtoa_r+0x184>
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	3b01      	subs	r3, #1
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	9b00      	ldr	r3, [sp, #0]
 800811e:	2b16      	cmp	r3, #22
 8008120:	d85a      	bhi.n	80081d8 <_dtoa_r+0x240>
 8008122:	9a00      	ldr	r2, [sp, #0]
 8008124:	4b57      	ldr	r3, [pc, #348]	; (8008284 <_dtoa_r+0x2ec>)
 8008126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	ec51 0b19 	vmov	r0, r1, d9
 8008132:	f7f8 fcd3 	bl	8000adc <__aeabi_dcmplt>
 8008136:	2800      	cmp	r0, #0
 8008138:	d050      	beq.n	80081dc <_dtoa_r+0x244>
 800813a:	9b00      	ldr	r3, [sp, #0]
 800813c:	3b01      	subs	r3, #1
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	2300      	movs	r3, #0
 8008142:	930b      	str	r3, [sp, #44]	; 0x2c
 8008144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008146:	1b5d      	subs	r5, r3, r5
 8008148:	1e6b      	subs	r3, r5, #1
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	bf45      	ittet	mi
 800814e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008152:	9304      	strmi	r3, [sp, #16]
 8008154:	2300      	movpl	r3, #0
 8008156:	2300      	movmi	r3, #0
 8008158:	bf4c      	ite	mi
 800815a:	9305      	strmi	r3, [sp, #20]
 800815c:	9304      	strpl	r3, [sp, #16]
 800815e:	9b00      	ldr	r3, [sp, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	db3d      	blt.n	80081e0 <_dtoa_r+0x248>
 8008164:	9b05      	ldr	r3, [sp, #20]
 8008166:	9a00      	ldr	r2, [sp, #0]
 8008168:	920a      	str	r2, [sp, #40]	; 0x28
 800816a:	4413      	add	r3, r2
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	9307      	str	r3, [sp, #28]
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	2b09      	cmp	r3, #9
 8008176:	f200 8089 	bhi.w	800828c <_dtoa_r+0x2f4>
 800817a:	2b05      	cmp	r3, #5
 800817c:	bfc4      	itt	gt
 800817e:	3b04      	subgt	r3, #4
 8008180:	9306      	strgt	r3, [sp, #24]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	f1a3 0302 	sub.w	r3, r3, #2
 8008188:	bfcc      	ite	gt
 800818a:	2500      	movgt	r5, #0
 800818c:	2501      	movle	r5, #1
 800818e:	2b03      	cmp	r3, #3
 8008190:	f200 8087 	bhi.w	80082a2 <_dtoa_r+0x30a>
 8008194:	e8df f003 	tbb	[pc, r3]
 8008198:	59383a2d 	.word	0x59383a2d
 800819c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081a0:	441d      	add	r5, r3
 80081a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	bfc1      	itttt	gt
 80081aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081ba:	bfda      	itte	le
 80081bc:	f1c3 0320 	rsble	r3, r3, #32
 80081c0:	fa06 f003 	lslle.w	r0, r6, r3
 80081c4:	4318      	orrgt	r0, r3
 80081c6:	f7f8 f99d 	bl	8000504 <__aeabi_ui2d>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4606      	mov	r6, r0
 80081ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081d2:	3d01      	subs	r5, #1
 80081d4:	930e      	str	r3, [sp, #56]	; 0x38
 80081d6:	e76a      	b.n	80080ae <_dtoa_r+0x116>
 80081d8:	2301      	movs	r3, #1
 80081da:	e7b2      	b.n	8008142 <_dtoa_r+0x1aa>
 80081dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081de:	e7b1      	b.n	8008144 <_dtoa_r+0x1ac>
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	9a00      	ldr	r2, [sp, #0]
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	4253      	negs	r3, r2
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	2300      	movs	r3, #0
 80081ee:	930a      	str	r3, [sp, #40]	; 0x28
 80081f0:	e7bf      	b.n	8008172 <_dtoa_r+0x1da>
 80081f2:	2300      	movs	r3, #0
 80081f4:	9308      	str	r3, [sp, #32]
 80081f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dc55      	bgt.n	80082a8 <_dtoa_r+0x310>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008202:	461a      	mov	r2, r3
 8008204:	9209      	str	r2, [sp, #36]	; 0x24
 8008206:	e00c      	b.n	8008222 <_dtoa_r+0x28a>
 8008208:	2301      	movs	r3, #1
 800820a:	e7f3      	b.n	80081f4 <_dtoa_r+0x25c>
 800820c:	2300      	movs	r3, #0
 800820e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	4413      	add	r3, r2
 8008216:	9302      	str	r3, [sp, #8]
 8008218:	3301      	adds	r3, #1
 800821a:	2b01      	cmp	r3, #1
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	bfb8      	it	lt
 8008220:	2301      	movlt	r3, #1
 8008222:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008224:	2200      	movs	r2, #0
 8008226:	6042      	str	r2, [r0, #4]
 8008228:	2204      	movs	r2, #4
 800822a:	f102 0614 	add.w	r6, r2, #20
 800822e:	429e      	cmp	r6, r3
 8008230:	6841      	ldr	r1, [r0, #4]
 8008232:	d93d      	bls.n	80082b0 <_dtoa_r+0x318>
 8008234:	4620      	mov	r0, r4
 8008236:	f001 fa6b 	bl	8009710 <_Balloc>
 800823a:	9001      	str	r0, [sp, #4]
 800823c:	2800      	cmp	r0, #0
 800823e:	d13b      	bne.n	80082b8 <_dtoa_r+0x320>
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <_dtoa_r+0x2f0>)
 8008242:	4602      	mov	r2, r0
 8008244:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008248:	e6c0      	b.n	8007fcc <_dtoa_r+0x34>
 800824a:	2301      	movs	r3, #1
 800824c:	e7df      	b.n	800820e <_dtoa_r+0x276>
 800824e:	bf00      	nop
 8008250:	636f4361 	.word	0x636f4361
 8008254:	3fd287a7 	.word	0x3fd287a7
 8008258:	8b60c8b3 	.word	0x8b60c8b3
 800825c:	3fc68a28 	.word	0x3fc68a28
 8008260:	509f79fb 	.word	0x509f79fb
 8008264:	3fd34413 	.word	0x3fd34413
 8008268:	0800b9d6 	.word	0x0800b9d6
 800826c:	0800b9ed 	.word	0x0800b9ed
 8008270:	7ff00000 	.word	0x7ff00000
 8008274:	0800b9d2 	.word	0x0800b9d2
 8008278:	0800b9c9 	.word	0x0800b9c9
 800827c:	0800bcaa 	.word	0x0800bcaa
 8008280:	3ff80000 	.word	0x3ff80000
 8008284:	0800bbc0 	.word	0x0800bbc0
 8008288:	0800ba48 	.word	0x0800ba48
 800828c:	2501      	movs	r5, #1
 800828e:	2300      	movs	r3, #0
 8008290:	9306      	str	r3, [sp, #24]
 8008292:	9508      	str	r5, [sp, #32]
 8008294:	f04f 33ff 	mov.w	r3, #4294967295
 8008298:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	2312      	movs	r3, #18
 80082a0:	e7b0      	b.n	8008204 <_dtoa_r+0x26c>
 80082a2:	2301      	movs	r3, #1
 80082a4:	9308      	str	r3, [sp, #32]
 80082a6:	e7f5      	b.n	8008294 <_dtoa_r+0x2fc>
 80082a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ae:	e7b8      	b.n	8008222 <_dtoa_r+0x28a>
 80082b0:	3101      	adds	r1, #1
 80082b2:	6041      	str	r1, [r0, #4]
 80082b4:	0052      	lsls	r2, r2, #1
 80082b6:	e7b8      	b.n	800822a <_dtoa_r+0x292>
 80082b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ba:	9a01      	ldr	r2, [sp, #4]
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	2b0e      	cmp	r3, #14
 80082c2:	f200 809d 	bhi.w	8008400 <_dtoa_r+0x468>
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	f000 809a 	beq.w	8008400 <_dtoa_r+0x468>
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd32      	ble.n	8008338 <_dtoa_r+0x3a0>
 80082d2:	4ab7      	ldr	r2, [pc, #732]	; (80085b0 <_dtoa_r+0x618>)
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082e0:	9b00      	ldr	r3, [sp, #0]
 80082e2:	05d8      	lsls	r0, r3, #23
 80082e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082e8:	d516      	bpl.n	8008318 <_dtoa_r+0x380>
 80082ea:	4bb2      	ldr	r3, [pc, #712]	; (80085b4 <_dtoa_r+0x61c>)
 80082ec:	ec51 0b19 	vmov	r0, r1, d9
 80082f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082f4:	f7f8 faaa 	bl	800084c <__aeabi_ddiv>
 80082f8:	f007 070f 	and.w	r7, r7, #15
 80082fc:	4682      	mov	sl, r0
 80082fe:	468b      	mov	fp, r1
 8008300:	2503      	movs	r5, #3
 8008302:	4eac      	ldr	r6, [pc, #688]	; (80085b4 <_dtoa_r+0x61c>)
 8008304:	b957      	cbnz	r7, 800831c <_dtoa_r+0x384>
 8008306:	4642      	mov	r2, r8
 8008308:	464b      	mov	r3, r9
 800830a:	4650      	mov	r0, sl
 800830c:	4659      	mov	r1, fp
 800830e:	f7f8 fa9d 	bl	800084c <__aeabi_ddiv>
 8008312:	4682      	mov	sl, r0
 8008314:	468b      	mov	fp, r1
 8008316:	e028      	b.n	800836a <_dtoa_r+0x3d2>
 8008318:	2502      	movs	r5, #2
 800831a:	e7f2      	b.n	8008302 <_dtoa_r+0x36a>
 800831c:	07f9      	lsls	r1, r7, #31
 800831e:	d508      	bpl.n	8008332 <_dtoa_r+0x39a>
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	3501      	adds	r5, #1
 800832e:	4680      	mov	r8, r0
 8008330:	4689      	mov	r9, r1
 8008332:	107f      	asrs	r7, r7, #1
 8008334:	3608      	adds	r6, #8
 8008336:	e7e5      	b.n	8008304 <_dtoa_r+0x36c>
 8008338:	f000 809b 	beq.w	8008472 <_dtoa_r+0x4da>
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	4f9d      	ldr	r7, [pc, #628]	; (80085b4 <_dtoa_r+0x61c>)
 8008340:	425e      	negs	r6, r3
 8008342:	4b9b      	ldr	r3, [pc, #620]	; (80085b0 <_dtoa_r+0x618>)
 8008344:	f006 020f 	and.w	r2, r6, #15
 8008348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	ec51 0b19 	vmov	r0, r1, d9
 8008354:	f7f8 f950 	bl	80005f8 <__aeabi_dmul>
 8008358:	1136      	asrs	r6, r6, #4
 800835a:	4682      	mov	sl, r0
 800835c:	468b      	mov	fp, r1
 800835e:	2300      	movs	r3, #0
 8008360:	2502      	movs	r5, #2
 8008362:	2e00      	cmp	r6, #0
 8008364:	d17a      	bne.n	800845c <_dtoa_r+0x4c4>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1d3      	bne.n	8008312 <_dtoa_r+0x37a>
 800836a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8082 	beq.w	8008476 <_dtoa_r+0x4de>
 8008372:	4b91      	ldr	r3, [pc, #580]	; (80085b8 <_dtoa_r+0x620>)
 8008374:	2200      	movs	r2, #0
 8008376:	4650      	mov	r0, sl
 8008378:	4659      	mov	r1, fp
 800837a:	f7f8 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d079      	beq.n	8008476 <_dtoa_r+0x4de>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d076      	beq.n	8008476 <_dtoa_r+0x4de>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	dd36      	ble.n	80083fc <_dtoa_r+0x464>
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	1e5f      	subs	r7, r3, #1
 8008396:	2200      	movs	r2, #0
 8008398:	4b88      	ldr	r3, [pc, #544]	; (80085bc <_dtoa_r+0x624>)
 800839a:	f7f8 f92d 	bl	80005f8 <__aeabi_dmul>
 800839e:	9e02      	ldr	r6, [sp, #8]
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	3501      	adds	r5, #1
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f8 f8bc 	bl	8000524 <__aeabi_i2d>
 80083ac:	4652      	mov	r2, sl
 80083ae:	465b      	mov	r3, fp
 80083b0:	f7f8 f922 	bl	80005f8 <__aeabi_dmul>
 80083b4:	4b82      	ldr	r3, [pc, #520]	; (80085c0 <_dtoa_r+0x628>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	f7f7 ff68 	bl	800028c <__adddf3>
 80083bc:	46d0      	mov	r8, sl
 80083be:	46d9      	mov	r9, fp
 80083c0:	4682      	mov	sl, r0
 80083c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	d158      	bne.n	800847c <_dtoa_r+0x4e4>
 80083ca:	4b7e      	ldr	r3, [pc, #504]	; (80085c4 <_dtoa_r+0x62c>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f7 ff59 	bl	8000288 <__aeabi_dsub>
 80083d6:	4652      	mov	r2, sl
 80083d8:	465b      	mov	r3, fp
 80083da:	4680      	mov	r8, r0
 80083dc:	4689      	mov	r9, r1
 80083de:	f7f8 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f040 8295 	bne.w	8008912 <_dtoa_r+0x97a>
 80083e8:	4652      	mov	r2, sl
 80083ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f8 fb73 	bl	8000adc <__aeabi_dcmplt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f040 8289 	bne.w	800890e <_dtoa_r+0x976>
 80083fc:	ec5b ab19 	vmov	sl, fp, d9
 8008400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008402:	2b00      	cmp	r3, #0
 8008404:	f2c0 8148 	blt.w	8008698 <_dtoa_r+0x700>
 8008408:	9a00      	ldr	r2, [sp, #0]
 800840a:	2a0e      	cmp	r2, #14
 800840c:	f300 8144 	bgt.w	8008698 <_dtoa_r+0x700>
 8008410:	4b67      	ldr	r3, [pc, #412]	; (80085b0 <_dtoa_r+0x618>)
 8008412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008416:	e9d3 8900 	ldrd	r8, r9, [r3]
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	f280 80d5 	bge.w	80085cc <_dtoa_r+0x634>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f300 80d1 	bgt.w	80085cc <_dtoa_r+0x634>
 800842a:	f040 826f 	bne.w	800890c <_dtoa_r+0x974>
 800842e:	4b65      	ldr	r3, [pc, #404]	; (80085c4 <_dtoa_r+0x62c>)
 8008430:	2200      	movs	r2, #0
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	f7f8 fb61 	bl	8000b04 <__aeabi_dcmpge>
 8008442:	9e03      	ldr	r6, [sp, #12]
 8008444:	4637      	mov	r7, r6
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8245 	bne.w	80088d6 <_dtoa_r+0x93e>
 800844c:	9d01      	ldr	r5, [sp, #4]
 800844e:	2331      	movs	r3, #49	; 0x31
 8008450:	f805 3b01 	strb.w	r3, [r5], #1
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	e240      	b.n	80088de <_dtoa_r+0x946>
 800845c:	07f2      	lsls	r2, r6, #31
 800845e:	d505      	bpl.n	800846c <_dtoa_r+0x4d4>
 8008460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008464:	f7f8 f8c8 	bl	80005f8 <__aeabi_dmul>
 8008468:	3501      	adds	r5, #1
 800846a:	2301      	movs	r3, #1
 800846c:	1076      	asrs	r6, r6, #1
 800846e:	3708      	adds	r7, #8
 8008470:	e777      	b.n	8008362 <_dtoa_r+0x3ca>
 8008472:	2502      	movs	r5, #2
 8008474:	e779      	b.n	800836a <_dtoa_r+0x3d2>
 8008476:	9f00      	ldr	r7, [sp, #0]
 8008478:	9e03      	ldr	r6, [sp, #12]
 800847a:	e794      	b.n	80083a6 <_dtoa_r+0x40e>
 800847c:	9901      	ldr	r1, [sp, #4]
 800847e:	4b4c      	ldr	r3, [pc, #304]	; (80085b0 <_dtoa_r+0x618>)
 8008480:	4431      	add	r1, r6
 8008482:	910d      	str	r1, [sp, #52]	; 0x34
 8008484:	9908      	ldr	r1, [sp, #32]
 8008486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800848a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800848e:	2900      	cmp	r1, #0
 8008490:	d043      	beq.n	800851a <_dtoa_r+0x582>
 8008492:	494d      	ldr	r1, [pc, #308]	; (80085c8 <_dtoa_r+0x630>)
 8008494:	2000      	movs	r0, #0
 8008496:	f7f8 f9d9 	bl	800084c <__aeabi_ddiv>
 800849a:	4652      	mov	r2, sl
 800849c:	465b      	mov	r3, fp
 800849e:	f7f7 fef3 	bl	8000288 <__aeabi_dsub>
 80084a2:	9d01      	ldr	r5, [sp, #4]
 80084a4:	4682      	mov	sl, r0
 80084a6:	468b      	mov	fp, r1
 80084a8:	4649      	mov	r1, r9
 80084aa:	4640      	mov	r0, r8
 80084ac:	f7f8 fb54 	bl	8000b58 <__aeabi_d2iz>
 80084b0:	4606      	mov	r6, r0
 80084b2:	f7f8 f837 	bl	8000524 <__aeabi_i2d>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4640      	mov	r0, r8
 80084bc:	4649      	mov	r1, r9
 80084be:	f7f7 fee3 	bl	8000288 <__aeabi_dsub>
 80084c2:	3630      	adds	r6, #48	; 0x30
 80084c4:	f805 6b01 	strb.w	r6, [r5], #1
 80084c8:	4652      	mov	r2, sl
 80084ca:	465b      	mov	r3, fp
 80084cc:	4680      	mov	r8, r0
 80084ce:	4689      	mov	r9, r1
 80084d0:	f7f8 fb04 	bl	8000adc <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d163      	bne.n	80085a0 <_dtoa_r+0x608>
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	4936      	ldr	r1, [pc, #216]	; (80085b8 <_dtoa_r+0x620>)
 80084de:	2000      	movs	r0, #0
 80084e0:	f7f7 fed2 	bl	8000288 <__aeabi_dsub>
 80084e4:	4652      	mov	r2, sl
 80084e6:	465b      	mov	r3, fp
 80084e8:	f7f8 faf8 	bl	8000adc <__aeabi_dcmplt>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f040 80b5 	bne.w	800865c <_dtoa_r+0x6c4>
 80084f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f4:	429d      	cmp	r5, r3
 80084f6:	d081      	beq.n	80083fc <_dtoa_r+0x464>
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <_dtoa_r+0x624>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	4650      	mov	r0, sl
 80084fe:	4659      	mov	r1, fp
 8008500:	f7f8 f87a 	bl	80005f8 <__aeabi_dmul>
 8008504:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <_dtoa_r+0x624>)
 8008506:	4682      	mov	sl, r0
 8008508:	468b      	mov	fp, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	2200      	movs	r2, #0
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	4680      	mov	r8, r0
 8008516:	4689      	mov	r9, r1
 8008518:	e7c6      	b.n	80084a8 <_dtoa_r+0x510>
 800851a:	4650      	mov	r0, sl
 800851c:	4659      	mov	r1, fp
 800851e:	f7f8 f86b 	bl	80005f8 <__aeabi_dmul>
 8008522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008524:	9d01      	ldr	r5, [sp, #4]
 8008526:	930f      	str	r3, [sp, #60]	; 0x3c
 8008528:	4682      	mov	sl, r0
 800852a:	468b      	mov	fp, r1
 800852c:	4649      	mov	r1, r9
 800852e:	4640      	mov	r0, r8
 8008530:	f7f8 fb12 	bl	8000b58 <__aeabi_d2iz>
 8008534:	4606      	mov	r6, r0
 8008536:	f7f7 fff5 	bl	8000524 <__aeabi_i2d>
 800853a:	3630      	adds	r6, #48	; 0x30
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f7 fea0 	bl	8000288 <__aeabi_dsub>
 8008548:	f805 6b01 	strb.w	r6, [r5], #1
 800854c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854e:	429d      	cmp	r5, r3
 8008550:	4680      	mov	r8, r0
 8008552:	4689      	mov	r9, r1
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	d124      	bne.n	80085a4 <_dtoa_r+0x60c>
 800855a:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <_dtoa_r+0x630>)
 800855c:	4650      	mov	r0, sl
 800855e:	4659      	mov	r1, fp
 8008560:	f7f7 fe94 	bl	800028c <__adddf3>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4640      	mov	r0, r8
 800856a:	4649      	mov	r1, r9
 800856c:	f7f8 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8008570:	2800      	cmp	r0, #0
 8008572:	d173      	bne.n	800865c <_dtoa_r+0x6c4>
 8008574:	4652      	mov	r2, sl
 8008576:	465b      	mov	r3, fp
 8008578:	4913      	ldr	r1, [pc, #76]	; (80085c8 <_dtoa_r+0x630>)
 800857a:	2000      	movs	r0, #0
 800857c:	f7f7 fe84 	bl	8000288 <__aeabi_dsub>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4640      	mov	r0, r8
 8008586:	4649      	mov	r1, r9
 8008588:	f7f8 faa8 	bl	8000adc <__aeabi_dcmplt>
 800858c:	2800      	cmp	r0, #0
 800858e:	f43f af35 	beq.w	80083fc <_dtoa_r+0x464>
 8008592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008594:	1e6b      	subs	r3, r5, #1
 8008596:	930f      	str	r3, [sp, #60]	; 0x3c
 8008598:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800859c:	2b30      	cmp	r3, #48	; 0x30
 800859e:	d0f8      	beq.n	8008592 <_dtoa_r+0x5fa>
 80085a0:	9700      	str	r7, [sp, #0]
 80085a2:	e049      	b.n	8008638 <_dtoa_r+0x6a0>
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <_dtoa_r+0x624>)
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4680      	mov	r8, r0
 80085ac:	4689      	mov	r9, r1
 80085ae:	e7bd      	b.n	800852c <_dtoa_r+0x594>
 80085b0:	0800bbc0 	.word	0x0800bbc0
 80085b4:	0800bb98 	.word	0x0800bb98
 80085b8:	3ff00000 	.word	0x3ff00000
 80085bc:	40240000 	.word	0x40240000
 80085c0:	401c0000 	.word	0x401c0000
 80085c4:	40140000 	.word	0x40140000
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	9d01      	ldr	r5, [sp, #4]
 80085ce:	4656      	mov	r6, sl
 80085d0:	465f      	mov	r7, fp
 80085d2:	4642      	mov	r2, r8
 80085d4:	464b      	mov	r3, r9
 80085d6:	4630      	mov	r0, r6
 80085d8:	4639      	mov	r1, r7
 80085da:	f7f8 f937 	bl	800084c <__aeabi_ddiv>
 80085de:	f7f8 fabb 	bl	8000b58 <__aeabi_d2iz>
 80085e2:	4682      	mov	sl, r0
 80085e4:	f7f7 ff9e 	bl	8000524 <__aeabi_i2d>
 80085e8:	4642      	mov	r2, r8
 80085ea:	464b      	mov	r3, r9
 80085ec:	f7f8 f804 	bl	80005f8 <__aeabi_dmul>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085fc:	f7f7 fe44 	bl	8000288 <__aeabi_dsub>
 8008600:	f805 6b01 	strb.w	r6, [r5], #1
 8008604:	9e01      	ldr	r6, [sp, #4]
 8008606:	9f03      	ldr	r7, [sp, #12]
 8008608:	1bae      	subs	r6, r5, r6
 800860a:	42b7      	cmp	r7, r6
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	d135      	bne.n	800867e <_dtoa_r+0x6e6>
 8008612:	f7f7 fe3b 	bl	800028c <__adddf3>
 8008616:	4642      	mov	r2, r8
 8008618:	464b      	mov	r3, r9
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	f7f8 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008622:	b9d0      	cbnz	r0, 800865a <_dtoa_r+0x6c2>
 8008624:	4642      	mov	r2, r8
 8008626:	464b      	mov	r3, r9
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f8 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008630:	b110      	cbz	r0, 8008638 <_dtoa_r+0x6a0>
 8008632:	f01a 0f01 	tst.w	sl, #1
 8008636:	d110      	bne.n	800865a <_dtoa_r+0x6c2>
 8008638:	4620      	mov	r0, r4
 800863a:	ee18 1a10 	vmov	r1, s16
 800863e:	f001 f8a7 	bl	8009790 <_Bfree>
 8008642:	2300      	movs	r3, #0
 8008644:	9800      	ldr	r0, [sp, #0]
 8008646:	702b      	strb	r3, [r5, #0]
 8008648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800864a:	3001      	adds	r0, #1
 800864c:	6018      	str	r0, [r3, #0]
 800864e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008650:	2b00      	cmp	r3, #0
 8008652:	f43f acf1 	beq.w	8008038 <_dtoa_r+0xa0>
 8008656:	601d      	str	r5, [r3, #0]
 8008658:	e4ee      	b.n	8008038 <_dtoa_r+0xa0>
 800865a:	9f00      	ldr	r7, [sp, #0]
 800865c:	462b      	mov	r3, r5
 800865e:	461d      	mov	r5, r3
 8008660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008664:	2a39      	cmp	r2, #57	; 0x39
 8008666:	d106      	bne.n	8008676 <_dtoa_r+0x6de>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d1f7      	bne.n	800865e <_dtoa_r+0x6c6>
 800866e:	9901      	ldr	r1, [sp, #4]
 8008670:	2230      	movs	r2, #48	; 0x30
 8008672:	3701      	adds	r7, #1
 8008674:	700a      	strb	r2, [r1, #0]
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	3201      	adds	r2, #1
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	e790      	b.n	80085a0 <_dtoa_r+0x608>
 800867e:	4ba6      	ldr	r3, [pc, #664]	; (8008918 <_dtoa_r+0x980>)
 8008680:	2200      	movs	r2, #0
 8008682:	f7f7 ffb9 	bl	80005f8 <__aeabi_dmul>
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	f7f8 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008692:	2800      	cmp	r0, #0
 8008694:	d09d      	beq.n	80085d2 <_dtoa_r+0x63a>
 8008696:	e7cf      	b.n	8008638 <_dtoa_r+0x6a0>
 8008698:	9a08      	ldr	r2, [sp, #32]
 800869a:	2a00      	cmp	r2, #0
 800869c:	f000 80d7 	beq.w	800884e <_dtoa_r+0x8b6>
 80086a0:	9a06      	ldr	r2, [sp, #24]
 80086a2:	2a01      	cmp	r2, #1
 80086a4:	f300 80ba 	bgt.w	800881c <_dtoa_r+0x884>
 80086a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	f000 80b2 	beq.w	8008814 <_dtoa_r+0x87c>
 80086b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086b4:	9e07      	ldr	r6, [sp, #28]
 80086b6:	9d04      	ldr	r5, [sp, #16]
 80086b8:	9a04      	ldr	r2, [sp, #16]
 80086ba:	441a      	add	r2, r3
 80086bc:	9204      	str	r2, [sp, #16]
 80086be:	9a05      	ldr	r2, [sp, #20]
 80086c0:	2101      	movs	r1, #1
 80086c2:	441a      	add	r2, r3
 80086c4:	4620      	mov	r0, r4
 80086c6:	9205      	str	r2, [sp, #20]
 80086c8:	f001 f964 	bl	8009994 <__i2b>
 80086cc:	4607      	mov	r7, r0
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	dd0c      	ble.n	80086ec <_dtoa_r+0x754>
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd09      	ble.n	80086ec <_dtoa_r+0x754>
 80086d8:	42ab      	cmp	r3, r5
 80086da:	9a04      	ldr	r2, [sp, #16]
 80086dc:	bfa8      	it	ge
 80086de:	462b      	movge	r3, r5
 80086e0:	1ad2      	subs	r2, r2, r3
 80086e2:	9204      	str	r2, [sp, #16]
 80086e4:	9a05      	ldr	r2, [sp, #20]
 80086e6:	1aed      	subs	r5, r5, r3
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	b31b      	cbz	r3, 8008738 <_dtoa_r+0x7a0>
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80af 	beq.w	8008856 <_dtoa_r+0x8be>
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	dd13      	ble.n	8008724 <_dtoa_r+0x78c>
 80086fc:	4639      	mov	r1, r7
 80086fe:	4632      	mov	r2, r6
 8008700:	4620      	mov	r0, r4
 8008702:	f001 fa07 	bl	8009b14 <__pow5mult>
 8008706:	ee18 2a10 	vmov	r2, s16
 800870a:	4601      	mov	r1, r0
 800870c:	4607      	mov	r7, r0
 800870e:	4620      	mov	r0, r4
 8008710:	f001 f956 	bl	80099c0 <__multiply>
 8008714:	ee18 1a10 	vmov	r1, s16
 8008718:	4680      	mov	r8, r0
 800871a:	4620      	mov	r0, r4
 800871c:	f001 f838 	bl	8009790 <_Bfree>
 8008720:	ee08 8a10 	vmov	s16, r8
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	1b9a      	subs	r2, r3, r6
 8008728:	d006      	beq.n	8008738 <_dtoa_r+0x7a0>
 800872a:	ee18 1a10 	vmov	r1, s16
 800872e:	4620      	mov	r0, r4
 8008730:	f001 f9f0 	bl	8009b14 <__pow5mult>
 8008734:	ee08 0a10 	vmov	s16, r0
 8008738:	2101      	movs	r1, #1
 800873a:	4620      	mov	r0, r4
 800873c:	f001 f92a 	bl	8009994 <__i2b>
 8008740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	4606      	mov	r6, r0
 8008746:	f340 8088 	ble.w	800885a <_dtoa_r+0x8c2>
 800874a:	461a      	mov	r2, r3
 800874c:	4601      	mov	r1, r0
 800874e:	4620      	mov	r0, r4
 8008750:	f001 f9e0 	bl	8009b14 <__pow5mult>
 8008754:	9b06      	ldr	r3, [sp, #24]
 8008756:	2b01      	cmp	r3, #1
 8008758:	4606      	mov	r6, r0
 800875a:	f340 8081 	ble.w	8008860 <_dtoa_r+0x8c8>
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	6933      	ldr	r3, [r6, #16]
 8008764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008768:	6918      	ldr	r0, [r3, #16]
 800876a:	f001 f8c3 	bl	80098f4 <__hi0bits>
 800876e:	f1c0 0020 	rsb	r0, r0, #32
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	4418      	add	r0, r3
 8008776:	f010 001f 	ands.w	r0, r0, #31
 800877a:	f000 8092 	beq.w	80088a2 <_dtoa_r+0x90a>
 800877e:	f1c0 0320 	rsb	r3, r0, #32
 8008782:	2b04      	cmp	r3, #4
 8008784:	f340 808a 	ble.w	800889c <_dtoa_r+0x904>
 8008788:	f1c0 001c 	rsb	r0, r0, #28
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	4403      	add	r3, r0
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	4403      	add	r3, r0
 8008796:	4405      	add	r5, r0
 8008798:	9305      	str	r3, [sp, #20]
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd07      	ble.n	80087b0 <_dtoa_r+0x818>
 80087a0:	ee18 1a10 	vmov	r1, s16
 80087a4:	461a      	mov	r2, r3
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 fa0e 	bl	8009bc8 <__lshift>
 80087ac:	ee08 0a10 	vmov	s16, r0
 80087b0:	9b05      	ldr	r3, [sp, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dd05      	ble.n	80087c2 <_dtoa_r+0x82a>
 80087b6:	4631      	mov	r1, r6
 80087b8:	461a      	mov	r2, r3
 80087ba:	4620      	mov	r0, r4
 80087bc:	f001 fa04 	bl	8009bc8 <__lshift>
 80087c0:	4606      	mov	r6, r0
 80087c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d06e      	beq.n	80088a6 <_dtoa_r+0x90e>
 80087c8:	ee18 0a10 	vmov	r0, s16
 80087cc:	4631      	mov	r1, r6
 80087ce:	f001 fa6b 	bl	8009ca8 <__mcmp>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	da67      	bge.n	80088a6 <_dtoa_r+0x90e>
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	3b01      	subs	r3, #1
 80087da:	ee18 1a10 	vmov	r1, s16
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	220a      	movs	r2, #10
 80087e2:	2300      	movs	r3, #0
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fff5 	bl	80097d4 <__multadd>
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	ee08 0a10 	vmov	s16, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 81b1 	beq.w	8008b58 <_dtoa_r+0xbc0>
 80087f6:	2300      	movs	r3, #0
 80087f8:	4639      	mov	r1, r7
 80087fa:	220a      	movs	r2, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 ffe9 	bl	80097d4 <__multadd>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	4607      	mov	r7, r0
 8008808:	f300 808e 	bgt.w	8008928 <_dtoa_r+0x990>
 800880c:	9b06      	ldr	r3, [sp, #24]
 800880e:	2b02      	cmp	r3, #2
 8008810:	dc51      	bgt.n	80088b6 <_dtoa_r+0x91e>
 8008812:	e089      	b.n	8008928 <_dtoa_r+0x990>
 8008814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800881a:	e74b      	b.n	80086b4 <_dtoa_r+0x71c>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1e5e      	subs	r6, r3, #1
 8008820:	9b07      	ldr	r3, [sp, #28]
 8008822:	42b3      	cmp	r3, r6
 8008824:	bfbf      	itttt	lt
 8008826:	9b07      	ldrlt	r3, [sp, #28]
 8008828:	9607      	strlt	r6, [sp, #28]
 800882a:	1af2      	sublt	r2, r6, r3
 800882c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800882e:	bfb6      	itet	lt
 8008830:	189b      	addlt	r3, r3, r2
 8008832:	1b9e      	subge	r6, r3, r6
 8008834:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	bfb8      	it	lt
 800883a:	2600      	movlt	r6, #0
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfb7      	itett	lt
 8008840:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008844:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008848:	1a9d      	sublt	r5, r3, r2
 800884a:	2300      	movlt	r3, #0
 800884c:	e734      	b.n	80086b8 <_dtoa_r+0x720>
 800884e:	9e07      	ldr	r6, [sp, #28]
 8008850:	9d04      	ldr	r5, [sp, #16]
 8008852:	9f08      	ldr	r7, [sp, #32]
 8008854:	e73b      	b.n	80086ce <_dtoa_r+0x736>
 8008856:	9a07      	ldr	r2, [sp, #28]
 8008858:	e767      	b.n	800872a <_dtoa_r+0x792>
 800885a:	9b06      	ldr	r3, [sp, #24]
 800885c:	2b01      	cmp	r3, #1
 800885e:	dc18      	bgt.n	8008892 <_dtoa_r+0x8fa>
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	d115      	bne.n	8008892 <_dtoa_r+0x8fa>
 8008866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800886a:	b993      	cbnz	r3, 8008892 <_dtoa_r+0x8fa>
 800886c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008870:	0d1b      	lsrs	r3, r3, #20
 8008872:	051b      	lsls	r3, r3, #20
 8008874:	b183      	cbz	r3, 8008898 <_dtoa_r+0x900>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	3301      	adds	r3, #1
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	3301      	adds	r3, #1
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	f04f 0801 	mov.w	r8, #1
 8008886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008888:	2b00      	cmp	r3, #0
 800888a:	f47f af6a 	bne.w	8008762 <_dtoa_r+0x7ca>
 800888e:	2001      	movs	r0, #1
 8008890:	e76f      	b.n	8008772 <_dtoa_r+0x7da>
 8008892:	f04f 0800 	mov.w	r8, #0
 8008896:	e7f6      	b.n	8008886 <_dtoa_r+0x8ee>
 8008898:	4698      	mov	r8, r3
 800889a:	e7f4      	b.n	8008886 <_dtoa_r+0x8ee>
 800889c:	f43f af7d 	beq.w	800879a <_dtoa_r+0x802>
 80088a0:	4618      	mov	r0, r3
 80088a2:	301c      	adds	r0, #28
 80088a4:	e772      	b.n	800878c <_dtoa_r+0x7f4>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dc37      	bgt.n	800891c <_dtoa_r+0x984>
 80088ac:	9b06      	ldr	r3, [sp, #24]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	dd34      	ble.n	800891c <_dtoa_r+0x984>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	9b02      	ldr	r3, [sp, #8]
 80088b8:	b96b      	cbnz	r3, 80088d6 <_dtoa_r+0x93e>
 80088ba:	4631      	mov	r1, r6
 80088bc:	2205      	movs	r2, #5
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 ff88 	bl	80097d4 <__multadd>
 80088c4:	4601      	mov	r1, r0
 80088c6:	4606      	mov	r6, r0
 80088c8:	ee18 0a10 	vmov	r0, s16
 80088cc:	f001 f9ec 	bl	8009ca8 <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f73f adbb 	bgt.w	800844c <_dtoa_r+0x4b4>
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	9d01      	ldr	r5, [sp, #4]
 80088da:	43db      	mvns	r3, r3
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	4631      	mov	r1, r6
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 ff53 	bl	8009790 <_Bfree>
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	f43f aea4 	beq.w	8008638 <_dtoa_r+0x6a0>
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	d005      	beq.n	8008902 <_dtoa_r+0x96a>
 80088f6:	45b8      	cmp	r8, r7
 80088f8:	d003      	beq.n	8008902 <_dtoa_r+0x96a>
 80088fa:	4641      	mov	r1, r8
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 ff47 	bl	8009790 <_Bfree>
 8008902:	4639      	mov	r1, r7
 8008904:	4620      	mov	r0, r4
 8008906:	f000 ff43 	bl	8009790 <_Bfree>
 800890a:	e695      	b.n	8008638 <_dtoa_r+0x6a0>
 800890c:	2600      	movs	r6, #0
 800890e:	4637      	mov	r7, r6
 8008910:	e7e1      	b.n	80088d6 <_dtoa_r+0x93e>
 8008912:	9700      	str	r7, [sp, #0]
 8008914:	4637      	mov	r7, r6
 8008916:	e599      	b.n	800844c <_dtoa_r+0x4b4>
 8008918:	40240000 	.word	0x40240000
 800891c:	9b08      	ldr	r3, [sp, #32]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80ca 	beq.w	8008ab8 <_dtoa_r+0xb20>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	9302      	str	r3, [sp, #8]
 8008928:	2d00      	cmp	r5, #0
 800892a:	dd05      	ble.n	8008938 <_dtoa_r+0x9a0>
 800892c:	4639      	mov	r1, r7
 800892e:	462a      	mov	r2, r5
 8008930:	4620      	mov	r0, r4
 8008932:	f001 f949 	bl	8009bc8 <__lshift>
 8008936:	4607      	mov	r7, r0
 8008938:	f1b8 0f00 	cmp.w	r8, #0
 800893c:	d05b      	beq.n	80089f6 <_dtoa_r+0xa5e>
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fee5 	bl	8009710 <_Balloc>
 8008946:	4605      	mov	r5, r0
 8008948:	b928      	cbnz	r0, 8008956 <_dtoa_r+0x9be>
 800894a:	4b87      	ldr	r3, [pc, #540]	; (8008b68 <_dtoa_r+0xbd0>)
 800894c:	4602      	mov	r2, r0
 800894e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008952:	f7ff bb3b 	b.w	8007fcc <_dtoa_r+0x34>
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	3202      	adds	r2, #2
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	f107 010c 	add.w	r1, r7, #12
 8008960:	300c      	adds	r0, #12
 8008962:	f000 fec7 	bl	80096f4 <memcpy>
 8008966:	2201      	movs	r2, #1
 8008968:	4629      	mov	r1, r5
 800896a:	4620      	mov	r0, r4
 800896c:	f001 f92c 	bl	8009bc8 <__lshift>
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	f103 0901 	add.w	r9, r3, #1
 8008976:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800897a:	4413      	add	r3, r2
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f00a 0301 	and.w	r3, sl, #1
 8008982:	46b8      	mov	r8, r7
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	4607      	mov	r7, r0
 8008988:	4631      	mov	r1, r6
 800898a:	ee18 0a10 	vmov	r0, s16
 800898e:	f7ff fa75 	bl	8007e7c <quorem>
 8008992:	4641      	mov	r1, r8
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800899a:	ee18 0a10 	vmov	r0, s16
 800899e:	f001 f983 	bl	8009ca8 <__mcmp>
 80089a2:	463a      	mov	r2, r7
 80089a4:	9003      	str	r0, [sp, #12]
 80089a6:	4631      	mov	r1, r6
 80089a8:	4620      	mov	r0, r4
 80089aa:	f001 f999 	bl	8009ce0 <__mdiff>
 80089ae:	68c2      	ldr	r2, [r0, #12]
 80089b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80089b4:	4605      	mov	r5, r0
 80089b6:	bb02      	cbnz	r2, 80089fa <_dtoa_r+0xa62>
 80089b8:	4601      	mov	r1, r0
 80089ba:	ee18 0a10 	vmov	r0, s16
 80089be:	f001 f973 	bl	8009ca8 <__mcmp>
 80089c2:	4602      	mov	r2, r0
 80089c4:	4629      	mov	r1, r5
 80089c6:	4620      	mov	r0, r4
 80089c8:	9207      	str	r2, [sp, #28]
 80089ca:	f000 fee1 	bl	8009790 <_Bfree>
 80089ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089d2:	ea43 0102 	orr.w	r1, r3, r2
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	430b      	orrs	r3, r1
 80089da:	464d      	mov	r5, r9
 80089dc:	d10f      	bne.n	80089fe <_dtoa_r+0xa66>
 80089de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089e2:	d02a      	beq.n	8008a3a <_dtoa_r+0xaa2>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd02      	ble.n	80089f0 <_dtoa_r+0xa58>
 80089ea:	9b02      	ldr	r3, [sp, #8]
 80089ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089f0:	f88b a000 	strb.w	sl, [fp]
 80089f4:	e775      	b.n	80088e2 <_dtoa_r+0x94a>
 80089f6:	4638      	mov	r0, r7
 80089f8:	e7ba      	b.n	8008970 <_dtoa_r+0x9d8>
 80089fa:	2201      	movs	r2, #1
 80089fc:	e7e2      	b.n	80089c4 <_dtoa_r+0xa2c>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db04      	blt.n	8008a0e <_dtoa_r+0xa76>
 8008a04:	9906      	ldr	r1, [sp, #24]
 8008a06:	430b      	orrs	r3, r1
 8008a08:	9904      	ldr	r1, [sp, #16]
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	d122      	bne.n	8008a54 <_dtoa_r+0xabc>
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	ddee      	ble.n	80089f0 <_dtoa_r+0xa58>
 8008a12:	ee18 1a10 	vmov	r1, s16
 8008a16:	2201      	movs	r2, #1
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f001 f8d5 	bl	8009bc8 <__lshift>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	ee08 0a10 	vmov	s16, r0
 8008a24:	f001 f940 	bl	8009ca8 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dc03      	bgt.n	8008a34 <_dtoa_r+0xa9c>
 8008a2c:	d1e0      	bne.n	80089f0 <_dtoa_r+0xa58>
 8008a2e:	f01a 0f01 	tst.w	sl, #1
 8008a32:	d0dd      	beq.n	80089f0 <_dtoa_r+0xa58>
 8008a34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a38:	d1d7      	bne.n	80089ea <_dtoa_r+0xa52>
 8008a3a:	2339      	movs	r3, #57	; 0x39
 8008a3c:	f88b 3000 	strb.w	r3, [fp]
 8008a40:	462b      	mov	r3, r5
 8008a42:	461d      	mov	r5, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a4a:	2a39      	cmp	r2, #57	; 0x39
 8008a4c:	d071      	beq.n	8008b32 <_dtoa_r+0xb9a>
 8008a4e:	3201      	adds	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	e746      	b.n	80088e2 <_dtoa_r+0x94a>
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	dd07      	ble.n	8008a68 <_dtoa_r+0xad0>
 8008a58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a5c:	d0ed      	beq.n	8008a3a <_dtoa_r+0xaa2>
 8008a5e:	f10a 0301 	add.w	r3, sl, #1
 8008a62:	f88b 3000 	strb.w	r3, [fp]
 8008a66:	e73c      	b.n	80088e2 <_dtoa_r+0x94a>
 8008a68:	9b05      	ldr	r3, [sp, #20]
 8008a6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a6e:	4599      	cmp	r9, r3
 8008a70:	d047      	beq.n	8008b02 <_dtoa_r+0xb6a>
 8008a72:	ee18 1a10 	vmov	r1, s16
 8008a76:	2300      	movs	r3, #0
 8008a78:	220a      	movs	r2, #10
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 feaa 	bl	80097d4 <__multadd>
 8008a80:	45b8      	cmp	r8, r7
 8008a82:	ee08 0a10 	vmov	s16, r0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	f04f 020a 	mov.w	r2, #10
 8008a8e:	4641      	mov	r1, r8
 8008a90:	4620      	mov	r0, r4
 8008a92:	d106      	bne.n	8008aa2 <_dtoa_r+0xb0a>
 8008a94:	f000 fe9e 	bl	80097d4 <__multadd>
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	f109 0901 	add.w	r9, r9, #1
 8008aa0:	e772      	b.n	8008988 <_dtoa_r+0x9f0>
 8008aa2:	f000 fe97 	bl	80097d4 <__multadd>
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	220a      	movs	r2, #10
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fe90 	bl	80097d4 <__multadd>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	e7f1      	b.n	8008a9c <_dtoa_r+0xb04>
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	9302      	str	r3, [sp, #8]
 8008abc:	9d01      	ldr	r5, [sp, #4]
 8008abe:	ee18 0a10 	vmov	r0, s16
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	f7ff f9da 	bl	8007e7c <quorem>
 8008ac8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008acc:	9b01      	ldr	r3, [sp, #4]
 8008ace:	f805 ab01 	strb.w	sl, [r5], #1
 8008ad2:	1aea      	subs	r2, r5, r3
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	dd09      	ble.n	8008aee <_dtoa_r+0xb56>
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	2300      	movs	r3, #0
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fe76 	bl	80097d4 <__multadd>
 8008ae8:	ee08 0a10 	vmov	s16, r0
 8008aec:	e7e7      	b.n	8008abe <_dtoa_r+0xb26>
 8008aee:	9b02      	ldr	r3, [sp, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfc8      	it	gt
 8008af4:	461d      	movgt	r5, r3
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	bfd8      	it	le
 8008afa:	2501      	movle	r5, #1
 8008afc:	441d      	add	r5, r3
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	ee18 1a10 	vmov	r1, s16
 8008b06:	2201      	movs	r2, #1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f001 f85d 	bl	8009bc8 <__lshift>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	ee08 0a10 	vmov	s16, r0
 8008b14:	f001 f8c8 	bl	8009ca8 <__mcmp>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	dc91      	bgt.n	8008a40 <_dtoa_r+0xaa8>
 8008b1c:	d102      	bne.n	8008b24 <_dtoa_r+0xb8c>
 8008b1e:	f01a 0f01 	tst.w	sl, #1
 8008b22:	d18d      	bne.n	8008a40 <_dtoa_r+0xaa8>
 8008b24:	462b      	mov	r3, r5
 8008b26:	461d      	mov	r5, r3
 8008b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b2c:	2a30      	cmp	r2, #48	; 0x30
 8008b2e:	d0fa      	beq.n	8008b26 <_dtoa_r+0xb8e>
 8008b30:	e6d7      	b.n	80088e2 <_dtoa_r+0x94a>
 8008b32:	9a01      	ldr	r2, [sp, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d184      	bne.n	8008a42 <_dtoa_r+0xaaa>
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	2331      	movs	r3, #49	; 0x31
 8008b40:	7013      	strb	r3, [r2, #0]
 8008b42:	e6ce      	b.n	80088e2 <_dtoa_r+0x94a>
 8008b44:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <_dtoa_r+0xbd4>)
 8008b46:	f7ff ba95 	b.w	8008074 <_dtoa_r+0xdc>
 8008b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f47f aa6e 	bne.w	800802e <_dtoa_r+0x96>
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <_dtoa_r+0xbd8>)
 8008b54:	f7ff ba8e 	b.w	8008074 <_dtoa_r+0xdc>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dcae      	bgt.n	8008abc <_dtoa_r+0xb24>
 8008b5e:	9b06      	ldr	r3, [sp, #24]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	f73f aea8 	bgt.w	80088b6 <_dtoa_r+0x91e>
 8008b66:	e7a9      	b.n	8008abc <_dtoa_r+0xb24>
 8008b68:	0800ba48 	.word	0x0800ba48
 8008b6c:	0800bca9 	.word	0x0800bca9
 8008b70:	0800b9c9 	.word	0x0800b9c9

08008b74 <__sflush_r>:
 8008b74:	898a      	ldrh	r2, [r1, #12]
 8008b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	0710      	lsls	r0, r2, #28
 8008b7e:	460c      	mov	r4, r1
 8008b80:	d458      	bmi.n	8008c34 <__sflush_r+0xc0>
 8008b82:	684b      	ldr	r3, [r1, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dc05      	bgt.n	8008b94 <__sflush_r+0x20>
 8008b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dc02      	bgt.n	8008b94 <__sflush_r+0x20>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d0f9      	beq.n	8008b8e <__sflush_r+0x1a>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba0:	682f      	ldr	r7, [r5, #0]
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	d032      	beq.n	8008c0c <__sflush_r+0x98>
 8008ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	075a      	lsls	r2, r3, #29
 8008bac:	d505      	bpl.n	8008bba <__sflush_r+0x46>
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	1ac0      	subs	r0, r0, r3
 8008bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bb4:	b10b      	cbz	r3, 8008bba <__sflush_r+0x46>
 8008bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bb8:	1ac0      	subs	r0, r0, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc0:	6a21      	ldr	r1, [r4, #32]
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b0      	blx	r6
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	d106      	bne.n	8008bda <__sflush_r+0x66>
 8008bcc:	6829      	ldr	r1, [r5, #0]
 8008bce:	291d      	cmp	r1, #29
 8008bd0:	d82c      	bhi.n	8008c2c <__sflush_r+0xb8>
 8008bd2:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <__sflush_r+0x108>)
 8008bd4:	40ca      	lsrs	r2, r1
 8008bd6:	07d6      	lsls	r6, r2, #31
 8008bd8:	d528      	bpl.n	8008c2c <__sflush_r+0xb8>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6062      	str	r2, [r4, #4]
 8008bde:	04d9      	lsls	r1, r3, #19
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	d504      	bpl.n	8008bf0 <__sflush_r+0x7c>
 8008be6:	1c42      	adds	r2, r0, #1
 8008be8:	d101      	bne.n	8008bee <__sflush_r+0x7a>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b903      	cbnz	r3, 8008bf0 <__sflush_r+0x7c>
 8008bee:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf2:	602f      	str	r7, [r5, #0]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d0ca      	beq.n	8008b8e <__sflush_r+0x1a>
 8008bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bfc:	4299      	cmp	r1, r3
 8008bfe:	d002      	beq.n	8008c06 <__sflush_r+0x92>
 8008c00:	4628      	mov	r0, r5
 8008c02:	f001 fa5d 	bl	800a0c0 <_free_r>
 8008c06:	2000      	movs	r0, #0
 8008c08:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0a:	e7c1      	b.n	8008b90 <__sflush_r+0x1c>
 8008c0c:	6a21      	ldr	r1, [r4, #32]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b0      	blx	r6
 8008c14:	1c41      	adds	r1, r0, #1
 8008c16:	d1c7      	bne.n	8008ba8 <__sflush_r+0x34>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0c4      	beq.n	8008ba8 <__sflush_r+0x34>
 8008c1e:	2b1d      	cmp	r3, #29
 8008c20:	d001      	beq.n	8008c26 <__sflush_r+0xb2>
 8008c22:	2b16      	cmp	r3, #22
 8008c24:	d101      	bne.n	8008c2a <__sflush_r+0xb6>
 8008c26:	602f      	str	r7, [r5, #0]
 8008c28:	e7b1      	b.n	8008b8e <__sflush_r+0x1a>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	e7ad      	b.n	8008b90 <__sflush_r+0x1c>
 8008c34:	690f      	ldr	r7, [r1, #16]
 8008c36:	2f00      	cmp	r7, #0
 8008c38:	d0a9      	beq.n	8008b8e <__sflush_r+0x1a>
 8008c3a:	0793      	lsls	r3, r2, #30
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	bf08      	it	eq
 8008c40:	694b      	ldreq	r3, [r1, #20]
 8008c42:	600f      	str	r7, [r1, #0]
 8008c44:	bf18      	it	ne
 8008c46:	2300      	movne	r3, #0
 8008c48:	eba6 0807 	sub.w	r8, r6, r7
 8008c4c:	608b      	str	r3, [r1, #8]
 8008c4e:	f1b8 0f00 	cmp.w	r8, #0
 8008c52:	dd9c      	ble.n	8008b8e <__sflush_r+0x1a>
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c58:	4643      	mov	r3, r8
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b0      	blx	r6
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dc06      	bgt.n	8008c72 <__sflush_r+0xfe>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	e78e      	b.n	8008b90 <__sflush_r+0x1c>
 8008c72:	4407      	add	r7, r0
 8008c74:	eba8 0800 	sub.w	r8, r8, r0
 8008c78:	e7e9      	b.n	8008c4e <__sflush_r+0xda>
 8008c7a:	bf00      	nop
 8008c7c:	20400001 	.word	0x20400001

08008c80 <_fflush_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	690b      	ldr	r3, [r1, #16]
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b913      	cbnz	r3, 8008c90 <_fflush_r+0x10>
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	b118      	cbz	r0, 8008c9a <_fflush_r+0x1a>
 8008c92:	6983      	ldr	r3, [r0, #24]
 8008c94:	b90b      	cbnz	r3, 8008c9a <_fflush_r+0x1a>
 8008c96:	f000 f887 	bl	8008da8 <__sinit>
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <_fflush_r+0x6c>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d11b      	bne.n	8008cd8 <_fflush_r+0x58>
 8008ca0:	686c      	ldr	r4, [r5, #4]
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0ef      	beq.n	8008c8a <_fflush_r+0xa>
 8008caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cac:	07d0      	lsls	r0, r2, #31
 8008cae:	d404      	bmi.n	8008cba <_fflush_r+0x3a>
 8008cb0:	0599      	lsls	r1, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_fflush_r+0x3a>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f000 fc88 	bl	80095ca <__retarget_lock_acquire_recursive>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f7ff ff59 	bl	8008b74 <__sflush_r>
 8008cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc4:	07da      	lsls	r2, r3, #31
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	d4e0      	bmi.n	8008c8c <_fflush_r+0xc>
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	059b      	lsls	r3, r3, #22
 8008cce:	d4dd      	bmi.n	8008c8c <_fflush_r+0xc>
 8008cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd2:	f000 fc7b 	bl	80095cc <__retarget_lock_release_recursive>
 8008cd6:	e7d9      	b.n	8008c8c <_fflush_r+0xc>
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <_fflush_r+0x70>)
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d101      	bne.n	8008ce2 <_fflush_r+0x62>
 8008cde:	68ac      	ldr	r4, [r5, #8]
 8008ce0:	e7df      	b.n	8008ca2 <_fflush_r+0x22>
 8008ce2:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <_fflush_r+0x74>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	bf08      	it	eq
 8008ce8:	68ec      	ldreq	r4, [r5, #12]
 8008cea:	e7da      	b.n	8008ca2 <_fflush_r+0x22>
 8008cec:	0800ba7c 	.word	0x0800ba7c
 8008cf0:	0800ba9c 	.word	0x0800ba9c
 8008cf4:	0800ba5c 	.word	0x0800ba5c

08008cf8 <std>:
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8008d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d06:	6083      	str	r3, [r0, #8]
 8008d08:	8181      	strh	r1, [r0, #12]
 8008d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d0c:	81c2      	strh	r2, [r0, #14]
 8008d0e:	6183      	str	r3, [r0, #24]
 8008d10:	4619      	mov	r1, r3
 8008d12:	2208      	movs	r2, #8
 8008d14:	305c      	adds	r0, #92	; 0x5c
 8008d16:	f7fd f947 	bl	8005fa8 <memset>
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <std+0x38>)
 8008d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <std+0x3c>)
 8008d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x40>)
 8008d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x44>)
 8008d28:	6224      	str	r4, [r4, #32]
 8008d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	bf00      	nop
 8008d30:	08006e99 	.word	0x08006e99
 8008d34:	08006ebf 	.word	0x08006ebf
 8008d38:	08006ef7 	.word	0x08006ef7
 8008d3c:	08006f1b 	.word	0x08006f1b

08008d40 <_cleanup_r>:
 8008d40:	4901      	ldr	r1, [pc, #4]	; (8008d48 <_cleanup_r+0x8>)
 8008d42:	f000 b8af 	b.w	8008ea4 <_fwalk_reent>
 8008d46:	bf00      	nop
 8008d48:	08008c81 	.word	0x08008c81

08008d4c <__sfmoreglue>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	2268      	movs	r2, #104	; 0x68
 8008d50:	1e4d      	subs	r5, r1, #1
 8008d52:	4355      	muls	r5, r2
 8008d54:	460e      	mov	r6, r1
 8008d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d5a:	f001 fa1d 	bl	800a198 <_malloc_r>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	b140      	cbz	r0, 8008d74 <__sfmoreglue+0x28>
 8008d62:	2100      	movs	r1, #0
 8008d64:	e9c0 1600 	strd	r1, r6, [r0]
 8008d68:	300c      	adds	r0, #12
 8008d6a:	60a0      	str	r0, [r4, #8]
 8008d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d70:	f7fd f91a 	bl	8005fa8 <memset>
 8008d74:	4620      	mov	r0, r4
 8008d76:	bd70      	pop	{r4, r5, r6, pc}

08008d78 <__sfp_lock_acquire>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__sfp_lock_acquire+0x8>)
 8008d7a:	f000 bc26 	b.w	80095ca <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	200009dd 	.word	0x200009dd

08008d84 <__sfp_lock_release>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__sfp_lock_release+0x8>)
 8008d86:	f000 bc21 	b.w	80095cc <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	200009dd 	.word	0x200009dd

08008d90 <__sinit_lock_acquire>:
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <__sinit_lock_acquire+0x8>)
 8008d92:	f000 bc1a 	b.w	80095ca <__retarget_lock_acquire_recursive>
 8008d96:	bf00      	nop
 8008d98:	200009de 	.word	0x200009de

08008d9c <__sinit_lock_release>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__sinit_lock_release+0x8>)
 8008d9e:	f000 bc15 	b.w	80095cc <__retarget_lock_release_recursive>
 8008da2:	bf00      	nop
 8008da4:	200009de 	.word	0x200009de

08008da8 <__sinit>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	4604      	mov	r4, r0
 8008dac:	f7ff fff0 	bl	8008d90 <__sinit_lock_acquire>
 8008db0:	69a3      	ldr	r3, [r4, #24]
 8008db2:	b11b      	cbz	r3, 8008dbc <__sinit+0x14>
 8008db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db8:	f7ff bff0 	b.w	8008d9c <__sinit_lock_release>
 8008dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <__sinit+0x68>)
 8008dc4:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <__sinit+0x6c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	bf04      	itt	eq
 8008dce:	2301      	moveq	r3, #1
 8008dd0:	61a3      	streq	r3, [r4, #24]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f820 	bl	8008e18 <__sfp>
 8008dd8:	6060      	str	r0, [r4, #4]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f81c 	bl	8008e18 <__sfp>
 8008de0:	60a0      	str	r0, [r4, #8]
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f818 	bl	8008e18 <__sfp>
 8008de8:	2200      	movs	r2, #0
 8008dea:	60e0      	str	r0, [r4, #12]
 8008dec:	2104      	movs	r1, #4
 8008dee:	6860      	ldr	r0, [r4, #4]
 8008df0:	f7ff ff82 	bl	8008cf8 <std>
 8008df4:	68a0      	ldr	r0, [r4, #8]
 8008df6:	2201      	movs	r2, #1
 8008df8:	2109      	movs	r1, #9
 8008dfa:	f7ff ff7d 	bl	8008cf8 <std>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	2202      	movs	r2, #2
 8008e02:	2112      	movs	r1, #18
 8008e04:	f7ff ff78 	bl	8008cf8 <std>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	61a3      	str	r3, [r4, #24]
 8008e0c:	e7d2      	b.n	8008db4 <__sinit+0xc>
 8008e0e:	bf00      	nop
 8008e10:	0800b83c 	.word	0x0800b83c
 8008e14:	08008d41 	.word	0x08008d41

08008e18 <__sfp>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	f7ff ffac 	bl	8008d78 <__sfp_lock_acquire>
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <__sfp+0x84>)
 8008e22:	681e      	ldr	r6, [r3, #0]
 8008e24:	69b3      	ldr	r3, [r6, #24]
 8008e26:	b913      	cbnz	r3, 8008e2e <__sfp+0x16>
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7ff ffbd 	bl	8008da8 <__sinit>
 8008e2e:	3648      	adds	r6, #72	; 0x48
 8008e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	d503      	bpl.n	8008e40 <__sfp+0x28>
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	b30b      	cbz	r3, 8008e80 <__sfp+0x68>
 8008e3c:	6836      	ldr	r6, [r6, #0]
 8008e3e:	e7f7      	b.n	8008e30 <__sfp+0x18>
 8008e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e44:	b9d5      	cbnz	r5, 8008e7c <__sfp+0x64>
 8008e46:	4b16      	ldr	r3, [pc, #88]	; (8008ea0 <__sfp+0x88>)
 8008e48:	60e3      	str	r3, [r4, #12]
 8008e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e50:	f000 fbba 	bl	80095c8 <__retarget_lock_init_recursive>
 8008e54:	f7ff ff96 	bl	8008d84 <__sfp_lock_release>
 8008e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e60:	6025      	str	r5, [r4, #0]
 8008e62:	61a5      	str	r5, [r4, #24]
 8008e64:	2208      	movs	r2, #8
 8008e66:	4629      	mov	r1, r5
 8008e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e6c:	f7fd f89c 	bl	8005fa8 <memset>
 8008e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e78:	4620      	mov	r0, r4
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7c:	3468      	adds	r4, #104	; 0x68
 8008e7e:	e7d9      	b.n	8008e34 <__sfp+0x1c>
 8008e80:	2104      	movs	r1, #4
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7ff ff62 	bl	8008d4c <__sfmoreglue>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	6030      	str	r0, [r6, #0]
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1d5      	bne.n	8008e3c <__sfp+0x24>
 8008e90:	f7ff ff78 	bl	8008d84 <__sfp_lock_release>
 8008e94:	230c      	movs	r3, #12
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	e7ee      	b.n	8008e78 <__sfp+0x60>
 8008e9a:	bf00      	nop
 8008e9c:	0800b83c 	.word	0x0800b83c
 8008ea0:	ffff0001 	.word	0xffff0001

08008ea4 <_fwalk_reent>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	4688      	mov	r8, r1
 8008eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eb0:	2700      	movs	r7, #0
 8008eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eba:	d505      	bpl.n	8008ec8 <_fwalk_reent+0x24>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d1f7      	bne.n	8008eb2 <_fwalk_reent+0xe>
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec8:	89ab      	ldrh	r3, [r5, #12]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d907      	bls.n	8008ede <_fwalk_reent+0x3a>
 8008ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	d003      	beq.n	8008ede <_fwalk_reent+0x3a>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4630      	mov	r0, r6
 8008eda:	47c0      	blx	r8
 8008edc:	4307      	orrs	r7, r0
 8008ede:	3568      	adds	r5, #104	; 0x68
 8008ee0:	e7e9      	b.n	8008eb6 <_fwalk_reent+0x12>

08008ee2 <rshift>:
 8008ee2:	6903      	ldr	r3, [r0, #16]
 8008ee4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eec:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ef0:	f100 0414 	add.w	r4, r0, #20
 8008ef4:	dd45      	ble.n	8008f82 <rshift+0xa0>
 8008ef6:	f011 011f 	ands.w	r1, r1, #31
 8008efa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008efe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f02:	d10c      	bne.n	8008f1e <rshift+0x3c>
 8008f04:	f100 0710 	add.w	r7, r0, #16
 8008f08:	4629      	mov	r1, r5
 8008f0a:	42b1      	cmp	r1, r6
 8008f0c:	d334      	bcc.n	8008f78 <rshift+0x96>
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	1eea      	subs	r2, r5, #3
 8008f14:	4296      	cmp	r6, r2
 8008f16:	bf38      	it	cc
 8008f18:	2300      	movcc	r3, #0
 8008f1a:	4423      	add	r3, r4
 8008f1c:	e015      	b.n	8008f4a <rshift+0x68>
 8008f1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f22:	f1c1 0820 	rsb	r8, r1, #32
 8008f26:	40cf      	lsrs	r7, r1
 8008f28:	f105 0e04 	add.w	lr, r5, #4
 8008f2c:	46a1      	mov	r9, r4
 8008f2e:	4576      	cmp	r6, lr
 8008f30:	46f4      	mov	ip, lr
 8008f32:	d815      	bhi.n	8008f60 <rshift+0x7e>
 8008f34:	1a9a      	subs	r2, r3, r2
 8008f36:	0092      	lsls	r2, r2, #2
 8008f38:	3a04      	subs	r2, #4
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	42ae      	cmp	r6, r5
 8008f3e:	bf38      	it	cc
 8008f40:	2200      	movcc	r2, #0
 8008f42:	18a3      	adds	r3, r4, r2
 8008f44:	50a7      	str	r7, [r4, r2]
 8008f46:	b107      	cbz	r7, 8008f4a <rshift+0x68>
 8008f48:	3304      	adds	r3, #4
 8008f4a:	1b1a      	subs	r2, r3, r4
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f52:	bf08      	it	eq
 8008f54:	2300      	moveq	r3, #0
 8008f56:	6102      	str	r2, [r0, #16]
 8008f58:	bf08      	it	eq
 8008f5a:	6143      	streq	r3, [r0, #20]
 8008f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f60:	f8dc c000 	ldr.w	ip, [ip]
 8008f64:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f68:	ea4c 0707 	orr.w	r7, ip, r7
 8008f6c:	f849 7b04 	str.w	r7, [r9], #4
 8008f70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f74:	40cf      	lsrs	r7, r1
 8008f76:	e7da      	b.n	8008f2e <rshift+0x4c>
 8008f78:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f80:	e7c3      	b.n	8008f0a <rshift+0x28>
 8008f82:	4623      	mov	r3, r4
 8008f84:	e7e1      	b.n	8008f4a <rshift+0x68>

08008f86 <__hexdig_fun>:
 8008f86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f8a:	2b09      	cmp	r3, #9
 8008f8c:	d802      	bhi.n	8008f94 <__hexdig_fun+0xe>
 8008f8e:	3820      	subs	r0, #32
 8008f90:	b2c0      	uxtb	r0, r0
 8008f92:	4770      	bx	lr
 8008f94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d801      	bhi.n	8008fa0 <__hexdig_fun+0x1a>
 8008f9c:	3847      	subs	r0, #71	; 0x47
 8008f9e:	e7f7      	b.n	8008f90 <__hexdig_fun+0xa>
 8008fa0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d801      	bhi.n	8008fac <__hexdig_fun+0x26>
 8008fa8:	3827      	subs	r0, #39	; 0x27
 8008faa:	e7f1      	b.n	8008f90 <__hexdig_fun+0xa>
 8008fac:	2000      	movs	r0, #0
 8008fae:	4770      	bx	lr

08008fb0 <__gethex>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	ed2d 8b02 	vpush	{d8}
 8008fb8:	b089      	sub	sp, #36	; 0x24
 8008fba:	ee08 0a10 	vmov	s16, r0
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	4bb4      	ldr	r3, [pc, #720]	; (8009294 <__gethex+0x2e4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	468b      	mov	fp, r1
 8008fca:	4690      	mov	r8, r2
 8008fcc:	f7f7 f900 	bl	80001d0 <strlen>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	f8db 2000 	ldr.w	r2, [fp]
 8008fd6:	4403      	add	r3, r0
 8008fd8:	4682      	mov	sl, r0
 8008fda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	1c93      	adds	r3, r2, #2
 8008fe2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008fe6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fea:	32fe      	adds	r2, #254	; 0xfe
 8008fec:	18d1      	adds	r1, r2, r3
 8008fee:	461f      	mov	r7, r3
 8008ff0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ff4:	9100      	str	r1, [sp, #0]
 8008ff6:	2830      	cmp	r0, #48	; 0x30
 8008ff8:	d0f8      	beq.n	8008fec <__gethex+0x3c>
 8008ffa:	f7ff ffc4 	bl	8008f86 <__hexdig_fun>
 8008ffe:	4604      	mov	r4, r0
 8009000:	2800      	cmp	r0, #0
 8009002:	d13a      	bne.n	800907a <__gethex+0xca>
 8009004:	9901      	ldr	r1, [sp, #4]
 8009006:	4652      	mov	r2, sl
 8009008:	4638      	mov	r0, r7
 800900a:	f7fd ff92 	bl	8006f32 <strncmp>
 800900e:	4605      	mov	r5, r0
 8009010:	2800      	cmp	r0, #0
 8009012:	d168      	bne.n	80090e6 <__gethex+0x136>
 8009014:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009018:	eb07 060a 	add.w	r6, r7, sl
 800901c:	f7ff ffb3 	bl	8008f86 <__hexdig_fun>
 8009020:	2800      	cmp	r0, #0
 8009022:	d062      	beq.n	80090ea <__gethex+0x13a>
 8009024:	4633      	mov	r3, r6
 8009026:	7818      	ldrb	r0, [r3, #0]
 8009028:	2830      	cmp	r0, #48	; 0x30
 800902a:	461f      	mov	r7, r3
 800902c:	f103 0301 	add.w	r3, r3, #1
 8009030:	d0f9      	beq.n	8009026 <__gethex+0x76>
 8009032:	f7ff ffa8 	bl	8008f86 <__hexdig_fun>
 8009036:	2301      	movs	r3, #1
 8009038:	fab0 f480 	clz	r4, r0
 800903c:	0964      	lsrs	r4, r4, #5
 800903e:	4635      	mov	r5, r6
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	463a      	mov	r2, r7
 8009044:	4616      	mov	r6, r2
 8009046:	3201      	adds	r2, #1
 8009048:	7830      	ldrb	r0, [r6, #0]
 800904a:	f7ff ff9c 	bl	8008f86 <__hexdig_fun>
 800904e:	2800      	cmp	r0, #0
 8009050:	d1f8      	bne.n	8009044 <__gethex+0x94>
 8009052:	9901      	ldr	r1, [sp, #4]
 8009054:	4652      	mov	r2, sl
 8009056:	4630      	mov	r0, r6
 8009058:	f7fd ff6b 	bl	8006f32 <strncmp>
 800905c:	b980      	cbnz	r0, 8009080 <__gethex+0xd0>
 800905e:	b94d      	cbnz	r5, 8009074 <__gethex+0xc4>
 8009060:	eb06 050a 	add.w	r5, r6, sl
 8009064:	462a      	mov	r2, r5
 8009066:	4616      	mov	r6, r2
 8009068:	3201      	adds	r2, #1
 800906a:	7830      	ldrb	r0, [r6, #0]
 800906c:	f7ff ff8b 	bl	8008f86 <__hexdig_fun>
 8009070:	2800      	cmp	r0, #0
 8009072:	d1f8      	bne.n	8009066 <__gethex+0xb6>
 8009074:	1bad      	subs	r5, r5, r6
 8009076:	00ad      	lsls	r5, r5, #2
 8009078:	e004      	b.n	8009084 <__gethex+0xd4>
 800907a:	2400      	movs	r4, #0
 800907c:	4625      	mov	r5, r4
 800907e:	e7e0      	b.n	8009042 <__gethex+0x92>
 8009080:	2d00      	cmp	r5, #0
 8009082:	d1f7      	bne.n	8009074 <__gethex+0xc4>
 8009084:	7833      	ldrb	r3, [r6, #0]
 8009086:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800908a:	2b50      	cmp	r3, #80	; 0x50
 800908c:	d13b      	bne.n	8009106 <__gethex+0x156>
 800908e:	7873      	ldrb	r3, [r6, #1]
 8009090:	2b2b      	cmp	r3, #43	; 0x2b
 8009092:	d02c      	beq.n	80090ee <__gethex+0x13e>
 8009094:	2b2d      	cmp	r3, #45	; 0x2d
 8009096:	d02e      	beq.n	80090f6 <__gethex+0x146>
 8009098:	1c71      	adds	r1, r6, #1
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	7808      	ldrb	r0, [r1, #0]
 80090a0:	f7ff ff71 	bl	8008f86 <__hexdig_fun>
 80090a4:	1e43      	subs	r3, r0, #1
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b18      	cmp	r3, #24
 80090aa:	d82c      	bhi.n	8009106 <__gethex+0x156>
 80090ac:	f1a0 0210 	sub.w	r2, r0, #16
 80090b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090b4:	f7ff ff67 	bl	8008f86 <__hexdig_fun>
 80090b8:	1e43      	subs	r3, r0, #1
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b18      	cmp	r3, #24
 80090be:	d91d      	bls.n	80090fc <__gethex+0x14c>
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	d000      	beq.n	80090c8 <__gethex+0x118>
 80090c6:	4252      	negs	r2, r2
 80090c8:	4415      	add	r5, r2
 80090ca:	f8cb 1000 	str.w	r1, [fp]
 80090ce:	b1e4      	cbz	r4, 800910a <__gethex+0x15a>
 80090d0:	9b00      	ldr	r3, [sp, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bf14      	ite	ne
 80090d6:	2700      	movne	r7, #0
 80090d8:	2706      	moveq	r7, #6
 80090da:	4638      	mov	r0, r7
 80090dc:	b009      	add	sp, #36	; 0x24
 80090de:	ecbd 8b02 	vpop	{d8}
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	463e      	mov	r6, r7
 80090e8:	4625      	mov	r5, r4
 80090ea:	2401      	movs	r4, #1
 80090ec:	e7ca      	b.n	8009084 <__gethex+0xd4>
 80090ee:	f04f 0900 	mov.w	r9, #0
 80090f2:	1cb1      	adds	r1, r6, #2
 80090f4:	e7d3      	b.n	800909e <__gethex+0xee>
 80090f6:	f04f 0901 	mov.w	r9, #1
 80090fa:	e7fa      	b.n	80090f2 <__gethex+0x142>
 80090fc:	230a      	movs	r3, #10
 80090fe:	fb03 0202 	mla	r2, r3, r2, r0
 8009102:	3a10      	subs	r2, #16
 8009104:	e7d4      	b.n	80090b0 <__gethex+0x100>
 8009106:	4631      	mov	r1, r6
 8009108:	e7df      	b.n	80090ca <__gethex+0x11a>
 800910a:	1bf3      	subs	r3, r6, r7
 800910c:	3b01      	subs	r3, #1
 800910e:	4621      	mov	r1, r4
 8009110:	2b07      	cmp	r3, #7
 8009112:	dc0b      	bgt.n	800912c <__gethex+0x17c>
 8009114:	ee18 0a10 	vmov	r0, s16
 8009118:	f000 fafa 	bl	8009710 <_Balloc>
 800911c:	4604      	mov	r4, r0
 800911e:	b940      	cbnz	r0, 8009132 <__gethex+0x182>
 8009120:	4b5d      	ldr	r3, [pc, #372]	; (8009298 <__gethex+0x2e8>)
 8009122:	4602      	mov	r2, r0
 8009124:	21de      	movs	r1, #222	; 0xde
 8009126:	485d      	ldr	r0, [pc, #372]	; (800929c <__gethex+0x2ec>)
 8009128:	f001 ffea 	bl	800b100 <__assert_func>
 800912c:	3101      	adds	r1, #1
 800912e:	105b      	asrs	r3, r3, #1
 8009130:	e7ee      	b.n	8009110 <__gethex+0x160>
 8009132:	f100 0914 	add.w	r9, r0, #20
 8009136:	f04f 0b00 	mov.w	fp, #0
 800913a:	f1ca 0301 	rsb	r3, sl, #1
 800913e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009142:	f8cd b000 	str.w	fp, [sp]
 8009146:	9306      	str	r3, [sp, #24]
 8009148:	42b7      	cmp	r7, r6
 800914a:	d340      	bcc.n	80091ce <__gethex+0x21e>
 800914c:	9802      	ldr	r0, [sp, #8]
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	f840 3b04 	str.w	r3, [r0], #4
 8009154:	eba0 0009 	sub.w	r0, r0, r9
 8009158:	1080      	asrs	r0, r0, #2
 800915a:	0146      	lsls	r6, r0, #5
 800915c:	6120      	str	r0, [r4, #16]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fbc8 	bl	80098f4 <__hi0bits>
 8009164:	1a30      	subs	r0, r6, r0
 8009166:	f8d8 6000 	ldr.w	r6, [r8]
 800916a:	42b0      	cmp	r0, r6
 800916c:	dd63      	ble.n	8009236 <__gethex+0x286>
 800916e:	1b87      	subs	r7, r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	4620      	mov	r0, r4
 8009174:	f000 ff6c 	bl	800a050 <__any_on>
 8009178:	4682      	mov	sl, r0
 800917a:	b1a8      	cbz	r0, 80091a8 <__gethex+0x1f8>
 800917c:	1e7b      	subs	r3, r7, #1
 800917e:	1159      	asrs	r1, r3, #5
 8009180:	f003 021f 	and.w	r2, r3, #31
 8009184:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009188:	f04f 0a01 	mov.w	sl, #1
 800918c:	fa0a f202 	lsl.w	r2, sl, r2
 8009190:	420a      	tst	r2, r1
 8009192:	d009      	beq.n	80091a8 <__gethex+0x1f8>
 8009194:	4553      	cmp	r3, sl
 8009196:	dd05      	ble.n	80091a4 <__gethex+0x1f4>
 8009198:	1eb9      	subs	r1, r7, #2
 800919a:	4620      	mov	r0, r4
 800919c:	f000 ff58 	bl	800a050 <__any_on>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d145      	bne.n	8009230 <__gethex+0x280>
 80091a4:	f04f 0a02 	mov.w	sl, #2
 80091a8:	4639      	mov	r1, r7
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7ff fe99 	bl	8008ee2 <rshift>
 80091b0:	443d      	add	r5, r7
 80091b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	da4c      	bge.n	8009254 <__gethex+0x2a4>
 80091ba:	ee18 0a10 	vmov	r0, s16
 80091be:	4621      	mov	r1, r4
 80091c0:	f000 fae6 	bl	8009790 <_Bfree>
 80091c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091c6:	2300      	movs	r3, #0
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	27a3      	movs	r7, #163	; 0xa3
 80091cc:	e785      	b.n	80090da <__gethex+0x12a>
 80091ce:	1e73      	subs	r3, r6, #1
 80091d0:	9a05      	ldr	r2, [sp, #20]
 80091d2:	9303      	str	r3, [sp, #12]
 80091d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091d8:	4293      	cmp	r3, r2
 80091da:	d019      	beq.n	8009210 <__gethex+0x260>
 80091dc:	f1bb 0f20 	cmp.w	fp, #32
 80091e0:	d107      	bne.n	80091f2 <__gethex+0x242>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	9a00      	ldr	r2, [sp, #0]
 80091e6:	f843 2b04 	str.w	r2, [r3], #4
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	469b      	mov	fp, r3
 80091f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091f6:	f7ff fec6 	bl	8008f86 <__hexdig_fun>
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	f000 000f 	and.w	r0, r0, #15
 8009200:	fa00 f00b 	lsl.w	r0, r0, fp
 8009204:	4303      	orrs	r3, r0
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	f10b 0b04 	add.w	fp, fp, #4
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	e00d      	b.n	800922c <__gethex+0x27c>
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	9a06      	ldr	r2, [sp, #24]
 8009214:	4413      	add	r3, r2
 8009216:	42bb      	cmp	r3, r7
 8009218:	d3e0      	bcc.n	80091dc <__gethex+0x22c>
 800921a:	4618      	mov	r0, r3
 800921c:	9901      	ldr	r1, [sp, #4]
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	4652      	mov	r2, sl
 8009222:	f7fd fe86 	bl	8006f32 <strncmp>
 8009226:	9b07      	ldr	r3, [sp, #28]
 8009228:	2800      	cmp	r0, #0
 800922a:	d1d7      	bne.n	80091dc <__gethex+0x22c>
 800922c:	461e      	mov	r6, r3
 800922e:	e78b      	b.n	8009148 <__gethex+0x198>
 8009230:	f04f 0a03 	mov.w	sl, #3
 8009234:	e7b8      	b.n	80091a8 <__gethex+0x1f8>
 8009236:	da0a      	bge.n	800924e <__gethex+0x29e>
 8009238:	1a37      	subs	r7, r6, r0
 800923a:	4621      	mov	r1, r4
 800923c:	ee18 0a10 	vmov	r0, s16
 8009240:	463a      	mov	r2, r7
 8009242:	f000 fcc1 	bl	8009bc8 <__lshift>
 8009246:	1bed      	subs	r5, r5, r7
 8009248:	4604      	mov	r4, r0
 800924a:	f100 0914 	add.w	r9, r0, #20
 800924e:	f04f 0a00 	mov.w	sl, #0
 8009252:	e7ae      	b.n	80091b2 <__gethex+0x202>
 8009254:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009258:	42a8      	cmp	r0, r5
 800925a:	dd72      	ble.n	8009342 <__gethex+0x392>
 800925c:	1b45      	subs	r5, r0, r5
 800925e:	42ae      	cmp	r6, r5
 8009260:	dc36      	bgt.n	80092d0 <__gethex+0x320>
 8009262:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d02a      	beq.n	80092c0 <__gethex+0x310>
 800926a:	2b03      	cmp	r3, #3
 800926c:	d02c      	beq.n	80092c8 <__gethex+0x318>
 800926e:	2b01      	cmp	r3, #1
 8009270:	d11c      	bne.n	80092ac <__gethex+0x2fc>
 8009272:	42ae      	cmp	r6, r5
 8009274:	d11a      	bne.n	80092ac <__gethex+0x2fc>
 8009276:	2e01      	cmp	r6, #1
 8009278:	d112      	bne.n	80092a0 <__gethex+0x2f0>
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	2301      	movs	r3, #1
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	f8c9 3000 	str.w	r3, [r9]
 800928a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800928c:	2762      	movs	r7, #98	; 0x62
 800928e:	601c      	str	r4, [r3, #0]
 8009290:	e723      	b.n	80090da <__gethex+0x12a>
 8009292:	bf00      	nop
 8009294:	0800bb24 	.word	0x0800bb24
 8009298:	0800ba48 	.word	0x0800ba48
 800929c:	0800babc 	.word	0x0800babc
 80092a0:	1e71      	subs	r1, r6, #1
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fed4 	bl	800a050 <__any_on>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d1e6      	bne.n	800927a <__gethex+0x2ca>
 80092ac:	ee18 0a10 	vmov	r0, s16
 80092b0:	4621      	mov	r1, r4
 80092b2:	f000 fa6d 	bl	8009790 <_Bfree>
 80092b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092b8:	2300      	movs	r3, #0
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	2750      	movs	r7, #80	; 0x50
 80092be:	e70c      	b.n	80090da <__gethex+0x12a>
 80092c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1f2      	bne.n	80092ac <__gethex+0x2fc>
 80092c6:	e7d8      	b.n	800927a <__gethex+0x2ca>
 80092c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1d5      	bne.n	800927a <__gethex+0x2ca>
 80092ce:	e7ed      	b.n	80092ac <__gethex+0x2fc>
 80092d0:	1e6f      	subs	r7, r5, #1
 80092d2:	f1ba 0f00 	cmp.w	sl, #0
 80092d6:	d131      	bne.n	800933c <__gethex+0x38c>
 80092d8:	b127      	cbz	r7, 80092e4 <__gethex+0x334>
 80092da:	4639      	mov	r1, r7
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 feb7 	bl	800a050 <__any_on>
 80092e2:	4682      	mov	sl, r0
 80092e4:	117b      	asrs	r3, r7, #5
 80092e6:	2101      	movs	r1, #1
 80092e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092ec:	f007 071f 	and.w	r7, r7, #31
 80092f0:	fa01 f707 	lsl.w	r7, r1, r7
 80092f4:	421f      	tst	r7, r3
 80092f6:	4629      	mov	r1, r5
 80092f8:	4620      	mov	r0, r4
 80092fa:	bf18      	it	ne
 80092fc:	f04a 0a02 	orrne.w	sl, sl, #2
 8009300:	1b76      	subs	r6, r6, r5
 8009302:	f7ff fdee 	bl	8008ee2 <rshift>
 8009306:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800930a:	2702      	movs	r7, #2
 800930c:	f1ba 0f00 	cmp.w	sl, #0
 8009310:	d048      	beq.n	80093a4 <__gethex+0x3f4>
 8009312:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d015      	beq.n	8009346 <__gethex+0x396>
 800931a:	2b03      	cmp	r3, #3
 800931c:	d017      	beq.n	800934e <__gethex+0x39e>
 800931e:	2b01      	cmp	r3, #1
 8009320:	d109      	bne.n	8009336 <__gethex+0x386>
 8009322:	f01a 0f02 	tst.w	sl, #2
 8009326:	d006      	beq.n	8009336 <__gethex+0x386>
 8009328:	f8d9 0000 	ldr.w	r0, [r9]
 800932c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009330:	f01a 0f01 	tst.w	sl, #1
 8009334:	d10e      	bne.n	8009354 <__gethex+0x3a4>
 8009336:	f047 0710 	orr.w	r7, r7, #16
 800933a:	e033      	b.n	80093a4 <__gethex+0x3f4>
 800933c:	f04f 0a01 	mov.w	sl, #1
 8009340:	e7d0      	b.n	80092e4 <__gethex+0x334>
 8009342:	2701      	movs	r7, #1
 8009344:	e7e2      	b.n	800930c <__gethex+0x35c>
 8009346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009348:	f1c3 0301 	rsb	r3, r3, #1
 800934c:	9315      	str	r3, [sp, #84]	; 0x54
 800934e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0f0      	beq.n	8009336 <__gethex+0x386>
 8009354:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009358:	f104 0314 	add.w	r3, r4, #20
 800935c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009360:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f853 2b04 	ldr.w	r2, [r3], #4
 800936e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009372:	d01c      	beq.n	80093ae <__gethex+0x3fe>
 8009374:	3201      	adds	r2, #1
 8009376:	6002      	str	r2, [r0, #0]
 8009378:	2f02      	cmp	r7, #2
 800937a:	f104 0314 	add.w	r3, r4, #20
 800937e:	d13f      	bne.n	8009400 <__gethex+0x450>
 8009380:	f8d8 2000 	ldr.w	r2, [r8]
 8009384:	3a01      	subs	r2, #1
 8009386:	42b2      	cmp	r2, r6
 8009388:	d10a      	bne.n	80093a0 <__gethex+0x3f0>
 800938a:	1171      	asrs	r1, r6, #5
 800938c:	2201      	movs	r2, #1
 800938e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009392:	f006 061f 	and.w	r6, r6, #31
 8009396:	fa02 f606 	lsl.w	r6, r2, r6
 800939a:	421e      	tst	r6, r3
 800939c:	bf18      	it	ne
 800939e:	4617      	movne	r7, r2
 80093a0:	f047 0720 	orr.w	r7, r7, #32
 80093a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093a6:	601c      	str	r4, [r3, #0]
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	601d      	str	r5, [r3, #0]
 80093ac:	e695      	b.n	80090da <__gethex+0x12a>
 80093ae:	4299      	cmp	r1, r3
 80093b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80093b4:	d8d8      	bhi.n	8009368 <__gethex+0x3b8>
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	459b      	cmp	fp, r3
 80093ba:	db19      	blt.n	80093f0 <__gethex+0x440>
 80093bc:	6861      	ldr	r1, [r4, #4]
 80093be:	ee18 0a10 	vmov	r0, s16
 80093c2:	3101      	adds	r1, #1
 80093c4:	f000 f9a4 	bl	8009710 <_Balloc>
 80093c8:	4681      	mov	r9, r0
 80093ca:	b918      	cbnz	r0, 80093d4 <__gethex+0x424>
 80093cc:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <__gethex+0x488>)
 80093ce:	4602      	mov	r2, r0
 80093d0:	2184      	movs	r1, #132	; 0x84
 80093d2:	e6a8      	b.n	8009126 <__gethex+0x176>
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	3202      	adds	r2, #2
 80093d8:	f104 010c 	add.w	r1, r4, #12
 80093dc:	0092      	lsls	r2, r2, #2
 80093de:	300c      	adds	r0, #12
 80093e0:	f000 f988 	bl	80096f4 <memcpy>
 80093e4:	4621      	mov	r1, r4
 80093e6:	ee18 0a10 	vmov	r0, s16
 80093ea:	f000 f9d1 	bl	8009790 <_Bfree>
 80093ee:	464c      	mov	r4, r9
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093f8:	6122      	str	r2, [r4, #16]
 80093fa:	2201      	movs	r2, #1
 80093fc:	615a      	str	r2, [r3, #20]
 80093fe:	e7bb      	b.n	8009378 <__gethex+0x3c8>
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	455a      	cmp	r2, fp
 8009404:	dd0b      	ble.n	800941e <__gethex+0x46e>
 8009406:	2101      	movs	r1, #1
 8009408:	4620      	mov	r0, r4
 800940a:	f7ff fd6a 	bl	8008ee2 <rshift>
 800940e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009412:	3501      	adds	r5, #1
 8009414:	42ab      	cmp	r3, r5
 8009416:	f6ff aed0 	blt.w	80091ba <__gethex+0x20a>
 800941a:	2701      	movs	r7, #1
 800941c:	e7c0      	b.n	80093a0 <__gethex+0x3f0>
 800941e:	f016 061f 	ands.w	r6, r6, #31
 8009422:	d0fa      	beq.n	800941a <__gethex+0x46a>
 8009424:	4453      	add	r3, sl
 8009426:	f1c6 0620 	rsb	r6, r6, #32
 800942a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800942e:	f000 fa61 	bl	80098f4 <__hi0bits>
 8009432:	42b0      	cmp	r0, r6
 8009434:	dbe7      	blt.n	8009406 <__gethex+0x456>
 8009436:	e7f0      	b.n	800941a <__gethex+0x46a>
 8009438:	0800ba48 	.word	0x0800ba48

0800943c <L_shift>:
 800943c:	f1c2 0208 	rsb	r2, r2, #8
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	b570      	push	{r4, r5, r6, lr}
 8009444:	f1c2 0620 	rsb	r6, r2, #32
 8009448:	6843      	ldr	r3, [r0, #4]
 800944a:	6804      	ldr	r4, [r0, #0]
 800944c:	fa03 f506 	lsl.w	r5, r3, r6
 8009450:	432c      	orrs	r4, r5
 8009452:	40d3      	lsrs	r3, r2
 8009454:	6004      	str	r4, [r0, #0]
 8009456:	f840 3f04 	str.w	r3, [r0, #4]!
 800945a:	4288      	cmp	r0, r1
 800945c:	d3f4      	bcc.n	8009448 <L_shift+0xc>
 800945e:	bd70      	pop	{r4, r5, r6, pc}

08009460 <__match>:
 8009460:	b530      	push	{r4, r5, lr}
 8009462:	6803      	ldr	r3, [r0, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800946a:	b914      	cbnz	r4, 8009472 <__match+0x12>
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	2001      	movs	r0, #1
 8009470:	bd30      	pop	{r4, r5, pc}
 8009472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009476:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800947a:	2d19      	cmp	r5, #25
 800947c:	bf98      	it	ls
 800947e:	3220      	addls	r2, #32
 8009480:	42a2      	cmp	r2, r4
 8009482:	d0f0      	beq.n	8009466 <__match+0x6>
 8009484:	2000      	movs	r0, #0
 8009486:	e7f3      	b.n	8009470 <__match+0x10>

08009488 <__hexnan>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	680b      	ldr	r3, [r1, #0]
 800948e:	115e      	asrs	r6, r3, #5
 8009490:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009494:	f013 031f 	ands.w	r3, r3, #31
 8009498:	b087      	sub	sp, #28
 800949a:	bf18      	it	ne
 800949c:	3604      	addne	r6, #4
 800949e:	2500      	movs	r5, #0
 80094a0:	1f37      	subs	r7, r6, #4
 80094a2:	4690      	mov	r8, r2
 80094a4:	6802      	ldr	r2, [r0, #0]
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	4682      	mov	sl, r0
 80094aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80094ae:	46b9      	mov	r9, r7
 80094b0:	463c      	mov	r4, r7
 80094b2:	9502      	str	r5, [sp, #8]
 80094b4:	46ab      	mov	fp, r5
 80094b6:	7851      	ldrb	r1, [r2, #1]
 80094b8:	1c53      	adds	r3, r2, #1
 80094ba:	9303      	str	r3, [sp, #12]
 80094bc:	b341      	cbz	r1, 8009510 <__hexnan+0x88>
 80094be:	4608      	mov	r0, r1
 80094c0:	9205      	str	r2, [sp, #20]
 80094c2:	9104      	str	r1, [sp, #16]
 80094c4:	f7ff fd5f 	bl	8008f86 <__hexdig_fun>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d14f      	bne.n	800956c <__hexnan+0xe4>
 80094cc:	9904      	ldr	r1, [sp, #16]
 80094ce:	9a05      	ldr	r2, [sp, #20]
 80094d0:	2920      	cmp	r1, #32
 80094d2:	d818      	bhi.n	8009506 <__hexnan+0x7e>
 80094d4:	9b02      	ldr	r3, [sp, #8]
 80094d6:	459b      	cmp	fp, r3
 80094d8:	dd13      	ble.n	8009502 <__hexnan+0x7a>
 80094da:	454c      	cmp	r4, r9
 80094dc:	d206      	bcs.n	80094ec <__hexnan+0x64>
 80094de:	2d07      	cmp	r5, #7
 80094e0:	dc04      	bgt.n	80094ec <__hexnan+0x64>
 80094e2:	462a      	mov	r2, r5
 80094e4:	4649      	mov	r1, r9
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7ff ffa8 	bl	800943c <L_shift>
 80094ec:	4544      	cmp	r4, r8
 80094ee:	d950      	bls.n	8009592 <__hexnan+0x10a>
 80094f0:	2300      	movs	r3, #0
 80094f2:	f1a4 0904 	sub.w	r9, r4, #4
 80094f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80094fa:	f8cd b008 	str.w	fp, [sp, #8]
 80094fe:	464c      	mov	r4, r9
 8009500:	461d      	mov	r5, r3
 8009502:	9a03      	ldr	r2, [sp, #12]
 8009504:	e7d7      	b.n	80094b6 <__hexnan+0x2e>
 8009506:	2929      	cmp	r1, #41	; 0x29
 8009508:	d156      	bne.n	80095b8 <__hexnan+0x130>
 800950a:	3202      	adds	r2, #2
 800950c:	f8ca 2000 	str.w	r2, [sl]
 8009510:	f1bb 0f00 	cmp.w	fp, #0
 8009514:	d050      	beq.n	80095b8 <__hexnan+0x130>
 8009516:	454c      	cmp	r4, r9
 8009518:	d206      	bcs.n	8009528 <__hexnan+0xa0>
 800951a:	2d07      	cmp	r5, #7
 800951c:	dc04      	bgt.n	8009528 <__hexnan+0xa0>
 800951e:	462a      	mov	r2, r5
 8009520:	4649      	mov	r1, r9
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff ff8a 	bl	800943c <L_shift>
 8009528:	4544      	cmp	r4, r8
 800952a:	d934      	bls.n	8009596 <__hexnan+0x10e>
 800952c:	f1a8 0204 	sub.w	r2, r8, #4
 8009530:	4623      	mov	r3, r4
 8009532:	f853 1b04 	ldr.w	r1, [r3], #4
 8009536:	f842 1f04 	str.w	r1, [r2, #4]!
 800953a:	429f      	cmp	r7, r3
 800953c:	d2f9      	bcs.n	8009532 <__hexnan+0xaa>
 800953e:	1b3b      	subs	r3, r7, r4
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	3304      	adds	r3, #4
 8009546:	3401      	adds	r4, #1
 8009548:	3e03      	subs	r6, #3
 800954a:	42b4      	cmp	r4, r6
 800954c:	bf88      	it	hi
 800954e:	2304      	movhi	r3, #4
 8009550:	4443      	add	r3, r8
 8009552:	2200      	movs	r2, #0
 8009554:	f843 2b04 	str.w	r2, [r3], #4
 8009558:	429f      	cmp	r7, r3
 800955a:	d2fb      	bcs.n	8009554 <__hexnan+0xcc>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	b91b      	cbnz	r3, 8009568 <__hexnan+0xe0>
 8009560:	4547      	cmp	r7, r8
 8009562:	d127      	bne.n	80095b4 <__hexnan+0x12c>
 8009564:	2301      	movs	r3, #1
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	2005      	movs	r0, #5
 800956a:	e026      	b.n	80095ba <__hexnan+0x132>
 800956c:	3501      	adds	r5, #1
 800956e:	2d08      	cmp	r5, #8
 8009570:	f10b 0b01 	add.w	fp, fp, #1
 8009574:	dd06      	ble.n	8009584 <__hexnan+0xfc>
 8009576:	4544      	cmp	r4, r8
 8009578:	d9c3      	bls.n	8009502 <__hexnan+0x7a>
 800957a:	2300      	movs	r3, #0
 800957c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009580:	2501      	movs	r5, #1
 8009582:	3c04      	subs	r4, #4
 8009584:	6822      	ldr	r2, [r4, #0]
 8009586:	f000 000f 	and.w	r0, r0, #15
 800958a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	e7b7      	b.n	8009502 <__hexnan+0x7a>
 8009592:	2508      	movs	r5, #8
 8009594:	e7b5      	b.n	8009502 <__hexnan+0x7a>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0df      	beq.n	800955c <__hexnan+0xd4>
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	f1c3 0320 	rsb	r3, r3, #32
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095ac:	401a      	ands	r2, r3
 80095ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80095b2:	e7d3      	b.n	800955c <__hexnan+0xd4>
 80095b4:	3f04      	subs	r7, #4
 80095b6:	e7d1      	b.n	800955c <__hexnan+0xd4>
 80095b8:	2004      	movs	r0, #4
 80095ba:	b007      	add	sp, #28
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095c0 <_localeconv_r>:
 80095c0:	4800      	ldr	r0, [pc, #0]	; (80095c4 <_localeconv_r+0x4>)
 80095c2:	4770      	bx	lr
 80095c4:	20000198 	.word	0x20000198

080095c8 <__retarget_lock_init_recursive>:
 80095c8:	4770      	bx	lr

080095ca <__retarget_lock_acquire_recursive>:
 80095ca:	4770      	bx	lr

080095cc <__retarget_lock_release_recursive>:
 80095cc:	4770      	bx	lr
	...

080095d0 <_lseek_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_lseek_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f9 f8de 	bl	80027a0 <_lseek>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_lseek_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_lseek_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	200009e8 	.word	0x200009e8

080095f4 <__swhatbuf_r>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	460e      	mov	r6, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	b096      	sub	sp, #88	; 0x58
 8009600:	4614      	mov	r4, r2
 8009602:	461d      	mov	r5, r3
 8009604:	da08      	bge.n	8009618 <__swhatbuf_r+0x24>
 8009606:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	061a      	lsls	r2, r3, #24
 8009610:	d410      	bmi.n	8009634 <__swhatbuf_r+0x40>
 8009612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009616:	e00e      	b.n	8009636 <__swhatbuf_r+0x42>
 8009618:	466a      	mov	r2, sp
 800961a:	f001 fda1 	bl	800b160 <_fstat_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	dbf1      	blt.n	8009606 <__swhatbuf_r+0x12>
 8009622:	9a01      	ldr	r2, [sp, #4]
 8009624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800962c:	425a      	negs	r2, r3
 800962e:	415a      	adcs	r2, r3
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	e7ee      	b.n	8009612 <__swhatbuf_r+0x1e>
 8009634:	2340      	movs	r3, #64	; 0x40
 8009636:	2000      	movs	r0, #0
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	b016      	add	sp, #88	; 0x58
 800963c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009640 <__smakebuf_r>:
 8009640:	898b      	ldrh	r3, [r1, #12]
 8009642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009644:	079d      	lsls	r5, r3, #30
 8009646:	4606      	mov	r6, r0
 8009648:	460c      	mov	r4, r1
 800964a:	d507      	bpl.n	800965c <__smakebuf_r+0x1c>
 800964c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	6123      	str	r3, [r4, #16]
 8009654:	2301      	movs	r3, #1
 8009656:	6163      	str	r3, [r4, #20]
 8009658:	b002      	add	sp, #8
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	ab01      	add	r3, sp, #4
 800965e:	466a      	mov	r2, sp
 8009660:	f7ff ffc8 	bl	80095f4 <__swhatbuf_r>
 8009664:	9900      	ldr	r1, [sp, #0]
 8009666:	4605      	mov	r5, r0
 8009668:	4630      	mov	r0, r6
 800966a:	f000 fd95 	bl	800a198 <_malloc_r>
 800966e:	b948      	cbnz	r0, 8009684 <__smakebuf_r+0x44>
 8009670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009674:	059a      	lsls	r2, r3, #22
 8009676:	d4ef      	bmi.n	8009658 <__smakebuf_r+0x18>
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	f043 0302 	orr.w	r3, r3, #2
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	e7e3      	b.n	800964c <__smakebuf_r+0xc>
 8009684:	4b0d      	ldr	r3, [pc, #52]	; (80096bc <__smakebuf_r+0x7c>)
 8009686:	62b3      	str	r3, [r6, #40]	; 0x28
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	6163      	str	r3, [r4, #20]
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	6120      	str	r0, [r4, #16]
 800969a:	b15b      	cbz	r3, 80096b4 <__smakebuf_r+0x74>
 800969c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f001 fd6f 	bl	800b184 <_isatty_r>
 80096a6:	b128      	cbz	r0, 80096b4 <__smakebuf_r+0x74>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	89a0      	ldrh	r0, [r4, #12]
 80096b6:	4305      	orrs	r5, r0
 80096b8:	81a5      	strh	r5, [r4, #12]
 80096ba:	e7cd      	b.n	8009658 <__smakebuf_r+0x18>
 80096bc:	08008d41 	.word	0x08008d41

080096c0 <malloc>:
 80096c0:	4b02      	ldr	r3, [pc, #8]	; (80096cc <malloc+0xc>)
 80096c2:	4601      	mov	r1, r0
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f000 bd67 	b.w	800a198 <_malloc_r>
 80096ca:	bf00      	nop
 80096cc:	20000040 	.word	0x20000040

080096d0 <__ascii_mbtowc>:
 80096d0:	b082      	sub	sp, #8
 80096d2:	b901      	cbnz	r1, 80096d6 <__ascii_mbtowc+0x6>
 80096d4:	a901      	add	r1, sp, #4
 80096d6:	b142      	cbz	r2, 80096ea <__ascii_mbtowc+0x1a>
 80096d8:	b14b      	cbz	r3, 80096ee <__ascii_mbtowc+0x1e>
 80096da:	7813      	ldrb	r3, [r2, #0]
 80096dc:	600b      	str	r3, [r1, #0]
 80096de:	7812      	ldrb	r2, [r2, #0]
 80096e0:	1e10      	subs	r0, r2, #0
 80096e2:	bf18      	it	ne
 80096e4:	2001      	movne	r0, #1
 80096e6:	b002      	add	sp, #8
 80096e8:	4770      	bx	lr
 80096ea:	4610      	mov	r0, r2
 80096ec:	e7fb      	b.n	80096e6 <__ascii_mbtowc+0x16>
 80096ee:	f06f 0001 	mvn.w	r0, #1
 80096f2:	e7f8      	b.n	80096e6 <__ascii_mbtowc+0x16>

080096f4 <memcpy>:
 80096f4:	440a      	add	r2, r1
 80096f6:	4291      	cmp	r1, r2
 80096f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096fc:	d100      	bne.n	8009700 <memcpy+0xc>
 80096fe:	4770      	bx	lr
 8009700:	b510      	push	{r4, lr}
 8009702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970a:	4291      	cmp	r1, r2
 800970c:	d1f9      	bne.n	8009702 <memcpy+0xe>
 800970e:	bd10      	pop	{r4, pc}

08009710 <_Balloc>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009714:	4604      	mov	r4, r0
 8009716:	460d      	mov	r5, r1
 8009718:	b976      	cbnz	r6, 8009738 <_Balloc+0x28>
 800971a:	2010      	movs	r0, #16
 800971c:	f7ff ffd0 	bl	80096c0 <malloc>
 8009720:	4602      	mov	r2, r0
 8009722:	6260      	str	r0, [r4, #36]	; 0x24
 8009724:	b920      	cbnz	r0, 8009730 <_Balloc+0x20>
 8009726:	4b18      	ldr	r3, [pc, #96]	; (8009788 <_Balloc+0x78>)
 8009728:	4818      	ldr	r0, [pc, #96]	; (800978c <_Balloc+0x7c>)
 800972a:	2166      	movs	r1, #102	; 0x66
 800972c:	f001 fce8 	bl	800b100 <__assert_func>
 8009730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009734:	6006      	str	r6, [r0, #0]
 8009736:	60c6      	str	r6, [r0, #12]
 8009738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800973a:	68f3      	ldr	r3, [r6, #12]
 800973c:	b183      	cbz	r3, 8009760 <_Balloc+0x50>
 800973e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009746:	b9b8      	cbnz	r0, 8009778 <_Balloc+0x68>
 8009748:	2101      	movs	r1, #1
 800974a:	fa01 f605 	lsl.w	r6, r1, r5
 800974e:	1d72      	adds	r2, r6, #5
 8009750:	0092      	lsls	r2, r2, #2
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fc9d 	bl	800a092 <_calloc_r>
 8009758:	b160      	cbz	r0, 8009774 <_Balloc+0x64>
 800975a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800975e:	e00e      	b.n	800977e <_Balloc+0x6e>
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	2104      	movs	r1, #4
 8009764:	4620      	mov	r0, r4
 8009766:	f000 fc94 	bl	800a092 <_calloc_r>
 800976a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800976c:	60f0      	str	r0, [r6, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e4      	bne.n	800973e <_Balloc+0x2e>
 8009774:	2000      	movs	r0, #0
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	6802      	ldr	r2, [r0, #0]
 800977a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800977e:	2300      	movs	r3, #0
 8009780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009784:	e7f7      	b.n	8009776 <_Balloc+0x66>
 8009786:	bf00      	nop
 8009788:	0800b9d6 	.word	0x0800b9d6
 800978c:	0800bb38 	.word	0x0800bb38

08009790 <_Bfree>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009794:	4605      	mov	r5, r0
 8009796:	460c      	mov	r4, r1
 8009798:	b976      	cbnz	r6, 80097b8 <_Bfree+0x28>
 800979a:	2010      	movs	r0, #16
 800979c:	f7ff ff90 	bl	80096c0 <malloc>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6268      	str	r0, [r5, #36]	; 0x24
 80097a4:	b920      	cbnz	r0, 80097b0 <_Bfree+0x20>
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <_Bfree+0x3c>)
 80097a8:	4809      	ldr	r0, [pc, #36]	; (80097d0 <_Bfree+0x40>)
 80097aa:	218a      	movs	r1, #138	; 0x8a
 80097ac:	f001 fca8 	bl	800b100 <__assert_func>
 80097b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097b4:	6006      	str	r6, [r0, #0]
 80097b6:	60c6      	str	r6, [r0, #12]
 80097b8:	b13c      	cbz	r4, 80097ca <_Bfree+0x3a>
 80097ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097bc:	6862      	ldr	r2, [r4, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097c4:	6021      	str	r1, [r4, #0]
 80097c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	0800b9d6 	.word	0x0800b9d6
 80097d0:	0800bb38 	.word	0x0800bb38

080097d4 <__multadd>:
 80097d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	690d      	ldr	r5, [r1, #16]
 80097da:	4607      	mov	r7, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	461e      	mov	r6, r3
 80097e0:	f101 0c14 	add.w	ip, r1, #20
 80097e4:	2000      	movs	r0, #0
 80097e6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ea:	b299      	uxth	r1, r3
 80097ec:	fb02 6101 	mla	r1, r2, r1, r6
 80097f0:	0c1e      	lsrs	r6, r3, #16
 80097f2:	0c0b      	lsrs	r3, r1, #16
 80097f4:	fb02 3306 	mla	r3, r2, r6, r3
 80097f8:	b289      	uxth	r1, r1
 80097fa:	3001      	adds	r0, #1
 80097fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009800:	4285      	cmp	r5, r0
 8009802:	f84c 1b04 	str.w	r1, [ip], #4
 8009806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800980a:	dcec      	bgt.n	80097e6 <__multadd+0x12>
 800980c:	b30e      	cbz	r6, 8009852 <__multadd+0x7e>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	42ab      	cmp	r3, r5
 8009812:	dc19      	bgt.n	8009848 <__multadd+0x74>
 8009814:	6861      	ldr	r1, [r4, #4]
 8009816:	4638      	mov	r0, r7
 8009818:	3101      	adds	r1, #1
 800981a:	f7ff ff79 	bl	8009710 <_Balloc>
 800981e:	4680      	mov	r8, r0
 8009820:	b928      	cbnz	r0, 800982e <__multadd+0x5a>
 8009822:	4602      	mov	r2, r0
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <__multadd+0x84>)
 8009826:	480d      	ldr	r0, [pc, #52]	; (800985c <__multadd+0x88>)
 8009828:	21b5      	movs	r1, #181	; 0xb5
 800982a:	f001 fc69 	bl	800b100 <__assert_func>
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	3202      	adds	r2, #2
 8009832:	f104 010c 	add.w	r1, r4, #12
 8009836:	0092      	lsls	r2, r2, #2
 8009838:	300c      	adds	r0, #12
 800983a:	f7ff ff5b 	bl	80096f4 <memcpy>
 800983e:	4621      	mov	r1, r4
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ffa5 	bl	8009790 <_Bfree>
 8009846:	4644      	mov	r4, r8
 8009848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800984c:	3501      	adds	r5, #1
 800984e:	615e      	str	r6, [r3, #20]
 8009850:	6125      	str	r5, [r4, #16]
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	0800ba48 	.word	0x0800ba48
 800985c:	0800bb38 	.word	0x0800bb38

08009860 <__s2b>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	460c      	mov	r4, r1
 8009866:	4615      	mov	r5, r2
 8009868:	461f      	mov	r7, r3
 800986a:	2209      	movs	r2, #9
 800986c:	3308      	adds	r3, #8
 800986e:	4606      	mov	r6, r0
 8009870:	fb93 f3f2 	sdiv	r3, r3, r2
 8009874:	2100      	movs	r1, #0
 8009876:	2201      	movs	r2, #1
 8009878:	429a      	cmp	r2, r3
 800987a:	db09      	blt.n	8009890 <__s2b+0x30>
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ff47 	bl	8009710 <_Balloc>
 8009882:	b940      	cbnz	r0, 8009896 <__s2b+0x36>
 8009884:	4602      	mov	r2, r0
 8009886:	4b19      	ldr	r3, [pc, #100]	; (80098ec <__s2b+0x8c>)
 8009888:	4819      	ldr	r0, [pc, #100]	; (80098f0 <__s2b+0x90>)
 800988a:	21ce      	movs	r1, #206	; 0xce
 800988c:	f001 fc38 	bl	800b100 <__assert_func>
 8009890:	0052      	lsls	r2, r2, #1
 8009892:	3101      	adds	r1, #1
 8009894:	e7f0      	b.n	8009878 <__s2b+0x18>
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	6143      	str	r3, [r0, #20]
 800989a:	2d09      	cmp	r5, #9
 800989c:	f04f 0301 	mov.w	r3, #1
 80098a0:	6103      	str	r3, [r0, #16]
 80098a2:	dd16      	ble.n	80098d2 <__s2b+0x72>
 80098a4:	f104 0909 	add.w	r9, r4, #9
 80098a8:	46c8      	mov	r8, r9
 80098aa:	442c      	add	r4, r5
 80098ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098b0:	4601      	mov	r1, r0
 80098b2:	3b30      	subs	r3, #48	; 0x30
 80098b4:	220a      	movs	r2, #10
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ff8c 	bl	80097d4 <__multadd>
 80098bc:	45a0      	cmp	r8, r4
 80098be:	d1f5      	bne.n	80098ac <__s2b+0x4c>
 80098c0:	f1a5 0408 	sub.w	r4, r5, #8
 80098c4:	444c      	add	r4, r9
 80098c6:	1b2d      	subs	r5, r5, r4
 80098c8:	1963      	adds	r3, r4, r5
 80098ca:	42bb      	cmp	r3, r7
 80098cc:	db04      	blt.n	80098d8 <__s2b+0x78>
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	340a      	adds	r4, #10
 80098d4:	2509      	movs	r5, #9
 80098d6:	e7f6      	b.n	80098c6 <__s2b+0x66>
 80098d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098dc:	4601      	mov	r1, r0
 80098de:	3b30      	subs	r3, #48	; 0x30
 80098e0:	220a      	movs	r2, #10
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff ff76 	bl	80097d4 <__multadd>
 80098e8:	e7ee      	b.n	80098c8 <__s2b+0x68>
 80098ea:	bf00      	nop
 80098ec:	0800ba48 	.word	0x0800ba48
 80098f0:	0800bb38 	.word	0x0800bb38

080098f4 <__hi0bits>:
 80098f4:	0c03      	lsrs	r3, r0, #16
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	b9d3      	cbnz	r3, 8009930 <__hi0bits+0x3c>
 80098fa:	0400      	lsls	r0, r0, #16
 80098fc:	2310      	movs	r3, #16
 80098fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009902:	bf04      	itt	eq
 8009904:	0200      	lsleq	r0, r0, #8
 8009906:	3308      	addeq	r3, #8
 8009908:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800990c:	bf04      	itt	eq
 800990e:	0100      	lsleq	r0, r0, #4
 8009910:	3304      	addeq	r3, #4
 8009912:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009916:	bf04      	itt	eq
 8009918:	0080      	lsleq	r0, r0, #2
 800991a:	3302      	addeq	r3, #2
 800991c:	2800      	cmp	r0, #0
 800991e:	db05      	blt.n	800992c <__hi0bits+0x38>
 8009920:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009924:	f103 0301 	add.w	r3, r3, #1
 8009928:	bf08      	it	eq
 800992a:	2320      	moveq	r3, #32
 800992c:	4618      	mov	r0, r3
 800992e:	4770      	bx	lr
 8009930:	2300      	movs	r3, #0
 8009932:	e7e4      	b.n	80098fe <__hi0bits+0xa>

08009934 <__lo0bits>:
 8009934:	6803      	ldr	r3, [r0, #0]
 8009936:	f013 0207 	ands.w	r2, r3, #7
 800993a:	4601      	mov	r1, r0
 800993c:	d00b      	beq.n	8009956 <__lo0bits+0x22>
 800993e:	07da      	lsls	r2, r3, #31
 8009940:	d423      	bmi.n	800998a <__lo0bits+0x56>
 8009942:	0798      	lsls	r0, r3, #30
 8009944:	bf49      	itett	mi
 8009946:	085b      	lsrmi	r3, r3, #1
 8009948:	089b      	lsrpl	r3, r3, #2
 800994a:	2001      	movmi	r0, #1
 800994c:	600b      	strmi	r3, [r1, #0]
 800994e:	bf5c      	itt	pl
 8009950:	600b      	strpl	r3, [r1, #0]
 8009952:	2002      	movpl	r0, #2
 8009954:	4770      	bx	lr
 8009956:	b298      	uxth	r0, r3
 8009958:	b9a8      	cbnz	r0, 8009986 <__lo0bits+0x52>
 800995a:	0c1b      	lsrs	r3, r3, #16
 800995c:	2010      	movs	r0, #16
 800995e:	b2da      	uxtb	r2, r3
 8009960:	b90a      	cbnz	r2, 8009966 <__lo0bits+0x32>
 8009962:	3008      	adds	r0, #8
 8009964:	0a1b      	lsrs	r3, r3, #8
 8009966:	071a      	lsls	r2, r3, #28
 8009968:	bf04      	itt	eq
 800996a:	091b      	lsreq	r3, r3, #4
 800996c:	3004      	addeq	r0, #4
 800996e:	079a      	lsls	r2, r3, #30
 8009970:	bf04      	itt	eq
 8009972:	089b      	lsreq	r3, r3, #2
 8009974:	3002      	addeq	r0, #2
 8009976:	07da      	lsls	r2, r3, #31
 8009978:	d403      	bmi.n	8009982 <__lo0bits+0x4e>
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	f100 0001 	add.w	r0, r0, #1
 8009980:	d005      	beq.n	800998e <__lo0bits+0x5a>
 8009982:	600b      	str	r3, [r1, #0]
 8009984:	4770      	bx	lr
 8009986:	4610      	mov	r0, r2
 8009988:	e7e9      	b.n	800995e <__lo0bits+0x2a>
 800998a:	2000      	movs	r0, #0
 800998c:	4770      	bx	lr
 800998e:	2020      	movs	r0, #32
 8009990:	4770      	bx	lr
	...

08009994 <__i2b>:
 8009994:	b510      	push	{r4, lr}
 8009996:	460c      	mov	r4, r1
 8009998:	2101      	movs	r1, #1
 800999a:	f7ff feb9 	bl	8009710 <_Balloc>
 800999e:	4602      	mov	r2, r0
 80099a0:	b928      	cbnz	r0, 80099ae <__i2b+0x1a>
 80099a2:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <__i2b+0x24>)
 80099a4:	4805      	ldr	r0, [pc, #20]	; (80099bc <__i2b+0x28>)
 80099a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099aa:	f001 fba9 	bl	800b100 <__assert_func>
 80099ae:	2301      	movs	r3, #1
 80099b0:	6144      	str	r4, [r0, #20]
 80099b2:	6103      	str	r3, [r0, #16]
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	bf00      	nop
 80099b8:	0800ba48 	.word	0x0800ba48
 80099bc:	0800bb38 	.word	0x0800bb38

080099c0 <__multiply>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	4691      	mov	r9, r2
 80099c6:	690a      	ldr	r2, [r1, #16]
 80099c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	bfb8      	it	lt
 80099d0:	460b      	movlt	r3, r1
 80099d2:	460c      	mov	r4, r1
 80099d4:	bfbc      	itt	lt
 80099d6:	464c      	movlt	r4, r9
 80099d8:	4699      	movlt	r9, r3
 80099da:	6927      	ldr	r7, [r4, #16]
 80099dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	6861      	ldr	r1, [r4, #4]
 80099e4:	eb07 060a 	add.w	r6, r7, sl
 80099e8:	42b3      	cmp	r3, r6
 80099ea:	b085      	sub	sp, #20
 80099ec:	bfb8      	it	lt
 80099ee:	3101      	addlt	r1, #1
 80099f0:	f7ff fe8e 	bl	8009710 <_Balloc>
 80099f4:	b930      	cbnz	r0, 8009a04 <__multiply+0x44>
 80099f6:	4602      	mov	r2, r0
 80099f8:	4b44      	ldr	r3, [pc, #272]	; (8009b0c <__multiply+0x14c>)
 80099fa:	4845      	ldr	r0, [pc, #276]	; (8009b10 <__multiply+0x150>)
 80099fc:	f240 115d 	movw	r1, #349	; 0x15d
 8009a00:	f001 fb7e 	bl	800b100 <__assert_func>
 8009a04:	f100 0514 	add.w	r5, r0, #20
 8009a08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4543      	cmp	r3, r8
 8009a12:	d321      	bcc.n	8009a58 <__multiply+0x98>
 8009a14:	f104 0314 	add.w	r3, r4, #20
 8009a18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a1c:	f109 0314 	add.w	r3, r9, #20
 8009a20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a24:	9202      	str	r2, [sp, #8]
 8009a26:	1b3a      	subs	r2, r7, r4
 8009a28:	3a15      	subs	r2, #21
 8009a2a:	f022 0203 	bic.w	r2, r2, #3
 8009a2e:	3204      	adds	r2, #4
 8009a30:	f104 0115 	add.w	r1, r4, #21
 8009a34:	428f      	cmp	r7, r1
 8009a36:	bf38      	it	cc
 8009a38:	2204      	movcc	r2, #4
 8009a3a:	9201      	str	r2, [sp, #4]
 8009a3c:	9a02      	ldr	r2, [sp, #8]
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d80c      	bhi.n	8009a5e <__multiply+0x9e>
 8009a44:	2e00      	cmp	r6, #0
 8009a46:	dd03      	ble.n	8009a50 <__multiply+0x90>
 8009a48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d05a      	beq.n	8009b06 <__multiply+0x146>
 8009a50:	6106      	str	r6, [r0, #16]
 8009a52:	b005      	add	sp, #20
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	f843 2b04 	str.w	r2, [r3], #4
 8009a5c:	e7d8      	b.n	8009a10 <__multiply+0x50>
 8009a5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a62:	f1ba 0f00 	cmp.w	sl, #0
 8009a66:	d024      	beq.n	8009ab2 <__multiply+0xf2>
 8009a68:	f104 0e14 	add.w	lr, r4, #20
 8009a6c:	46a9      	mov	r9, r5
 8009a6e:	f04f 0c00 	mov.w	ip, #0
 8009a72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a76:	f8d9 1000 	ldr.w	r1, [r9]
 8009a7a:	fa1f fb82 	uxth.w	fp, r2
 8009a7e:	b289      	uxth	r1, r1
 8009a80:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a88:	f8d9 2000 	ldr.w	r2, [r9]
 8009a8c:	4461      	add	r1, ip
 8009a8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a92:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a9a:	b289      	uxth	r1, r1
 8009a9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009aa0:	4577      	cmp	r7, lr
 8009aa2:	f849 1b04 	str.w	r1, [r9], #4
 8009aa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aaa:	d8e2      	bhi.n	8009a72 <__multiply+0xb2>
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	f845 c002 	str.w	ip, [r5, r2]
 8009ab2:	9a03      	ldr	r2, [sp, #12]
 8009ab4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	f1b9 0f00 	cmp.w	r9, #0
 8009abe:	d020      	beq.n	8009b02 <__multiply+0x142>
 8009ac0:	6829      	ldr	r1, [r5, #0]
 8009ac2:	f104 0c14 	add.w	ip, r4, #20
 8009ac6:	46ae      	mov	lr, r5
 8009ac8:	f04f 0a00 	mov.w	sl, #0
 8009acc:	f8bc b000 	ldrh.w	fp, [ip]
 8009ad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ad4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ad8:	4492      	add	sl, r2
 8009ada:	b289      	uxth	r1, r1
 8009adc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ae0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ae4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ae8:	f8be 1000 	ldrh.w	r1, [lr]
 8009aec:	0c12      	lsrs	r2, r2, #16
 8009aee:	fb09 1102 	mla	r1, r9, r2, r1
 8009af2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009af6:	4567      	cmp	r7, ip
 8009af8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009afc:	d8e6      	bhi.n	8009acc <__multiply+0x10c>
 8009afe:	9a01      	ldr	r2, [sp, #4]
 8009b00:	50a9      	str	r1, [r5, r2]
 8009b02:	3504      	adds	r5, #4
 8009b04:	e79a      	b.n	8009a3c <__multiply+0x7c>
 8009b06:	3e01      	subs	r6, #1
 8009b08:	e79c      	b.n	8009a44 <__multiply+0x84>
 8009b0a:	bf00      	nop
 8009b0c:	0800ba48 	.word	0x0800ba48
 8009b10:	0800bb38 	.word	0x0800bb38

08009b14 <__pow5mult>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	4615      	mov	r5, r2
 8009b1a:	f012 0203 	ands.w	r2, r2, #3
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	d007      	beq.n	8009b34 <__pow5mult+0x20>
 8009b24:	4c25      	ldr	r4, [pc, #148]	; (8009bbc <__pow5mult+0xa8>)
 8009b26:	3a01      	subs	r2, #1
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b2e:	f7ff fe51 	bl	80097d4 <__multadd>
 8009b32:	4607      	mov	r7, r0
 8009b34:	10ad      	asrs	r5, r5, #2
 8009b36:	d03d      	beq.n	8009bb4 <__pow5mult+0xa0>
 8009b38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b3a:	b97c      	cbnz	r4, 8009b5c <__pow5mult+0x48>
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	f7ff fdbf 	bl	80096c0 <malloc>
 8009b42:	4602      	mov	r2, r0
 8009b44:	6270      	str	r0, [r6, #36]	; 0x24
 8009b46:	b928      	cbnz	r0, 8009b54 <__pow5mult+0x40>
 8009b48:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <__pow5mult+0xac>)
 8009b4a:	481e      	ldr	r0, [pc, #120]	; (8009bc4 <__pow5mult+0xb0>)
 8009b4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b50:	f001 fad6 	bl	800b100 <__assert_func>
 8009b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b58:	6004      	str	r4, [r0, #0]
 8009b5a:	60c4      	str	r4, [r0, #12]
 8009b5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b64:	b94c      	cbnz	r4, 8009b7a <__pow5mult+0x66>
 8009b66:	f240 2171 	movw	r1, #625	; 0x271
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ff12 	bl	8009994 <__i2b>
 8009b70:	2300      	movs	r3, #0
 8009b72:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b76:	4604      	mov	r4, r0
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	f04f 0900 	mov.w	r9, #0
 8009b7e:	07eb      	lsls	r3, r5, #31
 8009b80:	d50a      	bpl.n	8009b98 <__pow5mult+0x84>
 8009b82:	4639      	mov	r1, r7
 8009b84:	4622      	mov	r2, r4
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7ff ff1a 	bl	80099c0 <__multiply>
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	4680      	mov	r8, r0
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff fdfd 	bl	8009790 <_Bfree>
 8009b96:	4647      	mov	r7, r8
 8009b98:	106d      	asrs	r5, r5, #1
 8009b9a:	d00b      	beq.n	8009bb4 <__pow5mult+0xa0>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	b938      	cbnz	r0, 8009bb0 <__pow5mult+0x9c>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff ff0b 	bl	80099c0 <__multiply>
 8009baa:	6020      	str	r0, [r4, #0]
 8009bac:	f8c0 9000 	str.w	r9, [r0]
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	e7e4      	b.n	8009b7e <__pow5mult+0x6a>
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bba:	bf00      	nop
 8009bbc:	0800bc88 	.word	0x0800bc88
 8009bc0:	0800b9d6 	.word	0x0800b9d6
 8009bc4:	0800bb38 	.word	0x0800bb38

08009bc8 <__lshift>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	6849      	ldr	r1, [r1, #4]
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	4607      	mov	r7, r0
 8009bda:	4691      	mov	r9, r2
 8009bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009be0:	f108 0601 	add.w	r6, r8, #1
 8009be4:	42b3      	cmp	r3, r6
 8009be6:	db0b      	blt.n	8009c00 <__lshift+0x38>
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff fd91 	bl	8009710 <_Balloc>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b948      	cbnz	r0, 8009c06 <__lshift+0x3e>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <__lshift+0xd8>)
 8009bf6:	482b      	ldr	r0, [pc, #172]	; (8009ca4 <__lshift+0xdc>)
 8009bf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bfc:	f001 fa80 	bl	800b100 <__assert_func>
 8009c00:	3101      	adds	r1, #1
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	e7ee      	b.n	8009be4 <__lshift+0x1c>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f100 0114 	add.w	r1, r0, #20
 8009c0c:	f100 0210 	add.w	r2, r0, #16
 8009c10:	4618      	mov	r0, r3
 8009c12:	4553      	cmp	r3, sl
 8009c14:	db37      	blt.n	8009c86 <__lshift+0xbe>
 8009c16:	6920      	ldr	r0, [r4, #16]
 8009c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c1c:	f104 0314 	add.w	r3, r4, #20
 8009c20:	f019 091f 	ands.w	r9, r9, #31
 8009c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c2c:	d02f      	beq.n	8009c8e <__lshift+0xc6>
 8009c2e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c32:	468a      	mov	sl, r1
 8009c34:	f04f 0c00 	mov.w	ip, #0
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	fa02 f209 	lsl.w	r2, r2, r9
 8009c3e:	ea42 020c 	orr.w	r2, r2, ip
 8009c42:	f84a 2b04 	str.w	r2, [sl], #4
 8009c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c4a:	4298      	cmp	r0, r3
 8009c4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c50:	d8f2      	bhi.n	8009c38 <__lshift+0x70>
 8009c52:	1b03      	subs	r3, r0, r4
 8009c54:	3b15      	subs	r3, #21
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	f104 0215 	add.w	r2, r4, #21
 8009c60:	4290      	cmp	r0, r2
 8009c62:	bf38      	it	cc
 8009c64:	2304      	movcc	r3, #4
 8009c66:	f841 c003 	str.w	ip, [r1, r3]
 8009c6a:	f1bc 0f00 	cmp.w	ip, #0
 8009c6e:	d001      	beq.n	8009c74 <__lshift+0xac>
 8009c70:	f108 0602 	add.w	r6, r8, #2
 8009c74:	3e01      	subs	r6, #1
 8009c76:	4638      	mov	r0, r7
 8009c78:	612e      	str	r6, [r5, #16]
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f7ff fd88 	bl	8009790 <_Bfree>
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	e7c1      	b.n	8009c12 <__lshift+0x4a>
 8009c8e:	3904      	subs	r1, #4
 8009c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	d8f9      	bhi.n	8009c90 <__lshift+0xc8>
 8009c9c:	e7ea      	b.n	8009c74 <__lshift+0xac>
 8009c9e:	bf00      	nop
 8009ca0:	0800ba48 	.word	0x0800ba48
 8009ca4:	0800bb38 	.word	0x0800bb38

08009ca8 <__mcmp>:
 8009ca8:	b530      	push	{r4, r5, lr}
 8009caa:	6902      	ldr	r2, [r0, #16]
 8009cac:	690c      	ldr	r4, [r1, #16]
 8009cae:	1b12      	subs	r2, r2, r4
 8009cb0:	d10e      	bne.n	8009cd0 <__mcmp+0x28>
 8009cb2:	f100 0314 	add.w	r3, r0, #20
 8009cb6:	3114      	adds	r1, #20
 8009cb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cc8:	42a5      	cmp	r5, r4
 8009cca:	d003      	beq.n	8009cd4 <__mcmp+0x2c>
 8009ccc:	d305      	bcc.n	8009cda <__mcmp+0x32>
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	bd30      	pop	{r4, r5, pc}
 8009cd4:	4283      	cmp	r3, r0
 8009cd6:	d3f3      	bcc.n	8009cc0 <__mcmp+0x18>
 8009cd8:	e7fa      	b.n	8009cd0 <__mcmp+0x28>
 8009cda:	f04f 32ff 	mov.w	r2, #4294967295
 8009cde:	e7f7      	b.n	8009cd0 <__mcmp+0x28>

08009ce0 <__mdiff>:
 8009ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4620      	mov	r0, r4
 8009cec:	4690      	mov	r8, r2
 8009cee:	f7ff ffdb 	bl	8009ca8 <__mcmp>
 8009cf2:	1e05      	subs	r5, r0, #0
 8009cf4:	d110      	bne.n	8009d18 <__mdiff+0x38>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff fd09 	bl	8009710 <_Balloc>
 8009cfe:	b930      	cbnz	r0, 8009d0e <__mdiff+0x2e>
 8009d00:	4b3a      	ldr	r3, [pc, #232]	; (8009dec <__mdiff+0x10c>)
 8009d02:	4602      	mov	r2, r0
 8009d04:	f240 2132 	movw	r1, #562	; 0x232
 8009d08:	4839      	ldr	r0, [pc, #228]	; (8009df0 <__mdiff+0x110>)
 8009d0a:	f001 f9f9 	bl	800b100 <__assert_func>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d18:	bfa4      	itt	ge
 8009d1a:	4643      	movge	r3, r8
 8009d1c:	46a0      	movge	r8, r4
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d24:	bfa6      	itte	ge
 8009d26:	461c      	movge	r4, r3
 8009d28:	2500      	movge	r5, #0
 8009d2a:	2501      	movlt	r5, #1
 8009d2c:	f7ff fcf0 	bl	8009710 <_Balloc>
 8009d30:	b920      	cbnz	r0, 8009d3c <__mdiff+0x5c>
 8009d32:	4b2e      	ldr	r3, [pc, #184]	; (8009dec <__mdiff+0x10c>)
 8009d34:	4602      	mov	r2, r0
 8009d36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d3a:	e7e5      	b.n	8009d08 <__mdiff+0x28>
 8009d3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d40:	6926      	ldr	r6, [r4, #16]
 8009d42:	60c5      	str	r5, [r0, #12]
 8009d44:	f104 0914 	add.w	r9, r4, #20
 8009d48:	f108 0514 	add.w	r5, r8, #20
 8009d4c:	f100 0e14 	add.w	lr, r0, #20
 8009d50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d58:	f108 0210 	add.w	r2, r8, #16
 8009d5c:	46f2      	mov	sl, lr
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d68:	fa1f f883 	uxth.w	r8, r3
 8009d6c:	fa11 f18b 	uxtah	r1, r1, fp
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	eba1 0808 	sub.w	r8, r1, r8
 8009d76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d7e:	fa1f f888 	uxth.w	r8, r8
 8009d82:	1419      	asrs	r1, r3, #16
 8009d84:	454e      	cmp	r6, r9
 8009d86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d8a:	f84a 3b04 	str.w	r3, [sl], #4
 8009d8e:	d8e7      	bhi.n	8009d60 <__mdiff+0x80>
 8009d90:	1b33      	subs	r3, r6, r4
 8009d92:	3b15      	subs	r3, #21
 8009d94:	f023 0303 	bic.w	r3, r3, #3
 8009d98:	3304      	adds	r3, #4
 8009d9a:	3415      	adds	r4, #21
 8009d9c:	42a6      	cmp	r6, r4
 8009d9e:	bf38      	it	cc
 8009da0:	2304      	movcc	r3, #4
 8009da2:	441d      	add	r5, r3
 8009da4:	4473      	add	r3, lr
 8009da6:	469e      	mov	lr, r3
 8009da8:	462e      	mov	r6, r5
 8009daa:	4566      	cmp	r6, ip
 8009dac:	d30e      	bcc.n	8009dcc <__mdiff+0xec>
 8009dae:	f10c 0203 	add.w	r2, ip, #3
 8009db2:	1b52      	subs	r2, r2, r5
 8009db4:	f022 0203 	bic.w	r2, r2, #3
 8009db8:	3d03      	subs	r5, #3
 8009dba:	45ac      	cmp	ip, r5
 8009dbc:	bf38      	it	cc
 8009dbe:	2200      	movcc	r2, #0
 8009dc0:	441a      	add	r2, r3
 8009dc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dc6:	b17b      	cbz	r3, 8009de8 <__mdiff+0x108>
 8009dc8:	6107      	str	r7, [r0, #16]
 8009dca:	e7a3      	b.n	8009d14 <__mdiff+0x34>
 8009dcc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009dd0:	fa11 f288 	uxtah	r2, r1, r8
 8009dd4:	1414      	asrs	r4, r2, #16
 8009dd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009dda:	b292      	uxth	r2, r2
 8009ddc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009de0:	f84e 2b04 	str.w	r2, [lr], #4
 8009de4:	1421      	asrs	r1, r4, #16
 8009de6:	e7e0      	b.n	8009daa <__mdiff+0xca>
 8009de8:	3f01      	subs	r7, #1
 8009dea:	e7ea      	b.n	8009dc2 <__mdiff+0xe2>
 8009dec:	0800ba48 	.word	0x0800ba48
 8009df0:	0800bb38 	.word	0x0800bb38

08009df4 <__ulp>:
 8009df4:	b082      	sub	sp, #8
 8009df6:	ed8d 0b00 	vstr	d0, [sp]
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	4912      	ldr	r1, [pc, #72]	; (8009e48 <__ulp+0x54>)
 8009dfe:	4019      	ands	r1, r3
 8009e00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009e04:	2900      	cmp	r1, #0
 8009e06:	dd05      	ble.n	8009e14 <__ulp+0x20>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	ec43 2b10 	vmov	d0, r2, r3
 8009e10:	b002      	add	sp, #8
 8009e12:	4770      	bx	lr
 8009e14:	4249      	negs	r1, r1
 8009e16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009e1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	da04      	bge.n	8009e32 <__ulp+0x3e>
 8009e28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e2c:	fa41 f300 	asr.w	r3, r1, r0
 8009e30:	e7ec      	b.n	8009e0c <__ulp+0x18>
 8009e32:	f1a0 0114 	sub.w	r1, r0, #20
 8009e36:	291e      	cmp	r1, #30
 8009e38:	bfda      	itte	le
 8009e3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009e3e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009e42:	2101      	movgt	r1, #1
 8009e44:	460a      	mov	r2, r1
 8009e46:	e7e1      	b.n	8009e0c <__ulp+0x18>
 8009e48:	7ff00000 	.word	0x7ff00000

08009e4c <__b2d>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	6905      	ldr	r5, [r0, #16]
 8009e50:	f100 0714 	add.w	r7, r0, #20
 8009e54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e58:	1f2e      	subs	r6, r5, #4
 8009e5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff fd48 	bl	80098f4 <__hi0bits>
 8009e64:	f1c0 0320 	rsb	r3, r0, #32
 8009e68:	280a      	cmp	r0, #10
 8009e6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009ee8 <__b2d+0x9c>
 8009e6e:	600b      	str	r3, [r1, #0]
 8009e70:	dc14      	bgt.n	8009e9c <__b2d+0x50>
 8009e72:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e76:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e7a:	42b7      	cmp	r7, r6
 8009e7c:	ea41 030c 	orr.w	r3, r1, ip
 8009e80:	bf34      	ite	cc
 8009e82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e86:	2100      	movcs	r1, #0
 8009e88:	3015      	adds	r0, #21
 8009e8a:	fa04 f000 	lsl.w	r0, r4, r0
 8009e8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e92:	ea40 0201 	orr.w	r2, r0, r1
 8009e96:	ec43 2b10 	vmov	d0, r2, r3
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9c:	42b7      	cmp	r7, r6
 8009e9e:	bf3a      	itte	cc
 8009ea0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ea4:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ea8:	2100      	movcs	r1, #0
 8009eaa:	380b      	subs	r0, #11
 8009eac:	d017      	beq.n	8009ede <__b2d+0x92>
 8009eae:	f1c0 0c20 	rsb	ip, r0, #32
 8009eb2:	fa04 f500 	lsl.w	r5, r4, r0
 8009eb6:	42be      	cmp	r6, r7
 8009eb8:	fa21 f40c 	lsr.w	r4, r1, ip
 8009ebc:	ea45 0504 	orr.w	r5, r5, r4
 8009ec0:	bf8c      	ite	hi
 8009ec2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009ec6:	2400      	movls	r4, #0
 8009ec8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ecc:	fa01 f000 	lsl.w	r0, r1, r0
 8009ed0:	fa24 f40c 	lsr.w	r4, r4, ip
 8009ed4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ed8:	ea40 0204 	orr.w	r2, r0, r4
 8009edc:	e7db      	b.n	8009e96 <__b2d+0x4a>
 8009ede:	ea44 030c 	orr.w	r3, r4, ip
 8009ee2:	460a      	mov	r2, r1
 8009ee4:	e7d7      	b.n	8009e96 <__b2d+0x4a>
 8009ee6:	bf00      	nop
 8009ee8:	3ff00000 	.word	0x3ff00000

08009eec <__d2b>:
 8009eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	ec57 6b10 	vmov	r6, r7, d0
 8009ef8:	4690      	mov	r8, r2
 8009efa:	f7ff fc09 	bl	8009710 <_Balloc>
 8009efe:	4604      	mov	r4, r0
 8009f00:	b930      	cbnz	r0, 8009f10 <__d2b+0x24>
 8009f02:	4602      	mov	r2, r0
 8009f04:	4b25      	ldr	r3, [pc, #148]	; (8009f9c <__d2b+0xb0>)
 8009f06:	4826      	ldr	r0, [pc, #152]	; (8009fa0 <__d2b+0xb4>)
 8009f08:	f240 310a 	movw	r1, #778	; 0x30a
 8009f0c:	f001 f8f8 	bl	800b100 <__assert_func>
 8009f10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f18:	bb35      	cbnz	r5, 8009f68 <__d2b+0x7c>
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	d028      	beq.n	8009f72 <__d2b+0x86>
 8009f20:	4668      	mov	r0, sp
 8009f22:	9600      	str	r6, [sp, #0]
 8009f24:	f7ff fd06 	bl	8009934 <__lo0bits>
 8009f28:	9900      	ldr	r1, [sp, #0]
 8009f2a:	b300      	cbz	r0, 8009f6e <__d2b+0x82>
 8009f2c:	9a01      	ldr	r2, [sp, #4]
 8009f2e:	f1c0 0320 	rsb	r3, r0, #32
 8009f32:	fa02 f303 	lsl.w	r3, r2, r3
 8009f36:	430b      	orrs	r3, r1
 8009f38:	40c2      	lsrs	r2, r0
 8009f3a:	6163      	str	r3, [r4, #20]
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9b01      	ldr	r3, [sp, #4]
 8009f40:	61a3      	str	r3, [r4, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	bf14      	ite	ne
 8009f46:	2202      	movne	r2, #2
 8009f48:	2201      	moveq	r2, #1
 8009f4a:	6122      	str	r2, [r4, #16]
 8009f4c:	b1d5      	cbz	r5, 8009f84 <__d2b+0x98>
 8009f4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f52:	4405      	add	r5, r0
 8009f54:	f8c9 5000 	str.w	r5, [r9]
 8009f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f5c:	f8c8 0000 	str.w	r0, [r8]
 8009f60:	4620      	mov	r0, r4
 8009f62:	b003      	add	sp, #12
 8009f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f6c:	e7d5      	b.n	8009f1a <__d2b+0x2e>
 8009f6e:	6161      	str	r1, [r4, #20]
 8009f70:	e7e5      	b.n	8009f3e <__d2b+0x52>
 8009f72:	a801      	add	r0, sp, #4
 8009f74:	f7ff fcde 	bl	8009934 <__lo0bits>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	6163      	str	r3, [r4, #20]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	3020      	adds	r0, #32
 8009f82:	e7e3      	b.n	8009f4c <__d2b+0x60>
 8009f84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f8c:	f8c9 0000 	str.w	r0, [r9]
 8009f90:	6918      	ldr	r0, [r3, #16]
 8009f92:	f7ff fcaf 	bl	80098f4 <__hi0bits>
 8009f96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f9a:	e7df      	b.n	8009f5c <__d2b+0x70>
 8009f9c:	0800ba48 	.word	0x0800ba48
 8009fa0:	0800bb38 	.word	0x0800bb38

08009fa4 <__ratio>:
 8009fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4688      	mov	r8, r1
 8009faa:	4669      	mov	r1, sp
 8009fac:	4681      	mov	r9, r0
 8009fae:	f7ff ff4d 	bl	8009e4c <__b2d>
 8009fb2:	a901      	add	r1, sp, #4
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	ec55 4b10 	vmov	r4, r5, d0
 8009fba:	f7ff ff47 	bl	8009e4c <__b2d>
 8009fbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fc2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fc6:	eba3 0c02 	sub.w	ip, r3, r2
 8009fca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fce:	1a9b      	subs	r3, r3, r2
 8009fd0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fd4:	ec51 0b10 	vmov	r0, r1, d0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfd6      	itet	le
 8009fdc:	460a      	movle	r2, r1
 8009fde:	462a      	movgt	r2, r5
 8009fe0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fe4:	468b      	mov	fp, r1
 8009fe6:	462f      	mov	r7, r5
 8009fe8:	bfd4      	ite	le
 8009fea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	ee10 2a10 	vmov	r2, s0
 8009ff8:	465b      	mov	r3, fp
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 fc26 	bl	800084c <__aeabi_ddiv>
 800a000:	ec41 0b10 	vmov	d0, r0, r1
 800a004:	b003      	add	sp, #12
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a00a <__copybits>:
 800a00a:	3901      	subs	r1, #1
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	1149      	asrs	r1, r1, #5
 800a010:	6914      	ldr	r4, [r2, #16]
 800a012:	3101      	adds	r1, #1
 800a014:	f102 0314 	add.w	r3, r2, #20
 800a018:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a01c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a020:	1f05      	subs	r5, r0, #4
 800a022:	42a3      	cmp	r3, r4
 800a024:	d30c      	bcc.n	800a040 <__copybits+0x36>
 800a026:	1aa3      	subs	r3, r4, r2
 800a028:	3b11      	subs	r3, #17
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	3211      	adds	r2, #17
 800a030:	42a2      	cmp	r2, r4
 800a032:	bf88      	it	hi
 800a034:	2300      	movhi	r3, #0
 800a036:	4418      	add	r0, r3
 800a038:	2300      	movs	r3, #0
 800a03a:	4288      	cmp	r0, r1
 800a03c:	d305      	bcc.n	800a04a <__copybits+0x40>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f853 6b04 	ldr.w	r6, [r3], #4
 800a044:	f845 6f04 	str.w	r6, [r5, #4]!
 800a048:	e7eb      	b.n	800a022 <__copybits+0x18>
 800a04a:	f840 3b04 	str.w	r3, [r0], #4
 800a04e:	e7f4      	b.n	800a03a <__copybits+0x30>

0800a050 <__any_on>:
 800a050:	f100 0214 	add.w	r2, r0, #20
 800a054:	6900      	ldr	r0, [r0, #16]
 800a056:	114b      	asrs	r3, r1, #5
 800a058:	4298      	cmp	r0, r3
 800a05a:	b510      	push	{r4, lr}
 800a05c:	db11      	blt.n	800a082 <__any_on+0x32>
 800a05e:	dd0a      	ble.n	800a076 <__any_on+0x26>
 800a060:	f011 011f 	ands.w	r1, r1, #31
 800a064:	d007      	beq.n	800a076 <__any_on+0x26>
 800a066:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a06a:	fa24 f001 	lsr.w	r0, r4, r1
 800a06e:	fa00 f101 	lsl.w	r1, r0, r1
 800a072:	428c      	cmp	r4, r1
 800a074:	d10b      	bne.n	800a08e <__any_on+0x3e>
 800a076:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d803      	bhi.n	800a086 <__any_on+0x36>
 800a07e:	2000      	movs	r0, #0
 800a080:	bd10      	pop	{r4, pc}
 800a082:	4603      	mov	r3, r0
 800a084:	e7f7      	b.n	800a076 <__any_on+0x26>
 800a086:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a08a:	2900      	cmp	r1, #0
 800a08c:	d0f5      	beq.n	800a07a <__any_on+0x2a>
 800a08e:	2001      	movs	r0, #1
 800a090:	e7f6      	b.n	800a080 <__any_on+0x30>

0800a092 <_calloc_r>:
 800a092:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a094:	fba1 2402 	umull	r2, r4, r1, r2
 800a098:	b94c      	cbnz	r4, 800a0ae <_calloc_r+0x1c>
 800a09a:	4611      	mov	r1, r2
 800a09c:	9201      	str	r2, [sp, #4]
 800a09e:	f000 f87b 	bl	800a198 <_malloc_r>
 800a0a2:	9a01      	ldr	r2, [sp, #4]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	b930      	cbnz	r0, 800a0b6 <_calloc_r+0x24>
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	b003      	add	sp, #12
 800a0ac:	bd30      	pop	{r4, r5, pc}
 800a0ae:	220c      	movs	r2, #12
 800a0b0:	6002      	str	r2, [r0, #0]
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	e7f8      	b.n	800a0a8 <_calloc_r+0x16>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	f7fb ff76 	bl	8005fa8 <memset>
 800a0bc:	e7f4      	b.n	800a0a8 <_calloc_r+0x16>
	...

0800a0c0 <_free_r>:
 800a0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	d044      	beq.n	800a150 <_free_r+0x90>
 800a0c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ca:	9001      	str	r0, [sp, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a0d2:	bfb8      	it	lt
 800a0d4:	18e4      	addlt	r4, r4, r3
 800a0d6:	f001 f87f 	bl	800b1d8 <__malloc_lock>
 800a0da:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <_free_r+0x94>)
 800a0dc:	9801      	ldr	r0, [sp, #4]
 800a0de:	6813      	ldr	r3, [r2, #0]
 800a0e0:	b933      	cbnz	r3, 800a0f0 <_free_r+0x30>
 800a0e2:	6063      	str	r3, [r4, #4]
 800a0e4:	6014      	str	r4, [r2, #0]
 800a0e6:	b003      	add	sp, #12
 800a0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0ec:	f001 b87a 	b.w	800b1e4 <__malloc_unlock>
 800a0f0:	42a3      	cmp	r3, r4
 800a0f2:	d908      	bls.n	800a106 <_free_r+0x46>
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	1961      	adds	r1, r4, r5
 800a0f8:	428b      	cmp	r3, r1
 800a0fa:	bf01      	itttt	eq
 800a0fc:	6819      	ldreq	r1, [r3, #0]
 800a0fe:	685b      	ldreq	r3, [r3, #4]
 800a100:	1949      	addeq	r1, r1, r5
 800a102:	6021      	streq	r1, [r4, #0]
 800a104:	e7ed      	b.n	800a0e2 <_free_r+0x22>
 800a106:	461a      	mov	r2, r3
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	b10b      	cbz	r3, 800a110 <_free_r+0x50>
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	d9fa      	bls.n	800a106 <_free_r+0x46>
 800a110:	6811      	ldr	r1, [r2, #0]
 800a112:	1855      	adds	r5, r2, r1
 800a114:	42a5      	cmp	r5, r4
 800a116:	d10b      	bne.n	800a130 <_free_r+0x70>
 800a118:	6824      	ldr	r4, [r4, #0]
 800a11a:	4421      	add	r1, r4
 800a11c:	1854      	adds	r4, r2, r1
 800a11e:	42a3      	cmp	r3, r4
 800a120:	6011      	str	r1, [r2, #0]
 800a122:	d1e0      	bne.n	800a0e6 <_free_r+0x26>
 800a124:	681c      	ldr	r4, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	6053      	str	r3, [r2, #4]
 800a12a:	4421      	add	r1, r4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	e7da      	b.n	800a0e6 <_free_r+0x26>
 800a130:	d902      	bls.n	800a138 <_free_r+0x78>
 800a132:	230c      	movs	r3, #12
 800a134:	6003      	str	r3, [r0, #0]
 800a136:	e7d6      	b.n	800a0e6 <_free_r+0x26>
 800a138:	6825      	ldr	r5, [r4, #0]
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	428b      	cmp	r3, r1
 800a13e:	bf04      	itt	eq
 800a140:	6819      	ldreq	r1, [r3, #0]
 800a142:	685b      	ldreq	r3, [r3, #4]
 800a144:	6063      	str	r3, [r4, #4]
 800a146:	bf04      	itt	eq
 800a148:	1949      	addeq	r1, r1, r5
 800a14a:	6021      	streq	r1, [r4, #0]
 800a14c:	6054      	str	r4, [r2, #4]
 800a14e:	e7ca      	b.n	800a0e6 <_free_r+0x26>
 800a150:	b003      	add	sp, #12
 800a152:	bd30      	pop	{r4, r5, pc}
 800a154:	200009e0 	.word	0x200009e0

0800a158 <sbrk_aligned>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4e0e      	ldr	r6, [pc, #56]	; (800a194 <sbrk_aligned+0x3c>)
 800a15c:	460c      	mov	r4, r1
 800a15e:	6831      	ldr	r1, [r6, #0]
 800a160:	4605      	mov	r5, r0
 800a162:	b911      	cbnz	r1, 800a16a <sbrk_aligned+0x12>
 800a164:	f000 fec8 	bl	800aef8 <_sbrk_r>
 800a168:	6030      	str	r0, [r6, #0]
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 fec3 	bl	800aef8 <_sbrk_r>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d00a      	beq.n	800a18c <sbrk_aligned+0x34>
 800a176:	1cc4      	adds	r4, r0, #3
 800a178:	f024 0403 	bic.w	r4, r4, #3
 800a17c:	42a0      	cmp	r0, r4
 800a17e:	d007      	beq.n	800a190 <sbrk_aligned+0x38>
 800a180:	1a21      	subs	r1, r4, r0
 800a182:	4628      	mov	r0, r5
 800a184:	f000 feb8 	bl	800aef8 <_sbrk_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	d101      	bne.n	800a190 <sbrk_aligned+0x38>
 800a18c:	f04f 34ff 	mov.w	r4, #4294967295
 800a190:	4620      	mov	r0, r4
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	200009e4 	.word	0x200009e4

0800a198 <_malloc_r>:
 800a198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19c:	1ccd      	adds	r5, r1, #3
 800a19e:	f025 0503 	bic.w	r5, r5, #3
 800a1a2:	3508      	adds	r5, #8
 800a1a4:	2d0c      	cmp	r5, #12
 800a1a6:	bf38      	it	cc
 800a1a8:	250c      	movcc	r5, #12
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	db01      	blt.n	800a1b4 <_malloc_r+0x1c>
 800a1b0:	42a9      	cmp	r1, r5
 800a1b2:	d905      	bls.n	800a1c0 <_malloc_r+0x28>
 800a1b4:	230c      	movs	r3, #12
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	2600      	movs	r6, #0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	4e2e      	ldr	r6, [pc, #184]	; (800a27c <_malloc_r+0xe4>)
 800a1c2:	f001 f809 	bl	800b1d8 <__malloc_lock>
 800a1c6:	6833      	ldr	r3, [r6, #0]
 800a1c8:	461c      	mov	r4, r3
 800a1ca:	bb34      	cbnz	r4, 800a21a <_malloc_r+0x82>
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f7ff ffc2 	bl	800a158 <sbrk_aligned>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	d14d      	bne.n	800a276 <_malloc_r+0xde>
 800a1da:	6834      	ldr	r4, [r6, #0]
 800a1dc:	4626      	mov	r6, r4
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d140      	bne.n	800a264 <_malloc_r+0xcc>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	eb04 0803 	add.w	r8, r4, r3
 800a1ec:	f000 fe84 	bl	800aef8 <_sbrk_r>
 800a1f0:	4580      	cmp	r8, r0
 800a1f2:	d13a      	bne.n	800a26a <_malloc_r+0xd2>
 800a1f4:	6821      	ldr	r1, [r4, #0]
 800a1f6:	3503      	adds	r5, #3
 800a1f8:	1a6d      	subs	r5, r5, r1
 800a1fa:	f025 0503 	bic.w	r5, r5, #3
 800a1fe:	3508      	adds	r5, #8
 800a200:	2d0c      	cmp	r5, #12
 800a202:	bf38      	it	cc
 800a204:	250c      	movcc	r5, #12
 800a206:	4629      	mov	r1, r5
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff ffa5 	bl	800a158 <sbrk_aligned>
 800a20e:	3001      	adds	r0, #1
 800a210:	d02b      	beq.n	800a26a <_malloc_r+0xd2>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	442b      	add	r3, r5
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	e00e      	b.n	800a238 <_malloc_r+0xa0>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	1b52      	subs	r2, r2, r5
 800a21e:	d41e      	bmi.n	800a25e <_malloc_r+0xc6>
 800a220:	2a0b      	cmp	r2, #11
 800a222:	d916      	bls.n	800a252 <_malloc_r+0xba>
 800a224:	1961      	adds	r1, r4, r5
 800a226:	42a3      	cmp	r3, r4
 800a228:	6025      	str	r5, [r4, #0]
 800a22a:	bf18      	it	ne
 800a22c:	6059      	strne	r1, [r3, #4]
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	bf08      	it	eq
 800a232:	6031      	streq	r1, [r6, #0]
 800a234:	5162      	str	r2, [r4, r5]
 800a236:	604b      	str	r3, [r1, #4]
 800a238:	4638      	mov	r0, r7
 800a23a:	f104 060b 	add.w	r6, r4, #11
 800a23e:	f000 ffd1 	bl	800b1e4 <__malloc_unlock>
 800a242:	f026 0607 	bic.w	r6, r6, #7
 800a246:	1d23      	adds	r3, r4, #4
 800a248:	1af2      	subs	r2, r6, r3
 800a24a:	d0b6      	beq.n	800a1ba <_malloc_r+0x22>
 800a24c:	1b9b      	subs	r3, r3, r6
 800a24e:	50a3      	str	r3, [r4, r2]
 800a250:	e7b3      	b.n	800a1ba <_malloc_r+0x22>
 800a252:	6862      	ldr	r2, [r4, #4]
 800a254:	42a3      	cmp	r3, r4
 800a256:	bf0c      	ite	eq
 800a258:	6032      	streq	r2, [r6, #0]
 800a25a:	605a      	strne	r2, [r3, #4]
 800a25c:	e7ec      	b.n	800a238 <_malloc_r+0xa0>
 800a25e:	4623      	mov	r3, r4
 800a260:	6864      	ldr	r4, [r4, #4]
 800a262:	e7b2      	b.n	800a1ca <_malloc_r+0x32>
 800a264:	4634      	mov	r4, r6
 800a266:	6876      	ldr	r6, [r6, #4]
 800a268:	e7b9      	b.n	800a1de <_malloc_r+0x46>
 800a26a:	230c      	movs	r3, #12
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	4638      	mov	r0, r7
 800a270:	f000 ffb8 	bl	800b1e4 <__malloc_unlock>
 800a274:	e7a1      	b.n	800a1ba <_malloc_r+0x22>
 800a276:	6025      	str	r5, [r4, #0]
 800a278:	e7de      	b.n	800a238 <_malloc_r+0xa0>
 800a27a:	bf00      	nop
 800a27c:	200009e0 	.word	0x200009e0

0800a280 <__ssputs_r>:
 800a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	688e      	ldr	r6, [r1, #8]
 800a286:	429e      	cmp	r6, r3
 800a288:	4682      	mov	sl, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	4690      	mov	r8, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	d838      	bhi.n	800a304 <__ssputs_r+0x84>
 800a292:	898a      	ldrh	r2, [r1, #12]
 800a294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a298:	d032      	beq.n	800a300 <__ssputs_r+0x80>
 800a29a:	6825      	ldr	r5, [r4, #0]
 800a29c:	6909      	ldr	r1, [r1, #16]
 800a29e:	eba5 0901 	sub.w	r9, r5, r1
 800a2a2:	6965      	ldr	r5, [r4, #20]
 800a2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	444b      	add	r3, r9
 800a2b0:	106d      	asrs	r5, r5, #1
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	bf38      	it	cc
 800a2b6:	461d      	movcc	r5, r3
 800a2b8:	0553      	lsls	r3, r2, #21
 800a2ba:	d531      	bpl.n	800a320 <__ssputs_r+0xa0>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7ff ff6b 	bl	800a198 <_malloc_r>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b950      	cbnz	r0, 800a2dc <__ssputs_r+0x5c>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	f8ca 3000 	str.w	r3, [sl]
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	6921      	ldr	r1, [r4, #16]
 800a2de:	464a      	mov	r2, r9
 800a2e0:	f7ff fa08 	bl	80096f4 <memcpy>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	6126      	str	r6, [r4, #16]
 800a2f2:	6165      	str	r5, [r4, #20]
 800a2f4:	444e      	add	r6, r9
 800a2f6:	eba5 0509 	sub.w	r5, r5, r9
 800a2fa:	6026      	str	r6, [r4, #0]
 800a2fc:	60a5      	str	r5, [r4, #8]
 800a2fe:	463e      	mov	r6, r7
 800a300:	42be      	cmp	r6, r7
 800a302:	d900      	bls.n	800a306 <__ssputs_r+0x86>
 800a304:	463e      	mov	r6, r7
 800a306:	6820      	ldr	r0, [r4, #0]
 800a308:	4632      	mov	r2, r6
 800a30a:	4641      	mov	r1, r8
 800a30c:	f000 ff4a 	bl	800b1a4 <memmove>
 800a310:	68a3      	ldr	r3, [r4, #8]
 800a312:	1b9b      	subs	r3, r3, r6
 800a314:	60a3      	str	r3, [r4, #8]
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	4433      	add	r3, r6
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e7db      	b.n	800a2d8 <__ssputs_r+0x58>
 800a320:	462a      	mov	r2, r5
 800a322:	f000 ff65 	bl	800b1f0 <_realloc_r>
 800a326:	4606      	mov	r6, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1e1      	bne.n	800a2f0 <__ssputs_r+0x70>
 800a32c:	6921      	ldr	r1, [r4, #16]
 800a32e:	4650      	mov	r0, sl
 800a330:	f7ff fec6 	bl	800a0c0 <_free_r>
 800a334:	e7c7      	b.n	800a2c6 <__ssputs_r+0x46>
	...

0800a338 <_svfiprintf_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	4698      	mov	r8, r3
 800a33e:	898b      	ldrh	r3, [r1, #12]
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	b09d      	sub	sp, #116	; 0x74
 800a344:	4607      	mov	r7, r0
 800a346:	460d      	mov	r5, r1
 800a348:	4614      	mov	r4, r2
 800a34a:	d50e      	bpl.n	800a36a <_svfiprintf_r+0x32>
 800a34c:	690b      	ldr	r3, [r1, #16]
 800a34e:	b963      	cbnz	r3, 800a36a <_svfiprintf_r+0x32>
 800a350:	2140      	movs	r1, #64	; 0x40
 800a352:	f7ff ff21 	bl	800a198 <_malloc_r>
 800a356:	6028      	str	r0, [r5, #0]
 800a358:	6128      	str	r0, [r5, #16]
 800a35a:	b920      	cbnz	r0, 800a366 <_svfiprintf_r+0x2e>
 800a35c:	230c      	movs	r3, #12
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	e0d1      	b.n	800a50a <_svfiprintf_r+0x1d2>
 800a366:	2340      	movs	r3, #64	; 0x40
 800a368:	616b      	str	r3, [r5, #20]
 800a36a:	2300      	movs	r3, #0
 800a36c:	9309      	str	r3, [sp, #36]	; 0x24
 800a36e:	2320      	movs	r3, #32
 800a370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a374:	f8cd 800c 	str.w	r8, [sp, #12]
 800a378:	2330      	movs	r3, #48	; 0x30
 800a37a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a524 <_svfiprintf_r+0x1ec>
 800a37e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a382:	f04f 0901 	mov.w	r9, #1
 800a386:	4623      	mov	r3, r4
 800a388:	469a      	mov	sl, r3
 800a38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38e:	b10a      	cbz	r2, 800a394 <_svfiprintf_r+0x5c>
 800a390:	2a25      	cmp	r2, #37	; 0x25
 800a392:	d1f9      	bne.n	800a388 <_svfiprintf_r+0x50>
 800a394:	ebba 0b04 	subs.w	fp, sl, r4
 800a398:	d00b      	beq.n	800a3b2 <_svfiprintf_r+0x7a>
 800a39a:	465b      	mov	r3, fp
 800a39c:	4622      	mov	r2, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff ff6d 	bl	800a280 <__ssputs_r>
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f000 80aa 	beq.w	800a500 <_svfiprintf_r+0x1c8>
 800a3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ae:	445a      	add	r2, fp
 800a3b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 80a2 	beq.w	800a500 <_svfiprintf_r+0x1c8>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c6:	f10a 0a01 	add.w	sl, sl, #1
 800a3ca:	9304      	str	r3, [sp, #16]
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	2205      	movs	r2, #5
 800a3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3dc:	4851      	ldr	r0, [pc, #324]	; (800a524 <_svfiprintf_r+0x1ec>)
 800a3de:	f7f5 feff 	bl	80001e0 <memchr>
 800a3e2:	9a04      	ldr	r2, [sp, #16]
 800a3e4:	b9d8      	cbnz	r0, 800a41e <_svfiprintf_r+0xe6>
 800a3e6:	06d0      	lsls	r0, r2, #27
 800a3e8:	bf44      	itt	mi
 800a3ea:	2320      	movmi	r3, #32
 800a3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f0:	0711      	lsls	r1, r2, #28
 800a3f2:	bf44      	itt	mi
 800a3f4:	232b      	movmi	r3, #43	; 0x2b
 800a3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a400:	d015      	beq.n	800a42e <_svfiprintf_r+0xf6>
 800a402:	9a07      	ldr	r2, [sp, #28]
 800a404:	4654      	mov	r4, sl
 800a406:	2000      	movs	r0, #0
 800a408:	f04f 0c0a 	mov.w	ip, #10
 800a40c:	4621      	mov	r1, r4
 800a40e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a412:	3b30      	subs	r3, #48	; 0x30
 800a414:	2b09      	cmp	r3, #9
 800a416:	d94e      	bls.n	800a4b6 <_svfiprintf_r+0x17e>
 800a418:	b1b0      	cbz	r0, 800a448 <_svfiprintf_r+0x110>
 800a41a:	9207      	str	r2, [sp, #28]
 800a41c:	e014      	b.n	800a448 <_svfiprintf_r+0x110>
 800a41e:	eba0 0308 	sub.w	r3, r0, r8
 800a422:	fa09 f303 	lsl.w	r3, r9, r3
 800a426:	4313      	orrs	r3, r2
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	46a2      	mov	sl, r4
 800a42c:	e7d2      	b.n	800a3d4 <_svfiprintf_r+0x9c>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	1d19      	adds	r1, r3, #4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	9103      	str	r1, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	bfbb      	ittet	lt
 800a43a:	425b      	neglt	r3, r3
 800a43c:	f042 0202 	orrlt.w	r2, r2, #2
 800a440:	9307      	strge	r3, [sp, #28]
 800a442:	9307      	strlt	r3, [sp, #28]
 800a444:	bfb8      	it	lt
 800a446:	9204      	strlt	r2, [sp, #16]
 800a448:	7823      	ldrb	r3, [r4, #0]
 800a44a:	2b2e      	cmp	r3, #46	; 0x2e
 800a44c:	d10c      	bne.n	800a468 <_svfiprintf_r+0x130>
 800a44e:	7863      	ldrb	r3, [r4, #1]
 800a450:	2b2a      	cmp	r3, #42	; 0x2a
 800a452:	d135      	bne.n	800a4c0 <_svfiprintf_r+0x188>
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	1d1a      	adds	r2, r3, #4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	9203      	str	r2, [sp, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bfb8      	it	lt
 800a460:	f04f 33ff 	movlt.w	r3, #4294967295
 800a464:	3402      	adds	r4, #2
 800a466:	9305      	str	r3, [sp, #20]
 800a468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a534 <_svfiprintf_r+0x1fc>
 800a46c:	7821      	ldrb	r1, [r4, #0]
 800a46e:	2203      	movs	r2, #3
 800a470:	4650      	mov	r0, sl
 800a472:	f7f5 feb5 	bl	80001e0 <memchr>
 800a476:	b140      	cbz	r0, 800a48a <_svfiprintf_r+0x152>
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	eba0 000a 	sub.w	r0, r0, sl
 800a47e:	fa03 f000 	lsl.w	r0, r3, r0
 800a482:	9b04      	ldr	r3, [sp, #16]
 800a484:	4303      	orrs	r3, r0
 800a486:	3401      	adds	r4, #1
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4826      	ldr	r0, [pc, #152]	; (800a528 <_svfiprintf_r+0x1f0>)
 800a490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a494:	2206      	movs	r2, #6
 800a496:	f7f5 fea3 	bl	80001e0 <memchr>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d038      	beq.n	800a510 <_svfiprintf_r+0x1d8>
 800a49e:	4b23      	ldr	r3, [pc, #140]	; (800a52c <_svfiprintf_r+0x1f4>)
 800a4a0:	bb1b      	cbnz	r3, 800a4ea <_svfiprintf_r+0x1b2>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	3307      	adds	r3, #7
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	4433      	add	r3, r6
 800a4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b4:	e767      	b.n	800a386 <_svfiprintf_r+0x4e>
 800a4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2001      	movs	r0, #1
 800a4be:	e7a5      	b.n	800a40c <_svfiprintf_r+0xd4>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f04f 0c0a 	mov.w	ip, #10
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d2:	3a30      	subs	r2, #48	; 0x30
 800a4d4:	2a09      	cmp	r2, #9
 800a4d6:	d903      	bls.n	800a4e0 <_svfiprintf_r+0x1a8>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0c5      	beq.n	800a468 <_svfiprintf_r+0x130>
 800a4dc:	9105      	str	r1, [sp, #20]
 800a4de:	e7c3      	b.n	800a468 <_svfiprintf_r+0x130>
 800a4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7f0      	b.n	800a4cc <_svfiprintf_r+0x194>
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <_svfiprintf_r+0x1f8>)
 800a4f2:	a904      	add	r1, sp, #16
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f7fb fdff 	bl	80060f8 <_printf_float>
 800a4fa:	1c42      	adds	r2, r0, #1
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	d1d6      	bne.n	800a4ae <_svfiprintf_r+0x176>
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	065b      	lsls	r3, r3, #25
 800a504:	f53f af2c 	bmi.w	800a360 <_svfiprintf_r+0x28>
 800a508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a50a:	b01d      	add	sp, #116	; 0x74
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	ab03      	add	r3, sp, #12
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	462a      	mov	r2, r5
 800a516:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_svfiprintf_r+0x1f8>)
 800a518:	a904      	add	r1, sp, #16
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7fc f890 	bl	8006640 <_printf_i>
 800a520:	e7eb      	b.n	800a4fa <_svfiprintf_r+0x1c2>
 800a522:	bf00      	nop
 800a524:	0800bc94 	.word	0x0800bc94
 800a528:	0800bc9e 	.word	0x0800bc9e
 800a52c:	080060f9 	.word	0x080060f9
 800a530:	0800a281 	.word	0x0800a281
 800a534:	0800bc9a 	.word	0x0800bc9a

0800a538 <_sungetc_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	1c4b      	adds	r3, r1, #1
 800a53c:	4614      	mov	r4, r2
 800a53e:	d103      	bne.n	800a548 <_sungetc_r+0x10>
 800a540:	f04f 35ff 	mov.w	r5, #4294967295
 800a544:	4628      	mov	r0, r5
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	8993      	ldrh	r3, [r2, #12]
 800a54a:	f023 0320 	bic.w	r3, r3, #32
 800a54e:	8193      	strh	r3, [r2, #12]
 800a550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a552:	6852      	ldr	r2, [r2, #4]
 800a554:	b2cd      	uxtb	r5, r1
 800a556:	b18b      	cbz	r3, 800a57c <_sungetc_r+0x44>
 800a558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a55a:	4293      	cmp	r3, r2
 800a55c:	dd08      	ble.n	800a570 <_sungetc_r+0x38>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	1e5a      	subs	r2, r3, #1
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	3301      	adds	r3, #1
 800a56c:	6063      	str	r3, [r4, #4]
 800a56e:	e7e9      	b.n	800a544 <_sungetc_r+0xc>
 800a570:	4621      	mov	r1, r4
 800a572:	f000 fd7d 	bl	800b070 <__submore>
 800a576:	2800      	cmp	r0, #0
 800a578:	d0f1      	beq.n	800a55e <_sungetc_r+0x26>
 800a57a:	e7e1      	b.n	800a540 <_sungetc_r+0x8>
 800a57c:	6921      	ldr	r1, [r4, #16]
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	b151      	cbz	r1, 800a598 <_sungetc_r+0x60>
 800a582:	4299      	cmp	r1, r3
 800a584:	d208      	bcs.n	800a598 <_sungetc_r+0x60>
 800a586:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a58a:	42a9      	cmp	r1, r5
 800a58c:	d104      	bne.n	800a598 <_sungetc_r+0x60>
 800a58e:	3b01      	subs	r3, #1
 800a590:	3201      	adds	r2, #1
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	6062      	str	r2, [r4, #4]
 800a596:	e7d5      	b.n	800a544 <_sungetc_r+0xc>
 800a598:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e7dc      	b.n	800a56c <_sungetc_r+0x34>

0800a5b2 <__ssrefill_r>:
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a5b8:	b169      	cbz	r1, 800a5d6 <__ssrefill_r+0x24>
 800a5ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	d001      	beq.n	800a5c6 <__ssrefill_r+0x14>
 800a5c2:	f7ff fd7d 	bl	800a0c0 <_free_r>
 800a5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c8:	6063      	str	r3, [r4, #4]
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ce:	b113      	cbz	r3, 800a5d6 <__ssrefill_r+0x24>
 800a5d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	6063      	str	r3, [r4, #4]
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f043 0320 	orr.w	r3, r3, #32
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	e7f3      	b.n	800a5d4 <__ssrefill_r+0x22>

0800a5ec <__ssvfiscanf_r>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a5fc:	49a6      	ldr	r1, [pc, #664]	; (800a898 <__ssvfiscanf_r+0x2ac>)
 800a5fe:	91a0      	str	r1, [sp, #640]	; 0x280
 800a600:	f10d 0804 	add.w	r8, sp, #4
 800a604:	49a5      	ldr	r1, [pc, #660]	; (800a89c <__ssvfiscanf_r+0x2b0>)
 800a606:	4fa6      	ldr	r7, [pc, #664]	; (800a8a0 <__ssvfiscanf_r+0x2b4>)
 800a608:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a8a4 <__ssvfiscanf_r+0x2b8>
 800a60c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a610:	4606      	mov	r6, r0
 800a612:	91a1      	str	r1, [sp, #644]	; 0x284
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 815a 	beq.w	800a8d2 <__ssvfiscanf_r+0x2e6>
 800a61e:	5dd9      	ldrb	r1, [r3, r7]
 800a620:	f011 0108 	ands.w	r1, r1, #8
 800a624:	f102 0501 	add.w	r5, r2, #1
 800a628:	d019      	beq.n	800a65e <__ssvfiscanf_r+0x72>
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dd0f      	ble.n	800a650 <__ssvfiscanf_r+0x64>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	781a      	ldrb	r2, [r3, #0]
 800a634:	5cba      	ldrb	r2, [r7, r2]
 800a636:	0712      	lsls	r2, r2, #28
 800a638:	d401      	bmi.n	800a63e <__ssvfiscanf_r+0x52>
 800a63a:	462a      	mov	r2, r5
 800a63c:	e7eb      	b.n	800a616 <__ssvfiscanf_r+0x2a>
 800a63e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a640:	3201      	adds	r2, #1
 800a642:	9245      	str	r2, [sp, #276]	; 0x114
 800a644:	6862      	ldr	r2, [r4, #4]
 800a646:	3301      	adds	r3, #1
 800a648:	3a01      	subs	r2, #1
 800a64a:	6062      	str	r2, [r4, #4]
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	e7ec      	b.n	800a62a <__ssvfiscanf_r+0x3e>
 800a650:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a652:	4621      	mov	r1, r4
 800a654:	4630      	mov	r0, r6
 800a656:	4798      	blx	r3
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0e9      	beq.n	800a630 <__ssvfiscanf_r+0x44>
 800a65c:	e7ed      	b.n	800a63a <__ssvfiscanf_r+0x4e>
 800a65e:	2b25      	cmp	r3, #37	; 0x25
 800a660:	d012      	beq.n	800a688 <__ssvfiscanf_r+0x9c>
 800a662:	469a      	mov	sl, r3
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f340 8091 	ble.w	800a78e <__ssvfiscanf_r+0x1a2>
 800a66c:	6822      	ldr	r2, [r4, #0]
 800a66e:	7813      	ldrb	r3, [r2, #0]
 800a670:	4553      	cmp	r3, sl
 800a672:	f040 812e 	bne.w	800a8d2 <__ssvfiscanf_r+0x2e6>
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	6063      	str	r3, [r4, #4]
 800a67c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a67e:	3201      	adds	r2, #1
 800a680:	3301      	adds	r3, #1
 800a682:	6022      	str	r2, [r4, #0]
 800a684:	9345      	str	r3, [sp, #276]	; 0x114
 800a686:	e7d8      	b.n	800a63a <__ssvfiscanf_r+0x4e>
 800a688:	9141      	str	r1, [sp, #260]	; 0x104
 800a68a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a68c:	7853      	ldrb	r3, [r2, #1]
 800a68e:	2b2a      	cmp	r3, #42	; 0x2a
 800a690:	bf02      	ittt	eq
 800a692:	2310      	moveq	r3, #16
 800a694:	1c95      	addeq	r5, r2, #2
 800a696:	9341      	streq	r3, [sp, #260]	; 0x104
 800a698:	220a      	movs	r2, #10
 800a69a:	46aa      	mov	sl, r5
 800a69c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a6a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	d91d      	bls.n	800a6e4 <__ssvfiscanf_r+0xf8>
 800a6a8:	487e      	ldr	r0, [pc, #504]	; (800a8a4 <__ssvfiscanf_r+0x2b8>)
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	f7f5 fd98 	bl	80001e0 <memchr>
 800a6b0:	b140      	cbz	r0, 800a6c4 <__ssvfiscanf_r+0xd8>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	eba0 0009 	sub.w	r0, r0, r9
 800a6b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6be:	4318      	orrs	r0, r3
 800a6c0:	9041      	str	r0, [sp, #260]	; 0x104
 800a6c2:	4655      	mov	r5, sl
 800a6c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6c8:	2b78      	cmp	r3, #120	; 0x78
 800a6ca:	d806      	bhi.n	800a6da <__ssvfiscanf_r+0xee>
 800a6cc:	2b57      	cmp	r3, #87	; 0x57
 800a6ce:	d810      	bhi.n	800a6f2 <__ssvfiscanf_r+0x106>
 800a6d0:	2b25      	cmp	r3, #37	; 0x25
 800a6d2:	d0c6      	beq.n	800a662 <__ssvfiscanf_r+0x76>
 800a6d4:	d856      	bhi.n	800a784 <__ssvfiscanf_r+0x198>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d064      	beq.n	800a7a4 <__ssvfiscanf_r+0x1b8>
 800a6da:	2303      	movs	r3, #3
 800a6dc:	9347      	str	r3, [sp, #284]	; 0x11c
 800a6de:	230a      	movs	r3, #10
 800a6e0:	9342      	str	r3, [sp, #264]	; 0x108
 800a6e2:	e071      	b.n	800a7c8 <__ssvfiscanf_r+0x1dc>
 800a6e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a6e6:	fb02 1103 	mla	r1, r2, r3, r1
 800a6ea:	3930      	subs	r1, #48	; 0x30
 800a6ec:	9143      	str	r1, [sp, #268]	; 0x10c
 800a6ee:	4655      	mov	r5, sl
 800a6f0:	e7d3      	b.n	800a69a <__ssvfiscanf_r+0xae>
 800a6f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a6f6:	2a20      	cmp	r2, #32
 800a6f8:	d8ef      	bhi.n	800a6da <__ssvfiscanf_r+0xee>
 800a6fa:	a101      	add	r1, pc, #4	; (adr r1, 800a700 <__ssvfiscanf_r+0x114>)
 800a6fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a700:	0800a7b3 	.word	0x0800a7b3
 800a704:	0800a6db 	.word	0x0800a6db
 800a708:	0800a6db 	.word	0x0800a6db
 800a70c:	0800a811 	.word	0x0800a811
 800a710:	0800a6db 	.word	0x0800a6db
 800a714:	0800a6db 	.word	0x0800a6db
 800a718:	0800a6db 	.word	0x0800a6db
 800a71c:	0800a6db 	.word	0x0800a6db
 800a720:	0800a6db 	.word	0x0800a6db
 800a724:	0800a6db 	.word	0x0800a6db
 800a728:	0800a6db 	.word	0x0800a6db
 800a72c:	0800a827 	.word	0x0800a827
 800a730:	0800a7fd 	.word	0x0800a7fd
 800a734:	0800a78b 	.word	0x0800a78b
 800a738:	0800a78b 	.word	0x0800a78b
 800a73c:	0800a78b 	.word	0x0800a78b
 800a740:	0800a6db 	.word	0x0800a6db
 800a744:	0800a801 	.word	0x0800a801
 800a748:	0800a6db 	.word	0x0800a6db
 800a74c:	0800a6db 	.word	0x0800a6db
 800a750:	0800a6db 	.word	0x0800a6db
 800a754:	0800a6db 	.word	0x0800a6db
 800a758:	0800a837 	.word	0x0800a837
 800a75c:	0800a809 	.word	0x0800a809
 800a760:	0800a7ab 	.word	0x0800a7ab
 800a764:	0800a6db 	.word	0x0800a6db
 800a768:	0800a6db 	.word	0x0800a6db
 800a76c:	0800a833 	.word	0x0800a833
 800a770:	0800a6db 	.word	0x0800a6db
 800a774:	0800a7fd 	.word	0x0800a7fd
 800a778:	0800a6db 	.word	0x0800a6db
 800a77c:	0800a6db 	.word	0x0800a6db
 800a780:	0800a7b3 	.word	0x0800a7b3
 800a784:	3b45      	subs	r3, #69	; 0x45
 800a786:	2b02      	cmp	r3, #2
 800a788:	d8a7      	bhi.n	800a6da <__ssvfiscanf_r+0xee>
 800a78a:	2305      	movs	r3, #5
 800a78c:	e01b      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a78e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a790:	4621      	mov	r1, r4
 800a792:	4630      	mov	r0, r6
 800a794:	4798      	blx	r3
 800a796:	2800      	cmp	r0, #0
 800a798:	f43f af68 	beq.w	800a66c <__ssvfiscanf_r+0x80>
 800a79c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f040 808d 	bne.w	800a8be <__ssvfiscanf_r+0x2d2>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	e08f      	b.n	800a8ca <__ssvfiscanf_r+0x2de>
 800a7aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7ac:	f042 0220 	orr.w	r2, r2, #32
 800a7b0:	9241      	str	r2, [sp, #260]	; 0x104
 800a7b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7b8:	9241      	str	r2, [sp, #260]	; 0x104
 800a7ba:	2210      	movs	r2, #16
 800a7bc:	2b6f      	cmp	r3, #111	; 0x6f
 800a7be:	9242      	str	r2, [sp, #264]	; 0x108
 800a7c0:	bf34      	ite	cc
 800a7c2:	2303      	movcc	r3, #3
 800a7c4:	2304      	movcs	r3, #4
 800a7c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd42      	ble.n	800a854 <__ssvfiscanf_r+0x268>
 800a7ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7d0:	0659      	lsls	r1, r3, #25
 800a7d2:	d404      	bmi.n	800a7de <__ssvfiscanf_r+0x1f2>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	781a      	ldrb	r2, [r3, #0]
 800a7d8:	5cba      	ldrb	r2, [r7, r2]
 800a7da:	0712      	lsls	r2, r2, #28
 800a7dc:	d441      	bmi.n	800a862 <__ssvfiscanf_r+0x276>
 800a7de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	dc50      	bgt.n	800a886 <__ssvfiscanf_r+0x29a>
 800a7e4:	466b      	mov	r3, sp
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	a941      	add	r1, sp, #260	; 0x104
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f9d0 	bl	800ab90 <_scanf_chars>
 800a7f0:	2801      	cmp	r0, #1
 800a7f2:	d06e      	beq.n	800a8d2 <__ssvfiscanf_r+0x2e6>
 800a7f4:	2802      	cmp	r0, #2
 800a7f6:	f47f af20 	bne.w	800a63a <__ssvfiscanf_r+0x4e>
 800a7fa:	e7cf      	b.n	800a79c <__ssvfiscanf_r+0x1b0>
 800a7fc:	220a      	movs	r2, #10
 800a7fe:	e7dd      	b.n	800a7bc <__ssvfiscanf_r+0x1d0>
 800a800:	2300      	movs	r3, #0
 800a802:	9342      	str	r3, [sp, #264]	; 0x108
 800a804:	2303      	movs	r3, #3
 800a806:	e7de      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a808:	2308      	movs	r3, #8
 800a80a:	9342      	str	r3, [sp, #264]	; 0x108
 800a80c:	2304      	movs	r3, #4
 800a80e:	e7da      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a810:	4629      	mov	r1, r5
 800a812:	4640      	mov	r0, r8
 800a814:	f000 fb80 	bl	800af18 <__sccl>
 800a818:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81e:	9341      	str	r3, [sp, #260]	; 0x104
 800a820:	4605      	mov	r5, r0
 800a822:	2301      	movs	r3, #1
 800a824:	e7cf      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82c:	9341      	str	r3, [sp, #260]	; 0x104
 800a82e:	2300      	movs	r3, #0
 800a830:	e7c9      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a832:	2302      	movs	r3, #2
 800a834:	e7c7      	b.n	800a7c6 <__ssvfiscanf_r+0x1da>
 800a836:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a838:	06c3      	lsls	r3, r0, #27
 800a83a:	f53f aefe 	bmi.w	800a63a <__ssvfiscanf_r+0x4e>
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a842:	1d19      	adds	r1, r3, #4
 800a844:	9100      	str	r1, [sp, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f010 0f01 	tst.w	r0, #1
 800a84c:	bf14      	ite	ne
 800a84e:	801a      	strhne	r2, [r3, #0]
 800a850:	601a      	streq	r2, [r3, #0]
 800a852:	e6f2      	b.n	800a63a <__ssvfiscanf_r+0x4e>
 800a854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a856:	4621      	mov	r1, r4
 800a858:	4630      	mov	r0, r6
 800a85a:	4798      	blx	r3
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d0b6      	beq.n	800a7ce <__ssvfiscanf_r+0x1e2>
 800a860:	e79c      	b.n	800a79c <__ssvfiscanf_r+0x1b0>
 800a862:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a864:	3201      	adds	r2, #1
 800a866:	9245      	str	r2, [sp, #276]	; 0x114
 800a868:	6862      	ldr	r2, [r4, #4]
 800a86a:	3a01      	subs	r2, #1
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	6062      	str	r2, [r4, #4]
 800a870:	dd02      	ble.n	800a878 <__ssvfiscanf_r+0x28c>
 800a872:	3301      	adds	r3, #1
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	e7ad      	b.n	800a7d4 <__ssvfiscanf_r+0x1e8>
 800a878:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a87a:	4621      	mov	r1, r4
 800a87c:	4630      	mov	r0, r6
 800a87e:	4798      	blx	r3
 800a880:	2800      	cmp	r0, #0
 800a882:	d0a7      	beq.n	800a7d4 <__ssvfiscanf_r+0x1e8>
 800a884:	e78a      	b.n	800a79c <__ssvfiscanf_r+0x1b0>
 800a886:	2b04      	cmp	r3, #4
 800a888:	dc0e      	bgt.n	800a8a8 <__ssvfiscanf_r+0x2bc>
 800a88a:	466b      	mov	r3, sp
 800a88c:	4622      	mov	r2, r4
 800a88e:	a941      	add	r1, sp, #260	; 0x104
 800a890:	4630      	mov	r0, r6
 800a892:	f000 f9d7 	bl	800ac44 <_scanf_i>
 800a896:	e7ab      	b.n	800a7f0 <__ssvfiscanf_r+0x204>
 800a898:	0800a539 	.word	0x0800a539
 800a89c:	0800a5b3 	.word	0x0800a5b3
 800a8a0:	0800b8c9 	.word	0x0800b8c9
 800a8a4:	0800bc9a 	.word	0x0800bc9a
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <__ssvfiscanf_r+0x2ec>)
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f43f aec5 	beq.w	800a63a <__ssvfiscanf_r+0x4e>
 800a8b0:	466b      	mov	r3, sp
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	a941      	add	r1, sp, #260	; 0x104
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7fb ffe8 	bl	800688c <_scanf_float>
 800a8bc:	e798      	b.n	800a7f0 <__ssvfiscanf_r+0x204>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a8c4:	bf18      	it	ne
 800a8c6:	f04f 30ff 	movne.w	r0, #4294967295
 800a8ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a8d4:	e7f9      	b.n	800a8ca <__ssvfiscanf_r+0x2de>
 800a8d6:	bf00      	nop
 800a8d8:	0800688d 	.word	0x0800688d

0800a8dc <__sfputc_r>:
 800a8dc:	6893      	ldr	r3, [r2, #8]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	b410      	push	{r4}
 800a8e4:	6093      	str	r3, [r2, #8]
 800a8e6:	da08      	bge.n	800a8fa <__sfputc_r+0x1e>
 800a8e8:	6994      	ldr	r4, [r2, #24]
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	db01      	blt.n	800a8f2 <__sfputc_r+0x16>
 800a8ee:	290a      	cmp	r1, #10
 800a8f0:	d103      	bne.n	800a8fa <__sfputc_r+0x1e>
 800a8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f6:	f7fd b9df 	b.w	8007cb8 <__swbuf_r>
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	1c58      	adds	r0, r3, #1
 800a8fe:	6010      	str	r0, [r2, #0]
 800a900:	7019      	strb	r1, [r3, #0]
 800a902:	4608      	mov	r0, r1
 800a904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <__sfputs_r>:
 800a90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4614      	mov	r4, r2
 800a912:	18d5      	adds	r5, r2, r3
 800a914:	42ac      	cmp	r4, r5
 800a916:	d101      	bne.n	800a91c <__sfputs_r+0x12>
 800a918:	2000      	movs	r0, #0
 800a91a:	e007      	b.n	800a92c <__sfputs_r+0x22>
 800a91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a920:	463a      	mov	r2, r7
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff ffda 	bl	800a8dc <__sfputc_r>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d1f3      	bne.n	800a914 <__sfputs_r+0xa>
 800a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a930 <_vfiprintf_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	460d      	mov	r5, r1
 800a936:	b09d      	sub	sp, #116	; 0x74
 800a938:	4614      	mov	r4, r2
 800a93a:	4698      	mov	r8, r3
 800a93c:	4606      	mov	r6, r0
 800a93e:	b118      	cbz	r0, 800a948 <_vfiprintf_r+0x18>
 800a940:	6983      	ldr	r3, [r0, #24]
 800a942:	b90b      	cbnz	r3, 800a948 <_vfiprintf_r+0x18>
 800a944:	f7fe fa30 	bl	8008da8 <__sinit>
 800a948:	4b89      	ldr	r3, [pc, #548]	; (800ab70 <_vfiprintf_r+0x240>)
 800a94a:	429d      	cmp	r5, r3
 800a94c:	d11b      	bne.n	800a986 <_vfiprintf_r+0x56>
 800a94e:	6875      	ldr	r5, [r6, #4]
 800a950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a952:	07d9      	lsls	r1, r3, #31
 800a954:	d405      	bmi.n	800a962 <_vfiprintf_r+0x32>
 800a956:	89ab      	ldrh	r3, [r5, #12]
 800a958:	059a      	lsls	r2, r3, #22
 800a95a:	d402      	bmi.n	800a962 <_vfiprintf_r+0x32>
 800a95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a95e:	f7fe fe34 	bl	80095ca <__retarget_lock_acquire_recursive>
 800a962:	89ab      	ldrh	r3, [r5, #12]
 800a964:	071b      	lsls	r3, r3, #28
 800a966:	d501      	bpl.n	800a96c <_vfiprintf_r+0x3c>
 800a968:	692b      	ldr	r3, [r5, #16]
 800a96a:	b9eb      	cbnz	r3, 800a9a8 <_vfiprintf_r+0x78>
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7fd fa06 	bl	8007d80 <__swsetup_r>
 800a974:	b1c0      	cbz	r0, 800a9a8 <_vfiprintf_r+0x78>
 800a976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a978:	07dc      	lsls	r4, r3, #31
 800a97a:	d50e      	bpl.n	800a99a <_vfiprintf_r+0x6a>
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	b01d      	add	sp, #116	; 0x74
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	4b7b      	ldr	r3, [pc, #492]	; (800ab74 <_vfiprintf_r+0x244>)
 800a988:	429d      	cmp	r5, r3
 800a98a:	d101      	bne.n	800a990 <_vfiprintf_r+0x60>
 800a98c:	68b5      	ldr	r5, [r6, #8]
 800a98e:	e7df      	b.n	800a950 <_vfiprintf_r+0x20>
 800a990:	4b79      	ldr	r3, [pc, #484]	; (800ab78 <_vfiprintf_r+0x248>)
 800a992:	429d      	cmp	r5, r3
 800a994:	bf08      	it	eq
 800a996:	68f5      	ldreq	r5, [r6, #12]
 800a998:	e7da      	b.n	800a950 <_vfiprintf_r+0x20>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	0598      	lsls	r0, r3, #22
 800a99e:	d4ed      	bmi.n	800a97c <_vfiprintf_r+0x4c>
 800a9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a2:	f7fe fe13 	bl	80095cc <__retarget_lock_release_recursive>
 800a9a6:	e7e9      	b.n	800a97c <_vfiprintf_r+0x4c>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b6:	2330      	movs	r3, #48	; 0x30
 800a9b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab7c <_vfiprintf_r+0x24c>
 800a9bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9c0:	f04f 0901 	mov.w	r9, #1
 800a9c4:	4623      	mov	r3, r4
 800a9c6:	469a      	mov	sl, r3
 800a9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9cc:	b10a      	cbz	r2, 800a9d2 <_vfiprintf_r+0xa2>
 800a9ce:	2a25      	cmp	r2, #37	; 0x25
 800a9d0:	d1f9      	bne.n	800a9c6 <_vfiprintf_r+0x96>
 800a9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d6:	d00b      	beq.n	800a9f0 <_vfiprintf_r+0xc0>
 800a9d8:	465b      	mov	r3, fp
 800a9da:	4622      	mov	r2, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7ff ff93 	bl	800a90a <__sfputs_r>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f000 80aa 	beq.w	800ab3e <_vfiprintf_r+0x20e>
 800a9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ec:	445a      	add	r2, fp
 800a9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 80a2 	beq.w	800ab3e <_vfiprintf_r+0x20e>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa04:	f10a 0a01 	add.w	sl, sl, #1
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	9307      	str	r3, [sp, #28]
 800aa0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa10:	931a      	str	r3, [sp, #104]	; 0x68
 800aa12:	4654      	mov	r4, sl
 800aa14:	2205      	movs	r2, #5
 800aa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1a:	4858      	ldr	r0, [pc, #352]	; (800ab7c <_vfiprintf_r+0x24c>)
 800aa1c:	f7f5 fbe0 	bl	80001e0 <memchr>
 800aa20:	9a04      	ldr	r2, [sp, #16]
 800aa22:	b9d8      	cbnz	r0, 800aa5c <_vfiprintf_r+0x12c>
 800aa24:	06d1      	lsls	r1, r2, #27
 800aa26:	bf44      	itt	mi
 800aa28:	2320      	movmi	r3, #32
 800aa2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2e:	0713      	lsls	r3, r2, #28
 800aa30:	bf44      	itt	mi
 800aa32:	232b      	movmi	r3, #43	; 0x2b
 800aa34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa38:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3e:	d015      	beq.n	800aa6c <_vfiprintf_r+0x13c>
 800aa40:	9a07      	ldr	r2, [sp, #28]
 800aa42:	4654      	mov	r4, sl
 800aa44:	2000      	movs	r0, #0
 800aa46:	f04f 0c0a 	mov.w	ip, #10
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa50:	3b30      	subs	r3, #48	; 0x30
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d94e      	bls.n	800aaf4 <_vfiprintf_r+0x1c4>
 800aa56:	b1b0      	cbz	r0, 800aa86 <_vfiprintf_r+0x156>
 800aa58:	9207      	str	r2, [sp, #28]
 800aa5a:	e014      	b.n	800aa86 <_vfiprintf_r+0x156>
 800aa5c:	eba0 0308 	sub.w	r3, r0, r8
 800aa60:	fa09 f303 	lsl.w	r3, r9, r3
 800aa64:	4313      	orrs	r3, r2
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	46a2      	mov	sl, r4
 800aa6a:	e7d2      	b.n	800aa12 <_vfiprintf_r+0xe2>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	1d19      	adds	r1, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	9103      	str	r1, [sp, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfbb      	ittet	lt
 800aa78:	425b      	neglt	r3, r3
 800aa7a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa7e:	9307      	strge	r3, [sp, #28]
 800aa80:	9307      	strlt	r3, [sp, #28]
 800aa82:	bfb8      	it	lt
 800aa84:	9204      	strlt	r2, [sp, #16]
 800aa86:	7823      	ldrb	r3, [r4, #0]
 800aa88:	2b2e      	cmp	r3, #46	; 0x2e
 800aa8a:	d10c      	bne.n	800aaa6 <_vfiprintf_r+0x176>
 800aa8c:	7863      	ldrb	r3, [r4, #1]
 800aa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa90:	d135      	bne.n	800aafe <_vfiprintf_r+0x1ce>
 800aa92:	9b03      	ldr	r3, [sp, #12]
 800aa94:	1d1a      	adds	r2, r3, #4
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	9203      	str	r2, [sp, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	bfb8      	it	lt
 800aa9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaa2:	3402      	adds	r4, #2
 800aaa4:	9305      	str	r3, [sp, #20]
 800aaa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab8c <_vfiprintf_r+0x25c>
 800aaaa:	7821      	ldrb	r1, [r4, #0]
 800aaac:	2203      	movs	r2, #3
 800aaae:	4650      	mov	r0, sl
 800aab0:	f7f5 fb96 	bl	80001e0 <memchr>
 800aab4:	b140      	cbz	r0, 800aac8 <_vfiprintf_r+0x198>
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	eba0 000a 	sub.w	r0, r0, sl
 800aabc:	fa03 f000 	lsl.w	r0, r3, r0
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	4303      	orrs	r3, r0
 800aac4:	3401      	adds	r4, #1
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	482c      	ldr	r0, [pc, #176]	; (800ab80 <_vfiprintf_r+0x250>)
 800aace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aad2:	2206      	movs	r2, #6
 800aad4:	f7f5 fb84 	bl	80001e0 <memchr>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d03f      	beq.n	800ab5c <_vfiprintf_r+0x22c>
 800aadc:	4b29      	ldr	r3, [pc, #164]	; (800ab84 <_vfiprintf_r+0x254>)
 800aade:	bb1b      	cbnz	r3, 800ab28 <_vfiprintf_r+0x1f8>
 800aae0:	9b03      	ldr	r3, [sp, #12]
 800aae2:	3307      	adds	r3, #7
 800aae4:	f023 0307 	bic.w	r3, r3, #7
 800aae8:	3308      	adds	r3, #8
 800aaea:	9303      	str	r3, [sp, #12]
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	443b      	add	r3, r7
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf2:	e767      	b.n	800a9c4 <_vfiprintf_r+0x94>
 800aaf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf8:	460c      	mov	r4, r1
 800aafa:	2001      	movs	r0, #1
 800aafc:	e7a5      	b.n	800aa4a <_vfiprintf_r+0x11a>
 800aafe:	2300      	movs	r3, #0
 800ab00:	3401      	adds	r4, #1
 800ab02:	9305      	str	r3, [sp, #20]
 800ab04:	4619      	mov	r1, r3
 800ab06:	f04f 0c0a 	mov.w	ip, #10
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab10:	3a30      	subs	r2, #48	; 0x30
 800ab12:	2a09      	cmp	r2, #9
 800ab14:	d903      	bls.n	800ab1e <_vfiprintf_r+0x1ee>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0c5      	beq.n	800aaa6 <_vfiprintf_r+0x176>
 800ab1a:	9105      	str	r1, [sp, #20]
 800ab1c:	e7c3      	b.n	800aaa6 <_vfiprintf_r+0x176>
 800ab1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab22:	4604      	mov	r4, r0
 800ab24:	2301      	movs	r3, #1
 800ab26:	e7f0      	b.n	800ab0a <_vfiprintf_r+0x1da>
 800ab28:	ab03      	add	r3, sp, #12
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <_vfiprintf_r+0x258>)
 800ab30:	a904      	add	r1, sp, #16
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7fb fae0 	bl	80060f8 <_printf_float>
 800ab38:	4607      	mov	r7, r0
 800ab3a:	1c78      	adds	r0, r7, #1
 800ab3c:	d1d6      	bne.n	800aaec <_vfiprintf_r+0x1bc>
 800ab3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab40:	07d9      	lsls	r1, r3, #31
 800ab42:	d405      	bmi.n	800ab50 <_vfiprintf_r+0x220>
 800ab44:	89ab      	ldrh	r3, [r5, #12]
 800ab46:	059a      	lsls	r2, r3, #22
 800ab48:	d402      	bmi.n	800ab50 <_vfiprintf_r+0x220>
 800ab4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab4c:	f7fe fd3e 	bl	80095cc <__retarget_lock_release_recursive>
 800ab50:	89ab      	ldrh	r3, [r5, #12]
 800ab52:	065b      	lsls	r3, r3, #25
 800ab54:	f53f af12 	bmi.w	800a97c <_vfiprintf_r+0x4c>
 800ab58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab5a:	e711      	b.n	800a980 <_vfiprintf_r+0x50>
 800ab5c:	ab03      	add	r3, sp, #12
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	462a      	mov	r2, r5
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <_vfiprintf_r+0x258>)
 800ab64:	a904      	add	r1, sp, #16
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7fb fd6a 	bl	8006640 <_printf_i>
 800ab6c:	e7e4      	b.n	800ab38 <_vfiprintf_r+0x208>
 800ab6e:	bf00      	nop
 800ab70:	0800ba7c 	.word	0x0800ba7c
 800ab74:	0800ba9c 	.word	0x0800ba9c
 800ab78:	0800ba5c 	.word	0x0800ba5c
 800ab7c:	0800bc94 	.word	0x0800bc94
 800ab80:	0800bc9e 	.word	0x0800bc9e
 800ab84:	080060f9 	.word	0x080060f9
 800ab88:	0800a90b 	.word	0x0800a90b
 800ab8c:	0800bc9a 	.word	0x0800bc9a

0800ab90 <_scanf_chars>:
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	4615      	mov	r5, r2
 800ab96:	688a      	ldr	r2, [r1, #8]
 800ab98:	4680      	mov	r8, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b932      	cbnz	r2, 800abac <_scanf_chars+0x1c>
 800ab9e:	698a      	ldr	r2, [r1, #24]
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	bf0c      	ite	eq
 800aba4:	2201      	moveq	r2, #1
 800aba6:	f04f 32ff 	movne.w	r2, #4294967295
 800abaa:	608a      	str	r2, [r1, #8]
 800abac:	6822      	ldr	r2, [r4, #0]
 800abae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ac40 <_scanf_chars+0xb0>
 800abb2:	06d1      	lsls	r1, r2, #27
 800abb4:	bf5f      	itttt	pl
 800abb6:	681a      	ldrpl	r2, [r3, #0]
 800abb8:	1d11      	addpl	r1, r2, #4
 800abba:	6019      	strpl	r1, [r3, #0]
 800abbc:	6816      	ldrpl	r6, [r2, #0]
 800abbe:	2700      	movs	r7, #0
 800abc0:	69a0      	ldr	r0, [r4, #24]
 800abc2:	b188      	cbz	r0, 800abe8 <_scanf_chars+0x58>
 800abc4:	2801      	cmp	r0, #1
 800abc6:	d107      	bne.n	800abd8 <_scanf_chars+0x48>
 800abc8:	682a      	ldr	r2, [r5, #0]
 800abca:	7811      	ldrb	r1, [r2, #0]
 800abcc:	6962      	ldr	r2, [r4, #20]
 800abce:	5c52      	ldrb	r2, [r2, r1]
 800abd0:	b952      	cbnz	r2, 800abe8 <_scanf_chars+0x58>
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	d031      	beq.n	800ac3a <_scanf_chars+0xaa>
 800abd6:	e022      	b.n	800ac1e <_scanf_chars+0x8e>
 800abd8:	2802      	cmp	r0, #2
 800abda:	d120      	bne.n	800ac1e <_scanf_chars+0x8e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800abe4:	071b      	lsls	r3, r3, #28
 800abe6:	d41a      	bmi.n	800ac1e <_scanf_chars+0x8e>
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	06da      	lsls	r2, r3, #27
 800abec:	bf5e      	ittt	pl
 800abee:	682b      	ldrpl	r3, [r5, #0]
 800abf0:	781b      	ldrbpl	r3, [r3, #0]
 800abf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800abf6:	682a      	ldr	r2, [r5, #0]
 800abf8:	686b      	ldr	r3, [r5, #4]
 800abfa:	3201      	adds	r2, #1
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	68a2      	ldr	r2, [r4, #8]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	3a01      	subs	r2, #1
 800ac04:	606b      	str	r3, [r5, #4]
 800ac06:	3701      	adds	r7, #1
 800ac08:	60a2      	str	r2, [r4, #8]
 800ac0a:	b142      	cbz	r2, 800ac1e <_scanf_chars+0x8e>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dcd7      	bgt.n	800abc0 <_scanf_chars+0x30>
 800ac10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac14:	4629      	mov	r1, r5
 800ac16:	4640      	mov	r0, r8
 800ac18:	4798      	blx	r3
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d0d0      	beq.n	800abc0 <_scanf_chars+0x30>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	f013 0310 	ands.w	r3, r3, #16
 800ac24:	d105      	bne.n	800ac32 <_scanf_chars+0xa2>
 800ac26:	68e2      	ldr	r2, [r4, #12]
 800ac28:	3201      	adds	r2, #1
 800ac2a:	60e2      	str	r2, [r4, #12]
 800ac2c:	69a2      	ldr	r2, [r4, #24]
 800ac2e:	b102      	cbz	r2, 800ac32 <_scanf_chars+0xa2>
 800ac30:	7033      	strb	r3, [r6, #0]
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	443b      	add	r3, r7
 800ac36:	6123      	str	r3, [r4, #16]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3e:	bf00      	nop
 800ac40:	0800b8c9 	.word	0x0800b8c9

0800ac44 <_scanf_i>:
 800ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac48:	4698      	mov	r8, r3
 800ac4a:	4b76      	ldr	r3, [pc, #472]	; (800ae24 <_scanf_i+0x1e0>)
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4682      	mov	sl, r0
 800ac50:	4616      	mov	r6, r2
 800ac52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac56:	b087      	sub	sp, #28
 800ac58:	ab03      	add	r3, sp, #12
 800ac5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac5e:	4b72      	ldr	r3, [pc, #456]	; (800ae28 <_scanf_i+0x1e4>)
 800ac60:	69a1      	ldr	r1, [r4, #24]
 800ac62:	4a72      	ldr	r2, [pc, #456]	; (800ae2c <_scanf_i+0x1e8>)
 800ac64:	2903      	cmp	r1, #3
 800ac66:	bf18      	it	ne
 800ac68:	461a      	movne	r2, r3
 800ac6a:	68a3      	ldr	r3, [r4, #8]
 800ac6c:	9201      	str	r2, [sp, #4]
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac74:	bf88      	it	hi
 800ac76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac7a:	4627      	mov	r7, r4
 800ac7c:	bf82      	ittt	hi
 800ac7e:	eb03 0905 	addhi.w	r9, r3, r5
 800ac82:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac86:	60a3      	strhi	r3, [r4, #8]
 800ac88:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ac8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac90:	bf98      	it	ls
 800ac92:	f04f 0900 	movls.w	r9, #0
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	463d      	mov	r5, r7
 800ac9a:	f04f 0b00 	mov.w	fp, #0
 800ac9e:	6831      	ldr	r1, [r6, #0]
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	7809      	ldrb	r1, [r1, #0]
 800aca4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aca8:	2202      	movs	r2, #2
 800acaa:	f7f5 fa99 	bl	80001e0 <memchr>
 800acae:	b328      	cbz	r0, 800acfc <_scanf_i+0xb8>
 800acb0:	f1bb 0f01 	cmp.w	fp, #1
 800acb4:	d159      	bne.n	800ad6a <_scanf_i+0x126>
 800acb6:	6862      	ldr	r2, [r4, #4]
 800acb8:	b92a      	cbnz	r2, 800acc6 <_scanf_i+0x82>
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	2308      	movs	r3, #8
 800acbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	6022      	str	r2, [r4, #0]
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800accc:	6022      	str	r2, [r4, #0]
 800acce:	68a2      	ldr	r2, [r4, #8]
 800acd0:	1e51      	subs	r1, r2, #1
 800acd2:	60a1      	str	r1, [r4, #8]
 800acd4:	b192      	cbz	r2, 800acfc <_scanf_i+0xb8>
 800acd6:	6832      	ldr	r2, [r6, #0]
 800acd8:	1c51      	adds	r1, r2, #1
 800acda:	6031      	str	r1, [r6, #0]
 800acdc:	7812      	ldrb	r2, [r2, #0]
 800acde:	f805 2b01 	strb.w	r2, [r5], #1
 800ace2:	6872      	ldr	r2, [r6, #4]
 800ace4:	3a01      	subs	r2, #1
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	6072      	str	r2, [r6, #4]
 800acea:	dc07      	bgt.n	800acfc <_scanf_i+0xb8>
 800acec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800acf0:	4631      	mov	r1, r6
 800acf2:	4650      	mov	r0, sl
 800acf4:	4790      	blx	r2
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f040 8085 	bne.w	800ae06 <_scanf_i+0x1c2>
 800acfc:	f10b 0b01 	add.w	fp, fp, #1
 800ad00:	f1bb 0f03 	cmp.w	fp, #3
 800ad04:	d1cb      	bne.n	800ac9e <_scanf_i+0x5a>
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	b90b      	cbnz	r3, 800ad0e <_scanf_i+0xca>
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	4947      	ldr	r1, [pc, #284]	; (800ae30 <_scanf_i+0x1ec>)
 800ad12:	6960      	ldr	r0, [r4, #20]
 800ad14:	1ac9      	subs	r1, r1, r3
 800ad16:	f000 f8ff 	bl	800af18 <__sccl>
 800ad1a:	f04f 0b00 	mov.w	fp, #0
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	6822      	ldr	r2, [r4, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d03d      	beq.n	800ada2 <_scanf_i+0x15e>
 800ad26:	6831      	ldr	r1, [r6, #0]
 800ad28:	6960      	ldr	r0, [r4, #20]
 800ad2a:	f891 c000 	ldrb.w	ip, [r1]
 800ad2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d035      	beq.n	800ada2 <_scanf_i+0x15e>
 800ad36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ad3a:	d124      	bne.n	800ad86 <_scanf_i+0x142>
 800ad3c:	0510      	lsls	r0, r2, #20
 800ad3e:	d522      	bpl.n	800ad86 <_scanf_i+0x142>
 800ad40:	f10b 0b01 	add.w	fp, fp, #1
 800ad44:	f1b9 0f00 	cmp.w	r9, #0
 800ad48:	d003      	beq.n	800ad52 <_scanf_i+0x10e>
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad50:	60a3      	str	r3, [r4, #8]
 800ad52:	6873      	ldr	r3, [r6, #4]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	6073      	str	r3, [r6, #4]
 800ad5a:	dd1b      	ble.n	800ad94 <_scanf_i+0x150>
 800ad5c:	6833      	ldr	r3, [r6, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	e7d9      	b.n	800ad1e <_scanf_i+0xda>
 800ad6a:	f1bb 0f02 	cmp.w	fp, #2
 800ad6e:	d1ae      	bne.n	800acce <_scanf_i+0x8a>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad7a:	d1bf      	bne.n	800acfc <_scanf_i+0xb8>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	6063      	str	r3, [r4, #4]
 800ad80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad84:	e7a2      	b.n	800accc <_scanf_i+0x88>
 800ad86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad8a:	6022      	str	r2, [r4, #0]
 800ad8c:	780b      	ldrb	r3, [r1, #0]
 800ad8e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad92:	e7de      	b.n	800ad52 <_scanf_i+0x10e>
 800ad94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	4798      	blx	r3
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d0df      	beq.n	800ad62 <_scanf_i+0x11e>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	05db      	lsls	r3, r3, #23
 800ada6:	d50d      	bpl.n	800adc4 <_scanf_i+0x180>
 800ada8:	42bd      	cmp	r5, r7
 800adaa:	d909      	bls.n	800adc0 <_scanf_i+0x17c>
 800adac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800adb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adb4:	4632      	mov	r2, r6
 800adb6:	4650      	mov	r0, sl
 800adb8:	4798      	blx	r3
 800adba:	f105 39ff 	add.w	r9, r5, #4294967295
 800adbe:	464d      	mov	r5, r9
 800adc0:	42bd      	cmp	r5, r7
 800adc2:	d02d      	beq.n	800ae20 <_scanf_i+0x1dc>
 800adc4:	6822      	ldr	r2, [r4, #0]
 800adc6:	f012 0210 	ands.w	r2, r2, #16
 800adca:	d113      	bne.n	800adf4 <_scanf_i+0x1b0>
 800adcc:	702a      	strb	r2, [r5, #0]
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	9e01      	ldr	r6, [sp, #4]
 800add2:	4639      	mov	r1, r7
 800add4:	4650      	mov	r0, sl
 800add6:	47b0      	blx	r6
 800add8:	6821      	ldr	r1, [r4, #0]
 800adda:	f8d8 3000 	ldr.w	r3, [r8]
 800adde:	f011 0f20 	tst.w	r1, #32
 800ade2:	d013      	beq.n	800ae0c <_scanf_i+0x1c8>
 800ade4:	1d1a      	adds	r2, r3, #4
 800ade6:	f8c8 2000 	str.w	r2, [r8]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6018      	str	r0, [r3, #0]
 800adee:	68e3      	ldr	r3, [r4, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	60e3      	str	r3, [r4, #12]
 800adf4:	1bed      	subs	r5, r5, r7
 800adf6:	44ab      	add	fp, r5
 800adf8:	6925      	ldr	r5, [r4, #16]
 800adfa:	445d      	add	r5, fp
 800adfc:	6125      	str	r5, [r4, #16]
 800adfe:	2000      	movs	r0, #0
 800ae00:	b007      	add	sp, #28
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	f04f 0b00 	mov.w	fp, #0
 800ae0a:	e7ca      	b.n	800ada2 <_scanf_i+0x15e>
 800ae0c:	1d1a      	adds	r2, r3, #4
 800ae0e:	f8c8 2000 	str.w	r2, [r8]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f011 0f01 	tst.w	r1, #1
 800ae18:	bf14      	ite	ne
 800ae1a:	8018      	strhne	r0, [r3, #0]
 800ae1c:	6018      	streq	r0, [r3, #0]
 800ae1e:	e7e6      	b.n	800adee <_scanf_i+0x1aa>
 800ae20:	2001      	movs	r0, #1
 800ae22:	e7ed      	b.n	800ae00 <_scanf_i+0x1bc>
 800ae24:	0800b310 	.word	0x0800b310
 800ae28:	0800b06d 	.word	0x0800b06d
 800ae2c:	08007cb5 	.word	0x08007cb5
 800ae30:	0800bcbe 	.word	0x0800bcbe

0800ae34 <_putc_r>:
 800ae34:	b570      	push	{r4, r5, r6, lr}
 800ae36:	460d      	mov	r5, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	b118      	cbz	r0, 800ae46 <_putc_r+0x12>
 800ae3e:	6983      	ldr	r3, [r0, #24]
 800ae40:	b90b      	cbnz	r3, 800ae46 <_putc_r+0x12>
 800ae42:	f7fd ffb1 	bl	8008da8 <__sinit>
 800ae46:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <_putc_r+0x84>)
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d124      	bne.n	800ae96 <_putc_r+0x62>
 800ae4c:	6874      	ldr	r4, [r6, #4]
 800ae4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae50:	07d8      	lsls	r0, r3, #31
 800ae52:	d405      	bmi.n	800ae60 <_putc_r+0x2c>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	0599      	lsls	r1, r3, #22
 800ae58:	d402      	bmi.n	800ae60 <_putc_r+0x2c>
 800ae5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5c:	f7fe fbb5 	bl	80095ca <__retarget_lock_acquire_recursive>
 800ae60:	68a3      	ldr	r3, [r4, #8]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	60a3      	str	r3, [r4, #8]
 800ae68:	da05      	bge.n	800ae76 <_putc_r+0x42>
 800ae6a:	69a2      	ldr	r2, [r4, #24]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	db1c      	blt.n	800aeaa <_putc_r+0x76>
 800ae70:	b2eb      	uxtb	r3, r5
 800ae72:	2b0a      	cmp	r3, #10
 800ae74:	d019      	beq.n	800aeaa <_putc_r+0x76>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	701d      	strb	r5, [r3, #0]
 800ae7e:	b2ed      	uxtb	r5, r5
 800ae80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae82:	07da      	lsls	r2, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <_putc_r+0x5e>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	059b      	lsls	r3, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_putc_r+0x5e>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f7fe fb9d 	bl	80095cc <__retarget_lock_release_recursive>
 800ae92:	4628      	mov	r0, r5
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <_putc_r+0x88>)
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	d101      	bne.n	800aea0 <_putc_r+0x6c>
 800ae9c:	68b4      	ldr	r4, [r6, #8]
 800ae9e:	e7d6      	b.n	800ae4e <_putc_r+0x1a>
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <_putc_r+0x8c>)
 800aea2:	429c      	cmp	r4, r3
 800aea4:	bf08      	it	eq
 800aea6:	68f4      	ldreq	r4, [r6, #12]
 800aea8:	e7d1      	b.n	800ae4e <_putc_r+0x1a>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4622      	mov	r2, r4
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7fc ff02 	bl	8007cb8 <__swbuf_r>
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	e7e3      	b.n	800ae80 <_putc_r+0x4c>
 800aeb8:	0800ba7c 	.word	0x0800ba7c
 800aebc:	0800ba9c 	.word	0x0800ba9c
 800aec0:	0800ba5c 	.word	0x0800ba5c

0800aec4 <_read_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_read_r+0x20>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f7f7 fc3e 	bl	8002754 <_read>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_read_r+0x1e>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_read_r+0x1e>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	200009e8 	.word	0x200009e8

0800aee8 <nan>:
 800aee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aef0 <nan+0x8>
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	00000000 	.word	0x00000000
 800aef4:	7ff80000 	.word	0x7ff80000

0800aef8 <_sbrk_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_sbrk_r+0x1c>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	f7f7 fc4e 	bl	80027a4 <_sbrk>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_sbrk_r+0x1a>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_sbrk_r+0x1a>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	200009e8 	.word	0x200009e8

0800af18 <__sccl>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	780b      	ldrb	r3, [r1, #0]
 800af1c:	4604      	mov	r4, r0
 800af1e:	2b5e      	cmp	r3, #94	; 0x5e
 800af20:	bf0b      	itete	eq
 800af22:	784b      	ldrbeq	r3, [r1, #1]
 800af24:	1c48      	addne	r0, r1, #1
 800af26:	1c88      	addeq	r0, r1, #2
 800af28:	2200      	movne	r2, #0
 800af2a:	bf08      	it	eq
 800af2c:	2201      	moveq	r2, #1
 800af2e:	1e61      	subs	r1, r4, #1
 800af30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800af34:	f801 2f01 	strb.w	r2, [r1, #1]!
 800af38:	42a9      	cmp	r1, r5
 800af3a:	d1fb      	bne.n	800af34 <__sccl+0x1c>
 800af3c:	b90b      	cbnz	r3, 800af42 <__sccl+0x2a>
 800af3e:	3801      	subs	r0, #1
 800af40:	bd70      	pop	{r4, r5, r6, pc}
 800af42:	f082 0201 	eor.w	r2, r2, #1
 800af46:	54e2      	strb	r2, [r4, r3]
 800af48:	4605      	mov	r5, r0
 800af4a:	4628      	mov	r0, r5
 800af4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800af50:	292d      	cmp	r1, #45	; 0x2d
 800af52:	d006      	beq.n	800af62 <__sccl+0x4a>
 800af54:	295d      	cmp	r1, #93	; 0x5d
 800af56:	d0f3      	beq.n	800af40 <__sccl+0x28>
 800af58:	b909      	cbnz	r1, 800af5e <__sccl+0x46>
 800af5a:	4628      	mov	r0, r5
 800af5c:	e7f0      	b.n	800af40 <__sccl+0x28>
 800af5e:	460b      	mov	r3, r1
 800af60:	e7f1      	b.n	800af46 <__sccl+0x2e>
 800af62:	786e      	ldrb	r6, [r5, #1]
 800af64:	2e5d      	cmp	r6, #93	; 0x5d
 800af66:	d0fa      	beq.n	800af5e <__sccl+0x46>
 800af68:	42b3      	cmp	r3, r6
 800af6a:	dcf8      	bgt.n	800af5e <__sccl+0x46>
 800af6c:	3502      	adds	r5, #2
 800af6e:	4619      	mov	r1, r3
 800af70:	3101      	adds	r1, #1
 800af72:	428e      	cmp	r6, r1
 800af74:	5462      	strb	r2, [r4, r1]
 800af76:	dcfb      	bgt.n	800af70 <__sccl+0x58>
 800af78:	1af1      	subs	r1, r6, r3
 800af7a:	3901      	subs	r1, #1
 800af7c:	1c58      	adds	r0, r3, #1
 800af7e:	42b3      	cmp	r3, r6
 800af80:	bfa8      	it	ge
 800af82:	2100      	movge	r1, #0
 800af84:	1843      	adds	r3, r0, r1
 800af86:	e7e0      	b.n	800af4a <__sccl+0x32>

0800af88 <_strtoul_l.constprop.0>:
 800af88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af8c:	4f36      	ldr	r7, [pc, #216]	; (800b068 <_strtoul_l.constprop.0+0xe0>)
 800af8e:	4686      	mov	lr, r0
 800af90:	460d      	mov	r5, r1
 800af92:	4628      	mov	r0, r5
 800af94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af98:	5de6      	ldrb	r6, [r4, r7]
 800af9a:	f016 0608 	ands.w	r6, r6, #8
 800af9e:	d1f8      	bne.n	800af92 <_strtoul_l.constprop.0+0xa>
 800afa0:	2c2d      	cmp	r4, #45	; 0x2d
 800afa2:	d12f      	bne.n	800b004 <_strtoul_l.constprop.0+0x7c>
 800afa4:	782c      	ldrb	r4, [r5, #0]
 800afa6:	2601      	movs	r6, #1
 800afa8:	1c85      	adds	r5, r0, #2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d057      	beq.n	800b05e <_strtoul_l.constprop.0+0xd6>
 800afae:	2b10      	cmp	r3, #16
 800afb0:	d109      	bne.n	800afc6 <_strtoul_l.constprop.0+0x3e>
 800afb2:	2c30      	cmp	r4, #48	; 0x30
 800afb4:	d107      	bne.n	800afc6 <_strtoul_l.constprop.0+0x3e>
 800afb6:	7828      	ldrb	r0, [r5, #0]
 800afb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800afbc:	2858      	cmp	r0, #88	; 0x58
 800afbe:	d149      	bne.n	800b054 <_strtoul_l.constprop.0+0xcc>
 800afc0:	786c      	ldrb	r4, [r5, #1]
 800afc2:	2310      	movs	r3, #16
 800afc4:	3502      	adds	r5, #2
 800afc6:	f04f 38ff 	mov.w	r8, #4294967295
 800afca:	2700      	movs	r7, #0
 800afcc:	fbb8 f8f3 	udiv	r8, r8, r3
 800afd0:	fb03 f908 	mul.w	r9, r3, r8
 800afd4:	ea6f 0909 	mvn.w	r9, r9
 800afd8:	4638      	mov	r0, r7
 800afda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800afde:	f1bc 0f09 	cmp.w	ip, #9
 800afe2:	d814      	bhi.n	800b00e <_strtoul_l.constprop.0+0x86>
 800afe4:	4664      	mov	r4, ip
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	dd22      	ble.n	800b030 <_strtoul_l.constprop.0+0xa8>
 800afea:	2f00      	cmp	r7, #0
 800afec:	db1d      	blt.n	800b02a <_strtoul_l.constprop.0+0xa2>
 800afee:	4580      	cmp	r8, r0
 800aff0:	d31b      	bcc.n	800b02a <_strtoul_l.constprop.0+0xa2>
 800aff2:	d101      	bne.n	800aff8 <_strtoul_l.constprop.0+0x70>
 800aff4:	45a1      	cmp	r9, r4
 800aff6:	db18      	blt.n	800b02a <_strtoul_l.constprop.0+0xa2>
 800aff8:	fb00 4003 	mla	r0, r0, r3, r4
 800affc:	2701      	movs	r7, #1
 800affe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b002:	e7ea      	b.n	800afda <_strtoul_l.constprop.0+0x52>
 800b004:	2c2b      	cmp	r4, #43	; 0x2b
 800b006:	bf04      	itt	eq
 800b008:	782c      	ldrbeq	r4, [r5, #0]
 800b00a:	1c85      	addeq	r5, r0, #2
 800b00c:	e7cd      	b.n	800afaa <_strtoul_l.constprop.0+0x22>
 800b00e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b012:	f1bc 0f19 	cmp.w	ip, #25
 800b016:	d801      	bhi.n	800b01c <_strtoul_l.constprop.0+0x94>
 800b018:	3c37      	subs	r4, #55	; 0x37
 800b01a:	e7e4      	b.n	800afe6 <_strtoul_l.constprop.0+0x5e>
 800b01c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b020:	f1bc 0f19 	cmp.w	ip, #25
 800b024:	d804      	bhi.n	800b030 <_strtoul_l.constprop.0+0xa8>
 800b026:	3c57      	subs	r4, #87	; 0x57
 800b028:	e7dd      	b.n	800afe6 <_strtoul_l.constprop.0+0x5e>
 800b02a:	f04f 37ff 	mov.w	r7, #4294967295
 800b02e:	e7e6      	b.n	800affe <_strtoul_l.constprop.0+0x76>
 800b030:	2f00      	cmp	r7, #0
 800b032:	da07      	bge.n	800b044 <_strtoul_l.constprop.0+0xbc>
 800b034:	2322      	movs	r3, #34	; 0x22
 800b036:	f8ce 3000 	str.w	r3, [lr]
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	b932      	cbnz	r2, 800b04e <_strtoul_l.constprop.0+0xc6>
 800b040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b044:	b106      	cbz	r6, 800b048 <_strtoul_l.constprop.0+0xc0>
 800b046:	4240      	negs	r0, r0
 800b048:	2a00      	cmp	r2, #0
 800b04a:	d0f9      	beq.n	800b040 <_strtoul_l.constprop.0+0xb8>
 800b04c:	b107      	cbz	r7, 800b050 <_strtoul_l.constprop.0+0xc8>
 800b04e:	1e69      	subs	r1, r5, #1
 800b050:	6011      	str	r1, [r2, #0]
 800b052:	e7f5      	b.n	800b040 <_strtoul_l.constprop.0+0xb8>
 800b054:	2430      	movs	r4, #48	; 0x30
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1b5      	bne.n	800afc6 <_strtoul_l.constprop.0+0x3e>
 800b05a:	2308      	movs	r3, #8
 800b05c:	e7b3      	b.n	800afc6 <_strtoul_l.constprop.0+0x3e>
 800b05e:	2c30      	cmp	r4, #48	; 0x30
 800b060:	d0a9      	beq.n	800afb6 <_strtoul_l.constprop.0+0x2e>
 800b062:	230a      	movs	r3, #10
 800b064:	e7af      	b.n	800afc6 <_strtoul_l.constprop.0+0x3e>
 800b066:	bf00      	nop
 800b068:	0800b8c9 	.word	0x0800b8c9

0800b06c <_strtoul_r>:
 800b06c:	f7ff bf8c 	b.w	800af88 <_strtoul_l.constprop.0>

0800b070 <__submore>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b07c:	4299      	cmp	r1, r3
 800b07e:	d11d      	bne.n	800b0bc <__submore+0x4c>
 800b080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b084:	f7ff f888 	bl	800a198 <_malloc_r>
 800b088:	b918      	cbnz	r0, 800b092 <__submore+0x22>
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b096:	63a3      	str	r3, [r4, #56]	; 0x38
 800b098:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b09c:	6360      	str	r0, [r4, #52]	; 0x34
 800b09e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b0a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b0a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b0aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b0ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b0b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b0b6:	6020      	str	r0, [r4, #0]
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e7e8      	b.n	800b08e <__submore+0x1e>
 800b0bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b0be:	0077      	lsls	r7, r6, #1
 800b0c0:	463a      	mov	r2, r7
 800b0c2:	f000 f895 	bl	800b1f0 <_realloc_r>
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0de      	beq.n	800b08a <__submore+0x1a>
 800b0cc:	eb00 0806 	add.w	r8, r0, r6
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f7fe fb0d 	bl	80096f4 <memcpy>
 800b0da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b0de:	f8c4 8000 	str.w	r8, [r4]
 800b0e2:	e7e9      	b.n	800b0b8 <__submore+0x48>

0800b0e4 <__ascii_wctomb>:
 800b0e4:	b149      	cbz	r1, 800b0fa <__ascii_wctomb+0x16>
 800b0e6:	2aff      	cmp	r2, #255	; 0xff
 800b0e8:	bf85      	ittet	hi
 800b0ea:	238a      	movhi	r3, #138	; 0x8a
 800b0ec:	6003      	strhi	r3, [r0, #0]
 800b0ee:	700a      	strbls	r2, [r1, #0]
 800b0f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0f4:	bf98      	it	ls
 800b0f6:	2001      	movls	r0, #1
 800b0f8:	4770      	bx	lr
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	4770      	bx	lr
	...

0800b100 <__assert_func>:
 800b100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b102:	4614      	mov	r4, r2
 800b104:	461a      	mov	r2, r3
 800b106:	4b09      	ldr	r3, [pc, #36]	; (800b12c <__assert_func+0x2c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4605      	mov	r5, r0
 800b10c:	68d8      	ldr	r0, [r3, #12]
 800b10e:	b14c      	cbz	r4, 800b124 <__assert_func+0x24>
 800b110:	4b07      	ldr	r3, [pc, #28]	; (800b130 <__assert_func+0x30>)
 800b112:	9100      	str	r1, [sp, #0]
 800b114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b118:	4906      	ldr	r1, [pc, #24]	; (800b134 <__assert_func+0x34>)
 800b11a:	462b      	mov	r3, r5
 800b11c:	f000 f80e 	bl	800b13c <fiprintf>
 800b120:	f000 f895 	bl	800b24e <abort>
 800b124:	4b04      	ldr	r3, [pc, #16]	; (800b138 <__assert_func+0x38>)
 800b126:	461c      	mov	r4, r3
 800b128:	e7f3      	b.n	800b112 <__assert_func+0x12>
 800b12a:	bf00      	nop
 800b12c:	20000040 	.word	0x20000040
 800b130:	0800bcc0 	.word	0x0800bcc0
 800b134:	0800bccd 	.word	0x0800bccd
 800b138:	0800b6d7 	.word	0x0800b6d7

0800b13c <fiprintf>:
 800b13c:	b40e      	push	{r1, r2, r3}
 800b13e:	b503      	push	{r0, r1, lr}
 800b140:	4601      	mov	r1, r0
 800b142:	ab03      	add	r3, sp, #12
 800b144:	4805      	ldr	r0, [pc, #20]	; (800b15c <fiprintf+0x20>)
 800b146:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14a:	6800      	ldr	r0, [r0, #0]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	f7ff fbef 	bl	800a930 <_vfiprintf_r>
 800b152:	b002      	add	sp, #8
 800b154:	f85d eb04 	ldr.w	lr, [sp], #4
 800b158:	b003      	add	sp, #12
 800b15a:	4770      	bx	lr
 800b15c:	20000040 	.word	0x20000040

0800b160 <_fstat_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d07      	ldr	r5, [pc, #28]	; (800b180 <_fstat_r+0x20>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f7f7 fb10 	bl	8002792 <_fstat>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d102      	bne.n	800b17c <_fstat_r+0x1c>
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	b103      	cbz	r3, 800b17c <_fstat_r+0x1c>
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	bd38      	pop	{r3, r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	200009e8 	.word	0x200009e8

0800b184 <_isatty_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d06      	ldr	r5, [pc, #24]	; (800b1a0 <_isatty_r+0x1c>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	f7f7 fb04 	bl	800279c <_isatty>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_isatty_r+0x1a>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_isatty_r+0x1a>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	200009e8 	.word	0x200009e8

0800b1a4 <memmove>:
 800b1a4:	4288      	cmp	r0, r1
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	eb01 0402 	add.w	r4, r1, r2
 800b1ac:	d902      	bls.n	800b1b4 <memmove+0x10>
 800b1ae:	4284      	cmp	r4, r0
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	d807      	bhi.n	800b1c4 <memmove+0x20>
 800b1b4:	1e43      	subs	r3, r0, #1
 800b1b6:	42a1      	cmp	r1, r4
 800b1b8:	d008      	beq.n	800b1cc <memmove+0x28>
 800b1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c2:	e7f8      	b.n	800b1b6 <memmove+0x12>
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	d100      	bne.n	800b1ce <memmove+0x2a>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d6:	e7f7      	b.n	800b1c8 <memmove+0x24>

0800b1d8 <__malloc_lock>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__malloc_lock+0x8>)
 800b1da:	f7fe b9f6 	b.w	80095ca <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	200009dc 	.word	0x200009dc

0800b1e4 <__malloc_unlock>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__malloc_unlock+0x8>)
 800b1e6:	f7fe b9f1 	b.w	80095cc <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200009dc 	.word	0x200009dc

0800b1f0 <_realloc_r>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	4614      	mov	r4, r2
 800b1f8:	460e      	mov	r6, r1
 800b1fa:	b921      	cbnz	r1, 800b206 <_realloc_r+0x16>
 800b1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	4611      	mov	r1, r2
 800b202:	f7fe bfc9 	b.w	800a198 <_malloc_r>
 800b206:	b92a      	cbnz	r2, 800b214 <_realloc_r+0x24>
 800b208:	f7fe ff5a 	bl	800a0c0 <_free_r>
 800b20c:	4625      	mov	r5, r4
 800b20e:	4628      	mov	r0, r5
 800b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b214:	f000 f822 	bl	800b25c <_malloc_usable_size_r>
 800b218:	4284      	cmp	r4, r0
 800b21a:	4607      	mov	r7, r0
 800b21c:	d802      	bhi.n	800b224 <_realloc_r+0x34>
 800b21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b222:	d812      	bhi.n	800b24a <_realloc_r+0x5a>
 800b224:	4621      	mov	r1, r4
 800b226:	4640      	mov	r0, r8
 800b228:	f7fe ffb6 	bl	800a198 <_malloc_r>
 800b22c:	4605      	mov	r5, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0ed      	beq.n	800b20e <_realloc_r+0x1e>
 800b232:	42bc      	cmp	r4, r7
 800b234:	4622      	mov	r2, r4
 800b236:	4631      	mov	r1, r6
 800b238:	bf28      	it	cs
 800b23a:	463a      	movcs	r2, r7
 800b23c:	f7fe fa5a 	bl	80096f4 <memcpy>
 800b240:	4631      	mov	r1, r6
 800b242:	4640      	mov	r0, r8
 800b244:	f7fe ff3c 	bl	800a0c0 <_free_r>
 800b248:	e7e1      	b.n	800b20e <_realloc_r+0x1e>
 800b24a:	4635      	mov	r5, r6
 800b24c:	e7df      	b.n	800b20e <_realloc_r+0x1e>

0800b24e <abort>:
 800b24e:	b508      	push	{r3, lr}
 800b250:	2006      	movs	r0, #6
 800b252:	f000 f833 	bl	800b2bc <raise>
 800b256:	2001      	movs	r0, #1
 800b258:	f7f7 fa76 	bl	8002748 <_exit>

0800b25c <_malloc_usable_size_r>:
 800b25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b260:	1f18      	subs	r0, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	bfbc      	itt	lt
 800b266:	580b      	ldrlt	r3, [r1, r0]
 800b268:	18c0      	addlt	r0, r0, r3
 800b26a:	4770      	bx	lr

0800b26c <_raise_r>:
 800b26c:	291f      	cmp	r1, #31
 800b26e:	b538      	push	{r3, r4, r5, lr}
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	d904      	bls.n	800b280 <_raise_r+0x14>
 800b276:	2316      	movs	r3, #22
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b282:	b112      	cbz	r2, 800b28a <_raise_r+0x1e>
 800b284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b288:	b94b      	cbnz	r3, 800b29e <_raise_r+0x32>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f830 	bl	800b2f0 <_getpid_r>
 800b290:	462a      	mov	r2, r5
 800b292:	4601      	mov	r1, r0
 800b294:	4620      	mov	r0, r4
 800b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29a:	f000 b817 	b.w	800b2cc <_kill_r>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d00a      	beq.n	800b2b8 <_raise_r+0x4c>
 800b2a2:	1c59      	adds	r1, r3, #1
 800b2a4:	d103      	bne.n	800b2ae <_raise_r+0x42>
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7e7      	b.n	800b27e <_raise_r+0x12>
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	4798      	blx	r3
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7e0      	b.n	800b27e <_raise_r+0x12>

0800b2bc <raise>:
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <raise+0xc>)
 800b2be:	4601      	mov	r1, r0
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	f7ff bfd3 	b.w	800b26c <_raise_r>
 800b2c6:	bf00      	nop
 800b2c8:	20000040 	.word	0x20000040

0800b2cc <_kill_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_kill_r+0x20>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	f7f7 fa2d 	bl	8002738 <_kill>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d102      	bne.n	800b2e8 <_kill_r+0x1c>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	b103      	cbz	r3, 800b2e8 <_kill_r+0x1c>
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200009e8 	.word	0x200009e8

0800b2f0 <_getpid_r>:
 800b2f0:	f7f7 ba20 	b.w	8002734 <_getpid>

0800b2f4 <_init>:
 800b2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f6:	bf00      	nop
 800b2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fa:	bc08      	pop	{r3}
 800b2fc:	469e      	mov	lr, r3
 800b2fe:	4770      	bx	lr

0800b300 <_fini>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	bf00      	nop
 800b304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b306:	bc08      	pop	{r3}
 800b308:	469e      	mov	lr, r3
 800b30a:	4770      	bx	lr
